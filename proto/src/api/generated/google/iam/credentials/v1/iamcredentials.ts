// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/iam/credentials/v1/iamcredentials.proto

/* eslint-disable */
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GenerateAccessTokenRequest,
  GenerateAccessTokenResponse,
  GenerateIdTokenRequest,
  GenerateIdTokenResponse,
  SignBlobRequest,
  SignBlobResponse,
  SignJwtRequest,
  SignJwtResponse,
} from "./common.js";

export const protobufPackage = "google.iam.credentials.v1";

/**
 * A service account is a special type of Google account that belongs to your
 * application or a virtual machine (VM), instead of to an individual end user.
 * Your application assumes the identity of the service account to call Google
 * APIs, so that the users aren't directly involved.
 *
 * Service account credentials are used to temporarily assume the identity
 * of the service account. Supported credential types include OAuth 2.0 access
 * tokens, OpenID Connect ID tokens, self-signed JSON Web Tokens (JWTs), and
 * more.
 */
export type IAMCredentialsDefinition = typeof IAMCredentialsDefinition;
export const IAMCredentialsDefinition = {
  name: "IAMCredentials",
  fullName: "google.iam.credentials.v1.IAMCredentials",
  methods: {
    /** Generates an OAuth 2.0 access token for a service account. */
    generateAccessToken: {
      name: "GenerateAccessToken",
      requestType: GenerateAccessTokenRequest,
      requestStream: false,
      responseType: GenerateAccessTokenResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              29,
              110,
              97,
              109,
              101,
              44,
              100,
              101,
              108,
              101,
              103,
              97,
              116,
              101,
              115,
              44,
              115,
              99,
              111,
              112,
              101,
              44,
              108,
              105,
              102,
              101,
              116,
              105,
              109,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              64,
              58,
              1,
              42,
              34,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              65,
              99,
              99,
              101,
              115,
              115,
              84,
              111,
              107,
              101,
              110,
            ]),
          ],
        },
      },
    },
    /** Generates an OpenID Connect ID token for a service account. */
    generateIdToken: {
      name: "GenerateIdToken",
      requestType: GenerateIdTokenRequest,
      requestStream: false,
      responseType: GenerateIdTokenResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              37,
              110,
              97,
              109,
              101,
              44,
              100,
              101,
              108,
              101,
              103,
              97,
              116,
              101,
              115,
              44,
              97,
              117,
              100,
              105,
              101,
              110,
              99,
              101,
              44,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              95,
              101,
              109,
              97,
              105,
              108,
            ]),
          ],
          578365826: [
            Buffer.from([
              60,
              58,
              1,
              42,
              34,
              55,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              73,
              100,
              84,
              111,
              107,
              101,
              110,
            ]),
          ],
        },
      },
    },
    /** Signs a blob using a service account's system-managed private key. */
    signBlob: {
      name: "SignBlob",
      requestType: SignBlobRequest,
      requestStream: false,
      responseType: SignBlobResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              110,
              97,
              109,
              101,
              44,
              100,
              101,
              108,
              101,
              103,
              97,
              116,
              101,
              115,
              44,
              112,
              97,
              121,
              108,
              111,
              97,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              53,
              58,
              1,
              42,
              34,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              115,
              105,
              103,
              110,
              66,
              108,
              111,
              98,
            ]),
          ],
        },
      },
    },
    /** Signs a JWT using a service account's system-managed private key. */
    signJwt: {
      name: "SignJwt",
      requestType: SignJwtRequest,
      requestStream: false,
      responseType: SignJwtResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              110,
              97,
              109,
              101,
              44,
              100,
              101,
              108,
              101,
              103,
              97,
              116,
              101,
              115,
              44,
              112,
              97,
              121,
              108,
              111,
              97,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              52,
              58,
              1,
              42,
              34,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              115,
              105,
              103,
              110,
              74,
              119,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface IAMCredentialsServiceImplementation<CallContextExt = {}> {
  /** Generates an OAuth 2.0 access token for a service account. */
  generateAccessToken(
    request: GenerateAccessTokenRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateAccessTokenResponse>>;
  /** Generates an OpenID Connect ID token for a service account. */
  generateIdToken(
    request: GenerateIdTokenRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateIdTokenResponse>>;
  /** Signs a blob using a service account's system-managed private key. */
  signBlob(request: SignBlobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SignBlobResponse>>;
  /** Signs a JWT using a service account's system-managed private key. */
  signJwt(request: SignJwtRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SignJwtResponse>>;
}

export interface IAMCredentialsClient<CallOptionsExt = {}> {
  /** Generates an OAuth 2.0 access token for a service account. */
  generateAccessToken(
    request: DeepPartial<GenerateAccessTokenRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateAccessTokenResponse>;
  /** Generates an OpenID Connect ID token for a service account. */
  generateIdToken(
    request: DeepPartial<GenerateIdTokenRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateIdTokenResponse>;
  /** Signs a blob using a service account's system-managed private key. */
  signBlob(request: DeepPartial<SignBlobRequest>, options?: CallOptions & CallOptionsExt): Promise<SignBlobResponse>;
  /** Signs a JWT using a service account's system-managed private key. */
  signJwt(request: DeepPartial<SignJwtRequest>, options?: CallOptions & CallOptionsExt): Promise<SignJwtResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;
