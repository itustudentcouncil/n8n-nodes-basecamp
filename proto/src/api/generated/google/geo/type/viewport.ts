// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/geo/type/viewport.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { LatLng } from "../../type/latlng.js";

export const protobufPackage = "google.geo.type";

/**
 * A latitude-longitude viewport, represented as two diagonally opposite `low`
 * and `high` points. A viewport is considered a closed region, i.e. it includes
 * its boundary. The latitude bounds must range between -90 to 90 degrees
 * inclusive, and the longitude bounds must range between -180 to 180 degrees
 * inclusive. Various cases include:
 *
 *  - If `low` = `high`, the viewport consists of that single point.
 *
 *  - If `low.longitude` > `high.longitude`, the longitude range is inverted
 *    (the viewport crosses the 180 degree longitude line).
 *
 *  - If `low.longitude` = -180 degrees and `high.longitude` = 180 degrees,
 *    the viewport includes all longitudes.
 *
 *  - If `low.longitude` = 180 degrees and `high.longitude` = -180 degrees,
 *    the longitude range is empty.
 *
 *  - If `low.latitude` > `high.latitude`, the latitude range is empty.
 *
 * Both `low` and `high` must be populated, and the represented box cannot be
 * empty (as specified by the definitions above). An empty viewport will result
 * in an error.
 *
 * For example, this viewport fully encloses New York City:
 *
 * {
 *     "low": {
 *         "latitude": 40.477398,
 *         "longitude": -74.259087
 *     },
 *     "high": {
 *         "latitude": 40.91618,
 *         "longitude": -73.70018
 *     }
 * }
 */
export interface Viewport {
  /** Required. The low point of the viewport. */
  low:
    | LatLng
    | undefined;
  /** Required. The high point of the viewport. */
  high: LatLng | undefined;
}

function createBaseViewport(): Viewport {
  return { low: undefined, high: undefined };
}

export const Viewport: MessageFns<Viewport> = {
  encode(message: Viewport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.low !== undefined) {
      LatLng.encode(message.low, writer.uint32(10).fork()).join();
    }
    if (message.high !== undefined) {
      LatLng.encode(message.high, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Viewport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViewport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.low = LatLng.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.high = LatLng.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Viewport {
    return {
      low: isSet(object.low) ? LatLng.fromJSON(object.low) : undefined,
      high: isSet(object.high) ? LatLng.fromJSON(object.high) : undefined,
    };
  },

  toJSON(message: Viewport): unknown {
    const obj: any = {};
    if (message.low !== undefined) {
      obj.low = LatLng.toJSON(message.low);
    }
    if (message.high !== undefined) {
      obj.high = LatLng.toJSON(message.high);
    }
    return obj;
  },

  create(base?: DeepPartial<Viewport>): Viewport {
    return Viewport.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Viewport>): Viewport {
    const message = createBaseViewport();
    message.low = (object.low !== undefined && object.low !== null) ? LatLng.fromPartial(object.low) : undefined;
    message.high = (object.high !== undefined && object.high !== null) ? LatLng.fromPartial(object.high) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
