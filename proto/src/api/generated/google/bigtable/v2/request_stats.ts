// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/bigtable/v2/request_stats.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../protobuf/duration.js";

export const protobufPackage = "google.bigtable.v2";

/**
 * ReadIterationStats captures information about the iteration of rows or cells
 * over the course of a read, e.g. how many results were scanned in a read
 * operation versus the results returned.
 */
export interface ReadIterationStats {
  /**
   * The rows seen (scanned) as part of the request. This includes the count of
   * rows returned, as captured below.
   */
  rowsSeenCount: Long;
  /** The rows returned as part of the request. */
  rowsReturnedCount: Long;
  /**
   * The cells seen (scanned) as part of the request. This includes the count of
   * cells returned, as captured below.
   */
  cellsSeenCount: Long;
  /** The cells returned as part of the request. */
  cellsReturnedCount: Long;
}

/**
 * RequestLatencyStats provides a measurement of the latency of the request as
 * it interacts with different systems over its lifetime, e.g. how long the
 * request took to execute within a frontend server.
 */
export interface RequestLatencyStats {
  /**
   * The latency measured by the frontend server handling this request, from
   * when the request was received, to when this value is sent back in the
   * response. For more context on the component that is measuring this latency,
   * see: https://cloud.google.com/bigtable/docs/overview
   *
   * Note: This value may be slightly shorter than the value reported into
   * aggregate latency metrics in Monitoring for this request
   * (https://cloud.google.com/bigtable/docs/monitoring-instance) as this value
   * needs to be sent in the response before the latency measurement including
   * that transmission is finalized.
   *
   * Note: This value includes the end-to-end latency of contacting nodes in
   * the targeted cluster, e.g. measuring from when the first byte arrives at
   * the frontend server, to when this value is sent back as the last value in
   * the response, including any latency incurred by contacting nodes, waiting
   * for results from nodes, and finally sending results from nodes back to the
   * caller.
   */
  frontendServerLatency: Duration | undefined;
}

/** FullReadStatsView captures all known information about a read. */
export interface FullReadStatsView {
  /**
   * Iteration stats describe how efficient the read is, e.g. comparing
   * rows seen vs. rows returned or cells seen vs cells returned can provide an
   * indication of read efficiency (the higher the ratio of seen to retuned the
   * better).
   */
  readIterationStats:
    | ReadIterationStats
    | undefined;
  /**
   * Request latency stats describe the time taken to complete a request, from
   * the server side.
   */
  requestLatencyStats: RequestLatencyStats | undefined;
}

/**
 * RequestStats is the container for additional information pertaining to a
 * single request, helpful for evaluating the performance of the sent request.
 * Currently, there are the following supported methods:
 *   * google.bigtable.v2.ReadRows
 */
export interface RequestStats {
  /**
   * Available with the ReadRowsRequest.RequestStatsView.REQUEST_STATS_FULL
   * view, see package google.bigtable.v2.
   */
  fullReadStatsView?: FullReadStatsView | undefined;
}

function createBaseReadIterationStats(): ReadIterationStats {
  return {
    rowsSeenCount: Long.ZERO,
    rowsReturnedCount: Long.ZERO,
    cellsSeenCount: Long.ZERO,
    cellsReturnedCount: Long.ZERO,
  };
}

export const ReadIterationStats: MessageFns<ReadIterationStats> = {
  encode(message: ReadIterationStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.rowsSeenCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.rowsSeenCount.toString());
    }
    if (!message.rowsReturnedCount.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.rowsReturnedCount.toString());
    }
    if (!message.cellsSeenCount.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.cellsSeenCount.toString());
    }
    if (!message.cellsReturnedCount.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.cellsReturnedCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadIterationStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadIterationStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.rowsSeenCount = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.rowsReturnedCount = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.cellsSeenCount = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.cellsReturnedCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadIterationStats {
    return {
      rowsSeenCount: isSet(object.rowsSeenCount) ? Long.fromValue(object.rowsSeenCount) : Long.ZERO,
      rowsReturnedCount: isSet(object.rowsReturnedCount) ? Long.fromValue(object.rowsReturnedCount) : Long.ZERO,
      cellsSeenCount: isSet(object.cellsSeenCount) ? Long.fromValue(object.cellsSeenCount) : Long.ZERO,
      cellsReturnedCount: isSet(object.cellsReturnedCount) ? Long.fromValue(object.cellsReturnedCount) : Long.ZERO,
    };
  },

  toJSON(message: ReadIterationStats): unknown {
    const obj: any = {};
    if (!message.rowsSeenCount.equals(Long.ZERO)) {
      obj.rowsSeenCount = (message.rowsSeenCount || Long.ZERO).toString();
    }
    if (!message.rowsReturnedCount.equals(Long.ZERO)) {
      obj.rowsReturnedCount = (message.rowsReturnedCount || Long.ZERO).toString();
    }
    if (!message.cellsSeenCount.equals(Long.ZERO)) {
      obj.cellsSeenCount = (message.cellsSeenCount || Long.ZERO).toString();
    }
    if (!message.cellsReturnedCount.equals(Long.ZERO)) {
      obj.cellsReturnedCount = (message.cellsReturnedCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<ReadIterationStats>): ReadIterationStats {
    return ReadIterationStats.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadIterationStats>): ReadIterationStats {
    const message = createBaseReadIterationStats();
    message.rowsSeenCount = (object.rowsSeenCount !== undefined && object.rowsSeenCount !== null)
      ? Long.fromValue(object.rowsSeenCount)
      : Long.ZERO;
    message.rowsReturnedCount = (object.rowsReturnedCount !== undefined && object.rowsReturnedCount !== null)
      ? Long.fromValue(object.rowsReturnedCount)
      : Long.ZERO;
    message.cellsSeenCount = (object.cellsSeenCount !== undefined && object.cellsSeenCount !== null)
      ? Long.fromValue(object.cellsSeenCount)
      : Long.ZERO;
    message.cellsReturnedCount = (object.cellsReturnedCount !== undefined && object.cellsReturnedCount !== null)
      ? Long.fromValue(object.cellsReturnedCount)
      : Long.ZERO;
    return message;
  },
};

function createBaseRequestLatencyStats(): RequestLatencyStats {
  return { frontendServerLatency: undefined };
}

export const RequestLatencyStats: MessageFns<RequestLatencyStats> = {
  encode(message: RequestLatencyStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.frontendServerLatency !== undefined) {
      Duration.encode(message.frontendServerLatency, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestLatencyStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestLatencyStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.frontendServerLatency = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestLatencyStats {
    return {
      frontendServerLatency: isSet(object.frontendServerLatency)
        ? Duration.fromJSON(object.frontendServerLatency)
        : undefined,
    };
  },

  toJSON(message: RequestLatencyStats): unknown {
    const obj: any = {};
    if (message.frontendServerLatency !== undefined) {
      obj.frontendServerLatency = Duration.toJSON(message.frontendServerLatency);
    }
    return obj;
  },

  create(base?: DeepPartial<RequestLatencyStats>): RequestLatencyStats {
    return RequestLatencyStats.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RequestLatencyStats>): RequestLatencyStats {
    const message = createBaseRequestLatencyStats();
    message.frontendServerLatency =
      (object.frontendServerLatency !== undefined && object.frontendServerLatency !== null)
        ? Duration.fromPartial(object.frontendServerLatency)
        : undefined;
    return message;
  },
};

function createBaseFullReadStatsView(): FullReadStatsView {
  return { readIterationStats: undefined, requestLatencyStats: undefined };
}

export const FullReadStatsView: MessageFns<FullReadStatsView> = {
  encode(message: FullReadStatsView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.readIterationStats !== undefined) {
      ReadIterationStats.encode(message.readIterationStats, writer.uint32(10).fork()).join();
    }
    if (message.requestLatencyStats !== undefined) {
      RequestLatencyStats.encode(message.requestLatencyStats, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FullReadStatsView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFullReadStatsView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.readIterationStats = ReadIterationStats.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestLatencyStats = RequestLatencyStats.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FullReadStatsView {
    return {
      readIterationStats: isSet(object.readIterationStats)
        ? ReadIterationStats.fromJSON(object.readIterationStats)
        : undefined,
      requestLatencyStats: isSet(object.requestLatencyStats)
        ? RequestLatencyStats.fromJSON(object.requestLatencyStats)
        : undefined,
    };
  },

  toJSON(message: FullReadStatsView): unknown {
    const obj: any = {};
    if (message.readIterationStats !== undefined) {
      obj.readIterationStats = ReadIterationStats.toJSON(message.readIterationStats);
    }
    if (message.requestLatencyStats !== undefined) {
      obj.requestLatencyStats = RequestLatencyStats.toJSON(message.requestLatencyStats);
    }
    return obj;
  },

  create(base?: DeepPartial<FullReadStatsView>): FullReadStatsView {
    return FullReadStatsView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FullReadStatsView>): FullReadStatsView {
    const message = createBaseFullReadStatsView();
    message.readIterationStats = (object.readIterationStats !== undefined && object.readIterationStats !== null)
      ? ReadIterationStats.fromPartial(object.readIterationStats)
      : undefined;
    message.requestLatencyStats = (object.requestLatencyStats !== undefined && object.requestLatencyStats !== null)
      ? RequestLatencyStats.fromPartial(object.requestLatencyStats)
      : undefined;
    return message;
  },
};

function createBaseRequestStats(): RequestStats {
  return { fullReadStatsView: undefined };
}

export const RequestStats: MessageFns<RequestStats> = {
  encode(message: RequestStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fullReadStatsView !== undefined) {
      FullReadStatsView.encode(message.fullReadStatsView, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fullReadStatsView = FullReadStatsView.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestStats {
    return {
      fullReadStatsView: isSet(object.fullReadStatsView)
        ? FullReadStatsView.fromJSON(object.fullReadStatsView)
        : undefined,
    };
  },

  toJSON(message: RequestStats): unknown {
    const obj: any = {};
    if (message.fullReadStatsView !== undefined) {
      obj.fullReadStatsView = FullReadStatsView.toJSON(message.fullReadStatsView);
    }
    return obj;
  },

  create(base?: DeepPartial<RequestStats>): RequestStats {
    return RequestStats.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RequestStats>): RequestStats {
    const message = createBaseRequestStats();
    message.fullReadStatsView = (object.fullReadStatsView !== undefined && object.fullReadStatsView !== null)
      ? FullReadStatsView.fromPartial(object.fullReadStatsView)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
