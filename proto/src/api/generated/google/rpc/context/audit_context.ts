// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/rpc/context/audit_context.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../protobuf/struct.js";

export const protobufPackage = "google.rpc.context";

/** `AuditContext` provides information that is needed for audit logging. */
export interface AuditContext {
  /** Serialized audit log. */
  auditLog: Buffer;
  /**
   * An API request message that is scrubbed based on the method annotation.
   * This field should only be filled if audit_log field is present.
   * Service Control will use this to assemble a complete log for Cloud Audit
   * Logs and Google internal audit logs.
   */
  scrubbedRequest:
    | { [key: string]: any }
    | undefined;
  /**
   * An API response message that is scrubbed based on the method annotation.
   * This field should only be filled if audit_log field is present.
   * Service Control will use this to assemble a complete log for Cloud Audit
   * Logs and Google internal audit logs.
   */
  scrubbedResponse:
    | { [key: string]: any }
    | undefined;
  /** Number of scrubbed response items. */
  scrubbedResponseItemCount: number;
  /** Audit resource name which is scrubbed. */
  targetResource: string;
}

function createBaseAuditContext(): AuditContext {
  return {
    auditLog: Buffer.alloc(0),
    scrubbedRequest: undefined,
    scrubbedResponse: undefined,
    scrubbedResponseItemCount: 0,
    targetResource: "",
  };
}

export const AuditContext: MessageFns<AuditContext> = {
  encode(message: AuditContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.auditLog.length !== 0) {
      writer.uint32(10).bytes(message.auditLog);
    }
    if (message.scrubbedRequest !== undefined) {
      Struct.encode(Struct.wrap(message.scrubbedRequest), writer.uint32(18).fork()).join();
    }
    if (message.scrubbedResponse !== undefined) {
      Struct.encode(Struct.wrap(message.scrubbedResponse), writer.uint32(26).fork()).join();
    }
    if (message.scrubbedResponseItemCount !== 0) {
      writer.uint32(32).int32(message.scrubbedResponseItemCount);
    }
    if (message.targetResource !== "") {
      writer.uint32(42).string(message.targetResource);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuditContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuditContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.auditLog = Buffer.from(reader.bytes());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.scrubbedRequest = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.scrubbedResponse = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.scrubbedResponseItemCount = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.targetResource = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuditContext {
    return {
      auditLog: isSet(object.auditLog) ? Buffer.from(bytesFromBase64(object.auditLog)) : Buffer.alloc(0),
      scrubbedRequest: isObject(object.scrubbedRequest) ? object.scrubbedRequest : undefined,
      scrubbedResponse: isObject(object.scrubbedResponse) ? object.scrubbedResponse : undefined,
      scrubbedResponseItemCount: isSet(object.scrubbedResponseItemCount)
        ? globalThis.Number(object.scrubbedResponseItemCount)
        : 0,
      targetResource: isSet(object.targetResource) ? globalThis.String(object.targetResource) : "",
    };
  },

  toJSON(message: AuditContext): unknown {
    const obj: any = {};
    if (message.auditLog.length !== 0) {
      obj.auditLog = base64FromBytes(message.auditLog);
    }
    if (message.scrubbedRequest !== undefined) {
      obj.scrubbedRequest = message.scrubbedRequest;
    }
    if (message.scrubbedResponse !== undefined) {
      obj.scrubbedResponse = message.scrubbedResponse;
    }
    if (message.scrubbedResponseItemCount !== 0) {
      obj.scrubbedResponseItemCount = Math.round(message.scrubbedResponseItemCount);
    }
    if (message.targetResource !== "") {
      obj.targetResource = message.targetResource;
    }
    return obj;
  },

  create(base?: DeepPartial<AuditContext>): AuditContext {
    return AuditContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuditContext>): AuditContext {
    const message = createBaseAuditContext();
    message.auditLog = object.auditLog ?? Buffer.alloc(0);
    message.scrubbedRequest = object.scrubbedRequest ?? undefined;
    message.scrubbedResponse = object.scrubbedResponse ?? undefined;
    message.scrubbedResponseItemCount = object.scrubbedResponseItemCount ?? 0;
    message.targetResource = object.targetResource ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
