// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/containeranalysis/v1beta1/cvss/cvss.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "grafeas.v1beta1.vulnerability";

/**
 * Common Vulnerability Scoring System version 3.
 * For details, see https://www.first.org/cvss/specification-document
 */
export interface CVSSv3 {
  /** The base score is a function of the base metric scores. */
  baseScore: number;
  exploitabilityScore: number;
  impactScore: number;
  /**
   * Base Metrics
   * Represents the intrinsic characteristics of a vulnerability that are
   * constant over time and across user environments.
   */
  attackVector: CVSSv3_AttackVector;
  attackComplexity: CVSSv3_AttackComplexity;
  privilegesRequired: CVSSv3_PrivilegesRequired;
  userInteraction: CVSSv3_UserInteraction;
  scope: CVSSv3_Scope;
  confidentialityImpact: CVSSv3_Impact;
  integrityImpact: CVSSv3_Impact;
  availabilityImpact: CVSSv3_Impact;
}

export enum CVSSv3_AttackVector {
  ATTACK_VECTOR_UNSPECIFIED = 0,
  ATTACK_VECTOR_NETWORK = 1,
  ATTACK_VECTOR_ADJACENT = 2,
  ATTACK_VECTOR_LOCAL = 3,
  ATTACK_VECTOR_PHYSICAL = 4,
  UNRECOGNIZED = -1,
}

export function cVSSv3_AttackVectorFromJSON(object: any): CVSSv3_AttackVector {
  switch (object) {
    case 0:
    case "ATTACK_VECTOR_UNSPECIFIED":
      return CVSSv3_AttackVector.ATTACK_VECTOR_UNSPECIFIED;
    case 1:
    case "ATTACK_VECTOR_NETWORK":
      return CVSSv3_AttackVector.ATTACK_VECTOR_NETWORK;
    case 2:
    case "ATTACK_VECTOR_ADJACENT":
      return CVSSv3_AttackVector.ATTACK_VECTOR_ADJACENT;
    case 3:
    case "ATTACK_VECTOR_LOCAL":
      return CVSSv3_AttackVector.ATTACK_VECTOR_LOCAL;
    case 4:
    case "ATTACK_VECTOR_PHYSICAL":
      return CVSSv3_AttackVector.ATTACK_VECTOR_PHYSICAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CVSSv3_AttackVector.UNRECOGNIZED;
  }
}

export function cVSSv3_AttackVectorToJSON(object: CVSSv3_AttackVector): string {
  switch (object) {
    case CVSSv3_AttackVector.ATTACK_VECTOR_UNSPECIFIED:
      return "ATTACK_VECTOR_UNSPECIFIED";
    case CVSSv3_AttackVector.ATTACK_VECTOR_NETWORK:
      return "ATTACK_VECTOR_NETWORK";
    case CVSSv3_AttackVector.ATTACK_VECTOR_ADJACENT:
      return "ATTACK_VECTOR_ADJACENT";
    case CVSSv3_AttackVector.ATTACK_VECTOR_LOCAL:
      return "ATTACK_VECTOR_LOCAL";
    case CVSSv3_AttackVector.ATTACK_VECTOR_PHYSICAL:
      return "ATTACK_VECTOR_PHYSICAL";
    case CVSSv3_AttackVector.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum CVSSv3_AttackComplexity {
  ATTACK_COMPLEXITY_UNSPECIFIED = 0,
  ATTACK_COMPLEXITY_LOW = 1,
  ATTACK_COMPLEXITY_HIGH = 2,
  UNRECOGNIZED = -1,
}

export function cVSSv3_AttackComplexityFromJSON(object: any): CVSSv3_AttackComplexity {
  switch (object) {
    case 0:
    case "ATTACK_COMPLEXITY_UNSPECIFIED":
      return CVSSv3_AttackComplexity.ATTACK_COMPLEXITY_UNSPECIFIED;
    case 1:
    case "ATTACK_COMPLEXITY_LOW":
      return CVSSv3_AttackComplexity.ATTACK_COMPLEXITY_LOW;
    case 2:
    case "ATTACK_COMPLEXITY_HIGH":
      return CVSSv3_AttackComplexity.ATTACK_COMPLEXITY_HIGH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CVSSv3_AttackComplexity.UNRECOGNIZED;
  }
}

export function cVSSv3_AttackComplexityToJSON(object: CVSSv3_AttackComplexity): string {
  switch (object) {
    case CVSSv3_AttackComplexity.ATTACK_COMPLEXITY_UNSPECIFIED:
      return "ATTACK_COMPLEXITY_UNSPECIFIED";
    case CVSSv3_AttackComplexity.ATTACK_COMPLEXITY_LOW:
      return "ATTACK_COMPLEXITY_LOW";
    case CVSSv3_AttackComplexity.ATTACK_COMPLEXITY_HIGH:
      return "ATTACK_COMPLEXITY_HIGH";
    case CVSSv3_AttackComplexity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum CVSSv3_PrivilegesRequired {
  PRIVILEGES_REQUIRED_UNSPECIFIED = 0,
  PRIVILEGES_REQUIRED_NONE = 1,
  PRIVILEGES_REQUIRED_LOW = 2,
  PRIVILEGES_REQUIRED_HIGH = 3,
  UNRECOGNIZED = -1,
}

export function cVSSv3_PrivilegesRequiredFromJSON(object: any): CVSSv3_PrivilegesRequired {
  switch (object) {
    case 0:
    case "PRIVILEGES_REQUIRED_UNSPECIFIED":
      return CVSSv3_PrivilegesRequired.PRIVILEGES_REQUIRED_UNSPECIFIED;
    case 1:
    case "PRIVILEGES_REQUIRED_NONE":
      return CVSSv3_PrivilegesRequired.PRIVILEGES_REQUIRED_NONE;
    case 2:
    case "PRIVILEGES_REQUIRED_LOW":
      return CVSSv3_PrivilegesRequired.PRIVILEGES_REQUIRED_LOW;
    case 3:
    case "PRIVILEGES_REQUIRED_HIGH":
      return CVSSv3_PrivilegesRequired.PRIVILEGES_REQUIRED_HIGH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CVSSv3_PrivilegesRequired.UNRECOGNIZED;
  }
}

export function cVSSv3_PrivilegesRequiredToJSON(object: CVSSv3_PrivilegesRequired): string {
  switch (object) {
    case CVSSv3_PrivilegesRequired.PRIVILEGES_REQUIRED_UNSPECIFIED:
      return "PRIVILEGES_REQUIRED_UNSPECIFIED";
    case CVSSv3_PrivilegesRequired.PRIVILEGES_REQUIRED_NONE:
      return "PRIVILEGES_REQUIRED_NONE";
    case CVSSv3_PrivilegesRequired.PRIVILEGES_REQUIRED_LOW:
      return "PRIVILEGES_REQUIRED_LOW";
    case CVSSv3_PrivilegesRequired.PRIVILEGES_REQUIRED_HIGH:
      return "PRIVILEGES_REQUIRED_HIGH";
    case CVSSv3_PrivilegesRequired.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum CVSSv3_UserInteraction {
  USER_INTERACTION_UNSPECIFIED = 0,
  USER_INTERACTION_NONE = 1,
  USER_INTERACTION_REQUIRED = 2,
  UNRECOGNIZED = -1,
}

export function cVSSv3_UserInteractionFromJSON(object: any): CVSSv3_UserInteraction {
  switch (object) {
    case 0:
    case "USER_INTERACTION_UNSPECIFIED":
      return CVSSv3_UserInteraction.USER_INTERACTION_UNSPECIFIED;
    case 1:
    case "USER_INTERACTION_NONE":
      return CVSSv3_UserInteraction.USER_INTERACTION_NONE;
    case 2:
    case "USER_INTERACTION_REQUIRED":
      return CVSSv3_UserInteraction.USER_INTERACTION_REQUIRED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CVSSv3_UserInteraction.UNRECOGNIZED;
  }
}

export function cVSSv3_UserInteractionToJSON(object: CVSSv3_UserInteraction): string {
  switch (object) {
    case CVSSv3_UserInteraction.USER_INTERACTION_UNSPECIFIED:
      return "USER_INTERACTION_UNSPECIFIED";
    case CVSSv3_UserInteraction.USER_INTERACTION_NONE:
      return "USER_INTERACTION_NONE";
    case CVSSv3_UserInteraction.USER_INTERACTION_REQUIRED:
      return "USER_INTERACTION_REQUIRED";
    case CVSSv3_UserInteraction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum CVSSv3_Scope {
  SCOPE_UNSPECIFIED = 0,
  SCOPE_UNCHANGED = 1,
  SCOPE_CHANGED = 2,
  UNRECOGNIZED = -1,
}

export function cVSSv3_ScopeFromJSON(object: any): CVSSv3_Scope {
  switch (object) {
    case 0:
    case "SCOPE_UNSPECIFIED":
      return CVSSv3_Scope.SCOPE_UNSPECIFIED;
    case 1:
    case "SCOPE_UNCHANGED":
      return CVSSv3_Scope.SCOPE_UNCHANGED;
    case 2:
    case "SCOPE_CHANGED":
      return CVSSv3_Scope.SCOPE_CHANGED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CVSSv3_Scope.UNRECOGNIZED;
  }
}

export function cVSSv3_ScopeToJSON(object: CVSSv3_Scope): string {
  switch (object) {
    case CVSSv3_Scope.SCOPE_UNSPECIFIED:
      return "SCOPE_UNSPECIFIED";
    case CVSSv3_Scope.SCOPE_UNCHANGED:
      return "SCOPE_UNCHANGED";
    case CVSSv3_Scope.SCOPE_CHANGED:
      return "SCOPE_CHANGED";
    case CVSSv3_Scope.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum CVSSv3_Impact {
  IMPACT_UNSPECIFIED = 0,
  IMPACT_HIGH = 1,
  IMPACT_LOW = 2,
  IMPACT_NONE = 3,
  UNRECOGNIZED = -1,
}

export function cVSSv3_ImpactFromJSON(object: any): CVSSv3_Impact {
  switch (object) {
    case 0:
    case "IMPACT_UNSPECIFIED":
      return CVSSv3_Impact.IMPACT_UNSPECIFIED;
    case 1:
    case "IMPACT_HIGH":
      return CVSSv3_Impact.IMPACT_HIGH;
    case 2:
    case "IMPACT_LOW":
      return CVSSv3_Impact.IMPACT_LOW;
    case 3:
    case "IMPACT_NONE":
      return CVSSv3_Impact.IMPACT_NONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CVSSv3_Impact.UNRECOGNIZED;
  }
}

export function cVSSv3_ImpactToJSON(object: CVSSv3_Impact): string {
  switch (object) {
    case CVSSv3_Impact.IMPACT_UNSPECIFIED:
      return "IMPACT_UNSPECIFIED";
    case CVSSv3_Impact.IMPACT_HIGH:
      return "IMPACT_HIGH";
    case CVSSv3_Impact.IMPACT_LOW:
      return "IMPACT_LOW";
    case CVSSv3_Impact.IMPACT_NONE:
      return "IMPACT_NONE";
    case CVSSv3_Impact.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCVSSv3(): CVSSv3 {
  return {
    baseScore: 0,
    exploitabilityScore: 0,
    impactScore: 0,
    attackVector: 0,
    attackComplexity: 0,
    privilegesRequired: 0,
    userInteraction: 0,
    scope: 0,
    confidentialityImpact: 0,
    integrityImpact: 0,
    availabilityImpact: 0,
  };
}

export const CVSSv3: MessageFns<CVSSv3> = {
  encode(message: CVSSv3, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.baseScore !== 0) {
      writer.uint32(13).float(message.baseScore);
    }
    if (message.exploitabilityScore !== 0) {
      writer.uint32(21).float(message.exploitabilityScore);
    }
    if (message.impactScore !== 0) {
      writer.uint32(29).float(message.impactScore);
    }
    if (message.attackVector !== 0) {
      writer.uint32(40).int32(message.attackVector);
    }
    if (message.attackComplexity !== 0) {
      writer.uint32(48).int32(message.attackComplexity);
    }
    if (message.privilegesRequired !== 0) {
      writer.uint32(56).int32(message.privilegesRequired);
    }
    if (message.userInteraction !== 0) {
      writer.uint32(64).int32(message.userInteraction);
    }
    if (message.scope !== 0) {
      writer.uint32(72).int32(message.scope);
    }
    if (message.confidentialityImpact !== 0) {
      writer.uint32(80).int32(message.confidentialityImpact);
    }
    if (message.integrityImpact !== 0) {
      writer.uint32(88).int32(message.integrityImpact);
    }
    if (message.availabilityImpact !== 0) {
      writer.uint32(96).int32(message.availabilityImpact);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CVSSv3 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCVSSv3();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.baseScore = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.exploitabilityScore = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.impactScore = reader.float();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.attackVector = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.attackComplexity = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.privilegesRequired = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.userInteraction = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.scope = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.confidentialityImpact = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.integrityImpact = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.availabilityImpact = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CVSSv3 {
    return {
      baseScore: isSet(object.baseScore) ? globalThis.Number(object.baseScore) : 0,
      exploitabilityScore: isSet(object.exploitabilityScore) ? globalThis.Number(object.exploitabilityScore) : 0,
      impactScore: isSet(object.impactScore) ? globalThis.Number(object.impactScore) : 0,
      attackVector: isSet(object.attackVector) ? cVSSv3_AttackVectorFromJSON(object.attackVector) : 0,
      attackComplexity: isSet(object.attackComplexity) ? cVSSv3_AttackComplexityFromJSON(object.attackComplexity) : 0,
      privilegesRequired: isSet(object.privilegesRequired)
        ? cVSSv3_PrivilegesRequiredFromJSON(object.privilegesRequired)
        : 0,
      userInteraction: isSet(object.userInteraction) ? cVSSv3_UserInteractionFromJSON(object.userInteraction) : 0,
      scope: isSet(object.scope) ? cVSSv3_ScopeFromJSON(object.scope) : 0,
      confidentialityImpact: isSet(object.confidentialityImpact)
        ? cVSSv3_ImpactFromJSON(object.confidentialityImpact)
        : 0,
      integrityImpact: isSet(object.integrityImpact) ? cVSSv3_ImpactFromJSON(object.integrityImpact) : 0,
      availabilityImpact: isSet(object.availabilityImpact) ? cVSSv3_ImpactFromJSON(object.availabilityImpact) : 0,
    };
  },

  toJSON(message: CVSSv3): unknown {
    const obj: any = {};
    if (message.baseScore !== 0) {
      obj.baseScore = message.baseScore;
    }
    if (message.exploitabilityScore !== 0) {
      obj.exploitabilityScore = message.exploitabilityScore;
    }
    if (message.impactScore !== 0) {
      obj.impactScore = message.impactScore;
    }
    if (message.attackVector !== 0) {
      obj.attackVector = cVSSv3_AttackVectorToJSON(message.attackVector);
    }
    if (message.attackComplexity !== 0) {
      obj.attackComplexity = cVSSv3_AttackComplexityToJSON(message.attackComplexity);
    }
    if (message.privilegesRequired !== 0) {
      obj.privilegesRequired = cVSSv3_PrivilegesRequiredToJSON(message.privilegesRequired);
    }
    if (message.userInteraction !== 0) {
      obj.userInteraction = cVSSv3_UserInteractionToJSON(message.userInteraction);
    }
    if (message.scope !== 0) {
      obj.scope = cVSSv3_ScopeToJSON(message.scope);
    }
    if (message.confidentialityImpact !== 0) {
      obj.confidentialityImpact = cVSSv3_ImpactToJSON(message.confidentialityImpact);
    }
    if (message.integrityImpact !== 0) {
      obj.integrityImpact = cVSSv3_ImpactToJSON(message.integrityImpact);
    }
    if (message.availabilityImpact !== 0) {
      obj.availabilityImpact = cVSSv3_ImpactToJSON(message.availabilityImpact);
    }
    return obj;
  },

  create(base?: DeepPartial<CVSSv3>): CVSSv3 {
    return CVSSv3.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CVSSv3>): CVSSv3 {
    const message = createBaseCVSSv3();
    message.baseScore = object.baseScore ?? 0;
    message.exploitabilityScore = object.exploitabilityScore ?? 0;
    message.impactScore = object.impactScore ?? 0;
    message.attackVector = object.attackVector ?? 0;
    message.attackComplexity = object.attackComplexity ?? 0;
    message.privilegesRequired = object.privilegesRequired ?? 0;
    message.userInteraction = object.userInteraction ?? 0;
    message.scope = object.scope ?? 0;
    message.confidentialityImpact = object.confidentialityImpact ?? 0;
    message.integrityImpact = object.integrityImpact ?? 0;
    message.availabilityImpact = object.availabilityImpact ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
