// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/containeranalysis/v1beta1/package/package.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "grafeas.v1beta1.package";

/** Instruction set architectures supported by various package managers. */
export enum Architecture {
  /** ARCHITECTURE_UNSPECIFIED - Unknown architecture. */
  ARCHITECTURE_UNSPECIFIED = 0,
  /** X86 - X86 architecture. */
  X86 = 1,
  /** X64 - X64 architecture. */
  X64 = 2,
  UNRECOGNIZED = -1,
}

export function architectureFromJSON(object: any): Architecture {
  switch (object) {
    case 0:
    case "ARCHITECTURE_UNSPECIFIED":
      return Architecture.ARCHITECTURE_UNSPECIFIED;
    case 1:
    case "X86":
      return Architecture.X86;
    case 2:
    case "X64":
      return Architecture.X64;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Architecture.UNRECOGNIZED;
  }
}

export function architectureToJSON(object: Architecture): string {
  switch (object) {
    case Architecture.ARCHITECTURE_UNSPECIFIED:
      return "ARCHITECTURE_UNSPECIFIED";
    case Architecture.X86:
      return "X86";
    case Architecture.X64:
      return "X64";
    case Architecture.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * This represents a particular channel of distribution for a given package.
 * E.g., Debian's jessie-backports dpkg mirror.
 */
export interface Distribution {
  /**
   * Required. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/)
   * denoting the package manager version distributing a package.
   */
  cpeUri: string;
  /**
   * The CPU architecture for which packages in this distribution channel were
   * built.
   */
  architecture: Architecture;
  /** The latest available version of this package in this distribution channel. */
  latestVersion:
    | Version
    | undefined;
  /** A freeform string denoting the maintainer of this package. */
  maintainer: string;
  /** The distribution channel-specific homepage for this package. */
  url: string;
  /** The distribution channel-specific description of this package. */
  description: string;
}

/**
 * An occurrence of a particular package installation found within a system's
 * filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
 */
export interface Location {
  /**
   * Required. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)
   * denoting the package manager version distributing a package.
   */
  cpeUri: string;
  /** The version installed at this location. */
  version:
    | Version
    | undefined;
  /** The path from which we gathered that this package/version is installed. */
  path: string;
}

/**
 * This represents a particular package that is distributed over various
 * channels. E.g., glibc (aka libc6) is distributed by many, at various
 * versions.
 */
export interface Package {
  /** Required. Immutable. The name of the package. */
  name: string;
  /** The various channels by which a package is distributed. */
  distribution: Distribution[];
}

/** Details of a package occurrence. */
export interface Details {
  /** Required. Where the package was installed. */
  installation: Installation | undefined;
}

/**
 * This represents how a particular software package may be installed on a
 * system.
 */
export interface Installation {
  /** Output only. The name of the installed package. */
  name: string;
  /**
   * Required. All of the places within the filesystem versions of this package
   * have been found.
   */
  location: Location[];
}

/** Version contains structured information about the version of a package. */
export interface Version {
  /** Used to correct mistakes in the version numbering scheme. */
  epoch: number;
  /**
   * Required only when version kind is NORMAL. The main part of the version
   * name.
   */
  name: string;
  /** The iteration of the package build from the above version. */
  revision: string;
  /**
   * Required. Distinguishes between sentinel MIN/MAX versions and normal
   * versions.
   */
  kind: Version_VersionKind;
}

/** Whether this is an ordinary package version or a sentinel MIN/MAX version. */
export enum Version_VersionKind {
  /** VERSION_KIND_UNSPECIFIED - Unknown. */
  VERSION_KIND_UNSPECIFIED = 0,
  /** NORMAL - A standard package version. */
  NORMAL = 1,
  /** MINIMUM - A special version representing negative infinity. */
  MINIMUM = 2,
  /** MAXIMUM - A special version representing positive infinity. */
  MAXIMUM = 3,
  UNRECOGNIZED = -1,
}

export function version_VersionKindFromJSON(object: any): Version_VersionKind {
  switch (object) {
    case 0:
    case "VERSION_KIND_UNSPECIFIED":
      return Version_VersionKind.VERSION_KIND_UNSPECIFIED;
    case 1:
    case "NORMAL":
      return Version_VersionKind.NORMAL;
    case 2:
    case "MINIMUM":
      return Version_VersionKind.MINIMUM;
    case 3:
    case "MAXIMUM":
      return Version_VersionKind.MAXIMUM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Version_VersionKind.UNRECOGNIZED;
  }
}

export function version_VersionKindToJSON(object: Version_VersionKind): string {
  switch (object) {
    case Version_VersionKind.VERSION_KIND_UNSPECIFIED:
      return "VERSION_KIND_UNSPECIFIED";
    case Version_VersionKind.NORMAL:
      return "NORMAL";
    case Version_VersionKind.MINIMUM:
      return "MINIMUM";
    case Version_VersionKind.MAXIMUM:
      return "MAXIMUM";
    case Version_VersionKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDistribution(): Distribution {
  return { cpeUri: "", architecture: 0, latestVersion: undefined, maintainer: "", url: "", description: "" };
}

export const Distribution: MessageFns<Distribution> = {
  encode(message: Distribution, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cpeUri !== "") {
      writer.uint32(10).string(message.cpeUri);
    }
    if (message.architecture !== 0) {
      writer.uint32(16).int32(message.architecture);
    }
    if (message.latestVersion !== undefined) {
      Version.encode(message.latestVersion, writer.uint32(26).fork()).join();
    }
    if (message.maintainer !== "") {
      writer.uint32(34).string(message.maintainer);
    }
    if (message.url !== "") {
      writer.uint32(42).string(message.url);
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Distribution {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDistribution();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cpeUri = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.architecture = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.latestVersion = Version.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.maintainer = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.url = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Distribution {
    return {
      cpeUri: isSet(object.cpeUri) ? globalThis.String(object.cpeUri) : "",
      architecture: isSet(object.architecture) ? architectureFromJSON(object.architecture) : 0,
      latestVersion: isSet(object.latestVersion) ? Version.fromJSON(object.latestVersion) : undefined,
      maintainer: isSet(object.maintainer) ? globalThis.String(object.maintainer) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: Distribution): unknown {
    const obj: any = {};
    if (message.cpeUri !== "") {
      obj.cpeUri = message.cpeUri;
    }
    if (message.architecture !== 0) {
      obj.architecture = architectureToJSON(message.architecture);
    }
    if (message.latestVersion !== undefined) {
      obj.latestVersion = Version.toJSON(message.latestVersion);
    }
    if (message.maintainer !== "") {
      obj.maintainer = message.maintainer;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<Distribution>): Distribution {
    return Distribution.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Distribution>): Distribution {
    const message = createBaseDistribution();
    message.cpeUri = object.cpeUri ?? "";
    message.architecture = object.architecture ?? 0;
    message.latestVersion = (object.latestVersion !== undefined && object.latestVersion !== null)
      ? Version.fromPartial(object.latestVersion)
      : undefined;
    message.maintainer = object.maintainer ?? "";
    message.url = object.url ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseLocation(): Location {
  return { cpeUri: "", version: undefined, path: "" };
}

export const Location: MessageFns<Location> = {
  encode(message: Location, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cpeUri !== "") {
      writer.uint32(10).string(message.cpeUri);
    }
    if (message.version !== undefined) {
      Version.encode(message.version, writer.uint32(18).fork()).join();
    }
    if (message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Location {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cpeUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = Version.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Location {
    return {
      cpeUri: isSet(object.cpeUri) ? globalThis.String(object.cpeUri) : "",
      version: isSet(object.version) ? Version.fromJSON(object.version) : undefined,
      path: isSet(object.path) ? globalThis.String(object.path) : "",
    };
  },

  toJSON(message: Location): unknown {
    const obj: any = {};
    if (message.cpeUri !== "") {
      obj.cpeUri = message.cpeUri;
    }
    if (message.version !== undefined) {
      obj.version = Version.toJSON(message.version);
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create(base?: DeepPartial<Location>): Location {
    return Location.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Location>): Location {
    const message = createBaseLocation();
    message.cpeUri = object.cpeUri ?? "";
    message.version = (object.version !== undefined && object.version !== null)
      ? Version.fromPartial(object.version)
      : undefined;
    message.path = object.path ?? "";
    return message;
  },
};

function createBasePackage(): Package {
  return { name: "", distribution: [] };
}

export const Package: MessageFns<Package> = {
  encode(message: Package, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.distribution) {
      Distribution.encode(v!, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Package {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePackage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.distribution.push(Distribution.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Package {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      distribution: globalThis.Array.isArray(object?.distribution)
        ? object.distribution.map((e: any) => Distribution.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Package): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.distribution?.length) {
      obj.distribution = message.distribution.map((e) => Distribution.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Package>): Package {
    return Package.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Package>): Package {
    const message = createBasePackage();
    message.name = object.name ?? "";
    message.distribution = object.distribution?.map((e) => Distribution.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDetails(): Details {
  return { installation: undefined };
}

export const Details: MessageFns<Details> = {
  encode(message: Details, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.installation !== undefined) {
      Installation.encode(message.installation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Details {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.installation = Installation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Details {
    return { installation: isSet(object.installation) ? Installation.fromJSON(object.installation) : undefined };
  },

  toJSON(message: Details): unknown {
    const obj: any = {};
    if (message.installation !== undefined) {
      obj.installation = Installation.toJSON(message.installation);
    }
    return obj;
  },

  create(base?: DeepPartial<Details>): Details {
    return Details.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Details>): Details {
    const message = createBaseDetails();
    message.installation = (object.installation !== undefined && object.installation !== null)
      ? Installation.fromPartial(object.installation)
      : undefined;
    return message;
  },
};

function createBaseInstallation(): Installation {
  return { name: "", location: [] };
}

export const Installation: MessageFns<Installation> = {
  encode(message: Installation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.location) {
      Location.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Installation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstallation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.location.push(Location.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Installation {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      location: globalThis.Array.isArray(object?.location) ? object.location.map((e: any) => Location.fromJSON(e)) : [],
    };
  },

  toJSON(message: Installation): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.location?.length) {
      obj.location = message.location.map((e) => Location.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Installation>): Installation {
    return Installation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Installation>): Installation {
    const message = createBaseInstallation();
    message.name = object.name ?? "";
    message.location = object.location?.map((e) => Location.fromPartial(e)) || [];
    return message;
  },
};

function createBaseVersion(): Version {
  return { epoch: 0, name: "", revision: "", kind: 0 };
}

export const Version: MessageFns<Version> = {
  encode(message: Version, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.epoch !== 0) {
      writer.uint32(8).int32(message.epoch);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.revision !== "") {
      writer.uint32(26).string(message.revision);
    }
    if (message.kind !== 0) {
      writer.uint32(32).int32(message.kind);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Version {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.epoch = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.revision = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Version {
    return {
      epoch: isSet(object.epoch) ? globalThis.Number(object.epoch) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      revision: isSet(object.revision) ? globalThis.String(object.revision) : "",
      kind: isSet(object.kind) ? version_VersionKindFromJSON(object.kind) : 0,
    };
  },

  toJSON(message: Version): unknown {
    const obj: any = {};
    if (message.epoch !== 0) {
      obj.epoch = Math.round(message.epoch);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.revision !== "") {
      obj.revision = message.revision;
    }
    if (message.kind !== 0) {
      obj.kind = version_VersionKindToJSON(message.kind);
    }
    return obj;
  },

  create(base?: DeepPartial<Version>): Version {
    return Version.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Version>): Version {
    const message = createBaseVersion();
    message.epoch = object.epoch ?? 0;
    message.name = object.name ?? "";
    message.revision = object.revision ?? "";
    message.kind = object.kind ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
