// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/containeranalysis/v1beta1/containeranalysis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";

export const protobufPackage = "google.devtools.containeranalysis.v1beta1";

/**
 * GeneratePackagesSummaryRequest is the request body for the
 * GeneratePackagesSummary API method. It just takes a single name argument,
 * referring to the resource.
 */
export interface GeneratePackagesSummaryRequest {
  /**
   * Required. The name of the resource to get a packages summary for in the
   * form of `projects/[PROJECT_ID]/resources/[RESOURCE_URL]`.
   */
  name: string;
}

/** A summary of the packages found within the given resource. */
export interface PackagesSummaryResponse {
  /**
   * The unique URL of the image or the container for which this summary
   * applies.
   */
  resourceUrl: string;
  /** A listing by license name of each of the licenses and their counts. */
  licensesSummary: PackagesSummaryResponse_LicensesSummary[];
}

/** Per license count */
export interface PackagesSummaryResponse_LicensesSummary {
  /**
   * The license of the package. Note that the format of this value is not
   * guaranteed. It may be nil, an empty string, a boolean value (A | B), a
   * differently formed boolean value (A OR B), etc...
   */
  license: string;
  /** The number of fixable vulnerabilities associated with this resource. */
  count: Long;
}

/** The request to a call of ExportSBOM */
export interface ExportSBOMRequest {
  /**
   * Required. The name of the resource in the form of
   * `projects/[PROJECT_ID]/resources/[RESOURCE_URL]`.
   */
  name: string;
}

/** The response from a call to ExportSBOM */
export interface ExportSBOMResponse {
  /**
   * The name of the discovery occurrence in the form
   * "projects/{project_id}/occurrences/{OCCURRENCE_ID}
   * It can be used to track the progression of the SBOM export.
   */
  discoveryOccurrenceId: string;
}

function createBaseGeneratePackagesSummaryRequest(): GeneratePackagesSummaryRequest {
  return { name: "" };
}

export const GeneratePackagesSummaryRequest: MessageFns<GeneratePackagesSummaryRequest> = {
  encode(message: GeneratePackagesSummaryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GeneratePackagesSummaryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGeneratePackagesSummaryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GeneratePackagesSummaryRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GeneratePackagesSummaryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GeneratePackagesSummaryRequest>): GeneratePackagesSummaryRequest {
    return GeneratePackagesSummaryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GeneratePackagesSummaryRequest>): GeneratePackagesSummaryRequest {
    const message = createBaseGeneratePackagesSummaryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBasePackagesSummaryResponse(): PackagesSummaryResponse {
  return { resourceUrl: "", licensesSummary: [] };
}

export const PackagesSummaryResponse: MessageFns<PackagesSummaryResponse> = {
  encode(message: PackagesSummaryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceUrl !== "") {
      writer.uint32(10).string(message.resourceUrl);
    }
    for (const v of message.licensesSummary) {
      PackagesSummaryResponse_LicensesSummary.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PackagesSummaryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePackagesSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceUrl = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.licensesSummary.push(PackagesSummaryResponse_LicensesSummary.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PackagesSummaryResponse {
    return {
      resourceUrl: isSet(object.resourceUrl) ? globalThis.String(object.resourceUrl) : "",
      licensesSummary: globalThis.Array.isArray(object?.licensesSummary)
        ? object.licensesSummary.map((e: any) => PackagesSummaryResponse_LicensesSummary.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PackagesSummaryResponse): unknown {
    const obj: any = {};
    if (message.resourceUrl !== "") {
      obj.resourceUrl = message.resourceUrl;
    }
    if (message.licensesSummary?.length) {
      obj.licensesSummary = message.licensesSummary.map((e) => PackagesSummaryResponse_LicensesSummary.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PackagesSummaryResponse>): PackagesSummaryResponse {
    return PackagesSummaryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PackagesSummaryResponse>): PackagesSummaryResponse {
    const message = createBasePackagesSummaryResponse();
    message.resourceUrl = object.resourceUrl ?? "";
    message.licensesSummary =
      object.licensesSummary?.map((e) => PackagesSummaryResponse_LicensesSummary.fromPartial(e)) || [];
    return message;
  },
};

function createBasePackagesSummaryResponse_LicensesSummary(): PackagesSummaryResponse_LicensesSummary {
  return { license: "", count: Long.ZERO };
}

export const PackagesSummaryResponse_LicensesSummary: MessageFns<PackagesSummaryResponse_LicensesSummary> = {
  encode(message: PackagesSummaryResponse_LicensesSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.license !== "") {
      writer.uint32(10).string(message.license);
    }
    if (!message.count.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.count.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PackagesSummaryResponse_LicensesSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePackagesSummaryResponse_LicensesSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.license = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.count = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PackagesSummaryResponse_LicensesSummary {
    return {
      license: isSet(object.license) ? globalThis.String(object.license) : "",
      count: isSet(object.count) ? Long.fromValue(object.count) : Long.ZERO,
    };
  },

  toJSON(message: PackagesSummaryResponse_LicensesSummary): unknown {
    const obj: any = {};
    if (message.license !== "") {
      obj.license = message.license;
    }
    if (!message.count.equals(Long.ZERO)) {
      obj.count = (message.count || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<PackagesSummaryResponse_LicensesSummary>): PackagesSummaryResponse_LicensesSummary {
    return PackagesSummaryResponse_LicensesSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PackagesSummaryResponse_LicensesSummary>): PackagesSummaryResponse_LicensesSummary {
    const message = createBasePackagesSummaryResponse_LicensesSummary();
    message.license = object.license ?? "";
    message.count = (object.count !== undefined && object.count !== null) ? Long.fromValue(object.count) : Long.ZERO;
    return message;
  },
};

function createBaseExportSBOMRequest(): ExportSBOMRequest {
  return { name: "" };
}

export const ExportSBOMRequest: MessageFns<ExportSBOMRequest> = {
  encode(message: ExportSBOMRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportSBOMRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportSBOMRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportSBOMRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ExportSBOMRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportSBOMRequest>): ExportSBOMRequest {
    return ExportSBOMRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportSBOMRequest>): ExportSBOMRequest {
    const message = createBaseExportSBOMRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseExportSBOMResponse(): ExportSBOMResponse {
  return { discoveryOccurrenceId: "" };
}

export const ExportSBOMResponse: MessageFns<ExportSBOMResponse> = {
  encode(message: ExportSBOMResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.discoveryOccurrenceId !== "") {
      writer.uint32(10).string(message.discoveryOccurrenceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportSBOMResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportSBOMResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.discoveryOccurrenceId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportSBOMResponse {
    return {
      discoveryOccurrenceId: isSet(object.discoveryOccurrenceId) ? globalThis.String(object.discoveryOccurrenceId) : "",
    };
  },

  toJSON(message: ExportSBOMResponse): unknown {
    const obj: any = {};
    if (message.discoveryOccurrenceId !== "") {
      obj.discoveryOccurrenceId = message.discoveryOccurrenceId;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportSBOMResponse>): ExportSBOMResponse {
    return ExportSBOMResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportSBOMResponse>): ExportSBOMResponse {
    const message = createBaseExportSBOMResponse();
    message.discoveryOccurrenceId = object.discoveryOccurrenceId ?? "";
    return message;
  },
};

/**
 * Retrieves analysis results of Cloud components such as Docker container
 * images. The Container Analysis API is an implementation of the
 * [Grafeas](https://grafeas.io) API.
 *
 * Analysis results are stored as a series of occurrences. An `Occurrence`
 * contains information about a specific analysis instance on a resource. An
 * occurrence refers to a `Note`. A note contains details describing the
 * analysis and is generally stored in a separate project, called a `Provider`.
 * Multiple occurrences can refer to the same note.
 *
 * For example, an SSL vulnerability could affect multiple images. In this case,
 * there would be one note for the vulnerability and an occurrence for each
 * image with the vulnerability referring to that note.
 */
export type ContainerAnalysisV1Beta1Definition = typeof ContainerAnalysisV1Beta1Definition;
export const ContainerAnalysisV1Beta1Definition = {
  name: "ContainerAnalysisV1Beta1",
  fullName: "google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1",
  methods: {
    /**
     * Sets the access control policy on the specified note or occurrence.
     * Requires `containeranalysis.notes.setIamPolicy` or
     * `containeranalysis.occurrences.setIamPolicy` permission if the resource is
     * a note or an occurrence, respectively.
     *
     * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
     * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
     * occurrences.
     */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 114, 101, 115, 111, 117, 114, 99, 101, 44, 112, 111, 108, 105, 99, 121])],
          578365826: [
            Buffer.from([
              120,
              58,
              1,
              42,
              90,
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              34,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the access control policy for a note or an occurrence resource.
     * Requires `containeranalysis.notes.setIamPolicy` or
     * `containeranalysis.occurrences.setIamPolicy` permission if the resource is
     * a note or occurrence, respectively.
     *
     * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
     * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
     * occurrences.
     */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 114, 101, 115, 111, 117, 114, 99, 101])],
          578365826: [
            Buffer.from([
              120,
              58,
              1,
              42,
              90,
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              34,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the permissions that a caller has on the specified note or
     * occurrence. Requires list permission on the project (for example,
     * `containeranalysis.notes.list`).
     *
     * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
     * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
     * occurrences.
     */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              132,
              1,
              58,
              1,
              42,
              90,
              68,
              58,
              1,
              42,
              34,
              63,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              34,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a summary of the packages within a given resource. */
    generatePackagesSummary: {
      name: "GeneratePackagesSummary",
      requestType: GeneratePackagesSummaryRequest,
      requestStream: false,
      responseType: PackagesSummaryResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              68,
              58,
              1,
              42,
              34,
              63,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              80,
              97,
              99,
              107,
              97,
              103,
              101,
              115,
              83,
              117,
              109,
              109,
              97,
              114,
              121,
            ]),
          ],
        },
      },
    },
    /** Generates an SBOM and other dependency information for the given resource. */
    exportSBOM: {
      name: "ExportSBOM",
      requestType: ExportSBOMRequest,
      requestStream: false,
      responseType: ExportSBOMResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              42,
              125,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
              83,
              66,
              79,
              77,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ContainerAnalysisV1Beta1ServiceImplementation<CallContextExt = {}> {
  /**
   * Sets the access control policy on the specified note or occurrence.
   * Requires `containeranalysis.notes.setIamPolicy` or
   * `containeranalysis.occurrences.setIamPolicy` permission if the resource is
   * a note or an occurrence, respectively.
   *
   * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
   * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
   * occurrences.
   */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Gets the access control policy for a note or an occurrence resource.
   * Requires `containeranalysis.notes.setIamPolicy` or
   * `containeranalysis.occurrences.setIamPolicy` permission if the resource is
   * a note or occurrence, respectively.
   *
   * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
   * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
   * occurrences.
   */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Returns the permissions that a caller has on the specified note or
   * occurrence. Requires list permission on the project (for example,
   * `containeranalysis.notes.list`).
   *
   * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
   * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
   * occurrences.
   */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
  /** Gets a summary of the packages within a given resource. */
  generatePackagesSummary(
    request: GeneratePackagesSummaryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PackagesSummaryResponse>>;
  /** Generates an SBOM and other dependency information for the given resource. */
  exportSBOM(
    request: ExportSBOMRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExportSBOMResponse>>;
}

export interface ContainerAnalysisV1Beta1Client<CallOptionsExt = {}> {
  /**
   * Sets the access control policy on the specified note or occurrence.
   * Requires `containeranalysis.notes.setIamPolicy` or
   * `containeranalysis.occurrences.setIamPolicy` permission if the resource is
   * a note or an occurrence, respectively.
   *
   * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
   * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
   * occurrences.
   */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Gets the access control policy for a note or an occurrence resource.
   * Requires `containeranalysis.notes.setIamPolicy` or
   * `containeranalysis.occurrences.setIamPolicy` permission if the resource is
   * a note or occurrence, respectively.
   *
   * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
   * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
   * occurrences.
   */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Returns the permissions that a caller has on the specified note or
   * occurrence. Requires list permission on the project (for example,
   * `containeranalysis.notes.list`).
   *
   * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
   * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
   * occurrences.
   */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
  /** Gets a summary of the packages within a given resource. */
  generatePackagesSummary(
    request: DeepPartial<GeneratePackagesSummaryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PackagesSummaryResponse>;
  /** Generates an SBOM and other dependency information for the given resource. */
  exportSBOM(
    request: DeepPartial<ExportSBOMRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExportSBOMResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
