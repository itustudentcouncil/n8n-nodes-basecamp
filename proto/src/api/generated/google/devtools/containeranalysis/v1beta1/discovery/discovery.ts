// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/containeranalysis/v1beta1/discovery/discovery.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { Status } from "../../../../rpc/status.js";
import { NoteKind, noteKindFromJSON, noteKindToJSON } from "../common/common.js";

export const protobufPackage = "grafeas.v1beta1.discovery";

/**
 * A note that indicates a type of analysis a provider would perform. This note
 * exists in a provider's project. A `Discovery` occurrence is created in a
 * consumer's project at the start of analysis.
 */
export interface Discovery {
  /**
   * Required. Immutable. The kind of analysis that is handled by this
   * discovery.
   */
  analysisKind: NoteKind;
}

/** Details of a discovery occurrence. */
export interface Details {
  /** Required. Analysis status for the discovered resource. */
  discovered: Discovered | undefined;
}

/** Provides information about the analysis status of a discovered resource. */
export interface Discovered {
  /** Whether the resource is continuously analyzed. */
  continuousAnalysis: Discovered_ContinuousAnalysis;
  /** The last time continuous analysis was done for this resource. */
  lastAnalysisTime:
    | Date
    | undefined;
  /** The status of discovery for the resource. */
  analysisStatus: Discovered_AnalysisStatus;
  /**
   * When an error is encountered this will contain a LocalizedMessage under
   * details to show to the user. The LocalizedMessage is output only and
   * populated by the API.
   */
  analysisStatusError: Status | undefined;
}

/** Whether the resource is continuously analyzed. */
export enum Discovered_ContinuousAnalysis {
  /** CONTINUOUS_ANALYSIS_UNSPECIFIED - Unknown. */
  CONTINUOUS_ANALYSIS_UNSPECIFIED = 0,
  /** ACTIVE - The resource is continuously analyzed. */
  ACTIVE = 1,
  /** INACTIVE - The resource is ignored for continuous analysis. */
  INACTIVE = 2,
  UNRECOGNIZED = -1,
}

export function discovered_ContinuousAnalysisFromJSON(object: any): Discovered_ContinuousAnalysis {
  switch (object) {
    case 0:
    case "CONTINUOUS_ANALYSIS_UNSPECIFIED":
      return Discovered_ContinuousAnalysis.CONTINUOUS_ANALYSIS_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return Discovered_ContinuousAnalysis.ACTIVE;
    case 2:
    case "INACTIVE":
      return Discovered_ContinuousAnalysis.INACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Discovered_ContinuousAnalysis.UNRECOGNIZED;
  }
}

export function discovered_ContinuousAnalysisToJSON(object: Discovered_ContinuousAnalysis): string {
  switch (object) {
    case Discovered_ContinuousAnalysis.CONTINUOUS_ANALYSIS_UNSPECIFIED:
      return "CONTINUOUS_ANALYSIS_UNSPECIFIED";
    case Discovered_ContinuousAnalysis.ACTIVE:
      return "ACTIVE";
    case Discovered_ContinuousAnalysis.INACTIVE:
      return "INACTIVE";
    case Discovered_ContinuousAnalysis.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Analysis status for a resource. Currently for initial analysis only (not
 * updated in continuous analysis).
 */
export enum Discovered_AnalysisStatus {
  /** ANALYSIS_STATUS_UNSPECIFIED - Unknown. */
  ANALYSIS_STATUS_UNSPECIFIED = 0,
  /** PENDING - Resource is known but no action has been taken yet. */
  PENDING = 1,
  /** SCANNING - Resource is being analyzed. */
  SCANNING = 2,
  /** FINISHED_SUCCESS - Analysis has finished successfully. */
  FINISHED_SUCCESS = 3,
  /**
   * FINISHED_FAILED - Analysis has finished unsuccessfully, the analysis itself is in a bad
   * state.
   */
  FINISHED_FAILED = 4,
  /** FINISHED_UNSUPPORTED - The resource is known not to be supported */
  FINISHED_UNSUPPORTED = 5,
  UNRECOGNIZED = -1,
}

export function discovered_AnalysisStatusFromJSON(object: any): Discovered_AnalysisStatus {
  switch (object) {
    case 0:
    case "ANALYSIS_STATUS_UNSPECIFIED":
      return Discovered_AnalysisStatus.ANALYSIS_STATUS_UNSPECIFIED;
    case 1:
    case "PENDING":
      return Discovered_AnalysisStatus.PENDING;
    case 2:
    case "SCANNING":
      return Discovered_AnalysisStatus.SCANNING;
    case 3:
    case "FINISHED_SUCCESS":
      return Discovered_AnalysisStatus.FINISHED_SUCCESS;
    case 4:
    case "FINISHED_FAILED":
      return Discovered_AnalysisStatus.FINISHED_FAILED;
    case 5:
    case "FINISHED_UNSUPPORTED":
      return Discovered_AnalysisStatus.FINISHED_UNSUPPORTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Discovered_AnalysisStatus.UNRECOGNIZED;
  }
}

export function discovered_AnalysisStatusToJSON(object: Discovered_AnalysisStatus): string {
  switch (object) {
    case Discovered_AnalysisStatus.ANALYSIS_STATUS_UNSPECIFIED:
      return "ANALYSIS_STATUS_UNSPECIFIED";
    case Discovered_AnalysisStatus.PENDING:
      return "PENDING";
    case Discovered_AnalysisStatus.SCANNING:
      return "SCANNING";
    case Discovered_AnalysisStatus.FINISHED_SUCCESS:
      return "FINISHED_SUCCESS";
    case Discovered_AnalysisStatus.FINISHED_FAILED:
      return "FINISHED_FAILED";
    case Discovered_AnalysisStatus.FINISHED_UNSUPPORTED:
      return "FINISHED_UNSUPPORTED";
    case Discovered_AnalysisStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDiscovery(): Discovery {
  return { analysisKind: 0 };
}

export const Discovery: MessageFns<Discovery> = {
  encode(message: Discovery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.analysisKind !== 0) {
      writer.uint32(8).int32(message.analysisKind);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Discovery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscovery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.analysisKind = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Discovery {
    return { analysisKind: isSet(object.analysisKind) ? noteKindFromJSON(object.analysisKind) : 0 };
  },

  toJSON(message: Discovery): unknown {
    const obj: any = {};
    if (message.analysisKind !== 0) {
      obj.analysisKind = noteKindToJSON(message.analysisKind);
    }
    return obj;
  },

  create(base?: DeepPartial<Discovery>): Discovery {
    return Discovery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Discovery>): Discovery {
    const message = createBaseDiscovery();
    message.analysisKind = object.analysisKind ?? 0;
    return message;
  },
};

function createBaseDetails(): Details {
  return { discovered: undefined };
}

export const Details: MessageFns<Details> = {
  encode(message: Details, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.discovered !== undefined) {
      Discovered.encode(message.discovered, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Details {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.discovered = Discovered.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Details {
    return { discovered: isSet(object.discovered) ? Discovered.fromJSON(object.discovered) : undefined };
  },

  toJSON(message: Details): unknown {
    const obj: any = {};
    if (message.discovered !== undefined) {
      obj.discovered = Discovered.toJSON(message.discovered);
    }
    return obj;
  },

  create(base?: DeepPartial<Details>): Details {
    return Details.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Details>): Details {
    const message = createBaseDetails();
    message.discovered = (object.discovered !== undefined && object.discovered !== null)
      ? Discovered.fromPartial(object.discovered)
      : undefined;
    return message;
  },
};

function createBaseDiscovered(): Discovered {
  return { continuousAnalysis: 0, lastAnalysisTime: undefined, analysisStatus: 0, analysisStatusError: undefined };
}

export const Discovered: MessageFns<Discovered> = {
  encode(message: Discovered, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.continuousAnalysis !== 0) {
      writer.uint32(8).int32(message.continuousAnalysis);
    }
    if (message.lastAnalysisTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastAnalysisTime), writer.uint32(18).fork()).join();
    }
    if (message.analysisStatus !== 0) {
      writer.uint32(24).int32(message.analysisStatus);
    }
    if (message.analysisStatusError !== undefined) {
      Status.encode(message.analysisStatusError, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Discovered {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscovered();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.continuousAnalysis = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lastAnalysisTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.analysisStatus = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.analysisStatusError = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Discovered {
    return {
      continuousAnalysis: isSet(object.continuousAnalysis)
        ? discovered_ContinuousAnalysisFromJSON(object.continuousAnalysis)
        : 0,
      lastAnalysisTime: isSet(object.lastAnalysisTime) ? fromJsonTimestamp(object.lastAnalysisTime) : undefined,
      analysisStatus: isSet(object.analysisStatus) ? discovered_AnalysisStatusFromJSON(object.analysisStatus) : 0,
      analysisStatusError: isSet(object.analysisStatusError) ? Status.fromJSON(object.analysisStatusError) : undefined,
    };
  },

  toJSON(message: Discovered): unknown {
    const obj: any = {};
    if (message.continuousAnalysis !== 0) {
      obj.continuousAnalysis = discovered_ContinuousAnalysisToJSON(message.continuousAnalysis);
    }
    if (message.lastAnalysisTime !== undefined) {
      obj.lastAnalysisTime = message.lastAnalysisTime.toISOString();
    }
    if (message.analysisStatus !== 0) {
      obj.analysisStatus = discovered_AnalysisStatusToJSON(message.analysisStatus);
    }
    if (message.analysisStatusError !== undefined) {
      obj.analysisStatusError = Status.toJSON(message.analysisStatusError);
    }
    return obj;
  },

  create(base?: DeepPartial<Discovered>): Discovered {
    return Discovered.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Discovered>): Discovered {
    const message = createBaseDiscovered();
    message.continuousAnalysis = object.continuousAnalysis ?? 0;
    message.lastAnalysisTime = object.lastAnalysisTime ?? undefined;
    message.analysisStatus = object.analysisStatus ?? 0;
    message.analysisStatusError = (object.analysisStatusError !== undefined && object.analysisStatusError !== null)
      ? Status.fromPartial(object.analysisStatusError)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
