// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/containeranalysis/v1beta1/common/common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "grafeas.v1beta1";

/** Kind represents the kinds of notes supported. */
export enum NoteKind {
  /** NOTE_KIND_UNSPECIFIED - Unknown. */
  NOTE_KIND_UNSPECIFIED = 0,
  /** VULNERABILITY - The note and occurrence represent a package vulnerability. */
  VULNERABILITY = 1,
  /** BUILD - The note and occurrence assert build provenance. */
  BUILD = 2,
  /** IMAGE - This represents an image basis relationship. */
  IMAGE = 3,
  /** PACKAGE - This represents a package installed via a package manager. */
  PACKAGE = 4,
  /** DEPLOYMENT - The note and occurrence track deployment events. */
  DEPLOYMENT = 5,
  /** DISCOVERY - The note and occurrence track the initial discovery status of a resource. */
  DISCOVERY = 6,
  /** ATTESTATION - This represents a logical "role" that can attest to artifacts. */
  ATTESTATION = 7,
  UNRECOGNIZED = -1,
}

export function noteKindFromJSON(object: any): NoteKind {
  switch (object) {
    case 0:
    case "NOTE_KIND_UNSPECIFIED":
      return NoteKind.NOTE_KIND_UNSPECIFIED;
    case 1:
    case "VULNERABILITY":
      return NoteKind.VULNERABILITY;
    case 2:
    case "BUILD":
      return NoteKind.BUILD;
    case 3:
    case "IMAGE":
      return NoteKind.IMAGE;
    case 4:
    case "PACKAGE":
      return NoteKind.PACKAGE;
    case 5:
    case "DEPLOYMENT":
      return NoteKind.DEPLOYMENT;
    case 6:
    case "DISCOVERY":
      return NoteKind.DISCOVERY;
    case 7:
    case "ATTESTATION":
      return NoteKind.ATTESTATION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NoteKind.UNRECOGNIZED;
  }
}

export function noteKindToJSON(object: NoteKind): string {
  switch (object) {
    case NoteKind.NOTE_KIND_UNSPECIFIED:
      return "NOTE_KIND_UNSPECIFIED";
    case NoteKind.VULNERABILITY:
      return "VULNERABILITY";
    case NoteKind.BUILD:
      return "BUILD";
    case NoteKind.IMAGE:
      return "IMAGE";
    case NoteKind.PACKAGE:
      return "PACKAGE";
    case NoteKind.DEPLOYMENT:
      return "DEPLOYMENT";
    case NoteKind.DISCOVERY:
      return "DISCOVERY";
    case NoteKind.ATTESTATION:
      return "ATTESTATION";
    case NoteKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Metadata for any related URL information. */
export interface RelatedUrl {
  /** Specific URL associated with the resource. */
  url: string;
  /** Label to describe usage of the URL. */
  label: string;
}

/**
 * Verifiers (e.g. Kritis implementations) MUST verify signatures
 * with respect to the trust anchors defined in policy (e.g. a Kritis policy).
 * Typically this means that the verifier has been configured with a map from
 * `public_key_id` to public key material (and any required parameters, e.g.
 * signing algorithm).
 *
 * In particular, verification implementations MUST NOT treat the signature
 * `public_key_id` as anything more than a key lookup hint. The `public_key_id`
 * DOES NOT validate or authenticate a public key; it only provides a mechanism
 * for quickly selecting a public key ALREADY CONFIGURED on the verifier through
 * a trusted channel. Verification implementations MUST reject signatures in any
 * of the following circumstances:
 *   * The `public_key_id` is not recognized by the verifier.
 *   * The public key that `public_key_id` refers to does not verify the
 *     signature with respect to the payload.
 *
 * The `signature` contents SHOULD NOT be "attached" (where the payload is
 * included with the serialized `signature` bytes). Verifiers MUST ignore any
 * "attached" payload and only verify signatures with respect to explicitly
 * provided payload (e.g. a `payload` field on the proto message that holds
 * this Signature, or the canonical serialization of the proto message that
 * holds this signature).
 */
export interface Signature {
  /**
   * The content of the signature, an opaque bytestring.
   * The payload that this signature verifies MUST be unambiguously provided
   * with the Signature during verification. A wrapper message might provide
   * the payload explicitly. Alternatively, a message might have a canonical
   * serialization that can always be unambiguously computed to derive the
   * payload.
   */
  signature: Buffer;
  /**
   * The identifier for the public key that verifies this signature.
   *   * The `public_key_id` is required.
   *   * The `public_key_id` MUST be an RFC3986 conformant URI.
   *   * When possible, the `public_key_id` SHOULD be an immutable reference,
   *     such as a cryptographic digest.
   *
   * Examples of valid `public_key_id`s:
   *
   * OpenPGP V4 public key fingerprint:
   *   * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA"
   * See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more
   * details on this scheme.
   *
   * RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER
   * serialization):
   *   * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU"
   *   * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
   */
  publicKeyId: string;
}

function createBaseRelatedUrl(): RelatedUrl {
  return { url: "", label: "" };
}

export const RelatedUrl: MessageFns<RelatedUrl> = {
  encode(message: RelatedUrl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelatedUrl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelatedUrl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelatedUrl {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      label: isSet(object.label) ? globalThis.String(object.label) : "",
    };
  },

  toJSON(message: RelatedUrl): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    return obj;
  },

  create(base?: DeepPartial<RelatedUrl>): RelatedUrl {
    return RelatedUrl.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RelatedUrl>): RelatedUrl {
    const message = createBaseRelatedUrl();
    message.url = object.url ?? "";
    message.label = object.label ?? "";
    return message;
  },
};

function createBaseSignature(): Signature {
  return { signature: Buffer.alloc(0), publicKeyId: "" };
}

export const Signature: MessageFns<Signature> = {
  encode(message: Signature, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signature.length !== 0) {
      writer.uint32(10).bytes(message.signature);
    }
    if (message.publicKeyId !== "") {
      writer.uint32(18).string(message.publicKeyId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Signature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signature = Buffer.from(reader.bytes());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.publicKeyId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Signature {
    return {
      signature: isSet(object.signature) ? Buffer.from(bytesFromBase64(object.signature)) : Buffer.alloc(0),
      publicKeyId: isSet(object.publicKeyId) ? globalThis.String(object.publicKeyId) : "",
    };
  },

  toJSON(message: Signature): unknown {
    const obj: any = {};
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.publicKeyId !== "") {
      obj.publicKeyId = message.publicKeyId;
    }
    return obj;
  },

  create(base?: DeepPartial<Signature>): Signature {
    return Signature.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Signature>): Signature {
    const message = createBaseSignature();
    message.signature = object.signature ?? Buffer.alloc(0);
    message.publicKeyId = object.publicKeyId ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
