// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/resultstore/v2/configuration.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Property, StatusAttributes } from "./common.js";

export const protobufPackage = "google.devtools.resultstore.v2";

/**
 * Represents a configuration within an Invocation associated with one or more
 * ConfiguredTargets. It captures the environment and other settings that
 * were used.
 */
export interface Configuration {
  /**
   * The format of this Configuration resource name must be:
   * invocations/${INVOCATION_ID}/configs/${CONFIG_ID}
   * The configuration ID of "default" should be preferred for the default
   * configuration in a single-config invocation.
   */
  name: string;
  /**
   * The resource ID components that identify the Configuration. They must match
   * the resource name after proper encoding.
   */
  id:
    | Configuration_Id
    | undefined;
  /** The aggregate status for this configuration. */
  statusAttributes:
    | StatusAttributes
    | undefined;
  /** Attributes that apply only to this configuration. */
  configurationAttributes:
    | ConfigurationAttributes
    | undefined;
  /**
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   */
  properties: Property[];
  /**
   * A human-readable name for Configuration for UIs.
   * It is recommended that this name be unique.
   * If omitted, UIs should default to configuration_id.
   */
  displayName: string;
}

/** The resource ID components that identify the Configuration. */
export interface Configuration_Id {
  /** The Invocation ID. */
  invocationId: string;
  /** The Configuration ID. */
  configurationId: string;
}

/** Attributes that apply only to the configuration. */
export interface ConfigurationAttributes {
  /** The type of cpu. (e.g. "x86", "powerpc") */
  cpu: string;
}

function createBaseConfiguration(): Configuration {
  return {
    name: "",
    id: undefined,
    statusAttributes: undefined,
    configurationAttributes: undefined,
    properties: [],
    displayName: "",
  };
}

export const Configuration: MessageFns<Configuration> = {
  encode(message: Configuration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.id !== undefined) {
      Configuration_Id.encode(message.id, writer.uint32(18).fork()).join();
    }
    if (message.statusAttributes !== undefined) {
      StatusAttributes.encode(message.statusAttributes, writer.uint32(26).fork()).join();
    }
    if (message.configurationAttributes !== undefined) {
      ConfigurationAttributes.encode(message.configurationAttributes, writer.uint32(42).fork()).join();
    }
    for (const v of message.properties) {
      Property.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.displayName !== "") {
      writer.uint32(66).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Configuration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = Configuration_Id.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.statusAttributes = StatusAttributes.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.configurationAttributes = ConfigurationAttributes.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.properties.push(Property.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Configuration {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      id: isSet(object.id) ? Configuration_Id.fromJSON(object.id) : undefined,
      statusAttributes: isSet(object.statusAttributes) ? StatusAttributes.fromJSON(object.statusAttributes) : undefined,
      configurationAttributes: isSet(object.configurationAttributes)
        ? ConfigurationAttributes.fromJSON(object.configurationAttributes)
        : undefined,
      properties: globalThis.Array.isArray(object?.properties)
        ? object.properties.map((e: any) => Property.fromJSON(e))
        : [],
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: Configuration): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.id !== undefined) {
      obj.id = Configuration_Id.toJSON(message.id);
    }
    if (message.statusAttributes !== undefined) {
      obj.statusAttributes = StatusAttributes.toJSON(message.statusAttributes);
    }
    if (message.configurationAttributes !== undefined) {
      obj.configurationAttributes = ConfigurationAttributes.toJSON(message.configurationAttributes);
    }
    if (message.properties?.length) {
      obj.properties = message.properties.map((e) => Property.toJSON(e));
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<Configuration>): Configuration {
    return Configuration.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Configuration>): Configuration {
    const message = createBaseConfiguration();
    message.name = object.name ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Configuration_Id.fromPartial(object.id) : undefined;
    message.statusAttributes = (object.statusAttributes !== undefined && object.statusAttributes !== null)
      ? StatusAttributes.fromPartial(object.statusAttributes)
      : undefined;
    message.configurationAttributes =
      (object.configurationAttributes !== undefined && object.configurationAttributes !== null)
        ? ConfigurationAttributes.fromPartial(object.configurationAttributes)
        : undefined;
    message.properties = object.properties?.map((e) => Property.fromPartial(e)) || [];
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseConfiguration_Id(): Configuration_Id {
  return { invocationId: "", configurationId: "" };
}

export const Configuration_Id: MessageFns<Configuration_Id> = {
  encode(message: Configuration_Id, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.invocationId !== "") {
      writer.uint32(10).string(message.invocationId);
    }
    if (message.configurationId !== "") {
      writer.uint32(18).string(message.configurationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Configuration_Id {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfiguration_Id();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.invocationId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.configurationId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Configuration_Id {
    return {
      invocationId: isSet(object.invocationId) ? globalThis.String(object.invocationId) : "",
      configurationId: isSet(object.configurationId) ? globalThis.String(object.configurationId) : "",
    };
  },

  toJSON(message: Configuration_Id): unknown {
    const obj: any = {};
    if (message.invocationId !== "") {
      obj.invocationId = message.invocationId;
    }
    if (message.configurationId !== "") {
      obj.configurationId = message.configurationId;
    }
    return obj;
  },

  create(base?: DeepPartial<Configuration_Id>): Configuration_Id {
    return Configuration_Id.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Configuration_Id>): Configuration_Id {
    const message = createBaseConfiguration_Id();
    message.invocationId = object.invocationId ?? "";
    message.configurationId = object.configurationId ?? "";
    return message;
  },
};

function createBaseConfigurationAttributes(): ConfigurationAttributes {
  return { cpu: "" };
}

export const ConfigurationAttributes: MessageFns<ConfigurationAttributes> = {
  encode(message: ConfigurationAttributes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cpu !== "") {
      writer.uint32(10).string(message.cpu);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigurationAttributes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigurationAttributes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cpu = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigurationAttributes {
    return { cpu: isSet(object.cpu) ? globalThis.String(object.cpu) : "" };
  },

  toJSON(message: ConfigurationAttributes): unknown {
    const obj: any = {};
    if (message.cpu !== "") {
      obj.cpu = message.cpu;
    }
    return obj;
  },

  create(base?: DeepPartial<ConfigurationAttributes>): ConfigurationAttributes {
    return ConfigurationAttributes.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConfigurationAttributes>): ConfigurationAttributes {
    const message = createBaseConfigurationAttributes();
    message.cpu = object.cpu ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
