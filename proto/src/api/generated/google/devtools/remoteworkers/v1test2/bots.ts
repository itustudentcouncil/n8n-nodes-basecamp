// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/remoteworkers/v1test2/bots.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Any } from "../../../protobuf/any.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";
import { Worker } from "./worker.js";

export const protobufPackage = "google.devtools.remoteworkers.v1test2";

/**
 * A coarse description of the status of the bot that the server uses to
 * determine whether to assign the bot new leases.
 */
export enum BotStatus {
  /** BOT_STATUS_UNSPECIFIED - Default value; do not use. */
  BOT_STATUS_UNSPECIFIED = 0,
  /** OK - The bot is healthy, and will accept leases as normal. */
  OK = 1,
  /**
   * UNHEALTHY - The bot is unhealthy and will not accept new leases. For example, the bot
   * may have detected that available disk space is too low. This situation may
   * resolve itself, but will typically require human intervention.
   */
  UNHEALTHY = 2,
  /**
   * HOST_REBOOTING - The bot has been asked to reboot the host. The bot will not accept new
   * leases; once all leases are complete, this session will no longer be
   * updated but the bot will be expected to establish a new session after the
   * reboot completes.
   */
  HOST_REBOOTING = 3,
  /**
   * BOT_TERMINATING - The bot has been asked to shut down. As with HOST_REBOOTING, once all
   * leases are completed, the session will no longer be updated and the bot
   * will not be expected to establish a new session.
   *
   * Bots are typically only asked to shut down if its host computer will be
   * modified in some way, such as deleting a VM.
   */
  BOT_TERMINATING = 4,
  /** INITIALIZING - The bot is initializing and is not ready to accept leases. */
  INITIALIZING = 5,
  UNRECOGNIZED = -1,
}

export function botStatusFromJSON(object: any): BotStatus {
  switch (object) {
    case 0:
    case "BOT_STATUS_UNSPECIFIED":
      return BotStatus.BOT_STATUS_UNSPECIFIED;
    case 1:
    case "OK":
      return BotStatus.OK;
    case 2:
    case "UNHEALTHY":
      return BotStatus.UNHEALTHY;
    case 3:
    case "HOST_REBOOTING":
      return BotStatus.HOST_REBOOTING;
    case 4:
    case "BOT_TERMINATING":
      return BotStatus.BOT_TERMINATING;
    case 5:
    case "INITIALIZING":
      return BotStatus.INITIALIZING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotStatus.UNRECOGNIZED;
  }
}

export function botStatusToJSON(object: BotStatus): string {
  switch (object) {
    case BotStatus.BOT_STATUS_UNSPECIFIED:
      return "BOT_STATUS_UNSPECIFIED";
    case BotStatus.OK:
      return "OK";
    case BotStatus.UNHEALTHY:
      return "UNHEALTHY";
    case BotStatus.HOST_REBOOTING:
      return "HOST_REBOOTING";
    case BotStatus.BOT_TERMINATING:
      return "BOT_TERMINATING";
    case BotStatus.INITIALIZING:
      return "INITIALIZING";
    case BotStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The state of the lease. All leases start in the PENDING state. A bot can
 * change PENDING to ACTIVE or (in the case of an error) COMPLETED, or from
 * ACTIVE to COMPLETED. The server can change PENDING or ACTIVE to CANCELLED if
 * it wants the bot to release its resources - for example, if the bot needs to
 * be quarantined (it's producing bad output) or a cell needs to be drained.
 */
export enum LeaseState {
  /** LEASE_STATE_UNSPECIFIED - Default value; do not use. */
  LEASE_STATE_UNSPECIFIED = 0,
  /**
   * PENDING - Pending: the server expects the bot to accept this lease. This may only be
   * set by the server.
   */
  PENDING = 1,
  /** ACTIVE - Active: the bot has accepted this lease. This may only be set by the bot. */
  ACTIVE = 2,
  /**
   * COMPLETED - Completed: the bot is no longer leased. This may only be set by the bot,
   * and the status field must be populated iff the state is COMPLETED.
   */
  COMPLETED = 4,
  /**
   * CANCELLED - Cancelled: The bot should immediately release all resources associated with
   * the lease. This may only be set by the server.
   */
  CANCELLED = 5,
  UNRECOGNIZED = -1,
}

export function leaseStateFromJSON(object: any): LeaseState {
  switch (object) {
    case 0:
    case "LEASE_STATE_UNSPECIFIED":
      return LeaseState.LEASE_STATE_UNSPECIFIED;
    case 1:
    case "PENDING":
      return LeaseState.PENDING;
    case 2:
    case "ACTIVE":
      return LeaseState.ACTIVE;
    case 4:
    case "COMPLETED":
      return LeaseState.COMPLETED;
    case 5:
    case "CANCELLED":
      return LeaseState.CANCELLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LeaseState.UNRECOGNIZED;
  }
}

export function leaseStateToJSON(object: LeaseState): string {
  switch (object) {
    case LeaseState.LEASE_STATE_UNSPECIFIED:
      return "LEASE_STATE_UNSPECIFIED";
    case LeaseState.PENDING:
      return "PENDING";
    case LeaseState.ACTIVE:
      return "ACTIVE";
    case LeaseState.COMPLETED:
      return "COMPLETED";
    case LeaseState.CANCELLED:
      return "CANCELLED";
    case LeaseState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A bot session represents the state of a bot while in continuous contact with
 * the server for a period of time. The session includes information about the
 * worker - that is, the *worker* (the physical or virtual hardware) is
 * considered to be a property of the bot (the software agent running on that
 * hardware), which is the reverse of real life, but more natural from the point
 * of the view of this API, which communicates solely with the bot and not
 * directly with the underlying worker.
 */
export interface BotSession {
  /**
   * The bot session name, as selected by the server. Output only during a call
   * to CreateBotSession.
   */
  name: string;
  /**
   * A unique bot ID within the farm used to persistently identify this bot over
   * time (i.e., over multiple sessions). This ID must be unique within a
   * farm. Typically, the bot ID will be the same as the name of the primary
   * device in the worker (e.g., what you'd get from typing `uname -n` on *nix),
   * but this is not required since a single device may allow multiple bots to
   * run on it, each with access to different resources. What is important is
   * that this ID is meaningful to humans, who might need to hunt a physical
   * machine down to fix it.
   *
   * When CreateBotSession is successfully called with a bot_id, all prior
   * sessions with the same ID are invalidated. If a bot attempts to update an
   * invalid session, the server must reject that request, and may also
   * quarantine the other bot with the same bot IDs (ie, stop sending it new
   * leases and alert an admin).
   */
  botId: string;
  /**
   * The status of the bot. This must be populated in every call to
   * UpdateBotSession.
   */
  status: BotStatus;
  /**
   * A description of the worker hosting this bot. The Worker message is used
   * here in the Status context (see Worker for more information).  If multiple
   * bots are running on the worker, this field should only describe the
   * resources accessible from this bot.
   *
   * During the call to CreateBotSession, the server may make arbitrary changes
   * to the worker's `server_properties` field (see that field for more
   * information). Otherwise, this field is input-only.
   */
  worker:
    | Worker
    | undefined;
  /**
   * A list of all leases that are a part of this session. See the Lease message
   * for details.
   */
  leases: Lease[];
  /**
   * The time at which this bot session will expire, unless the bot calls
   * UpdateBotSession again. Output only.
   */
  expireTime:
    | Date
    | undefined;
  /**
   * The version of the bot code currently running. The server may use this
   * information to issue an admin action to tell the bot to update itself.
   */
  version: string;
}

/**
 * A Lease is a lease that the scheduler has assigned to this bot. If the bot
 * notices (by UpdateBotSession) that it has any leases in the PENDING state, it
 * should call UpdateBotSession to put the leases into the ACTIVE state and
 * start executing their assignments.
 *
 * All fields in this message are output-only, *except* the `state` and `status`
 * fields. Note that repeated fields can only be updated as a unit, so on every
 * update the bot must provide an update for *all* the leases the server expects
 * it to report on.
 *
 * The scheduler *should* ensure that all leases scheduled to a bot can actually
 * be accepted, but race conditions may occur. In such cases, the bot should
 * attempt to accept the leases in the order they are listed by the server, to
 * allow the server to control priorities.
 *
 * The server will remove COMPLETED leases from time to time, after which the
 * bot shouldn't report on them any more (the server will ignore superfluous
 * COMPLETED records).
 */
export interface Lease {
  /** A short string uniquely identifing the lease within this bot session. */
  id: string;
  /**
   * The actual work to be performed, if any. May be omitted by the server if
   * the lease is not in the `PENDING` state. The message must be meaningful to
   * the bot. Output only (must only be set by the server).
   */
  payload:
    | Any
    | undefined;
  /**
   * Any result the bot wishes to provide about the lease. Must not be changed
   * after the first call with the lease in the `COMPLETED` or `CANCELLED`
   * state. Input only (must only be set by the bot, will not be echoed by the
   * server).
   */
  result:
    | Any
    | undefined;
  /** The state of the lease. See LeaseState for more information. */
  state: LeaseState;
  /**
   * The final status of the lease (should be populated by the bot if the state
   * is completed). This is the status of the lease, not of any task represented
   * by the lease. For example, if the bot could not accept the lease because it
   * asked for some resource the bot didn't have, this status will be
   * FAILED_PRECONDITION. But if the assignment in the lease didn't execute
   * correctly, this field will be `OK` while the failure of the assignment must
   * communicated via the `result` field.
   */
  status:
    | Status
    | undefined;
  /**
   * The requirements that are being claimed by this lease. This field may be
   * omitted by the server if the lease is not pending.
   */
  requirements:
    | Worker
    | undefined;
  /**
   * The time at which this lease expires. The server *may* extend this over
   * time, but due to race conditions, the bot is not *required* to respect any
   * expiry date except the first one.
   */
  expireTime:
    | Date
    | undefined;
  /**
   * DEPRECATED. The assignment should be provided to the bot via the `payload`
   * field. Clients that wish to use a simple name (such as a queue of work
   * provided elsewhere) should define a custom message type and encode it into
   * `payload`.
   *
   * @deprecated
   */
  assignment: string;
  /**
   * DEPRECATED. Use `payload` instead.
   *
   * @deprecated
   */
  inlineAssignment: Any | undefined;
}

/**
 * AdminTemp is a prelimiary set of administration tasks. It's called "Temp"
 * because we do not yet know the best way to represent admin tasks; it's
 * possible that this will be entirely replaced in later versions of this API.
 * If this message proves to be sufficient, it will be renamed in the alpha or
 * beta release of this API.
 *
 * This message (suitably marshalled into a protobuf.Any) can be used as the
 * inline_assignment field in a lease; the lease assignment field should simply
 * be `"admin"` in these cases.
 *
 * This message is heavily based on Swarming administration tasks from the LUCI
 * project (http://github.com/luci/luci-py/appengine/swarming).
 */
export interface AdminTemp {
  /** The admin action; see `Command` for legal values. */
  command: AdminTemp_Command;
  /** The argument to the admin action; see `Command` for semantics. */
  arg: string;
}

/** Possible administration actions. */
export enum AdminTemp_Command {
  /** UNSPECIFIED - Illegal value. */
  UNSPECIFIED = 0,
  /**
   * BOT_UPDATE - Download and run a new version of the bot. `arg` will be a resource
   * accessible via `ByteStream.Read` to obtain the new bot code.
   */
  BOT_UPDATE = 1,
  /**
   * BOT_RESTART - Restart the bot without downloading a new version. `arg` will be a
   * message to log.
   */
  BOT_RESTART = 2,
  /**
   * BOT_TERMINATE - Shut down the bot. `arg` will be a task resource name (similar to those
   * in tasks.proto) that the bot can use to tell the server that it is
   * terminating.
   */
  BOT_TERMINATE = 3,
  /** HOST_RESTART - Restart the host computer. `arg` will be a message to log. */
  HOST_RESTART = 4,
  UNRECOGNIZED = -1,
}

export function adminTemp_CommandFromJSON(object: any): AdminTemp_Command {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return AdminTemp_Command.UNSPECIFIED;
    case 1:
    case "BOT_UPDATE":
      return AdminTemp_Command.BOT_UPDATE;
    case 2:
    case "BOT_RESTART":
      return AdminTemp_Command.BOT_RESTART;
    case 3:
    case "BOT_TERMINATE":
      return AdminTemp_Command.BOT_TERMINATE;
    case 4:
    case "HOST_RESTART":
      return AdminTemp_Command.HOST_RESTART;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AdminTemp_Command.UNRECOGNIZED;
  }
}

export function adminTemp_CommandToJSON(object: AdminTemp_Command): string {
  switch (object) {
    case AdminTemp_Command.UNSPECIFIED:
      return "UNSPECIFIED";
    case AdminTemp_Command.BOT_UPDATE:
      return "BOT_UPDATE";
    case AdminTemp_Command.BOT_RESTART:
      return "BOT_RESTART";
    case AdminTemp_Command.BOT_TERMINATE:
      return "BOT_TERMINATE";
    case AdminTemp_Command.HOST_RESTART:
      return "HOST_RESTART";
    case AdminTemp_Command.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request message for CreateBotSession. */
export interface CreateBotSessionRequest {
  /** Required. The farm resource. */
  parent: string;
  /**
   * Required. The bot session to create. Server-assigned fields like name must
   * be unset.
   */
  botSession: BotSession | undefined;
}

/** Request message for UpdateBotSession. */
export interface UpdateBotSessionRequest {
  /** Required. The bot session name. Must match bot_session.name. */
  name: string;
  /** Required. The bot session resource to update. */
  botSession:
    | BotSession
    | undefined;
  /**
   * Required. The fields on the bot that should be updated. See the BotSession
   * resource for which fields are updatable by which caller.
   */
  updateMask: string[] | undefined;
}

function createBaseBotSession(): BotSession {
  return { name: "", botId: "", status: 0, worker: undefined, leases: [], expireTime: undefined, version: "" };
}

export const BotSession: MessageFns<BotSession> = {
  encode(message: BotSession, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.botId !== "") {
      writer.uint32(18).string(message.botId);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.worker !== undefined) {
      Worker.encode(message.worker, writer.uint32(34).fork()).join();
    }
    for (const v of message.leases) {
      Lease.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(50).fork()).join();
    }
    if (message.version !== "") {
      writer.uint32(58).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotSession {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotSession();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.botId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.worker = Worker.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.leases.push(Lease.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotSession {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      botId: isSet(object.botId) ? globalThis.String(object.botId) : "",
      status: isSet(object.status) ? botStatusFromJSON(object.status) : 0,
      worker: isSet(object.worker) ? Worker.fromJSON(object.worker) : undefined,
      leases: globalThis.Array.isArray(object?.leases) ? object.leases.map((e: any) => Lease.fromJSON(e)) : [],
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      version: isSet(object.version) ? globalThis.String(object.version) : "",
    };
  },

  toJSON(message: BotSession): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.botId !== "") {
      obj.botId = message.botId;
    }
    if (message.status !== 0) {
      obj.status = botStatusToJSON(message.status);
    }
    if (message.worker !== undefined) {
      obj.worker = Worker.toJSON(message.worker);
    }
    if (message.leases?.length) {
      obj.leases = message.leases.map((e) => Lease.toJSON(e));
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create(base?: DeepPartial<BotSession>): BotSession {
    return BotSession.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BotSession>): BotSession {
    const message = createBaseBotSession();
    message.name = object.name ?? "";
    message.botId = object.botId ?? "";
    message.status = object.status ?? 0;
    message.worker = (object.worker !== undefined && object.worker !== null)
      ? Worker.fromPartial(object.worker)
      : undefined;
    message.leases = object.leases?.map((e) => Lease.fromPartial(e)) || [];
    message.expireTime = object.expireTime ?? undefined;
    message.version = object.version ?? "";
    return message;
  },
};

function createBaseLease(): Lease {
  return {
    id: "",
    payload: undefined,
    result: undefined,
    state: 0,
    status: undefined,
    requirements: undefined,
    expireTime: undefined,
    assignment: "",
    inlineAssignment: undefined,
  };
}

export const Lease: MessageFns<Lease> = {
  encode(message: Lease, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(58).string(message.id);
    }
    if (message.payload !== undefined) {
      Any.encode(message.payload, writer.uint32(66).fork()).join();
    }
    if (message.result !== undefined) {
      Any.encode(message.result, writer.uint32(74).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(26).fork()).join();
    }
    if (message.requirements !== undefined) {
      Worker.encode(message.requirements, writer.uint32(34).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(42).fork()).join();
    }
    if (message.assignment !== "") {
      writer.uint32(10).string(message.assignment);
    }
    if (message.inlineAssignment !== undefined) {
      Any.encode(message.inlineAssignment, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Lease {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLease();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 7:
          if (tag !== 58) {
            break;
          }

          message.id = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.payload = Any.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.result = Any.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requirements = Worker.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.assignment = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.inlineAssignment = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Lease {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      payload: isSet(object.payload) ? Any.fromJSON(object.payload) : undefined,
      result: isSet(object.result) ? Any.fromJSON(object.result) : undefined,
      state: isSet(object.state) ? leaseStateFromJSON(object.state) : 0,
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      requirements: isSet(object.requirements) ? Worker.fromJSON(object.requirements) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      assignment: isSet(object.assignment) ? globalThis.String(object.assignment) : "",
      inlineAssignment: isSet(object.inlineAssignment) ? Any.fromJSON(object.inlineAssignment) : undefined,
    };
  },

  toJSON(message: Lease): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.payload !== undefined) {
      obj.payload = Any.toJSON(message.payload);
    }
    if (message.result !== undefined) {
      obj.result = Any.toJSON(message.result);
    }
    if (message.state !== 0) {
      obj.state = leaseStateToJSON(message.state);
    }
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.requirements !== undefined) {
      obj.requirements = Worker.toJSON(message.requirements);
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.assignment !== "") {
      obj.assignment = message.assignment;
    }
    if (message.inlineAssignment !== undefined) {
      obj.inlineAssignment = Any.toJSON(message.inlineAssignment);
    }
    return obj;
  },

  create(base?: DeepPartial<Lease>): Lease {
    return Lease.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Lease>): Lease {
    const message = createBaseLease();
    message.id = object.id ?? "";
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? Any.fromPartial(object.payload)
      : undefined;
    message.result = (object.result !== undefined && object.result !== null)
      ? Any.fromPartial(object.result)
      : undefined;
    message.state = object.state ?? 0;
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.requirements = (object.requirements !== undefined && object.requirements !== null)
      ? Worker.fromPartial(object.requirements)
      : undefined;
    message.expireTime = object.expireTime ?? undefined;
    message.assignment = object.assignment ?? "";
    message.inlineAssignment = (object.inlineAssignment !== undefined && object.inlineAssignment !== null)
      ? Any.fromPartial(object.inlineAssignment)
      : undefined;
    return message;
  },
};

function createBaseAdminTemp(): AdminTemp {
  return { command: 0, arg: "" };
}

export const AdminTemp: MessageFns<AdminTemp> = {
  encode(message: AdminTemp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.command !== 0) {
      writer.uint32(8).int32(message.command);
    }
    if (message.arg !== "") {
      writer.uint32(18).string(message.arg);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdminTemp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdminTemp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.command = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.arg = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdminTemp {
    return {
      command: isSet(object.command) ? adminTemp_CommandFromJSON(object.command) : 0,
      arg: isSet(object.arg) ? globalThis.String(object.arg) : "",
    };
  },

  toJSON(message: AdminTemp): unknown {
    const obj: any = {};
    if (message.command !== 0) {
      obj.command = adminTemp_CommandToJSON(message.command);
    }
    if (message.arg !== "") {
      obj.arg = message.arg;
    }
    return obj;
  },

  create(base?: DeepPartial<AdminTemp>): AdminTemp {
    return AdminTemp.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdminTemp>): AdminTemp {
    const message = createBaseAdminTemp();
    message.command = object.command ?? 0;
    message.arg = object.arg ?? "";
    return message;
  },
};

function createBaseCreateBotSessionRequest(): CreateBotSessionRequest {
  return { parent: "", botSession: undefined };
}

export const CreateBotSessionRequest: MessageFns<CreateBotSessionRequest> = {
  encode(message: CreateBotSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.botSession !== undefined) {
      BotSession.encode(message.botSession, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBotSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBotSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.botSession = BotSession.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBotSessionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      botSession: isSet(object.botSession) ? BotSession.fromJSON(object.botSession) : undefined,
    };
  },

  toJSON(message: CreateBotSessionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.botSession !== undefined) {
      obj.botSession = BotSession.toJSON(message.botSession);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateBotSessionRequest>): CreateBotSessionRequest {
    return CreateBotSessionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateBotSessionRequest>): CreateBotSessionRequest {
    const message = createBaseCreateBotSessionRequest();
    message.parent = object.parent ?? "";
    message.botSession = (object.botSession !== undefined && object.botSession !== null)
      ? BotSession.fromPartial(object.botSession)
      : undefined;
    return message;
  },
};

function createBaseUpdateBotSessionRequest(): UpdateBotSessionRequest {
  return { name: "", botSession: undefined, updateMask: undefined };
}

export const UpdateBotSessionRequest: MessageFns<UpdateBotSessionRequest> = {
  encode(message: UpdateBotSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.botSession !== undefined) {
      BotSession.encode(message.botSession, writer.uint32(18).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBotSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBotSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.botSession = BotSession.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBotSessionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      botSession: isSet(object.botSession) ? BotSession.fromJSON(object.botSession) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateBotSessionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.botSession !== undefined) {
      obj.botSession = BotSession.toJSON(message.botSession);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateBotSessionRequest>): UpdateBotSessionRequest {
    return UpdateBotSessionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBotSessionRequest>): UpdateBotSessionRequest {
    const message = createBaseUpdateBotSessionRequest();
    message.name = object.name ?? "";
    message.botSession = (object.botSession !== undefined && object.botSession !== null)
      ? BotSession.fromPartial(object.botSession)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

/**
 * Design doc: https://goo.gl/oojM5H
 *
 * Loosely speaking, the Bots interface monitors a collection of workers (think
 * of them as "computers" for a moment). This collection is known as a "farm,"
 * and its purpose is to perform work on behalf of a client.
 *
 * Each worker runs a small program known as a "bot" that allows it to be
 * controlled by the server. This interface contains only methods that are
 * called by the bots themselves; admin functionality is out of scope for this
 * interface.
 *
 * More precisely, we use the term "worker" to refer to the physical "thing"
 * running the bot. We use the term "worker," and not "machine" or "computer,"
 * since a worker may consist of more than one machine - e.g., a computer with
 * multiple attached devices, or even a cluster of computers, with only one of
 * them running the bot. Conversely, a single machine may host several bots, in
 * which case each bot has a "worker" corresponding to the slice of the machine
 * being managed by that bot.
 *
 * The main resource in the Bots interface is not, surprisingly, a Bot - it is a
 * BotSession, which represents a period of time in which a bot is in continuous
 * contact with the server (see the BotSession message for more information).
 * The parent of a bot session can be thought of as an instance of a farm. That
 * is, one endpoint may be able to manage many farms for many users. For
 * example, for a farm managed through GCP, the parent resource will typically
 * take the form "projects/{project_id}". This is referred to below as "the farm
 * resource."
 */
export type BotsDefinition = typeof BotsDefinition;
export const BotsDefinition = {
  name: "Bots",
  fullName: "google.devtools.remoteworkers.v1test2.Bots",
  methods: {
    /**
     * CreateBotSession is called when the bot first joins the farm, and
     * establishes a session ID to ensure that multiple machines do not register
     * using the same name accidentally.
     */
    createBotSession: {
      name: "CreateBotSession",
      requestType: CreateBotSessionRequest,
      requestStream: false,
      responseType: BotSession,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([18, 112, 97, 114, 101, 110, 116, 44, 98, 111, 116, 95, 115, 101, 115, 115, 105, 111, 110]),
          ],
          578365826: [
            Buffer.from([
              47,
              58,
              11,
              98,
              111,
              116,
              95,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              34,
              32,
              47,
              118,
              49,
              116,
              101,
              115,
              116,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              42,
              125,
              47,
              98,
              111,
              116,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * UpdateBotSession must be called periodically by the bot (on a schedule
     * determined by the server) to let the server know about its status, and to
     * pick up new lease requests from the server.
     */
    updateBotSession: {
      name: "UpdateBotSession",
      requestType: UpdateBotSessionRequest,
      requestStream: false,
      responseType: BotSession,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              28,
              110,
              97,
              109,
              101,
              44,
              98,
              111,
              116,
              95,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              47,
              58,
              11,
              98,
              111,
              116,
              95,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              50,
              32,
              47,
              118,
              49,
              116,
              101,
              115,
              116,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              42,
              47,
              98,
              111,
              116,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface BotsServiceImplementation<CallContextExt = {}> {
  /**
   * CreateBotSession is called when the bot first joins the farm, and
   * establishes a session ID to ensure that multiple machines do not register
   * using the same name accidentally.
   */
  createBotSession(
    request: CreateBotSessionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BotSession>>;
  /**
   * UpdateBotSession must be called periodically by the bot (on a schedule
   * determined by the server) to let the server know about its status, and to
   * pick up new lease requests from the server.
   */
  updateBotSession(
    request: UpdateBotSessionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BotSession>>;
}

export interface BotsClient<CallOptionsExt = {}> {
  /**
   * CreateBotSession is called when the bot first joins the farm, and
   * establishes a session ID to ensure that multiple machines do not register
   * using the same name accidentally.
   */
  createBotSession(
    request: DeepPartial<CreateBotSessionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BotSession>;
  /**
   * UpdateBotSession must be called periodically by the bot (on a schedule
   * determined by the server) to let the server know about its status, and to
   * pick up new lease requests from the server.
   */
  updateBotSession(
    request: DeepPartial<UpdateBotSessionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BotSession>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
