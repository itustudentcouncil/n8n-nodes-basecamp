// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/artifactregistry/v1/yum_artifact.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Status } from "../../../rpc/status.js";

export const protobufPackage = "google.devtools.artifactregistry.v1";

/** A detailed representation of a Yum artifact. */
export interface YumArtifact {
  /** Output only. The Artifact Registry resource name of the artifact. */
  name: string;
  /** Output only. The yum package name of the artifact. */
  packageName: string;
  /** Output only. An artifact is a binary or source package. */
  packageType: YumArtifact_PackageType;
  /** Output only. Operating system architecture of the artifact. */
  architecture: string;
}

/** Package type is either binary or source. */
export enum YumArtifact_PackageType {
  /** PACKAGE_TYPE_UNSPECIFIED - Package type is not specified. */
  PACKAGE_TYPE_UNSPECIFIED = 0,
  /** BINARY - Binary package (.rpm). */
  BINARY = 1,
  /** SOURCE - Source package (.srpm). */
  SOURCE = 2,
  UNRECOGNIZED = -1,
}

export function yumArtifact_PackageTypeFromJSON(object: any): YumArtifact_PackageType {
  switch (object) {
    case 0:
    case "PACKAGE_TYPE_UNSPECIFIED":
      return YumArtifact_PackageType.PACKAGE_TYPE_UNSPECIFIED;
    case 1:
    case "BINARY":
      return YumArtifact_PackageType.BINARY;
    case 2:
    case "SOURCE":
      return YumArtifact_PackageType.SOURCE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return YumArtifact_PackageType.UNRECOGNIZED;
  }
}

export function yumArtifact_PackageTypeToJSON(object: YumArtifact_PackageType): string {
  switch (object) {
    case YumArtifact_PackageType.PACKAGE_TYPE_UNSPECIFIED:
      return "PACKAGE_TYPE_UNSPECIFIED";
    case YumArtifact_PackageType.BINARY:
      return "BINARY";
    case YumArtifact_PackageType.SOURCE:
      return "SOURCE";
    case YumArtifact_PackageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Google Cloud Storage location where the artifacts currently reside. */
export interface ImportYumArtifactsGcsSource {
  /** Cloud Storage paths URI (e.g., gs://my_bucket//my_object). */
  uris: string[];
  /** Supports URI wildcards for matching multiple objects from a single URI. */
  useWildcards: boolean;
}

/** The request to import new yum artifacts. */
export interface ImportYumArtifactsRequest {
  /** Google Cloud Storage location where input content is located. */
  gcsSource?:
    | ImportYumArtifactsGcsSource
    | undefined;
  /** The name of the parent resource where the artifacts will be imported. */
  parent: string;
}

/** Error information explaining why a package was not imported. */
export interface ImportYumArtifactsErrorInfo {
  /** Google Cloud Storage location requested. */
  gcsSource?:
    | ImportYumArtifactsGcsSource
    | undefined;
  /** The detailed error status. */
  error: Status | undefined;
}

/** The response message from importing YUM artifacts. */
export interface ImportYumArtifactsResponse {
  /** The yum artifacts imported. */
  yumArtifacts: YumArtifact[];
  /** Detailed error info for packages that were not imported. */
  errors: ImportYumArtifactsErrorInfo[];
}

/** The operation metadata for importing artifacts. */
export interface ImportYumArtifactsMetadata {
}

function createBaseYumArtifact(): YumArtifact {
  return { name: "", packageName: "", packageType: 0, architecture: "" };
}

export const YumArtifact: MessageFns<YumArtifact> = {
  encode(message: YumArtifact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.packageName !== "") {
      writer.uint32(18).string(message.packageName);
    }
    if (message.packageType !== 0) {
      writer.uint32(24).int32(message.packageType);
    }
    if (message.architecture !== "") {
      writer.uint32(34).string(message.architecture);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): YumArtifact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseYumArtifact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.packageName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.packageType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.architecture = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): YumArtifact {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      packageName: isSet(object.packageName) ? globalThis.String(object.packageName) : "",
      packageType: isSet(object.packageType) ? yumArtifact_PackageTypeFromJSON(object.packageType) : 0,
      architecture: isSet(object.architecture) ? globalThis.String(object.architecture) : "",
    };
  },

  toJSON(message: YumArtifact): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.packageName !== "") {
      obj.packageName = message.packageName;
    }
    if (message.packageType !== 0) {
      obj.packageType = yumArtifact_PackageTypeToJSON(message.packageType);
    }
    if (message.architecture !== "") {
      obj.architecture = message.architecture;
    }
    return obj;
  },

  create(base?: DeepPartial<YumArtifact>): YumArtifact {
    return YumArtifact.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<YumArtifact>): YumArtifact {
    const message = createBaseYumArtifact();
    message.name = object.name ?? "";
    message.packageName = object.packageName ?? "";
    message.packageType = object.packageType ?? 0;
    message.architecture = object.architecture ?? "";
    return message;
  },
};

function createBaseImportYumArtifactsGcsSource(): ImportYumArtifactsGcsSource {
  return { uris: [], useWildcards: false };
}

export const ImportYumArtifactsGcsSource: MessageFns<ImportYumArtifactsGcsSource> = {
  encode(message: ImportYumArtifactsGcsSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.uris) {
      writer.uint32(10).string(v!);
    }
    if (message.useWildcards !== false) {
      writer.uint32(16).bool(message.useWildcards);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportYumArtifactsGcsSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportYumArtifactsGcsSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uris.push(reader.string());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.useWildcards = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportYumArtifactsGcsSource {
    return {
      uris: globalThis.Array.isArray(object?.uris) ? object.uris.map((e: any) => globalThis.String(e)) : [],
      useWildcards: isSet(object.useWildcards) ? globalThis.Boolean(object.useWildcards) : false,
    };
  },

  toJSON(message: ImportYumArtifactsGcsSource): unknown {
    const obj: any = {};
    if (message.uris?.length) {
      obj.uris = message.uris;
    }
    if (message.useWildcards !== false) {
      obj.useWildcards = message.useWildcards;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportYumArtifactsGcsSource>): ImportYumArtifactsGcsSource {
    return ImportYumArtifactsGcsSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportYumArtifactsGcsSource>): ImportYumArtifactsGcsSource {
    const message = createBaseImportYumArtifactsGcsSource();
    message.uris = object.uris?.map((e) => e) || [];
    message.useWildcards = object.useWildcards ?? false;
    return message;
  },
};

function createBaseImportYumArtifactsRequest(): ImportYumArtifactsRequest {
  return { gcsSource: undefined, parent: "" };
}

export const ImportYumArtifactsRequest: MessageFns<ImportYumArtifactsRequest> = {
  encode(message: ImportYumArtifactsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsSource !== undefined) {
      ImportYumArtifactsGcsSource.encode(message.gcsSource, writer.uint32(18).fork()).join();
    }
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportYumArtifactsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportYumArtifactsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gcsSource = ImportYumArtifactsGcsSource.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportYumArtifactsRequest {
    return {
      gcsSource: isSet(object.gcsSource) ? ImportYumArtifactsGcsSource.fromJSON(object.gcsSource) : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
    };
  },

  toJSON(message: ImportYumArtifactsRequest): unknown {
    const obj: any = {};
    if (message.gcsSource !== undefined) {
      obj.gcsSource = ImportYumArtifactsGcsSource.toJSON(message.gcsSource);
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportYumArtifactsRequest>): ImportYumArtifactsRequest {
    return ImportYumArtifactsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportYumArtifactsRequest>): ImportYumArtifactsRequest {
    const message = createBaseImportYumArtifactsRequest();
    message.gcsSource = (object.gcsSource !== undefined && object.gcsSource !== null)
      ? ImportYumArtifactsGcsSource.fromPartial(object.gcsSource)
      : undefined;
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseImportYumArtifactsErrorInfo(): ImportYumArtifactsErrorInfo {
  return { gcsSource: undefined, error: undefined };
}

export const ImportYumArtifactsErrorInfo: MessageFns<ImportYumArtifactsErrorInfo> = {
  encode(message: ImportYumArtifactsErrorInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsSource !== undefined) {
      ImportYumArtifactsGcsSource.encode(message.gcsSource, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportYumArtifactsErrorInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportYumArtifactsErrorInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsSource = ImportYumArtifactsGcsSource.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportYumArtifactsErrorInfo {
    return {
      gcsSource: isSet(object.gcsSource) ? ImportYumArtifactsGcsSource.fromJSON(object.gcsSource) : undefined,
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ImportYumArtifactsErrorInfo): unknown {
    const obj: any = {};
    if (message.gcsSource !== undefined) {
      obj.gcsSource = ImportYumArtifactsGcsSource.toJSON(message.gcsSource);
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    return obj;
  },

  create(base?: DeepPartial<ImportYumArtifactsErrorInfo>): ImportYumArtifactsErrorInfo {
    return ImportYumArtifactsErrorInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportYumArtifactsErrorInfo>): ImportYumArtifactsErrorInfo {
    const message = createBaseImportYumArtifactsErrorInfo();
    message.gcsSource = (object.gcsSource !== undefined && object.gcsSource !== null)
      ? ImportYumArtifactsGcsSource.fromPartial(object.gcsSource)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseImportYumArtifactsResponse(): ImportYumArtifactsResponse {
  return { yumArtifacts: [], errors: [] };
}

export const ImportYumArtifactsResponse: MessageFns<ImportYumArtifactsResponse> = {
  encode(message: ImportYumArtifactsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.yumArtifacts) {
      YumArtifact.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.errors) {
      ImportYumArtifactsErrorInfo.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportYumArtifactsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportYumArtifactsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.yumArtifacts.push(YumArtifact.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errors.push(ImportYumArtifactsErrorInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportYumArtifactsResponse {
    return {
      yumArtifacts: globalThis.Array.isArray(object?.yumArtifacts)
        ? object.yumArtifacts.map((e: any) => YumArtifact.fromJSON(e))
        : [],
      errors: globalThis.Array.isArray(object?.errors)
        ? object.errors.map((e: any) => ImportYumArtifactsErrorInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ImportYumArtifactsResponse): unknown {
    const obj: any = {};
    if (message.yumArtifacts?.length) {
      obj.yumArtifacts = message.yumArtifacts.map((e) => YumArtifact.toJSON(e));
    }
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => ImportYumArtifactsErrorInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ImportYumArtifactsResponse>): ImportYumArtifactsResponse {
    return ImportYumArtifactsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportYumArtifactsResponse>): ImportYumArtifactsResponse {
    const message = createBaseImportYumArtifactsResponse();
    message.yumArtifacts = object.yumArtifacts?.map((e) => YumArtifact.fromPartial(e)) || [];
    message.errors = object.errors?.map((e) => ImportYumArtifactsErrorInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseImportYumArtifactsMetadata(): ImportYumArtifactsMetadata {
  return {};
}

export const ImportYumArtifactsMetadata: MessageFns<ImportYumArtifactsMetadata> = {
  encode(_: ImportYumArtifactsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportYumArtifactsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportYumArtifactsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ImportYumArtifactsMetadata {
    return {};
  },

  toJSON(_: ImportYumArtifactsMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ImportYumArtifactsMetadata>): ImportYumArtifactsMetadata {
    return ImportYumArtifactsMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ImportYumArtifactsMetadata>): ImportYumArtifactsMetadata {
    const message = createBaseImportYumArtifactsMetadata();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
