// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/artifactregistry/v1/settings.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";

export const protobufPackage = "google.devtools.artifactregistry.v1";

/** The Artifact Registry settings that apply to a Project. */
export interface ProjectSettings {
  /**
   * The name of the project's settings.
   *
   * Always of the form:
   * projects/{project-id}/projectSettings
   *
   * In update request: never set
   * In response: always set
   */
  name: string;
  /** The redirection state of the legacy repositories in this project. */
  legacyRedirectionState: ProjectSettings_RedirectionState;
}

/** The possible redirection states for legacy repositories. */
export enum ProjectSettings_RedirectionState {
  /** REDIRECTION_STATE_UNSPECIFIED - No redirection status has been set. */
  REDIRECTION_STATE_UNSPECIFIED = 0,
  /** REDIRECTION_FROM_GCR_IO_DISABLED - Redirection is disabled. */
  REDIRECTION_FROM_GCR_IO_DISABLED = 1,
  /** REDIRECTION_FROM_GCR_IO_ENABLED - Redirection is enabled. */
  REDIRECTION_FROM_GCR_IO_ENABLED = 2,
  /**
   * REDIRECTION_FROM_GCR_IO_FINALIZED - Redirection is enabled, and has been finalized so cannot be reverted.
   *
   * @deprecated
   */
  REDIRECTION_FROM_GCR_IO_FINALIZED = 3,
  UNRECOGNIZED = -1,
}

export function projectSettings_RedirectionStateFromJSON(object: any): ProjectSettings_RedirectionState {
  switch (object) {
    case 0:
    case "REDIRECTION_STATE_UNSPECIFIED":
      return ProjectSettings_RedirectionState.REDIRECTION_STATE_UNSPECIFIED;
    case 1:
    case "REDIRECTION_FROM_GCR_IO_DISABLED":
      return ProjectSettings_RedirectionState.REDIRECTION_FROM_GCR_IO_DISABLED;
    case 2:
    case "REDIRECTION_FROM_GCR_IO_ENABLED":
      return ProjectSettings_RedirectionState.REDIRECTION_FROM_GCR_IO_ENABLED;
    case 3:
    case "REDIRECTION_FROM_GCR_IO_FINALIZED":
      return ProjectSettings_RedirectionState.REDIRECTION_FROM_GCR_IO_FINALIZED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProjectSettings_RedirectionState.UNRECOGNIZED;
  }
}

export function projectSettings_RedirectionStateToJSON(object: ProjectSettings_RedirectionState): string {
  switch (object) {
    case ProjectSettings_RedirectionState.REDIRECTION_STATE_UNSPECIFIED:
      return "REDIRECTION_STATE_UNSPECIFIED";
    case ProjectSettings_RedirectionState.REDIRECTION_FROM_GCR_IO_DISABLED:
      return "REDIRECTION_FROM_GCR_IO_DISABLED";
    case ProjectSettings_RedirectionState.REDIRECTION_FROM_GCR_IO_ENABLED:
      return "REDIRECTION_FROM_GCR_IO_ENABLED";
    case ProjectSettings_RedirectionState.REDIRECTION_FROM_GCR_IO_FINALIZED:
      return "REDIRECTION_FROM_GCR_IO_FINALIZED";
    case ProjectSettings_RedirectionState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Gets the redirection status for a project. */
export interface GetProjectSettingsRequest {
  /** Required. The name of the projectSettings resource. */
  name: string;
}

/** Sets the settings of the project. */
export interface UpdateProjectSettingsRequest {
  /** The project settings. */
  projectSettings:
    | ProjectSettings
    | undefined;
  /** Field mask to support partial updates. */
  updateMask: string[] | undefined;
}

function createBaseProjectSettings(): ProjectSettings {
  return { name: "", legacyRedirectionState: 0 };
}

export const ProjectSettings: MessageFns<ProjectSettings> = {
  encode(message: ProjectSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.legacyRedirectionState !== 0) {
      writer.uint32(16).int32(message.legacyRedirectionState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.legacyRedirectionState = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectSettings {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      legacyRedirectionState: isSet(object.legacyRedirectionState)
        ? projectSettings_RedirectionStateFromJSON(object.legacyRedirectionState)
        : 0,
    };
  },

  toJSON(message: ProjectSettings): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.legacyRedirectionState !== 0) {
      obj.legacyRedirectionState = projectSettings_RedirectionStateToJSON(message.legacyRedirectionState);
    }
    return obj;
  },

  create(base?: DeepPartial<ProjectSettings>): ProjectSettings {
    return ProjectSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProjectSettings>): ProjectSettings {
    const message = createBaseProjectSettings();
    message.name = object.name ?? "";
    message.legacyRedirectionState = object.legacyRedirectionState ?? 0;
    return message;
  },
};

function createBaseGetProjectSettingsRequest(): GetProjectSettingsRequest {
  return { name: "" };
}

export const GetProjectSettingsRequest: MessageFns<GetProjectSettingsRequest> = {
  encode(message: GetProjectSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProjectSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProjectSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProjectSettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetProjectSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProjectSettingsRequest>): GetProjectSettingsRequest {
    return GetProjectSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProjectSettingsRequest>): GetProjectSettingsRequest {
    const message = createBaseGetProjectSettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateProjectSettingsRequest(): UpdateProjectSettingsRequest {
  return { projectSettings: undefined, updateMask: undefined };
}

export const UpdateProjectSettingsRequest: MessageFns<UpdateProjectSettingsRequest> = {
  encode(message: UpdateProjectSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectSettings !== undefined) {
      ProjectSettings.encode(message.projectSettings, writer.uint32(18).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProjectSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectSettings = ProjectSettings.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProjectSettingsRequest {
    return {
      projectSettings: isSet(object.projectSettings) ? ProjectSettings.fromJSON(object.projectSettings) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateProjectSettingsRequest): unknown {
    const obj: any = {};
    if (message.projectSettings !== undefined) {
      obj.projectSettings = ProjectSettings.toJSON(message.projectSettings);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateProjectSettingsRequest>): UpdateProjectSettingsRequest {
    return UpdateProjectSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProjectSettingsRequest>): UpdateProjectSettingsRequest {
    const message = createBaseUpdateProjectSettingsRequest();
    message.projectSettings = (object.projectSettings !== undefined && object.projectSettings !== null)
      ? ProjectSettings.fromPartial(object.projectSettings)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
