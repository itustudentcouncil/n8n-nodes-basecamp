// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/analytics/cloud/bigquery_export_platform_log.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.analytics.cloud";

/**
 * ExportStatusLog is used in a log entry to represent the status of a given
 * BigQuery export job from Google Analytics. Typically, it is sent at the
 * beginning of the day to indicate the completion of the previous day's export.
 */
export interface ExportStatusLog {
  /** The date of the export. Usually set to the collection date (YYYYMMDD). */
  exportDate: string;
  /** The status of the export. */
  status: ExportStatusLog_Status;
  /** The number of events exported, may include events not eligible for SLA. */
  eventCount: Long;
  /** Additional information associated with the status. */
  message: string;
}

/** The status of the export. */
export enum ExportStatusLog_Status {
  /** UNKNOWN - The export status is unknown. */
  UNKNOWN = 0,
  /** COMPLETE - The export completed and data is complete. */
  COMPLETE = 1,
  /** INCOMPLETE - The export completed but data is incomplete. */
  INCOMPLETE = 2,
  /** FAILED - The export failed. */
  FAILED = 3,
  UNRECOGNIZED = -1,
}

export function exportStatusLog_StatusFromJSON(object: any): ExportStatusLog_Status {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return ExportStatusLog_Status.UNKNOWN;
    case 1:
    case "COMPLETE":
      return ExportStatusLog_Status.COMPLETE;
    case 2:
    case "INCOMPLETE":
      return ExportStatusLog_Status.INCOMPLETE;
    case 3:
    case "FAILED":
      return ExportStatusLog_Status.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExportStatusLog_Status.UNRECOGNIZED;
  }
}

export function exportStatusLog_StatusToJSON(object: ExportStatusLog_Status): string {
  switch (object) {
    case ExportStatusLog_Status.UNKNOWN:
      return "UNKNOWN";
    case ExportStatusLog_Status.COMPLETE:
      return "COMPLETE";
    case ExportStatusLog_Status.INCOMPLETE:
      return "INCOMPLETE";
    case ExportStatusLog_Status.FAILED:
      return "FAILED";
    case ExportStatusLog_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseExportStatusLog(): ExportStatusLog {
  return { exportDate: "", status: 0, eventCount: Long.ZERO, message: "" };
}

export const ExportStatusLog: MessageFns<ExportStatusLog> = {
  encode(message: ExportStatusLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.exportDate !== "") {
      writer.uint32(10).string(message.exportDate);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (!message.eventCount.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.eventCount.toString());
    }
    if (message.message !== "") {
      writer.uint32(34).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportStatusLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportStatusLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.exportDate = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.eventCount = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportStatusLog {
    return {
      exportDate: isSet(object.exportDate) ? globalThis.String(object.exportDate) : "",
      status: isSet(object.status) ? exportStatusLog_StatusFromJSON(object.status) : 0,
      eventCount: isSet(object.eventCount) ? Long.fromValue(object.eventCount) : Long.ZERO,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ExportStatusLog): unknown {
    const obj: any = {};
    if (message.exportDate !== "") {
      obj.exportDate = message.exportDate;
    }
    if (message.status !== 0) {
      obj.status = exportStatusLog_StatusToJSON(message.status);
    }
    if (!message.eventCount.equals(Long.ZERO)) {
      obj.eventCount = (message.eventCount || Long.ZERO).toString();
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportStatusLog>): ExportStatusLog {
    return ExportStatusLog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportStatusLog>): ExportStatusLog {
    const message = createBaseExportStatusLog();
    message.exportDate = object.exportDate ?? "";
    message.status = object.status ?? 0;
    message.eventCount = (object.eventCount !== undefined && object.eventCount !== null)
      ? Long.fromValue(object.eventCount)
      : Long.ZERO;
    message.message = object.message ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
