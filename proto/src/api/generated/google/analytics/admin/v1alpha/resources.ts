// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/analytics/admin/v1alpha/resources.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { BoolValue } from "../../../protobuf/wrappers.js";
import { Audience } from "./audience.js";
import { ChannelGroup } from "./channel_group.js";
import { EventCreateRule } from "./event_create_and_edit.js";
import { ExpandedDataSet } from "./expanded_data_set.js";

export const protobufPackage = "google.analytics.admin.v1alpha";

/** The category selected for this property, used for industry benchmarking. */
export enum IndustryCategory {
  /** INDUSTRY_CATEGORY_UNSPECIFIED - Industry category unspecified */
  INDUSTRY_CATEGORY_UNSPECIFIED = 0,
  /** AUTOMOTIVE - Automotive */
  AUTOMOTIVE = 1,
  /** BUSINESS_AND_INDUSTRIAL_MARKETS - Business and industrial markets */
  BUSINESS_AND_INDUSTRIAL_MARKETS = 2,
  /** FINANCE - Finance */
  FINANCE = 3,
  /** HEALTHCARE - Healthcare */
  HEALTHCARE = 4,
  /** TECHNOLOGY - Technology */
  TECHNOLOGY = 5,
  /** TRAVEL - Travel */
  TRAVEL = 6,
  /** OTHER - Other */
  OTHER = 7,
  /** ARTS_AND_ENTERTAINMENT - Arts and entertainment */
  ARTS_AND_ENTERTAINMENT = 8,
  /** BEAUTY_AND_FITNESS - Beauty and fitness */
  BEAUTY_AND_FITNESS = 9,
  /** BOOKS_AND_LITERATURE - Books and literature */
  BOOKS_AND_LITERATURE = 10,
  /** FOOD_AND_DRINK - Food and drink */
  FOOD_AND_DRINK = 11,
  /** GAMES - Games */
  GAMES = 12,
  /** HOBBIES_AND_LEISURE - Hobbies and leisure */
  HOBBIES_AND_LEISURE = 13,
  /** HOME_AND_GARDEN - Home and garden */
  HOME_AND_GARDEN = 14,
  /** INTERNET_AND_TELECOM - Internet and telecom */
  INTERNET_AND_TELECOM = 15,
  /** LAW_AND_GOVERNMENT - Law and government */
  LAW_AND_GOVERNMENT = 16,
  /** NEWS - News */
  NEWS = 17,
  /** ONLINE_COMMUNITIES - Online communities */
  ONLINE_COMMUNITIES = 18,
  /** PEOPLE_AND_SOCIETY - People and society */
  PEOPLE_AND_SOCIETY = 19,
  /** PETS_AND_ANIMALS - Pets and animals */
  PETS_AND_ANIMALS = 20,
  /** REAL_ESTATE - Real estate */
  REAL_ESTATE = 21,
  /** REFERENCE - Reference */
  REFERENCE = 22,
  /** SCIENCE - Science */
  SCIENCE = 23,
  /** SPORTS - Sports */
  SPORTS = 24,
  /** JOBS_AND_EDUCATION - Jobs and education */
  JOBS_AND_EDUCATION = 25,
  /** SHOPPING - Shopping */
  SHOPPING = 26,
  UNRECOGNIZED = -1,
}

export function industryCategoryFromJSON(object: any): IndustryCategory {
  switch (object) {
    case 0:
    case "INDUSTRY_CATEGORY_UNSPECIFIED":
      return IndustryCategory.INDUSTRY_CATEGORY_UNSPECIFIED;
    case 1:
    case "AUTOMOTIVE":
      return IndustryCategory.AUTOMOTIVE;
    case 2:
    case "BUSINESS_AND_INDUSTRIAL_MARKETS":
      return IndustryCategory.BUSINESS_AND_INDUSTRIAL_MARKETS;
    case 3:
    case "FINANCE":
      return IndustryCategory.FINANCE;
    case 4:
    case "HEALTHCARE":
      return IndustryCategory.HEALTHCARE;
    case 5:
    case "TECHNOLOGY":
      return IndustryCategory.TECHNOLOGY;
    case 6:
    case "TRAVEL":
      return IndustryCategory.TRAVEL;
    case 7:
    case "OTHER":
      return IndustryCategory.OTHER;
    case 8:
    case "ARTS_AND_ENTERTAINMENT":
      return IndustryCategory.ARTS_AND_ENTERTAINMENT;
    case 9:
    case "BEAUTY_AND_FITNESS":
      return IndustryCategory.BEAUTY_AND_FITNESS;
    case 10:
    case "BOOKS_AND_LITERATURE":
      return IndustryCategory.BOOKS_AND_LITERATURE;
    case 11:
    case "FOOD_AND_DRINK":
      return IndustryCategory.FOOD_AND_DRINK;
    case 12:
    case "GAMES":
      return IndustryCategory.GAMES;
    case 13:
    case "HOBBIES_AND_LEISURE":
      return IndustryCategory.HOBBIES_AND_LEISURE;
    case 14:
    case "HOME_AND_GARDEN":
      return IndustryCategory.HOME_AND_GARDEN;
    case 15:
    case "INTERNET_AND_TELECOM":
      return IndustryCategory.INTERNET_AND_TELECOM;
    case 16:
    case "LAW_AND_GOVERNMENT":
      return IndustryCategory.LAW_AND_GOVERNMENT;
    case 17:
    case "NEWS":
      return IndustryCategory.NEWS;
    case 18:
    case "ONLINE_COMMUNITIES":
      return IndustryCategory.ONLINE_COMMUNITIES;
    case 19:
    case "PEOPLE_AND_SOCIETY":
      return IndustryCategory.PEOPLE_AND_SOCIETY;
    case 20:
    case "PETS_AND_ANIMALS":
      return IndustryCategory.PETS_AND_ANIMALS;
    case 21:
    case "REAL_ESTATE":
      return IndustryCategory.REAL_ESTATE;
    case 22:
    case "REFERENCE":
      return IndustryCategory.REFERENCE;
    case 23:
    case "SCIENCE":
      return IndustryCategory.SCIENCE;
    case 24:
    case "SPORTS":
      return IndustryCategory.SPORTS;
    case 25:
    case "JOBS_AND_EDUCATION":
      return IndustryCategory.JOBS_AND_EDUCATION;
    case 26:
    case "SHOPPING":
      return IndustryCategory.SHOPPING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IndustryCategory.UNRECOGNIZED;
  }
}

export function industryCategoryToJSON(object: IndustryCategory): string {
  switch (object) {
    case IndustryCategory.INDUSTRY_CATEGORY_UNSPECIFIED:
      return "INDUSTRY_CATEGORY_UNSPECIFIED";
    case IndustryCategory.AUTOMOTIVE:
      return "AUTOMOTIVE";
    case IndustryCategory.BUSINESS_AND_INDUSTRIAL_MARKETS:
      return "BUSINESS_AND_INDUSTRIAL_MARKETS";
    case IndustryCategory.FINANCE:
      return "FINANCE";
    case IndustryCategory.HEALTHCARE:
      return "HEALTHCARE";
    case IndustryCategory.TECHNOLOGY:
      return "TECHNOLOGY";
    case IndustryCategory.TRAVEL:
      return "TRAVEL";
    case IndustryCategory.OTHER:
      return "OTHER";
    case IndustryCategory.ARTS_AND_ENTERTAINMENT:
      return "ARTS_AND_ENTERTAINMENT";
    case IndustryCategory.BEAUTY_AND_FITNESS:
      return "BEAUTY_AND_FITNESS";
    case IndustryCategory.BOOKS_AND_LITERATURE:
      return "BOOKS_AND_LITERATURE";
    case IndustryCategory.FOOD_AND_DRINK:
      return "FOOD_AND_DRINK";
    case IndustryCategory.GAMES:
      return "GAMES";
    case IndustryCategory.HOBBIES_AND_LEISURE:
      return "HOBBIES_AND_LEISURE";
    case IndustryCategory.HOME_AND_GARDEN:
      return "HOME_AND_GARDEN";
    case IndustryCategory.INTERNET_AND_TELECOM:
      return "INTERNET_AND_TELECOM";
    case IndustryCategory.LAW_AND_GOVERNMENT:
      return "LAW_AND_GOVERNMENT";
    case IndustryCategory.NEWS:
      return "NEWS";
    case IndustryCategory.ONLINE_COMMUNITIES:
      return "ONLINE_COMMUNITIES";
    case IndustryCategory.PEOPLE_AND_SOCIETY:
      return "PEOPLE_AND_SOCIETY";
    case IndustryCategory.PETS_AND_ANIMALS:
      return "PETS_AND_ANIMALS";
    case IndustryCategory.REAL_ESTATE:
      return "REAL_ESTATE";
    case IndustryCategory.REFERENCE:
      return "REFERENCE";
    case IndustryCategory.SCIENCE:
      return "SCIENCE";
    case IndustryCategory.SPORTS:
      return "SPORTS";
    case IndustryCategory.JOBS_AND_EDUCATION:
      return "JOBS_AND_EDUCATION";
    case IndustryCategory.SHOPPING:
      return "SHOPPING";
    case IndustryCategory.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Various levels of service for Google Analytics. */
export enum ServiceLevel {
  /** SERVICE_LEVEL_UNSPECIFIED - Service level not specified or invalid. */
  SERVICE_LEVEL_UNSPECIFIED = 0,
  /** GOOGLE_ANALYTICS_STANDARD - The standard version of Google Analytics. */
  GOOGLE_ANALYTICS_STANDARD = 1,
  /** GOOGLE_ANALYTICS_360 - The paid, premium version of Google Analytics. */
  GOOGLE_ANALYTICS_360 = 2,
  UNRECOGNIZED = -1,
}

export function serviceLevelFromJSON(object: any): ServiceLevel {
  switch (object) {
    case 0:
    case "SERVICE_LEVEL_UNSPECIFIED":
      return ServiceLevel.SERVICE_LEVEL_UNSPECIFIED;
    case 1:
    case "GOOGLE_ANALYTICS_STANDARD":
      return ServiceLevel.GOOGLE_ANALYTICS_STANDARD;
    case 2:
    case "GOOGLE_ANALYTICS_360":
      return ServiceLevel.GOOGLE_ANALYTICS_360;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ServiceLevel.UNRECOGNIZED;
  }
}

export function serviceLevelToJSON(object: ServiceLevel): string {
  switch (object) {
    case ServiceLevel.SERVICE_LEVEL_UNSPECIFIED:
      return "SERVICE_LEVEL_UNSPECIFIED";
    case ServiceLevel.GOOGLE_ANALYTICS_STANDARD:
      return "GOOGLE_ANALYTICS_STANDARD";
    case ServiceLevel.GOOGLE_ANALYTICS_360:
      return "GOOGLE_ANALYTICS_360";
    case ServiceLevel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Different kinds of actors that can make changes to Google Analytics
 * resources.
 */
export enum ActorType {
  /** ACTOR_TYPE_UNSPECIFIED - Unknown or unspecified actor type. */
  ACTOR_TYPE_UNSPECIFIED = 0,
  /** USER - Changes made by the user specified in actor_email. */
  USER = 1,
  /** SYSTEM - Changes made by the Google Analytics system. */
  SYSTEM = 2,
  /** SUPPORT - Changes made by Google Analytics support team staff. */
  SUPPORT = 3,
  UNRECOGNIZED = -1,
}

export function actorTypeFromJSON(object: any): ActorType {
  switch (object) {
    case 0:
    case "ACTOR_TYPE_UNSPECIFIED":
      return ActorType.ACTOR_TYPE_UNSPECIFIED;
    case 1:
    case "USER":
      return ActorType.USER;
    case 2:
    case "SYSTEM":
      return ActorType.SYSTEM;
    case 3:
    case "SUPPORT":
      return ActorType.SUPPORT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActorType.UNRECOGNIZED;
  }
}

export function actorTypeToJSON(object: ActorType): string {
  switch (object) {
    case ActorType.ACTOR_TYPE_UNSPECIFIED:
      return "ACTOR_TYPE_UNSPECIFIED";
    case ActorType.USER:
      return "USER";
    case ActorType.SYSTEM:
      return "SYSTEM";
    case ActorType.SUPPORT:
      return "SUPPORT";
    case ActorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Types of actions that may change a resource. */
export enum ActionType {
  /** ACTION_TYPE_UNSPECIFIED - Action type unknown or not specified. */
  ACTION_TYPE_UNSPECIFIED = 0,
  /** CREATED - Resource was created in this change. */
  CREATED = 1,
  /** UPDATED - Resource was updated in this change. */
  UPDATED = 2,
  /** DELETED - Resource was deleted in this change. */
  DELETED = 3,
  UNRECOGNIZED = -1,
}

export function actionTypeFromJSON(object: any): ActionType {
  switch (object) {
    case 0:
    case "ACTION_TYPE_UNSPECIFIED":
      return ActionType.ACTION_TYPE_UNSPECIFIED;
    case 1:
    case "CREATED":
      return ActionType.CREATED;
    case 2:
    case "UPDATED":
      return ActionType.UPDATED;
    case 3:
    case "DELETED":
      return ActionType.DELETED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActionType.UNRECOGNIZED;
  }
}

export function actionTypeToJSON(object: ActionType): string {
  switch (object) {
    case ActionType.ACTION_TYPE_UNSPECIFIED:
      return "ACTION_TYPE_UNSPECIFIED";
    case ActionType.CREATED:
      return "CREATED";
    case ActionType.UPDATED:
      return "UPDATED";
    case ActionType.DELETED:
      return "DELETED";
    case ActionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Types of resources whose changes may be returned from change history. */
export enum ChangeHistoryResourceType {
  /** CHANGE_HISTORY_RESOURCE_TYPE_UNSPECIFIED - Resource type unknown or not specified. */
  CHANGE_HISTORY_RESOURCE_TYPE_UNSPECIFIED = 0,
  /** ACCOUNT - Account resource */
  ACCOUNT = 1,
  /** PROPERTY - Property resource */
  PROPERTY = 2,
  /** FIREBASE_LINK - FirebaseLink resource */
  FIREBASE_LINK = 6,
  /** GOOGLE_ADS_LINK - GoogleAdsLink resource */
  GOOGLE_ADS_LINK = 7,
  /** GOOGLE_SIGNALS_SETTINGS - GoogleSignalsSettings resource */
  GOOGLE_SIGNALS_SETTINGS = 8,
  /** CONVERSION_EVENT - ConversionEvent resource */
  CONVERSION_EVENT = 9,
  /** MEASUREMENT_PROTOCOL_SECRET - MeasurementProtocolSecret resource */
  MEASUREMENT_PROTOCOL_SECRET = 10,
  /** CUSTOM_DIMENSION - CustomDimension resource */
  CUSTOM_DIMENSION = 11,
  /** CUSTOM_METRIC - CustomMetric resource */
  CUSTOM_METRIC = 12,
  /** DATA_RETENTION_SETTINGS - DataRetentionSettings resource */
  DATA_RETENTION_SETTINGS = 13,
  /** DISPLAY_VIDEO_360_ADVERTISER_LINK - DisplayVideo360AdvertiserLink resource */
  DISPLAY_VIDEO_360_ADVERTISER_LINK = 14,
  /** DISPLAY_VIDEO_360_ADVERTISER_LINK_PROPOSAL - DisplayVideo360AdvertiserLinkProposal resource */
  DISPLAY_VIDEO_360_ADVERTISER_LINK_PROPOSAL = 15,
  /** SEARCH_ADS_360_LINK - SearchAds360Link resource */
  SEARCH_ADS_360_LINK = 16,
  /** DATA_STREAM - DataStream resource */
  DATA_STREAM = 18,
  /** ATTRIBUTION_SETTINGS - AttributionSettings resource */
  ATTRIBUTION_SETTINGS = 20,
  /** EXPANDED_DATA_SET - ExpandedDataSet resource */
  EXPANDED_DATA_SET = 21,
  /** CHANNEL_GROUP - ChannelGroup resource */
  CHANNEL_GROUP = 22,
  /** BIGQUERY_LINK - BigQuery link resource */
  BIGQUERY_LINK = 23,
  /** ENHANCED_MEASUREMENT_SETTINGS - EnhancedMeasurementSettings resource */
  ENHANCED_MEASUREMENT_SETTINGS = 24,
  /** DATA_REDACTION_SETTINGS - DataRedactionSettings resource */
  DATA_REDACTION_SETTINGS = 25,
  /** SKADNETWORK_CONVERSION_VALUE_SCHEMA - SKAdNetworkConversionValueSchema resource */
  SKADNETWORK_CONVERSION_VALUE_SCHEMA = 26,
  /** ADSENSE_LINK - AdSenseLink resource */
  ADSENSE_LINK = 27,
  /** AUDIENCE - Audience resource */
  AUDIENCE = 28,
  /** EVENT_CREATE_RULE - EventCreateRule resource */
  EVENT_CREATE_RULE = 29,
  /** CALCULATED_METRIC - CalculatedMetric resource */
  CALCULATED_METRIC = 31,
  UNRECOGNIZED = -1,
}

export function changeHistoryResourceTypeFromJSON(object: any): ChangeHistoryResourceType {
  switch (object) {
    case 0:
    case "CHANGE_HISTORY_RESOURCE_TYPE_UNSPECIFIED":
      return ChangeHistoryResourceType.CHANGE_HISTORY_RESOURCE_TYPE_UNSPECIFIED;
    case 1:
    case "ACCOUNT":
      return ChangeHistoryResourceType.ACCOUNT;
    case 2:
    case "PROPERTY":
      return ChangeHistoryResourceType.PROPERTY;
    case 6:
    case "FIREBASE_LINK":
      return ChangeHistoryResourceType.FIREBASE_LINK;
    case 7:
    case "GOOGLE_ADS_LINK":
      return ChangeHistoryResourceType.GOOGLE_ADS_LINK;
    case 8:
    case "GOOGLE_SIGNALS_SETTINGS":
      return ChangeHistoryResourceType.GOOGLE_SIGNALS_SETTINGS;
    case 9:
    case "CONVERSION_EVENT":
      return ChangeHistoryResourceType.CONVERSION_EVENT;
    case 10:
    case "MEASUREMENT_PROTOCOL_SECRET":
      return ChangeHistoryResourceType.MEASUREMENT_PROTOCOL_SECRET;
    case 11:
    case "CUSTOM_DIMENSION":
      return ChangeHistoryResourceType.CUSTOM_DIMENSION;
    case 12:
    case "CUSTOM_METRIC":
      return ChangeHistoryResourceType.CUSTOM_METRIC;
    case 13:
    case "DATA_RETENTION_SETTINGS":
      return ChangeHistoryResourceType.DATA_RETENTION_SETTINGS;
    case 14:
    case "DISPLAY_VIDEO_360_ADVERTISER_LINK":
      return ChangeHistoryResourceType.DISPLAY_VIDEO_360_ADVERTISER_LINK;
    case 15:
    case "DISPLAY_VIDEO_360_ADVERTISER_LINK_PROPOSAL":
      return ChangeHistoryResourceType.DISPLAY_VIDEO_360_ADVERTISER_LINK_PROPOSAL;
    case 16:
    case "SEARCH_ADS_360_LINK":
      return ChangeHistoryResourceType.SEARCH_ADS_360_LINK;
    case 18:
    case "DATA_STREAM":
      return ChangeHistoryResourceType.DATA_STREAM;
    case 20:
    case "ATTRIBUTION_SETTINGS":
      return ChangeHistoryResourceType.ATTRIBUTION_SETTINGS;
    case 21:
    case "EXPANDED_DATA_SET":
      return ChangeHistoryResourceType.EXPANDED_DATA_SET;
    case 22:
    case "CHANNEL_GROUP":
      return ChangeHistoryResourceType.CHANNEL_GROUP;
    case 23:
    case "BIGQUERY_LINK":
      return ChangeHistoryResourceType.BIGQUERY_LINK;
    case 24:
    case "ENHANCED_MEASUREMENT_SETTINGS":
      return ChangeHistoryResourceType.ENHANCED_MEASUREMENT_SETTINGS;
    case 25:
    case "DATA_REDACTION_SETTINGS":
      return ChangeHistoryResourceType.DATA_REDACTION_SETTINGS;
    case 26:
    case "SKADNETWORK_CONVERSION_VALUE_SCHEMA":
      return ChangeHistoryResourceType.SKADNETWORK_CONVERSION_VALUE_SCHEMA;
    case 27:
    case "ADSENSE_LINK":
      return ChangeHistoryResourceType.ADSENSE_LINK;
    case 28:
    case "AUDIENCE":
      return ChangeHistoryResourceType.AUDIENCE;
    case 29:
    case "EVENT_CREATE_RULE":
      return ChangeHistoryResourceType.EVENT_CREATE_RULE;
    case 31:
    case "CALCULATED_METRIC":
      return ChangeHistoryResourceType.CALCULATED_METRIC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ChangeHistoryResourceType.UNRECOGNIZED;
  }
}

export function changeHistoryResourceTypeToJSON(object: ChangeHistoryResourceType): string {
  switch (object) {
    case ChangeHistoryResourceType.CHANGE_HISTORY_RESOURCE_TYPE_UNSPECIFIED:
      return "CHANGE_HISTORY_RESOURCE_TYPE_UNSPECIFIED";
    case ChangeHistoryResourceType.ACCOUNT:
      return "ACCOUNT";
    case ChangeHistoryResourceType.PROPERTY:
      return "PROPERTY";
    case ChangeHistoryResourceType.FIREBASE_LINK:
      return "FIREBASE_LINK";
    case ChangeHistoryResourceType.GOOGLE_ADS_LINK:
      return "GOOGLE_ADS_LINK";
    case ChangeHistoryResourceType.GOOGLE_SIGNALS_SETTINGS:
      return "GOOGLE_SIGNALS_SETTINGS";
    case ChangeHistoryResourceType.CONVERSION_EVENT:
      return "CONVERSION_EVENT";
    case ChangeHistoryResourceType.MEASUREMENT_PROTOCOL_SECRET:
      return "MEASUREMENT_PROTOCOL_SECRET";
    case ChangeHistoryResourceType.CUSTOM_DIMENSION:
      return "CUSTOM_DIMENSION";
    case ChangeHistoryResourceType.CUSTOM_METRIC:
      return "CUSTOM_METRIC";
    case ChangeHistoryResourceType.DATA_RETENTION_SETTINGS:
      return "DATA_RETENTION_SETTINGS";
    case ChangeHistoryResourceType.DISPLAY_VIDEO_360_ADVERTISER_LINK:
      return "DISPLAY_VIDEO_360_ADVERTISER_LINK";
    case ChangeHistoryResourceType.DISPLAY_VIDEO_360_ADVERTISER_LINK_PROPOSAL:
      return "DISPLAY_VIDEO_360_ADVERTISER_LINK_PROPOSAL";
    case ChangeHistoryResourceType.SEARCH_ADS_360_LINK:
      return "SEARCH_ADS_360_LINK";
    case ChangeHistoryResourceType.DATA_STREAM:
      return "DATA_STREAM";
    case ChangeHistoryResourceType.ATTRIBUTION_SETTINGS:
      return "ATTRIBUTION_SETTINGS";
    case ChangeHistoryResourceType.EXPANDED_DATA_SET:
      return "EXPANDED_DATA_SET";
    case ChangeHistoryResourceType.CHANNEL_GROUP:
      return "CHANNEL_GROUP";
    case ChangeHistoryResourceType.BIGQUERY_LINK:
      return "BIGQUERY_LINK";
    case ChangeHistoryResourceType.ENHANCED_MEASUREMENT_SETTINGS:
      return "ENHANCED_MEASUREMENT_SETTINGS";
    case ChangeHistoryResourceType.DATA_REDACTION_SETTINGS:
      return "DATA_REDACTION_SETTINGS";
    case ChangeHistoryResourceType.SKADNETWORK_CONVERSION_VALUE_SCHEMA:
      return "SKADNETWORK_CONVERSION_VALUE_SCHEMA";
    case ChangeHistoryResourceType.ADSENSE_LINK:
      return "ADSENSE_LINK";
    case ChangeHistoryResourceType.AUDIENCE:
      return "AUDIENCE";
    case ChangeHistoryResourceType.EVENT_CREATE_RULE:
      return "EVENT_CREATE_RULE";
    case ChangeHistoryResourceType.CALCULATED_METRIC:
      return "CALCULATED_METRIC";
    case ChangeHistoryResourceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Status of the Google Signals settings. */
export enum GoogleSignalsState {
  /**
   * GOOGLE_SIGNALS_STATE_UNSPECIFIED - Google Signals status defaults to GOOGLE_SIGNALS_STATE_UNSPECIFIED to
   * represent that the user has not made an explicit choice.
   */
  GOOGLE_SIGNALS_STATE_UNSPECIFIED = 0,
  /** GOOGLE_SIGNALS_ENABLED - Google Signals is enabled. */
  GOOGLE_SIGNALS_ENABLED = 1,
  /** GOOGLE_SIGNALS_DISABLED - Google Signals is disabled. */
  GOOGLE_SIGNALS_DISABLED = 2,
  UNRECOGNIZED = -1,
}

export function googleSignalsStateFromJSON(object: any): GoogleSignalsState {
  switch (object) {
    case 0:
    case "GOOGLE_SIGNALS_STATE_UNSPECIFIED":
      return GoogleSignalsState.GOOGLE_SIGNALS_STATE_UNSPECIFIED;
    case 1:
    case "GOOGLE_SIGNALS_ENABLED":
      return GoogleSignalsState.GOOGLE_SIGNALS_ENABLED;
    case 2:
    case "GOOGLE_SIGNALS_DISABLED":
      return GoogleSignalsState.GOOGLE_SIGNALS_DISABLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GoogleSignalsState.UNRECOGNIZED;
  }
}

export function googleSignalsStateToJSON(object: GoogleSignalsState): string {
  switch (object) {
    case GoogleSignalsState.GOOGLE_SIGNALS_STATE_UNSPECIFIED:
      return "GOOGLE_SIGNALS_STATE_UNSPECIFIED";
    case GoogleSignalsState.GOOGLE_SIGNALS_ENABLED:
      return "GOOGLE_SIGNALS_ENABLED";
    case GoogleSignalsState.GOOGLE_SIGNALS_DISABLED:
      return "GOOGLE_SIGNALS_DISABLED";
    case GoogleSignalsState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Consent field of the Google Signals settings. */
export enum GoogleSignalsConsent {
  /**
   * GOOGLE_SIGNALS_CONSENT_UNSPECIFIED - Google Signals consent value defaults to
   * GOOGLE_SIGNALS_CONSENT_UNSPECIFIED.  This will be treated as
   * GOOGLE_SIGNALS_CONSENT_NOT_CONSENTED.
   */
  GOOGLE_SIGNALS_CONSENT_UNSPECIFIED = 0,
  /** GOOGLE_SIGNALS_CONSENT_CONSENTED - Terms of service have been accepted */
  GOOGLE_SIGNALS_CONSENT_CONSENTED = 2,
  /** GOOGLE_SIGNALS_CONSENT_NOT_CONSENTED - Terms of service have not been accepted */
  GOOGLE_SIGNALS_CONSENT_NOT_CONSENTED = 1,
  UNRECOGNIZED = -1,
}

export function googleSignalsConsentFromJSON(object: any): GoogleSignalsConsent {
  switch (object) {
    case 0:
    case "GOOGLE_SIGNALS_CONSENT_UNSPECIFIED":
      return GoogleSignalsConsent.GOOGLE_SIGNALS_CONSENT_UNSPECIFIED;
    case 2:
    case "GOOGLE_SIGNALS_CONSENT_CONSENTED":
      return GoogleSignalsConsent.GOOGLE_SIGNALS_CONSENT_CONSENTED;
    case 1:
    case "GOOGLE_SIGNALS_CONSENT_NOT_CONSENTED":
      return GoogleSignalsConsent.GOOGLE_SIGNALS_CONSENT_NOT_CONSENTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GoogleSignalsConsent.UNRECOGNIZED;
  }
}

export function googleSignalsConsentToJSON(object: GoogleSignalsConsent): string {
  switch (object) {
    case GoogleSignalsConsent.GOOGLE_SIGNALS_CONSENT_UNSPECIFIED:
      return "GOOGLE_SIGNALS_CONSENT_UNSPECIFIED";
    case GoogleSignalsConsent.GOOGLE_SIGNALS_CONSENT_CONSENTED:
      return "GOOGLE_SIGNALS_CONSENT_CONSENTED";
    case GoogleSignalsConsent.GOOGLE_SIGNALS_CONSENT_NOT_CONSENTED:
      return "GOOGLE_SIGNALS_CONSENT_NOT_CONSENTED";
    case GoogleSignalsConsent.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** An indication of which product the user initiated a link proposal from. */
export enum LinkProposalInitiatingProduct {
  /** LINK_PROPOSAL_INITIATING_PRODUCT_UNSPECIFIED - Unspecified product. */
  LINK_PROPOSAL_INITIATING_PRODUCT_UNSPECIFIED = 0,
  /** GOOGLE_ANALYTICS - This proposal was created by a user from Google Analytics. */
  GOOGLE_ANALYTICS = 1,
  /**
   * LINKED_PRODUCT - This proposal was created by a user from a linked product (not Google
   * Analytics).
   */
  LINKED_PRODUCT = 2,
  UNRECOGNIZED = -1,
}

export function linkProposalInitiatingProductFromJSON(object: any): LinkProposalInitiatingProduct {
  switch (object) {
    case 0:
    case "LINK_PROPOSAL_INITIATING_PRODUCT_UNSPECIFIED":
      return LinkProposalInitiatingProduct.LINK_PROPOSAL_INITIATING_PRODUCT_UNSPECIFIED;
    case 1:
    case "GOOGLE_ANALYTICS":
      return LinkProposalInitiatingProduct.GOOGLE_ANALYTICS;
    case 2:
    case "LINKED_PRODUCT":
      return LinkProposalInitiatingProduct.LINKED_PRODUCT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinkProposalInitiatingProduct.UNRECOGNIZED;
  }
}

export function linkProposalInitiatingProductToJSON(object: LinkProposalInitiatingProduct): string {
  switch (object) {
    case LinkProposalInitiatingProduct.LINK_PROPOSAL_INITIATING_PRODUCT_UNSPECIFIED:
      return "LINK_PROPOSAL_INITIATING_PRODUCT_UNSPECIFIED";
    case LinkProposalInitiatingProduct.GOOGLE_ANALYTICS:
      return "GOOGLE_ANALYTICS";
    case LinkProposalInitiatingProduct.LINKED_PRODUCT:
      return "LINKED_PRODUCT";
    case LinkProposalInitiatingProduct.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The state of a link proposal resource. */
export enum LinkProposalState {
  /** LINK_PROPOSAL_STATE_UNSPECIFIED - Unspecified state */
  LINK_PROPOSAL_STATE_UNSPECIFIED = 0,
  /**
   * AWAITING_REVIEW_FROM_GOOGLE_ANALYTICS - This proposal is awaiting review from a Google Analytics user. This
   * proposal will automatically expire after some time.
   */
  AWAITING_REVIEW_FROM_GOOGLE_ANALYTICS = 1,
  /**
   * AWAITING_REVIEW_FROM_LINKED_PRODUCT - This proposal is awaiting review from a user of a linked product. This
   * proposal will automatically expire after some time.
   */
  AWAITING_REVIEW_FROM_LINKED_PRODUCT = 2,
  /**
   * WITHDRAWN - This proposal has been withdrawn by an admin on the initiating product.
   * This proposal will be automatically deleted after some time.
   */
  WITHDRAWN = 3,
  /**
   * DECLINED - This proposal has been declined by an admin on the receiving product. This
   * proposal will be automatically deleted after some time.
   */
  DECLINED = 4,
  /**
   * EXPIRED - This proposal expired due to lack of response from an admin on the
   * receiving product. This proposal will be automatically deleted after some
   * time.
   */
  EXPIRED = 5,
  /**
   * OBSOLETE - This proposal has become obsolete because a link was directly created to
   * the same external product resource that this proposal specifies. This
   * proposal will be automatically deleted after some time.
   */
  OBSOLETE = 6,
  UNRECOGNIZED = -1,
}

export function linkProposalStateFromJSON(object: any): LinkProposalState {
  switch (object) {
    case 0:
    case "LINK_PROPOSAL_STATE_UNSPECIFIED":
      return LinkProposalState.LINK_PROPOSAL_STATE_UNSPECIFIED;
    case 1:
    case "AWAITING_REVIEW_FROM_GOOGLE_ANALYTICS":
      return LinkProposalState.AWAITING_REVIEW_FROM_GOOGLE_ANALYTICS;
    case 2:
    case "AWAITING_REVIEW_FROM_LINKED_PRODUCT":
      return LinkProposalState.AWAITING_REVIEW_FROM_LINKED_PRODUCT;
    case 3:
    case "WITHDRAWN":
      return LinkProposalState.WITHDRAWN;
    case 4:
    case "DECLINED":
      return LinkProposalState.DECLINED;
    case 5:
    case "EXPIRED":
      return LinkProposalState.EXPIRED;
    case 6:
    case "OBSOLETE":
      return LinkProposalState.OBSOLETE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinkProposalState.UNRECOGNIZED;
  }
}

export function linkProposalStateToJSON(object: LinkProposalState): string {
  switch (object) {
    case LinkProposalState.LINK_PROPOSAL_STATE_UNSPECIFIED:
      return "LINK_PROPOSAL_STATE_UNSPECIFIED";
    case LinkProposalState.AWAITING_REVIEW_FROM_GOOGLE_ANALYTICS:
      return "AWAITING_REVIEW_FROM_GOOGLE_ANALYTICS";
    case LinkProposalState.AWAITING_REVIEW_FROM_LINKED_PRODUCT:
      return "AWAITING_REVIEW_FROM_LINKED_PRODUCT";
    case LinkProposalState.WITHDRAWN:
      return "WITHDRAWN";
    case LinkProposalState.DECLINED:
      return "DECLINED";
    case LinkProposalState.EXPIRED:
      return "EXPIRED";
    case LinkProposalState.OBSOLETE:
      return "OBSOLETE";
    case LinkProposalState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Types of Property resources. */
export enum PropertyType {
  /** PROPERTY_TYPE_UNSPECIFIED - Unknown or unspecified property type */
  PROPERTY_TYPE_UNSPECIFIED = 0,
  /** PROPERTY_TYPE_ORDINARY - Ordinary GA4 property */
  PROPERTY_TYPE_ORDINARY = 1,
  /** PROPERTY_TYPE_SUBPROPERTY - GA4 subproperty */
  PROPERTY_TYPE_SUBPROPERTY = 2,
  /** PROPERTY_TYPE_ROLLUP - GA4 rollup property */
  PROPERTY_TYPE_ROLLUP = 3,
  UNRECOGNIZED = -1,
}

export function propertyTypeFromJSON(object: any): PropertyType {
  switch (object) {
    case 0:
    case "PROPERTY_TYPE_UNSPECIFIED":
      return PropertyType.PROPERTY_TYPE_UNSPECIFIED;
    case 1:
    case "PROPERTY_TYPE_ORDINARY":
      return PropertyType.PROPERTY_TYPE_ORDINARY;
    case 2:
    case "PROPERTY_TYPE_SUBPROPERTY":
      return PropertyType.PROPERTY_TYPE_SUBPROPERTY;
    case 3:
    case "PROPERTY_TYPE_ROLLUP":
      return PropertyType.PROPERTY_TYPE_ROLLUP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PropertyType.UNRECOGNIZED;
  }
}

export function propertyTypeToJSON(object: PropertyType): string {
  switch (object) {
    case PropertyType.PROPERTY_TYPE_UNSPECIFIED:
      return "PROPERTY_TYPE_UNSPECIFIED";
    case PropertyType.PROPERTY_TYPE_ORDINARY:
      return "PROPERTY_TYPE_ORDINARY";
    case PropertyType.PROPERTY_TYPE_SUBPROPERTY:
      return "PROPERTY_TYPE_SUBPROPERTY";
    case PropertyType.PROPERTY_TYPE_ROLLUP:
      return "PROPERTY_TYPE_ROLLUP";
    case PropertyType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The coarse conversion value set on the updatePostbackConversionValue SDK call
 * when a ConversionValues.event_mappings conditions are satisfied. For
 * more information, see
 * [SKAdNetwork.CoarseConversionValue](https://developer.apple.com/documentation/storekit/skadnetwork/coarseconversionvalue).
 */
export enum CoarseValue {
  /** COARSE_VALUE_UNSPECIFIED - Coarse value not specified. */
  COARSE_VALUE_UNSPECIFIED = 0,
  /** COARSE_VALUE_LOW - Coarse value of low. */
  COARSE_VALUE_LOW = 1,
  /** COARSE_VALUE_MEDIUM - Coarse value of medium. */
  COARSE_VALUE_MEDIUM = 2,
  /** COARSE_VALUE_HIGH - Coarse value of high. */
  COARSE_VALUE_HIGH = 3,
  UNRECOGNIZED = -1,
}

export function coarseValueFromJSON(object: any): CoarseValue {
  switch (object) {
    case 0:
    case "COARSE_VALUE_UNSPECIFIED":
      return CoarseValue.COARSE_VALUE_UNSPECIFIED;
    case 1:
    case "COARSE_VALUE_LOW":
      return CoarseValue.COARSE_VALUE_LOW;
    case 2:
    case "COARSE_VALUE_MEDIUM":
      return CoarseValue.COARSE_VALUE_MEDIUM;
    case 3:
    case "COARSE_VALUE_HIGH":
      return CoarseValue.COARSE_VALUE_HIGH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CoarseValue.UNRECOGNIZED;
  }
}

export function coarseValueToJSON(object: CoarseValue): string {
  switch (object) {
    case CoarseValue.COARSE_VALUE_UNSPECIFIED:
      return "COARSE_VALUE_UNSPECIFIED";
    case CoarseValue.COARSE_VALUE_LOW:
      return "COARSE_VALUE_LOW";
    case CoarseValue.COARSE_VALUE_MEDIUM:
      return "COARSE_VALUE_MEDIUM";
    case CoarseValue.COARSE_VALUE_HIGH:
      return "COARSE_VALUE_HIGH";
    case CoarseValue.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A resource message representing a Google Analytics account. */
export interface Account {
  /**
   * Output only. Resource name of this account.
   * Format: accounts/{account}
   * Example: "accounts/100"
   */
  name: string;
  /** Output only. Time when this account was originally created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Time when account payload fields were last updated. */
  updateTime:
    | Date
    | undefined;
  /** Required. Human-readable display name for this account. */
  displayName: string;
  /** Country of business. Must be a Unicode CLDR region code. */
  regionCode: string;
  /**
   * Output only. Indicates whether this Account is soft-deleted or not. Deleted
   * accounts are excluded from List results unless specifically requested.
   */
  deleted: boolean;
  /**
   * Output only. The URI for a Google Marketing Platform organization resource.
   * Only set when this account is connected to a GMP organization.
   * Format: marketingplatformadmin.googleapis.com/organizations/{org_id}
   */
  gmpOrganization: string;
}

/** A resource message representing a Google Analytics GA4 property. */
export interface Property {
  /**
   * Output only. Resource name of this property.
   * Format: properties/{property_id}
   * Example: "properties/1000"
   */
  name: string;
  /**
   * Immutable. The property type for this Property resource. When creating a
   * property, if the type is "PROPERTY_TYPE_UNSPECIFIED", then
   * "ORDINARY_PROPERTY" will be implied.
   */
  propertyType: PropertyType;
  /** Output only. Time when the entity was originally created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Time when entity payload fields were last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Immutable. Resource name of this property's logical parent.
   *
   * Note: The Property-Moving UI can be used to change the parent.
   * Format: accounts/{account}, properties/{property}
   * Example: "accounts/100", "properties/101"
   */
  parent: string;
  /**
   * Required. Human-readable display name for this property.
   *
   * The max allowed display name length is 100 UTF-16 code units.
   */
  displayName: string;
  /**
   * Industry associated with this property
   * Example: AUTOMOTIVE, FOOD_AND_DRINK
   */
  industryCategory: IndustryCategory;
  /**
   * Required. Reporting Time Zone, used as the day boundary for reports,
   * regardless of where the data originates. If the time zone honors DST,
   * Analytics will automatically adjust for the changes.
   *
   * NOTE: Changing the time zone only affects data going forward, and is not
   * applied retroactively.
   *
   * Format: https://www.iana.org/time-zones
   * Example: "America/Los_Angeles"
   */
  timeZone: string;
  /**
   * The currency type used in reports involving monetary values.
   *
   * Format: https://en.wikipedia.org/wiki/ISO_4217
   * Examples: "USD", "EUR", "JPY"
   */
  currencyCode: string;
  /**
   * Output only. The Google Analytics service level that applies to this
   * property.
   */
  serviceLevel: ServiceLevel;
  /**
   * Output only. If set, the time at which this property was trashed. If not
   * set, then this property is not currently in the trash can.
   */
  deleteTime:
    | Date
    | undefined;
  /**
   * Output only. If set, the time at which this trashed property will be
   * permanently deleted. If not set, then this property is not currently in the
   * trash can and is not slated to be deleted.
   */
  expireTime:
    | Date
    | undefined;
  /**
   * Immutable. The resource name of the parent account
   * Format: accounts/{account_id}
   * Example: "accounts/123"
   */
  account: string;
}

/** A resource message representing a data stream. */
export interface DataStream {
  /**
   * Data specific to web streams. Must be populated if type is
   * WEB_DATA_STREAM.
   */
  webStreamData?:
    | DataStream_WebStreamData
    | undefined;
  /**
   * Data specific to Android app streams. Must be populated if type is
   * ANDROID_APP_DATA_STREAM.
   */
  androidAppStreamData?:
    | DataStream_AndroidAppStreamData
    | undefined;
  /**
   * Data specific to iOS app streams. Must be populated if type is
   * IOS_APP_DATA_STREAM.
   */
  iosAppStreamData?:
    | DataStream_IosAppStreamData
    | undefined;
  /**
   * Output only. Resource name of this Data Stream.
   * Format: properties/{property_id}/dataStreams/{stream_id}
   * Example: "properties/1000/dataStreams/2000"
   */
  name: string;
  /** Required. Immutable. The type of this DataStream resource. */
  type: DataStream_DataStreamType;
  /**
   * Human-readable display name for the Data Stream.
   *
   * Required for web data streams.
   *
   * The max allowed display name length is 255 UTF-16 code units.
   */
  displayName: string;
  /** Output only. Time when this stream was originally created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Time when stream payload fields were last updated. */
  updateTime: Date | undefined;
}

/** The type of the data stream. */
export enum DataStream_DataStreamType {
  /** DATA_STREAM_TYPE_UNSPECIFIED - Type unknown or not specified. */
  DATA_STREAM_TYPE_UNSPECIFIED = 0,
  /** WEB_DATA_STREAM - Web data stream. */
  WEB_DATA_STREAM = 1,
  /** ANDROID_APP_DATA_STREAM - Android app data stream. */
  ANDROID_APP_DATA_STREAM = 2,
  /** IOS_APP_DATA_STREAM - iOS app data stream. */
  IOS_APP_DATA_STREAM = 3,
  UNRECOGNIZED = -1,
}

export function dataStream_DataStreamTypeFromJSON(object: any): DataStream_DataStreamType {
  switch (object) {
    case 0:
    case "DATA_STREAM_TYPE_UNSPECIFIED":
      return DataStream_DataStreamType.DATA_STREAM_TYPE_UNSPECIFIED;
    case 1:
    case "WEB_DATA_STREAM":
      return DataStream_DataStreamType.WEB_DATA_STREAM;
    case 2:
    case "ANDROID_APP_DATA_STREAM":
      return DataStream_DataStreamType.ANDROID_APP_DATA_STREAM;
    case 3:
    case "IOS_APP_DATA_STREAM":
      return DataStream_DataStreamType.IOS_APP_DATA_STREAM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataStream_DataStreamType.UNRECOGNIZED;
  }
}

export function dataStream_DataStreamTypeToJSON(object: DataStream_DataStreamType): string {
  switch (object) {
    case DataStream_DataStreamType.DATA_STREAM_TYPE_UNSPECIFIED:
      return "DATA_STREAM_TYPE_UNSPECIFIED";
    case DataStream_DataStreamType.WEB_DATA_STREAM:
      return "WEB_DATA_STREAM";
    case DataStream_DataStreamType.ANDROID_APP_DATA_STREAM:
      return "ANDROID_APP_DATA_STREAM";
    case DataStream_DataStreamType.IOS_APP_DATA_STREAM:
      return "IOS_APP_DATA_STREAM";
    case DataStream_DataStreamType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Data specific to web streams. */
export interface DataStream_WebStreamData {
  /**
   * Output only. Analytics Measurement ID.
   *
   * Example: "G-1A2BCD345E"
   */
  measurementId: string;
  /**
   * Output only. ID of the corresponding web app in Firebase, if any.
   * This ID can change if the web app is deleted and recreated.
   */
  firebaseAppId: string;
  /**
   * Domain name of the web app being measured, or empty.
   * Example: "http://www.google.com", "https://www.google.com"
   */
  defaultUri: string;
}

/** Data specific to Android app streams. */
export interface DataStream_AndroidAppStreamData {
  /**
   * Output only. ID of the corresponding Android app in Firebase, if any.
   * This ID can change if the Android app is deleted and recreated.
   */
  firebaseAppId: string;
  /**
   * Immutable. The package name for the app being measured.
   * Example: "com.example.myandroidapp"
   */
  packageName: string;
}

/** Data specific to iOS app streams. */
export interface DataStream_IosAppStreamData {
  /**
   * Output only. ID of the corresponding iOS app in Firebase, if any.
   * This ID can change if the iOS app is deleted and recreated.
   */
  firebaseAppId: string;
  /**
   * Required. Immutable. The Apple App Store Bundle ID for the app
   * Example: "com.example.myiosapp"
   */
  bundleId: string;
}

/** A link between a GA4 property and a Firebase project. */
export interface FirebaseLink {
  /** Output only. Example format: properties/1234/firebaseLinks/5678 */
  name: string;
  /**
   * Immutable. Firebase project resource name. When creating a FirebaseLink,
   * you may provide this resource name using either a project number or project
   * ID. Once this resource has been created, returned FirebaseLinks will always
   * have a project_name that contains a project number.
   *
   * Format: 'projects/{project number}'
   * Example: 'projects/1234'
   */
  project: string;
  /** Output only. Time when this FirebaseLink was originally created. */
  createTime: Date | undefined;
}

/**
 * Read-only resource with the tag for sending data from a website to a
 * DataStream. Only present for web DataStream resources.
 */
export interface GlobalSiteTag {
  /**
   * Output only. Resource name for this GlobalSiteTag resource.
   * Format: properties/{property_id}/dataStreams/{stream_id}/globalSiteTag
   * Example: "properties/123/dataStreams/456/globalSiteTag"
   */
  name: string;
  /**
   * Immutable. JavaScript code snippet to be pasted as the first item into the
   * head tag of every webpage to measure.
   */
  snippet: string;
}

/** A link between a GA4 property and a Google Ads account. */
export interface GoogleAdsLink {
  /**
   * Output only. Format:
   * properties/{propertyId}/googleAdsLinks/{googleAdsLinkId}
   *
   * Note: googleAdsLinkId is not the Google Ads customer ID.
   */
  name: string;
  /** Immutable. Google Ads customer ID. */
  customerId: string;
  /** Output only. If true, this link is for a Google Ads manager account. */
  canManageClients: boolean;
  /**
   * Enable personalized advertising features with this integration.
   * Automatically publish my Google Analytics audience lists and Google
   * Analytics remarketing events/parameters to the linked Google Ads account.
   * If this field is not set on create/update, it will be defaulted to true.
   */
  adsPersonalizationEnabled:
    | boolean
    | undefined;
  /** Output only. Time when this link was originally created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Time when this link was last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. Email address of the user that created the link.
   * An empty string will be returned if the email address can't be retrieved.
   */
  creatorEmailAddress: string;
}

/**
 * A resource message representing data sharing settings of a Google Analytics
 * account.
 */
export interface DataSharingSettings {
  /**
   * Output only. Resource name.
   * Format: accounts/{account}/dataSharingSettings
   * Example: "accounts/1000/dataSharingSettings"
   */
  name: string;
  /**
   * Allows Google support to access the data in order to help troubleshoot
   * issues.
   */
  sharingWithGoogleSupportEnabled: boolean;
  /**
   * Allows Google sales teams that are assigned to the customer to access the
   * data in order to suggest configuration changes to improve results.
   * Sales team restrictions still apply when enabled.
   */
  sharingWithGoogleAssignedSalesEnabled: boolean;
  /**
   * Allows any of Google sales to access the data in order to suggest
   * configuration changes to improve results.
   */
  sharingWithGoogleAnySalesEnabled: boolean;
  /** Allows Google to use the data to improve other Google products or services. */
  sharingWithGoogleProductsEnabled: boolean;
  /** Allows Google to share the data anonymously in aggregate form with others. */
  sharingWithOthersEnabled: boolean;
}

/**
 * A virtual resource representing an overview of an account and
 * all its child GA4 properties.
 */
export interface AccountSummary {
  /**
   * Resource name for this account summary.
   * Format: accountSummaries/{account_id}
   * Example: "accountSummaries/1000"
   */
  name: string;
  /**
   * Resource name of account referred to by this account summary
   * Format: accounts/{account_id}
   * Example: "accounts/1000"
   */
  account: string;
  /** Display name for the account referred to in this account summary. */
  displayName: string;
  /** List of summaries for child accounts of this account. */
  propertySummaries: PropertySummary[];
}

/** A virtual resource representing metadata for a GA4 property. */
export interface PropertySummary {
  /**
   * Resource name of property referred to by this property summary
   * Format: properties/{property_id}
   * Example: "properties/1000"
   */
  property: string;
  /** Display name for the property referred to in this property summary. */
  displayName: string;
  /** The property's property type. */
  propertyType: PropertyType;
  /**
   * Resource name of this property's logical parent.
   *
   * Note: The Property-Moving UI can be used to change the parent.
   * Format: accounts/{account}, properties/{property}
   * Example: "accounts/100", "properties/200"
   */
  parent: string;
}

/** A secret value used for sending hits to Measurement Protocol. */
export interface MeasurementProtocolSecret {
  /**
   * Output only. Resource name of this secret. This secret may be a child of
   * any type of stream. Format:
   * properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets/{measurementProtocolSecret}
   */
  name: string;
  /** Required. Human-readable display name for this secret. */
  displayName: string;
  /**
   * Output only. The measurement protocol secret value. Pass this value to the
   * api_secret field of the Measurement Protocol API when sending hits to this
   * secret's parent property.
   */
  secretValue: string;
}

/** SKAdNetwork conversion value schema of an iOS stream. */
export interface SKAdNetworkConversionValueSchema {
  /**
   * Output only. Resource name of the schema. This will be child of ONLY an iOS
   * stream, and there can be at most one such child under an iOS stream.
   * Format:
   * properties/{property}/dataStreams/{dataStream}/sKAdNetworkConversionValueSchema
   */
  name: string;
  /**
   * Required. The conversion value settings for the first postback window.
   * These differ from values for postback window two and three in that they
   * contain a "Fine" grained conversion value (a numeric value).
   *
   * Conversion values for this postback window must be set.  The other windows
   * are optional and may inherit this window's settings if unset or disabled.
   */
  postbackWindowOne:
    | PostbackWindow
    | undefined;
  /**
   * The conversion value settings for the second postback window.
   *
   * This field should only be configured if there is a need to define different
   * conversion values for this postback window.
   *
   * If enable_postback_window_settings is set to false for this postback
   * window, the values from postback_window_one will be used.
   */
  postbackWindowTwo:
    | PostbackWindow
    | undefined;
  /**
   * The conversion value settings for the third postback window.
   *
   * This field should only be set if the user chose to define different
   * conversion values for this postback window. It is allowed to configure
   * window 3 without setting window 2. In case window 1 & 2 settings are set
   * and enable_postback_window_settings for this postback window is set to
   * false, the schema will inherit settings from postback_window_two.
   */
  postbackWindowThree:
    | PostbackWindow
    | undefined;
  /**
   * If enabled, the GA SDK will set conversion values using this schema
   * definition, and schema will be exported to any Google Ads accounts linked
   * to this property. If disabled, the GA SDK will not automatically set
   * conversion values, and also the schema will not be exported to Ads.
   */
  applyConversionValues: boolean;
}

/** Settings for a SKAdNetwork conversion postback window. */
export interface PostbackWindow {
  /**
   * Ordering of the repeated field will be used to prioritize the conversion
   * value settings. Lower indexed entries are prioritized higher. The first
   * conversion value setting that evaluates to true will be selected. It must
   * have at least one entry if enable_postback_window_settings is set to
   * true. It can have maximum of 128 entries.
   */
  conversionValues: ConversionValues[];
  /**
   * If enable_postback_window_settings is true, conversion_values
   * must be populated and will be used for determining when and how to set the
   * Conversion Value on a client device and exporting schema to linked Ads
   * accounts. If false, the settings are not used, but are retained in case
   * they may be used in the future. This must always be true for
   * postback_window_one.
   */
  postbackWindowSettingsEnabled: boolean;
}

/**
 * Conversion value settings for a postback window for SKAdNetwork conversion
 * value schema.
 */
export interface ConversionValues {
  /**
   * Display name of the SKAdNetwork conversion value.
   * The max allowed display name length is 50 UTF-16 code units.
   */
  displayName: string;
  /**
   * The fine-grained conversion value.  This is applicable only to the first
   * postback window. Its valid values are [0,63], both inclusive. It must be
   * set for postback window 1, and must not be set for postback window 2 & 3.
   * This value is not guaranteed to be unique.
   *
   * If the configuration for the first postback window is re-used for second or
   * third postback windows this field has no effect.
   */
  fineValue?:
    | number
    | undefined;
  /**
   * Required. A coarse grained conversion value.
   *
   * This value is not guaranteed to be unique.
   */
  coarseValue: CoarseValue;
  /**
   * Event conditions that must be met for this Conversion Value to be achieved.
   * The conditions in this list are ANDed together. It must have minimum of 1
   * entry and maximum of 3 entries, if the postback window is enabled.
   */
  eventMappings: EventMapping[];
  /**
   * If true, the SDK should lock to this conversion value for the current
   * postback window.
   */
  lockEnabled: boolean;
}

/** Event setting conditions to match an event. */
export interface EventMapping {
  /**
   * Required. Name of the GA4 event. It must always be set.
   * The max allowed display name length is 40 UTF-16 code units.
   */
  eventName: string;
  /**
   * At least one of the following four min/max values must be set. The
   * values set will be ANDed together to qualify an event.
   * The minimum number of times the event occurred. If not set, minimum event
   * count won't be checked.
   */
  minEventCount?:
    | Long
    | undefined;
  /**
   * The maximum number of times the event occurred. If not set, maximum event
   * count won't be checked.
   */
  maxEventCount?:
    | Long
    | undefined;
  /**
   * The minimum revenue generated due to the event. Revenue currency will be
   * defined at the property level. If not set, minimum event value won't be
   * checked.
   */
  minEventValue?:
    | number
    | undefined;
  /**
   * The maximum revenue generated due to the event. Revenue currency will be
   * defined at the property level. If not set, maximum event value won't be
   * checked.
   */
  maxEventValue?: number | undefined;
}

/**
 * A set of changes within a Google Analytics account or its child properties
 * that resulted from the same cause. Common causes would be updates made in the
 * Google Analytics UI, changes from customer support, or automatic Google
 * Analytics system changes.
 */
export interface ChangeHistoryEvent {
  /** ID of this change history event. This ID is unique across Google Analytics. */
  id: string;
  /** Time when change was made. */
  changeTime:
    | Date
    | undefined;
  /** The type of actor that made this change. */
  actorType: ActorType;
  /**
   * Email address of the Google account that made the change. This will be a
   * valid email address if the actor field is set to USER, and empty otherwise.
   * Google accounts that have been deleted will cause an error.
   */
  userActorEmail: string;
  /**
   * If true, then the list of changes returned was filtered, and does not
   * represent all changes that occurred in this event.
   */
  changesFiltered: boolean;
  /**
   * A list of changes made in this change history event that fit the filters
   * specified in SearchChangeHistoryEventsRequest.
   */
  changes: ChangeHistoryChange[];
}

/** A description of a change to a single Google Analytics resource. */
export interface ChangeHistoryChange {
  /** Resource name of the resource whose changes are described by this entry. */
  resource: string;
  /** The type of action that changed this resource. */
  action: ActionType;
  /**
   * Resource contents from before the change was made. If this resource was
   * created in this change, this field will be missing.
   */
  resourceBeforeChange:
    | ChangeHistoryChange_ChangeHistoryResource
    | undefined;
  /**
   * Resource contents from after the change was made. If this resource was
   * deleted in this change, this field will be missing.
   */
  resourceAfterChange: ChangeHistoryChange_ChangeHistoryResource | undefined;
}

/**
 * A snapshot of a resource as before or after the result of a change in
 * change history.
 */
export interface ChangeHistoryChange_ChangeHistoryResource {
  /** A snapshot of an Account resource in change history. */
  account?:
    | Account
    | undefined;
  /** A snapshot of a Property resource in change history. */
  property?:
    | Property
    | undefined;
  /** A snapshot of a FirebaseLink resource in change history. */
  firebaseLink?:
    | FirebaseLink
    | undefined;
  /** A snapshot of a GoogleAdsLink resource in change history. */
  googleAdsLink?:
    | GoogleAdsLink
    | undefined;
  /** A snapshot of a GoogleSignalsSettings resource in change history. */
  googleSignalsSettings?:
    | GoogleSignalsSettings
    | undefined;
  /**
   * A snapshot of a DisplayVideo360AdvertiserLink resource in change
   * history.
   */
  displayVideo360AdvertiserLink?:
    | DisplayVideo360AdvertiserLink
    | undefined;
  /**
   * A snapshot of a DisplayVideo360AdvertiserLinkProposal resource in
   * change history.
   */
  displayVideo360AdvertiserLinkProposal?:
    | DisplayVideo360AdvertiserLinkProposal
    | undefined;
  /** A snapshot of a ConversionEvent resource in change history. */
  conversionEvent?:
    | ConversionEvent
    | undefined;
  /** A snapshot of a MeasurementProtocolSecret resource in change history. */
  measurementProtocolSecret?:
    | MeasurementProtocolSecret
    | undefined;
  /** A snapshot of a CustomDimension resource in change history. */
  customDimension?:
    | CustomDimension
    | undefined;
  /** A snapshot of a CustomMetric resource in change history. */
  customMetric?:
    | CustomMetric
    | undefined;
  /** A snapshot of a data retention settings resource in change history. */
  dataRetentionSettings?:
    | DataRetentionSettings
    | undefined;
  /** A snapshot of a SearchAds360Link resource in change history. */
  searchAds360Link?:
    | SearchAds360Link
    | undefined;
  /** A snapshot of a DataStream resource in change history. */
  dataStream?:
    | DataStream
    | undefined;
  /** A snapshot of AttributionSettings resource in change history. */
  attributionSettings?:
    | AttributionSettings
    | undefined;
  /** A snapshot of an ExpandedDataSet resource in change history. */
  expandedDataSet?:
    | ExpandedDataSet
    | undefined;
  /** A snapshot of a ChannelGroup resource in change history. */
  channelGroup?:
    | ChannelGroup
    | undefined;
  /** A snapshot of a BigQuery link resource in change history. */
  bigqueryLink?:
    | BigQueryLink
    | undefined;
  /** A snapshot of EnhancedMeasurementSettings resource in change history. */
  enhancedMeasurementSettings?:
    | EnhancedMeasurementSettings
    | undefined;
  /** A snapshot of DataRedactionSettings resource in change history. */
  dataRedactionSettings?:
    | DataRedactionSettings
    | undefined;
  /**
   * A snapshot of SKAdNetworkConversionValueSchema resource in change
   * history.
   */
  skadnetworkConversionValueSchema?:
    | SKAdNetworkConversionValueSchema
    | undefined;
  /** A snapshot of an AdSenseLink resource in change history. */
  adsenseLink?:
    | AdSenseLink
    | undefined;
  /** A snapshot of an Audience resource in change history. */
  audience?:
    | Audience
    | undefined;
  /** A snapshot of an EventCreateRule resource in change history. */
  eventCreateRule?:
    | EventCreateRule
    | undefined;
  /** A snapshot of a CalculatedMetric resource in change history. */
  calculatedMetric?: CalculatedMetric | undefined;
}

/** A link between a GA4 property and a Display & Video 360 advertiser. */
export interface DisplayVideo360AdvertiserLink {
  /**
   * Output only. The resource name for this DisplayVideo360AdvertiserLink
   * resource. Format:
   * properties/{propertyId}/displayVideo360AdvertiserLinks/{linkId}
   *
   * Note: linkId is not the Display & Video 360 Advertiser ID
   */
  name: string;
  /** Immutable. The Display & Video 360 Advertiser's advertiser ID. */
  advertiserId: string;
  /** Output only. The display name of the Display & Video 360 Advertiser. */
  advertiserDisplayName: string;
  /**
   * Enables personalized advertising features with this integration.
   * If this field is not set on create/update, it will be defaulted to true.
   */
  adsPersonalizationEnabled:
    | boolean
    | undefined;
  /**
   * Immutable. Enables the import of campaign data from Display & Video 360
   * into the GA4 property. After link creation, this can only be updated from
   * the Display & Video 360 product. If this field is not set on create, it
   * will be defaulted to true.
   */
  campaignDataSharingEnabled:
    | boolean
    | undefined;
  /**
   * Immutable. Enables the import of cost data from Display & Video 360 into
   * the GA4 property. This can only be enabled if campaign_data_sharing_enabled
   * is enabled. After link creation, this can only be updated from the Display
   * & Video 360 product. If this field is not set on create, it will be
   * defaulted to true.
   */
  costDataSharingEnabled: boolean | undefined;
}

/**
 * A proposal for a link between a GA4 property and a Display & Video 360
 * advertiser.
 *
 * A proposal is converted to a DisplayVideo360AdvertiserLink once approved.
 * Google Analytics admins approve inbound proposals while Display & Video 360
 * admins approve outbound proposals.
 */
export interface DisplayVideo360AdvertiserLinkProposal {
  /**
   * Output only. The resource name for this
   * DisplayVideo360AdvertiserLinkProposal resource. Format:
   * properties/{propertyId}/displayVideo360AdvertiserLinkProposals/{proposalId}
   *
   * Note: proposalId is not the Display & Video 360 Advertiser ID
   */
  name: string;
  /** Immutable. The Display & Video 360 Advertiser's advertiser ID. */
  advertiserId: string;
  /** Output only. The status information for this link proposal. */
  linkProposalStatusDetails:
    | LinkProposalStatusDetails
    | undefined;
  /**
   * Output only. The display name of the Display & Video Advertiser.
   * Only populated for proposals that originated from Display & Video 360.
   */
  advertiserDisplayName: string;
  /**
   * Input only. On a proposal being sent to Display & Video 360, this field
   * must be set to the email address of an admin on the target advertiser. This
   * is used to verify that the Google Analytics admin is aware of at least one
   * admin on the Display & Video 360 Advertiser. This does not restrict
   * approval of the proposal to a single user. Any admin on the Display & Video
   * 360 Advertiser may approve the proposal.
   */
  validationEmail: string;
  /**
   * Immutable. Enables personalized advertising features with this integration.
   * If this field is not set on create, it will be defaulted to true.
   */
  adsPersonalizationEnabled:
    | boolean
    | undefined;
  /**
   * Immutable. Enables the import of campaign data from Display & Video 360.
   * If this field is not set on create, it will be defaulted to true.
   */
  campaignDataSharingEnabled:
    | boolean
    | undefined;
  /**
   * Immutable. Enables the import of cost data from Display & Video 360.
   * This can only be enabled if campaign_data_sharing_enabled is enabled.
   * If this field is not set on create, it will be defaulted to true.
   */
  costDataSharingEnabled: boolean | undefined;
}

/** A link between a GA4 property and a Search Ads 360 entity. */
export interface SearchAds360Link {
  /**
   * Output only. The resource name for this SearchAds360Link resource.
   * Format: properties/{propertyId}/searchAds360Links/{linkId}
   *
   * Note: linkId is not the Search Ads 360 advertiser ID
   */
  name: string;
  /**
   * Immutable. This field represents the Advertiser ID of the Search Ads 360
   * Advertiser. that has been linked.
   */
  advertiserId: string;
  /**
   * Immutable. Enables the import of campaign data from Search Ads 360 into the
   * GA4 property. After link creation, this can only be updated from the Search
   * Ads 360 product.
   * If this field is not set on create, it will be defaulted to true.
   */
  campaignDataSharingEnabled:
    | boolean
    | undefined;
  /**
   * Immutable. Enables the import of cost data from Search Ads 360 to the GA4
   * property. This can only be enabled if campaign_data_sharing_enabled is
   * enabled. After link creation, this can only be updated from
   * the Search Ads 360 product.
   * If this field is not set on create, it will be defaulted to true.
   */
  costDataSharingEnabled:
    | boolean
    | undefined;
  /**
   * Output only. The display name of the Search Ads 360 Advertiser.
   * Allows users to easily identify the linked resource.
   */
  advertiserDisplayName: string;
  /**
   * Enables personalized advertising features with this integration.
   * If this field is not set on create, it will be defaulted to true.
   */
  adsPersonalizationEnabled:
    | boolean
    | undefined;
  /**
   * Enables export of site stats with this integration.
   * If this field is not set on create, it will be defaulted to true.
   */
  siteStatsSharingEnabled: boolean | undefined;
}

/** Status information for a link proposal. */
export interface LinkProposalStatusDetails {
  /** Output only. The source of this proposal. */
  linkProposalInitiatingProduct: LinkProposalInitiatingProduct;
  /** Output only. The email address of the user that proposed this linkage. */
  requestorEmail: string;
  /** Output only. The state of this proposal. */
  linkProposalState: LinkProposalState;
}

/** A conversion event in a Google Analytics property. */
export interface ConversionEvent {
  /**
   * Output only. Resource name of this conversion event.
   * Format: properties/{property}/conversionEvents/{conversion_event}
   */
  name: string;
  /**
   * Immutable. The event name for this conversion event.
   * Examples: 'click', 'purchase'
   */
  eventName: string;
  /** Output only. Time when this conversion event was created in the property. */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. If set, this event can currently be deleted with
   * DeleteConversionEvent.
   */
  deletable: boolean;
  /**
   * Output only. If set to true, this conversion event refers to a custom
   * event.  If set to false, this conversion event refers to a default event in
   * GA. Default events typically have special meaning in GA. Default events are
   * usually created for you by the GA system, but in some cases can be created
   * by property admins. Custom events count towards the maximum number of
   * custom conversion events that may be created per property.
   */
  custom: boolean;
  /**
   * Optional. The method by which conversions will be counted across multiple
   * events within a session. If this value is not provided, it will be set to
   * `ONCE_PER_EVENT`.
   */
  countingMethod: ConversionEvent_ConversionCountingMethod;
  /** Optional. Defines a default value/currency for a conversion event. */
  defaultConversionValue?: ConversionEvent_DefaultConversionValue | undefined;
}

/**
 * The method by which conversions will be counted across multiple events
 * within a session.
 */
export enum ConversionEvent_ConversionCountingMethod {
  /** CONVERSION_COUNTING_METHOD_UNSPECIFIED - Counting method not specified. */
  CONVERSION_COUNTING_METHOD_UNSPECIFIED = 0,
  /** ONCE_PER_EVENT - Each Event instance is considered a Conversion. */
  ONCE_PER_EVENT = 1,
  /**
   * ONCE_PER_SESSION - An Event instance is considered a Conversion at most once per session per
   * user.
   */
  ONCE_PER_SESSION = 2,
  UNRECOGNIZED = -1,
}

export function conversionEvent_ConversionCountingMethodFromJSON(
  object: any,
): ConversionEvent_ConversionCountingMethod {
  switch (object) {
    case 0:
    case "CONVERSION_COUNTING_METHOD_UNSPECIFIED":
      return ConversionEvent_ConversionCountingMethod.CONVERSION_COUNTING_METHOD_UNSPECIFIED;
    case 1:
    case "ONCE_PER_EVENT":
      return ConversionEvent_ConversionCountingMethod.ONCE_PER_EVENT;
    case 2:
    case "ONCE_PER_SESSION":
      return ConversionEvent_ConversionCountingMethod.ONCE_PER_SESSION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConversionEvent_ConversionCountingMethod.UNRECOGNIZED;
  }
}

export function conversionEvent_ConversionCountingMethodToJSON(
  object: ConversionEvent_ConversionCountingMethod,
): string {
  switch (object) {
    case ConversionEvent_ConversionCountingMethod.CONVERSION_COUNTING_METHOD_UNSPECIFIED:
      return "CONVERSION_COUNTING_METHOD_UNSPECIFIED";
    case ConversionEvent_ConversionCountingMethod.ONCE_PER_EVENT:
      return "ONCE_PER_EVENT";
    case ConversionEvent_ConversionCountingMethod.ONCE_PER_SESSION:
      return "ONCE_PER_SESSION";
    case ConversionEvent_ConversionCountingMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Defines a default value/currency for a conversion event. Both value and
 * currency must be provided.
 */
export interface ConversionEvent_DefaultConversionValue {
  /**
   * This value will be used to populate the value for all conversions
   * of the specified event_name where the event "value" parameter is unset.
   */
  value?:
    | number
    | undefined;
  /**
   * When a conversion event for this event_name has no set currency,
   * this currency will be applied as the default. Must be in ISO 4217
   * currency code format. See https://en.wikipedia.org/wiki/ISO_4217 for
   * more information.
   */
  currencyCode?: string | undefined;
}

/** A key event in a Google Analytics property. */
export interface KeyEvent {
  /**
   * Output only. Resource name of this key event.
   * Format: properties/{property}/keyEvents/{key_event}
   */
  name: string;
  /**
   * Immutable. The event name for this key event.
   * Examples: 'click', 'purchase'
   */
  eventName: string;
  /** Output only. Time when this key event was created in the property. */
  createTime:
    | Date
    | undefined;
  /** Output only. If set to true, this event can be deleted. */
  deletable: boolean;
  /**
   * Output only. If set to true, this key event refers to a custom event.  If
   * set to false, this key event refers to a default event in GA. Default
   * events typically have special meaning in GA. Default events are usually
   * created for you by the GA system, but in some cases can be created by
   * property admins. Custom events count towards the maximum number of
   * custom key events that may be created per property.
   */
  custom: boolean;
  /**
   * Required. The method by which Key Events will be counted across multiple
   * events within a session.
   */
  countingMethod: KeyEvent_CountingMethod;
  /** Optional. Defines a default value/currency for a key event. */
  defaultValue: KeyEvent_DefaultValue | undefined;
}

/**
 * The method by which Key Events will be counted across multiple events
 * within a session.
 */
export enum KeyEvent_CountingMethod {
  /** COUNTING_METHOD_UNSPECIFIED - Counting method not specified. */
  COUNTING_METHOD_UNSPECIFIED = 0,
  /** ONCE_PER_EVENT - Each Event instance is considered a Key Event. */
  ONCE_PER_EVENT = 1,
  /**
   * ONCE_PER_SESSION - An Event instance is considered a Key Event at most once per session per
   * user.
   */
  ONCE_PER_SESSION = 2,
  UNRECOGNIZED = -1,
}

export function keyEvent_CountingMethodFromJSON(object: any): KeyEvent_CountingMethod {
  switch (object) {
    case 0:
    case "COUNTING_METHOD_UNSPECIFIED":
      return KeyEvent_CountingMethod.COUNTING_METHOD_UNSPECIFIED;
    case 1:
    case "ONCE_PER_EVENT":
      return KeyEvent_CountingMethod.ONCE_PER_EVENT;
    case 2:
    case "ONCE_PER_SESSION":
      return KeyEvent_CountingMethod.ONCE_PER_SESSION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return KeyEvent_CountingMethod.UNRECOGNIZED;
  }
}

export function keyEvent_CountingMethodToJSON(object: KeyEvent_CountingMethod): string {
  switch (object) {
    case KeyEvent_CountingMethod.COUNTING_METHOD_UNSPECIFIED:
      return "COUNTING_METHOD_UNSPECIFIED";
    case KeyEvent_CountingMethod.ONCE_PER_EVENT:
      return "ONCE_PER_EVENT";
    case KeyEvent_CountingMethod.ONCE_PER_SESSION:
      return "ONCE_PER_SESSION";
    case KeyEvent_CountingMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Defines a default value/currency for a key event. */
export interface KeyEvent_DefaultValue {
  /**
   * Required. This will be used to populate the "value" parameter for all
   * occurrences of this Key Event (specified by event_name) where that
   * parameter is unset.
   */
  numericValue: number;
  /**
   * Required. When an occurrence of this Key Event (specified by event_name)
   * has no set currency this currency will be applied as the default. Must be
   * in ISO 4217 currency code format.
   *
   * See https://en.wikipedia.org/wiki/ISO_4217 for more information.
   */
  currencyCode: string;
}

/** Settings values for Google Signals.  This is a singleton resource. */
export interface GoogleSignalsSettings {
  /**
   * Output only. Resource name of this setting.
   * Format: properties/{property_id}/googleSignalsSettings
   * Example: "properties/1000/googleSignalsSettings"
   */
  name: string;
  /** Status of this setting. */
  state: GoogleSignalsState;
  /** Output only. Terms of Service acceptance. */
  consent: GoogleSignalsConsent;
}

/** A definition for a CustomDimension. */
export interface CustomDimension {
  /**
   * Output only. Resource name for this CustomDimension resource.
   * Format: properties/{property}/customDimensions/{customDimension}
   */
  name: string;
  /**
   * Required. Immutable. Tagging parameter name for this custom dimension.
   *
   * If this is a user-scoped dimension, then this is the user property name.
   * If this is an event-scoped dimension, then this is the event parameter
   * name.
   *
   * If this is an item-scoped dimension, then this is the parameter
   * name found in the eCommerce items array.
   *
   * May only contain alphanumeric and underscore characters, starting with a
   * letter. Max length of 24 characters for user-scoped dimensions, 40
   * characters for event-scoped dimensions.
   */
  parameterName: string;
  /**
   * Required. Display name for this custom dimension as shown in the Analytics
   * UI. Max length of 82 characters, alphanumeric plus space and underscore
   * starting with a letter. Legacy system-generated display names may contain
   * square brackets, but updates to this field will never permit square
   * brackets.
   */
  displayName: string;
  /**
   * Optional. Description for this custom dimension. Max length of 150
   * characters.
   */
  description: string;
  /** Required. Immutable. The scope of this dimension. */
  scope: CustomDimension_DimensionScope;
  /**
   * Optional. If set to true, sets this dimension as NPA and excludes it from
   * ads personalization.
   *
   * This is currently only supported by user-scoped custom dimensions.
   */
  disallowAdsPersonalization: boolean;
}

/** Valid values for the scope of this dimension. */
export enum CustomDimension_DimensionScope {
  /** DIMENSION_SCOPE_UNSPECIFIED - Scope unknown or not specified. */
  DIMENSION_SCOPE_UNSPECIFIED = 0,
  /** EVENT - Dimension scoped to an event. */
  EVENT = 1,
  /** USER - Dimension scoped to a user. */
  USER = 2,
  /** ITEM - Dimension scoped to eCommerce items */
  ITEM = 3,
  UNRECOGNIZED = -1,
}

export function customDimension_DimensionScopeFromJSON(object: any): CustomDimension_DimensionScope {
  switch (object) {
    case 0:
    case "DIMENSION_SCOPE_UNSPECIFIED":
      return CustomDimension_DimensionScope.DIMENSION_SCOPE_UNSPECIFIED;
    case 1:
    case "EVENT":
      return CustomDimension_DimensionScope.EVENT;
    case 2:
    case "USER":
      return CustomDimension_DimensionScope.USER;
    case 3:
    case "ITEM":
      return CustomDimension_DimensionScope.ITEM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CustomDimension_DimensionScope.UNRECOGNIZED;
  }
}

export function customDimension_DimensionScopeToJSON(object: CustomDimension_DimensionScope): string {
  switch (object) {
    case CustomDimension_DimensionScope.DIMENSION_SCOPE_UNSPECIFIED:
      return "DIMENSION_SCOPE_UNSPECIFIED";
    case CustomDimension_DimensionScope.EVENT:
      return "EVENT";
    case CustomDimension_DimensionScope.USER:
      return "USER";
    case CustomDimension_DimensionScope.ITEM:
      return "ITEM";
    case CustomDimension_DimensionScope.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A definition for a custom metric. */
export interface CustomMetric {
  /**
   * Output only. Resource name for this CustomMetric resource.
   * Format: properties/{property}/customMetrics/{customMetric}
   */
  name: string;
  /**
   * Required. Immutable. Tagging name for this custom metric.
   *
   * If this is an event-scoped metric, then this is the event parameter
   * name.
   *
   * May only contain alphanumeric and underscore charactes, starting with a
   * letter. Max length of 40 characters for event-scoped metrics.
   */
  parameterName: string;
  /**
   * Required. Display name for this custom metric as shown in the Analytics UI.
   * Max length of 82 characters, alphanumeric plus space and underscore
   * starting with a letter. Legacy system-generated display names may contain
   * square brackets, but updates to this field will never permit square
   * brackets.
   */
  displayName: string;
  /**
   * Optional. Description for this custom dimension.
   * Max length of 150 characters.
   */
  description: string;
  /** Required. The type for the custom metric's value. */
  measurementUnit: CustomMetric_MeasurementUnit;
  /** Required. Immutable. The scope of this custom metric. */
  scope: CustomMetric_MetricScope;
  /**
   * Optional. Types of restricted data that this metric may contain. Required
   * for metrics with CURRENCY measurement unit. Must be empty for metrics with
   * a non-CURRENCY measurement unit.
   */
  restrictedMetricType: CustomMetric_RestrictedMetricType[];
}

/**
 * Possible types of representing the custom metric's value.
 *
 * Currency representation may change in the future, requiring a breaking API
 * change.
 */
export enum CustomMetric_MeasurementUnit {
  /** MEASUREMENT_UNIT_UNSPECIFIED - MeasurementUnit unspecified or missing. */
  MEASUREMENT_UNIT_UNSPECIFIED = 0,
  /** STANDARD - This metric uses default units. */
  STANDARD = 1,
  /** CURRENCY - This metric measures a currency. */
  CURRENCY = 2,
  /** FEET - This metric measures feet. */
  FEET = 3,
  /** METERS - This metric measures meters. */
  METERS = 4,
  /** KILOMETERS - This metric measures kilometers. */
  KILOMETERS = 5,
  /** MILES - This metric measures miles. */
  MILES = 6,
  /** MILLISECONDS - This metric measures milliseconds. */
  MILLISECONDS = 7,
  /** SECONDS - This metric measures seconds. */
  SECONDS = 8,
  /** MINUTES - This metric measures minutes. */
  MINUTES = 9,
  /** HOURS - This metric measures hours. */
  HOURS = 10,
  UNRECOGNIZED = -1,
}

export function customMetric_MeasurementUnitFromJSON(object: any): CustomMetric_MeasurementUnit {
  switch (object) {
    case 0:
    case "MEASUREMENT_UNIT_UNSPECIFIED":
      return CustomMetric_MeasurementUnit.MEASUREMENT_UNIT_UNSPECIFIED;
    case 1:
    case "STANDARD":
      return CustomMetric_MeasurementUnit.STANDARD;
    case 2:
    case "CURRENCY":
      return CustomMetric_MeasurementUnit.CURRENCY;
    case 3:
    case "FEET":
      return CustomMetric_MeasurementUnit.FEET;
    case 4:
    case "METERS":
      return CustomMetric_MeasurementUnit.METERS;
    case 5:
    case "KILOMETERS":
      return CustomMetric_MeasurementUnit.KILOMETERS;
    case 6:
    case "MILES":
      return CustomMetric_MeasurementUnit.MILES;
    case 7:
    case "MILLISECONDS":
      return CustomMetric_MeasurementUnit.MILLISECONDS;
    case 8:
    case "SECONDS":
      return CustomMetric_MeasurementUnit.SECONDS;
    case 9:
    case "MINUTES":
      return CustomMetric_MeasurementUnit.MINUTES;
    case 10:
    case "HOURS":
      return CustomMetric_MeasurementUnit.HOURS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CustomMetric_MeasurementUnit.UNRECOGNIZED;
  }
}

export function customMetric_MeasurementUnitToJSON(object: CustomMetric_MeasurementUnit): string {
  switch (object) {
    case CustomMetric_MeasurementUnit.MEASUREMENT_UNIT_UNSPECIFIED:
      return "MEASUREMENT_UNIT_UNSPECIFIED";
    case CustomMetric_MeasurementUnit.STANDARD:
      return "STANDARD";
    case CustomMetric_MeasurementUnit.CURRENCY:
      return "CURRENCY";
    case CustomMetric_MeasurementUnit.FEET:
      return "FEET";
    case CustomMetric_MeasurementUnit.METERS:
      return "METERS";
    case CustomMetric_MeasurementUnit.KILOMETERS:
      return "KILOMETERS";
    case CustomMetric_MeasurementUnit.MILES:
      return "MILES";
    case CustomMetric_MeasurementUnit.MILLISECONDS:
      return "MILLISECONDS";
    case CustomMetric_MeasurementUnit.SECONDS:
      return "SECONDS";
    case CustomMetric_MeasurementUnit.MINUTES:
      return "MINUTES";
    case CustomMetric_MeasurementUnit.HOURS:
      return "HOURS";
    case CustomMetric_MeasurementUnit.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The scope of this metric. */
export enum CustomMetric_MetricScope {
  /** METRIC_SCOPE_UNSPECIFIED - Scope unknown or not specified. */
  METRIC_SCOPE_UNSPECIFIED = 0,
  /** EVENT - Metric scoped to an event. */
  EVENT = 1,
  UNRECOGNIZED = -1,
}

export function customMetric_MetricScopeFromJSON(object: any): CustomMetric_MetricScope {
  switch (object) {
    case 0:
    case "METRIC_SCOPE_UNSPECIFIED":
      return CustomMetric_MetricScope.METRIC_SCOPE_UNSPECIFIED;
    case 1:
    case "EVENT":
      return CustomMetric_MetricScope.EVENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CustomMetric_MetricScope.UNRECOGNIZED;
  }
}

export function customMetric_MetricScopeToJSON(object: CustomMetric_MetricScope): string {
  switch (object) {
    case CustomMetric_MetricScope.METRIC_SCOPE_UNSPECIFIED:
      return "METRIC_SCOPE_UNSPECIFIED";
    case CustomMetric_MetricScope.EVENT:
      return "EVENT";
    case CustomMetric_MetricScope.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Labels that mark the data in this custom metric as data that should be
 * restricted to specific users.
 */
export enum CustomMetric_RestrictedMetricType {
  /** RESTRICTED_METRIC_TYPE_UNSPECIFIED - Type unknown or unspecified. */
  RESTRICTED_METRIC_TYPE_UNSPECIFIED = 0,
  /** COST_DATA - Metric reports cost data. */
  COST_DATA = 1,
  /** REVENUE_DATA - Metric reports revenue data. */
  REVENUE_DATA = 2,
  UNRECOGNIZED = -1,
}

export function customMetric_RestrictedMetricTypeFromJSON(object: any): CustomMetric_RestrictedMetricType {
  switch (object) {
    case 0:
    case "RESTRICTED_METRIC_TYPE_UNSPECIFIED":
      return CustomMetric_RestrictedMetricType.RESTRICTED_METRIC_TYPE_UNSPECIFIED;
    case 1:
    case "COST_DATA":
      return CustomMetric_RestrictedMetricType.COST_DATA;
    case 2:
    case "REVENUE_DATA":
      return CustomMetric_RestrictedMetricType.REVENUE_DATA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CustomMetric_RestrictedMetricType.UNRECOGNIZED;
  }
}

export function customMetric_RestrictedMetricTypeToJSON(object: CustomMetric_RestrictedMetricType): string {
  switch (object) {
    case CustomMetric_RestrictedMetricType.RESTRICTED_METRIC_TYPE_UNSPECIFIED:
      return "RESTRICTED_METRIC_TYPE_UNSPECIFIED";
    case CustomMetric_RestrictedMetricType.COST_DATA:
      return "COST_DATA";
    case CustomMetric_RestrictedMetricType.REVENUE_DATA:
      return "REVENUE_DATA";
    case CustomMetric_RestrictedMetricType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A definition for a calculated metric. */
export interface CalculatedMetric {
  /**
   * Output only. Resource name for this CalculatedMetric.
   * Format: 'properties/{property_id}/calculatedMetrics/{calculated_metric_id}'
   */
  name: string;
  /**
   * Optional. Description for this calculated metric.
   * Max length of 4096 characters.
   */
  description: string;
  /**
   * Required. Display name for this calculated metric as shown in the
   * Google Analytics UI. Max length 82 characters.
   */
  displayName: string;
  /**
   * Output only. The ID to use for the calculated metric. In the UI, this is
   * referred to as the "API name."
   *
   * The calculated_metric_id is used when referencing this calculated metric
   * from external APIs. For example, "calcMetric:{calculated_metric_id}".
   */
  calculatedMetricId: string;
  /** Required. The type for the calculated metric's value. */
  metricUnit: CalculatedMetric_MetricUnit;
  /** Output only. Types of restricted data that this metric contains. */
  restrictedMetricType: CalculatedMetric_RestrictedMetricType[];
  /**
   * Required. The calculated metric's definition. Maximum number of unique
   * referenced custom metrics is 5. Formulas supports the following operations:
   * + (addition),  - (subtraction), - (negative),  * (multiplication), /
   * (division), () (parenthesis). Any valid real numbers are acceptable that
   * fit in a Long (64bit integer) or a Double (64 bit floating point number).
   * Example formula:
   *   "( customEvent:parameter_name + cartPurchaseQuantity ) / 2.0"
   */
  formula: string;
  /**
   * Output only. If true, this calculated metric has a invalid metric
   * reference. Anything using a calculated metric with invalid_metric_reference
   * set to true may fail, produce warnings, or produce unexpected results.
   */
  invalidMetricReference: boolean;
}

/** Possible types of representing the calculated metric's value. */
export enum CalculatedMetric_MetricUnit {
  /** METRIC_UNIT_UNSPECIFIED - MetricUnit unspecified or missing. */
  METRIC_UNIT_UNSPECIFIED = 0,
  /** STANDARD - This metric uses default units. */
  STANDARD = 1,
  /** CURRENCY - This metric measures a currency. */
  CURRENCY = 2,
  /** FEET - This metric measures feet. */
  FEET = 3,
  /** MILES - This metric measures miles. */
  MILES = 4,
  /** METERS - This metric measures meters. */
  METERS = 5,
  /** KILOMETERS - This metric measures kilometers. */
  KILOMETERS = 6,
  /** MILLISECONDS - This metric measures milliseconds. */
  MILLISECONDS = 7,
  /** SECONDS - This metric measures seconds. */
  SECONDS = 8,
  /** MINUTES - This metric measures minutes. */
  MINUTES = 9,
  /** HOURS - This metric measures hours. */
  HOURS = 10,
  UNRECOGNIZED = -1,
}

export function calculatedMetric_MetricUnitFromJSON(object: any): CalculatedMetric_MetricUnit {
  switch (object) {
    case 0:
    case "METRIC_UNIT_UNSPECIFIED":
      return CalculatedMetric_MetricUnit.METRIC_UNIT_UNSPECIFIED;
    case 1:
    case "STANDARD":
      return CalculatedMetric_MetricUnit.STANDARD;
    case 2:
    case "CURRENCY":
      return CalculatedMetric_MetricUnit.CURRENCY;
    case 3:
    case "FEET":
      return CalculatedMetric_MetricUnit.FEET;
    case 4:
    case "MILES":
      return CalculatedMetric_MetricUnit.MILES;
    case 5:
    case "METERS":
      return CalculatedMetric_MetricUnit.METERS;
    case 6:
    case "KILOMETERS":
      return CalculatedMetric_MetricUnit.KILOMETERS;
    case 7:
    case "MILLISECONDS":
      return CalculatedMetric_MetricUnit.MILLISECONDS;
    case 8:
    case "SECONDS":
      return CalculatedMetric_MetricUnit.SECONDS;
    case 9:
    case "MINUTES":
      return CalculatedMetric_MetricUnit.MINUTES;
    case 10:
    case "HOURS":
      return CalculatedMetric_MetricUnit.HOURS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CalculatedMetric_MetricUnit.UNRECOGNIZED;
  }
}

export function calculatedMetric_MetricUnitToJSON(object: CalculatedMetric_MetricUnit): string {
  switch (object) {
    case CalculatedMetric_MetricUnit.METRIC_UNIT_UNSPECIFIED:
      return "METRIC_UNIT_UNSPECIFIED";
    case CalculatedMetric_MetricUnit.STANDARD:
      return "STANDARD";
    case CalculatedMetric_MetricUnit.CURRENCY:
      return "CURRENCY";
    case CalculatedMetric_MetricUnit.FEET:
      return "FEET";
    case CalculatedMetric_MetricUnit.MILES:
      return "MILES";
    case CalculatedMetric_MetricUnit.METERS:
      return "METERS";
    case CalculatedMetric_MetricUnit.KILOMETERS:
      return "KILOMETERS";
    case CalculatedMetric_MetricUnit.MILLISECONDS:
      return "MILLISECONDS";
    case CalculatedMetric_MetricUnit.SECONDS:
      return "SECONDS";
    case CalculatedMetric_MetricUnit.MINUTES:
      return "MINUTES";
    case CalculatedMetric_MetricUnit.HOURS:
      return "HOURS";
    case CalculatedMetric_MetricUnit.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Labels that mark the data in calculated metric used in conjunction with
 * user roles that restrict access to cost and/or revenue metrics.
 */
export enum CalculatedMetric_RestrictedMetricType {
  /** RESTRICTED_METRIC_TYPE_UNSPECIFIED - Type unknown or unspecified. */
  RESTRICTED_METRIC_TYPE_UNSPECIFIED = 0,
  /** COST_DATA - Metric reports cost data. */
  COST_DATA = 1,
  /** REVENUE_DATA - Metric reports revenue data. */
  REVENUE_DATA = 2,
  UNRECOGNIZED = -1,
}

export function calculatedMetric_RestrictedMetricTypeFromJSON(object: any): CalculatedMetric_RestrictedMetricType {
  switch (object) {
    case 0:
    case "RESTRICTED_METRIC_TYPE_UNSPECIFIED":
      return CalculatedMetric_RestrictedMetricType.RESTRICTED_METRIC_TYPE_UNSPECIFIED;
    case 1:
    case "COST_DATA":
      return CalculatedMetric_RestrictedMetricType.COST_DATA;
    case 2:
    case "REVENUE_DATA":
      return CalculatedMetric_RestrictedMetricType.REVENUE_DATA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CalculatedMetric_RestrictedMetricType.UNRECOGNIZED;
  }
}

export function calculatedMetric_RestrictedMetricTypeToJSON(object: CalculatedMetric_RestrictedMetricType): string {
  switch (object) {
    case CalculatedMetric_RestrictedMetricType.RESTRICTED_METRIC_TYPE_UNSPECIFIED:
      return "RESTRICTED_METRIC_TYPE_UNSPECIFIED";
    case CalculatedMetric_RestrictedMetricType.COST_DATA:
      return "COST_DATA";
    case CalculatedMetric_RestrictedMetricType.REVENUE_DATA:
      return "REVENUE_DATA";
    case CalculatedMetric_RestrictedMetricType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Settings values for data retention. This is a singleton resource. */
export interface DataRetentionSettings {
  /**
   * Output only. Resource name for this DataRetentionSetting resource.
   * Format: properties/{property}/dataRetentionSettings
   */
  name: string;
  /** The length of time that event-level data is retained. */
  eventDataRetention: DataRetentionSettings_RetentionDuration;
  /**
   * If true, reset the retention period for the user identifier with every
   * event from that user.
   */
  resetUserDataOnNewActivity: boolean;
}

/** Valid values for the data retention duration. */
export enum DataRetentionSettings_RetentionDuration {
  /** RETENTION_DURATION_UNSPECIFIED - Data retention time duration is not specified. */
  RETENTION_DURATION_UNSPECIFIED = 0,
  /** TWO_MONTHS - The data retention time duration is 2 months. */
  TWO_MONTHS = 1,
  /** FOURTEEN_MONTHS - The data retention time duration is 14 months. */
  FOURTEEN_MONTHS = 3,
  /**
   * TWENTY_SIX_MONTHS - The data retention time duration is 26 months.
   * Available to 360 properties only.
   */
  TWENTY_SIX_MONTHS = 4,
  /**
   * THIRTY_EIGHT_MONTHS - The data retention time duration is 38 months.
   * Available to 360 properties only.
   */
  THIRTY_EIGHT_MONTHS = 5,
  /**
   * FIFTY_MONTHS - The data retention time duration is 50 months.
   * Available to 360 properties only.
   */
  FIFTY_MONTHS = 6,
  UNRECOGNIZED = -1,
}

export function dataRetentionSettings_RetentionDurationFromJSON(object: any): DataRetentionSettings_RetentionDuration {
  switch (object) {
    case 0:
    case "RETENTION_DURATION_UNSPECIFIED":
      return DataRetentionSettings_RetentionDuration.RETENTION_DURATION_UNSPECIFIED;
    case 1:
    case "TWO_MONTHS":
      return DataRetentionSettings_RetentionDuration.TWO_MONTHS;
    case 3:
    case "FOURTEEN_MONTHS":
      return DataRetentionSettings_RetentionDuration.FOURTEEN_MONTHS;
    case 4:
    case "TWENTY_SIX_MONTHS":
      return DataRetentionSettings_RetentionDuration.TWENTY_SIX_MONTHS;
    case 5:
    case "THIRTY_EIGHT_MONTHS":
      return DataRetentionSettings_RetentionDuration.THIRTY_EIGHT_MONTHS;
    case 6:
    case "FIFTY_MONTHS":
      return DataRetentionSettings_RetentionDuration.FIFTY_MONTHS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataRetentionSettings_RetentionDuration.UNRECOGNIZED;
  }
}

export function dataRetentionSettings_RetentionDurationToJSON(object: DataRetentionSettings_RetentionDuration): string {
  switch (object) {
    case DataRetentionSettings_RetentionDuration.RETENTION_DURATION_UNSPECIFIED:
      return "RETENTION_DURATION_UNSPECIFIED";
    case DataRetentionSettings_RetentionDuration.TWO_MONTHS:
      return "TWO_MONTHS";
    case DataRetentionSettings_RetentionDuration.FOURTEEN_MONTHS:
      return "FOURTEEN_MONTHS";
    case DataRetentionSettings_RetentionDuration.TWENTY_SIX_MONTHS:
      return "TWENTY_SIX_MONTHS";
    case DataRetentionSettings_RetentionDuration.THIRTY_EIGHT_MONTHS:
      return "THIRTY_EIGHT_MONTHS";
    case DataRetentionSettings_RetentionDuration.FIFTY_MONTHS:
      return "FIFTY_MONTHS";
    case DataRetentionSettings_RetentionDuration.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The attribution settings used for a given property. This is a singleton
 * resource.
 */
export interface AttributionSettings {
  /**
   * Output only. Resource name of this attribution settings resource.
   * Format: properties/{property_id}/attributionSettings
   * Example: "properties/1000/attributionSettings"
   */
  name: string;
  /**
   * Required. The lookback window configuration for acquisition conversion
   * events. The default window size is 30 days.
   */
  acquisitionConversionEventLookbackWindow: AttributionSettings_AcquisitionConversionEventLookbackWindow;
  /**
   * Required. The lookback window for all other, non-acquisition conversion
   * events. The default window size is 90 days.
   */
  otherConversionEventLookbackWindow: AttributionSettings_OtherConversionEventLookbackWindow;
  /**
   * Required. The reporting attribution model used to calculate conversion
   * credit in this property's reports.
   *
   * Changing the attribution model will apply to both historical and future
   * data. These changes will be reflected in reports with conversion and
   * revenue data. User and session data will be unaffected.
   */
  reportingAttributionModel: AttributionSettings_ReportingAttributionModel;
  /**
   * Required. The Conversion Export Scope for data exported to linked Ads
   * Accounts.
   */
  adsWebConversionDataExportScope: AttributionSettings_AdsWebConversionDataExportScope;
}

/**
 * How far back in time events should be considered for inclusion in a
 * converting path which leads to the first install of an app or the first
 * visit to a site.
 */
export enum AttributionSettings_AcquisitionConversionEventLookbackWindow {
  /** ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_UNSPECIFIED - Lookback window size unspecified. */
  ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_UNSPECIFIED = 0,
  /** ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_7_DAYS - 7-day lookback window. */
  ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_7_DAYS = 1,
  /** ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_30_DAYS - 30-day lookback window. */
  ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_30_DAYS = 2,
  UNRECOGNIZED = -1,
}

export function attributionSettings_AcquisitionConversionEventLookbackWindowFromJSON(
  object: any,
): AttributionSettings_AcquisitionConversionEventLookbackWindow {
  switch (object) {
    case 0:
    case "ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_UNSPECIFIED":
      return AttributionSettings_AcquisitionConversionEventLookbackWindow
        .ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_UNSPECIFIED;
    case 1:
    case "ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_7_DAYS":
      return AttributionSettings_AcquisitionConversionEventLookbackWindow
        .ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_7_DAYS;
    case 2:
    case "ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_30_DAYS":
      return AttributionSettings_AcquisitionConversionEventLookbackWindow
        .ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_30_DAYS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AttributionSettings_AcquisitionConversionEventLookbackWindow.UNRECOGNIZED;
  }
}

export function attributionSettings_AcquisitionConversionEventLookbackWindowToJSON(
  object: AttributionSettings_AcquisitionConversionEventLookbackWindow,
): string {
  switch (object) {
    case AttributionSettings_AcquisitionConversionEventLookbackWindow
      .ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_UNSPECIFIED:
      return "ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_UNSPECIFIED";
    case AttributionSettings_AcquisitionConversionEventLookbackWindow
      .ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_7_DAYS:
      return "ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_7_DAYS";
    case AttributionSettings_AcquisitionConversionEventLookbackWindow
      .ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_30_DAYS:
      return "ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_30_DAYS";
    case AttributionSettings_AcquisitionConversionEventLookbackWindow.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * How far back in time events should be considered for inclusion in a
 * converting path for all conversions other than first app install/first site
 * visit.
 */
export enum AttributionSettings_OtherConversionEventLookbackWindow {
  /** OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_UNSPECIFIED - Lookback window size unspecified. */
  OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_UNSPECIFIED = 0,
  /** OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_30_DAYS - 30-day lookback window. */
  OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_30_DAYS = 1,
  /** OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_60_DAYS - 60-day lookback window. */
  OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_60_DAYS = 2,
  /** OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_90_DAYS - 90-day lookback window. */
  OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_90_DAYS = 3,
  UNRECOGNIZED = -1,
}

export function attributionSettings_OtherConversionEventLookbackWindowFromJSON(
  object: any,
): AttributionSettings_OtherConversionEventLookbackWindow {
  switch (object) {
    case 0:
    case "OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_UNSPECIFIED":
      return AttributionSettings_OtherConversionEventLookbackWindow.OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_UNSPECIFIED;
    case 1:
    case "OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_30_DAYS":
      return AttributionSettings_OtherConversionEventLookbackWindow.OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_30_DAYS;
    case 2:
    case "OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_60_DAYS":
      return AttributionSettings_OtherConversionEventLookbackWindow.OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_60_DAYS;
    case 3:
    case "OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_90_DAYS":
      return AttributionSettings_OtherConversionEventLookbackWindow.OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_90_DAYS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AttributionSettings_OtherConversionEventLookbackWindow.UNRECOGNIZED;
  }
}

export function attributionSettings_OtherConversionEventLookbackWindowToJSON(
  object: AttributionSettings_OtherConversionEventLookbackWindow,
): string {
  switch (object) {
    case AttributionSettings_OtherConversionEventLookbackWindow.OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_UNSPECIFIED:
      return "OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_UNSPECIFIED";
    case AttributionSettings_OtherConversionEventLookbackWindow.OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_30_DAYS:
      return "OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_30_DAYS";
    case AttributionSettings_OtherConversionEventLookbackWindow.OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_60_DAYS:
      return "OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_60_DAYS";
    case AttributionSettings_OtherConversionEventLookbackWindow.OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_90_DAYS:
      return "OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_90_DAYS";
    case AttributionSettings_OtherConversionEventLookbackWindow.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The reporting attribution model used to calculate conversion credit in this
 * property's reports.
 */
export enum AttributionSettings_ReportingAttributionModel {
  /** REPORTING_ATTRIBUTION_MODEL_UNSPECIFIED - Reporting attribution model unspecified. */
  REPORTING_ATTRIBUTION_MODEL_UNSPECIFIED = 0,
  /**
   * PAID_AND_ORGANIC_CHANNELS_DATA_DRIVEN - Data-driven attribution distributes credit for the conversion based on
   * data for each conversion event. Each Data-driven model is specific to
   * each advertiser and each conversion event.
   * Previously CROSS_CHANNEL_DATA_DRIVEN
   */
  PAID_AND_ORGANIC_CHANNELS_DATA_DRIVEN = 1,
  /**
   * PAID_AND_ORGANIC_CHANNELS_LAST_CLICK - Ignores direct traffic and attributes 100% of the conversion value to the
   * last channel that the customer clicked through (or engaged view through
   * for YouTube) before converting.
   * Previously CROSS_CHANNEL_LAST_CLICK
   */
  PAID_AND_ORGANIC_CHANNELS_LAST_CLICK = 2,
  /**
   * GOOGLE_PAID_CHANNELS_LAST_CLICK - Attributes 100% of the conversion value to the last Google Paid channel
   * that the customer clicked through before converting.
   * Previously ADS_PREFERRED_LAST_CLICK
   */
  GOOGLE_PAID_CHANNELS_LAST_CLICK = 7,
  UNRECOGNIZED = -1,
}

export function attributionSettings_ReportingAttributionModelFromJSON(
  object: any,
): AttributionSettings_ReportingAttributionModel {
  switch (object) {
    case 0:
    case "REPORTING_ATTRIBUTION_MODEL_UNSPECIFIED":
      return AttributionSettings_ReportingAttributionModel.REPORTING_ATTRIBUTION_MODEL_UNSPECIFIED;
    case 1:
    case "PAID_AND_ORGANIC_CHANNELS_DATA_DRIVEN":
      return AttributionSettings_ReportingAttributionModel.PAID_AND_ORGANIC_CHANNELS_DATA_DRIVEN;
    case 2:
    case "PAID_AND_ORGANIC_CHANNELS_LAST_CLICK":
      return AttributionSettings_ReportingAttributionModel.PAID_AND_ORGANIC_CHANNELS_LAST_CLICK;
    case 7:
    case "GOOGLE_PAID_CHANNELS_LAST_CLICK":
      return AttributionSettings_ReportingAttributionModel.GOOGLE_PAID_CHANNELS_LAST_CLICK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AttributionSettings_ReportingAttributionModel.UNRECOGNIZED;
  }
}

export function attributionSettings_ReportingAttributionModelToJSON(
  object: AttributionSettings_ReportingAttributionModel,
): string {
  switch (object) {
    case AttributionSettings_ReportingAttributionModel.REPORTING_ATTRIBUTION_MODEL_UNSPECIFIED:
      return "REPORTING_ATTRIBUTION_MODEL_UNSPECIFIED";
    case AttributionSettings_ReportingAttributionModel.PAID_AND_ORGANIC_CHANNELS_DATA_DRIVEN:
      return "PAID_AND_ORGANIC_CHANNELS_DATA_DRIVEN";
    case AttributionSettings_ReportingAttributionModel.PAID_AND_ORGANIC_CHANNELS_LAST_CLICK:
      return "PAID_AND_ORGANIC_CHANNELS_LAST_CLICK";
    case AttributionSettings_ReportingAttributionModel.GOOGLE_PAID_CHANNELS_LAST_CLICK:
      return "GOOGLE_PAID_CHANNELS_LAST_CLICK";
    case AttributionSettings_ReportingAttributionModel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The Conversion Export Scope for data exported to linked Ads Accounts. */
export enum AttributionSettings_AdsWebConversionDataExportScope {
  /** ADS_WEB_CONVERSION_DATA_EXPORT_SCOPE_UNSPECIFIED - Default value. This value is unused. */
  ADS_WEB_CONVERSION_DATA_EXPORT_SCOPE_UNSPECIFIED = 0,
  /**
   * NOT_SELECTED_YET - No data export scope selected yet.
   * Export scope can never be changed back to this value.
   */
  NOT_SELECTED_YET = 1,
  /**
   * PAID_AND_ORGANIC_CHANNELS - Paid and organic channels are eligible to receive conversion credit, but
   * only credit assigned to Google Ads channels will appear in your Ads
   * accounts. To learn more, see [Paid and Organic
   * channels](https://support.google.com/analytics/answer/10632359).
   */
  PAID_AND_ORGANIC_CHANNELS = 2,
  /**
   * GOOGLE_PAID_CHANNELS - Only Google Ads paid channels are eligible to receive conversion credit.
   * To learn more, see [Google Paid
   * channels](https://support.google.com/analytics/answer/10632359).
   */
  GOOGLE_PAID_CHANNELS = 3,
  UNRECOGNIZED = -1,
}

export function attributionSettings_AdsWebConversionDataExportScopeFromJSON(
  object: any,
): AttributionSettings_AdsWebConversionDataExportScope {
  switch (object) {
    case 0:
    case "ADS_WEB_CONVERSION_DATA_EXPORT_SCOPE_UNSPECIFIED":
      return AttributionSettings_AdsWebConversionDataExportScope.ADS_WEB_CONVERSION_DATA_EXPORT_SCOPE_UNSPECIFIED;
    case 1:
    case "NOT_SELECTED_YET":
      return AttributionSettings_AdsWebConversionDataExportScope.NOT_SELECTED_YET;
    case 2:
    case "PAID_AND_ORGANIC_CHANNELS":
      return AttributionSettings_AdsWebConversionDataExportScope.PAID_AND_ORGANIC_CHANNELS;
    case 3:
    case "GOOGLE_PAID_CHANNELS":
      return AttributionSettings_AdsWebConversionDataExportScope.GOOGLE_PAID_CHANNELS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AttributionSettings_AdsWebConversionDataExportScope.UNRECOGNIZED;
  }
}

export function attributionSettings_AdsWebConversionDataExportScopeToJSON(
  object: AttributionSettings_AdsWebConversionDataExportScope,
): string {
  switch (object) {
    case AttributionSettings_AdsWebConversionDataExportScope.ADS_WEB_CONVERSION_DATA_EXPORT_SCOPE_UNSPECIFIED:
      return "ADS_WEB_CONVERSION_DATA_EXPORT_SCOPE_UNSPECIFIED";
    case AttributionSettings_AdsWebConversionDataExportScope.NOT_SELECTED_YET:
      return "NOT_SELECTED_YET";
    case AttributionSettings_AdsWebConversionDataExportScope.PAID_AND_ORGANIC_CHANNELS:
      return "PAID_AND_ORGANIC_CHANNELS";
    case AttributionSettings_AdsWebConversionDataExportScope.GOOGLE_PAID_CHANNELS:
      return "GOOGLE_PAID_CHANNELS";
    case AttributionSettings_AdsWebConversionDataExportScope.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A binding of a user to a set of roles. */
export interface AccessBinding {
  /**
   * If set, the email address of the user to set roles for.
   * Format: "someuser@gmail.com"
   */
  user?:
    | string
    | undefined;
  /**
   * Output only. Resource name of this binding.
   *
   * Format: accounts/{account}/accessBindings/{access_binding} or
   * properties/{property}/accessBindings/{access_binding}
   *
   * Example:
   * "accounts/100/accessBindings/200"
   */
  name: string;
  /**
   * A list of roles for to grant to the parent resource.
   *
   * Valid values:
   * predefinedRoles/viewer
   * predefinedRoles/analyst
   * predefinedRoles/editor
   * predefinedRoles/admin
   * predefinedRoles/no-cost-data
   * predefinedRoles/no-revenue-data
   *
   * For users, if an empty list of roles is set, this AccessBinding will be
   * deleted.
   */
  roles: string[];
}

/** A link between a GA4 Property and BigQuery project. */
export interface BigQueryLink {
  /**
   * Output only. Resource name of this BigQuery link.
   * Format: 'properties/{property_id}/bigQueryLinks/{bigquery_link_id}'
   * Format: 'properties/1234/bigQueryLinks/abc567'
   */
  name: string;
  /**
   * Immutable. The linked Google Cloud project. When creating a BigQueryLink,
   * you may provide this resource name using either a project number or project
   * ID. Once this resource has been created, the returned project will always
   * have a project that contains a project number.
   * Format: 'projects/{project number}'
   * Example: 'projects/1234'
   */
  project: string;
  /** Output only. Time when the link was created. */
  createTime:
    | Date
    | undefined;
  /** If set true, enables daily data export to the linked Google Cloud project. */
  dailyExportEnabled: boolean;
  /** If set true, enables streaming export to the linked Google Cloud project. */
  streamingExportEnabled: boolean;
  /** If set true, enables fresh daily export to the linked Google Cloud project. */
  freshDailyExportEnabled: boolean;
  /**
   * If set true, exported data will include advertising identifiers for mobile
   * app streams.
   */
  includeAdvertisingId: boolean;
  /**
   * The list of streams under the parent property for which data will be
   * exported.
   * Format: properties/{property_id}/dataStreams/{stream_id}
   * Example: ['properties/1000/dataStreams/2000']
   */
  exportStreams: string[];
  /** The list of event names that will be excluded from exports. */
  excludedEvents: string[];
  /**
   * Required. Immutable. The geographic location where the created BigQuery
   * dataset should reside. See https://cloud.google.com/bigquery/docs/locations
   * for supported locations.
   */
  datasetLocation: string;
}

/**
 * Singleton resource under a web DataStream, configuring measurement of
 * additional site interactions and content.
 */
export interface EnhancedMeasurementSettings {
  /**
   * Output only. Resource name of the Enhanced Measurement Settings.
   * Format:
   * properties/{property_id}/dataStreams/{data_stream}/enhancedMeasurementSettings
   * Example: "properties/1000/dataStreams/2000/enhancedMeasurementSettings"
   */
  name: string;
  /**
   * Indicates whether Enhanced Measurement Settings will be used to
   * automatically measure interactions and content on this web stream.
   *
   * Changing this value does not affect the settings themselves, but determines
   * whether they are respected.
   */
  streamEnabled: boolean;
  /**
   * If enabled, capture scroll events each time a visitor gets to the bottom of
   * a page.
   */
  scrollsEnabled: boolean;
  /**
   * If enabled, capture an outbound click event each time a visitor clicks a
   * link that leads them away from your domain.
   */
  outboundClicksEnabled: boolean;
  /**
   * If enabled, capture a view search results event each time a visitor
   * performs a search on your site (based on a query parameter).
   */
  siteSearchEnabled: boolean;
  /**
   * If enabled, capture video play, progress, and complete events as visitors
   * view embedded videos on your site.
   */
  videoEngagementEnabled: boolean;
  /**
   * If enabled, capture a file download event each time a link is clicked with
   * a common document, compressed file, application, video, or audio extension.
   */
  fileDownloadsEnabled: boolean;
  /**
   * If enabled, capture a page view event each time the website changes the
   * browser history state.
   */
  pageChangesEnabled: boolean;
  /**
   * If enabled, capture a form interaction event each time a visitor interacts
   * with a form on your website.
   * False by default.
   */
  formInteractionsEnabled: boolean;
  /**
   * Required. URL query parameters to interpret as site search parameters.
   * Max length is 1024 characters. Must not be empty.
   */
  searchQueryParameter: string;
  /**
   * Additional URL query parameters.
   * Max length is 1024 characters.
   */
  uriQueryParameter: string;
}

/** Configuration for a specific Connected Site Tag. */
export interface ConnectedSiteTag {
  /**
   * Required. User-provided display name for the connected site tag. Must be
   * less than 256 characters.
   */
  displayName: string;
  /**
   * Required. "Tag ID to forward events to. Also known as the Measurement ID,
   * or the "G-ID"  (For example: G-12345).
   */
  tagId: string;
}

/**
 * Settings for client-side data redaction. Singleton resource under a Web
 * Stream.
 */
export interface DataRedactionSettings {
  /**
   * Output only. Name of this Data Redaction Settings resource.
   * Format:
   * properties/{property_id}/dataStreams/{data_stream}/dataRedactionSettings
   * Example: "properties/1000/dataStreams/2000/dataRedactionSettings"
   */
  name: string;
  /**
   * If enabled, any event parameter or user property values that look like an
   * email will be redacted.
   */
  emailRedactionEnabled: boolean;
  /**
   * Query Parameter redaction removes the key and value portions of a
   * query parameter if it is in the configured set of query parameters.
   *
   * If enabled, URL query replacement logic will be run for the Stream. Any
   * query parameters defined in query_parameter_keys will be redacted.
   */
  queryParameterRedactionEnabled: boolean;
  /**
   * The query parameter keys to apply redaction logic to if present in the URL.
   * Query parameter matching is case-insensitive.
   *
   * Must contain at least one element if query_parameter_replacement_enabled
   * is true. Keys cannot contain commas.
   */
  queryParameterKeys: string[];
}

/** A link between a GA4 Property and an AdSense for Content ad client. */
export interface AdSenseLink {
  /**
   * Output only. The resource name for this AdSense Link resource.
   * Format: properties/{propertyId}/adSenseLinks/{linkId}
   * Example: properties/1234/adSenseLinks/6789
   */
  name: string;
  /**
   * Immutable. The AdSense ad client code that the GA4 property is linked to.
   * Example format: "ca-pub-1234567890"
   */
  adClientCode: string;
}

/** A link that references a source property under the parent rollup property. */
export interface RollupPropertySourceLink {
  /**
   * Output only. Resource name of this RollupPropertySourceLink.
   * Format:
   * 'properties/{property_id}/rollupPropertySourceLinks/{rollup_property_source_link}'
   * Format: 'properties/123/rollupPropertySourceLinks/456'
   */
  name: string;
  /**
   * Immutable. Resource name of the source property.
   * Format: properties/{property_id}
   * Example: "properties/789"
   */
  sourceProperty: string;
}

function createBaseAccount(): Account {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    displayName: "",
    regionCode: "",
    deleted: false,
    gmpOrganization: "",
  };
}

export const Account: MessageFns<Account> = {
  encode(message: Account, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    if (message.regionCode !== "") {
      writer.uint32(42).string(message.regionCode);
    }
    if (message.deleted !== false) {
      writer.uint32(48).bool(message.deleted);
    }
    if (message.gmpOrganization !== "") {
      writer.uint32(58).string(message.gmpOrganization);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Account {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.regionCode = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.deleted = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.gmpOrganization = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Account {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      regionCode: isSet(object.regionCode) ? globalThis.String(object.regionCode) : "",
      deleted: isSet(object.deleted) ? globalThis.Boolean(object.deleted) : false,
      gmpOrganization: isSet(object.gmpOrganization) ? globalThis.String(object.gmpOrganization) : "",
    };
  },

  toJSON(message: Account): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.regionCode !== "") {
      obj.regionCode = message.regionCode;
    }
    if (message.deleted !== false) {
      obj.deleted = message.deleted;
    }
    if (message.gmpOrganization !== "") {
      obj.gmpOrganization = message.gmpOrganization;
    }
    return obj;
  },

  create(base?: DeepPartial<Account>): Account {
    return Account.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Account>): Account {
    const message = createBaseAccount();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.displayName = object.displayName ?? "";
    message.regionCode = object.regionCode ?? "";
    message.deleted = object.deleted ?? false;
    message.gmpOrganization = object.gmpOrganization ?? "";
    return message;
  },
};

function createBaseProperty(): Property {
  return {
    name: "",
    propertyType: 0,
    createTime: undefined,
    updateTime: undefined,
    parent: "",
    displayName: "",
    industryCategory: 0,
    timeZone: "",
    currencyCode: "",
    serviceLevel: 0,
    deleteTime: undefined,
    expireTime: undefined,
    account: "",
  };
}

export const Property: MessageFns<Property> = {
  encode(message: Property, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.propertyType !== 0) {
      writer.uint32(112).int32(message.propertyType);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.parent !== "") {
      writer.uint32(18).string(message.parent);
    }
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.industryCategory !== 0) {
      writer.uint32(48).int32(message.industryCategory);
    }
    if (message.timeZone !== "") {
      writer.uint32(58).string(message.timeZone);
    }
    if (message.currencyCode !== "") {
      writer.uint32(66).string(message.currencyCode);
    }
    if (message.serviceLevel !== 0) {
      writer.uint32(80).int32(message.serviceLevel);
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deleteTime), writer.uint32(90).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(98).fork()).join();
    }
    if (message.account !== "") {
      writer.uint32(106).string(message.account);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Property {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProperty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.propertyType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.industryCategory = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.timeZone = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.serviceLevel = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.deleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.account = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Property {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      propertyType: isSet(object.propertyType) ? propertyTypeFromJSON(object.propertyType) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      industryCategory: isSet(object.industryCategory) ? industryCategoryFromJSON(object.industryCategory) : 0,
      timeZone: isSet(object.timeZone) ? globalThis.String(object.timeZone) : "",
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : "",
      serviceLevel: isSet(object.serviceLevel) ? serviceLevelFromJSON(object.serviceLevel) : 0,
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      account: isSet(object.account) ? globalThis.String(object.account) : "",
    };
  },

  toJSON(message: Property): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.propertyType !== 0) {
      obj.propertyType = propertyTypeToJSON(message.propertyType);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.industryCategory !== 0) {
      obj.industryCategory = industryCategoryToJSON(message.industryCategory);
    }
    if (message.timeZone !== "") {
      obj.timeZone = message.timeZone;
    }
    if (message.currencyCode !== "") {
      obj.currencyCode = message.currencyCode;
    }
    if (message.serviceLevel !== 0) {
      obj.serviceLevel = serviceLevelToJSON(message.serviceLevel);
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = message.deleteTime.toISOString();
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    return obj;
  },

  create(base?: DeepPartial<Property>): Property {
    return Property.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Property>): Property {
    const message = createBaseProperty();
    message.name = object.name ?? "";
    message.propertyType = object.propertyType ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.parent = object.parent ?? "";
    message.displayName = object.displayName ?? "";
    message.industryCategory = object.industryCategory ?? 0;
    message.timeZone = object.timeZone ?? "";
    message.currencyCode = object.currencyCode ?? "";
    message.serviceLevel = object.serviceLevel ?? 0;
    message.deleteTime = object.deleteTime ?? undefined;
    message.expireTime = object.expireTime ?? undefined;
    message.account = object.account ?? "";
    return message;
  },
};

function createBaseDataStream(): DataStream {
  return {
    webStreamData: undefined,
    androidAppStreamData: undefined,
    iosAppStreamData: undefined,
    name: "",
    type: 0,
    displayName: "",
    createTime: undefined,
    updateTime: undefined,
  };
}

export const DataStream: MessageFns<DataStream> = {
  encode(message: DataStream, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.webStreamData !== undefined) {
      DataStream_WebStreamData.encode(message.webStreamData, writer.uint32(50).fork()).join();
    }
    if (message.androidAppStreamData !== undefined) {
      DataStream_AndroidAppStreamData.encode(message.androidAppStreamData, writer.uint32(58).fork()).join();
    }
    if (message.iosAppStreamData !== undefined) {
      DataStream_IosAppStreamData.encode(message.iosAppStreamData, writer.uint32(66).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataStream {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6:
          if (tag !== 50) {
            break;
          }

          message.webStreamData = DataStream_WebStreamData.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.androidAppStreamData = DataStream_AndroidAppStreamData.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.iosAppStreamData = DataStream_IosAppStreamData.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream {
    return {
      webStreamData: isSet(object.webStreamData) ? DataStream_WebStreamData.fromJSON(object.webStreamData) : undefined,
      androidAppStreamData: isSet(object.androidAppStreamData)
        ? DataStream_AndroidAppStreamData.fromJSON(object.androidAppStreamData)
        : undefined,
      iosAppStreamData: isSet(object.iosAppStreamData)
        ? DataStream_IosAppStreamData.fromJSON(object.iosAppStreamData)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? dataStream_DataStreamTypeFromJSON(object.type) : 0,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: DataStream): unknown {
    const obj: any = {};
    if (message.webStreamData !== undefined) {
      obj.webStreamData = DataStream_WebStreamData.toJSON(message.webStreamData);
    }
    if (message.androidAppStreamData !== undefined) {
      obj.androidAppStreamData = DataStream_AndroidAppStreamData.toJSON(message.androidAppStreamData);
    }
    if (message.iosAppStreamData !== undefined) {
      obj.iosAppStreamData = DataStream_IosAppStreamData.toJSON(message.iosAppStreamData);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = dataStream_DataStreamTypeToJSON(message.type);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<DataStream>): DataStream {
    return DataStream.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataStream>): DataStream {
    const message = createBaseDataStream();
    message.webStreamData = (object.webStreamData !== undefined && object.webStreamData !== null)
      ? DataStream_WebStreamData.fromPartial(object.webStreamData)
      : undefined;
    message.androidAppStreamData = (object.androidAppStreamData !== undefined && object.androidAppStreamData !== null)
      ? DataStream_AndroidAppStreamData.fromPartial(object.androidAppStreamData)
      : undefined;
    message.iosAppStreamData = (object.iosAppStreamData !== undefined && object.iosAppStreamData !== null)
      ? DataStream_IosAppStreamData.fromPartial(object.iosAppStreamData)
      : undefined;
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    message.displayName = object.displayName ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseDataStream_WebStreamData(): DataStream_WebStreamData {
  return { measurementId: "", firebaseAppId: "", defaultUri: "" };
}

export const DataStream_WebStreamData: MessageFns<DataStream_WebStreamData> = {
  encode(message: DataStream_WebStreamData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.measurementId !== "") {
      writer.uint32(10).string(message.measurementId);
    }
    if (message.firebaseAppId !== "") {
      writer.uint32(18).string(message.firebaseAppId);
    }
    if (message.defaultUri !== "") {
      writer.uint32(26).string(message.defaultUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataStream_WebStreamData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream_WebStreamData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.measurementId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.firebaseAppId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.defaultUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream_WebStreamData {
    return {
      measurementId: isSet(object.measurementId) ? globalThis.String(object.measurementId) : "",
      firebaseAppId: isSet(object.firebaseAppId) ? globalThis.String(object.firebaseAppId) : "",
      defaultUri: isSet(object.defaultUri) ? globalThis.String(object.defaultUri) : "",
    };
  },

  toJSON(message: DataStream_WebStreamData): unknown {
    const obj: any = {};
    if (message.measurementId !== "") {
      obj.measurementId = message.measurementId;
    }
    if (message.firebaseAppId !== "") {
      obj.firebaseAppId = message.firebaseAppId;
    }
    if (message.defaultUri !== "") {
      obj.defaultUri = message.defaultUri;
    }
    return obj;
  },

  create(base?: DeepPartial<DataStream_WebStreamData>): DataStream_WebStreamData {
    return DataStream_WebStreamData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataStream_WebStreamData>): DataStream_WebStreamData {
    const message = createBaseDataStream_WebStreamData();
    message.measurementId = object.measurementId ?? "";
    message.firebaseAppId = object.firebaseAppId ?? "";
    message.defaultUri = object.defaultUri ?? "";
    return message;
  },
};

function createBaseDataStream_AndroidAppStreamData(): DataStream_AndroidAppStreamData {
  return { firebaseAppId: "", packageName: "" };
}

export const DataStream_AndroidAppStreamData: MessageFns<DataStream_AndroidAppStreamData> = {
  encode(message: DataStream_AndroidAppStreamData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.firebaseAppId !== "") {
      writer.uint32(10).string(message.firebaseAppId);
    }
    if (message.packageName !== "") {
      writer.uint32(18).string(message.packageName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataStream_AndroidAppStreamData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream_AndroidAppStreamData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firebaseAppId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.packageName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream_AndroidAppStreamData {
    return {
      firebaseAppId: isSet(object.firebaseAppId) ? globalThis.String(object.firebaseAppId) : "",
      packageName: isSet(object.packageName) ? globalThis.String(object.packageName) : "",
    };
  },

  toJSON(message: DataStream_AndroidAppStreamData): unknown {
    const obj: any = {};
    if (message.firebaseAppId !== "") {
      obj.firebaseAppId = message.firebaseAppId;
    }
    if (message.packageName !== "") {
      obj.packageName = message.packageName;
    }
    return obj;
  },

  create(base?: DeepPartial<DataStream_AndroidAppStreamData>): DataStream_AndroidAppStreamData {
    return DataStream_AndroidAppStreamData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataStream_AndroidAppStreamData>): DataStream_AndroidAppStreamData {
    const message = createBaseDataStream_AndroidAppStreamData();
    message.firebaseAppId = object.firebaseAppId ?? "";
    message.packageName = object.packageName ?? "";
    return message;
  },
};

function createBaseDataStream_IosAppStreamData(): DataStream_IosAppStreamData {
  return { firebaseAppId: "", bundleId: "" };
}

export const DataStream_IosAppStreamData: MessageFns<DataStream_IosAppStreamData> = {
  encode(message: DataStream_IosAppStreamData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.firebaseAppId !== "") {
      writer.uint32(10).string(message.firebaseAppId);
    }
    if (message.bundleId !== "") {
      writer.uint32(18).string(message.bundleId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataStream_IosAppStreamData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream_IosAppStreamData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firebaseAppId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.bundleId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream_IosAppStreamData {
    return {
      firebaseAppId: isSet(object.firebaseAppId) ? globalThis.String(object.firebaseAppId) : "",
      bundleId: isSet(object.bundleId) ? globalThis.String(object.bundleId) : "",
    };
  },

  toJSON(message: DataStream_IosAppStreamData): unknown {
    const obj: any = {};
    if (message.firebaseAppId !== "") {
      obj.firebaseAppId = message.firebaseAppId;
    }
    if (message.bundleId !== "") {
      obj.bundleId = message.bundleId;
    }
    return obj;
  },

  create(base?: DeepPartial<DataStream_IosAppStreamData>): DataStream_IosAppStreamData {
    return DataStream_IosAppStreamData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataStream_IosAppStreamData>): DataStream_IosAppStreamData {
    const message = createBaseDataStream_IosAppStreamData();
    message.firebaseAppId = object.firebaseAppId ?? "";
    message.bundleId = object.bundleId ?? "";
    return message;
  },
};

function createBaseFirebaseLink(): FirebaseLink {
  return { name: "", project: "", createTime: undefined };
}

export const FirebaseLink: MessageFns<FirebaseLink> = {
  encode(message: FirebaseLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FirebaseLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFirebaseLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FirebaseLink {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: FirebaseLink): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<FirebaseLink>): FirebaseLink {
    return FirebaseLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FirebaseLink>): FirebaseLink {
    const message = createBaseFirebaseLink();
    message.name = object.name ?? "";
    message.project = object.project ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBaseGlobalSiteTag(): GlobalSiteTag {
  return { name: "", snippet: "" };
}

export const GlobalSiteTag: MessageFns<GlobalSiteTag> = {
  encode(message: GlobalSiteTag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.snippet !== "") {
      writer.uint32(18).string(message.snippet);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GlobalSiteTag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGlobalSiteTag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.snippet = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GlobalSiteTag {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      snippet: isSet(object.snippet) ? globalThis.String(object.snippet) : "",
    };
  },

  toJSON(message: GlobalSiteTag): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.snippet !== "") {
      obj.snippet = message.snippet;
    }
    return obj;
  },

  create(base?: DeepPartial<GlobalSiteTag>): GlobalSiteTag {
    return GlobalSiteTag.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GlobalSiteTag>): GlobalSiteTag {
    const message = createBaseGlobalSiteTag();
    message.name = object.name ?? "";
    message.snippet = object.snippet ?? "";
    return message;
  },
};

function createBaseGoogleAdsLink(): GoogleAdsLink {
  return {
    name: "",
    customerId: "",
    canManageClients: false,
    adsPersonalizationEnabled: undefined,
    createTime: undefined,
    updateTime: undefined,
    creatorEmailAddress: "",
  };
}

export const GoogleAdsLink: MessageFns<GoogleAdsLink> = {
  encode(message: GoogleAdsLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.customerId !== "") {
      writer.uint32(26).string(message.customerId);
    }
    if (message.canManageClients !== false) {
      writer.uint32(32).bool(message.canManageClients);
    }
    if (message.adsPersonalizationEnabled !== undefined) {
      BoolValue.encode({ value: message.adsPersonalizationEnabled! }, writer.uint32(42).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(58).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(66).fork()).join();
    }
    if (message.creatorEmailAddress !== "") {
      writer.uint32(74).string(message.creatorEmailAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GoogleAdsLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGoogleAdsLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.canManageClients = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.adsPersonalizationEnabled = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.creatorEmailAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GoogleAdsLink {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      canManageClients: isSet(object.canManageClients) ? globalThis.Boolean(object.canManageClients) : false,
      adsPersonalizationEnabled: isSet(object.adsPersonalizationEnabled)
        ? Boolean(object.adsPersonalizationEnabled)
        : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      creatorEmailAddress: isSet(object.creatorEmailAddress) ? globalThis.String(object.creatorEmailAddress) : "",
    };
  },

  toJSON(message: GoogleAdsLink): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.canManageClients !== false) {
      obj.canManageClients = message.canManageClients;
    }
    if (message.adsPersonalizationEnabled !== undefined) {
      obj.adsPersonalizationEnabled = message.adsPersonalizationEnabled;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.creatorEmailAddress !== "") {
      obj.creatorEmailAddress = message.creatorEmailAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<GoogleAdsLink>): GoogleAdsLink {
    return GoogleAdsLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GoogleAdsLink>): GoogleAdsLink {
    const message = createBaseGoogleAdsLink();
    message.name = object.name ?? "";
    message.customerId = object.customerId ?? "";
    message.canManageClients = object.canManageClients ?? false;
    message.adsPersonalizationEnabled = object.adsPersonalizationEnabled ?? undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.creatorEmailAddress = object.creatorEmailAddress ?? "";
    return message;
  },
};

function createBaseDataSharingSettings(): DataSharingSettings {
  return {
    name: "",
    sharingWithGoogleSupportEnabled: false,
    sharingWithGoogleAssignedSalesEnabled: false,
    sharingWithGoogleAnySalesEnabled: false,
    sharingWithGoogleProductsEnabled: false,
    sharingWithOthersEnabled: false,
  };
}

export const DataSharingSettings: MessageFns<DataSharingSettings> = {
  encode(message: DataSharingSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.sharingWithGoogleSupportEnabled !== false) {
      writer.uint32(16).bool(message.sharingWithGoogleSupportEnabled);
    }
    if (message.sharingWithGoogleAssignedSalesEnabled !== false) {
      writer.uint32(24).bool(message.sharingWithGoogleAssignedSalesEnabled);
    }
    if (message.sharingWithGoogleAnySalesEnabled !== false) {
      writer.uint32(32).bool(message.sharingWithGoogleAnySalesEnabled);
    }
    if (message.sharingWithGoogleProductsEnabled !== false) {
      writer.uint32(40).bool(message.sharingWithGoogleProductsEnabled);
    }
    if (message.sharingWithOthersEnabled !== false) {
      writer.uint32(48).bool(message.sharingWithOthersEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataSharingSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataSharingSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sharingWithGoogleSupportEnabled = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.sharingWithGoogleAssignedSalesEnabled = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.sharingWithGoogleAnySalesEnabled = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.sharingWithGoogleProductsEnabled = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.sharingWithOthersEnabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataSharingSettings {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      sharingWithGoogleSupportEnabled: isSet(object.sharingWithGoogleSupportEnabled)
        ? globalThis.Boolean(object.sharingWithGoogleSupportEnabled)
        : false,
      sharingWithGoogleAssignedSalesEnabled: isSet(object.sharingWithGoogleAssignedSalesEnabled)
        ? globalThis.Boolean(object.sharingWithGoogleAssignedSalesEnabled)
        : false,
      sharingWithGoogleAnySalesEnabled: isSet(object.sharingWithGoogleAnySalesEnabled)
        ? globalThis.Boolean(object.sharingWithGoogleAnySalesEnabled)
        : false,
      sharingWithGoogleProductsEnabled: isSet(object.sharingWithGoogleProductsEnabled)
        ? globalThis.Boolean(object.sharingWithGoogleProductsEnabled)
        : false,
      sharingWithOthersEnabled: isSet(object.sharingWithOthersEnabled)
        ? globalThis.Boolean(object.sharingWithOthersEnabled)
        : false,
    };
  },

  toJSON(message: DataSharingSettings): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.sharingWithGoogleSupportEnabled !== false) {
      obj.sharingWithGoogleSupportEnabled = message.sharingWithGoogleSupportEnabled;
    }
    if (message.sharingWithGoogleAssignedSalesEnabled !== false) {
      obj.sharingWithGoogleAssignedSalesEnabled = message.sharingWithGoogleAssignedSalesEnabled;
    }
    if (message.sharingWithGoogleAnySalesEnabled !== false) {
      obj.sharingWithGoogleAnySalesEnabled = message.sharingWithGoogleAnySalesEnabled;
    }
    if (message.sharingWithGoogleProductsEnabled !== false) {
      obj.sharingWithGoogleProductsEnabled = message.sharingWithGoogleProductsEnabled;
    }
    if (message.sharingWithOthersEnabled !== false) {
      obj.sharingWithOthersEnabled = message.sharingWithOthersEnabled;
    }
    return obj;
  },

  create(base?: DeepPartial<DataSharingSettings>): DataSharingSettings {
    return DataSharingSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataSharingSettings>): DataSharingSettings {
    const message = createBaseDataSharingSettings();
    message.name = object.name ?? "";
    message.sharingWithGoogleSupportEnabled = object.sharingWithGoogleSupportEnabled ?? false;
    message.sharingWithGoogleAssignedSalesEnabled = object.sharingWithGoogleAssignedSalesEnabled ?? false;
    message.sharingWithGoogleAnySalesEnabled = object.sharingWithGoogleAnySalesEnabled ?? false;
    message.sharingWithGoogleProductsEnabled = object.sharingWithGoogleProductsEnabled ?? false;
    message.sharingWithOthersEnabled = object.sharingWithOthersEnabled ?? false;
    return message;
  },
};

function createBaseAccountSummary(): AccountSummary {
  return { name: "", account: "", displayName: "", propertySummaries: [] };
}

export const AccountSummary: MessageFns<AccountSummary> = {
  encode(message: AccountSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.account !== "") {
      writer.uint32(18).string(message.account);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    for (const v of message.propertySummaries) {
      PropertySummary.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.account = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.propertySummaries.push(PropertySummary.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountSummary {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      propertySummaries: globalThis.Array.isArray(object?.propertySummaries)
        ? object.propertySummaries.map((e: any) => PropertySummary.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AccountSummary): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.propertySummaries?.length) {
      obj.propertySummaries = message.propertySummaries.map((e) => PropertySummary.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AccountSummary>): AccountSummary {
    return AccountSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccountSummary>): AccountSummary {
    const message = createBaseAccountSummary();
    message.name = object.name ?? "";
    message.account = object.account ?? "";
    message.displayName = object.displayName ?? "";
    message.propertySummaries = object.propertySummaries?.map((e) => PropertySummary.fromPartial(e)) || [];
    return message;
  },
};

function createBasePropertySummary(): PropertySummary {
  return { property: "", displayName: "", propertyType: 0, parent: "" };
}

export const PropertySummary: MessageFns<PropertySummary> = {
  encode(message: PropertySummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.property !== "") {
      writer.uint32(10).string(message.property);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.propertyType !== 0) {
      writer.uint32(24).int32(message.propertyType);
    }
    if (message.parent !== "") {
      writer.uint32(34).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PropertySummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePropertySummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.property = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.propertyType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PropertySummary {
    return {
      property: isSet(object.property) ? globalThis.String(object.property) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      propertyType: isSet(object.propertyType) ? propertyTypeFromJSON(object.propertyType) : 0,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
    };
  },

  toJSON(message: PropertySummary): unknown {
    const obj: any = {};
    if (message.property !== "") {
      obj.property = message.property;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.propertyType !== 0) {
      obj.propertyType = propertyTypeToJSON(message.propertyType);
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<PropertySummary>): PropertySummary {
    return PropertySummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PropertySummary>): PropertySummary {
    const message = createBasePropertySummary();
    message.property = object.property ?? "";
    message.displayName = object.displayName ?? "";
    message.propertyType = object.propertyType ?? 0;
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseMeasurementProtocolSecret(): MeasurementProtocolSecret {
  return { name: "", displayName: "", secretValue: "" };
}

export const MeasurementProtocolSecret: MessageFns<MeasurementProtocolSecret> = {
  encode(message: MeasurementProtocolSecret, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.secretValue !== "") {
      writer.uint32(26).string(message.secretValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MeasurementProtocolSecret {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMeasurementProtocolSecret();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.secretValue = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MeasurementProtocolSecret {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      secretValue: isSet(object.secretValue) ? globalThis.String(object.secretValue) : "",
    };
  },

  toJSON(message: MeasurementProtocolSecret): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.secretValue !== "") {
      obj.secretValue = message.secretValue;
    }
    return obj;
  },

  create(base?: DeepPartial<MeasurementProtocolSecret>): MeasurementProtocolSecret {
    return MeasurementProtocolSecret.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MeasurementProtocolSecret>): MeasurementProtocolSecret {
    const message = createBaseMeasurementProtocolSecret();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.secretValue = object.secretValue ?? "";
    return message;
  },
};

function createBaseSKAdNetworkConversionValueSchema(): SKAdNetworkConversionValueSchema {
  return {
    name: "",
    postbackWindowOne: undefined,
    postbackWindowTwo: undefined,
    postbackWindowThree: undefined,
    applyConversionValues: false,
  };
}

export const SKAdNetworkConversionValueSchema: MessageFns<SKAdNetworkConversionValueSchema> = {
  encode(message: SKAdNetworkConversionValueSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.postbackWindowOne !== undefined) {
      PostbackWindow.encode(message.postbackWindowOne, writer.uint32(18).fork()).join();
    }
    if (message.postbackWindowTwo !== undefined) {
      PostbackWindow.encode(message.postbackWindowTwo, writer.uint32(26).fork()).join();
    }
    if (message.postbackWindowThree !== undefined) {
      PostbackWindow.encode(message.postbackWindowThree, writer.uint32(34).fork()).join();
    }
    if (message.applyConversionValues !== false) {
      writer.uint32(40).bool(message.applyConversionValues);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SKAdNetworkConversionValueSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSKAdNetworkConversionValueSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.postbackWindowOne = PostbackWindow.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.postbackWindowTwo = PostbackWindow.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.postbackWindowThree = PostbackWindow.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.applyConversionValues = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SKAdNetworkConversionValueSchema {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      postbackWindowOne: isSet(object.postbackWindowOne)
        ? PostbackWindow.fromJSON(object.postbackWindowOne)
        : undefined,
      postbackWindowTwo: isSet(object.postbackWindowTwo)
        ? PostbackWindow.fromJSON(object.postbackWindowTwo)
        : undefined,
      postbackWindowThree: isSet(object.postbackWindowThree)
        ? PostbackWindow.fromJSON(object.postbackWindowThree)
        : undefined,
      applyConversionValues: isSet(object.applyConversionValues)
        ? globalThis.Boolean(object.applyConversionValues)
        : false,
    };
  },

  toJSON(message: SKAdNetworkConversionValueSchema): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.postbackWindowOne !== undefined) {
      obj.postbackWindowOne = PostbackWindow.toJSON(message.postbackWindowOne);
    }
    if (message.postbackWindowTwo !== undefined) {
      obj.postbackWindowTwo = PostbackWindow.toJSON(message.postbackWindowTwo);
    }
    if (message.postbackWindowThree !== undefined) {
      obj.postbackWindowThree = PostbackWindow.toJSON(message.postbackWindowThree);
    }
    if (message.applyConversionValues !== false) {
      obj.applyConversionValues = message.applyConversionValues;
    }
    return obj;
  },

  create(base?: DeepPartial<SKAdNetworkConversionValueSchema>): SKAdNetworkConversionValueSchema {
    return SKAdNetworkConversionValueSchema.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SKAdNetworkConversionValueSchema>): SKAdNetworkConversionValueSchema {
    const message = createBaseSKAdNetworkConversionValueSchema();
    message.name = object.name ?? "";
    message.postbackWindowOne = (object.postbackWindowOne !== undefined && object.postbackWindowOne !== null)
      ? PostbackWindow.fromPartial(object.postbackWindowOne)
      : undefined;
    message.postbackWindowTwo = (object.postbackWindowTwo !== undefined && object.postbackWindowTwo !== null)
      ? PostbackWindow.fromPartial(object.postbackWindowTwo)
      : undefined;
    message.postbackWindowThree = (object.postbackWindowThree !== undefined && object.postbackWindowThree !== null)
      ? PostbackWindow.fromPartial(object.postbackWindowThree)
      : undefined;
    message.applyConversionValues = object.applyConversionValues ?? false;
    return message;
  },
};

function createBasePostbackWindow(): PostbackWindow {
  return { conversionValues: [], postbackWindowSettingsEnabled: false };
}

export const PostbackWindow: MessageFns<PostbackWindow> = {
  encode(message: PostbackWindow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.conversionValues) {
      ConversionValues.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.postbackWindowSettingsEnabled !== false) {
      writer.uint32(16).bool(message.postbackWindowSettingsEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostbackWindow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostbackWindow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversionValues.push(ConversionValues.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.postbackWindowSettingsEnabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostbackWindow {
    return {
      conversionValues: globalThis.Array.isArray(object?.conversionValues)
        ? object.conversionValues.map((e: any) => ConversionValues.fromJSON(e))
        : [],
      postbackWindowSettingsEnabled: isSet(object.postbackWindowSettingsEnabled)
        ? globalThis.Boolean(object.postbackWindowSettingsEnabled)
        : false,
    };
  },

  toJSON(message: PostbackWindow): unknown {
    const obj: any = {};
    if (message.conversionValues?.length) {
      obj.conversionValues = message.conversionValues.map((e) => ConversionValues.toJSON(e));
    }
    if (message.postbackWindowSettingsEnabled !== false) {
      obj.postbackWindowSettingsEnabled = message.postbackWindowSettingsEnabled;
    }
    return obj;
  },

  create(base?: DeepPartial<PostbackWindow>): PostbackWindow {
    return PostbackWindow.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PostbackWindow>): PostbackWindow {
    const message = createBasePostbackWindow();
    message.conversionValues = object.conversionValues?.map((e) => ConversionValues.fromPartial(e)) || [];
    message.postbackWindowSettingsEnabled = object.postbackWindowSettingsEnabled ?? false;
    return message;
  },
};

function createBaseConversionValues(): ConversionValues {
  return { displayName: "", fineValue: undefined, coarseValue: 0, eventMappings: [], lockEnabled: false };
}

export const ConversionValues: MessageFns<ConversionValues> = {
  encode(message: ConversionValues, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    if (message.fineValue !== undefined) {
      writer.uint32(16).int32(message.fineValue);
    }
    if (message.coarseValue !== 0) {
      writer.uint32(24).int32(message.coarseValue);
    }
    for (const v of message.eventMappings) {
      EventMapping.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.lockEnabled !== false) {
      writer.uint32(40).bool(message.lockEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConversionValues {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversionValues();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.fineValue = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.coarseValue = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.eventMappings.push(EventMapping.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.lockEnabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConversionValues {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      fineValue: isSet(object.fineValue) ? globalThis.Number(object.fineValue) : undefined,
      coarseValue: isSet(object.coarseValue) ? coarseValueFromJSON(object.coarseValue) : 0,
      eventMappings: globalThis.Array.isArray(object?.eventMappings)
        ? object.eventMappings.map((e: any) => EventMapping.fromJSON(e))
        : [],
      lockEnabled: isSet(object.lockEnabled) ? globalThis.Boolean(object.lockEnabled) : false,
    };
  },

  toJSON(message: ConversionValues): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.fineValue !== undefined) {
      obj.fineValue = Math.round(message.fineValue);
    }
    if (message.coarseValue !== 0) {
      obj.coarseValue = coarseValueToJSON(message.coarseValue);
    }
    if (message.eventMappings?.length) {
      obj.eventMappings = message.eventMappings.map((e) => EventMapping.toJSON(e));
    }
    if (message.lockEnabled !== false) {
      obj.lockEnabled = message.lockEnabled;
    }
    return obj;
  },

  create(base?: DeepPartial<ConversionValues>): ConversionValues {
    return ConversionValues.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConversionValues>): ConversionValues {
    const message = createBaseConversionValues();
    message.displayName = object.displayName ?? "";
    message.fineValue = object.fineValue ?? undefined;
    message.coarseValue = object.coarseValue ?? 0;
    message.eventMappings = object.eventMappings?.map((e) => EventMapping.fromPartial(e)) || [];
    message.lockEnabled = object.lockEnabled ?? false;
    return message;
  },
};

function createBaseEventMapping(): EventMapping {
  return {
    eventName: "",
    minEventCount: undefined,
    maxEventCount: undefined,
    minEventValue: undefined,
    maxEventValue: undefined,
  };
}

export const EventMapping: MessageFns<EventMapping> = {
  encode(message: EventMapping, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventName !== "") {
      writer.uint32(10).string(message.eventName);
    }
    if (message.minEventCount !== undefined) {
      writer.uint32(16).int64(message.minEventCount.toString());
    }
    if (message.maxEventCount !== undefined) {
      writer.uint32(24).int64(message.maxEventCount.toString());
    }
    if (message.minEventValue !== undefined) {
      writer.uint32(33).double(message.minEventValue);
    }
    if (message.maxEventValue !== undefined) {
      writer.uint32(41).double(message.maxEventValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventMapping {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventMapping();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.minEventCount = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.maxEventCount = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.minEventValue = reader.double();
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.maxEventValue = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventMapping {
    return {
      eventName: isSet(object.eventName) ? globalThis.String(object.eventName) : "",
      minEventCount: isSet(object.minEventCount) ? Long.fromValue(object.minEventCount) : undefined,
      maxEventCount: isSet(object.maxEventCount) ? Long.fromValue(object.maxEventCount) : undefined,
      minEventValue: isSet(object.minEventValue) ? globalThis.Number(object.minEventValue) : undefined,
      maxEventValue: isSet(object.maxEventValue) ? globalThis.Number(object.maxEventValue) : undefined,
    };
  },

  toJSON(message: EventMapping): unknown {
    const obj: any = {};
    if (message.eventName !== "") {
      obj.eventName = message.eventName;
    }
    if (message.minEventCount !== undefined) {
      obj.minEventCount = (message.minEventCount || Long.ZERO).toString();
    }
    if (message.maxEventCount !== undefined) {
      obj.maxEventCount = (message.maxEventCount || Long.ZERO).toString();
    }
    if (message.minEventValue !== undefined) {
      obj.minEventValue = message.minEventValue;
    }
    if (message.maxEventValue !== undefined) {
      obj.maxEventValue = message.maxEventValue;
    }
    return obj;
  },

  create(base?: DeepPartial<EventMapping>): EventMapping {
    return EventMapping.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventMapping>): EventMapping {
    const message = createBaseEventMapping();
    message.eventName = object.eventName ?? "";
    message.minEventCount = (object.minEventCount !== undefined && object.minEventCount !== null)
      ? Long.fromValue(object.minEventCount)
      : undefined;
    message.maxEventCount = (object.maxEventCount !== undefined && object.maxEventCount !== null)
      ? Long.fromValue(object.maxEventCount)
      : undefined;
    message.minEventValue = object.minEventValue ?? undefined;
    message.maxEventValue = object.maxEventValue ?? undefined;
    return message;
  },
};

function createBaseChangeHistoryEvent(): ChangeHistoryEvent {
  return { id: "", changeTime: undefined, actorType: 0, userActorEmail: "", changesFiltered: false, changes: [] };
}

export const ChangeHistoryEvent: MessageFns<ChangeHistoryEvent> = {
  encode(message: ChangeHistoryEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.changeTime !== undefined) {
      Timestamp.encode(toTimestamp(message.changeTime), writer.uint32(18).fork()).join();
    }
    if (message.actorType !== 0) {
      writer.uint32(24).int32(message.actorType);
    }
    if (message.userActorEmail !== "") {
      writer.uint32(34).string(message.userActorEmail);
    }
    if (message.changesFiltered !== false) {
      writer.uint32(40).bool(message.changesFiltered);
    }
    for (const v of message.changes) {
      ChangeHistoryChange.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangeHistoryEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeHistoryEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.changeTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.actorType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.userActorEmail = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.changesFiltered = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.changes.push(ChangeHistoryChange.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangeHistoryEvent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      changeTime: isSet(object.changeTime) ? fromJsonTimestamp(object.changeTime) : undefined,
      actorType: isSet(object.actorType) ? actorTypeFromJSON(object.actorType) : 0,
      userActorEmail: isSet(object.userActorEmail) ? globalThis.String(object.userActorEmail) : "",
      changesFiltered: isSet(object.changesFiltered) ? globalThis.Boolean(object.changesFiltered) : false,
      changes: globalThis.Array.isArray(object?.changes)
        ? object.changes.map((e: any) => ChangeHistoryChange.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ChangeHistoryEvent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.changeTime !== undefined) {
      obj.changeTime = message.changeTime.toISOString();
    }
    if (message.actorType !== 0) {
      obj.actorType = actorTypeToJSON(message.actorType);
    }
    if (message.userActorEmail !== "") {
      obj.userActorEmail = message.userActorEmail;
    }
    if (message.changesFiltered !== false) {
      obj.changesFiltered = message.changesFiltered;
    }
    if (message.changes?.length) {
      obj.changes = message.changes.map((e) => ChangeHistoryChange.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ChangeHistoryEvent>): ChangeHistoryEvent {
    return ChangeHistoryEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChangeHistoryEvent>): ChangeHistoryEvent {
    const message = createBaseChangeHistoryEvent();
    message.id = object.id ?? "";
    message.changeTime = object.changeTime ?? undefined;
    message.actorType = object.actorType ?? 0;
    message.userActorEmail = object.userActorEmail ?? "";
    message.changesFiltered = object.changesFiltered ?? false;
    message.changes = object.changes?.map((e) => ChangeHistoryChange.fromPartial(e)) || [];
    return message;
  },
};

function createBaseChangeHistoryChange(): ChangeHistoryChange {
  return { resource: "", action: 0, resourceBeforeChange: undefined, resourceAfterChange: undefined };
}

export const ChangeHistoryChange: MessageFns<ChangeHistoryChange> = {
  encode(message: ChangeHistoryChange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resource !== "") {
      writer.uint32(10).string(message.resource);
    }
    if (message.action !== 0) {
      writer.uint32(16).int32(message.action);
    }
    if (message.resourceBeforeChange !== undefined) {
      ChangeHistoryChange_ChangeHistoryResource.encode(message.resourceBeforeChange, writer.uint32(26).fork()).join();
    }
    if (message.resourceAfterChange !== undefined) {
      ChangeHistoryChange_ChangeHistoryResource.encode(message.resourceAfterChange, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangeHistoryChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeHistoryChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resource = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resourceBeforeChange = ChangeHistoryChange_ChangeHistoryResource.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.resourceAfterChange = ChangeHistoryChange_ChangeHistoryResource.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangeHistoryChange {
    return {
      resource: isSet(object.resource) ? globalThis.String(object.resource) : "",
      action: isSet(object.action) ? actionTypeFromJSON(object.action) : 0,
      resourceBeforeChange: isSet(object.resourceBeforeChange)
        ? ChangeHistoryChange_ChangeHistoryResource.fromJSON(object.resourceBeforeChange)
        : undefined,
      resourceAfterChange: isSet(object.resourceAfterChange)
        ? ChangeHistoryChange_ChangeHistoryResource.fromJSON(object.resourceAfterChange)
        : undefined,
    };
  },

  toJSON(message: ChangeHistoryChange): unknown {
    const obj: any = {};
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    if (message.action !== 0) {
      obj.action = actionTypeToJSON(message.action);
    }
    if (message.resourceBeforeChange !== undefined) {
      obj.resourceBeforeChange = ChangeHistoryChange_ChangeHistoryResource.toJSON(message.resourceBeforeChange);
    }
    if (message.resourceAfterChange !== undefined) {
      obj.resourceAfterChange = ChangeHistoryChange_ChangeHistoryResource.toJSON(message.resourceAfterChange);
    }
    return obj;
  },

  create(base?: DeepPartial<ChangeHistoryChange>): ChangeHistoryChange {
    return ChangeHistoryChange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChangeHistoryChange>): ChangeHistoryChange {
    const message = createBaseChangeHistoryChange();
    message.resource = object.resource ?? "";
    message.action = object.action ?? 0;
    message.resourceBeforeChange = (object.resourceBeforeChange !== undefined && object.resourceBeforeChange !== null)
      ? ChangeHistoryChange_ChangeHistoryResource.fromPartial(object.resourceBeforeChange)
      : undefined;
    message.resourceAfterChange = (object.resourceAfterChange !== undefined && object.resourceAfterChange !== null)
      ? ChangeHistoryChange_ChangeHistoryResource.fromPartial(object.resourceAfterChange)
      : undefined;
    return message;
  },
};

function createBaseChangeHistoryChange_ChangeHistoryResource(): ChangeHistoryChange_ChangeHistoryResource {
  return {
    account: undefined,
    property: undefined,
    firebaseLink: undefined,
    googleAdsLink: undefined,
    googleSignalsSettings: undefined,
    displayVideo360AdvertiserLink: undefined,
    displayVideo360AdvertiserLinkProposal: undefined,
    conversionEvent: undefined,
    measurementProtocolSecret: undefined,
    customDimension: undefined,
    customMetric: undefined,
    dataRetentionSettings: undefined,
    searchAds360Link: undefined,
    dataStream: undefined,
    attributionSettings: undefined,
    expandedDataSet: undefined,
    channelGroup: undefined,
    bigqueryLink: undefined,
    enhancedMeasurementSettings: undefined,
    dataRedactionSettings: undefined,
    skadnetworkConversionValueSchema: undefined,
    adsenseLink: undefined,
    audience: undefined,
    eventCreateRule: undefined,
    calculatedMetric: undefined,
  };
}

export const ChangeHistoryChange_ChangeHistoryResource: MessageFns<ChangeHistoryChange_ChangeHistoryResource> = {
  encode(message: ChangeHistoryChange_ChangeHistoryResource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== undefined) {
      Account.encode(message.account, writer.uint32(10).fork()).join();
    }
    if (message.property !== undefined) {
      Property.encode(message.property, writer.uint32(18).fork()).join();
    }
    if (message.firebaseLink !== undefined) {
      FirebaseLink.encode(message.firebaseLink, writer.uint32(50).fork()).join();
    }
    if (message.googleAdsLink !== undefined) {
      GoogleAdsLink.encode(message.googleAdsLink, writer.uint32(58).fork()).join();
    }
    if (message.googleSignalsSettings !== undefined) {
      GoogleSignalsSettings.encode(message.googleSignalsSettings, writer.uint32(66).fork()).join();
    }
    if (message.displayVideo360AdvertiserLink !== undefined) {
      DisplayVideo360AdvertiserLink.encode(message.displayVideo360AdvertiserLink, writer.uint32(74).fork()).join();
    }
    if (message.displayVideo360AdvertiserLinkProposal !== undefined) {
      DisplayVideo360AdvertiserLinkProposal.encode(
        message.displayVideo360AdvertiserLinkProposal,
        writer.uint32(82).fork(),
      ).join();
    }
    if (message.conversionEvent !== undefined) {
      ConversionEvent.encode(message.conversionEvent, writer.uint32(90).fork()).join();
    }
    if (message.measurementProtocolSecret !== undefined) {
      MeasurementProtocolSecret.encode(message.measurementProtocolSecret, writer.uint32(98).fork()).join();
    }
    if (message.customDimension !== undefined) {
      CustomDimension.encode(message.customDimension, writer.uint32(106).fork()).join();
    }
    if (message.customMetric !== undefined) {
      CustomMetric.encode(message.customMetric, writer.uint32(114).fork()).join();
    }
    if (message.dataRetentionSettings !== undefined) {
      DataRetentionSettings.encode(message.dataRetentionSettings, writer.uint32(122).fork()).join();
    }
    if (message.searchAds360Link !== undefined) {
      SearchAds360Link.encode(message.searchAds360Link, writer.uint32(130).fork()).join();
    }
    if (message.dataStream !== undefined) {
      DataStream.encode(message.dataStream, writer.uint32(146).fork()).join();
    }
    if (message.attributionSettings !== undefined) {
      AttributionSettings.encode(message.attributionSettings, writer.uint32(162).fork()).join();
    }
    if (message.expandedDataSet !== undefined) {
      ExpandedDataSet.encode(message.expandedDataSet, writer.uint32(170).fork()).join();
    }
    if (message.channelGroup !== undefined) {
      ChannelGroup.encode(message.channelGroup, writer.uint32(178).fork()).join();
    }
    if (message.bigqueryLink !== undefined) {
      BigQueryLink.encode(message.bigqueryLink, writer.uint32(186).fork()).join();
    }
    if (message.enhancedMeasurementSettings !== undefined) {
      EnhancedMeasurementSettings.encode(message.enhancedMeasurementSettings, writer.uint32(194).fork()).join();
    }
    if (message.dataRedactionSettings !== undefined) {
      DataRedactionSettings.encode(message.dataRedactionSettings, writer.uint32(202).fork()).join();
    }
    if (message.skadnetworkConversionValueSchema !== undefined) {
      SKAdNetworkConversionValueSchema.encode(message.skadnetworkConversionValueSchema, writer.uint32(210).fork())
        .join();
    }
    if (message.adsenseLink !== undefined) {
      AdSenseLink.encode(message.adsenseLink, writer.uint32(218).fork()).join();
    }
    if (message.audience !== undefined) {
      Audience.encode(message.audience, writer.uint32(226).fork()).join();
    }
    if (message.eventCreateRule !== undefined) {
      EventCreateRule.encode(message.eventCreateRule, writer.uint32(234).fork()).join();
    }
    if (message.calculatedMetric !== undefined) {
      CalculatedMetric.encode(message.calculatedMetric, writer.uint32(250).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangeHistoryChange_ChangeHistoryResource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeHistoryChange_ChangeHistoryResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.account = Account.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.property = Property.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.firebaseLink = FirebaseLink.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.googleAdsLink = GoogleAdsLink.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.googleSignalsSettings = GoogleSignalsSettings.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.displayVideo360AdvertiserLink = DisplayVideo360AdvertiserLink.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.displayVideo360AdvertiserLinkProposal = DisplayVideo360AdvertiserLinkProposal.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.conversionEvent = ConversionEvent.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.measurementProtocolSecret = MeasurementProtocolSecret.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.customDimension = CustomDimension.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.customMetric = CustomMetric.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.dataRetentionSettings = DataRetentionSettings.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.searchAds360Link = SearchAds360Link.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.dataStream = DataStream.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.attributionSettings = AttributionSettings.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.expandedDataSet = ExpandedDataSet.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.channelGroup = ChannelGroup.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.bigqueryLink = BigQueryLink.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.enhancedMeasurementSettings = EnhancedMeasurementSettings.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.dataRedactionSettings = DataRedactionSettings.decode(reader, reader.uint32());
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.skadnetworkConversionValueSchema = SKAdNetworkConversionValueSchema.decode(reader, reader.uint32());
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.adsenseLink = AdSenseLink.decode(reader, reader.uint32());
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.audience = Audience.decode(reader, reader.uint32());
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.eventCreateRule = EventCreateRule.decode(reader, reader.uint32());
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.calculatedMetric = CalculatedMetric.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangeHistoryChange_ChangeHistoryResource {
    return {
      account: isSet(object.account) ? Account.fromJSON(object.account) : undefined,
      property: isSet(object.property) ? Property.fromJSON(object.property) : undefined,
      firebaseLink: isSet(object.firebaseLink) ? FirebaseLink.fromJSON(object.firebaseLink) : undefined,
      googleAdsLink: isSet(object.googleAdsLink) ? GoogleAdsLink.fromJSON(object.googleAdsLink) : undefined,
      googleSignalsSettings: isSet(object.googleSignalsSettings)
        ? GoogleSignalsSettings.fromJSON(object.googleSignalsSettings)
        : undefined,
      displayVideo360AdvertiserLink: isSet(object.displayVideo360AdvertiserLink)
        ? DisplayVideo360AdvertiserLink.fromJSON(object.displayVideo360AdvertiserLink)
        : undefined,
      displayVideo360AdvertiserLinkProposal: isSet(object.displayVideo360AdvertiserLinkProposal)
        ? DisplayVideo360AdvertiserLinkProposal.fromJSON(object.displayVideo360AdvertiserLinkProposal)
        : undefined,
      conversionEvent: isSet(object.conversionEvent) ? ConversionEvent.fromJSON(object.conversionEvent) : undefined,
      measurementProtocolSecret: isSet(object.measurementProtocolSecret)
        ? MeasurementProtocolSecret.fromJSON(object.measurementProtocolSecret)
        : undefined,
      customDimension: isSet(object.customDimension) ? CustomDimension.fromJSON(object.customDimension) : undefined,
      customMetric: isSet(object.customMetric) ? CustomMetric.fromJSON(object.customMetric) : undefined,
      dataRetentionSettings: isSet(object.dataRetentionSettings)
        ? DataRetentionSettings.fromJSON(object.dataRetentionSettings)
        : undefined,
      searchAds360Link: isSet(object.searchAds360Link) ? SearchAds360Link.fromJSON(object.searchAds360Link) : undefined,
      dataStream: isSet(object.dataStream) ? DataStream.fromJSON(object.dataStream) : undefined,
      attributionSettings: isSet(object.attributionSettings)
        ? AttributionSettings.fromJSON(object.attributionSettings)
        : undefined,
      expandedDataSet: isSet(object.expandedDataSet) ? ExpandedDataSet.fromJSON(object.expandedDataSet) : undefined,
      channelGroup: isSet(object.channelGroup) ? ChannelGroup.fromJSON(object.channelGroup) : undefined,
      bigqueryLink: isSet(object.bigqueryLink) ? BigQueryLink.fromJSON(object.bigqueryLink) : undefined,
      enhancedMeasurementSettings: isSet(object.enhancedMeasurementSettings)
        ? EnhancedMeasurementSettings.fromJSON(object.enhancedMeasurementSettings)
        : undefined,
      dataRedactionSettings: isSet(object.dataRedactionSettings)
        ? DataRedactionSettings.fromJSON(object.dataRedactionSettings)
        : undefined,
      skadnetworkConversionValueSchema: isSet(object.skadnetworkConversionValueSchema)
        ? SKAdNetworkConversionValueSchema.fromJSON(object.skadnetworkConversionValueSchema)
        : undefined,
      adsenseLink: isSet(object.adsenseLink) ? AdSenseLink.fromJSON(object.adsenseLink) : undefined,
      audience: isSet(object.audience) ? Audience.fromJSON(object.audience) : undefined,
      eventCreateRule: isSet(object.eventCreateRule) ? EventCreateRule.fromJSON(object.eventCreateRule) : undefined,
      calculatedMetric: isSet(object.calculatedMetric) ? CalculatedMetric.fromJSON(object.calculatedMetric) : undefined,
    };
  },

  toJSON(message: ChangeHistoryChange_ChangeHistoryResource): unknown {
    const obj: any = {};
    if (message.account !== undefined) {
      obj.account = Account.toJSON(message.account);
    }
    if (message.property !== undefined) {
      obj.property = Property.toJSON(message.property);
    }
    if (message.firebaseLink !== undefined) {
      obj.firebaseLink = FirebaseLink.toJSON(message.firebaseLink);
    }
    if (message.googleAdsLink !== undefined) {
      obj.googleAdsLink = GoogleAdsLink.toJSON(message.googleAdsLink);
    }
    if (message.googleSignalsSettings !== undefined) {
      obj.googleSignalsSettings = GoogleSignalsSettings.toJSON(message.googleSignalsSettings);
    }
    if (message.displayVideo360AdvertiserLink !== undefined) {
      obj.displayVideo360AdvertiserLink = DisplayVideo360AdvertiserLink.toJSON(message.displayVideo360AdvertiserLink);
    }
    if (message.displayVideo360AdvertiserLinkProposal !== undefined) {
      obj.displayVideo360AdvertiserLinkProposal = DisplayVideo360AdvertiserLinkProposal.toJSON(
        message.displayVideo360AdvertiserLinkProposal,
      );
    }
    if (message.conversionEvent !== undefined) {
      obj.conversionEvent = ConversionEvent.toJSON(message.conversionEvent);
    }
    if (message.measurementProtocolSecret !== undefined) {
      obj.measurementProtocolSecret = MeasurementProtocolSecret.toJSON(message.measurementProtocolSecret);
    }
    if (message.customDimension !== undefined) {
      obj.customDimension = CustomDimension.toJSON(message.customDimension);
    }
    if (message.customMetric !== undefined) {
      obj.customMetric = CustomMetric.toJSON(message.customMetric);
    }
    if (message.dataRetentionSettings !== undefined) {
      obj.dataRetentionSettings = DataRetentionSettings.toJSON(message.dataRetentionSettings);
    }
    if (message.searchAds360Link !== undefined) {
      obj.searchAds360Link = SearchAds360Link.toJSON(message.searchAds360Link);
    }
    if (message.dataStream !== undefined) {
      obj.dataStream = DataStream.toJSON(message.dataStream);
    }
    if (message.attributionSettings !== undefined) {
      obj.attributionSettings = AttributionSettings.toJSON(message.attributionSettings);
    }
    if (message.expandedDataSet !== undefined) {
      obj.expandedDataSet = ExpandedDataSet.toJSON(message.expandedDataSet);
    }
    if (message.channelGroup !== undefined) {
      obj.channelGroup = ChannelGroup.toJSON(message.channelGroup);
    }
    if (message.bigqueryLink !== undefined) {
      obj.bigqueryLink = BigQueryLink.toJSON(message.bigqueryLink);
    }
    if (message.enhancedMeasurementSettings !== undefined) {
      obj.enhancedMeasurementSettings = EnhancedMeasurementSettings.toJSON(message.enhancedMeasurementSettings);
    }
    if (message.dataRedactionSettings !== undefined) {
      obj.dataRedactionSettings = DataRedactionSettings.toJSON(message.dataRedactionSettings);
    }
    if (message.skadnetworkConversionValueSchema !== undefined) {
      obj.skadnetworkConversionValueSchema = SKAdNetworkConversionValueSchema.toJSON(
        message.skadnetworkConversionValueSchema,
      );
    }
    if (message.adsenseLink !== undefined) {
      obj.adsenseLink = AdSenseLink.toJSON(message.adsenseLink);
    }
    if (message.audience !== undefined) {
      obj.audience = Audience.toJSON(message.audience);
    }
    if (message.eventCreateRule !== undefined) {
      obj.eventCreateRule = EventCreateRule.toJSON(message.eventCreateRule);
    }
    if (message.calculatedMetric !== undefined) {
      obj.calculatedMetric = CalculatedMetric.toJSON(message.calculatedMetric);
    }
    return obj;
  },

  create(base?: DeepPartial<ChangeHistoryChange_ChangeHistoryResource>): ChangeHistoryChange_ChangeHistoryResource {
    return ChangeHistoryChange_ChangeHistoryResource.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ChangeHistoryChange_ChangeHistoryResource>,
  ): ChangeHistoryChange_ChangeHistoryResource {
    const message = createBaseChangeHistoryChange_ChangeHistoryResource();
    message.account = (object.account !== undefined && object.account !== null)
      ? Account.fromPartial(object.account)
      : undefined;
    message.property = (object.property !== undefined && object.property !== null)
      ? Property.fromPartial(object.property)
      : undefined;
    message.firebaseLink = (object.firebaseLink !== undefined && object.firebaseLink !== null)
      ? FirebaseLink.fromPartial(object.firebaseLink)
      : undefined;
    message.googleAdsLink = (object.googleAdsLink !== undefined && object.googleAdsLink !== null)
      ? GoogleAdsLink.fromPartial(object.googleAdsLink)
      : undefined;
    message.googleSignalsSettings =
      (object.googleSignalsSettings !== undefined && object.googleSignalsSettings !== null)
        ? GoogleSignalsSettings.fromPartial(object.googleSignalsSettings)
        : undefined;
    message.displayVideo360AdvertiserLink =
      (object.displayVideo360AdvertiserLink !== undefined && object.displayVideo360AdvertiserLink !== null)
        ? DisplayVideo360AdvertiserLink.fromPartial(object.displayVideo360AdvertiserLink)
        : undefined;
    message.displayVideo360AdvertiserLinkProposal =
      (object.displayVideo360AdvertiserLinkProposal !== undefined &&
          object.displayVideo360AdvertiserLinkProposal !== null)
        ? DisplayVideo360AdvertiserLinkProposal.fromPartial(object.displayVideo360AdvertiserLinkProposal)
        : undefined;
    message.conversionEvent = (object.conversionEvent !== undefined && object.conversionEvent !== null)
      ? ConversionEvent.fromPartial(object.conversionEvent)
      : undefined;
    message.measurementProtocolSecret =
      (object.measurementProtocolSecret !== undefined && object.measurementProtocolSecret !== null)
        ? MeasurementProtocolSecret.fromPartial(object.measurementProtocolSecret)
        : undefined;
    message.customDimension = (object.customDimension !== undefined && object.customDimension !== null)
      ? CustomDimension.fromPartial(object.customDimension)
      : undefined;
    message.customMetric = (object.customMetric !== undefined && object.customMetric !== null)
      ? CustomMetric.fromPartial(object.customMetric)
      : undefined;
    message.dataRetentionSettings =
      (object.dataRetentionSettings !== undefined && object.dataRetentionSettings !== null)
        ? DataRetentionSettings.fromPartial(object.dataRetentionSettings)
        : undefined;
    message.searchAds360Link = (object.searchAds360Link !== undefined && object.searchAds360Link !== null)
      ? SearchAds360Link.fromPartial(object.searchAds360Link)
      : undefined;
    message.dataStream = (object.dataStream !== undefined && object.dataStream !== null)
      ? DataStream.fromPartial(object.dataStream)
      : undefined;
    message.attributionSettings = (object.attributionSettings !== undefined && object.attributionSettings !== null)
      ? AttributionSettings.fromPartial(object.attributionSettings)
      : undefined;
    message.expandedDataSet = (object.expandedDataSet !== undefined && object.expandedDataSet !== null)
      ? ExpandedDataSet.fromPartial(object.expandedDataSet)
      : undefined;
    message.channelGroup = (object.channelGroup !== undefined && object.channelGroup !== null)
      ? ChannelGroup.fromPartial(object.channelGroup)
      : undefined;
    message.bigqueryLink = (object.bigqueryLink !== undefined && object.bigqueryLink !== null)
      ? BigQueryLink.fromPartial(object.bigqueryLink)
      : undefined;
    message.enhancedMeasurementSettings =
      (object.enhancedMeasurementSettings !== undefined && object.enhancedMeasurementSettings !== null)
        ? EnhancedMeasurementSettings.fromPartial(object.enhancedMeasurementSettings)
        : undefined;
    message.dataRedactionSettings =
      (object.dataRedactionSettings !== undefined && object.dataRedactionSettings !== null)
        ? DataRedactionSettings.fromPartial(object.dataRedactionSettings)
        : undefined;
    message.skadnetworkConversionValueSchema =
      (object.skadnetworkConversionValueSchema !== undefined && object.skadnetworkConversionValueSchema !== null)
        ? SKAdNetworkConversionValueSchema.fromPartial(object.skadnetworkConversionValueSchema)
        : undefined;
    message.adsenseLink = (object.adsenseLink !== undefined && object.adsenseLink !== null)
      ? AdSenseLink.fromPartial(object.adsenseLink)
      : undefined;
    message.audience = (object.audience !== undefined && object.audience !== null)
      ? Audience.fromPartial(object.audience)
      : undefined;
    message.eventCreateRule = (object.eventCreateRule !== undefined && object.eventCreateRule !== null)
      ? EventCreateRule.fromPartial(object.eventCreateRule)
      : undefined;
    message.calculatedMetric = (object.calculatedMetric !== undefined && object.calculatedMetric !== null)
      ? CalculatedMetric.fromPartial(object.calculatedMetric)
      : undefined;
    return message;
  },
};

function createBaseDisplayVideo360AdvertiserLink(): DisplayVideo360AdvertiserLink {
  return {
    name: "",
    advertiserId: "",
    advertiserDisplayName: "",
    adsPersonalizationEnabled: undefined,
    campaignDataSharingEnabled: undefined,
    costDataSharingEnabled: undefined,
  };
}

export const DisplayVideo360AdvertiserLink: MessageFns<DisplayVideo360AdvertiserLink> = {
  encode(message: DisplayVideo360AdvertiserLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.advertiserId !== "") {
      writer.uint32(18).string(message.advertiserId);
    }
    if (message.advertiserDisplayName !== "") {
      writer.uint32(26).string(message.advertiserDisplayName);
    }
    if (message.adsPersonalizationEnabled !== undefined) {
      BoolValue.encode({ value: message.adsPersonalizationEnabled! }, writer.uint32(34).fork()).join();
    }
    if (message.campaignDataSharingEnabled !== undefined) {
      BoolValue.encode({ value: message.campaignDataSharingEnabled! }, writer.uint32(42).fork()).join();
    }
    if (message.costDataSharingEnabled !== undefined) {
      BoolValue.encode({ value: message.costDataSharingEnabled! }, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisplayVideo360AdvertiserLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisplayVideo360AdvertiserLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.advertiserId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.advertiserDisplayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.adsPersonalizationEnabled = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.campaignDataSharingEnabled = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.costDataSharingEnabled = BoolValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisplayVideo360AdvertiserLink {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      advertiserId: isSet(object.advertiserId) ? globalThis.String(object.advertiserId) : "",
      advertiserDisplayName: isSet(object.advertiserDisplayName) ? globalThis.String(object.advertiserDisplayName) : "",
      adsPersonalizationEnabled: isSet(object.adsPersonalizationEnabled)
        ? Boolean(object.adsPersonalizationEnabled)
        : undefined,
      campaignDataSharingEnabled: isSet(object.campaignDataSharingEnabled)
        ? Boolean(object.campaignDataSharingEnabled)
        : undefined,
      costDataSharingEnabled: isSet(object.costDataSharingEnabled) ? Boolean(object.costDataSharingEnabled) : undefined,
    };
  },

  toJSON(message: DisplayVideo360AdvertiserLink): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.advertiserId !== "") {
      obj.advertiserId = message.advertiserId;
    }
    if (message.advertiserDisplayName !== "") {
      obj.advertiserDisplayName = message.advertiserDisplayName;
    }
    if (message.adsPersonalizationEnabled !== undefined) {
      obj.adsPersonalizationEnabled = message.adsPersonalizationEnabled;
    }
    if (message.campaignDataSharingEnabled !== undefined) {
      obj.campaignDataSharingEnabled = message.campaignDataSharingEnabled;
    }
    if (message.costDataSharingEnabled !== undefined) {
      obj.costDataSharingEnabled = message.costDataSharingEnabled;
    }
    return obj;
  },

  create(base?: DeepPartial<DisplayVideo360AdvertiserLink>): DisplayVideo360AdvertiserLink {
    return DisplayVideo360AdvertiserLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DisplayVideo360AdvertiserLink>): DisplayVideo360AdvertiserLink {
    const message = createBaseDisplayVideo360AdvertiserLink();
    message.name = object.name ?? "";
    message.advertiserId = object.advertiserId ?? "";
    message.advertiserDisplayName = object.advertiserDisplayName ?? "";
    message.adsPersonalizationEnabled = object.adsPersonalizationEnabled ?? undefined;
    message.campaignDataSharingEnabled = object.campaignDataSharingEnabled ?? undefined;
    message.costDataSharingEnabled = object.costDataSharingEnabled ?? undefined;
    return message;
  },
};

function createBaseDisplayVideo360AdvertiserLinkProposal(): DisplayVideo360AdvertiserLinkProposal {
  return {
    name: "",
    advertiserId: "",
    linkProposalStatusDetails: undefined,
    advertiserDisplayName: "",
    validationEmail: "",
    adsPersonalizationEnabled: undefined,
    campaignDataSharingEnabled: undefined,
    costDataSharingEnabled: undefined,
  };
}

export const DisplayVideo360AdvertiserLinkProposal: MessageFns<DisplayVideo360AdvertiserLinkProposal> = {
  encode(message: DisplayVideo360AdvertiserLinkProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.advertiserId !== "") {
      writer.uint32(18).string(message.advertiserId);
    }
    if (message.linkProposalStatusDetails !== undefined) {
      LinkProposalStatusDetails.encode(message.linkProposalStatusDetails, writer.uint32(26).fork()).join();
    }
    if (message.advertiserDisplayName !== "") {
      writer.uint32(34).string(message.advertiserDisplayName);
    }
    if (message.validationEmail !== "") {
      writer.uint32(42).string(message.validationEmail);
    }
    if (message.adsPersonalizationEnabled !== undefined) {
      BoolValue.encode({ value: message.adsPersonalizationEnabled! }, writer.uint32(50).fork()).join();
    }
    if (message.campaignDataSharingEnabled !== undefined) {
      BoolValue.encode({ value: message.campaignDataSharingEnabled! }, writer.uint32(58).fork()).join();
    }
    if (message.costDataSharingEnabled !== undefined) {
      BoolValue.encode({ value: message.costDataSharingEnabled! }, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisplayVideo360AdvertiserLinkProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisplayVideo360AdvertiserLinkProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.advertiserId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.linkProposalStatusDetails = LinkProposalStatusDetails.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.advertiserDisplayName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.validationEmail = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.adsPersonalizationEnabled = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.campaignDataSharingEnabled = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.costDataSharingEnabled = BoolValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisplayVideo360AdvertiserLinkProposal {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      advertiserId: isSet(object.advertiserId) ? globalThis.String(object.advertiserId) : "",
      linkProposalStatusDetails: isSet(object.linkProposalStatusDetails)
        ? LinkProposalStatusDetails.fromJSON(object.linkProposalStatusDetails)
        : undefined,
      advertiserDisplayName: isSet(object.advertiserDisplayName) ? globalThis.String(object.advertiserDisplayName) : "",
      validationEmail: isSet(object.validationEmail) ? globalThis.String(object.validationEmail) : "",
      adsPersonalizationEnabled: isSet(object.adsPersonalizationEnabled)
        ? Boolean(object.adsPersonalizationEnabled)
        : undefined,
      campaignDataSharingEnabled: isSet(object.campaignDataSharingEnabled)
        ? Boolean(object.campaignDataSharingEnabled)
        : undefined,
      costDataSharingEnabled: isSet(object.costDataSharingEnabled) ? Boolean(object.costDataSharingEnabled) : undefined,
    };
  },

  toJSON(message: DisplayVideo360AdvertiserLinkProposal): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.advertiserId !== "") {
      obj.advertiserId = message.advertiserId;
    }
    if (message.linkProposalStatusDetails !== undefined) {
      obj.linkProposalStatusDetails = LinkProposalStatusDetails.toJSON(message.linkProposalStatusDetails);
    }
    if (message.advertiserDisplayName !== "") {
      obj.advertiserDisplayName = message.advertiserDisplayName;
    }
    if (message.validationEmail !== "") {
      obj.validationEmail = message.validationEmail;
    }
    if (message.adsPersonalizationEnabled !== undefined) {
      obj.adsPersonalizationEnabled = message.adsPersonalizationEnabled;
    }
    if (message.campaignDataSharingEnabled !== undefined) {
      obj.campaignDataSharingEnabled = message.campaignDataSharingEnabled;
    }
    if (message.costDataSharingEnabled !== undefined) {
      obj.costDataSharingEnabled = message.costDataSharingEnabled;
    }
    return obj;
  },

  create(base?: DeepPartial<DisplayVideo360AdvertiserLinkProposal>): DisplayVideo360AdvertiserLinkProposal {
    return DisplayVideo360AdvertiserLinkProposal.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DisplayVideo360AdvertiserLinkProposal>): DisplayVideo360AdvertiserLinkProposal {
    const message = createBaseDisplayVideo360AdvertiserLinkProposal();
    message.name = object.name ?? "";
    message.advertiserId = object.advertiserId ?? "";
    message.linkProposalStatusDetails =
      (object.linkProposalStatusDetails !== undefined && object.linkProposalStatusDetails !== null)
        ? LinkProposalStatusDetails.fromPartial(object.linkProposalStatusDetails)
        : undefined;
    message.advertiserDisplayName = object.advertiserDisplayName ?? "";
    message.validationEmail = object.validationEmail ?? "";
    message.adsPersonalizationEnabled = object.adsPersonalizationEnabled ?? undefined;
    message.campaignDataSharingEnabled = object.campaignDataSharingEnabled ?? undefined;
    message.costDataSharingEnabled = object.costDataSharingEnabled ?? undefined;
    return message;
  },
};

function createBaseSearchAds360Link(): SearchAds360Link {
  return {
    name: "",
    advertiserId: "",
    campaignDataSharingEnabled: undefined,
    costDataSharingEnabled: undefined,
    advertiserDisplayName: "",
    adsPersonalizationEnabled: undefined,
    siteStatsSharingEnabled: undefined,
  };
}

export const SearchAds360Link: MessageFns<SearchAds360Link> = {
  encode(message: SearchAds360Link, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.advertiserId !== "") {
      writer.uint32(18).string(message.advertiserId);
    }
    if (message.campaignDataSharingEnabled !== undefined) {
      BoolValue.encode({ value: message.campaignDataSharingEnabled! }, writer.uint32(26).fork()).join();
    }
    if (message.costDataSharingEnabled !== undefined) {
      BoolValue.encode({ value: message.costDataSharingEnabled! }, writer.uint32(34).fork()).join();
    }
    if (message.advertiserDisplayName !== "") {
      writer.uint32(42).string(message.advertiserDisplayName);
    }
    if (message.adsPersonalizationEnabled !== undefined) {
      BoolValue.encode({ value: message.adsPersonalizationEnabled! }, writer.uint32(50).fork()).join();
    }
    if (message.siteStatsSharingEnabled !== undefined) {
      BoolValue.encode({ value: message.siteStatsSharingEnabled! }, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchAds360Link {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchAds360Link();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.advertiserId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.campaignDataSharingEnabled = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.costDataSharingEnabled = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.advertiserDisplayName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.adsPersonalizationEnabled = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.siteStatsSharingEnabled = BoolValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchAds360Link {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      advertiserId: isSet(object.advertiserId) ? globalThis.String(object.advertiserId) : "",
      campaignDataSharingEnabled: isSet(object.campaignDataSharingEnabled)
        ? Boolean(object.campaignDataSharingEnabled)
        : undefined,
      costDataSharingEnabled: isSet(object.costDataSharingEnabled) ? Boolean(object.costDataSharingEnabled) : undefined,
      advertiserDisplayName: isSet(object.advertiserDisplayName) ? globalThis.String(object.advertiserDisplayName) : "",
      adsPersonalizationEnabled: isSet(object.adsPersonalizationEnabled)
        ? Boolean(object.adsPersonalizationEnabled)
        : undefined,
      siteStatsSharingEnabled: isSet(object.siteStatsSharingEnabled)
        ? Boolean(object.siteStatsSharingEnabled)
        : undefined,
    };
  },

  toJSON(message: SearchAds360Link): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.advertiserId !== "") {
      obj.advertiserId = message.advertiserId;
    }
    if (message.campaignDataSharingEnabled !== undefined) {
      obj.campaignDataSharingEnabled = message.campaignDataSharingEnabled;
    }
    if (message.costDataSharingEnabled !== undefined) {
      obj.costDataSharingEnabled = message.costDataSharingEnabled;
    }
    if (message.advertiserDisplayName !== "") {
      obj.advertiserDisplayName = message.advertiserDisplayName;
    }
    if (message.adsPersonalizationEnabled !== undefined) {
      obj.adsPersonalizationEnabled = message.adsPersonalizationEnabled;
    }
    if (message.siteStatsSharingEnabled !== undefined) {
      obj.siteStatsSharingEnabled = message.siteStatsSharingEnabled;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchAds360Link>): SearchAds360Link {
    return SearchAds360Link.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchAds360Link>): SearchAds360Link {
    const message = createBaseSearchAds360Link();
    message.name = object.name ?? "";
    message.advertiserId = object.advertiserId ?? "";
    message.campaignDataSharingEnabled = object.campaignDataSharingEnabled ?? undefined;
    message.costDataSharingEnabled = object.costDataSharingEnabled ?? undefined;
    message.advertiserDisplayName = object.advertiserDisplayName ?? "";
    message.adsPersonalizationEnabled = object.adsPersonalizationEnabled ?? undefined;
    message.siteStatsSharingEnabled = object.siteStatsSharingEnabled ?? undefined;
    return message;
  },
};

function createBaseLinkProposalStatusDetails(): LinkProposalStatusDetails {
  return { linkProposalInitiatingProduct: 0, requestorEmail: "", linkProposalState: 0 };
}

export const LinkProposalStatusDetails: MessageFns<LinkProposalStatusDetails> = {
  encode(message: LinkProposalStatusDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.linkProposalInitiatingProduct !== 0) {
      writer.uint32(8).int32(message.linkProposalInitiatingProduct);
    }
    if (message.requestorEmail !== "") {
      writer.uint32(18).string(message.requestorEmail);
    }
    if (message.linkProposalState !== 0) {
      writer.uint32(24).int32(message.linkProposalState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkProposalStatusDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkProposalStatusDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.linkProposalInitiatingProduct = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestorEmail = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.linkProposalState = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkProposalStatusDetails {
    return {
      linkProposalInitiatingProduct: isSet(object.linkProposalInitiatingProduct)
        ? linkProposalInitiatingProductFromJSON(object.linkProposalInitiatingProduct)
        : 0,
      requestorEmail: isSet(object.requestorEmail) ? globalThis.String(object.requestorEmail) : "",
      linkProposalState: isSet(object.linkProposalState) ? linkProposalStateFromJSON(object.linkProposalState) : 0,
    };
  },

  toJSON(message: LinkProposalStatusDetails): unknown {
    const obj: any = {};
    if (message.linkProposalInitiatingProduct !== 0) {
      obj.linkProposalInitiatingProduct = linkProposalInitiatingProductToJSON(message.linkProposalInitiatingProduct);
    }
    if (message.requestorEmail !== "") {
      obj.requestorEmail = message.requestorEmail;
    }
    if (message.linkProposalState !== 0) {
      obj.linkProposalState = linkProposalStateToJSON(message.linkProposalState);
    }
    return obj;
  },

  create(base?: DeepPartial<LinkProposalStatusDetails>): LinkProposalStatusDetails {
    return LinkProposalStatusDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LinkProposalStatusDetails>): LinkProposalStatusDetails {
    const message = createBaseLinkProposalStatusDetails();
    message.linkProposalInitiatingProduct = object.linkProposalInitiatingProduct ?? 0;
    message.requestorEmail = object.requestorEmail ?? "";
    message.linkProposalState = object.linkProposalState ?? 0;
    return message;
  },
};

function createBaseConversionEvent(): ConversionEvent {
  return {
    name: "",
    eventName: "",
    createTime: undefined,
    deletable: false,
    custom: false,
    countingMethod: 0,
    defaultConversionValue: undefined,
  };
}

export const ConversionEvent: MessageFns<ConversionEvent> = {
  encode(message: ConversionEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.eventName !== "") {
      writer.uint32(18).string(message.eventName);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.deletable !== false) {
      writer.uint32(32).bool(message.deletable);
    }
    if (message.custom !== false) {
      writer.uint32(40).bool(message.custom);
    }
    if (message.countingMethod !== 0) {
      writer.uint32(48).int32(message.countingMethod);
    }
    if (message.defaultConversionValue !== undefined) {
      ConversionEvent_DefaultConversionValue.encode(message.defaultConversionValue, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConversionEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversionEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.deletable = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.custom = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.countingMethod = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.defaultConversionValue = ConversionEvent_DefaultConversionValue.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConversionEvent {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      eventName: isSet(object.eventName) ? globalThis.String(object.eventName) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      deletable: isSet(object.deletable) ? globalThis.Boolean(object.deletable) : false,
      custom: isSet(object.custom) ? globalThis.Boolean(object.custom) : false,
      countingMethod: isSet(object.countingMethod)
        ? conversionEvent_ConversionCountingMethodFromJSON(object.countingMethod)
        : 0,
      defaultConversionValue: isSet(object.defaultConversionValue)
        ? ConversionEvent_DefaultConversionValue.fromJSON(object.defaultConversionValue)
        : undefined,
    };
  },

  toJSON(message: ConversionEvent): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.eventName !== "") {
      obj.eventName = message.eventName;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.deletable !== false) {
      obj.deletable = message.deletable;
    }
    if (message.custom !== false) {
      obj.custom = message.custom;
    }
    if (message.countingMethod !== 0) {
      obj.countingMethod = conversionEvent_ConversionCountingMethodToJSON(message.countingMethod);
    }
    if (message.defaultConversionValue !== undefined) {
      obj.defaultConversionValue = ConversionEvent_DefaultConversionValue.toJSON(message.defaultConversionValue);
    }
    return obj;
  },

  create(base?: DeepPartial<ConversionEvent>): ConversionEvent {
    return ConversionEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConversionEvent>): ConversionEvent {
    const message = createBaseConversionEvent();
    message.name = object.name ?? "";
    message.eventName = object.eventName ?? "";
    message.createTime = object.createTime ?? undefined;
    message.deletable = object.deletable ?? false;
    message.custom = object.custom ?? false;
    message.countingMethod = object.countingMethod ?? 0;
    message.defaultConversionValue =
      (object.defaultConversionValue !== undefined && object.defaultConversionValue !== null)
        ? ConversionEvent_DefaultConversionValue.fromPartial(object.defaultConversionValue)
        : undefined;
    return message;
  },
};

function createBaseConversionEvent_DefaultConversionValue(): ConversionEvent_DefaultConversionValue {
  return { value: undefined, currencyCode: undefined };
}

export const ConversionEvent_DefaultConversionValue: MessageFns<ConversionEvent_DefaultConversionValue> = {
  encode(message: ConversionEvent_DefaultConversionValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined) {
      writer.uint32(9).double(message.value);
    }
    if (message.currencyCode !== undefined) {
      writer.uint32(18).string(message.currencyCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConversionEvent_DefaultConversionValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversionEvent_DefaultConversionValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConversionEvent_DefaultConversionValue {
    return {
      value: isSet(object.value) ? globalThis.Number(object.value) : undefined,
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : undefined,
    };
  },

  toJSON(message: ConversionEvent_DefaultConversionValue): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.currencyCode !== undefined) {
      obj.currencyCode = message.currencyCode;
    }
    return obj;
  },

  create(base?: DeepPartial<ConversionEvent_DefaultConversionValue>): ConversionEvent_DefaultConversionValue {
    return ConversionEvent_DefaultConversionValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConversionEvent_DefaultConversionValue>): ConversionEvent_DefaultConversionValue {
    const message = createBaseConversionEvent_DefaultConversionValue();
    message.value = object.value ?? undefined;
    message.currencyCode = object.currencyCode ?? undefined;
    return message;
  },
};

function createBaseKeyEvent(): KeyEvent {
  return {
    name: "",
    eventName: "",
    createTime: undefined,
    deletable: false,
    custom: false,
    countingMethod: 0,
    defaultValue: undefined,
  };
}

export const KeyEvent: MessageFns<KeyEvent> = {
  encode(message: KeyEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.eventName !== "") {
      writer.uint32(18).string(message.eventName);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.deletable !== false) {
      writer.uint32(32).bool(message.deletable);
    }
    if (message.custom !== false) {
      writer.uint32(40).bool(message.custom);
    }
    if (message.countingMethod !== 0) {
      writer.uint32(48).int32(message.countingMethod);
    }
    if (message.defaultValue !== undefined) {
      KeyEvent_DefaultValue.encode(message.defaultValue, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeyEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.deletable = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.custom = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.countingMethod = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.defaultValue = KeyEvent_DefaultValue.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyEvent {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      eventName: isSet(object.eventName) ? globalThis.String(object.eventName) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      deletable: isSet(object.deletable) ? globalThis.Boolean(object.deletable) : false,
      custom: isSet(object.custom) ? globalThis.Boolean(object.custom) : false,
      countingMethod: isSet(object.countingMethod) ? keyEvent_CountingMethodFromJSON(object.countingMethod) : 0,
      defaultValue: isSet(object.defaultValue) ? KeyEvent_DefaultValue.fromJSON(object.defaultValue) : undefined,
    };
  },

  toJSON(message: KeyEvent): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.eventName !== "") {
      obj.eventName = message.eventName;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.deletable !== false) {
      obj.deletable = message.deletable;
    }
    if (message.custom !== false) {
      obj.custom = message.custom;
    }
    if (message.countingMethod !== 0) {
      obj.countingMethod = keyEvent_CountingMethodToJSON(message.countingMethod);
    }
    if (message.defaultValue !== undefined) {
      obj.defaultValue = KeyEvent_DefaultValue.toJSON(message.defaultValue);
    }
    return obj;
  },

  create(base?: DeepPartial<KeyEvent>): KeyEvent {
    return KeyEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KeyEvent>): KeyEvent {
    const message = createBaseKeyEvent();
    message.name = object.name ?? "";
    message.eventName = object.eventName ?? "";
    message.createTime = object.createTime ?? undefined;
    message.deletable = object.deletable ?? false;
    message.custom = object.custom ?? false;
    message.countingMethod = object.countingMethod ?? 0;
    message.defaultValue = (object.defaultValue !== undefined && object.defaultValue !== null)
      ? KeyEvent_DefaultValue.fromPartial(object.defaultValue)
      : undefined;
    return message;
  },
};

function createBaseKeyEvent_DefaultValue(): KeyEvent_DefaultValue {
  return { numericValue: 0, currencyCode: "" };
}

export const KeyEvent_DefaultValue: MessageFns<KeyEvent_DefaultValue> = {
  encode(message: KeyEvent_DefaultValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numericValue !== 0) {
      writer.uint32(9).double(message.numericValue);
    }
    if (message.currencyCode !== "") {
      writer.uint32(18).string(message.currencyCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeyEvent_DefaultValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyEvent_DefaultValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.numericValue = reader.double();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyEvent_DefaultValue {
    return {
      numericValue: isSet(object.numericValue) ? globalThis.Number(object.numericValue) : 0,
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : "",
    };
  },

  toJSON(message: KeyEvent_DefaultValue): unknown {
    const obj: any = {};
    if (message.numericValue !== 0) {
      obj.numericValue = message.numericValue;
    }
    if (message.currencyCode !== "") {
      obj.currencyCode = message.currencyCode;
    }
    return obj;
  },

  create(base?: DeepPartial<KeyEvent_DefaultValue>): KeyEvent_DefaultValue {
    return KeyEvent_DefaultValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KeyEvent_DefaultValue>): KeyEvent_DefaultValue {
    const message = createBaseKeyEvent_DefaultValue();
    message.numericValue = object.numericValue ?? 0;
    message.currencyCode = object.currencyCode ?? "";
    return message;
  },
};

function createBaseGoogleSignalsSettings(): GoogleSignalsSettings {
  return { name: "", state: 0, consent: 0 };
}

export const GoogleSignalsSettings: MessageFns<GoogleSignalsSettings> = {
  encode(message: GoogleSignalsSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.consent !== 0) {
      writer.uint32(32).int32(message.consent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GoogleSignalsSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGoogleSignalsSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.consent = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GoogleSignalsSettings {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      state: isSet(object.state) ? googleSignalsStateFromJSON(object.state) : 0,
      consent: isSet(object.consent) ? googleSignalsConsentFromJSON(object.consent) : 0,
    };
  },

  toJSON(message: GoogleSignalsSettings): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.state !== 0) {
      obj.state = googleSignalsStateToJSON(message.state);
    }
    if (message.consent !== 0) {
      obj.consent = googleSignalsConsentToJSON(message.consent);
    }
    return obj;
  },

  create(base?: DeepPartial<GoogleSignalsSettings>): GoogleSignalsSettings {
    return GoogleSignalsSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GoogleSignalsSettings>): GoogleSignalsSettings {
    const message = createBaseGoogleSignalsSettings();
    message.name = object.name ?? "";
    message.state = object.state ?? 0;
    message.consent = object.consent ?? 0;
    return message;
  },
};

function createBaseCustomDimension(): CustomDimension {
  return { name: "", parameterName: "", displayName: "", description: "", scope: 0, disallowAdsPersonalization: false };
}

export const CustomDimension: MessageFns<CustomDimension> = {
  encode(message: CustomDimension, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.parameterName !== "") {
      writer.uint32(18).string(message.parameterName);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.scope !== 0) {
      writer.uint32(40).int32(message.scope);
    }
    if (message.disallowAdsPersonalization !== false) {
      writer.uint32(48).bool(message.disallowAdsPersonalization);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomDimension {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomDimension();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parameterName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.scope = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.disallowAdsPersonalization = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomDimension {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      parameterName: isSet(object.parameterName) ? globalThis.String(object.parameterName) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      scope: isSet(object.scope) ? customDimension_DimensionScopeFromJSON(object.scope) : 0,
      disallowAdsPersonalization: isSet(object.disallowAdsPersonalization)
        ? globalThis.Boolean(object.disallowAdsPersonalization)
        : false,
    };
  },

  toJSON(message: CustomDimension): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.parameterName !== "") {
      obj.parameterName = message.parameterName;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.scope !== 0) {
      obj.scope = customDimension_DimensionScopeToJSON(message.scope);
    }
    if (message.disallowAdsPersonalization !== false) {
      obj.disallowAdsPersonalization = message.disallowAdsPersonalization;
    }
    return obj;
  },

  create(base?: DeepPartial<CustomDimension>): CustomDimension {
    return CustomDimension.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomDimension>): CustomDimension {
    const message = createBaseCustomDimension();
    message.name = object.name ?? "";
    message.parameterName = object.parameterName ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.scope = object.scope ?? 0;
    message.disallowAdsPersonalization = object.disallowAdsPersonalization ?? false;
    return message;
  },
};

function createBaseCustomMetric(): CustomMetric {
  return {
    name: "",
    parameterName: "",
    displayName: "",
    description: "",
    measurementUnit: 0,
    scope: 0,
    restrictedMetricType: [],
  };
}

export const CustomMetric: MessageFns<CustomMetric> = {
  encode(message: CustomMetric, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.parameterName !== "") {
      writer.uint32(18).string(message.parameterName);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.measurementUnit !== 0) {
      writer.uint32(40).int32(message.measurementUnit);
    }
    if (message.scope !== 0) {
      writer.uint32(48).int32(message.scope);
    }
    writer.uint32(66).fork();
    for (const v of message.restrictedMetricType) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomMetric {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomMetric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parameterName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.measurementUnit = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.scope = reader.int32() as any;
          continue;
        case 8:
          if (tag === 64) {
            message.restrictedMetricType.push(reader.int32() as any);

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.restrictedMetricType.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomMetric {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      parameterName: isSet(object.parameterName) ? globalThis.String(object.parameterName) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      measurementUnit: isSet(object.measurementUnit) ? customMetric_MeasurementUnitFromJSON(object.measurementUnit) : 0,
      scope: isSet(object.scope) ? customMetric_MetricScopeFromJSON(object.scope) : 0,
      restrictedMetricType: globalThis.Array.isArray(object?.restrictedMetricType)
        ? object.restrictedMetricType.map((e: any) => customMetric_RestrictedMetricTypeFromJSON(e))
        : [],
    };
  },

  toJSON(message: CustomMetric): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.parameterName !== "") {
      obj.parameterName = message.parameterName;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.measurementUnit !== 0) {
      obj.measurementUnit = customMetric_MeasurementUnitToJSON(message.measurementUnit);
    }
    if (message.scope !== 0) {
      obj.scope = customMetric_MetricScopeToJSON(message.scope);
    }
    if (message.restrictedMetricType?.length) {
      obj.restrictedMetricType = message.restrictedMetricType.map((e) => customMetric_RestrictedMetricTypeToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CustomMetric>): CustomMetric {
    return CustomMetric.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomMetric>): CustomMetric {
    const message = createBaseCustomMetric();
    message.name = object.name ?? "";
    message.parameterName = object.parameterName ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.measurementUnit = object.measurementUnit ?? 0;
    message.scope = object.scope ?? 0;
    message.restrictedMetricType = object.restrictedMetricType?.map((e) => e) || [];
    return message;
  },
};

function createBaseCalculatedMetric(): CalculatedMetric {
  return {
    name: "",
    description: "",
    displayName: "",
    calculatedMetricId: "",
    metricUnit: 0,
    restrictedMetricType: [],
    formula: "",
    invalidMetricReference: false,
  };
}

export const CalculatedMetric: MessageFns<CalculatedMetric> = {
  encode(message: CalculatedMetric, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.calculatedMetricId !== "") {
      writer.uint32(34).string(message.calculatedMetricId);
    }
    if (message.metricUnit !== 0) {
      writer.uint32(40).int32(message.metricUnit);
    }
    writer.uint32(50).fork();
    for (const v of message.restrictedMetricType) {
      writer.int32(v);
    }
    writer.join();
    if (message.formula !== "") {
      writer.uint32(58).string(message.formula);
    }
    if (message.invalidMetricReference !== false) {
      writer.uint32(72).bool(message.invalidMetricReference);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CalculatedMetric {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalculatedMetric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.calculatedMetricId = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.metricUnit = reader.int32() as any;
          continue;
        case 6:
          if (tag === 48) {
            message.restrictedMetricType.push(reader.int32() as any);

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.restrictedMetricType.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.formula = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.invalidMetricReference = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CalculatedMetric {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      calculatedMetricId: isSet(object.calculatedMetricId) ? globalThis.String(object.calculatedMetricId) : "",
      metricUnit: isSet(object.metricUnit) ? calculatedMetric_MetricUnitFromJSON(object.metricUnit) : 0,
      restrictedMetricType: globalThis.Array.isArray(object?.restrictedMetricType)
        ? object.restrictedMetricType.map((e: any) => calculatedMetric_RestrictedMetricTypeFromJSON(e))
        : [],
      formula: isSet(object.formula) ? globalThis.String(object.formula) : "",
      invalidMetricReference: isSet(object.invalidMetricReference)
        ? globalThis.Boolean(object.invalidMetricReference)
        : false,
    };
  },

  toJSON(message: CalculatedMetric): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.calculatedMetricId !== "") {
      obj.calculatedMetricId = message.calculatedMetricId;
    }
    if (message.metricUnit !== 0) {
      obj.metricUnit = calculatedMetric_MetricUnitToJSON(message.metricUnit);
    }
    if (message.restrictedMetricType?.length) {
      obj.restrictedMetricType = message.restrictedMetricType.map((e) =>
        calculatedMetric_RestrictedMetricTypeToJSON(e)
      );
    }
    if (message.formula !== "") {
      obj.formula = message.formula;
    }
    if (message.invalidMetricReference !== false) {
      obj.invalidMetricReference = message.invalidMetricReference;
    }
    return obj;
  },

  create(base?: DeepPartial<CalculatedMetric>): CalculatedMetric {
    return CalculatedMetric.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CalculatedMetric>): CalculatedMetric {
    const message = createBaseCalculatedMetric();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.displayName = object.displayName ?? "";
    message.calculatedMetricId = object.calculatedMetricId ?? "";
    message.metricUnit = object.metricUnit ?? 0;
    message.restrictedMetricType = object.restrictedMetricType?.map((e) => e) || [];
    message.formula = object.formula ?? "";
    message.invalidMetricReference = object.invalidMetricReference ?? false;
    return message;
  },
};

function createBaseDataRetentionSettings(): DataRetentionSettings {
  return { name: "", eventDataRetention: 0, resetUserDataOnNewActivity: false };
}

export const DataRetentionSettings: MessageFns<DataRetentionSettings> = {
  encode(message: DataRetentionSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.eventDataRetention !== 0) {
      writer.uint32(16).int32(message.eventDataRetention);
    }
    if (message.resetUserDataOnNewActivity !== false) {
      writer.uint32(24).bool(message.resetUserDataOnNewActivity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataRetentionSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataRetentionSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.eventDataRetention = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.resetUserDataOnNewActivity = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataRetentionSettings {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      eventDataRetention: isSet(object.eventDataRetention)
        ? dataRetentionSettings_RetentionDurationFromJSON(object.eventDataRetention)
        : 0,
      resetUserDataOnNewActivity: isSet(object.resetUserDataOnNewActivity)
        ? globalThis.Boolean(object.resetUserDataOnNewActivity)
        : false,
    };
  },

  toJSON(message: DataRetentionSettings): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.eventDataRetention !== 0) {
      obj.eventDataRetention = dataRetentionSettings_RetentionDurationToJSON(message.eventDataRetention);
    }
    if (message.resetUserDataOnNewActivity !== false) {
      obj.resetUserDataOnNewActivity = message.resetUserDataOnNewActivity;
    }
    return obj;
  },

  create(base?: DeepPartial<DataRetentionSettings>): DataRetentionSettings {
    return DataRetentionSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataRetentionSettings>): DataRetentionSettings {
    const message = createBaseDataRetentionSettings();
    message.name = object.name ?? "";
    message.eventDataRetention = object.eventDataRetention ?? 0;
    message.resetUserDataOnNewActivity = object.resetUserDataOnNewActivity ?? false;
    return message;
  },
};

function createBaseAttributionSettings(): AttributionSettings {
  return {
    name: "",
    acquisitionConversionEventLookbackWindow: 0,
    otherConversionEventLookbackWindow: 0,
    reportingAttributionModel: 0,
    adsWebConversionDataExportScope: 0,
  };
}

export const AttributionSettings: MessageFns<AttributionSettings> = {
  encode(message: AttributionSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.acquisitionConversionEventLookbackWindow !== 0) {
      writer.uint32(16).int32(message.acquisitionConversionEventLookbackWindow);
    }
    if (message.otherConversionEventLookbackWindow !== 0) {
      writer.uint32(24).int32(message.otherConversionEventLookbackWindow);
    }
    if (message.reportingAttributionModel !== 0) {
      writer.uint32(32).int32(message.reportingAttributionModel);
    }
    if (message.adsWebConversionDataExportScope !== 0) {
      writer.uint32(40).int32(message.adsWebConversionDataExportScope);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttributionSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributionSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.acquisitionConversionEventLookbackWindow = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.otherConversionEventLookbackWindow = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.reportingAttributionModel = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.adsWebConversionDataExportScope = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttributionSettings {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      acquisitionConversionEventLookbackWindow: isSet(object.acquisitionConversionEventLookbackWindow)
        ? attributionSettings_AcquisitionConversionEventLookbackWindowFromJSON(
          object.acquisitionConversionEventLookbackWindow,
        )
        : 0,
      otherConversionEventLookbackWindow: isSet(object.otherConversionEventLookbackWindow)
        ? attributionSettings_OtherConversionEventLookbackWindowFromJSON(object.otherConversionEventLookbackWindow)
        : 0,
      reportingAttributionModel: isSet(object.reportingAttributionModel)
        ? attributionSettings_ReportingAttributionModelFromJSON(object.reportingAttributionModel)
        : 0,
      adsWebConversionDataExportScope: isSet(object.adsWebConversionDataExportScope)
        ? attributionSettings_AdsWebConversionDataExportScopeFromJSON(object.adsWebConversionDataExportScope)
        : 0,
    };
  },

  toJSON(message: AttributionSettings): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.acquisitionConversionEventLookbackWindow !== 0) {
      obj.acquisitionConversionEventLookbackWindow = attributionSettings_AcquisitionConversionEventLookbackWindowToJSON(
        message.acquisitionConversionEventLookbackWindow,
      );
    }
    if (message.otherConversionEventLookbackWindow !== 0) {
      obj.otherConversionEventLookbackWindow = attributionSettings_OtherConversionEventLookbackWindowToJSON(
        message.otherConversionEventLookbackWindow,
      );
    }
    if (message.reportingAttributionModel !== 0) {
      obj.reportingAttributionModel = attributionSettings_ReportingAttributionModelToJSON(
        message.reportingAttributionModel,
      );
    }
    if (message.adsWebConversionDataExportScope !== 0) {
      obj.adsWebConversionDataExportScope = attributionSettings_AdsWebConversionDataExportScopeToJSON(
        message.adsWebConversionDataExportScope,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<AttributionSettings>): AttributionSettings {
    return AttributionSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttributionSettings>): AttributionSettings {
    const message = createBaseAttributionSettings();
    message.name = object.name ?? "";
    message.acquisitionConversionEventLookbackWindow = object.acquisitionConversionEventLookbackWindow ?? 0;
    message.otherConversionEventLookbackWindow = object.otherConversionEventLookbackWindow ?? 0;
    message.reportingAttributionModel = object.reportingAttributionModel ?? 0;
    message.adsWebConversionDataExportScope = object.adsWebConversionDataExportScope ?? 0;
    return message;
  },
};

function createBaseAccessBinding(): AccessBinding {
  return { user: undefined, name: "", roles: [] };
}

export const AccessBinding: MessageFns<AccessBinding> = {
  encode(message: AccessBinding, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      writer.uint32(18).string(message.user);
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.roles) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessBinding {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessBinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessBinding {
    return {
      user: isSet(object.user) ? globalThis.String(object.user) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: AccessBinding): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = message.user;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    return obj;
  },

  create(base?: DeepPartial<AccessBinding>): AccessBinding {
    return AccessBinding.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccessBinding>): AccessBinding {
    const message = createBaseAccessBinding();
    message.user = object.user ?? undefined;
    message.name = object.name ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseBigQueryLink(): BigQueryLink {
  return {
    name: "",
    project: "",
    createTime: undefined,
    dailyExportEnabled: false,
    streamingExportEnabled: false,
    freshDailyExportEnabled: false,
    includeAdvertisingId: false,
    exportStreams: [],
    excludedEvents: [],
    datasetLocation: "",
  };
}

export const BigQueryLink: MessageFns<BigQueryLink> = {
  encode(message: BigQueryLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.dailyExportEnabled !== false) {
      writer.uint32(32).bool(message.dailyExportEnabled);
    }
    if (message.streamingExportEnabled !== false) {
      writer.uint32(40).bool(message.streamingExportEnabled);
    }
    if (message.freshDailyExportEnabled !== false) {
      writer.uint32(72).bool(message.freshDailyExportEnabled);
    }
    if (message.includeAdvertisingId !== false) {
      writer.uint32(48).bool(message.includeAdvertisingId);
    }
    for (const v of message.exportStreams) {
      writer.uint32(58).string(v!);
    }
    for (const v of message.excludedEvents) {
      writer.uint32(66).string(v!);
    }
    if (message.datasetLocation !== "") {
      writer.uint32(82).string(message.datasetLocation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.dailyExportEnabled = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.streamingExportEnabled = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.freshDailyExportEnabled = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.includeAdvertisingId = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.exportStreams.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.excludedEvents.push(reader.string());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.datasetLocation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryLink {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      dailyExportEnabled: isSet(object.dailyExportEnabled) ? globalThis.Boolean(object.dailyExportEnabled) : false,
      streamingExportEnabled: isSet(object.streamingExportEnabled)
        ? globalThis.Boolean(object.streamingExportEnabled)
        : false,
      freshDailyExportEnabled: isSet(object.freshDailyExportEnabled)
        ? globalThis.Boolean(object.freshDailyExportEnabled)
        : false,
      includeAdvertisingId: isSet(object.includeAdvertisingId)
        ? globalThis.Boolean(object.includeAdvertisingId)
        : false,
      exportStreams: globalThis.Array.isArray(object?.exportStreams)
        ? object.exportStreams.map((e: any) => globalThis.String(e))
        : [],
      excludedEvents: globalThis.Array.isArray(object?.excludedEvents)
        ? object.excludedEvents.map((e: any) => globalThis.String(e))
        : [],
      datasetLocation: isSet(object.datasetLocation) ? globalThis.String(object.datasetLocation) : "",
    };
  },

  toJSON(message: BigQueryLink): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.dailyExportEnabled !== false) {
      obj.dailyExportEnabled = message.dailyExportEnabled;
    }
    if (message.streamingExportEnabled !== false) {
      obj.streamingExportEnabled = message.streamingExportEnabled;
    }
    if (message.freshDailyExportEnabled !== false) {
      obj.freshDailyExportEnabled = message.freshDailyExportEnabled;
    }
    if (message.includeAdvertisingId !== false) {
      obj.includeAdvertisingId = message.includeAdvertisingId;
    }
    if (message.exportStreams?.length) {
      obj.exportStreams = message.exportStreams;
    }
    if (message.excludedEvents?.length) {
      obj.excludedEvents = message.excludedEvents;
    }
    if (message.datasetLocation !== "") {
      obj.datasetLocation = message.datasetLocation;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryLink>): BigQueryLink {
    return BigQueryLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryLink>): BigQueryLink {
    const message = createBaseBigQueryLink();
    message.name = object.name ?? "";
    message.project = object.project ?? "";
    message.createTime = object.createTime ?? undefined;
    message.dailyExportEnabled = object.dailyExportEnabled ?? false;
    message.streamingExportEnabled = object.streamingExportEnabled ?? false;
    message.freshDailyExportEnabled = object.freshDailyExportEnabled ?? false;
    message.includeAdvertisingId = object.includeAdvertisingId ?? false;
    message.exportStreams = object.exportStreams?.map((e) => e) || [];
    message.excludedEvents = object.excludedEvents?.map((e) => e) || [];
    message.datasetLocation = object.datasetLocation ?? "";
    return message;
  },
};

function createBaseEnhancedMeasurementSettings(): EnhancedMeasurementSettings {
  return {
    name: "",
    streamEnabled: false,
    scrollsEnabled: false,
    outboundClicksEnabled: false,
    siteSearchEnabled: false,
    videoEngagementEnabled: false,
    fileDownloadsEnabled: false,
    pageChangesEnabled: false,
    formInteractionsEnabled: false,
    searchQueryParameter: "",
    uriQueryParameter: "",
  };
}

export const EnhancedMeasurementSettings: MessageFns<EnhancedMeasurementSettings> = {
  encode(message: EnhancedMeasurementSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.streamEnabled !== false) {
      writer.uint32(16).bool(message.streamEnabled);
    }
    if (message.scrollsEnabled !== false) {
      writer.uint32(24).bool(message.scrollsEnabled);
    }
    if (message.outboundClicksEnabled !== false) {
      writer.uint32(32).bool(message.outboundClicksEnabled);
    }
    if (message.siteSearchEnabled !== false) {
      writer.uint32(40).bool(message.siteSearchEnabled);
    }
    if (message.videoEngagementEnabled !== false) {
      writer.uint32(48).bool(message.videoEngagementEnabled);
    }
    if (message.fileDownloadsEnabled !== false) {
      writer.uint32(56).bool(message.fileDownloadsEnabled);
    }
    if (message.pageChangesEnabled !== false) {
      writer.uint32(64).bool(message.pageChangesEnabled);
    }
    if (message.formInteractionsEnabled !== false) {
      writer.uint32(72).bool(message.formInteractionsEnabled);
    }
    if (message.searchQueryParameter !== "") {
      writer.uint32(82).string(message.searchQueryParameter);
    }
    if (message.uriQueryParameter !== "") {
      writer.uint32(90).string(message.uriQueryParameter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnhancedMeasurementSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnhancedMeasurementSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.streamEnabled = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.scrollsEnabled = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.outboundClicksEnabled = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.siteSearchEnabled = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.videoEngagementEnabled = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.fileDownloadsEnabled = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.pageChangesEnabled = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.formInteractionsEnabled = reader.bool();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.searchQueryParameter = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.uriQueryParameter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnhancedMeasurementSettings {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      streamEnabled: isSet(object.streamEnabled) ? globalThis.Boolean(object.streamEnabled) : false,
      scrollsEnabled: isSet(object.scrollsEnabled) ? globalThis.Boolean(object.scrollsEnabled) : false,
      outboundClicksEnabled: isSet(object.outboundClicksEnabled)
        ? globalThis.Boolean(object.outboundClicksEnabled)
        : false,
      siteSearchEnabled: isSet(object.siteSearchEnabled) ? globalThis.Boolean(object.siteSearchEnabled) : false,
      videoEngagementEnabled: isSet(object.videoEngagementEnabled)
        ? globalThis.Boolean(object.videoEngagementEnabled)
        : false,
      fileDownloadsEnabled: isSet(object.fileDownloadsEnabled)
        ? globalThis.Boolean(object.fileDownloadsEnabled)
        : false,
      pageChangesEnabled: isSet(object.pageChangesEnabled) ? globalThis.Boolean(object.pageChangesEnabled) : false,
      formInteractionsEnabled: isSet(object.formInteractionsEnabled)
        ? globalThis.Boolean(object.formInteractionsEnabled)
        : false,
      searchQueryParameter: isSet(object.searchQueryParameter) ? globalThis.String(object.searchQueryParameter) : "",
      uriQueryParameter: isSet(object.uriQueryParameter) ? globalThis.String(object.uriQueryParameter) : "",
    };
  },

  toJSON(message: EnhancedMeasurementSettings): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.streamEnabled !== false) {
      obj.streamEnabled = message.streamEnabled;
    }
    if (message.scrollsEnabled !== false) {
      obj.scrollsEnabled = message.scrollsEnabled;
    }
    if (message.outboundClicksEnabled !== false) {
      obj.outboundClicksEnabled = message.outboundClicksEnabled;
    }
    if (message.siteSearchEnabled !== false) {
      obj.siteSearchEnabled = message.siteSearchEnabled;
    }
    if (message.videoEngagementEnabled !== false) {
      obj.videoEngagementEnabled = message.videoEngagementEnabled;
    }
    if (message.fileDownloadsEnabled !== false) {
      obj.fileDownloadsEnabled = message.fileDownloadsEnabled;
    }
    if (message.pageChangesEnabled !== false) {
      obj.pageChangesEnabled = message.pageChangesEnabled;
    }
    if (message.formInteractionsEnabled !== false) {
      obj.formInteractionsEnabled = message.formInteractionsEnabled;
    }
    if (message.searchQueryParameter !== "") {
      obj.searchQueryParameter = message.searchQueryParameter;
    }
    if (message.uriQueryParameter !== "") {
      obj.uriQueryParameter = message.uriQueryParameter;
    }
    return obj;
  },

  create(base?: DeepPartial<EnhancedMeasurementSettings>): EnhancedMeasurementSettings {
    return EnhancedMeasurementSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnhancedMeasurementSettings>): EnhancedMeasurementSettings {
    const message = createBaseEnhancedMeasurementSettings();
    message.name = object.name ?? "";
    message.streamEnabled = object.streamEnabled ?? false;
    message.scrollsEnabled = object.scrollsEnabled ?? false;
    message.outboundClicksEnabled = object.outboundClicksEnabled ?? false;
    message.siteSearchEnabled = object.siteSearchEnabled ?? false;
    message.videoEngagementEnabled = object.videoEngagementEnabled ?? false;
    message.fileDownloadsEnabled = object.fileDownloadsEnabled ?? false;
    message.pageChangesEnabled = object.pageChangesEnabled ?? false;
    message.formInteractionsEnabled = object.formInteractionsEnabled ?? false;
    message.searchQueryParameter = object.searchQueryParameter ?? "";
    message.uriQueryParameter = object.uriQueryParameter ?? "";
    return message;
  },
};

function createBaseConnectedSiteTag(): ConnectedSiteTag {
  return { displayName: "", tagId: "" };
}

export const ConnectedSiteTag: MessageFns<ConnectedSiteTag> = {
  encode(message: ConnectedSiteTag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    if (message.tagId !== "") {
      writer.uint32(18).string(message.tagId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectedSiteTag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectedSiteTag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tagId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectedSiteTag {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      tagId: isSet(object.tagId) ? globalThis.String(object.tagId) : "",
    };
  },

  toJSON(message: ConnectedSiteTag): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.tagId !== "") {
      obj.tagId = message.tagId;
    }
    return obj;
  },

  create(base?: DeepPartial<ConnectedSiteTag>): ConnectedSiteTag {
    return ConnectedSiteTag.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConnectedSiteTag>): ConnectedSiteTag {
    const message = createBaseConnectedSiteTag();
    message.displayName = object.displayName ?? "";
    message.tagId = object.tagId ?? "";
    return message;
  },
};

function createBaseDataRedactionSettings(): DataRedactionSettings {
  return { name: "", emailRedactionEnabled: false, queryParameterRedactionEnabled: false, queryParameterKeys: [] };
}

export const DataRedactionSettings: MessageFns<DataRedactionSettings> = {
  encode(message: DataRedactionSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.emailRedactionEnabled !== false) {
      writer.uint32(16).bool(message.emailRedactionEnabled);
    }
    if (message.queryParameterRedactionEnabled !== false) {
      writer.uint32(24).bool(message.queryParameterRedactionEnabled);
    }
    for (const v of message.queryParameterKeys) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataRedactionSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataRedactionSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.emailRedactionEnabled = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.queryParameterRedactionEnabled = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.queryParameterKeys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataRedactionSettings {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      emailRedactionEnabled: isSet(object.emailRedactionEnabled)
        ? globalThis.Boolean(object.emailRedactionEnabled)
        : false,
      queryParameterRedactionEnabled: isSet(object.queryParameterRedactionEnabled)
        ? globalThis.Boolean(object.queryParameterRedactionEnabled)
        : false,
      queryParameterKeys: globalThis.Array.isArray(object?.queryParameterKeys)
        ? object.queryParameterKeys.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: DataRedactionSettings): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.emailRedactionEnabled !== false) {
      obj.emailRedactionEnabled = message.emailRedactionEnabled;
    }
    if (message.queryParameterRedactionEnabled !== false) {
      obj.queryParameterRedactionEnabled = message.queryParameterRedactionEnabled;
    }
    if (message.queryParameterKeys?.length) {
      obj.queryParameterKeys = message.queryParameterKeys;
    }
    return obj;
  },

  create(base?: DeepPartial<DataRedactionSettings>): DataRedactionSettings {
    return DataRedactionSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataRedactionSettings>): DataRedactionSettings {
    const message = createBaseDataRedactionSettings();
    message.name = object.name ?? "";
    message.emailRedactionEnabled = object.emailRedactionEnabled ?? false;
    message.queryParameterRedactionEnabled = object.queryParameterRedactionEnabled ?? false;
    message.queryParameterKeys = object.queryParameterKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseAdSenseLink(): AdSenseLink {
  return { name: "", adClientCode: "" };
}

export const AdSenseLink: MessageFns<AdSenseLink> = {
  encode(message: AdSenseLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.adClientCode !== "") {
      writer.uint32(18).string(message.adClientCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdSenseLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdSenseLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.adClientCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdSenseLink {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      adClientCode: isSet(object.adClientCode) ? globalThis.String(object.adClientCode) : "",
    };
  },

  toJSON(message: AdSenseLink): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.adClientCode !== "") {
      obj.adClientCode = message.adClientCode;
    }
    return obj;
  },

  create(base?: DeepPartial<AdSenseLink>): AdSenseLink {
    return AdSenseLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdSenseLink>): AdSenseLink {
    const message = createBaseAdSenseLink();
    message.name = object.name ?? "";
    message.adClientCode = object.adClientCode ?? "";
    return message;
  },
};

function createBaseRollupPropertySourceLink(): RollupPropertySourceLink {
  return { name: "", sourceProperty: "" };
}

export const RollupPropertySourceLink: MessageFns<RollupPropertySourceLink> = {
  encode(message: RollupPropertySourceLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.sourceProperty !== "") {
      writer.uint32(18).string(message.sourceProperty);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RollupPropertySourceLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRollupPropertySourceLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sourceProperty = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RollupPropertySourceLink {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      sourceProperty: isSet(object.sourceProperty) ? globalThis.String(object.sourceProperty) : "",
    };
  },

  toJSON(message: RollupPropertySourceLink): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.sourceProperty !== "") {
      obj.sourceProperty = message.sourceProperty;
    }
    return obj;
  },

  create(base?: DeepPartial<RollupPropertySourceLink>): RollupPropertySourceLink {
    return RollupPropertySourceLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RollupPropertySourceLink>): RollupPropertySourceLink {
    const message = createBaseRollupPropertySourceLink();
    message.name = object.name ?? "";
    message.sourceProperty = object.sourceProperty ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
