// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/analytics/admin/v1alpha/channel_group.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.analytics.admin.v1alpha";

/** A specific filter for a single dimension. */
export interface ChannelGroupFilter {
  /** A filter for a string-type dimension that matches a particular pattern. */
  stringFilter?:
    | ChannelGroupFilter_StringFilter
    | undefined;
  /**
   * A filter for a string dimension that matches a particular list of
   * options.
   */
  inListFilter?:
    | ChannelGroupFilter_InListFilter
    | undefined;
  /** Required. Immutable. The dimension name to filter. */
  fieldName: string;
}

/** Filter where the field value is a String. The match is case insensitive. */
export interface ChannelGroupFilter_StringFilter {
  /** Required. The match type for the string filter. */
  matchType: ChannelGroupFilter_StringFilter_MatchType;
  /** Required. The string value to be matched against. */
  value: string;
}

/** How the filter will be used to determine a match. */
export enum ChannelGroupFilter_StringFilter_MatchType {
  /** MATCH_TYPE_UNSPECIFIED - Default match type. */
  MATCH_TYPE_UNSPECIFIED = 0,
  /** EXACT - Exact match of the string value. */
  EXACT = 1,
  /** BEGINS_WITH - Begins with the string value. */
  BEGINS_WITH = 2,
  /** ENDS_WITH - Ends with the string value. */
  ENDS_WITH = 3,
  /** CONTAINS - Contains the string value. */
  CONTAINS = 4,
  /** FULL_REGEXP - Full regular expression match with the string value. */
  FULL_REGEXP = 5,
  /** PARTIAL_REGEXP - Partial regular expression match with the string value. */
  PARTIAL_REGEXP = 6,
  UNRECOGNIZED = -1,
}

export function channelGroupFilter_StringFilter_MatchTypeFromJSON(
  object: any,
): ChannelGroupFilter_StringFilter_MatchType {
  switch (object) {
    case 0:
    case "MATCH_TYPE_UNSPECIFIED":
      return ChannelGroupFilter_StringFilter_MatchType.MATCH_TYPE_UNSPECIFIED;
    case 1:
    case "EXACT":
      return ChannelGroupFilter_StringFilter_MatchType.EXACT;
    case 2:
    case "BEGINS_WITH":
      return ChannelGroupFilter_StringFilter_MatchType.BEGINS_WITH;
    case 3:
    case "ENDS_WITH":
      return ChannelGroupFilter_StringFilter_MatchType.ENDS_WITH;
    case 4:
    case "CONTAINS":
      return ChannelGroupFilter_StringFilter_MatchType.CONTAINS;
    case 5:
    case "FULL_REGEXP":
      return ChannelGroupFilter_StringFilter_MatchType.FULL_REGEXP;
    case 6:
    case "PARTIAL_REGEXP":
      return ChannelGroupFilter_StringFilter_MatchType.PARTIAL_REGEXP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ChannelGroupFilter_StringFilter_MatchType.UNRECOGNIZED;
  }
}

export function channelGroupFilter_StringFilter_MatchTypeToJSON(
  object: ChannelGroupFilter_StringFilter_MatchType,
): string {
  switch (object) {
    case ChannelGroupFilter_StringFilter_MatchType.MATCH_TYPE_UNSPECIFIED:
      return "MATCH_TYPE_UNSPECIFIED";
    case ChannelGroupFilter_StringFilter_MatchType.EXACT:
      return "EXACT";
    case ChannelGroupFilter_StringFilter_MatchType.BEGINS_WITH:
      return "BEGINS_WITH";
    case ChannelGroupFilter_StringFilter_MatchType.ENDS_WITH:
      return "ENDS_WITH";
    case ChannelGroupFilter_StringFilter_MatchType.CONTAINS:
      return "CONTAINS";
    case ChannelGroupFilter_StringFilter_MatchType.FULL_REGEXP:
      return "FULL_REGEXP";
    case ChannelGroupFilter_StringFilter_MatchType.PARTIAL_REGEXP:
      return "PARTIAL_REGEXP";
    case ChannelGroupFilter_StringFilter_MatchType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A filter for a string dimension that matches a particular list of options.
 * The match is case insensitive.
 */
export interface ChannelGroupFilter_InListFilter {
  /**
   * Required. The list of possible string values to match against. Must be
   * non-empty.
   */
  values: string[];
}

/** A logical expression of Channel Group dimension filters. */
export interface ChannelGroupFilterExpression {
  /**
   * A list of expressions to be AND’ed together. It can only contain
   * ChannelGroupFilterExpressions with or_group. This must be set for the
   * top level ChannelGroupFilterExpression.
   */
  andGroup?:
    | ChannelGroupFilterExpressionList
    | undefined;
  /**
   * A list of expressions to OR’ed together. It cannot contain
   * ChannelGroupFilterExpressions with and_group or or_group.
   */
  orGroup?:
    | ChannelGroupFilterExpressionList
    | undefined;
  /**
   * A filter expression to be NOT'ed (that is inverted, complemented). It
   * can only include a dimension_or_metric_filter. This cannot be set on the
   * top level ChannelGroupFilterExpression.
   */
  notExpression?:
    | ChannelGroupFilterExpression
    | undefined;
  /**
   * A filter on a single dimension. This cannot be set on the top
   * level ChannelGroupFilterExpression.
   */
  filter?: ChannelGroupFilter | undefined;
}

/** A list of Channel Group filter expressions. */
export interface ChannelGroupFilterExpressionList {
  /** A list of Channel Group filter expressions. */
  filterExpressions: ChannelGroupFilterExpression[];
}

/** The rules that govern how traffic is grouped into one channel. */
export interface GroupingRule {
  /** Required. Customer defined display name for the channel. */
  displayName: string;
  /** Required. The Filter Expression that defines the Grouping Rule. */
  expression: ChannelGroupFilterExpression | undefined;
}

/** A resource message representing a Channel Group. */
export interface ChannelGroup {
  /**
   * Output only. The resource name for this Channel Group resource.
   * Format: properties/{property}/channelGroups/{channel_group}
   */
  name: string;
  /**
   * Required. The display name of the Channel Group. Max length of 80
   * characters.
   */
  displayName: string;
  /** The description of the Channel Group. Max length of 256 characters. */
  description: string;
  /** Required. The grouping rules of channels. Maximum number of rules is 50. */
  groupingRule: GroupingRule[];
  /**
   * Output only. If true, then this channel group is the Default Channel Group
   * predefined by Google Analytics. Display name and grouping rules cannot be
   * updated for this channel group.
   */
  systemDefined: boolean;
  /**
   * Optional. If true, this channel group will be used as the default channel
   * group for reports. Only one channel group can be set as `primary` at any
   * time. If the `primary` field gets set on a channel group, it will get unset
   * on the previous primary channel group.
   *
   * The Google Analytics predefined channel group is the primary by default.
   */
  primary: boolean;
}

function createBaseChannelGroupFilter(): ChannelGroupFilter {
  return { stringFilter: undefined, inListFilter: undefined, fieldName: "" };
}

export const ChannelGroupFilter: MessageFns<ChannelGroupFilter> = {
  encode(message: ChannelGroupFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stringFilter !== undefined) {
      ChannelGroupFilter_StringFilter.encode(message.stringFilter, writer.uint32(18).fork()).join();
    }
    if (message.inListFilter !== undefined) {
      ChannelGroupFilter_InListFilter.encode(message.inListFilter, writer.uint32(26).fork()).join();
    }
    if (message.fieldName !== "") {
      writer.uint32(10).string(message.fieldName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChannelGroupFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelGroupFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stringFilter = ChannelGroupFilter_StringFilter.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.inListFilter = ChannelGroupFilter_InListFilter.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fieldName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelGroupFilter {
    return {
      stringFilter: isSet(object.stringFilter)
        ? ChannelGroupFilter_StringFilter.fromJSON(object.stringFilter)
        : undefined,
      inListFilter: isSet(object.inListFilter)
        ? ChannelGroupFilter_InListFilter.fromJSON(object.inListFilter)
        : undefined,
      fieldName: isSet(object.fieldName) ? globalThis.String(object.fieldName) : "",
    };
  },

  toJSON(message: ChannelGroupFilter): unknown {
    const obj: any = {};
    if (message.stringFilter !== undefined) {
      obj.stringFilter = ChannelGroupFilter_StringFilter.toJSON(message.stringFilter);
    }
    if (message.inListFilter !== undefined) {
      obj.inListFilter = ChannelGroupFilter_InListFilter.toJSON(message.inListFilter);
    }
    if (message.fieldName !== "") {
      obj.fieldName = message.fieldName;
    }
    return obj;
  },

  create(base?: DeepPartial<ChannelGroupFilter>): ChannelGroupFilter {
    return ChannelGroupFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChannelGroupFilter>): ChannelGroupFilter {
    const message = createBaseChannelGroupFilter();
    message.stringFilter = (object.stringFilter !== undefined && object.stringFilter !== null)
      ? ChannelGroupFilter_StringFilter.fromPartial(object.stringFilter)
      : undefined;
    message.inListFilter = (object.inListFilter !== undefined && object.inListFilter !== null)
      ? ChannelGroupFilter_InListFilter.fromPartial(object.inListFilter)
      : undefined;
    message.fieldName = object.fieldName ?? "";
    return message;
  },
};

function createBaseChannelGroupFilter_StringFilter(): ChannelGroupFilter_StringFilter {
  return { matchType: 0, value: "" };
}

export const ChannelGroupFilter_StringFilter: MessageFns<ChannelGroupFilter_StringFilter> = {
  encode(message: ChannelGroupFilter_StringFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.matchType !== 0) {
      writer.uint32(8).int32(message.matchType);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChannelGroupFilter_StringFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelGroupFilter_StringFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.matchType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelGroupFilter_StringFilter {
    return {
      matchType: isSet(object.matchType) ? channelGroupFilter_StringFilter_MatchTypeFromJSON(object.matchType) : 0,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ChannelGroupFilter_StringFilter): unknown {
    const obj: any = {};
    if (message.matchType !== 0) {
      obj.matchType = channelGroupFilter_StringFilter_MatchTypeToJSON(message.matchType);
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ChannelGroupFilter_StringFilter>): ChannelGroupFilter_StringFilter {
    return ChannelGroupFilter_StringFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChannelGroupFilter_StringFilter>): ChannelGroupFilter_StringFilter {
    const message = createBaseChannelGroupFilter_StringFilter();
    message.matchType = object.matchType ?? 0;
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseChannelGroupFilter_InListFilter(): ChannelGroupFilter_InListFilter {
  return { values: [] };
}

export const ChannelGroupFilter_InListFilter: MessageFns<ChannelGroupFilter_InListFilter> = {
  encode(message: ChannelGroupFilter_InListFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChannelGroupFilter_InListFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelGroupFilter_InListFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.values.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelGroupFilter_InListFilter {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: ChannelGroupFilter_InListFilter): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create(base?: DeepPartial<ChannelGroupFilter_InListFilter>): ChannelGroupFilter_InListFilter {
    return ChannelGroupFilter_InListFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChannelGroupFilter_InListFilter>): ChannelGroupFilter_InListFilter {
    const message = createBaseChannelGroupFilter_InListFilter();
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseChannelGroupFilterExpression(): ChannelGroupFilterExpression {
  return { andGroup: undefined, orGroup: undefined, notExpression: undefined, filter: undefined };
}

export const ChannelGroupFilterExpression: MessageFns<ChannelGroupFilterExpression> = {
  encode(message: ChannelGroupFilterExpression, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.andGroup !== undefined) {
      ChannelGroupFilterExpressionList.encode(message.andGroup, writer.uint32(10).fork()).join();
    }
    if (message.orGroup !== undefined) {
      ChannelGroupFilterExpressionList.encode(message.orGroup, writer.uint32(18).fork()).join();
    }
    if (message.notExpression !== undefined) {
      ChannelGroupFilterExpression.encode(message.notExpression, writer.uint32(26).fork()).join();
    }
    if (message.filter !== undefined) {
      ChannelGroupFilter.encode(message.filter, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChannelGroupFilterExpression {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelGroupFilterExpression();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.andGroup = ChannelGroupFilterExpressionList.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.orGroup = ChannelGroupFilterExpressionList.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.notExpression = ChannelGroupFilterExpression.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = ChannelGroupFilter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelGroupFilterExpression {
    return {
      andGroup: isSet(object.andGroup) ? ChannelGroupFilterExpressionList.fromJSON(object.andGroup) : undefined,
      orGroup: isSet(object.orGroup) ? ChannelGroupFilterExpressionList.fromJSON(object.orGroup) : undefined,
      notExpression: isSet(object.notExpression)
        ? ChannelGroupFilterExpression.fromJSON(object.notExpression)
        : undefined,
      filter: isSet(object.filter) ? ChannelGroupFilter.fromJSON(object.filter) : undefined,
    };
  },

  toJSON(message: ChannelGroupFilterExpression): unknown {
    const obj: any = {};
    if (message.andGroup !== undefined) {
      obj.andGroup = ChannelGroupFilterExpressionList.toJSON(message.andGroup);
    }
    if (message.orGroup !== undefined) {
      obj.orGroup = ChannelGroupFilterExpressionList.toJSON(message.orGroup);
    }
    if (message.notExpression !== undefined) {
      obj.notExpression = ChannelGroupFilterExpression.toJSON(message.notExpression);
    }
    if (message.filter !== undefined) {
      obj.filter = ChannelGroupFilter.toJSON(message.filter);
    }
    return obj;
  },

  create(base?: DeepPartial<ChannelGroupFilterExpression>): ChannelGroupFilterExpression {
    return ChannelGroupFilterExpression.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChannelGroupFilterExpression>): ChannelGroupFilterExpression {
    const message = createBaseChannelGroupFilterExpression();
    message.andGroup = (object.andGroup !== undefined && object.andGroup !== null)
      ? ChannelGroupFilterExpressionList.fromPartial(object.andGroup)
      : undefined;
    message.orGroup = (object.orGroup !== undefined && object.orGroup !== null)
      ? ChannelGroupFilterExpressionList.fromPartial(object.orGroup)
      : undefined;
    message.notExpression = (object.notExpression !== undefined && object.notExpression !== null)
      ? ChannelGroupFilterExpression.fromPartial(object.notExpression)
      : undefined;
    message.filter = (object.filter !== undefined && object.filter !== null)
      ? ChannelGroupFilter.fromPartial(object.filter)
      : undefined;
    return message;
  },
};

function createBaseChannelGroupFilterExpressionList(): ChannelGroupFilterExpressionList {
  return { filterExpressions: [] };
}

export const ChannelGroupFilterExpressionList: MessageFns<ChannelGroupFilterExpressionList> = {
  encode(message: ChannelGroupFilterExpressionList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.filterExpressions) {
      ChannelGroupFilterExpression.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChannelGroupFilterExpressionList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelGroupFilterExpressionList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.filterExpressions.push(ChannelGroupFilterExpression.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelGroupFilterExpressionList {
    return {
      filterExpressions: globalThis.Array.isArray(object?.filterExpressions)
        ? object.filterExpressions.map((e: any) => ChannelGroupFilterExpression.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ChannelGroupFilterExpressionList): unknown {
    const obj: any = {};
    if (message.filterExpressions?.length) {
      obj.filterExpressions = message.filterExpressions.map((e) => ChannelGroupFilterExpression.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ChannelGroupFilterExpressionList>): ChannelGroupFilterExpressionList {
    return ChannelGroupFilterExpressionList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChannelGroupFilterExpressionList>): ChannelGroupFilterExpressionList {
    const message = createBaseChannelGroupFilterExpressionList();
    message.filterExpressions = object.filterExpressions?.map((e) => ChannelGroupFilterExpression.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGroupingRule(): GroupingRule {
  return { displayName: "", expression: undefined };
}

export const GroupingRule: MessageFns<GroupingRule> = {
  encode(message: GroupingRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    if (message.expression !== undefined) {
      ChannelGroupFilterExpression.encode(message.expression, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupingRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupingRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.expression = ChannelGroupFilterExpression.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupingRule {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      expression: isSet(object.expression) ? ChannelGroupFilterExpression.fromJSON(object.expression) : undefined,
    };
  },

  toJSON(message: GroupingRule): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.expression !== undefined) {
      obj.expression = ChannelGroupFilterExpression.toJSON(message.expression);
    }
    return obj;
  },

  create(base?: DeepPartial<GroupingRule>): GroupingRule {
    return GroupingRule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GroupingRule>): GroupingRule {
    const message = createBaseGroupingRule();
    message.displayName = object.displayName ?? "";
    message.expression = (object.expression !== undefined && object.expression !== null)
      ? ChannelGroupFilterExpression.fromPartial(object.expression)
      : undefined;
    return message;
  },
};

function createBaseChannelGroup(): ChannelGroup {
  return { name: "", displayName: "", description: "", groupingRule: [], systemDefined: false, primary: false };
}

export const ChannelGroup: MessageFns<ChannelGroup> = {
  encode(message: ChannelGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.groupingRule) {
      GroupingRule.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.systemDefined !== false) {
      writer.uint32(40).bool(message.systemDefined);
    }
    if (message.primary !== false) {
      writer.uint32(48).bool(message.primary);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChannelGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.groupingRule.push(GroupingRule.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.systemDefined = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.primary = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelGroup {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      groupingRule: globalThis.Array.isArray(object?.groupingRule)
        ? object.groupingRule.map((e: any) => GroupingRule.fromJSON(e))
        : [],
      systemDefined: isSet(object.systemDefined) ? globalThis.Boolean(object.systemDefined) : false,
      primary: isSet(object.primary) ? globalThis.Boolean(object.primary) : false,
    };
  },

  toJSON(message: ChannelGroup): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.groupingRule?.length) {
      obj.groupingRule = message.groupingRule.map((e) => GroupingRule.toJSON(e));
    }
    if (message.systemDefined !== false) {
      obj.systemDefined = message.systemDefined;
    }
    if (message.primary !== false) {
      obj.primary = message.primary;
    }
    return obj;
  },

  create(base?: DeepPartial<ChannelGroup>): ChannelGroup {
    return ChannelGroup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChannelGroup>): ChannelGroup {
    const message = createBaseChannelGroup();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.groupingRule = object.groupingRule?.map((e) => GroupingRule.fromPartial(e)) || [];
    message.systemDefined = object.systemDefined ?? false;
    message.primary = object.primary ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
