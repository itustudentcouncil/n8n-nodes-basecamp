// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/logging/type/http_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../protobuf/duration.js";

export const protobufPackage = "google.logging.type";

/**
 * A common proto for logging HTTP requests. Only contains semantics
 * defined by the HTTP specification. Product-specific logging
 * information MUST be defined in a separate message.
 */
export interface HttpRequest {
  /** The request method. Examples: `"GET"`, `"HEAD"`, `"PUT"`, `"POST"`. */
  requestMethod: string;
  /**
   * The scheme (http, https), the host name, the path and the query
   * portion of the URL that was requested.
   * Example: `"http://example.com/some/info?color=red"`.
   */
  requestUrl: string;
  /**
   * The size of the HTTP request message in bytes, including the request
   * headers and the request body.
   */
  requestSize: Long;
  /**
   * The response code indicating the status of response.
   * Examples: 200, 404.
   */
  status: number;
  /**
   * The size of the HTTP response message sent back to the client, in bytes,
   * including the response headers and the response body.
   */
  responseSize: Long;
  /**
   * The user agent sent by the client. Example:
   * `"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET
   * CLR 1.0.3705)"`.
   */
  userAgent: string;
  /**
   * The IP address (IPv4 or IPv6) of the client that issued the HTTP
   * request. This field can include port information. Examples:
   * `"192.168.1.1"`, `"10.0.0.1:80"`, `"FE80::0202:B3FF:FE1E:8329"`.
   */
  remoteIp: string;
  /**
   * The IP address (IPv4 or IPv6) of the origin server that the request was
   * sent to. This field can include port information. Examples:
   * `"192.168.1.1"`, `"10.0.0.1:80"`, `"FE80::0202:B3FF:FE1E:8329"`.
   */
  serverIp: string;
  /**
   * The referer URL of the request, as defined in
   * [HTTP/1.1 Header Field
   * Definitions](https://datatracker.ietf.org/doc/html/rfc2616#section-14.36).
   */
  referer: string;
  /**
   * The request processing latency on the server, from the time the request was
   * received until the response was sent.
   */
  latency:
    | Duration
    | undefined;
  /** Whether or not a cache lookup was attempted. */
  cacheLookup: boolean;
  /**
   * Whether or not an entity was served from cache
   * (with or without validation).
   */
  cacheHit: boolean;
  /**
   * Whether or not the response was validated with the origin server before
   * being served from cache. This field is only meaningful if `cache_hit` is
   * True.
   */
  cacheValidatedWithOriginServer: boolean;
  /**
   * The number of HTTP response bytes inserted into cache. Set only when a
   * cache fill was attempted.
   */
  cacheFillBytes: Long;
  /** Protocol used for the request. Examples: "HTTP/1.1", "HTTP/2", "websocket" */
  protocol: string;
}

function createBaseHttpRequest(): HttpRequest {
  return {
    requestMethod: "",
    requestUrl: "",
    requestSize: Long.ZERO,
    status: 0,
    responseSize: Long.ZERO,
    userAgent: "",
    remoteIp: "",
    serverIp: "",
    referer: "",
    latency: undefined,
    cacheLookup: false,
    cacheHit: false,
    cacheValidatedWithOriginServer: false,
    cacheFillBytes: Long.ZERO,
    protocol: "",
  };
}

export const HttpRequest: MessageFns<HttpRequest> = {
  encode(message: HttpRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestMethod !== "") {
      writer.uint32(10).string(message.requestMethod);
    }
    if (message.requestUrl !== "") {
      writer.uint32(18).string(message.requestUrl);
    }
    if (!message.requestSize.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.requestSize.toString());
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (!message.responseSize.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.responseSize.toString());
    }
    if (message.userAgent !== "") {
      writer.uint32(50).string(message.userAgent);
    }
    if (message.remoteIp !== "") {
      writer.uint32(58).string(message.remoteIp);
    }
    if (message.serverIp !== "") {
      writer.uint32(106).string(message.serverIp);
    }
    if (message.referer !== "") {
      writer.uint32(66).string(message.referer);
    }
    if (message.latency !== undefined) {
      Duration.encode(message.latency, writer.uint32(114).fork()).join();
    }
    if (message.cacheLookup !== false) {
      writer.uint32(88).bool(message.cacheLookup);
    }
    if (message.cacheHit !== false) {
      writer.uint32(72).bool(message.cacheHit);
    }
    if (message.cacheValidatedWithOriginServer !== false) {
      writer.uint32(80).bool(message.cacheValidatedWithOriginServer);
    }
    if (!message.cacheFillBytes.equals(Long.ZERO)) {
      writer.uint32(96).int64(message.cacheFillBytes.toString());
    }
    if (message.protocol !== "") {
      writer.uint32(122).string(message.protocol);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestMethod = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestUrl = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.requestSize = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.responseSize = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.remoteIp = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.serverIp = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.referer = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.latency = Duration.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.cacheLookup = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.cacheHit = reader.bool();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.cacheValidatedWithOriginServer = reader.bool();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.cacheFillBytes = Long.fromString(reader.int64().toString());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.protocol = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpRequest {
    return {
      requestMethod: isSet(object.requestMethod) ? globalThis.String(object.requestMethod) : "",
      requestUrl: isSet(object.requestUrl) ? globalThis.String(object.requestUrl) : "",
      requestSize: isSet(object.requestSize) ? Long.fromValue(object.requestSize) : Long.ZERO,
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      responseSize: isSet(object.responseSize) ? Long.fromValue(object.responseSize) : Long.ZERO,
      userAgent: isSet(object.userAgent) ? globalThis.String(object.userAgent) : "",
      remoteIp: isSet(object.remoteIp) ? globalThis.String(object.remoteIp) : "",
      serverIp: isSet(object.serverIp) ? globalThis.String(object.serverIp) : "",
      referer: isSet(object.referer) ? globalThis.String(object.referer) : "",
      latency: isSet(object.latency) ? Duration.fromJSON(object.latency) : undefined,
      cacheLookup: isSet(object.cacheLookup) ? globalThis.Boolean(object.cacheLookup) : false,
      cacheHit: isSet(object.cacheHit) ? globalThis.Boolean(object.cacheHit) : false,
      cacheValidatedWithOriginServer: isSet(object.cacheValidatedWithOriginServer)
        ? globalThis.Boolean(object.cacheValidatedWithOriginServer)
        : false,
      cacheFillBytes: isSet(object.cacheFillBytes) ? Long.fromValue(object.cacheFillBytes) : Long.ZERO,
      protocol: isSet(object.protocol) ? globalThis.String(object.protocol) : "",
    };
  },

  toJSON(message: HttpRequest): unknown {
    const obj: any = {};
    if (message.requestMethod !== "") {
      obj.requestMethod = message.requestMethod;
    }
    if (message.requestUrl !== "") {
      obj.requestUrl = message.requestUrl;
    }
    if (!message.requestSize.equals(Long.ZERO)) {
      obj.requestSize = (message.requestSize || Long.ZERO).toString();
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (!message.responseSize.equals(Long.ZERO)) {
      obj.responseSize = (message.responseSize || Long.ZERO).toString();
    }
    if (message.userAgent !== "") {
      obj.userAgent = message.userAgent;
    }
    if (message.remoteIp !== "") {
      obj.remoteIp = message.remoteIp;
    }
    if (message.serverIp !== "") {
      obj.serverIp = message.serverIp;
    }
    if (message.referer !== "") {
      obj.referer = message.referer;
    }
    if (message.latency !== undefined) {
      obj.latency = Duration.toJSON(message.latency);
    }
    if (message.cacheLookup !== false) {
      obj.cacheLookup = message.cacheLookup;
    }
    if (message.cacheHit !== false) {
      obj.cacheHit = message.cacheHit;
    }
    if (message.cacheValidatedWithOriginServer !== false) {
      obj.cacheValidatedWithOriginServer = message.cacheValidatedWithOriginServer;
    }
    if (!message.cacheFillBytes.equals(Long.ZERO)) {
      obj.cacheFillBytes = (message.cacheFillBytes || Long.ZERO).toString();
    }
    if (message.protocol !== "") {
      obj.protocol = message.protocol;
    }
    return obj;
  },

  create(base?: DeepPartial<HttpRequest>): HttpRequest {
    return HttpRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HttpRequest>): HttpRequest {
    const message = createBaseHttpRequest();
    message.requestMethod = object.requestMethod ?? "";
    message.requestUrl = object.requestUrl ?? "";
    message.requestSize = (object.requestSize !== undefined && object.requestSize !== null)
      ? Long.fromValue(object.requestSize)
      : Long.ZERO;
    message.status = object.status ?? 0;
    message.responseSize = (object.responseSize !== undefined && object.responseSize !== null)
      ? Long.fromValue(object.responseSize)
      : Long.ZERO;
    message.userAgent = object.userAgent ?? "";
    message.remoteIp = object.remoteIp ?? "";
    message.serverIp = object.serverIp ?? "";
    message.referer = object.referer ?? "";
    message.latency = (object.latency !== undefined && object.latency !== null)
      ? Duration.fromPartial(object.latency)
      : undefined;
    message.cacheLookup = object.cacheLookup ?? false;
    message.cacheHit = object.cacheHit ?? false;
    message.cacheValidatedWithOriginServer = object.cacheValidatedWithOriginServer ?? false;
    message.cacheFillBytes = (object.cacheFillBytes !== undefined && object.cacheFillBytes !== null)
      ? Long.fromValue(object.cacheFillBytes)
      : Long.ZERO;
    message.protocol = object.protocol ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
