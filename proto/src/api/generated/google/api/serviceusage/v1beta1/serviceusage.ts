// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/api/serviceusage/v1beta1/serviceusage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import {
  AdminQuotaPolicy,
  ConsumerQuotaLimit,
  ConsumerQuotaMetric,
  OverrideInlineSource,
  QuotaOverride,
  QuotaSafetyCheck,
  quotaSafetyCheckFromJSON,
  quotaSafetyCheckToJSON,
  QuotaView,
  quotaViewFromJSON,
  quotaViewToJSON,
  Service,
  ServiceIdentity,
} from "./resources.js";

export const protobufPackage = "google.api.serviceusage.v1beta1";

/** Request message for the `EnableService` method. */
export interface EnableServiceRequest {
  /**
   * Name of the consumer and service to enable the service on.
   *
   * The `EnableService` and `DisableService` methods currently only support
   * projects.
   *
   * Enabling a service requires that the service is public or is shared with
   * the user enabling the service.
   *
   * An example name would be:
   * `projects/123/services/serviceusage.googleapis.com`
   * where `123` is the project number (not project ID).
   */
  name: string;
}

/** Request message for the `DisableService` method. */
export interface DisableServiceRequest {
  /**
   * Name of the consumer and service to disable the service on.
   *
   * The enable and disable methods currently only support projects.
   *
   * An example name would be:
   * `projects/123/services/serviceusage.googleapis.com`
   * where `123` is the project number (not project ID).
   */
  name: string;
}

/** Request message for the `GetService` method. */
export interface GetServiceRequest {
  /**
   * Name of the consumer and service to get the `ConsumerState` for.
   *
   * An example name would be:
   * `projects/123/services/serviceusage.googleapis.com`
   * where `123` is the project number (not project ID).
   */
  name: string;
}

/** Request message for the `ListServices` method. */
export interface ListServicesRequest {
  /**
   * Parent to search for services on.
   *
   * An example name would be:
   * `projects/123`
   * where `123` is the project number (not project ID).
   */
  parent: string;
  /**
   * Requested size of the next page of data.
   * Requested page size cannot exceed 200.
   *  If not set, the default page size is 50.
   */
  pageSize: number;
  /**
   * Token identifying which result to start with, which is returned by a
   * previous list call.
   */
  pageToken: string;
  /**
   * Only list services that conform to the given filter.
   * The allowed filter strings are `state:ENABLED` and `state:DISABLED`.
   */
  filter: string;
}

/** Response message for the `ListServices` method. */
export interface ListServicesResponse {
  /** The available services for the requested project. */
  services: Service[];
  /**
   * Token that can be passed to `ListServices` to resume a paginated
   * query.
   */
  nextPageToken: string;
}

/** Request message for the `BatchEnableServices` method. */
export interface BatchEnableServicesRequest {
  /**
   * Parent to enable services on.
   *
   * An example name would be:
   * `projects/123`
   * where `123` is the project number (not project ID).
   *
   * The `BatchEnableServices` method currently only supports projects.
   */
  parent: string;
  /**
   * The identifiers of the services to enable on the project.
   *
   * A valid identifier would be:
   * serviceusage.googleapis.com
   *
   * Enabling services requires that each service is public or is shared with
   * the user enabling the service.
   *
   * Two or more services must be specified. To enable a single service,
   * use the `EnableService` method instead.
   *
   * A single request can enable a maximum of 20 services at a time. If more
   * than 20 services are specified, the request will fail, and no state changes
   * will occur.
   */
  serviceIds: string[];
}

/** Request message for ListConsumerQuotaMetrics */
export interface ListConsumerQuotaMetricsRequest {
  /**
   * Parent of the quotas resource.
   *
   * Some example names would be:
   * `projects/123/services/serviceconsumermanagement.googleapis.com`
   * `folders/345/services/serviceconsumermanagement.googleapis.com`
   * `organizations/456/services/serviceconsumermanagement.googleapis.com`
   */
  parent: string;
  /** Requested size of the next page of data. */
  pageSize: number;
  /**
   * Token identifying which result to start with; returned by a previous list
   * call.
   */
  pageToken: string;
  /** Specifies the level of detail for quota information in the response. */
  view: QuotaView;
}

/** Response message for ListConsumerQuotaMetrics */
export interface ListConsumerQuotaMetricsResponse {
  /** Quota settings for the consumer, organized by quota metric. */
  metrics: ConsumerQuotaMetric[];
  /**
   * Token identifying which result to start with; returned by a previous list
   * call.
   */
  nextPageToken: string;
}

/** Request message for GetConsumerQuotaMetric */
export interface GetConsumerQuotaMetricRequest {
  /**
   * The resource name of the quota limit.
   *
   * An example name would be:
   * `projects/123/services/serviceusage.googleapis.com/quotas/metrics/serviceusage.googleapis.com%2Fmutate_requests`
   */
  name: string;
  /** Specifies the level of detail for quota information in the response. */
  view: QuotaView;
}

/** Request message for GetConsumerQuotaLimit */
export interface GetConsumerQuotaLimitRequest {
  /**
   * The resource name of the quota limit.
   *
   * Use the quota limit resource name returned by previous
   * ListConsumerQuotaMetrics and GetConsumerQuotaMetric API calls.
   */
  name: string;
  /** Specifies the level of detail for quota information in the response. */
  view: QuotaView;
}

/** Request message for CreateAdminOverride. */
export interface CreateAdminOverrideRequest {
  /**
   * The resource name of the parent quota limit, returned by a
   * ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
   *
   * An example name would be:
   * `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
   */
  parent: string;
  /** The admin override to create. */
  override:
    | QuotaOverride
    | undefined;
  /**
   * Whether to force the creation of the quota override.
   * Setting the force parameter to 'true' ignores all quota safety checks that
   * would fail the request. QuotaSafetyCheck lists all such validations.
   */
  force: boolean;
  /**
   * The list of quota safety checks to ignore before the override mutation.
   * Unlike 'force' field that ignores all the quota safety checks, the
   * 'force_only' field ignores only the specified checks; other checks are
   * still enforced. The 'force' and 'force_only' fields cannot both be set.
   */
  forceOnly: QuotaSafetyCheck[];
}

/** Request message for UpdateAdminOverride. */
export interface UpdateAdminOverrideRequest {
  /**
   * The resource name of the override to update.
   *
   * An example name would be:
   * `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/adminOverrides/4a3f2c1d`
   */
  name: string;
  /**
   * The new override.
   * Only the override_value is updated; all other fields are ignored.
   */
  override:
    | QuotaOverride
    | undefined;
  /**
   * Whether to force the update of the quota override.
   * Setting the force parameter to 'true' ignores all quota safety checks that
   * would fail the request. QuotaSafetyCheck lists all such validations.
   */
  force: boolean;
  /**
   * Update only the specified fields of the override.
   * If unset, all fields will be updated.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * The list of quota safety checks to ignore before the override mutation.
   * Unlike 'force' field that ignores all the quota safety checks, the
   * 'force_only' field ignores only the specified checks; other checks are
   * still enforced. The 'force' and 'force_only' fields cannot both be set.
   */
  forceOnly: QuotaSafetyCheck[];
}

/** Request message for DeleteAdminOverride. */
export interface DeleteAdminOverrideRequest {
  /**
   * The resource name of the override to delete.
   *
   * An example name would be:
   * `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/adminOverrides/4a3f2c1d`
   */
  name: string;
  /**
   * Whether to force the deletion of the quota override.
   * Setting the force parameter to 'true' ignores all quota safety checks that
   * would fail the request. QuotaSafetyCheck lists all such validations.
   */
  force: boolean;
  /**
   * The list of quota safety checks to ignore before the override mutation.
   * Unlike 'force' field that ignores all the quota safety checks, the
   * 'force_only' field ignores only the specified checks; other checks are
   * still enforced. The 'force' and 'force_only' fields cannot both be set.
   */
  forceOnly: QuotaSafetyCheck[];
}

/** Request message for ListAdminOverrides */
export interface ListAdminOverridesRequest {
  /**
   * The resource name of the parent quota limit, returned by a
   * ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
   *
   * An example name would be:
   * `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
   */
  parent: string;
  /** Requested size of the next page of data. */
  pageSize: number;
  /**
   * Token identifying which result to start with; returned by a previous list
   * call.
   */
  pageToken: string;
}

/** Response message for ListAdminOverrides. */
export interface ListAdminOverridesResponse {
  /** Admin overrides on this limit. */
  overrides: QuotaOverride[];
  /**
   * Token identifying which result to start with; returned by a previous list
   * call.
   */
  nextPageToken: string;
}

/** Response message for BatchCreateAdminOverrides */
export interface BatchCreateAdminOverridesResponse {
  /** The overrides that were created. */
  overrides: QuotaOverride[];
}

/** Request message for ImportAdminOverrides */
export interface ImportAdminOverridesRequest {
  /**
   * The resource name of the consumer.
   *
   * An example name would be:
   * `projects/123/services/compute.googleapis.com`
   */
  parent: string;
  /** The import data is specified in the request message itself */
  inlineSource?:
    | OverrideInlineSource
    | undefined;
  /**
   * Whether to force the creation of the quota overrides.
   * Setting the force parameter to 'true' ignores all quota safety checks that
   * would fail the request. QuotaSafetyCheck lists all such validations.
   */
  force: boolean;
  /**
   * The list of quota safety checks to ignore before the override mutation.
   * Unlike 'force' field that ignores all the quota safety checks, the
   * 'force_only' field ignores only the specified checks; other checks are
   * still enforced. The 'force' and 'force_only' fields cannot both be set.
   */
  forceOnly: QuotaSafetyCheck[];
}

/** Response message for ImportAdminOverrides */
export interface ImportAdminOverridesResponse {
  /** The overrides that were created from the imported data. */
  overrides: QuotaOverride[];
}

/**
 * Metadata message that provides information such as progress,
 * partial failures, and similar information on each GetOperation call
 * of LRO returned by ImportAdminOverrides.
 */
export interface ImportAdminOverridesMetadata {
}

/** Request message for CreateConsumerOverride. */
export interface CreateConsumerOverrideRequest {
  /**
   * The resource name of the parent quota limit, returned by a
   * ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
   *
   * An example name would be:
   * `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
   */
  parent: string;
  /** The override to create. */
  override:
    | QuotaOverride
    | undefined;
  /**
   * Whether to force the creation of the quota override.
   * Setting the force parameter to 'true' ignores all quota safety checks that
   * would fail the request. QuotaSafetyCheck lists all such validations.
   */
  force: boolean;
  /**
   * The list of quota safety checks to ignore before the override mutation.
   * Unlike 'force' field that ignores all the quota safety checks, the
   * 'force_only' field ignores only the specified checks; other checks are
   * still enforced. The 'force' and 'force_only' fields cannot both be set.
   */
  forceOnly: QuotaSafetyCheck[];
}

/** Request message for UpdateConsumerOverride. */
export interface UpdateConsumerOverrideRequest {
  /**
   * The resource name of the override to update.
   *
   * An example name would be:
   * `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/consumerOverrides/4a3f2c1d`
   */
  name: string;
  /**
   * The new override.
   * Only the override_value is updated; all other fields are ignored.
   */
  override:
    | QuotaOverride
    | undefined;
  /**
   * Whether to force the update of the quota override.
   * Setting the force parameter to 'true' ignores all quota safety checks that
   * would fail the request. QuotaSafetyCheck lists all such validations.
   */
  force: boolean;
  /**
   * Update only the specified fields of the override.
   * If unset, all fields will be updated.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * The list of quota safety checks to ignore before the override mutation.
   * Unlike 'force' field that ignores all the quota safety checks, the
   * 'force_only' field ignores only the specified checks; other checks are
   * still enforced. The 'force' and 'force_only' fields cannot both be set.
   */
  forceOnly: QuotaSafetyCheck[];
}

/** Request message for DeleteConsumerOverride. */
export interface DeleteConsumerOverrideRequest {
  /**
   * The resource name of the override to delete.
   *
   * An example name would be:
   * `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/consumerOverrides/4a3f2c1d`
   */
  name: string;
  /**
   * Whether to force the deletion of the quota override.
   * Setting the force parameter to 'true' ignores all quota safety checks that
   * would fail the request. QuotaSafetyCheck lists all such validations.
   */
  force: boolean;
  /**
   * The list of quota safety checks to ignore before the override mutation.
   * Unlike 'force' field that ignores all the quota safety checks, the
   * 'force_only' field ignores only the specified checks; other checks are
   * still enforced. The 'force' and 'force_only' fields cannot both be set.
   */
  forceOnly: QuotaSafetyCheck[];
}

/** Request message for ListConsumerOverrides */
export interface ListConsumerOverridesRequest {
  /**
   * The resource name of the parent quota limit, returned by a
   * ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
   *
   * An example name would be:
   * `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
   */
  parent: string;
  /** Requested size of the next page of data. */
  pageSize: number;
  /**
   * Token identifying which result to start with; returned by a previous list
   * call.
   */
  pageToken: string;
}

/** Response message for ListConsumerOverrides. */
export interface ListConsumerOverridesResponse {
  /** Consumer overrides on this limit. */
  overrides: QuotaOverride[];
  /**
   * Token identifying which result to start with; returned by a previous list
   * call.
   */
  nextPageToken: string;
}

/** Response message for BatchCreateConsumerOverrides */
export interface BatchCreateConsumerOverridesResponse {
  /** The overrides that were created. */
  overrides: QuotaOverride[];
}

/** Request message for ImportConsumerOverrides */
export interface ImportConsumerOverridesRequest {
  /**
   * The resource name of the consumer.
   *
   * An example name would be:
   * `projects/123/services/compute.googleapis.com`
   */
  parent: string;
  /** The import data is specified in the request message itself */
  inlineSource?:
    | OverrideInlineSource
    | undefined;
  /**
   * Whether to force the creation of the quota overrides.
   * Setting the force parameter to 'true' ignores all quota safety checks that
   * would fail the request. QuotaSafetyCheck lists all such validations.
   */
  force: boolean;
  /**
   * The list of quota safety checks to ignore before the override mutation.
   * Unlike 'force' field that ignores all the quota safety checks, the
   * 'force_only' field ignores only the specified checks; other checks are
   * still enforced. The 'force' and 'force_only' fields cannot both be set.
   */
  forceOnly: QuotaSafetyCheck[];
}

/** Response message for ImportConsumerOverrides */
export interface ImportConsumerOverridesResponse {
  /** The overrides that were created from the imported data. */
  overrides: QuotaOverride[];
}

/**
 * Metadata message that provides information such as progress,
 * partial failures, and similar information on each GetOperation call
 * of LRO returned by ImportConsumerOverrides.
 */
export interface ImportConsumerOverridesMetadata {
}

/** Response message for ImportAdminQuotaPolicies */
export interface ImportAdminQuotaPoliciesResponse {
  /** The policies that were created from the imported data. */
  policies: AdminQuotaPolicy[];
}

/**
 * Metadata message that provides information such as progress,
 * partial failures, and similar information on each GetOperation call
 * of LRO returned by ImportAdminQuotaPolicies.
 */
export interface ImportAdminQuotaPoliciesMetadata {
}

/**
 * Metadata message that provides information such as progress,
 * partial failures, and similar information on each GetOperation call
 * of LRO returned by CreateAdminQuotaPolicy.
 */
export interface CreateAdminQuotaPolicyMetadata {
}

/**
 * Metadata message that provides information such as progress,
 * partial failures, and similar information on each GetOperation call
 * of LRO returned by UpdateAdminQuotaPolicy.
 */
export interface UpdateAdminQuotaPolicyMetadata {
}

/**
 * Metadata message that provides information such as progress,
 * partial failures, and similar information on each GetOperation call
 * of LRO returned by DeleteAdminQuotaPolicy.
 */
export interface DeleteAdminQuotaPolicyMetadata {
}

/** Request message for generating service identity. */
export interface GenerateServiceIdentityRequest {
  /**
   * Name of the consumer and service to generate an identity for.
   *
   * The `GenerateServiceIdentity` methods currently support projects, folders,
   * organizations.
   *
   * Example parents would be:
   * `projects/123/services/example.googleapis.com`
   * `folders/123/services/example.googleapis.com`
   * `organizations/123/services/example.googleapis.com`
   */
  parent: string;
}

/** Response message for getting service identity. */
export interface GetServiceIdentityResponse {
  /**
   * Service identity that service producer can use to access consumer
   * resources. If exists is true, it contains email and unique_id. If exists is
   * false, it contains pre-constructed email and empty unique_id.
   */
  identity:
    | ServiceIdentity
    | undefined;
  /** Service identity state. */
  state: GetServiceIdentityResponse_IdentityState;
}

/** Enum for service identity state. */
export enum GetServiceIdentityResponse_IdentityState {
  /**
   * IDENTITY_STATE_UNSPECIFIED - Default service identity state. This value is used if the state is
   * omitted.
   */
  IDENTITY_STATE_UNSPECIFIED = 0,
  /** ACTIVE - Service identity has been created and can be used. */
  ACTIVE = 1,
  UNRECOGNIZED = -1,
}

export function getServiceIdentityResponse_IdentityStateFromJSON(
  object: any,
): GetServiceIdentityResponse_IdentityState {
  switch (object) {
    case 0:
    case "IDENTITY_STATE_UNSPECIFIED":
      return GetServiceIdentityResponse_IdentityState.IDENTITY_STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return GetServiceIdentityResponse_IdentityState.ACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GetServiceIdentityResponse_IdentityState.UNRECOGNIZED;
  }
}

export function getServiceIdentityResponse_IdentityStateToJSON(
  object: GetServiceIdentityResponse_IdentityState,
): string {
  switch (object) {
    case GetServiceIdentityResponse_IdentityState.IDENTITY_STATE_UNSPECIFIED:
      return "IDENTITY_STATE_UNSPECIFIED";
    case GetServiceIdentityResponse_IdentityState.ACTIVE:
      return "ACTIVE";
    case GetServiceIdentityResponse_IdentityState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Metadata for the `GetServiceIdentity` method. */
export interface GetServiceIdentityMetadata {
}

function createBaseEnableServiceRequest(): EnableServiceRequest {
  return { name: "" };
}

export const EnableServiceRequest: MessageFns<EnableServiceRequest> = {
  encode(message: EnableServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnableServiceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: EnableServiceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<EnableServiceRequest>): EnableServiceRequest {
    return EnableServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnableServiceRequest>): EnableServiceRequest {
    const message = createBaseEnableServiceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDisableServiceRequest(): DisableServiceRequest {
  return { name: "" };
}

export const DisableServiceRequest: MessageFns<DisableServiceRequest> = {
  encode(message: DisableServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisableServiceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DisableServiceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DisableServiceRequest>): DisableServiceRequest {
    return DisableServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DisableServiceRequest>): DisableServiceRequest {
    const message = createBaseDisableServiceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetServiceRequest(): GetServiceRequest {
  return { name: "" };
}

export const GetServiceRequest: MessageFns<GetServiceRequest> = {
  encode(message: GetServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServiceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetServiceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetServiceRequest>): GetServiceRequest {
    return GetServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServiceRequest>): GetServiceRequest {
    const message = createBaseGetServiceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListServicesRequest(): ListServicesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListServicesRequest: MessageFns<ListServicesRequest> = {
  encode(message: ListServicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServicesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListServicesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServicesRequest>): ListServicesRequest {
    return ListServicesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServicesRequest>): ListServicesRequest {
    const message = createBaseListServicesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListServicesResponse(): ListServicesResponse {
  return { services: [], nextPageToken: "" };
}

export const ListServicesResponse: MessageFns<ListServicesResponse> = {
  encode(message: ListServicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.services) {
      Service.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.services.push(Service.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServicesResponse {
    return {
      services: globalThis.Array.isArray(object?.services) ? object.services.map((e: any) => Service.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListServicesResponse): unknown {
    const obj: any = {};
    if (message.services?.length) {
      obj.services = message.services.map((e) => Service.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServicesResponse>): ListServicesResponse {
    return ListServicesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServicesResponse>): ListServicesResponse {
    const message = createBaseListServicesResponse();
    message.services = object.services?.map((e) => Service.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseBatchEnableServicesRequest(): BatchEnableServicesRequest {
  return { parent: "", serviceIds: [] };
}

export const BatchEnableServicesRequest: MessageFns<BatchEnableServicesRequest> = {
  encode(message: BatchEnableServicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.serviceIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchEnableServicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchEnableServicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchEnableServicesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      serviceIds: globalThis.Array.isArray(object?.serviceIds)
        ? object.serviceIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: BatchEnableServicesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.serviceIds?.length) {
      obj.serviceIds = message.serviceIds;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchEnableServicesRequest>): BatchEnableServicesRequest {
    return BatchEnableServicesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchEnableServicesRequest>): BatchEnableServicesRequest {
    const message = createBaseBatchEnableServicesRequest();
    message.parent = object.parent ?? "";
    message.serviceIds = object.serviceIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseListConsumerQuotaMetricsRequest(): ListConsumerQuotaMetricsRequest {
  return { parent: "", pageSize: 0, pageToken: "", view: 0 };
}

export const ListConsumerQuotaMetricsRequest: MessageFns<ListConsumerQuotaMetricsRequest> = {
  encode(message: ListConsumerQuotaMetricsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.view !== 0) {
      writer.uint32(32).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConsumerQuotaMetricsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConsumerQuotaMetricsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConsumerQuotaMetricsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      view: isSet(object.view) ? quotaViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: ListConsumerQuotaMetricsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.view !== 0) {
      obj.view = quotaViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<ListConsumerQuotaMetricsRequest>): ListConsumerQuotaMetricsRequest {
    return ListConsumerQuotaMetricsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConsumerQuotaMetricsRequest>): ListConsumerQuotaMetricsRequest {
    const message = createBaseListConsumerQuotaMetricsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseListConsumerQuotaMetricsResponse(): ListConsumerQuotaMetricsResponse {
  return { metrics: [], nextPageToken: "" };
}

export const ListConsumerQuotaMetricsResponse: MessageFns<ListConsumerQuotaMetricsResponse> = {
  encode(message: ListConsumerQuotaMetricsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.metrics) {
      ConsumerQuotaMetric.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConsumerQuotaMetricsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConsumerQuotaMetricsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metrics.push(ConsumerQuotaMetric.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConsumerQuotaMetricsResponse {
    return {
      metrics: globalThis.Array.isArray(object?.metrics)
        ? object.metrics.map((e: any) => ConsumerQuotaMetric.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListConsumerQuotaMetricsResponse): unknown {
    const obj: any = {};
    if (message.metrics?.length) {
      obj.metrics = message.metrics.map((e) => ConsumerQuotaMetric.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConsumerQuotaMetricsResponse>): ListConsumerQuotaMetricsResponse {
    return ListConsumerQuotaMetricsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConsumerQuotaMetricsResponse>): ListConsumerQuotaMetricsResponse {
    const message = createBaseListConsumerQuotaMetricsResponse();
    message.metrics = object.metrics?.map((e) => ConsumerQuotaMetric.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetConsumerQuotaMetricRequest(): GetConsumerQuotaMetricRequest {
  return { name: "", view: 0 };
}

export const GetConsumerQuotaMetricRequest: MessageFns<GetConsumerQuotaMetricRequest> = {
  encode(message: GetConsumerQuotaMetricRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.view !== 0) {
      writer.uint32(16).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConsumerQuotaMetricRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConsumerQuotaMetricRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetConsumerQuotaMetricRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      view: isSet(object.view) ? quotaViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: GetConsumerQuotaMetricRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.view !== 0) {
      obj.view = quotaViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<GetConsumerQuotaMetricRequest>): GetConsumerQuotaMetricRequest {
    return GetConsumerQuotaMetricRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetConsumerQuotaMetricRequest>): GetConsumerQuotaMetricRequest {
    const message = createBaseGetConsumerQuotaMetricRequest();
    message.name = object.name ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseGetConsumerQuotaLimitRequest(): GetConsumerQuotaLimitRequest {
  return { name: "", view: 0 };
}

export const GetConsumerQuotaLimitRequest: MessageFns<GetConsumerQuotaLimitRequest> = {
  encode(message: GetConsumerQuotaLimitRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.view !== 0) {
      writer.uint32(16).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConsumerQuotaLimitRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConsumerQuotaLimitRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetConsumerQuotaLimitRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      view: isSet(object.view) ? quotaViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: GetConsumerQuotaLimitRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.view !== 0) {
      obj.view = quotaViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<GetConsumerQuotaLimitRequest>): GetConsumerQuotaLimitRequest {
    return GetConsumerQuotaLimitRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetConsumerQuotaLimitRequest>): GetConsumerQuotaLimitRequest {
    const message = createBaseGetConsumerQuotaLimitRequest();
    message.name = object.name ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseCreateAdminOverrideRequest(): CreateAdminOverrideRequest {
  return { parent: "", override: undefined, force: false, forceOnly: [] };
}

export const CreateAdminOverrideRequest: MessageFns<CreateAdminOverrideRequest> = {
  encode(message: CreateAdminOverrideRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.override !== undefined) {
      QuotaOverride.encode(message.override, writer.uint32(18).fork()).join();
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    writer.uint32(34).fork();
    for (const v of message.forceOnly) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAdminOverrideRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAdminOverrideRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.override = QuotaOverride.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
        case 4:
          if (tag === 32) {
            message.forceOnly.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.forceOnly.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAdminOverrideRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      override: isSet(object.override) ? QuotaOverride.fromJSON(object.override) : undefined,
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
      forceOnly: globalThis.Array.isArray(object?.forceOnly)
        ? object.forceOnly.map((e: any) => quotaSafetyCheckFromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateAdminOverrideRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.override !== undefined) {
      obj.override = QuotaOverride.toJSON(message.override);
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    if (message.forceOnly?.length) {
      obj.forceOnly = message.forceOnly.map((e) => quotaSafetyCheckToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAdminOverrideRequest>): CreateAdminOverrideRequest {
    return CreateAdminOverrideRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAdminOverrideRequest>): CreateAdminOverrideRequest {
    const message = createBaseCreateAdminOverrideRequest();
    message.parent = object.parent ?? "";
    message.override = (object.override !== undefined && object.override !== null)
      ? QuotaOverride.fromPartial(object.override)
      : undefined;
    message.force = object.force ?? false;
    message.forceOnly = object.forceOnly?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateAdminOverrideRequest(): UpdateAdminOverrideRequest {
  return { name: "", override: undefined, force: false, updateMask: undefined, forceOnly: [] };
}

export const UpdateAdminOverrideRequest: MessageFns<UpdateAdminOverrideRequest> = {
  encode(message: UpdateAdminOverrideRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.override !== undefined) {
      QuotaOverride.encode(message.override, writer.uint32(18).fork()).join();
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    writer.uint32(42).fork();
    for (const v of message.forceOnly) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAdminOverrideRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAdminOverrideRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.override = QuotaOverride.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag === 40) {
            message.forceOnly.push(reader.int32() as any);

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.forceOnly.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAdminOverrideRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      override: isSet(object.override) ? QuotaOverride.fromJSON(object.override) : undefined,
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      forceOnly: globalThis.Array.isArray(object?.forceOnly)
        ? object.forceOnly.map((e: any) => quotaSafetyCheckFromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateAdminOverrideRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.override !== undefined) {
      obj.override = QuotaOverride.toJSON(message.override);
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.forceOnly?.length) {
      obj.forceOnly = message.forceOnly.map((e) => quotaSafetyCheckToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAdminOverrideRequest>): UpdateAdminOverrideRequest {
    return UpdateAdminOverrideRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAdminOverrideRequest>): UpdateAdminOverrideRequest {
    const message = createBaseUpdateAdminOverrideRequest();
    message.name = object.name ?? "";
    message.override = (object.override !== undefined && object.override !== null)
      ? QuotaOverride.fromPartial(object.override)
      : undefined;
    message.force = object.force ?? false;
    message.updateMask = object.updateMask ?? undefined;
    message.forceOnly = object.forceOnly?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeleteAdminOverrideRequest(): DeleteAdminOverrideRequest {
  return { name: "", force: false, forceOnly: [] };
}

export const DeleteAdminOverrideRequest: MessageFns<DeleteAdminOverrideRequest> = {
  encode(message: DeleteAdminOverrideRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    writer.uint32(26).fork();
    for (const v of message.forceOnly) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAdminOverrideRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAdminOverrideRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
        case 3:
          if (tag === 24) {
            message.forceOnly.push(reader.int32() as any);

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.forceOnly.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAdminOverrideRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
      forceOnly: globalThis.Array.isArray(object?.forceOnly)
        ? object.forceOnly.map((e: any) => quotaSafetyCheckFromJSON(e))
        : [],
    };
  },

  toJSON(message: DeleteAdminOverrideRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    if (message.forceOnly?.length) {
      obj.forceOnly = message.forceOnly.map((e) => quotaSafetyCheckToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAdminOverrideRequest>): DeleteAdminOverrideRequest {
    return DeleteAdminOverrideRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAdminOverrideRequest>): DeleteAdminOverrideRequest {
    const message = createBaseDeleteAdminOverrideRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    message.forceOnly = object.forceOnly?.map((e) => e) || [];
    return message;
  },
};

function createBaseListAdminOverridesRequest(): ListAdminOverridesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAdminOverridesRequest: MessageFns<ListAdminOverridesRequest> = {
  encode(message: ListAdminOverridesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAdminOverridesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAdminOverridesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAdminOverridesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAdminOverridesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAdminOverridesRequest>): ListAdminOverridesRequest {
    return ListAdminOverridesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAdminOverridesRequest>): ListAdminOverridesRequest {
    const message = createBaseListAdminOverridesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAdminOverridesResponse(): ListAdminOverridesResponse {
  return { overrides: [], nextPageToken: "" };
}

export const ListAdminOverridesResponse: MessageFns<ListAdminOverridesResponse> = {
  encode(message: ListAdminOverridesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.overrides) {
      QuotaOverride.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAdminOverridesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAdminOverridesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.overrides.push(QuotaOverride.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAdminOverridesResponse {
    return {
      overrides: globalThis.Array.isArray(object?.overrides)
        ? object.overrides.map((e: any) => QuotaOverride.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAdminOverridesResponse): unknown {
    const obj: any = {};
    if (message.overrides?.length) {
      obj.overrides = message.overrides.map((e) => QuotaOverride.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAdminOverridesResponse>): ListAdminOverridesResponse {
    return ListAdminOverridesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAdminOverridesResponse>): ListAdminOverridesResponse {
    const message = createBaseListAdminOverridesResponse();
    message.overrides = object.overrides?.map((e) => QuotaOverride.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseBatchCreateAdminOverridesResponse(): BatchCreateAdminOverridesResponse {
  return { overrides: [] };
}

export const BatchCreateAdminOverridesResponse: MessageFns<BatchCreateAdminOverridesResponse> = {
  encode(message: BatchCreateAdminOverridesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.overrides) {
      QuotaOverride.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateAdminOverridesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateAdminOverridesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.overrides.push(QuotaOverride.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateAdminOverridesResponse {
    return {
      overrides: globalThis.Array.isArray(object?.overrides)
        ? object.overrides.map((e: any) => QuotaOverride.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateAdminOverridesResponse): unknown {
    const obj: any = {};
    if (message.overrides?.length) {
      obj.overrides = message.overrides.map((e) => QuotaOverride.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateAdminOverridesResponse>): BatchCreateAdminOverridesResponse {
    return BatchCreateAdminOverridesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateAdminOverridesResponse>): BatchCreateAdminOverridesResponse {
    const message = createBaseBatchCreateAdminOverridesResponse();
    message.overrides = object.overrides?.map((e) => QuotaOverride.fromPartial(e)) || [];
    return message;
  },
};

function createBaseImportAdminOverridesRequest(): ImportAdminOverridesRequest {
  return { parent: "", inlineSource: undefined, force: false, forceOnly: [] };
}

export const ImportAdminOverridesRequest: MessageFns<ImportAdminOverridesRequest> = {
  encode(message: ImportAdminOverridesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.inlineSource !== undefined) {
      OverrideInlineSource.encode(message.inlineSource, writer.uint32(18).fork()).join();
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    writer.uint32(34).fork();
    for (const v of message.forceOnly) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportAdminOverridesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportAdminOverridesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.inlineSource = OverrideInlineSource.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
        case 4:
          if (tag === 32) {
            message.forceOnly.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.forceOnly.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportAdminOverridesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      inlineSource: isSet(object.inlineSource) ? OverrideInlineSource.fromJSON(object.inlineSource) : undefined,
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
      forceOnly: globalThis.Array.isArray(object?.forceOnly)
        ? object.forceOnly.map((e: any) => quotaSafetyCheckFromJSON(e))
        : [],
    };
  },

  toJSON(message: ImportAdminOverridesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.inlineSource !== undefined) {
      obj.inlineSource = OverrideInlineSource.toJSON(message.inlineSource);
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    if (message.forceOnly?.length) {
      obj.forceOnly = message.forceOnly.map((e) => quotaSafetyCheckToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ImportAdminOverridesRequest>): ImportAdminOverridesRequest {
    return ImportAdminOverridesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportAdminOverridesRequest>): ImportAdminOverridesRequest {
    const message = createBaseImportAdminOverridesRequest();
    message.parent = object.parent ?? "";
    message.inlineSource = (object.inlineSource !== undefined && object.inlineSource !== null)
      ? OverrideInlineSource.fromPartial(object.inlineSource)
      : undefined;
    message.force = object.force ?? false;
    message.forceOnly = object.forceOnly?.map((e) => e) || [];
    return message;
  },
};

function createBaseImportAdminOverridesResponse(): ImportAdminOverridesResponse {
  return { overrides: [] };
}

export const ImportAdminOverridesResponse: MessageFns<ImportAdminOverridesResponse> = {
  encode(message: ImportAdminOverridesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.overrides) {
      QuotaOverride.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportAdminOverridesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportAdminOverridesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.overrides.push(QuotaOverride.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportAdminOverridesResponse {
    return {
      overrides: globalThis.Array.isArray(object?.overrides)
        ? object.overrides.map((e: any) => QuotaOverride.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ImportAdminOverridesResponse): unknown {
    const obj: any = {};
    if (message.overrides?.length) {
      obj.overrides = message.overrides.map((e) => QuotaOverride.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ImportAdminOverridesResponse>): ImportAdminOverridesResponse {
    return ImportAdminOverridesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportAdminOverridesResponse>): ImportAdminOverridesResponse {
    const message = createBaseImportAdminOverridesResponse();
    message.overrides = object.overrides?.map((e) => QuotaOverride.fromPartial(e)) || [];
    return message;
  },
};

function createBaseImportAdminOverridesMetadata(): ImportAdminOverridesMetadata {
  return {};
}

export const ImportAdminOverridesMetadata: MessageFns<ImportAdminOverridesMetadata> = {
  encode(_: ImportAdminOverridesMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportAdminOverridesMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportAdminOverridesMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ImportAdminOverridesMetadata {
    return {};
  },

  toJSON(_: ImportAdminOverridesMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ImportAdminOverridesMetadata>): ImportAdminOverridesMetadata {
    return ImportAdminOverridesMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ImportAdminOverridesMetadata>): ImportAdminOverridesMetadata {
    const message = createBaseImportAdminOverridesMetadata();
    return message;
  },
};

function createBaseCreateConsumerOverrideRequest(): CreateConsumerOverrideRequest {
  return { parent: "", override: undefined, force: false, forceOnly: [] };
}

export const CreateConsumerOverrideRequest: MessageFns<CreateConsumerOverrideRequest> = {
  encode(message: CreateConsumerOverrideRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.override !== undefined) {
      QuotaOverride.encode(message.override, writer.uint32(18).fork()).join();
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    writer.uint32(34).fork();
    for (const v of message.forceOnly) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConsumerOverrideRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConsumerOverrideRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.override = QuotaOverride.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
        case 4:
          if (tag === 32) {
            message.forceOnly.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.forceOnly.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateConsumerOverrideRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      override: isSet(object.override) ? QuotaOverride.fromJSON(object.override) : undefined,
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
      forceOnly: globalThis.Array.isArray(object?.forceOnly)
        ? object.forceOnly.map((e: any) => quotaSafetyCheckFromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateConsumerOverrideRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.override !== undefined) {
      obj.override = QuotaOverride.toJSON(message.override);
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    if (message.forceOnly?.length) {
      obj.forceOnly = message.forceOnly.map((e) => quotaSafetyCheckToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CreateConsumerOverrideRequest>): CreateConsumerOverrideRequest {
    return CreateConsumerOverrideRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateConsumerOverrideRequest>): CreateConsumerOverrideRequest {
    const message = createBaseCreateConsumerOverrideRequest();
    message.parent = object.parent ?? "";
    message.override = (object.override !== undefined && object.override !== null)
      ? QuotaOverride.fromPartial(object.override)
      : undefined;
    message.force = object.force ?? false;
    message.forceOnly = object.forceOnly?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateConsumerOverrideRequest(): UpdateConsumerOverrideRequest {
  return { name: "", override: undefined, force: false, updateMask: undefined, forceOnly: [] };
}

export const UpdateConsumerOverrideRequest: MessageFns<UpdateConsumerOverrideRequest> = {
  encode(message: UpdateConsumerOverrideRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.override !== undefined) {
      QuotaOverride.encode(message.override, writer.uint32(18).fork()).join();
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    writer.uint32(42).fork();
    for (const v of message.forceOnly) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateConsumerOverrideRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateConsumerOverrideRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.override = QuotaOverride.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag === 40) {
            message.forceOnly.push(reader.int32() as any);

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.forceOnly.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateConsumerOverrideRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      override: isSet(object.override) ? QuotaOverride.fromJSON(object.override) : undefined,
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      forceOnly: globalThis.Array.isArray(object?.forceOnly)
        ? object.forceOnly.map((e: any) => quotaSafetyCheckFromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateConsumerOverrideRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.override !== undefined) {
      obj.override = QuotaOverride.toJSON(message.override);
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.forceOnly?.length) {
      obj.forceOnly = message.forceOnly.map((e) => quotaSafetyCheckToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateConsumerOverrideRequest>): UpdateConsumerOverrideRequest {
    return UpdateConsumerOverrideRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateConsumerOverrideRequest>): UpdateConsumerOverrideRequest {
    const message = createBaseUpdateConsumerOverrideRequest();
    message.name = object.name ?? "";
    message.override = (object.override !== undefined && object.override !== null)
      ? QuotaOverride.fromPartial(object.override)
      : undefined;
    message.force = object.force ?? false;
    message.updateMask = object.updateMask ?? undefined;
    message.forceOnly = object.forceOnly?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeleteConsumerOverrideRequest(): DeleteConsumerOverrideRequest {
  return { name: "", force: false, forceOnly: [] };
}

export const DeleteConsumerOverrideRequest: MessageFns<DeleteConsumerOverrideRequest> = {
  encode(message: DeleteConsumerOverrideRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    writer.uint32(26).fork();
    for (const v of message.forceOnly) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteConsumerOverrideRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConsumerOverrideRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
        case 3:
          if (tag === 24) {
            message.forceOnly.push(reader.int32() as any);

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.forceOnly.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteConsumerOverrideRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
      forceOnly: globalThis.Array.isArray(object?.forceOnly)
        ? object.forceOnly.map((e: any) => quotaSafetyCheckFromJSON(e))
        : [],
    };
  },

  toJSON(message: DeleteConsumerOverrideRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    if (message.forceOnly?.length) {
      obj.forceOnly = message.forceOnly.map((e) => quotaSafetyCheckToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteConsumerOverrideRequest>): DeleteConsumerOverrideRequest {
    return DeleteConsumerOverrideRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteConsumerOverrideRequest>): DeleteConsumerOverrideRequest {
    const message = createBaseDeleteConsumerOverrideRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    message.forceOnly = object.forceOnly?.map((e) => e) || [];
    return message;
  },
};

function createBaseListConsumerOverridesRequest(): ListConsumerOverridesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListConsumerOverridesRequest: MessageFns<ListConsumerOverridesRequest> = {
  encode(message: ListConsumerOverridesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConsumerOverridesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConsumerOverridesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConsumerOverridesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListConsumerOverridesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConsumerOverridesRequest>): ListConsumerOverridesRequest {
    return ListConsumerOverridesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConsumerOverridesRequest>): ListConsumerOverridesRequest {
    const message = createBaseListConsumerOverridesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListConsumerOverridesResponse(): ListConsumerOverridesResponse {
  return { overrides: [], nextPageToken: "" };
}

export const ListConsumerOverridesResponse: MessageFns<ListConsumerOverridesResponse> = {
  encode(message: ListConsumerOverridesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.overrides) {
      QuotaOverride.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConsumerOverridesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConsumerOverridesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.overrides.push(QuotaOverride.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConsumerOverridesResponse {
    return {
      overrides: globalThis.Array.isArray(object?.overrides)
        ? object.overrides.map((e: any) => QuotaOverride.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListConsumerOverridesResponse): unknown {
    const obj: any = {};
    if (message.overrides?.length) {
      obj.overrides = message.overrides.map((e) => QuotaOverride.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConsumerOverridesResponse>): ListConsumerOverridesResponse {
    return ListConsumerOverridesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConsumerOverridesResponse>): ListConsumerOverridesResponse {
    const message = createBaseListConsumerOverridesResponse();
    message.overrides = object.overrides?.map((e) => QuotaOverride.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseBatchCreateConsumerOverridesResponse(): BatchCreateConsumerOverridesResponse {
  return { overrides: [] };
}

export const BatchCreateConsumerOverridesResponse: MessageFns<BatchCreateConsumerOverridesResponse> = {
  encode(message: BatchCreateConsumerOverridesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.overrides) {
      QuotaOverride.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateConsumerOverridesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateConsumerOverridesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.overrides.push(QuotaOverride.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateConsumerOverridesResponse {
    return {
      overrides: globalThis.Array.isArray(object?.overrides)
        ? object.overrides.map((e: any) => QuotaOverride.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateConsumerOverridesResponse): unknown {
    const obj: any = {};
    if (message.overrides?.length) {
      obj.overrides = message.overrides.map((e) => QuotaOverride.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateConsumerOverridesResponse>): BatchCreateConsumerOverridesResponse {
    return BatchCreateConsumerOverridesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateConsumerOverridesResponse>): BatchCreateConsumerOverridesResponse {
    const message = createBaseBatchCreateConsumerOverridesResponse();
    message.overrides = object.overrides?.map((e) => QuotaOverride.fromPartial(e)) || [];
    return message;
  },
};

function createBaseImportConsumerOverridesRequest(): ImportConsumerOverridesRequest {
  return { parent: "", inlineSource: undefined, force: false, forceOnly: [] };
}

export const ImportConsumerOverridesRequest: MessageFns<ImportConsumerOverridesRequest> = {
  encode(message: ImportConsumerOverridesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.inlineSource !== undefined) {
      OverrideInlineSource.encode(message.inlineSource, writer.uint32(18).fork()).join();
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    writer.uint32(34).fork();
    for (const v of message.forceOnly) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportConsumerOverridesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportConsumerOverridesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.inlineSource = OverrideInlineSource.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
        case 4:
          if (tag === 32) {
            message.forceOnly.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.forceOnly.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportConsumerOverridesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      inlineSource: isSet(object.inlineSource) ? OverrideInlineSource.fromJSON(object.inlineSource) : undefined,
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
      forceOnly: globalThis.Array.isArray(object?.forceOnly)
        ? object.forceOnly.map((e: any) => quotaSafetyCheckFromJSON(e))
        : [],
    };
  },

  toJSON(message: ImportConsumerOverridesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.inlineSource !== undefined) {
      obj.inlineSource = OverrideInlineSource.toJSON(message.inlineSource);
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    if (message.forceOnly?.length) {
      obj.forceOnly = message.forceOnly.map((e) => quotaSafetyCheckToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ImportConsumerOverridesRequest>): ImportConsumerOverridesRequest {
    return ImportConsumerOverridesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportConsumerOverridesRequest>): ImportConsumerOverridesRequest {
    const message = createBaseImportConsumerOverridesRequest();
    message.parent = object.parent ?? "";
    message.inlineSource = (object.inlineSource !== undefined && object.inlineSource !== null)
      ? OverrideInlineSource.fromPartial(object.inlineSource)
      : undefined;
    message.force = object.force ?? false;
    message.forceOnly = object.forceOnly?.map((e) => e) || [];
    return message;
  },
};

function createBaseImportConsumerOverridesResponse(): ImportConsumerOverridesResponse {
  return { overrides: [] };
}

export const ImportConsumerOverridesResponse: MessageFns<ImportConsumerOverridesResponse> = {
  encode(message: ImportConsumerOverridesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.overrides) {
      QuotaOverride.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportConsumerOverridesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportConsumerOverridesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.overrides.push(QuotaOverride.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportConsumerOverridesResponse {
    return {
      overrides: globalThis.Array.isArray(object?.overrides)
        ? object.overrides.map((e: any) => QuotaOverride.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ImportConsumerOverridesResponse): unknown {
    const obj: any = {};
    if (message.overrides?.length) {
      obj.overrides = message.overrides.map((e) => QuotaOverride.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ImportConsumerOverridesResponse>): ImportConsumerOverridesResponse {
    return ImportConsumerOverridesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportConsumerOverridesResponse>): ImportConsumerOverridesResponse {
    const message = createBaseImportConsumerOverridesResponse();
    message.overrides = object.overrides?.map((e) => QuotaOverride.fromPartial(e)) || [];
    return message;
  },
};

function createBaseImportConsumerOverridesMetadata(): ImportConsumerOverridesMetadata {
  return {};
}

export const ImportConsumerOverridesMetadata: MessageFns<ImportConsumerOverridesMetadata> = {
  encode(_: ImportConsumerOverridesMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportConsumerOverridesMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportConsumerOverridesMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ImportConsumerOverridesMetadata {
    return {};
  },

  toJSON(_: ImportConsumerOverridesMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ImportConsumerOverridesMetadata>): ImportConsumerOverridesMetadata {
    return ImportConsumerOverridesMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ImportConsumerOverridesMetadata>): ImportConsumerOverridesMetadata {
    const message = createBaseImportConsumerOverridesMetadata();
    return message;
  },
};

function createBaseImportAdminQuotaPoliciesResponse(): ImportAdminQuotaPoliciesResponse {
  return { policies: [] };
}

export const ImportAdminQuotaPoliciesResponse: MessageFns<ImportAdminQuotaPoliciesResponse> = {
  encode(message: ImportAdminQuotaPoliciesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.policies) {
      AdminQuotaPolicy.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportAdminQuotaPoliciesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportAdminQuotaPoliciesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policies.push(AdminQuotaPolicy.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportAdminQuotaPoliciesResponse {
    return {
      policies: globalThis.Array.isArray(object?.policies)
        ? object.policies.map((e: any) => AdminQuotaPolicy.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ImportAdminQuotaPoliciesResponse): unknown {
    const obj: any = {};
    if (message.policies?.length) {
      obj.policies = message.policies.map((e) => AdminQuotaPolicy.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ImportAdminQuotaPoliciesResponse>): ImportAdminQuotaPoliciesResponse {
    return ImportAdminQuotaPoliciesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportAdminQuotaPoliciesResponse>): ImportAdminQuotaPoliciesResponse {
    const message = createBaseImportAdminQuotaPoliciesResponse();
    message.policies = object.policies?.map((e) => AdminQuotaPolicy.fromPartial(e)) || [];
    return message;
  },
};

function createBaseImportAdminQuotaPoliciesMetadata(): ImportAdminQuotaPoliciesMetadata {
  return {};
}

export const ImportAdminQuotaPoliciesMetadata: MessageFns<ImportAdminQuotaPoliciesMetadata> = {
  encode(_: ImportAdminQuotaPoliciesMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportAdminQuotaPoliciesMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportAdminQuotaPoliciesMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ImportAdminQuotaPoliciesMetadata {
    return {};
  },

  toJSON(_: ImportAdminQuotaPoliciesMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ImportAdminQuotaPoliciesMetadata>): ImportAdminQuotaPoliciesMetadata {
    return ImportAdminQuotaPoliciesMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ImportAdminQuotaPoliciesMetadata>): ImportAdminQuotaPoliciesMetadata {
    const message = createBaseImportAdminQuotaPoliciesMetadata();
    return message;
  },
};

function createBaseCreateAdminQuotaPolicyMetadata(): CreateAdminQuotaPolicyMetadata {
  return {};
}

export const CreateAdminQuotaPolicyMetadata: MessageFns<CreateAdminQuotaPolicyMetadata> = {
  encode(_: CreateAdminQuotaPolicyMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAdminQuotaPolicyMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAdminQuotaPolicyMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateAdminQuotaPolicyMetadata {
    return {};
  },

  toJSON(_: CreateAdminQuotaPolicyMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CreateAdminQuotaPolicyMetadata>): CreateAdminQuotaPolicyMetadata {
    return CreateAdminQuotaPolicyMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CreateAdminQuotaPolicyMetadata>): CreateAdminQuotaPolicyMetadata {
    const message = createBaseCreateAdminQuotaPolicyMetadata();
    return message;
  },
};

function createBaseUpdateAdminQuotaPolicyMetadata(): UpdateAdminQuotaPolicyMetadata {
  return {};
}

export const UpdateAdminQuotaPolicyMetadata: MessageFns<UpdateAdminQuotaPolicyMetadata> = {
  encode(_: UpdateAdminQuotaPolicyMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAdminQuotaPolicyMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAdminQuotaPolicyMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateAdminQuotaPolicyMetadata {
    return {};
  },

  toJSON(_: UpdateAdminQuotaPolicyMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UpdateAdminQuotaPolicyMetadata>): UpdateAdminQuotaPolicyMetadata {
    return UpdateAdminQuotaPolicyMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UpdateAdminQuotaPolicyMetadata>): UpdateAdminQuotaPolicyMetadata {
    const message = createBaseUpdateAdminQuotaPolicyMetadata();
    return message;
  },
};

function createBaseDeleteAdminQuotaPolicyMetadata(): DeleteAdminQuotaPolicyMetadata {
  return {};
}

export const DeleteAdminQuotaPolicyMetadata: MessageFns<DeleteAdminQuotaPolicyMetadata> = {
  encode(_: DeleteAdminQuotaPolicyMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAdminQuotaPolicyMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAdminQuotaPolicyMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteAdminQuotaPolicyMetadata {
    return {};
  },

  toJSON(_: DeleteAdminQuotaPolicyMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeleteAdminQuotaPolicyMetadata>): DeleteAdminQuotaPolicyMetadata {
    return DeleteAdminQuotaPolicyMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteAdminQuotaPolicyMetadata>): DeleteAdminQuotaPolicyMetadata {
    const message = createBaseDeleteAdminQuotaPolicyMetadata();
    return message;
  },
};

function createBaseGenerateServiceIdentityRequest(): GenerateServiceIdentityRequest {
  return { parent: "" };
}

export const GenerateServiceIdentityRequest: MessageFns<GenerateServiceIdentityRequest> = {
  encode(message: GenerateServiceIdentityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateServiceIdentityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateServiceIdentityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateServiceIdentityRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: GenerateServiceIdentityRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateServiceIdentityRequest>): GenerateServiceIdentityRequest {
    return GenerateServiceIdentityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateServiceIdentityRequest>): GenerateServiceIdentityRequest {
    const message = createBaseGenerateServiceIdentityRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseGetServiceIdentityResponse(): GetServiceIdentityResponse {
  return { identity: undefined, state: 0 };
}

export const GetServiceIdentityResponse: MessageFns<GetServiceIdentityResponse> = {
  encode(message: GetServiceIdentityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identity !== undefined) {
      ServiceIdentity.encode(message.identity, writer.uint32(10).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServiceIdentityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServiceIdentityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.identity = ServiceIdentity.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServiceIdentityResponse {
    return {
      identity: isSet(object.identity) ? ServiceIdentity.fromJSON(object.identity) : undefined,
      state: isSet(object.state) ? getServiceIdentityResponse_IdentityStateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: GetServiceIdentityResponse): unknown {
    const obj: any = {};
    if (message.identity !== undefined) {
      obj.identity = ServiceIdentity.toJSON(message.identity);
    }
    if (message.state !== 0) {
      obj.state = getServiceIdentityResponse_IdentityStateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<GetServiceIdentityResponse>): GetServiceIdentityResponse {
    return GetServiceIdentityResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServiceIdentityResponse>): GetServiceIdentityResponse {
    const message = createBaseGetServiceIdentityResponse();
    message.identity = (object.identity !== undefined && object.identity !== null)
      ? ServiceIdentity.fromPartial(object.identity)
      : undefined;
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseGetServiceIdentityMetadata(): GetServiceIdentityMetadata {
  return {};
}

export const GetServiceIdentityMetadata: MessageFns<GetServiceIdentityMetadata> = {
  encode(_: GetServiceIdentityMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServiceIdentityMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServiceIdentityMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetServiceIdentityMetadata {
    return {};
  },

  toJSON(_: GetServiceIdentityMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetServiceIdentityMetadata>): GetServiceIdentityMetadata {
    return GetServiceIdentityMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetServiceIdentityMetadata>): GetServiceIdentityMetadata {
    const message = createBaseGetServiceIdentityMetadata();
    return message;
  },
};

/** [Service Usage API](https://cloud.google.com/service-usage/docs/overview) */
export type ServiceUsageDefinition = typeof ServiceUsageDefinition;
export const ServiceUsageDefinition = {
  name: "ServiceUsage",
  fullName: "google.api.serviceusage.v1beta1.ServiceUsage",
  methods: {
    /**
     * Enables a service so that it can be used with a project.
     *
     * Operation response type: `google.protobuf.Empty`
     *
     * @deprecated
     */
    enableService: {
      name: "EnableService",
      requestType: EnableServiceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              42,
              58,
              1,
              42,
              34,
              37,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              101,
              110,
              97,
              98,
              108,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Disables a service so that it can no longer be used with a project.
     * This prevents unintended usage that may cause unexpected billing
     * charges or security leaks.
     *
     * It is not valid to call the disable method on a service that is not
     * currently enabled. Callers will receive a `FAILED_PRECONDITION` status if
     * the target service is not currently enabled.
     *
     * Operation response type: `google.protobuf.Empty`
     *
     * @deprecated
     */
    disableService: {
      name: "DisableService",
      requestType: DisableServiceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              43,
              58,
              1,
              42,
              34,
              38,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              100,
              105,
              115,
              97,
              98,
              108,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the service configuration and enabled state for a given service.
     *
     * @deprecated
     */
    getService: {
      name: "GetService",
      requestType: GetServiceRequest,
      requestStream: false,
      responseType: Service,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              32,
              18,
              30,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all services available to the specified project, and the current
     * state of those services with respect to the project. The list includes
     * all public services, all services for which the calling user has the
     * `servicemanagement.services.bind` permission, and all services that have
     * already been enabled on the project. The list can be filtered to
     * only include services in a specific state, for example to only include
     * services enabled on the project.
     *
     * @deprecated
     */
    listServices: {
      name: "ListServices",
      requestType: ListServicesRequest,
      requestStream: false,
      responseType: ListServicesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              32,
              18,
              30,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Enables multiple services on a project. The operation is atomic: if
     * enabling any service fails, then the entire batch fails, and no state
     * changes occur.
     *
     * Operation response type: `google.protobuf.Empty`
     *
     * @deprecated
     */
    batchEnableServices: {
      name: "BatchEnableServices",
      requestType: BatchEnableServicesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              47,
              58,
              1,
              42,
              34,
              42,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              69,
              110,
              97,
              98,
              108,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves a summary of all quota information visible to the service
     * consumer, organized by service metric. Each metric includes information
     * about all of its defined limits. Each limit includes the limit
     * configuration (quota unit, preciseness, default value), the current
     * effective limit value, and all of the overrides applied to the limit.
     */
    listConsumerQuotaMetrics: {
      name: "ListConsumerQuotaMetrics",
      requestType: ListConsumerQuotaMetricsRequest,
      requestStream: false,
      responseType: ListConsumerQuotaMetricsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              81,
              117,
              111,
              116,
              97,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves a summary of quota information for a specific quota metric */
    getConsumerQuotaMetric: {
      name: "GetConsumerQuotaMetric",
      requestType: GetConsumerQuotaMetricRequest,
      requestStream: false,
      responseType: ConsumerQuotaMetric,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              81,
              117,
              111,
              116,
              97,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Retrieves a summary of quota information for a specific quota limit. */
    getConsumerQuotaLimit: {
      name: "GetConsumerQuotaLimit",
      requestType: GetConsumerQuotaLimitRequest,
      requestStream: false,
      responseType: ConsumerQuotaLimit,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              81,
              117,
              111,
              116,
              97,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              47,
              108,
              105,
              109,
              105,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates an admin override.
     * An admin override is applied by an administrator of a parent folder or
     * parent organization of the consumer receiving the override. An admin
     * override is intended to limit the amount of quota the consumer can use out
     * of the total quota pool allocated to all children of the folder or
     * organization.
     */
    createAdminOverride: {
      name: "CreateAdminOverride",
      requestType: CreateAdminOverrideRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              34,
              10,
              13,
              81,
              117,
              111,
              116,
              97,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              91,
              58,
              8,
              111,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              34,
              79,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              81,
              117,
              111,
              116,
              97,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              47,
              108,
              105,
              109,
              105,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              100,
              109,
              105,
              110,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an admin override. */
    updateAdminOverride: {
      name: "UpdateAdminOverride",
      requestType: UpdateAdminOverrideRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              34,
              10,
              13,
              81,
              117,
              111,
              116,
              97,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              91,
              58,
              8,
              111,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              50,
              79,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              81,
              117,
              111,
              116,
              97,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              47,
              108,
              105,
              109,
              105,
              116,
              115,
              47,
              42,
              47,
              97,
              100,
              109,
              105,
              110,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an admin override. */
    deleteAdminOverride: {
      name: "DeleteAdminOverride",
      requestType: DeleteAdminOverrideRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              81,
              42,
              79,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              81,
              117,
              111,
              116,
              97,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              47,
              108,
              105,
              109,
              105,
              116,
              115,
              47,
              42,
              47,
              97,
              100,
              109,
              105,
              110,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all admin overrides on this limit. */
    listAdminOverrides: {
      name: "ListAdminOverrides",
      requestType: ListAdminOverridesRequest,
      requestStream: false,
      responseType: ListAdminOverridesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              81,
              18,
              79,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              81,
              117,
              111,
              116,
              97,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              47,
              108,
              105,
              109,
              105,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              100,
              109,
              105,
              110,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Creates or updates multiple admin overrides atomically, all on the
     * same consumer, but on many different metrics or limits.
     * The name field in the quota override message should not be set.
     */
    importAdminOverrides: {
      name: "ImportAdminOverrides",
      requestType: ImportAdminOverridesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              60,
              10,
              28,
              73,
              109,
              112,
              111,
              114,
              116,
              65,
              100,
              109,
              105,
              110,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              28,
              73,
              109,
              112,
              111,
              114,
              116,
              65,
              100,
              109,
              105,
              110,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              79,
              58,
              1,
              42,
              34,
              74,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              81,
              117,
              111,
              116,
              97,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
              65,
              100,
              109,
              105,
              110,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a consumer override.
     * A consumer override is applied to the consumer on its own authority to
     * limit its own quota usage. Consumer overrides cannot be used to grant more
     * quota than would be allowed by admin overrides, producer overrides, or the
     * default limit of the service.
     */
    createConsumerOverride: {
      name: "CreateConsumerOverride",
      requestType: CreateConsumerOverrideRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              34,
              10,
              13,
              81,
              117,
              111,
              116,
              97,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              94,
              58,
              8,
              111,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              34,
              82,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              81,
              117,
              111,
              116,
              97,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              47,
              108,
              105,
              109,
              105,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a consumer override. */
    updateConsumerOverride: {
      name: "UpdateConsumerOverride",
      requestType: UpdateConsumerOverrideRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              34,
              10,
              13,
              81,
              117,
              111,
              116,
              97,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              94,
              58,
              8,
              111,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              50,
              82,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              81,
              117,
              111,
              116,
              97,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              47,
              108,
              105,
              109,
              105,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a consumer override. */
    deleteConsumerOverride: {
      name: "DeleteConsumerOverride",
      requestType: DeleteConsumerOverrideRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              84,
              42,
              82,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              81,
              117,
              111,
              116,
              97,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              47,
              108,
              105,
              109,
              105,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all consumer overrides on this limit. */
    listConsumerOverrides: {
      name: "ListConsumerOverrides",
      requestType: ListConsumerOverridesRequest,
      requestStream: false,
      responseType: ListConsumerOverridesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              84,
              18,
              82,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              81,
              117,
              111,
              116,
              97,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              47,
              108,
              105,
              109,
              105,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Creates or updates multiple consumer overrides atomically, all on the
     * same consumer, but on many different metrics or limits.
     * The name field in the quota override message should not be set.
     */
    importConsumerOverrides: {
      name: "ImportConsumerOverrides",
      requestType: ImportConsumerOverridesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              66,
              10,
              31,
              73,
              109,
              112,
              111,
              114,
              116,
              67,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              31,
              73,
              109,
              112,
              111,
              114,
              116,
              67,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              82,
              58,
              1,
              42,
              34,
              77,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              81,
              117,
              111,
              116,
              97,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
              67,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              79,
              118,
              101,
              114,
              114,
              105,
              100,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Generates service identity for service. */
    generateServiceIdentity: {
      name: "GenerateServiceIdentity",
      requestType: GenerateServiceIdentityRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              40,
              10,
              15,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              18,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
            ]),
          ],
          578365826: [
            Buffer.from([
              58,
              34,
              56,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ServiceUsageServiceImplementation<CallContextExt = {}> {
  /**
   * Enables a service so that it can be used with a project.
   *
   * Operation response type: `google.protobuf.Empty`
   *
   * @deprecated
   */
  enableService(request: EnableServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Disables a service so that it can no longer be used with a project.
   * This prevents unintended usage that may cause unexpected billing
   * charges or security leaks.
   *
   * It is not valid to call the disable method on a service that is not
   * currently enabled. Callers will receive a `FAILED_PRECONDITION` status if
   * the target service is not currently enabled.
   *
   * Operation response type: `google.protobuf.Empty`
   *
   * @deprecated
   */
  disableService(
    request: DisableServiceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Returns the service configuration and enabled state for a given service.
   *
   * @deprecated
   */
  getService(request: GetServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Service>>;
  /**
   * Lists all services available to the specified project, and the current
   * state of those services with respect to the project. The list includes
   * all public services, all services for which the calling user has the
   * `servicemanagement.services.bind` permission, and all services that have
   * already been enabled on the project. The list can be filtered to
   * only include services in a specific state, for example to only include
   * services enabled on the project.
   *
   * @deprecated
   */
  listServices(
    request: ListServicesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListServicesResponse>>;
  /**
   * Enables multiple services on a project. The operation is atomic: if
   * enabling any service fails, then the entire batch fails, and no state
   * changes occur.
   *
   * Operation response type: `google.protobuf.Empty`
   *
   * @deprecated
   */
  batchEnableServices(
    request: BatchEnableServicesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Retrieves a summary of all quota information visible to the service
   * consumer, organized by service metric. Each metric includes information
   * about all of its defined limits. Each limit includes the limit
   * configuration (quota unit, preciseness, default value), the current
   * effective limit value, and all of the overrides applied to the limit.
   */
  listConsumerQuotaMetrics(
    request: ListConsumerQuotaMetricsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListConsumerQuotaMetricsResponse>>;
  /** Retrieves a summary of quota information for a specific quota metric */
  getConsumerQuotaMetric(
    request: GetConsumerQuotaMetricRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConsumerQuotaMetric>>;
  /** Retrieves a summary of quota information for a specific quota limit. */
  getConsumerQuotaLimit(
    request: GetConsumerQuotaLimitRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConsumerQuotaLimit>>;
  /**
   * Creates an admin override.
   * An admin override is applied by an administrator of a parent folder or
   * parent organization of the consumer receiving the override. An admin
   * override is intended to limit the amount of quota the consumer can use out
   * of the total quota pool allocated to all children of the folder or
   * organization.
   */
  createAdminOverride(
    request: CreateAdminOverrideRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates an admin override. */
  updateAdminOverride(
    request: UpdateAdminOverrideRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes an admin override. */
  deleteAdminOverride(
    request: DeleteAdminOverrideRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists all admin overrides on this limit. */
  listAdminOverrides(
    request: ListAdminOverridesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAdminOverridesResponse>>;
  /**
   * Creates or updates multiple admin overrides atomically, all on the
   * same consumer, but on many different metrics or limits.
   * The name field in the quota override message should not be set.
   */
  importAdminOverrides(
    request: ImportAdminOverridesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Creates a consumer override.
   * A consumer override is applied to the consumer on its own authority to
   * limit its own quota usage. Consumer overrides cannot be used to grant more
   * quota than would be allowed by admin overrides, producer overrides, or the
   * default limit of the service.
   */
  createConsumerOverride(
    request: CreateConsumerOverrideRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates a consumer override. */
  updateConsumerOverride(
    request: UpdateConsumerOverrideRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a consumer override. */
  deleteConsumerOverride(
    request: DeleteConsumerOverrideRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists all consumer overrides on this limit. */
  listConsumerOverrides(
    request: ListConsumerOverridesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListConsumerOverridesResponse>>;
  /**
   * Creates or updates multiple consumer overrides atomically, all on the
   * same consumer, but on many different metrics or limits.
   * The name field in the quota override message should not be set.
   */
  importConsumerOverrides(
    request: ImportConsumerOverridesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Generates service identity for service. */
  generateServiceIdentity(
    request: GenerateServiceIdentityRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface ServiceUsageClient<CallOptionsExt = {}> {
  /**
   * Enables a service so that it can be used with a project.
   *
   * Operation response type: `google.protobuf.Empty`
   *
   * @deprecated
   */
  enableService(request: DeepPartial<EnableServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Disables a service so that it can no longer be used with a project.
   * This prevents unintended usage that may cause unexpected billing
   * charges or security leaks.
   *
   * It is not valid to call the disable method on a service that is not
   * currently enabled. Callers will receive a `FAILED_PRECONDITION` status if
   * the target service is not currently enabled.
   *
   * Operation response type: `google.protobuf.Empty`
   *
   * @deprecated
   */
  disableService(
    request: DeepPartial<DisableServiceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Returns the service configuration and enabled state for a given service.
   *
   * @deprecated
   */
  getService(request: DeepPartial<GetServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Service>;
  /**
   * Lists all services available to the specified project, and the current
   * state of those services with respect to the project. The list includes
   * all public services, all services for which the calling user has the
   * `servicemanagement.services.bind` permission, and all services that have
   * already been enabled on the project. The list can be filtered to
   * only include services in a specific state, for example to only include
   * services enabled on the project.
   *
   * @deprecated
   */
  listServices(
    request: DeepPartial<ListServicesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListServicesResponse>;
  /**
   * Enables multiple services on a project. The operation is atomic: if
   * enabling any service fails, then the entire batch fails, and no state
   * changes occur.
   *
   * Operation response type: `google.protobuf.Empty`
   *
   * @deprecated
   */
  batchEnableServices(
    request: DeepPartial<BatchEnableServicesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Retrieves a summary of all quota information visible to the service
   * consumer, organized by service metric. Each metric includes information
   * about all of its defined limits. Each limit includes the limit
   * configuration (quota unit, preciseness, default value), the current
   * effective limit value, and all of the overrides applied to the limit.
   */
  listConsumerQuotaMetrics(
    request: DeepPartial<ListConsumerQuotaMetricsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListConsumerQuotaMetricsResponse>;
  /** Retrieves a summary of quota information for a specific quota metric */
  getConsumerQuotaMetric(
    request: DeepPartial<GetConsumerQuotaMetricRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConsumerQuotaMetric>;
  /** Retrieves a summary of quota information for a specific quota limit. */
  getConsumerQuotaLimit(
    request: DeepPartial<GetConsumerQuotaLimitRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConsumerQuotaLimit>;
  /**
   * Creates an admin override.
   * An admin override is applied by an administrator of a parent folder or
   * parent organization of the consumer receiving the override. An admin
   * override is intended to limit the amount of quota the consumer can use out
   * of the total quota pool allocated to all children of the folder or
   * organization.
   */
  createAdminOverride(
    request: DeepPartial<CreateAdminOverrideRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates an admin override. */
  updateAdminOverride(
    request: DeepPartial<UpdateAdminOverrideRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes an admin override. */
  deleteAdminOverride(
    request: DeepPartial<DeleteAdminOverrideRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists all admin overrides on this limit. */
  listAdminOverrides(
    request: DeepPartial<ListAdminOverridesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAdminOverridesResponse>;
  /**
   * Creates or updates multiple admin overrides atomically, all on the
   * same consumer, but on many different metrics or limits.
   * The name field in the quota override message should not be set.
   */
  importAdminOverrides(
    request: DeepPartial<ImportAdminOverridesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Creates a consumer override.
   * A consumer override is applied to the consumer on its own authority to
   * limit its own quota usage. Consumer overrides cannot be used to grant more
   * quota than would be allowed by admin overrides, producer overrides, or the
   * default limit of the service.
   */
  createConsumerOverride(
    request: DeepPartial<CreateConsumerOverrideRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates a consumer override. */
  updateConsumerOverride(
    request: DeepPartial<UpdateConsumerOverrideRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a consumer override. */
  deleteConsumerOverride(
    request: DeepPartial<DeleteConsumerOverrideRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists all consumer overrides on this limit. */
  listConsumerOverrides(
    request: DeepPartial<ListConsumerOverridesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListConsumerOverridesResponse>;
  /**
   * Creates or updates multiple consumer overrides atomically, all on the
   * same consumer, but on many different metrics or limits.
   * The name field in the quota override message should not be set.
   */
  importConsumerOverrides(
    request: DeepPartial<ImportConsumerOverridesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Generates service identity for service. */
  generateServiceIdentity(
    request: DeepPartial<GenerateServiceIdentityRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
