// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/api/servicecontrol/v2/service_controller.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { AttributeContext } from "../../../rpc/context/attribute_context.js";
import { Status } from "../../../rpc/status.js";

export const protobufPackage = "google.api.servicecontrol.v2";

/** Request message for the Check method. */
export interface CheckRequest {
  /**
   * The service name as specified in its service configuration. For example,
   * `"pubsub.googleapis.com"`.
   *
   * See
   * [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service)
   * for the definition of a service name.
   */
  serviceName: string;
  /**
   * Specifies the version of the service configuration that should be used to
   * process the request. Must not be empty. Set this field to 'latest' to
   * specify using the latest configuration.
   */
  serviceConfigId: string;
  /** Describes attributes about the operation being executed by the service. */
  attributes:
    | AttributeContext
    | undefined;
  /** Describes the resources and the policies applied to each resource. */
  resources: ResourceInfo[];
  /** Optional. Contains a comma-separated list of flags. */
  flags: string;
}

/** Describes a resource referenced in the request. */
export interface ResourceInfo {
  /** The name of the resource referenced in the request. */
  name: string;
  /** The resource type in the format of "{service}/{kind}". */
  type: string;
  /**
   * The resource permission needed for this request.
   * The format must be "{service}/{plural}.{verb}".
   */
  permission: string;
  /**
   * Optional. The identifier of the container of this resource. For Google
   * Cloud APIs, the resource container must be one of the following formats:
   *     - `projects/<project-id or project-number>`
   *     - `folders/<folder-id>`
   *     - `organizations/<organization-id>`
   * For the policy enforcement on the container level (VPCSC and Location
   * Policy check), this field takes precedence on the container extracted from
   * name when presents.
   */
  container: string;
  /**
   * Optional. The location of the resource. The value must be a valid zone,
   * region or multiregion. For example: "europe-west4" or
   * "northamerica-northeast1-a"
   */
  location: string;
}

/** Response message for the Check method. */
export interface CheckResponse {
  /**
   * Operation is allowed when this field is not set. Any non-'OK' status
   * indicates a denial; [google.rpc.Status.details][google.rpc.Status.details]
   * would contain additional details about the denial.
   */
  status:
    | Status
    | undefined;
  /** Returns a set of request contexts generated from the `CheckRequest`. */
  headers: { [key: string]: string };
}

export interface CheckResponse_HeadersEntry {
  key: string;
  value: string;
}

/** Request message for the Report method. */
export interface ReportRequest {
  /**
   * The service name as specified in its service configuration. For example,
   * `"pubsub.googleapis.com"`.
   *
   * See
   * [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service)
   * for the definition of a service name.
   */
  serviceName: string;
  /**
   * Specifies the version of the service configuration that should be used to
   * process the request. Must not be empty. Set this field to 'latest' to
   * specify using the latest configuration.
   */
  serviceConfigId: string;
  /**
   * Describes the list of operations to be reported. Each operation is
   * represented as an AttributeContext, and contains all attributes around an
   * API access.
   */
  operations: AttributeContext[];
}

/**
 * Response message for the Report method.
 * If the request contains any invalid data, the server returns an RPC error.
 */
export interface ReportResponse {
}

/** Message containing resource details in a batch mode. */
export interface ResourceInfoList {
  /** The resource details. */
  resources: ResourceInfo[];
}

function createBaseCheckRequest(): CheckRequest {
  return { serviceName: "", serviceConfigId: "", attributes: undefined, resources: [], flags: "" };
}

export const CheckRequest: MessageFns<CheckRequest> = {
  encode(message: CheckRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    if (message.serviceConfigId !== "") {
      writer.uint32(18).string(message.serviceConfigId);
    }
    if (message.attributes !== undefined) {
      AttributeContext.encode(message.attributes, writer.uint32(26).fork()).join();
    }
    for (const v of message.resources) {
      ResourceInfo.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.flags !== "") {
      writer.uint32(42).string(message.flags);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceConfigId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.attributes = AttributeContext.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.resources.push(ResourceInfo.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.flags = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckRequest {
    return {
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      serviceConfigId: isSet(object.serviceConfigId) ? globalThis.String(object.serviceConfigId) : "",
      attributes: isSet(object.attributes) ? AttributeContext.fromJSON(object.attributes) : undefined,
      resources: globalThis.Array.isArray(object?.resources)
        ? object.resources.map((e: any) => ResourceInfo.fromJSON(e))
        : [],
      flags: isSet(object.flags) ? globalThis.String(object.flags) : "",
    };
  },

  toJSON(message: CheckRequest): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.serviceConfigId !== "") {
      obj.serviceConfigId = message.serviceConfigId;
    }
    if (message.attributes !== undefined) {
      obj.attributes = AttributeContext.toJSON(message.attributes);
    }
    if (message.resources?.length) {
      obj.resources = message.resources.map((e) => ResourceInfo.toJSON(e));
    }
    if (message.flags !== "") {
      obj.flags = message.flags;
    }
    return obj;
  },

  create(base?: DeepPartial<CheckRequest>): CheckRequest {
    return CheckRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckRequest>): CheckRequest {
    const message = createBaseCheckRequest();
    message.serviceName = object.serviceName ?? "";
    message.serviceConfigId = object.serviceConfigId ?? "";
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? AttributeContext.fromPartial(object.attributes)
      : undefined;
    message.resources = object.resources?.map((e) => ResourceInfo.fromPartial(e)) || [];
    message.flags = object.flags ?? "";
    return message;
  },
};

function createBaseResourceInfo(): ResourceInfo {
  return { name: "", type: "", permission: "", container: "", location: "" };
}

export const ResourceInfo: MessageFns<ResourceInfo> = {
  encode(message: ResourceInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.permission !== "") {
      writer.uint32(26).string(message.permission);
    }
    if (message.container !== "") {
      writer.uint32(34).string(message.container);
    }
    if (message.location !== "") {
      writer.uint32(42).string(message.location);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourceInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourceInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.permission = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.container = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.location = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourceInfo {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      permission: isSet(object.permission) ? globalThis.String(object.permission) : "",
      container: isSet(object.container) ? globalThis.String(object.container) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
    };
  },

  toJSON(message: ResourceInfo): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.permission !== "") {
      obj.permission = message.permission;
    }
    if (message.container !== "") {
      obj.container = message.container;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    return obj;
  },

  create(base?: DeepPartial<ResourceInfo>): ResourceInfo {
    return ResourceInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResourceInfo>): ResourceInfo {
    const message = createBaseResourceInfo();
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    message.permission = object.permission ?? "";
    message.container = object.container ?? "";
    message.location = object.location ?? "";
    return message;
  },
};

function createBaseCheckResponse(): CheckResponse {
  return { status: undefined, headers: {} };
}

export const CheckResponse: MessageFns<CheckResponse> = {
  encode(message: CheckResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(10).fork()).join();
    }
    Object.entries(message.headers).forEach(([key, value]) => {
      CheckResponse_HeadersEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = CheckResponse_HeadersEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.headers[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckResponse {
    return {
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      headers: isObject(object.headers)
        ? Object.entries(object.headers).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: CheckResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.headers) {
      const entries = Object.entries(message.headers);
      if (entries.length > 0) {
        obj.headers = {};
        entries.forEach(([k, v]) => {
          obj.headers[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<CheckResponse>): CheckResponse {
    return CheckResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckResponse>): CheckResponse {
    const message = createBaseCheckResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.headers = Object.entries(object.headers ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseCheckResponse_HeadersEntry(): CheckResponse_HeadersEntry {
  return { key: "", value: "" };
}

export const CheckResponse_HeadersEntry: MessageFns<CheckResponse_HeadersEntry> = {
  encode(message: CheckResponse_HeadersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckResponse_HeadersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckResponse_HeadersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckResponse_HeadersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: CheckResponse_HeadersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<CheckResponse_HeadersEntry>): CheckResponse_HeadersEntry {
    return CheckResponse_HeadersEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckResponse_HeadersEntry>): CheckResponse_HeadersEntry {
    const message = createBaseCheckResponse_HeadersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseReportRequest(): ReportRequest {
  return { serviceName: "", serviceConfigId: "", operations: [] };
}

export const ReportRequest: MessageFns<ReportRequest> = {
  encode(message: ReportRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    if (message.serviceConfigId !== "") {
      writer.uint32(18).string(message.serviceConfigId);
    }
    for (const v of message.operations) {
      AttributeContext.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceConfigId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.operations.push(AttributeContext.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportRequest {
    return {
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      serviceConfigId: isSet(object.serviceConfigId) ? globalThis.String(object.serviceConfigId) : "",
      operations: globalThis.Array.isArray(object?.operations)
        ? object.operations.map((e: any) => AttributeContext.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReportRequest): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.serviceConfigId !== "") {
      obj.serviceConfigId = message.serviceConfigId;
    }
    if (message.operations?.length) {
      obj.operations = message.operations.map((e) => AttributeContext.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ReportRequest>): ReportRequest {
    return ReportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportRequest>): ReportRequest {
    const message = createBaseReportRequest();
    message.serviceName = object.serviceName ?? "";
    message.serviceConfigId = object.serviceConfigId ?? "";
    message.operations = object.operations?.map((e) => AttributeContext.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReportResponse(): ReportResponse {
  return {};
}

export const ReportResponse: MessageFns<ReportResponse> = {
  encode(_: ReportResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ReportResponse {
    return {};
  },

  toJSON(_: ReportResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ReportResponse>): ReportResponse {
    return ReportResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ReportResponse>): ReportResponse {
    const message = createBaseReportResponse();
    return message;
  },
};

function createBaseResourceInfoList(): ResourceInfoList {
  return { resources: [] };
}

export const ResourceInfoList: MessageFns<ResourceInfoList> = {
  encode(message: ResourceInfoList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resources) {
      ResourceInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourceInfoList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourceInfoList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resources.push(ResourceInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourceInfoList {
    return {
      resources: globalThis.Array.isArray(object?.resources)
        ? object.resources.map((e: any) => ResourceInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ResourceInfoList): unknown {
    const obj: any = {};
    if (message.resources?.length) {
      obj.resources = message.resources.map((e) => ResourceInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ResourceInfoList>): ResourceInfoList {
    return ResourceInfoList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResourceInfoList>): ResourceInfoList {
    const message = createBaseResourceInfoList();
    message.resources = object.resources?.map((e) => ResourceInfo.fromPartial(e)) || [];
    return message;
  },
};

/**
 * [Service Control API
 * v2](https://cloud.google.com/service-infrastructure/docs/service-control/access-control)
 *
 * Private Preview. This feature is only available for approved services.
 *
 * This API provides admission control and telemetry reporting for services
 * that are integrated with [Service
 * Infrastructure](https://cloud.google.com/service-infrastructure).
 */
export type ServiceControllerDefinition = typeof ServiceControllerDefinition;
export const ServiceControllerDefinition = {
  name: "ServiceController",
  fullName: "google.api.servicecontrol.v2.ServiceController",
  methods: {
    /**
     * Private Preview. This feature is only available for approved services.
     *
     * This method provides admission control for services that are integrated
     * with [Service
     * Infrastructure](https://cloud.google.com/service-infrastructure). It checks
     * whether an operation should be allowed based on the service configuration
     * and relevant policies. It must be called before the operation is executed.
     * For more information, see
     * [Admission
     * Control](https://cloud.google.com/service-infrastructure/docs/admission-control).
     *
     * NOTE: The admission control has an expected policy propagation delay of
     * 60s. The caller **must** not depend on the most recent policy changes.
     *
     * NOTE: The admission control has a hard limit of 1 referenced resources
     * per call. If an operation refers to more than 1 resources, the caller
     * must call the Check method multiple times.
     *
     * This method requires the `servicemanagement.services.check` permission
     * on the specified service. For more information, see
     * [Service Control API Access
     * Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
     */
    check: {
      name: "Check",
      requestType: CheckRequest,
      requestStream: false,
      responseType: CheckResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              38,
              58,
              1,
              42,
              34,
              33,
              47,
              118,
              50,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              125,
              58,
              99,
              104,
              101,
              99,
              107,
            ]),
          ],
        },
      },
    },
    /**
     * Private Preview. This feature is only available for approved services.
     *
     * This method provides telemetry reporting for services that are integrated
     * with [Service
     * Infrastructure](https://cloud.google.com/service-infrastructure). It
     * reports a list of operations that have occurred on a service. It must be
     * called after the operations have been executed. For more information, see
     * [Telemetry
     * Reporting](https://cloud.google.com/service-infrastructure/docs/telemetry-reporting).
     *
     * NOTE: The telemetry reporting has a hard limit of 1000 operations and 1MB
     * per Report call. It is recommended to have no more than 100 operations per
     * call.
     *
     * This method requires the `servicemanagement.services.report` permission
     * on the specified service. For more information, see
     * [Service Control API Access
     * Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
     */
    report: {
      name: "Report",
      requestType: ReportRequest,
      requestStream: false,
      responseType: ReportResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              39,
              58,
              1,
              42,
              34,
              34,
              47,
              118,
              50,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              125,
              58,
              114,
              101,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ServiceControllerServiceImplementation<CallContextExt = {}> {
  /**
   * Private Preview. This feature is only available for approved services.
   *
   * This method provides admission control for services that are integrated
   * with [Service
   * Infrastructure](https://cloud.google.com/service-infrastructure). It checks
   * whether an operation should be allowed based on the service configuration
   * and relevant policies. It must be called before the operation is executed.
   * For more information, see
   * [Admission
   * Control](https://cloud.google.com/service-infrastructure/docs/admission-control).
   *
   * NOTE: The admission control has an expected policy propagation delay of
   * 60s. The caller **must** not depend on the most recent policy changes.
   *
   * NOTE: The admission control has a hard limit of 1 referenced resources
   * per call. If an operation refers to more than 1 resources, the caller
   * must call the Check method multiple times.
   *
   * This method requires the `servicemanagement.services.check` permission
   * on the specified service. For more information, see
   * [Service Control API Access
   * Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
   */
  check(request: CheckRequest, context: CallContext & CallContextExt): Promise<DeepPartial<CheckResponse>>;
  /**
   * Private Preview. This feature is only available for approved services.
   *
   * This method provides telemetry reporting for services that are integrated
   * with [Service
   * Infrastructure](https://cloud.google.com/service-infrastructure). It
   * reports a list of operations that have occurred on a service. It must be
   * called after the operations have been executed. For more information, see
   * [Telemetry
   * Reporting](https://cloud.google.com/service-infrastructure/docs/telemetry-reporting).
   *
   * NOTE: The telemetry reporting has a hard limit of 1000 operations and 1MB
   * per Report call. It is recommended to have no more than 100 operations per
   * call.
   *
   * This method requires the `servicemanagement.services.report` permission
   * on the specified service. For more information, see
   * [Service Control API Access
   * Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
   */
  report(request: ReportRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ReportResponse>>;
}

export interface ServiceControllerClient<CallOptionsExt = {}> {
  /**
   * Private Preview. This feature is only available for approved services.
   *
   * This method provides admission control for services that are integrated
   * with [Service
   * Infrastructure](https://cloud.google.com/service-infrastructure). It checks
   * whether an operation should be allowed based on the service configuration
   * and relevant policies. It must be called before the operation is executed.
   * For more information, see
   * [Admission
   * Control](https://cloud.google.com/service-infrastructure/docs/admission-control).
   *
   * NOTE: The admission control has an expected policy propagation delay of
   * 60s. The caller **must** not depend on the most recent policy changes.
   *
   * NOTE: The admission control has a hard limit of 1 referenced resources
   * per call. If an operation refers to more than 1 resources, the caller
   * must call the Check method multiple times.
   *
   * This method requires the `servicemanagement.services.check` permission
   * on the specified service. For more information, see
   * [Service Control API Access
   * Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
   */
  check(request: DeepPartial<CheckRequest>, options?: CallOptions & CallOptionsExt): Promise<CheckResponse>;
  /**
   * Private Preview. This feature is only available for approved services.
   *
   * This method provides telemetry reporting for services that are integrated
   * with [Service
   * Infrastructure](https://cloud.google.com/service-infrastructure). It
   * reports a list of operations that have occurred on a service. It must be
   * called after the operations have been executed. For more information, see
   * [Telemetry
   * Reporting](https://cloud.google.com/service-infrastructure/docs/telemetry-reporting).
   *
   * NOTE: The telemetry reporting has a hard limit of 1000 operations and 1MB
   * per Report call. It is recommended to have no more than 100 operations per
   * call.
   *
   * This method requires the `servicemanagement.services.report` permission
   * on the specified service. For more information, see
   * [Service Control API Access
   * Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
   */
  report(request: DeepPartial<ReportRequest>, options?: CallOptions & CallOptionsExt): Promise<ReportResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
