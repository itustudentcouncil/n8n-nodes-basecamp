// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/identity/accesscontextmanager/v1/gcp_user_access_binding.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.identity.accesscontextmanager.v1";

/**
 * Restricts access to Cloud Console and Google Cloud APIs for a set of users
 * using Context-Aware Access.
 */
export interface GcpUserAccessBinding {
  /**
   * Immutable. Assigned by the server during creation. The last segment has an arbitrary
   * length and has only URI unreserved characters (as defined by
   * [RFC 3986 Section 2.3](https://tools.ietf.org/html/rfc3986#section-2.3)).
   * Should not be specified by the client during creation.
   * Example: "organizations/256/gcpUserAccessBindings/b3-BhcX_Ud5N"
   */
  name: string;
  /**
   * Required. Immutable. Google Group id whose members are subject to this binding's restrictions.
   * See "id" in the [G Suite Directory API's Groups resource]
   * (https://developers.google.com/admin-sdk/directory/v1/reference/groups#resource).
   * If a group's email address/alias is changed, this resource will continue
   * to point at the changed group. This field does not accept group email
   * addresses or aliases.
   * Example: "01d520gv4vjcrht"
   */
  groupKey: string;
  /**
   * Required. Access level that a user must have to be granted access. Only one access
   * level is supported, not multiple. This repeated field must have exactly
   * one element.
   * Example: "accessPolicies/9522/accessLevels/device_trusted"
   */
  accessLevels: string[];
}

function createBaseGcpUserAccessBinding(): GcpUserAccessBinding {
  return { name: "", groupKey: "", accessLevels: [] };
}

export const GcpUserAccessBinding: MessageFns<GcpUserAccessBinding> = {
  encode(message: GcpUserAccessBinding, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.groupKey !== "") {
      writer.uint32(18).string(message.groupKey);
    }
    for (const v of message.accessLevels) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GcpUserAccessBinding {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGcpUserAccessBinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.groupKey = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.accessLevels.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GcpUserAccessBinding {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      groupKey: isSet(object.groupKey) ? globalThis.String(object.groupKey) : "",
      accessLevels: globalThis.Array.isArray(object?.accessLevels)
        ? object.accessLevels.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GcpUserAccessBinding): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.groupKey !== "") {
      obj.groupKey = message.groupKey;
    }
    if (message.accessLevels?.length) {
      obj.accessLevels = message.accessLevels;
    }
    return obj;
  },

  create(base?: DeepPartial<GcpUserAccessBinding>): GcpUserAccessBinding {
    return GcpUserAccessBinding.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GcpUserAccessBinding>): GcpUserAccessBinding {
    const message = createBaseGcpUserAccessBinding();
    message.name = object.name ?? "";
    message.groupKey = object.groupKey ?? "";
    message.accessLevels = object.accessLevels?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
