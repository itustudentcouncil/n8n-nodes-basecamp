// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/searchads360/v0/resources/ad_group.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { TargetingSetting } from "../common/targeting_setting.js";
import {
  AdGroupAdRotationModeEnum_AdGroupAdRotationMode,
  adGroupAdRotationModeEnum_AdGroupAdRotationModeFromJSON,
  adGroupAdRotationModeEnum_AdGroupAdRotationModeToJSON,
} from "../enums/ad_group_ad_rotation_mode.js";
import {
  AdGroupEngineStatusEnum_AdGroupEngineStatus,
  adGroupEngineStatusEnum_AdGroupEngineStatusFromJSON,
  adGroupEngineStatusEnum_AdGroupEngineStatusToJSON,
} from "../enums/ad_group_engine_status.js";
import {
  AdGroupStatusEnum_AdGroupStatus,
  adGroupStatusEnum_AdGroupStatusFromJSON,
  adGroupStatusEnum_AdGroupStatusToJSON,
} from "../enums/ad_group_status.js";
import {
  AdGroupTypeEnum_AdGroupType,
  adGroupTypeEnum_AdGroupTypeFromJSON,
  adGroupTypeEnum_AdGroupTypeToJSON,
} from "../enums/ad_group_type.js";

export const protobufPackage = "google.ads.searchads360.v0.resources";

/** An ad group. */
export interface AdGroup {
  /**
   * Immutable. The resource name of the ad group.
   * Ad group resource names have the form:
   *
   * `customers/{customer_id}/adGroups/{ad_group_id}`
   */
  resourceName: string;
  /** Output only. The ID of the ad group. */
  id?:
    | Long
    | undefined;
  /**
   * The name of the ad group.
   *
   * This field is required and should not be empty when creating new ad
   * groups.
   *
   * It must contain fewer than 255 UTF-8 full-width characters.
   *
   * It must not contain any null (code point 0x0), NL line feed
   * (code point 0xA) or carriage return (code point 0xD) characters.
   */
  name?:
    | string
    | undefined;
  /** The status of the ad group. */
  status: AdGroupStatusEnum_AdGroupStatus;
  /** Immutable. The type of the ad group. */
  type: AdGroupTypeEnum_AdGroupType;
  /** The ad rotation mode of the ad group. */
  adRotationMode: AdGroupAdRotationModeEnum_AdGroupAdRotationMode;
  /** The maximum CPC (cost-per-click) bid. */
  cpcBidMicros?:
    | Long
    | undefined;
  /**
   * Output only. The timestamp when this ad_group was created. The timestamp is
   * in the customer's time zone and in "yyyy-MM-dd HH:mm:ss" format.
   */
  creationTime: string;
  /** Output only. The Engine Status for ad group. */
  engineStatus?:
    | AdGroupEngineStatusEnum_AdGroupEngineStatus
    | undefined;
  /** Setting for targeting related features. */
  targetingSetting:
    | TargetingSetting
    | undefined;
  /** Output only. The resource names of labels attached to this ad group. */
  labels: string[];
  /**
   * Output only. ID of the ad group in the external engine account. This field
   * is for non-Google Ads account only, for example, Yahoo Japan, Microsoft,
   * Baidu etc. For Google Ads entity, use "ad_group.id" instead.
   */
  engineId: string;
  /**
   * Output only. Date when this ad group starts serving ads. By default, the ad
   * group starts now or the ad group's start date, whichever is later. If this
   * field is set, then the ad group starts at the beginning of the specified
   * date in the customer's time zone. This field is only available for
   * Microsoft Advertising and Facebook gateway accounts.
   *
   * Format: YYYY-MM-DD
   * Example: 2019-03-14
   */
  startDate: string;
  /**
   * Output only. Date when the ad group ends serving ads. By default, the ad
   * group ends on the ad group's end date. If this field is set, then the ad
   * group ends at the end of the specified date in the customer's time zone.
   * This field is only available for Microsoft Advertising and Facebook gateway
   * accounts.
   *
   * Format: YYYY-MM-DD
   * Example: 2019-03-14
   */
  endDate: string;
  /**
   * Output only. The language of the ads and keywords in an ad group. This
   * field is only available for Microsoft Advertising accounts. More details:
   * https://docs.microsoft.com/en-us/advertising/guides/ad-languages?view=bingads-13#adlanguage
   */
  languageCode: string;
  /**
   * Output only. The datetime when this ad group was last modified. The
   * datetime is in the customer's time zone and in "yyyy-MM-dd HH:mm:ss.ssssss"
   * format.
   */
  lastModifiedTime: string;
}

function createBaseAdGroup(): AdGroup {
  return {
    resourceName: "",
    id: undefined,
    name: undefined,
    status: 0,
    type: 0,
    adRotationMode: 0,
    cpcBidMicros: undefined,
    creationTime: "",
    engineStatus: undefined,
    targetingSetting: undefined,
    labels: [],
    engineId: "",
    startDate: "",
    endDate: "",
    languageCode: "",
    lastModifiedTime: "",
  };
}

export const AdGroup: MessageFns<AdGroup> = {
  encode(message: AdGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(272).int64(message.id.toString());
    }
    if (message.name !== undefined) {
      writer.uint32(282).string(message.name);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.type !== 0) {
      writer.uint32(96).int32(message.type);
    }
    if (message.adRotationMode !== 0) {
      writer.uint32(176).int32(message.adRotationMode);
    }
    if (message.cpcBidMicros !== undefined) {
      writer.uint32(312).int64(message.cpcBidMicros.toString());
    }
    if (message.creationTime !== "") {
      writer.uint32(482).string(message.creationTime);
    }
    if (message.engineStatus !== undefined) {
      writer.uint32(488).int32(message.engineStatus);
    }
    if (message.targetingSetting !== undefined) {
      TargetingSetting.encode(message.targetingSetting, writer.uint32(202).fork()).join();
    }
    for (const v of message.labels) {
      writer.uint32(394).string(v!);
    }
    if (message.engineId !== "") {
      writer.uint32(402).string(message.engineId);
    }
    if (message.startDate !== "") {
      writer.uint32(410).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(418).string(message.endDate);
    }
    if (message.languageCode !== "") {
      writer.uint32(426).string(message.languageCode);
    }
    if (message.lastModifiedTime !== "") {
      writer.uint32(442).string(message.lastModifiedTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 34:
          if (tag !== 272) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.adRotationMode = reader.int32() as any;
          continue;
        case 39:
          if (tag !== 312) {
            break;
          }

          message.cpcBidMicros = Long.fromString(reader.int64().toString());
          continue;
        case 60:
          if (tag !== 482) {
            break;
          }

          message.creationTime = reader.string();
          continue;
        case 61:
          if (tag !== 488) {
            break;
          }

          message.engineStatus = reader.int32() as any;
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.targetingSetting = TargetingSetting.decode(reader, reader.uint32());
          continue;
        case 49:
          if (tag !== 394) {
            break;
          }

          message.labels.push(reader.string());
          continue;
        case 50:
          if (tag !== 402) {
            break;
          }

          message.engineId = reader.string();
          continue;
        case 51:
          if (tag !== 410) {
            break;
          }

          message.startDate = reader.string();
          continue;
        case 52:
          if (tag !== 418) {
            break;
          }

          message.endDate = reader.string();
          continue;
        case 53:
          if (tag !== 426) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 55:
          if (tag !== 442) {
            break;
          }

          message.lastModifiedTime = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdGroup {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      status: isSet(object.status) ? adGroupStatusEnum_AdGroupStatusFromJSON(object.status) : 0,
      type: isSet(object.type) ? adGroupTypeEnum_AdGroupTypeFromJSON(object.type) : 0,
      adRotationMode: isSet(object.adRotationMode)
        ? adGroupAdRotationModeEnum_AdGroupAdRotationModeFromJSON(object.adRotationMode)
        : 0,
      cpcBidMicros: isSet(object.cpcBidMicros) ? Long.fromValue(object.cpcBidMicros) : undefined,
      creationTime: isSet(object.creationTime) ? globalThis.String(object.creationTime) : "",
      engineStatus: isSet(object.engineStatus)
        ? adGroupEngineStatusEnum_AdGroupEngineStatusFromJSON(object.engineStatus)
        : undefined,
      targetingSetting: isSet(object.targetingSetting) ? TargetingSetting.fromJSON(object.targetingSetting) : undefined,
      labels: globalThis.Array.isArray(object?.labels) ? object.labels.map((e: any) => globalThis.String(e)) : [],
      engineId: isSet(object.engineId) ? globalThis.String(object.engineId) : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      lastModifiedTime: isSet(object.lastModifiedTime) ? globalThis.String(object.lastModifiedTime) : "",
    };
  },

  toJSON(message: AdGroup): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.status !== 0) {
      obj.status = adGroupStatusEnum_AdGroupStatusToJSON(message.status);
    }
    if (message.type !== 0) {
      obj.type = adGroupTypeEnum_AdGroupTypeToJSON(message.type);
    }
    if (message.adRotationMode !== 0) {
      obj.adRotationMode = adGroupAdRotationModeEnum_AdGroupAdRotationModeToJSON(message.adRotationMode);
    }
    if (message.cpcBidMicros !== undefined) {
      obj.cpcBidMicros = (message.cpcBidMicros || Long.ZERO).toString();
    }
    if (message.creationTime !== "") {
      obj.creationTime = message.creationTime;
    }
    if (message.engineStatus !== undefined) {
      obj.engineStatus = adGroupEngineStatusEnum_AdGroupEngineStatusToJSON(message.engineStatus);
    }
    if (message.targetingSetting !== undefined) {
      obj.targetingSetting = TargetingSetting.toJSON(message.targetingSetting);
    }
    if (message.labels?.length) {
      obj.labels = message.labels;
    }
    if (message.engineId !== "") {
      obj.engineId = message.engineId;
    }
    if (message.startDate !== "") {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== "") {
      obj.endDate = message.endDate;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.lastModifiedTime !== "") {
      obj.lastModifiedTime = message.lastModifiedTime;
    }
    return obj;
  },

  create(base?: DeepPartial<AdGroup>): AdGroup {
    return AdGroup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdGroup>): AdGroup {
    const message = createBaseAdGroup();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.name = object.name ?? undefined;
    message.status = object.status ?? 0;
    message.type = object.type ?? 0;
    message.adRotationMode = object.adRotationMode ?? 0;
    message.cpcBidMicros = (object.cpcBidMicros !== undefined && object.cpcBidMicros !== null)
      ? Long.fromValue(object.cpcBidMicros)
      : undefined;
    message.creationTime = object.creationTime ?? "";
    message.engineStatus = object.engineStatus ?? undefined;
    message.targetingSetting = (object.targetingSetting !== undefined && object.targetingSetting !== null)
      ? TargetingSetting.fromPartial(object.targetingSetting)
      : undefined;
    message.labels = object.labels?.map((e) => e) || [];
    message.engineId = object.engineId ?? "";
    message.startDate = object.startDate ?? "";
    message.endDate = object.endDate ?? "";
    message.languageCode = object.languageCode ?? "";
    message.lastModifiedTime = object.lastModifiedTime ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
