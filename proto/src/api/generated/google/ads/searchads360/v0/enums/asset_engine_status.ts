// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/searchads360/v0/enums/asset_engine_status.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.searchads360.v0.enums";

/** Container for enum describing possible Asset engine statuses. */
export interface AssetEngineStatusEnum {
}

/** Next ID = 11 */
export enum AssetEngineStatusEnum_AssetEngineStatus {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /** SERVING - The asset is active. */
  SERVING = 2,
  /** SERVING_LIMITED - The asset is active limited. */
  SERVING_LIMITED = 3,
  /** DISAPPROVED - The asset is disapproved (not eligible). */
  DISAPPROVED = 4,
  /** DISABLED - The asset is inactive (pending). */
  DISABLED = 5,
  /** REMOVED - The asset has been removed. */
  REMOVED = 6,
  UNRECOGNIZED = -1,
}

export function assetEngineStatusEnum_AssetEngineStatusFromJSON(object: any): AssetEngineStatusEnum_AssetEngineStatus {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return AssetEngineStatusEnum_AssetEngineStatus.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return AssetEngineStatusEnum_AssetEngineStatus.UNKNOWN;
    case 2:
    case "SERVING":
      return AssetEngineStatusEnum_AssetEngineStatus.SERVING;
    case 3:
    case "SERVING_LIMITED":
      return AssetEngineStatusEnum_AssetEngineStatus.SERVING_LIMITED;
    case 4:
    case "DISAPPROVED":
      return AssetEngineStatusEnum_AssetEngineStatus.DISAPPROVED;
    case 5:
    case "DISABLED":
      return AssetEngineStatusEnum_AssetEngineStatus.DISABLED;
    case 6:
    case "REMOVED":
      return AssetEngineStatusEnum_AssetEngineStatus.REMOVED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AssetEngineStatusEnum_AssetEngineStatus.UNRECOGNIZED;
  }
}

export function assetEngineStatusEnum_AssetEngineStatusToJSON(object: AssetEngineStatusEnum_AssetEngineStatus): string {
  switch (object) {
    case AssetEngineStatusEnum_AssetEngineStatus.UNSPECIFIED:
      return "UNSPECIFIED";
    case AssetEngineStatusEnum_AssetEngineStatus.UNKNOWN:
      return "UNKNOWN";
    case AssetEngineStatusEnum_AssetEngineStatus.SERVING:
      return "SERVING";
    case AssetEngineStatusEnum_AssetEngineStatus.SERVING_LIMITED:
      return "SERVING_LIMITED";
    case AssetEngineStatusEnum_AssetEngineStatus.DISAPPROVED:
      return "DISAPPROVED";
    case AssetEngineStatusEnum_AssetEngineStatus.DISABLED:
      return "DISABLED";
    case AssetEngineStatusEnum_AssetEngineStatus.REMOVED:
      return "REMOVED";
    case AssetEngineStatusEnum_AssetEngineStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAssetEngineStatusEnum(): AssetEngineStatusEnum {
  return {};
}

export const AssetEngineStatusEnum: MessageFns<AssetEngineStatusEnum> = {
  encode(_: AssetEngineStatusEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetEngineStatusEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetEngineStatusEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AssetEngineStatusEnum {
    return {};
  },

  toJSON(_: AssetEngineStatusEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AssetEngineStatusEnum>): AssetEngineStatusEnum {
    return AssetEngineStatusEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AssetEngineStatusEnum>): AssetEngineStatusEnum {
    const message = createBaseAssetEngineStatusEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
