// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/searchads360/v0/resources/asset_group.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  AdStrengthEnum_AdStrength,
  adStrengthEnum_AdStrengthFromJSON,
  adStrengthEnum_AdStrengthToJSON,
} from "../enums/ad_strength.js";
import {
  AssetGroupStatusEnum_AssetGroupStatus,
  assetGroupStatusEnum_AssetGroupStatusFromJSON,
  assetGroupStatusEnum_AssetGroupStatusToJSON,
} from "../enums/asset_group_status.js";

export const protobufPackage = "google.ads.searchads360.v0.resources";

/**
 * An asset group.
 * AssetGroupAsset is used to link an asset to the asset group.
 * AssetGroupSignal is used to associate a signal to an asset group.
 */
export interface AssetGroup {
  /**
   * Immutable. The resource name of the asset group.
   * Asset group resource names have the form:
   *
   * `customers/{customer_id}/assetGroups/{asset_group_id}`
   */
  resourceName: string;
  /** Output only. The ID of the asset group. */
  id: Long;
  /**
   * Immutable. The campaign with which this asset group is associated.
   * The asset which is linked to the asset group.
   */
  campaign: string;
  /**
   * Required. Name of the asset group. Required. It must have a minimum length
   * of 1 and maximum length of 128. It must be unique under a campaign.
   */
  name: string;
  /**
   * A list of final URLs after all cross domain redirects. In performance max,
   * by default, the urls are eligible for expansion unless opted out.
   */
  finalUrls: string[];
  /**
   * A list of final mobile URLs after all cross domain redirects. In
   * performance max, by default, the urls are eligible for expansion
   * unless opted out.
   */
  finalMobileUrls: string[];
  /** The status of the asset group. */
  status: AssetGroupStatusEnum_AssetGroupStatus;
  /**
   * First part of text that may appear appended to the url displayed in
   * the ad.
   */
  path1: string;
  /**
   * Second part of text that may appear appended to the url displayed in
   * the ad. This field can only be set when path1 is set.
   */
  path2: string;
  /** Output only. Overall ad strength of this asset group. */
  adStrength: AdStrengthEnum_AdStrength;
}

function createBaseAssetGroup(): AssetGroup {
  return {
    resourceName: "",
    id: Long.ZERO,
    campaign: "",
    name: "",
    finalUrls: [],
    finalMobileUrls: [],
    status: 0,
    path1: "",
    path2: "",
    adStrength: 0,
  };
}

export const AssetGroup: MessageFns<AssetGroup> = {
  encode(message: AssetGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (!message.id.equals(Long.ZERO)) {
      writer.uint32(72).int64(message.id.toString());
    }
    if (message.campaign !== "") {
      writer.uint32(18).string(message.campaign);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    for (const v of message.finalUrls) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.finalMobileUrls) {
      writer.uint32(42).string(v!);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    if (message.path1 !== "") {
      writer.uint32(58).string(message.path1);
    }
    if (message.path2 !== "") {
      writer.uint32(66).string(message.path2);
    }
    if (message.adStrength !== 0) {
      writer.uint32(80).int32(message.adStrength);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.campaign = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.finalUrls.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.finalMobileUrls.push(reader.string());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.path1 = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.path2 = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.adStrength = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssetGroup {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.ZERO,
      campaign: isSet(object.campaign) ? globalThis.String(object.campaign) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      finalUrls: globalThis.Array.isArray(object?.finalUrls)
        ? object.finalUrls.map((e: any) => globalThis.String(e))
        : [],
      finalMobileUrls: globalThis.Array.isArray(object?.finalMobileUrls)
        ? object.finalMobileUrls.map((e: any) => globalThis.String(e))
        : [],
      status: isSet(object.status) ? assetGroupStatusEnum_AssetGroupStatusFromJSON(object.status) : 0,
      path1: isSet(object.path1) ? globalThis.String(object.path1) : "",
      path2: isSet(object.path2) ? globalThis.String(object.path2) : "",
      adStrength: isSet(object.adStrength) ? adStrengthEnum_AdStrengthFromJSON(object.adStrength) : 0,
    };
  },

  toJSON(message: AssetGroup): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (!message.id.equals(Long.ZERO)) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.campaign !== "") {
      obj.campaign = message.campaign;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.finalUrls?.length) {
      obj.finalUrls = message.finalUrls;
    }
    if (message.finalMobileUrls?.length) {
      obj.finalMobileUrls = message.finalMobileUrls;
    }
    if (message.status !== 0) {
      obj.status = assetGroupStatusEnum_AssetGroupStatusToJSON(message.status);
    }
    if (message.path1 !== "") {
      obj.path1 = message.path1;
    }
    if (message.path2 !== "") {
      obj.path2 = message.path2;
    }
    if (message.adStrength !== 0) {
      obj.adStrength = adStrengthEnum_AdStrengthToJSON(message.adStrength);
    }
    return obj;
  },

  create(base?: DeepPartial<AssetGroup>): AssetGroup {
    return AssetGroup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AssetGroup>): AssetGroup {
    const message = createBaseAssetGroup();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.ZERO;
    message.campaign = object.campaign ?? "";
    message.name = object.name ?? "";
    message.finalUrls = object.finalUrls?.map((e) => e) || [];
    message.finalMobileUrls = object.finalMobileUrls?.map((e) => e) || [];
    message.status = object.status ?? 0;
    message.path1 = object.path1 ?? "";
    message.path2 = object.path2 ?? "";
    message.adStrength = object.adStrength ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
