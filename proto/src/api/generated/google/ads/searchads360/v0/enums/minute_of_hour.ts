// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/searchads360/v0/enums/minute_of_hour.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.searchads360.v0.enums";

/** Container for enumeration of quarter-hours. */
export interface MinuteOfHourEnum {
}

/** Enumerates of quarter-hours. For example, "FIFTEEN" */
export enum MinuteOfHourEnum_MinuteOfHour {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The value is unknown in this version. */
  UNKNOWN = 1,
  /** ZERO - Zero minutes past the hour. */
  ZERO = 2,
  /** FIFTEEN - Fifteen minutes past the hour. */
  FIFTEEN = 3,
  /** THIRTY - Thirty minutes past the hour. */
  THIRTY = 4,
  /** FORTY_FIVE - Forty-five minutes past the hour. */
  FORTY_FIVE = 5,
  UNRECOGNIZED = -1,
}

export function minuteOfHourEnum_MinuteOfHourFromJSON(object: any): MinuteOfHourEnum_MinuteOfHour {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return MinuteOfHourEnum_MinuteOfHour.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return MinuteOfHourEnum_MinuteOfHour.UNKNOWN;
    case 2:
    case "ZERO":
      return MinuteOfHourEnum_MinuteOfHour.ZERO;
    case 3:
    case "FIFTEEN":
      return MinuteOfHourEnum_MinuteOfHour.FIFTEEN;
    case 4:
    case "THIRTY":
      return MinuteOfHourEnum_MinuteOfHour.THIRTY;
    case 5:
    case "FORTY_FIVE":
      return MinuteOfHourEnum_MinuteOfHour.FORTY_FIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MinuteOfHourEnum_MinuteOfHour.UNRECOGNIZED;
  }
}

export function minuteOfHourEnum_MinuteOfHourToJSON(object: MinuteOfHourEnum_MinuteOfHour): string {
  switch (object) {
    case MinuteOfHourEnum_MinuteOfHour.UNSPECIFIED:
      return "UNSPECIFIED";
    case MinuteOfHourEnum_MinuteOfHour.UNKNOWN:
      return "UNKNOWN";
    case MinuteOfHourEnum_MinuteOfHour.ZERO:
      return "ZERO";
    case MinuteOfHourEnum_MinuteOfHour.FIFTEEN:
      return "FIFTEEN";
    case MinuteOfHourEnum_MinuteOfHour.THIRTY:
      return "THIRTY";
    case MinuteOfHourEnum_MinuteOfHour.FORTY_FIVE:
      return "FORTY_FIVE";
    case MinuteOfHourEnum_MinuteOfHour.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseMinuteOfHourEnum(): MinuteOfHourEnum {
  return {};
}

export const MinuteOfHourEnum: MessageFns<MinuteOfHourEnum> = {
  encode(_: MinuteOfHourEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MinuteOfHourEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMinuteOfHourEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MinuteOfHourEnum {
    return {};
  },

  toJSON(_: MinuteOfHourEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MinuteOfHourEnum>): MinuteOfHourEnum {
    return MinuteOfHourEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MinuteOfHourEnum>): MinuteOfHourEnum {
    const message = createBaseMinuteOfHourEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
