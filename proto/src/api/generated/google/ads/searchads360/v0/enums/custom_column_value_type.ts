// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/searchads360/v0/enums/custom_column_value_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.searchads360.v0.enums";

/** The value type of custom columns. */
export interface CustomColumnValueTypeEnum {
}

/** Enum containing possible custom column value types. */
export enum CustomColumnValueTypeEnum_CustomColumnValueType {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Unknown. */
  UNKNOWN = 1,
  /** STRING - The custom column value is a string. */
  STRING = 2,
  /** INT64 - The custom column value is an int64 number. */
  INT64 = 3,
  /** DOUBLE - The custom column value is a double number. */
  DOUBLE = 4,
  /** BOOLEAN - The custom column value is a boolean. */
  BOOLEAN = 5,
  /** DATE - The custom column value is a date, in YYYYMMDD format. */
  DATE = 6,
  UNRECOGNIZED = -1,
}

export function customColumnValueTypeEnum_CustomColumnValueTypeFromJSON(
  object: any,
): CustomColumnValueTypeEnum_CustomColumnValueType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return CustomColumnValueTypeEnum_CustomColumnValueType.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return CustomColumnValueTypeEnum_CustomColumnValueType.UNKNOWN;
    case 2:
    case "STRING":
      return CustomColumnValueTypeEnum_CustomColumnValueType.STRING;
    case 3:
    case "INT64":
      return CustomColumnValueTypeEnum_CustomColumnValueType.INT64;
    case 4:
    case "DOUBLE":
      return CustomColumnValueTypeEnum_CustomColumnValueType.DOUBLE;
    case 5:
    case "BOOLEAN":
      return CustomColumnValueTypeEnum_CustomColumnValueType.BOOLEAN;
    case 6:
    case "DATE":
      return CustomColumnValueTypeEnum_CustomColumnValueType.DATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CustomColumnValueTypeEnum_CustomColumnValueType.UNRECOGNIZED;
  }
}

export function customColumnValueTypeEnum_CustomColumnValueTypeToJSON(
  object: CustomColumnValueTypeEnum_CustomColumnValueType,
): string {
  switch (object) {
    case CustomColumnValueTypeEnum_CustomColumnValueType.UNSPECIFIED:
      return "UNSPECIFIED";
    case CustomColumnValueTypeEnum_CustomColumnValueType.UNKNOWN:
      return "UNKNOWN";
    case CustomColumnValueTypeEnum_CustomColumnValueType.STRING:
      return "STRING";
    case CustomColumnValueTypeEnum_CustomColumnValueType.INT64:
      return "INT64";
    case CustomColumnValueTypeEnum_CustomColumnValueType.DOUBLE:
      return "DOUBLE";
    case CustomColumnValueTypeEnum_CustomColumnValueType.BOOLEAN:
      return "BOOLEAN";
    case CustomColumnValueTypeEnum_CustomColumnValueType.DATE:
      return "DATE";
    case CustomColumnValueTypeEnum_CustomColumnValueType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCustomColumnValueTypeEnum(): CustomColumnValueTypeEnum {
  return {};
}

export const CustomColumnValueTypeEnum: MessageFns<CustomColumnValueTypeEnum> = {
  encode(_: CustomColumnValueTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomColumnValueTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomColumnValueTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CustomColumnValueTypeEnum {
    return {};
  },

  toJSON(_: CustomColumnValueTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CustomColumnValueTypeEnum>): CustomColumnValueTypeEnum {
    return CustomColumnValueTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CustomColumnValueTypeEnum>): CustomColumnValueTypeEnum {
    const message = createBaseCustomColumnValueTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
