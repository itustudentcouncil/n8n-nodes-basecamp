// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/searchads360/v0/common/metrics.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  InteractionEventTypeEnum_InteractionEventType,
  interactionEventTypeEnum_InteractionEventTypeFromJSON,
  interactionEventTypeEnum_InteractionEventTypeToJSON,
} from "../enums/interaction_event_type.js";
import {
  QualityScoreBucketEnum_QualityScoreBucket,
  qualityScoreBucketEnum_QualityScoreBucketFromJSON,
  qualityScoreBucketEnum_QualityScoreBucketToJSON,
} from "../enums/quality_score_bucket.js";
import { Value } from "./value.js";

export const protobufPackage = "google.ads.searchads360.v0.common";

/** Metrics data. */
export interface Metrics {
  /**
   * Search absolute top impression share is the percentage of your Search ad
   * impressions that are shown in the most prominent Search position.
   */
  absoluteTopImpressionPercentage?:
    | number
    | undefined;
  /**
   * All conversions from interactions (as oppose to view through conversions)
   * divided by the number of ad interactions.
   */
  allConversionsFromInteractionsRate?:
    | number
    | undefined;
  /** The value of all conversions. */
  allConversionsValue?:
    | number
    | undefined;
  /**
   * The value of all conversions. When this column is selected with date, the
   * values in date column means the conversion date. Details for the
   * by_conversion_date columns are available at
   * https://support.google.com/sa360/answer/9250611.
   */
  allConversionsValueByConversionDate: number;
  /**
   * The total number of conversions. This includes all conversions regardless
   * of the value of include_in_conversions_metric.
   */
  allConversions?:
    | number
    | undefined;
  /**
   * The total number of conversions. This includes all conversions regardless
   * of the value of include_in_conversions_metric. When this column is selected
   * with date, the values in date column means the conversion date. Details for
   * the by_conversion_date columns are available at
   * https://support.google.com/sa360/answer/9250611.
   */
  allConversionsByConversionDate: number;
  /**
   * The value of all conversions divided by the total cost of ad interactions
   * (such as clicks for text ads or views for video ads).
   */
  allConversionsValuePerCost?:
    | number
    | undefined;
  /**
   * The number of times people clicked the "Call" button to call a store during
   * or after clicking an ad. This number doesn't include whether or not calls
   * were connected, or the duration of any calls.
   *
   * This metric applies to feed items only.
   */
  allConversionsFromClickToCall?:
    | number
    | undefined;
  /**
   * The number of times people clicked a "Get directions" button to navigate to
   * a store after clicking an ad.
   *
   * This metric applies to feed items only.
   */
  allConversionsFromDirections?:
    | number
    | undefined;
  /**
   * The value of all conversions from interactions divided by the total number
   * of interactions.
   */
  allConversionsFromInteractionsValuePerInteraction?:
    | number
    | undefined;
  /**
   * The number of times people clicked a link to view a store's menu after
   * clicking an ad.
   *
   * This metric applies to feed items only.
   */
  allConversionsFromMenu?:
    | number
    | undefined;
  /**
   * The number of times people placed an order at a store after clicking an ad.
   *
   * This metric applies to feed items only.
   */
  allConversionsFromOrder?:
    | number
    | undefined;
  /**
   * The number of other conversions (for example, posting a review or saving a
   * location for a store) that occurred after people clicked an ad.
   *
   * This metric applies to feed items only.
   */
  allConversionsFromOtherEngagement?:
    | number
    | undefined;
  /**
   * Estimated number of times people visited a store after clicking an ad.
   *
   * This metric applies to feed items only.
   */
  allConversionsFromStoreVisit?:
    | number
    | undefined;
  /**
   * Clicks that Search Ads 360 has successfully recorded and forwarded to an
   * advertiser's landing page.
   */
  visits?:
    | number
    | undefined;
  /**
   * The number of times that people were taken to a store's URL after clicking
   * an ad.
   *
   * This metric applies to feed items only.
   */
  allConversionsFromStoreWebsite?:
    | number
    | undefined;
  /**
   * The average amount you pay per interaction. This amount is the total cost
   * of your ads divided by the total number of interactions.
   */
  averageCost?:
    | number
    | undefined;
  /**
   * The total cost of all clicks divided by the total number of clicks
   * received.
   * This metric is a monetary value and returned in the customer's currency by
   * default. See the metrics_currency parameter at
   * https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   */
  averageCpc?:
    | number
    | undefined;
  /**
   * Average cost-per-thousand impressions (CPM).
   * This metric is a monetary value and returned in the customer's currency by
   * default. See the metrics_currency parameter at
   * https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   */
  averageCpm?:
    | number
    | undefined;
  /** The number of clicks. */
  clicks?:
    | Long
    | undefined;
  /**
   * The estimated percent of times that your ad was eligible to show
   * on the Display Network but didn't because your budget was too low.
   * Note: Content budget lost impression share is reported in the range of 0
   * to 0.9. Any value above 0.9 is reported as 0.9001.
   */
  contentBudgetLostImpressionShare?:
    | number
    | undefined;
  /**
   * The impressions you've received on the Display Network divided
   * by the estimated number of impressions you were eligible to receive.
   * Note: Content impression share is reported in the range of 0.1 to 1. Any
   * value below 0.1 is reported as 0.0999.
   */
  contentImpressionShare?:
    | number
    | undefined;
  /** The conversion custom metrics. */
  conversionCustomMetrics: Value[];
  /**
   * The estimated percentage of impressions on the Display Network
   * that your ads didn't receive due to poor Ad Rank.
   * Note: Content rank lost impression share is reported in the range of 0
   * to 0.9. Any value above 0.9 is reported as 0.9001.
   */
  contentRankLostImpressionShare?:
    | number
    | undefined;
  /**
   * Average biddable conversions (from interaction) per conversion eligible
   * interaction. Shows how often, on average, an ad interaction leads to a
   * biddable conversion.
   */
  conversionsFromInteractionsRate?:
    | number
    | undefined;
  /**
   * The value of client account conversions. This only
   * includes conversion actions which
   * include_in_client_account_conversions_metric attribute is set to true. If
   * you use conversion-based bidding, your bid strategies will optimize for
   * these conversions.
   */
  clientAccountConversionsValue?:
    | number
    | undefined;
  /**
   * The sum of biddable conversions value by conversion date. When this
   * column is selected with date, the values in date column means the
   * conversion date.
   */
  conversionsValueByConversionDate: number;
  /**
   * The value of biddable conversion divided by the total cost of conversion
   * eligible interactions.
   */
  conversionsValuePerCost?:
    | number
    | undefined;
  /**
   * The value of conversions from interactions divided by the number of ad
   * interactions. This only includes conversion actions which
   * include_in_conversions_metric attribute is set to true. If you use
   * conversion-based bidding, your bid strategies will optimize for these
   * conversions.
   */
  conversionsFromInteractionsValuePerInteraction?:
    | number
    | undefined;
  /**
   * The number of client account conversions. This only
   * includes conversion actions which
   * include_in_client_account_conversions_metric attribute is set to true. If
   * you use conversion-based bidding, your bid strategies will optimize for
   * these conversions.
   */
  clientAccountConversions?:
    | number
    | undefined;
  /**
   * The sum of conversions by conversion date for biddable conversion types.
   * Can be fractional due to attribution modeling. When this column is selected
   * with date, the values in date column means the conversion date.
   */
  conversionsByConversionDate: number;
  /**
   * The sum of your cost-per-click (CPC) and cost-per-thousand impressions
   * (CPM) costs during this period.
   * This metric is a monetary value and returned in the customer's currency by
   * default. See the metrics_currency parameter at
   * https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   */
  costMicros?:
    | Long
    | undefined;
  /** The cost of ad interactions divided by all conversions. */
  costPerAllConversions?:
    | number
    | undefined;
  /** Average conversion eligible cost per biddable conversion. */
  costPerConversion?:
    | number
    | undefined;
  /**
   * The cost of ad interactions divided by current model attributed
   * conversions. This only includes conversion actions which
   * include_in_conversions_metric attribute is set to true. If you use
   * conversion-based bidding, your bid strategies will optimize for these
   * conversions.
   */
  costPerCurrentModelAttributedConversion?:
    | number
    | undefined;
  /**
   * Conversions from when a customer clicks on an ad on one device,
   * then converts on a different device or browser.
   * Cross-device conversions are already included in all_conversions.
   */
  crossDeviceConversions?:
    | number
    | undefined;
  /** The sum of the value of cross-device conversions. */
  crossDeviceConversionsValue?:
    | number
    | undefined;
  /**
   * The number of clicks your ad receives (Clicks) divided by the number
   * of times your ad is shown (Impressions).
   */
  ctr?:
    | number
    | undefined;
  /**
   * The number of conversions. This only includes conversion actions which
   * include_in_conversions_metric attribute is set to true. If you use
   * conversion-based bidding, your bid strategies will optimize for these
   * conversions.
   */
  conversions?:
    | number
    | undefined;
  /**
   * The sum of conversion values for the conversions included in the
   * "conversions" field. This metric is useful only if you entered a value for
   * your conversion actions.
   */
  conversionsValue?:
    | number
    | undefined;
  /** The creative historical quality score. */
  historicalCreativeQualityScore: QualityScoreBucketEnum_QualityScoreBucket;
  /** The average quality score. */
  averageQualityScore?:
    | number
    | undefined;
  /** The quality of historical landing page experience. */
  historicalLandingPageQualityScore: QualityScoreBucketEnum_QualityScoreBucket;
  /** The historical quality score. */
  historicalQualityScore?:
    | Long
    | undefined;
  /** The historical search predicted click through rate (CTR). */
  historicalSearchPredictedCtr: QualityScoreBucketEnum_QualityScoreBucket;
  /**
   * Count of how often your ad has appeared on a search results page or
   * website on the Google Network.
   */
  impressions?:
    | Long
    | undefined;
  /**
   * How often people interact with your ad after it is shown to them.
   * This is the number of interactions divided by the number of times your ad
   * is shown.
   */
  interactionRate?:
    | number
    | undefined;
  /**
   * The number of interactions.
   * An interaction is the main user action associated with an ad format-clicks
   * for text and shopping ads, views for video ads, and so on.
   */
  interactions?:
    | Long
    | undefined;
  /** The types of payable and free interactions. */
  interactionEventTypes: InteractionEventTypeEnum_InteractionEventType[];
  /**
   * The percentage of clicks filtered out of your total number of clicks
   * (filtered + non-filtered clicks) during the reporting period.
   */
  invalidClickRate?:
    | number
    | undefined;
  /** Number of clicks Google considers illegitimate and doesn't charge you for. */
  invalidClicks?:
    | Long
    | undefined;
  /** The percentage of mobile clicks that go to a mobile-friendly page. */
  mobileFriendlyClicksPercentage?:
    | number
    | undefined;
  /** The raw event conversion metrics. */
  rawEventConversionMetrics: Value[];
  /**
   * The percentage of the customer's Shopping or Search ad impressions that are
   * shown in the most prominent Shopping position. See
   * https://support.google.com/sa360/answer/9566729
   * for details. Any value below 0.1 is reported as 0.0999.
   */
  searchAbsoluteTopImpressionShare?:
    | number
    | undefined;
  /**
   * The number estimating how often your ad wasn't the very first ad among the
   * top ads in the search results due to a low budget. Note: Search
   * budget lost absolute top impression share is reported in the range of 0 to
   * 0.9. Any value above 0.9 is reported as 0.9001.
   */
  searchBudgetLostAbsoluteTopImpressionShare?:
    | number
    | undefined;
  /**
   * The estimated percent of times that your ad was eligible to show on the
   * Search Network but didn't because your budget was too low. Note: Search
   * budget lost impression share is reported in the range of 0 to 0.9. Any
   * value above 0.9 is reported as 0.9001.
   */
  searchBudgetLostImpressionShare?:
    | number
    | undefined;
  /**
   * The number estimating how often your ad didn't show adjacent to the top
   * organic search results due to a low budget. Note: Search
   * budget lost top impression share is reported in the range of 0 to 0.9. Any
   * value above 0.9 is reported as 0.9001.
   */
  searchBudgetLostTopImpressionShare?:
    | number
    | undefined;
  /**
   * The number of clicks you've received on the Search Network
   * divided by the estimated number of clicks you were eligible to receive.
   * Note: Search click share is reported in the range of 0.1 to 1. Any value
   * below 0.1 is reported as 0.0999.
   */
  searchClickShare?:
    | number
    | undefined;
  /**
   * The impressions you've received divided by the estimated number of
   * impressions you were eligible to receive on the Search Network for search
   * terms that matched your keywords exactly (or were close variants of your
   * keyword), regardless of your keyword match types. Note: Search exact match
   * impression share is reported in the range of 0.1 to 1. Any value below 0.1
   * is reported as 0.0999.
   */
  searchExactMatchImpressionShare?:
    | number
    | undefined;
  /**
   * The impressions you've received on the Search Network divided
   * by the estimated number of impressions you were eligible to receive.
   * Note: Search impression share is reported in the range of 0.1 to 1. Any
   * value below 0.1 is reported as 0.0999.
   */
  searchImpressionShare?:
    | number
    | undefined;
  /**
   * The number estimating how often your ad wasn't the very first ad among the
   * top ads in the search results due to poor Ad Rank.
   * Note: Search rank lost absolute top impression share is reported in the
   * range of 0 to 0.9. Any value above 0.9 is reported as 0.9001.
   */
  searchRankLostAbsoluteTopImpressionShare?:
    | number
    | undefined;
  /**
   * The estimated percentage of impressions on the Search Network
   * that your ads didn't receive due to poor Ad Rank.
   * Note: Search rank lost impression share is reported in the range of 0 to
   * 0.9. Any value above 0.9 is reported as 0.9001.
   */
  searchRankLostImpressionShare?:
    | number
    | undefined;
  /**
   * The number estimating how often your ad didn't show adjacent to the top
   * organic search results due to poor Ad Rank.
   * Note: Search rank lost top impression share is reported in the range of 0
   * to 0.9. Any value above 0.9 is reported as 0.9001.
   */
  searchRankLostTopImpressionShare?:
    | number
    | undefined;
  /**
   * The impressions you've received among the top ads compared to the estimated
   * number of impressions you were eligible to receive among the top ads.
   * Note: Search top impression share is reported in the range of 0.1 to 1. Any
   * value below 0.1 is reported as 0.0999.
   *
   * Top ads are generally above the top organic results, although they may show
   * below the top organic results on certain queries.
   */
  searchTopImpressionShare?:
    | number
    | undefined;
  /**
   * The percent of your ad impressions that are shown adjacent to the top
   * organic search results.
   */
  topImpressionPercentage?:
    | number
    | undefined;
  /** The value of all conversions divided by the number of all conversions. */
  valuePerAllConversions?:
    | number
    | undefined;
  /**
   * The value of all conversions divided by the number of all conversions. When
   * this column is selected with date, the values in date column means the
   * conversion date. Details for the by_conversion_date columns are available
   * at https://support.google.com/sa360/answer/9250611.
   */
  valuePerAllConversionsByConversionDate?:
    | number
    | undefined;
  /**
   * The value of biddable conversion divided by the number of biddable
   * conversions. Shows how much, on average, each of the biddable conversions
   * is worth.
   */
  valuePerConversion?:
    | number
    | undefined;
  /**
   * Biddable conversions value by conversion date divided by biddable
   * conversions by conversion date. Shows how much, on average, each of the
   * biddable conversions is worth (by conversion date). When this column is
   * selected with date, the values in date column means the conversion date.
   */
  valuePerConversionsByConversionDate?:
    | number
    | undefined;
  /**
   * The total number of view-through conversions.
   * These happen when a customer sees an image or rich media ad, then later
   * completes a conversion on your site without interacting with (for example,
   * clicking on) another ad.
   */
  clientAccountViewThroughConversions?:
    | Long
    | undefined;
  /**
   * Client account cross-sell cost of goods sold (COGS) is the total cost
   * of products sold as a result of advertising a different product.
   * How it works: You report conversions with cart data for
   * completed purchases on your website. If the ad that was interacted with
   * before the purchase has an associated product (see Shopping Ads) then this
   * product is considered the advertised product. Any product included in the
   * order the customer places is a sold product. If these products don't match
   * then this is considered cross-sell. Cross-sell cost of goods sold is the
   * total cost of the products sold that weren't advertised. Example: Someone
   * clicked on a Shopping ad for a hat then bought the same hat and a shirt.
   * The hat has a cost of goods sold value of $3, the shirt has a cost of goods
   * sold value of $5. The cross-sell cost of goods sold for this order is $5.
   * This metric is only available if you report conversions with cart data.
   * This metric is a monetary value and returned in the customer's currency by
   * default. See the metrics_currency parameter at
   * https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   */
  clientAccountCrossSellCostOfGoodsSoldMicros?:
    | Long
    | undefined;
  /**
   * Cross-sell cost of goods sold (COGS) is the total cost of products sold as
   * a result of advertising a different product.
   * How it works: You report conversions with cart data for
   * completed purchases on your website. If the ad that was interacted with
   * before the purchase has an associated product (see Shopping Ads) then this
   * product is considered the advertised product. Any product included in the
   * order the customer places is a sold product. If these products don't match
   * then this is considered cross-sell. Cross-sell cost of goods sold is the
   * total cost of the products sold that weren't advertised. Example: Someone
   * clicked on a Shopping ad for a hat then bought the same hat and a shirt.
   * The hat has a cost of goods sold value of $3, the shirt has a cost of goods
   * sold value of $5. The cross-sell cost of goods sold for this order is $5.
   * This metric is only available if you report conversions with cart data.
   * This metric is a monetary value and returned in the customer's currency by
   * default. See the metrics_currency parameter at
   * https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   */
  crossSellCostOfGoodsSoldMicros?:
    | Long
    | undefined;
  /**
   * Client account cross-sell gross profit is the profit you made from
   * products sold as a result of advertising a different product, minus cost of
   * goods sold (COGS).
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the purchase is a sold
   * product. If these products don't match then this is considered cross-sell.
   * Cross-sell gross profit is the revenue you made from cross-sell attributed
   * to your ads minus the cost of the goods sold. Example: Someone clicked on a
   * Shopping ad for a hat then bought the same hat and a shirt. The shirt is
   * priced $20 and has a cost of goods sold value of $5. The cross-sell gross
   * profit of this order is $15 = $20 - $5. This metric is only available if
   * you report conversions with cart data. This metric is a monetary value and
   * returned in the customer's currency by default. See the metrics_currency
   * parameter at
   * https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   */
  clientAccountCrossSellGrossProfitMicros?:
    | Long
    | undefined;
  /**
   * Cross-sell gross profit is the profit you made from products sold as a
   * result of advertising a different product, minus cost of goods sold (COGS).
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the purchase is a sold
   * product. If these products don't match then this is considered cross-sell.
   * Cross-sell gross profit is the revenue you made from cross-sell attributed
   * to your ads minus the cost of the goods sold.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat and a shirt. The shirt is priced $20 and has a cost of goods sold value
   * of $5. The cross-sell gross profit of this order is $15 = $20 - $5.
   * This metric is only available if you report conversions with cart data.
   * This metric is a monetary value and returned in the customer's currency by
   * default. See the metrics_currency parameter at
   * https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   */
  crossSellGrossProfitMicros?:
    | Long
    | undefined;
  /**
   * Client account cross-sell revenue is the total amount you made from
   * products sold as a result of advertising a different product.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the order the customer
   * places is a sold product. If these products don't match then this is
   * considered cross-sell. Cross-sell revenue is the total value you made from
   * cross-sell attributed to your ads. Example: Someone clicked on a Shopping
   * ad for a hat then bought the same hat and a shirt. The hat is priced $10
   * and the shirt is priced $20. The cross-sell revenue of this order is $20.
   * This metric is only available if you report conversions with cart data.
   * This metric is a monetary value and returned in the customer's currency by
   * default. See the metrics_currency parameter at
   * https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   */
  clientAccountCrossSellRevenueMicros?:
    | Long
    | undefined;
  /**
   * Cross-sell revenue is the total amount you made from products sold as a
   * result of advertising a different product.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the order the customer
   * places is a sold product. If these products don't match then this is
   * considered cross-sell. Cross-sell revenue is the total value you made from
   * cross-sell attributed to your ads. Example: Someone clicked on a Shopping
   * ad for a hat then bought the same hat and a shirt. The hat is priced $10
   * and the shirt is priced $20. The cross-sell revenue of this order is $20.
   * This metric is only available if you report conversions with cart data.
   * This metric is a monetary value and returned in the customer's currency by
   * default. See the metrics_currency parameter at
   * https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   */
  crossSellRevenueMicros?:
    | Long
    | undefined;
  /**
   * Client account cross-sell units sold is
   * the total number of products sold as a result of advertising a different
   * product.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the order the customer
   * places is a sold product. If these products don't match then this is
   * considered cross-sell. Cross-sell units sold is the total number of
   * cross-sold products from all orders attributed to your ads.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat, a shirt and a jacket. The cross-sell units sold in this order is 2.
   * This metric is only available if you report conversions with cart data.
   */
  clientAccountCrossSellUnitsSold?:
    | number
    | undefined;
  /**
   * Cross-sell units sold is the total number of products sold as a result of
   * advertising a different product.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the order the customer
   * places is a sold product. If these products don't match then this is
   * considered cross-sell. Cross-sell units sold is the total number of
   * cross-sold products from all orders attributed to your ads.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat, a shirt and a jacket. The cross-sell units sold in this order is 2.
   * This metric is only available if you report conversions with cart data.
   */
  crossSellUnitsSold?:
    | number
    | undefined;
  /**
   * Client account lead cost of goods sold (COGS) is the total cost of
   * products sold as a result of advertising the same product.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with has an associated
   * product (see Shopping Ads) then this product is considered the advertised
   * product. Any product included in the order the customer places is a sold
   * product. If the advertised and sold products match, then the cost of these
   * goods is counted under lead cost of goods sold. Example: Someone clicked on
   * a Shopping ad for a hat then bought the same hat and a shirt. The hat has a
   * cost of goods sold value of $3, the shirt has a cost of goods sold value of
   * $5. The lead cost of goods sold for this order is $3. This metric is only
   * available if you report conversions with cart data. This metric is a
   * monetary value and returned in the customer's currency by default. See the
   * metrics_currency parameter at
   * https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   */
  clientAccountLeadCostOfGoodsSoldMicros?:
    | Long
    | undefined;
  /**
   * Lead cost of goods sold (COGS) is the total cost of products sold as a
   * result of advertising the same product.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with has an associated
   * product (see Shopping Ads) then this product is considered the advertised
   * product. Any product included in the order the customer places is a sold
   * product. If the advertised and sold products match, then the cost of these
   * goods is counted under lead cost of goods sold. Example: Someone clicked on
   * a Shopping ad for a hat then bought the same hat and a shirt. The hat has a
   * cost of goods sold value of $3, the shirt has a cost of goods sold value of
   * $5. The lead cost of goods sold for this order is $3. This metric is only
   * available if you report conversions with cart data. This metric is a
   * monetary value and returned in the customer's currency by default. See the
   * metrics_currency parameter at
   * https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   */
  leadCostOfGoodsSoldMicros?:
    | Long
    | undefined;
  /**
   * Client account lead gross profit is the profit you made from products
   * sold as a result of advertising the same product, minus cost of goods sold
   * (COGS).
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the order the customer
   * places is a sold product. If the advertised and sold products match, then
   * the revenue you made from these sales minus the cost of goods sold is your
   * lead gross profit. Example: Someone clicked on a Shopping ad for a hat then
   * bought the same hat and a shirt. The hat is priced $10 and has a cost of
   * goods sold value of $3. The lead gross profit of this order is $7 = $10 -
   * $3. This metric is only available if you report conversions with cart data.
   * This metric is a monetary value and returned in the customer's currency by
   * default. See the metrics_currency parameter at
   * https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   */
  clientAccountLeadGrossProfitMicros?:
    | Long
    | undefined;
  /**
   * Lead gross profit is the profit you made from products sold as a result of
   * advertising the same product, minus cost of goods sold (COGS).
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the order the customer
   * places is a sold product. If the advertised and sold products match, then
   * the revenue you made from these sales minus the cost of goods sold is your
   * lead gross profit. Example: Someone clicked on a Shopping ad for a hat then
   * bought the same hat and a shirt. The hat is priced $10 and has a cost of
   * goods sold value of $3. The lead gross profit of this order is $7 = $10 -
   * $3. This metric is only available if you report conversions with cart data.
   * This metric is a monetary value and returned in the customer's currency by
   * default. See the metrics_currency parameter at
   * https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   */
  leadGrossProfitMicros?:
    | Long
    | undefined;
  /**
   * Client account lead revenue is the total amount you made from
   * products sold as a result of advertising the same product.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the order the customer
   * places is a sold product. If the advertised and sold products match, then
   * the total value you made from the sales of these products is shown under
   * lead revenue. Example: Someone clicked on a Shopping ad for a hat then
   * bought the same hat and a shirt. The hat is priced $10 and the shirt is
   * priced $20. The lead revenue of this order is $10. This metric is only
   * available if you report conversions with cart data. This metric is a
   * monetary value and returned in the customer's currency by default. See the
   * metrics_currency parameter at
   * https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   */
  clientAccountLeadRevenueMicros?:
    | Long
    | undefined;
  /**
   * Lead revenue is the total amount you made from products sold as a result of
   * advertising the same product.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the order the customer
   * places is a sold product. If the advertised and sold products match, then
   * the total value you made from the sales of these products is shown under
   * lead revenue.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat and a shirt. The hat is priced $10 and the shirt is priced $20. The
   * lead revenue of this order is $10.
   * This metric is only available if you report conversions with cart data.
   * This metric is a monetary value and returned in the customer's currency by
   * default. See the metrics_currency parameter at
   * https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   */
  leadRevenueMicros?:
    | Long
    | undefined;
  /**
   * Client account lead units sold is the total number of
   * products sold as a result of advertising the same product.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the order the customer
   * places is a sold product. If the advertised and sold products match, then
   * the total number of these products sold is shown under lead units sold.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat, a shirt and a jacket. The lead units sold in this order is 1.
   * This metric is only available if you report conversions with cart data.
   */
  clientAccountLeadUnitsSold?:
    | number
    | undefined;
  /**
   * Lead units sold is the total number of products sold as a result of
   * advertising the same product.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the order the customer
   * places is a sold product. If the advertised and sold products match, then
   * the total number of these products sold is shown under lead units sold.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat, a shirt and a jacket. The lead units sold in this order is 1.
   * This metric is only available if you report conversions with cart data.
   */
  leadUnitsSold?: number | undefined;
}

function createBaseMetrics(): Metrics {
  return {
    absoluteTopImpressionPercentage: undefined,
    allConversionsFromInteractionsRate: undefined,
    allConversionsValue: undefined,
    allConversionsValueByConversionDate: 0,
    allConversions: undefined,
    allConversionsByConversionDate: 0,
    allConversionsValuePerCost: undefined,
    allConversionsFromClickToCall: undefined,
    allConversionsFromDirections: undefined,
    allConversionsFromInteractionsValuePerInteraction: undefined,
    allConversionsFromMenu: undefined,
    allConversionsFromOrder: undefined,
    allConversionsFromOtherEngagement: undefined,
    allConversionsFromStoreVisit: undefined,
    visits: undefined,
    allConversionsFromStoreWebsite: undefined,
    averageCost: undefined,
    averageCpc: undefined,
    averageCpm: undefined,
    clicks: undefined,
    contentBudgetLostImpressionShare: undefined,
    contentImpressionShare: undefined,
    conversionCustomMetrics: [],
    contentRankLostImpressionShare: undefined,
    conversionsFromInteractionsRate: undefined,
    clientAccountConversionsValue: undefined,
    conversionsValueByConversionDate: 0,
    conversionsValuePerCost: undefined,
    conversionsFromInteractionsValuePerInteraction: undefined,
    clientAccountConversions: undefined,
    conversionsByConversionDate: 0,
    costMicros: undefined,
    costPerAllConversions: undefined,
    costPerConversion: undefined,
    costPerCurrentModelAttributedConversion: undefined,
    crossDeviceConversions: undefined,
    crossDeviceConversionsValue: undefined,
    ctr: undefined,
    conversions: undefined,
    conversionsValue: undefined,
    historicalCreativeQualityScore: 0,
    averageQualityScore: undefined,
    historicalLandingPageQualityScore: 0,
    historicalQualityScore: undefined,
    historicalSearchPredictedCtr: 0,
    impressions: undefined,
    interactionRate: undefined,
    interactions: undefined,
    interactionEventTypes: [],
    invalidClickRate: undefined,
    invalidClicks: undefined,
    mobileFriendlyClicksPercentage: undefined,
    rawEventConversionMetrics: [],
    searchAbsoluteTopImpressionShare: undefined,
    searchBudgetLostAbsoluteTopImpressionShare: undefined,
    searchBudgetLostImpressionShare: undefined,
    searchBudgetLostTopImpressionShare: undefined,
    searchClickShare: undefined,
    searchExactMatchImpressionShare: undefined,
    searchImpressionShare: undefined,
    searchRankLostAbsoluteTopImpressionShare: undefined,
    searchRankLostImpressionShare: undefined,
    searchRankLostTopImpressionShare: undefined,
    searchTopImpressionShare: undefined,
    topImpressionPercentage: undefined,
    valuePerAllConversions: undefined,
    valuePerAllConversionsByConversionDate: undefined,
    valuePerConversion: undefined,
    valuePerConversionsByConversionDate: undefined,
    clientAccountViewThroughConversions: undefined,
    clientAccountCrossSellCostOfGoodsSoldMicros: undefined,
    crossSellCostOfGoodsSoldMicros: undefined,
    clientAccountCrossSellGrossProfitMicros: undefined,
    crossSellGrossProfitMicros: undefined,
    clientAccountCrossSellRevenueMicros: undefined,
    crossSellRevenueMicros: undefined,
    clientAccountCrossSellUnitsSold: undefined,
    crossSellUnitsSold: undefined,
    clientAccountLeadCostOfGoodsSoldMicros: undefined,
    leadCostOfGoodsSoldMicros: undefined,
    clientAccountLeadGrossProfitMicros: undefined,
    leadGrossProfitMicros: undefined,
    clientAccountLeadRevenueMicros: undefined,
    leadRevenueMicros: undefined,
    clientAccountLeadUnitsSold: undefined,
    leadUnitsSold: undefined,
  };
}

export const Metrics: MessageFns<Metrics> = {
  encode(message: Metrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.absoluteTopImpressionPercentage !== undefined) {
      writer.uint32(1465).double(message.absoluteTopImpressionPercentage);
    }
    if (message.allConversionsFromInteractionsRate !== undefined) {
      writer.uint32(1529).double(message.allConversionsFromInteractionsRate);
    }
    if (message.allConversionsValue !== undefined) {
      writer.uint32(1537).double(message.allConversionsValue);
    }
    if (message.allConversionsValueByConversionDate !== 0) {
      writer.uint32(1921).double(message.allConversionsValueByConversionDate);
    }
    if (message.allConversions !== undefined) {
      writer.uint32(1545).double(message.allConversions);
    }
    if (message.allConversionsByConversionDate !== 0) {
      writer.uint32(1929).double(message.allConversionsByConversionDate);
    }
    if (message.allConversionsValuePerCost !== undefined) {
      writer.uint32(1553).double(message.allConversionsValuePerCost);
    }
    if (message.allConversionsFromClickToCall !== undefined) {
      writer.uint32(1561).double(message.allConversionsFromClickToCall);
    }
    if (message.allConversionsFromDirections !== undefined) {
      writer.uint32(1569).double(message.allConversionsFromDirections);
    }
    if (message.allConversionsFromInteractionsValuePerInteraction !== undefined) {
      writer.uint32(1577).double(message.allConversionsFromInteractionsValuePerInteraction);
    }
    if (message.allConversionsFromMenu !== undefined) {
      writer.uint32(1585).double(message.allConversionsFromMenu);
    }
    if (message.allConversionsFromOrder !== undefined) {
      writer.uint32(1593).double(message.allConversionsFromOrder);
    }
    if (message.allConversionsFromOtherEngagement !== undefined) {
      writer.uint32(1601).double(message.allConversionsFromOtherEngagement);
    }
    if (message.allConversionsFromStoreVisit !== undefined) {
      writer.uint32(1609).double(message.allConversionsFromStoreVisit);
    }
    if (message.visits !== undefined) {
      writer.uint32(2313).double(message.visits);
    }
    if (message.allConversionsFromStoreWebsite !== undefined) {
      writer.uint32(1617).double(message.allConversionsFromStoreWebsite);
    }
    if (message.averageCost !== undefined) {
      writer.uint32(1625).double(message.averageCost);
    }
    if (message.averageCpc !== undefined) {
      writer.uint32(2537).double(message.averageCpc);
    }
    if (message.averageCpm !== undefined) {
      writer.uint32(2545).double(message.averageCpm);
    }
    if (message.clicks !== undefined) {
      writer.uint32(1048).int64(message.clicks.toString());
    }
    if (message.contentBudgetLostImpressionShare !== undefined) {
      writer.uint32(1273).double(message.contentBudgetLostImpressionShare);
    }
    if (message.contentImpressionShare !== undefined) {
      writer.uint32(1281).double(message.contentImpressionShare);
    }
    for (const v of message.conversionCustomMetrics) {
      Value.encode(v!, writer.uint32(2690).fork()).join();
    }
    if (message.contentRankLostImpressionShare !== undefined) {
      writer.uint32(1305).double(message.contentRankLostImpressionShare);
    }
    if (message.conversionsFromInteractionsRate !== undefined) {
      writer.uint32(2273).double(message.conversionsFromInteractionsRate);
    }
    if (message.clientAccountConversionsValue !== undefined) {
      writer.uint32(1321).double(message.clientAccountConversionsValue);
    }
    if (message.conversionsValueByConversionDate !== 0) {
      writer.uint32(2265).double(message.conversionsValueByConversionDate);
    }
    if (message.conversionsValuePerCost !== undefined) {
      writer.uint32(2305).double(message.conversionsValuePerCost);
    }
    if (message.conversionsFromInteractionsValuePerInteraction !== undefined) {
      writer.uint32(1337).double(message.conversionsFromInteractionsValuePerInteraction);
    }
    if (message.clientAccountConversions !== undefined) {
      writer.uint32(1345).double(message.clientAccountConversions);
    }
    if (message.conversionsByConversionDate !== 0) {
      writer.uint32(2257).double(message.conversionsByConversionDate);
    }
    if (message.costMicros !== undefined) {
      writer.uint32(2528).int64(message.costMicros.toString());
    }
    if (message.costPerAllConversions !== undefined) {
      writer.uint32(1361).double(message.costPerAllConversions);
    }
    if (message.costPerConversion !== undefined) {
      writer.uint32(2289).double(message.costPerConversion);
    }
    if (message.costPerCurrentModelAttributedConversion !== undefined) {
      writer.uint32(1377).double(message.costPerCurrentModelAttributedConversion);
    }
    if (message.crossDeviceConversions !== undefined) {
      writer.uint32(1385).double(message.crossDeviceConversions);
    }
    if (message.crossDeviceConversionsValue !== undefined) {
      writer.uint32(2025).double(message.crossDeviceConversionsValue);
    }
    if (message.ctr !== undefined) {
      writer.uint32(1393).double(message.ctr);
    }
    if (message.conversions !== undefined) {
      writer.uint32(2009).double(message.conversions);
    }
    if (message.conversionsValue !== undefined) {
      writer.uint32(2017).double(message.conversionsValue);
    }
    if (message.historicalCreativeQualityScore !== 0) {
      writer.uint32(640).int32(message.historicalCreativeQualityScore);
    }
    if (message.averageQualityScore !== undefined) {
      writer.uint32(2913).double(message.averageQualityScore);
    }
    if (message.historicalLandingPageQualityScore !== 0) {
      writer.uint32(648).int32(message.historicalLandingPageQualityScore);
    }
    if (message.historicalQualityScore !== undefined) {
      writer.uint32(1728).int64(message.historicalQualityScore.toString());
    }
    if (message.historicalSearchPredictedCtr !== 0) {
      writer.uint32(664).int32(message.historicalSearchPredictedCtr);
    }
    if (message.impressions !== undefined) {
      writer.uint32(1768).int64(message.impressions.toString());
    }
    if (message.interactionRate !== undefined) {
      writer.uint32(1777).double(message.interactionRate);
    }
    if (message.interactions !== undefined) {
      writer.uint32(1784).int64(message.interactions.toString());
    }
    writer.uint32(802).fork();
    for (const v of message.interactionEventTypes) {
      writer.int32(v);
    }
    writer.join();
    if (message.invalidClickRate !== undefined) {
      writer.uint32(1793).double(message.invalidClickRate);
    }
    if (message.invalidClicks !== undefined) {
      writer.uint32(1800).int64(message.invalidClicks.toString());
    }
    if (message.mobileFriendlyClicksPercentage !== undefined) {
      writer.uint32(1833).double(message.mobileFriendlyClicksPercentage);
    }
    for (const v of message.rawEventConversionMetrics) {
      Value.encode(v!, writer.uint32(2698).fork()).join();
    }
    if (message.searchAbsoluteTopImpressionShare !== undefined) {
      writer.uint32(1089).double(message.searchAbsoluteTopImpressionShare);
    }
    if (message.searchBudgetLostAbsoluteTopImpressionShare !== undefined) {
      writer.uint32(1097).double(message.searchBudgetLostAbsoluteTopImpressionShare);
    }
    if (message.searchBudgetLostImpressionShare !== undefined) {
      writer.uint32(1105).double(message.searchBudgetLostImpressionShare);
    }
    if (message.searchBudgetLostTopImpressionShare !== undefined) {
      writer.uint32(1113).double(message.searchBudgetLostTopImpressionShare);
    }
    if (message.searchClickShare !== undefined) {
      writer.uint32(1121).double(message.searchClickShare);
    }
    if (message.searchExactMatchImpressionShare !== undefined) {
      writer.uint32(1129).double(message.searchExactMatchImpressionShare);
    }
    if (message.searchImpressionShare !== undefined) {
      writer.uint32(1137).double(message.searchImpressionShare);
    }
    if (message.searchRankLostAbsoluteTopImpressionShare !== undefined) {
      writer.uint32(1145).double(message.searchRankLostAbsoluteTopImpressionShare);
    }
    if (message.searchRankLostImpressionShare !== undefined) {
      writer.uint32(1153).double(message.searchRankLostImpressionShare);
    }
    if (message.searchRankLostTopImpressionShare !== undefined) {
      writer.uint32(1161).double(message.searchRankLostTopImpressionShare);
    }
    if (message.searchTopImpressionShare !== undefined) {
      writer.uint32(1169).double(message.searchTopImpressionShare);
    }
    if (message.topImpressionPercentage !== undefined) {
      writer.uint32(1185).double(message.topImpressionPercentage);
    }
    if (message.valuePerAllConversions !== undefined) {
      writer.uint32(1201).double(message.valuePerAllConversions);
    }
    if (message.valuePerAllConversionsByConversionDate !== undefined) {
      writer.uint32(1953).double(message.valuePerAllConversionsByConversionDate);
    }
    if (message.valuePerConversion !== undefined) {
      writer.uint32(2297).double(message.valuePerConversion);
    }
    if (message.valuePerConversionsByConversionDate !== undefined) {
      writer.uint32(2281).double(message.valuePerConversionsByConversionDate);
    }
    if (message.clientAccountViewThroughConversions !== undefined) {
      writer.uint32(1240).int64(message.clientAccountViewThroughConversions.toString());
    }
    if (message.clientAccountCrossSellCostOfGoodsSoldMicros !== undefined) {
      writer.uint32(2568).int64(message.clientAccountCrossSellCostOfGoodsSoldMicros.toString());
    }
    if (message.crossSellCostOfGoodsSoldMicros !== undefined) {
      writer.uint32(2616).int64(message.crossSellCostOfGoodsSoldMicros.toString());
    }
    if (message.clientAccountCrossSellGrossProfitMicros !== undefined) {
      writer.uint32(2576).int64(message.clientAccountCrossSellGrossProfitMicros.toString());
    }
    if (message.crossSellGrossProfitMicros !== undefined) {
      writer.uint32(2624).int64(message.crossSellGrossProfitMicros.toString());
    }
    if (message.clientAccountCrossSellRevenueMicros !== undefined) {
      writer.uint32(2584).int64(message.clientAccountCrossSellRevenueMicros.toString());
    }
    if (message.crossSellRevenueMicros !== undefined) {
      writer.uint32(2632).int64(message.crossSellRevenueMicros.toString());
    }
    if (message.clientAccountCrossSellUnitsSold !== undefined) {
      writer.uint32(2457).double(message.clientAccountCrossSellUnitsSold);
    }
    if (message.crossSellUnitsSold !== undefined) {
      writer.uint32(2641).double(message.crossSellUnitsSold);
    }
    if (message.clientAccountLeadCostOfGoodsSoldMicros !== undefined) {
      writer.uint32(2592).int64(message.clientAccountLeadCostOfGoodsSoldMicros.toString());
    }
    if (message.leadCostOfGoodsSoldMicros !== undefined) {
      writer.uint32(2656).int64(message.leadCostOfGoodsSoldMicros.toString());
    }
    if (message.clientAccountLeadGrossProfitMicros !== undefined) {
      writer.uint32(2600).int64(message.clientAccountLeadGrossProfitMicros.toString());
    }
    if (message.leadGrossProfitMicros !== undefined) {
      writer.uint32(2664).int64(message.leadGrossProfitMicros.toString());
    }
    if (message.clientAccountLeadRevenueMicros !== undefined) {
      writer.uint32(2608).int64(message.clientAccountLeadRevenueMicros.toString());
    }
    if (message.leadRevenueMicros !== undefined) {
      writer.uint32(2672).int64(message.leadRevenueMicros.toString());
    }
    if (message.clientAccountLeadUnitsSold !== undefined) {
      writer.uint32(2489).double(message.clientAccountLeadUnitsSold);
    }
    if (message.leadUnitsSold !== undefined) {
      writer.uint32(2681).double(message.leadUnitsSold);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Metrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 183:
          if (tag !== 1465) {
            break;
          }

          message.absoluteTopImpressionPercentage = reader.double();
          continue;
        case 191:
          if (tag !== 1529) {
            break;
          }

          message.allConversionsFromInteractionsRate = reader.double();
          continue;
        case 192:
          if (tag !== 1537) {
            break;
          }

          message.allConversionsValue = reader.double();
          continue;
        case 240:
          if (tag !== 1921) {
            break;
          }

          message.allConversionsValueByConversionDate = reader.double();
          continue;
        case 193:
          if (tag !== 1545) {
            break;
          }

          message.allConversions = reader.double();
          continue;
        case 241:
          if (tag !== 1929) {
            break;
          }

          message.allConversionsByConversionDate = reader.double();
          continue;
        case 194:
          if (tag !== 1553) {
            break;
          }

          message.allConversionsValuePerCost = reader.double();
          continue;
        case 195:
          if (tag !== 1561) {
            break;
          }

          message.allConversionsFromClickToCall = reader.double();
          continue;
        case 196:
          if (tag !== 1569) {
            break;
          }

          message.allConversionsFromDirections = reader.double();
          continue;
        case 197:
          if (tag !== 1577) {
            break;
          }

          message.allConversionsFromInteractionsValuePerInteraction = reader.double();
          continue;
        case 198:
          if (tag !== 1585) {
            break;
          }

          message.allConversionsFromMenu = reader.double();
          continue;
        case 199:
          if (tag !== 1593) {
            break;
          }

          message.allConversionsFromOrder = reader.double();
          continue;
        case 200:
          if (tag !== 1601) {
            break;
          }

          message.allConversionsFromOtherEngagement = reader.double();
          continue;
        case 201:
          if (tag !== 1609) {
            break;
          }

          message.allConversionsFromStoreVisit = reader.double();
          continue;
        case 289:
          if (tag !== 2313) {
            break;
          }

          message.visits = reader.double();
          continue;
        case 202:
          if (tag !== 1617) {
            break;
          }

          message.allConversionsFromStoreWebsite = reader.double();
          continue;
        case 203:
          if (tag !== 1625) {
            break;
          }

          message.averageCost = reader.double();
          continue;
        case 317:
          if (tag !== 2537) {
            break;
          }

          message.averageCpc = reader.double();
          continue;
        case 318:
          if (tag !== 2545) {
            break;
          }

          message.averageCpm = reader.double();
          continue;
        case 131:
          if (tag !== 1048) {
            break;
          }

          message.clicks = Long.fromString(reader.int64().toString());
          continue;
        case 159:
          if (tag !== 1273) {
            break;
          }

          message.contentBudgetLostImpressionShare = reader.double();
          continue;
        case 160:
          if (tag !== 1281) {
            break;
          }

          message.contentImpressionShare = reader.double();
          continue;
        case 336:
          if (tag !== 2690) {
            break;
          }

          message.conversionCustomMetrics.push(Value.decode(reader, reader.uint32()));
          continue;
        case 163:
          if (tag !== 1305) {
            break;
          }

          message.contentRankLostImpressionShare = reader.double();
          continue;
        case 284:
          if (tag !== 2273) {
            break;
          }

          message.conversionsFromInteractionsRate = reader.double();
          continue;
        case 165:
          if (tag !== 1321) {
            break;
          }

          message.clientAccountConversionsValue = reader.double();
          continue;
        case 283:
          if (tag !== 2265) {
            break;
          }

          message.conversionsValueByConversionDate = reader.double();
          continue;
        case 288:
          if (tag !== 2305) {
            break;
          }

          message.conversionsValuePerCost = reader.double();
          continue;
        case 167:
          if (tag !== 1337) {
            break;
          }

          message.conversionsFromInteractionsValuePerInteraction = reader.double();
          continue;
        case 168:
          if (tag !== 1345) {
            break;
          }

          message.clientAccountConversions = reader.double();
          continue;
        case 282:
          if (tag !== 2257) {
            break;
          }

          message.conversionsByConversionDate = reader.double();
          continue;
        case 316:
          if (tag !== 2528) {
            break;
          }

          message.costMicros = Long.fromString(reader.int64().toString());
          continue;
        case 170:
          if (tag !== 1361) {
            break;
          }

          message.costPerAllConversions = reader.double();
          continue;
        case 286:
          if (tag !== 2289) {
            break;
          }

          message.costPerConversion = reader.double();
          continue;
        case 172:
          if (tag !== 1377) {
            break;
          }

          message.costPerCurrentModelAttributedConversion = reader.double();
          continue;
        case 173:
          if (tag !== 1385) {
            break;
          }

          message.crossDeviceConversions = reader.double();
          continue;
        case 253:
          if (tag !== 2025) {
            break;
          }

          message.crossDeviceConversionsValue = reader.double();
          continue;
        case 174:
          if (tag !== 1393) {
            break;
          }

          message.ctr = reader.double();
          continue;
        case 251:
          if (tag !== 2009) {
            break;
          }

          message.conversions = reader.double();
          continue;
        case 252:
          if (tag !== 2017) {
            break;
          }

          message.conversionsValue = reader.double();
          continue;
        case 80:
          if (tag !== 640) {
            break;
          }

          message.historicalCreativeQualityScore = reader.int32() as any;
          continue;
        case 364:
          if (tag !== 2913) {
            break;
          }

          message.averageQualityScore = reader.double();
          continue;
        case 81:
          if (tag !== 648) {
            break;
          }

          message.historicalLandingPageQualityScore = reader.int32() as any;
          continue;
        case 216:
          if (tag !== 1728) {
            break;
          }

          message.historicalQualityScore = Long.fromString(reader.int64().toString());
          continue;
        case 83:
          if (tag !== 664) {
            break;
          }

          message.historicalSearchPredictedCtr = reader.int32() as any;
          continue;
        case 221:
          if (tag !== 1768) {
            break;
          }

          message.impressions = Long.fromString(reader.int64().toString());
          continue;
        case 222:
          if (tag !== 1777) {
            break;
          }

          message.interactionRate = reader.double();
          continue;
        case 223:
          if (tag !== 1784) {
            break;
          }

          message.interactions = Long.fromString(reader.int64().toString());
          continue;
        case 100:
          if (tag === 800) {
            message.interactionEventTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 802) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.interactionEventTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 224:
          if (tag !== 1793) {
            break;
          }

          message.invalidClickRate = reader.double();
          continue;
        case 225:
          if (tag !== 1800) {
            break;
          }

          message.invalidClicks = Long.fromString(reader.int64().toString());
          continue;
        case 229:
          if (tag !== 1833) {
            break;
          }

          message.mobileFriendlyClicksPercentage = reader.double();
          continue;
        case 337:
          if (tag !== 2698) {
            break;
          }

          message.rawEventConversionMetrics.push(Value.decode(reader, reader.uint32()));
          continue;
        case 136:
          if (tag !== 1089) {
            break;
          }

          message.searchAbsoluteTopImpressionShare = reader.double();
          continue;
        case 137:
          if (tag !== 1097) {
            break;
          }

          message.searchBudgetLostAbsoluteTopImpressionShare = reader.double();
          continue;
        case 138:
          if (tag !== 1105) {
            break;
          }

          message.searchBudgetLostImpressionShare = reader.double();
          continue;
        case 139:
          if (tag !== 1113) {
            break;
          }

          message.searchBudgetLostTopImpressionShare = reader.double();
          continue;
        case 140:
          if (tag !== 1121) {
            break;
          }

          message.searchClickShare = reader.double();
          continue;
        case 141:
          if (tag !== 1129) {
            break;
          }

          message.searchExactMatchImpressionShare = reader.double();
          continue;
        case 142:
          if (tag !== 1137) {
            break;
          }

          message.searchImpressionShare = reader.double();
          continue;
        case 143:
          if (tag !== 1145) {
            break;
          }

          message.searchRankLostAbsoluteTopImpressionShare = reader.double();
          continue;
        case 144:
          if (tag !== 1153) {
            break;
          }

          message.searchRankLostImpressionShare = reader.double();
          continue;
        case 145:
          if (tag !== 1161) {
            break;
          }

          message.searchRankLostTopImpressionShare = reader.double();
          continue;
        case 146:
          if (tag !== 1169) {
            break;
          }

          message.searchTopImpressionShare = reader.double();
          continue;
        case 148:
          if (tag !== 1185) {
            break;
          }

          message.topImpressionPercentage = reader.double();
          continue;
        case 150:
          if (tag !== 1201) {
            break;
          }

          message.valuePerAllConversions = reader.double();
          continue;
        case 244:
          if (tag !== 1953) {
            break;
          }

          message.valuePerAllConversionsByConversionDate = reader.double();
          continue;
        case 287:
          if (tag !== 2297) {
            break;
          }

          message.valuePerConversion = reader.double();
          continue;
        case 285:
          if (tag !== 2281) {
            break;
          }

          message.valuePerConversionsByConversionDate = reader.double();
          continue;
        case 155:
          if (tag !== 1240) {
            break;
          }

          message.clientAccountViewThroughConversions = Long.fromString(reader.int64().toString());
          continue;
        case 321:
          if (tag !== 2568) {
            break;
          }

          message.clientAccountCrossSellCostOfGoodsSoldMicros = Long.fromString(reader.int64().toString());
          continue;
        case 327:
          if (tag !== 2616) {
            break;
          }

          message.crossSellCostOfGoodsSoldMicros = Long.fromString(reader.int64().toString());
          continue;
        case 322:
          if (tag !== 2576) {
            break;
          }

          message.clientAccountCrossSellGrossProfitMicros = Long.fromString(reader.int64().toString());
          continue;
        case 328:
          if (tag !== 2624) {
            break;
          }

          message.crossSellGrossProfitMicros = Long.fromString(reader.int64().toString());
          continue;
        case 323:
          if (tag !== 2584) {
            break;
          }

          message.clientAccountCrossSellRevenueMicros = Long.fromString(reader.int64().toString());
          continue;
        case 329:
          if (tag !== 2632) {
            break;
          }

          message.crossSellRevenueMicros = Long.fromString(reader.int64().toString());
          continue;
        case 307:
          if (tag !== 2457) {
            break;
          }

          message.clientAccountCrossSellUnitsSold = reader.double();
          continue;
        case 330:
          if (tag !== 2641) {
            break;
          }

          message.crossSellUnitsSold = reader.double();
          continue;
        case 324:
          if (tag !== 2592) {
            break;
          }

          message.clientAccountLeadCostOfGoodsSoldMicros = Long.fromString(reader.int64().toString());
          continue;
        case 332:
          if (tag !== 2656) {
            break;
          }

          message.leadCostOfGoodsSoldMicros = Long.fromString(reader.int64().toString());
          continue;
        case 325:
          if (tag !== 2600) {
            break;
          }

          message.clientAccountLeadGrossProfitMicros = Long.fromString(reader.int64().toString());
          continue;
        case 333:
          if (tag !== 2664) {
            break;
          }

          message.leadGrossProfitMicros = Long.fromString(reader.int64().toString());
          continue;
        case 326:
          if (tag !== 2608) {
            break;
          }

          message.clientAccountLeadRevenueMicros = Long.fromString(reader.int64().toString());
          continue;
        case 334:
          if (tag !== 2672) {
            break;
          }

          message.leadRevenueMicros = Long.fromString(reader.int64().toString());
          continue;
        case 311:
          if (tag !== 2489) {
            break;
          }

          message.clientAccountLeadUnitsSold = reader.double();
          continue;
        case 335:
          if (tag !== 2681) {
            break;
          }

          message.leadUnitsSold = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Metrics {
    return {
      absoluteTopImpressionPercentage: isSet(object.absoluteTopImpressionPercentage)
        ? globalThis.Number(object.absoluteTopImpressionPercentage)
        : undefined,
      allConversionsFromInteractionsRate: isSet(object.allConversionsFromInteractionsRate)
        ? globalThis.Number(object.allConversionsFromInteractionsRate)
        : undefined,
      allConversionsValue: isSet(object.allConversionsValue)
        ? globalThis.Number(object.allConversionsValue)
        : undefined,
      allConversionsValueByConversionDate: isSet(object.allConversionsValueByConversionDate)
        ? globalThis.Number(object.allConversionsValueByConversionDate)
        : 0,
      allConversions: isSet(object.allConversions) ? globalThis.Number(object.allConversions) : undefined,
      allConversionsByConversionDate: isSet(object.allConversionsByConversionDate)
        ? globalThis.Number(object.allConversionsByConversionDate)
        : 0,
      allConversionsValuePerCost: isSet(object.allConversionsValuePerCost)
        ? globalThis.Number(object.allConversionsValuePerCost)
        : undefined,
      allConversionsFromClickToCall: isSet(object.allConversionsFromClickToCall)
        ? globalThis.Number(object.allConversionsFromClickToCall)
        : undefined,
      allConversionsFromDirections: isSet(object.allConversionsFromDirections)
        ? globalThis.Number(object.allConversionsFromDirections)
        : undefined,
      allConversionsFromInteractionsValuePerInteraction: isSet(object.allConversionsFromInteractionsValuePerInteraction)
        ? globalThis.Number(object.allConversionsFromInteractionsValuePerInteraction)
        : undefined,
      allConversionsFromMenu: isSet(object.allConversionsFromMenu)
        ? globalThis.Number(object.allConversionsFromMenu)
        : undefined,
      allConversionsFromOrder: isSet(object.allConversionsFromOrder)
        ? globalThis.Number(object.allConversionsFromOrder)
        : undefined,
      allConversionsFromOtherEngagement: isSet(object.allConversionsFromOtherEngagement)
        ? globalThis.Number(object.allConversionsFromOtherEngagement)
        : undefined,
      allConversionsFromStoreVisit: isSet(object.allConversionsFromStoreVisit)
        ? globalThis.Number(object.allConversionsFromStoreVisit)
        : undefined,
      visits: isSet(object.visits) ? globalThis.Number(object.visits) : undefined,
      allConversionsFromStoreWebsite: isSet(object.allConversionsFromStoreWebsite)
        ? globalThis.Number(object.allConversionsFromStoreWebsite)
        : undefined,
      averageCost: isSet(object.averageCost) ? globalThis.Number(object.averageCost) : undefined,
      averageCpc: isSet(object.averageCpc) ? globalThis.Number(object.averageCpc) : undefined,
      averageCpm: isSet(object.averageCpm) ? globalThis.Number(object.averageCpm) : undefined,
      clicks: isSet(object.clicks) ? Long.fromValue(object.clicks) : undefined,
      contentBudgetLostImpressionShare: isSet(object.contentBudgetLostImpressionShare)
        ? globalThis.Number(object.contentBudgetLostImpressionShare)
        : undefined,
      contentImpressionShare: isSet(object.contentImpressionShare)
        ? globalThis.Number(object.contentImpressionShare)
        : undefined,
      conversionCustomMetrics: globalThis.Array.isArray(object?.conversionCustomMetrics)
        ? object.conversionCustomMetrics.map((e: any) => Value.fromJSON(e))
        : [],
      contentRankLostImpressionShare: isSet(object.contentRankLostImpressionShare)
        ? globalThis.Number(object.contentRankLostImpressionShare)
        : undefined,
      conversionsFromInteractionsRate: isSet(object.conversionsFromInteractionsRate)
        ? globalThis.Number(object.conversionsFromInteractionsRate)
        : undefined,
      clientAccountConversionsValue: isSet(object.clientAccountConversionsValue)
        ? globalThis.Number(object.clientAccountConversionsValue)
        : undefined,
      conversionsValueByConversionDate: isSet(object.conversionsValueByConversionDate)
        ? globalThis.Number(object.conversionsValueByConversionDate)
        : 0,
      conversionsValuePerCost: isSet(object.conversionsValuePerCost)
        ? globalThis.Number(object.conversionsValuePerCost)
        : undefined,
      conversionsFromInteractionsValuePerInteraction: isSet(object.conversionsFromInteractionsValuePerInteraction)
        ? globalThis.Number(object.conversionsFromInteractionsValuePerInteraction)
        : undefined,
      clientAccountConversions: isSet(object.clientAccountConversions)
        ? globalThis.Number(object.clientAccountConversions)
        : undefined,
      conversionsByConversionDate: isSet(object.conversionsByConversionDate)
        ? globalThis.Number(object.conversionsByConversionDate)
        : 0,
      costMicros: isSet(object.costMicros) ? Long.fromValue(object.costMicros) : undefined,
      costPerAllConversions: isSet(object.costPerAllConversions)
        ? globalThis.Number(object.costPerAllConversions)
        : undefined,
      costPerConversion: isSet(object.costPerConversion) ? globalThis.Number(object.costPerConversion) : undefined,
      costPerCurrentModelAttributedConversion: isSet(object.costPerCurrentModelAttributedConversion)
        ? globalThis.Number(object.costPerCurrentModelAttributedConversion)
        : undefined,
      crossDeviceConversions: isSet(object.crossDeviceConversions)
        ? globalThis.Number(object.crossDeviceConversions)
        : undefined,
      crossDeviceConversionsValue: isSet(object.crossDeviceConversionsValue)
        ? globalThis.Number(object.crossDeviceConversionsValue)
        : undefined,
      ctr: isSet(object.ctr) ? globalThis.Number(object.ctr) : undefined,
      conversions: isSet(object.conversions) ? globalThis.Number(object.conversions) : undefined,
      conversionsValue: isSet(object.conversionsValue) ? globalThis.Number(object.conversionsValue) : undefined,
      historicalCreativeQualityScore: isSet(object.historicalCreativeQualityScore)
        ? qualityScoreBucketEnum_QualityScoreBucketFromJSON(object.historicalCreativeQualityScore)
        : 0,
      averageQualityScore: isSet(object.averageQualityScore)
        ? globalThis.Number(object.averageQualityScore)
        : undefined,
      historicalLandingPageQualityScore: isSet(object.historicalLandingPageQualityScore)
        ? qualityScoreBucketEnum_QualityScoreBucketFromJSON(object.historicalLandingPageQualityScore)
        : 0,
      historicalQualityScore: isSet(object.historicalQualityScore)
        ? Long.fromValue(object.historicalQualityScore)
        : undefined,
      historicalSearchPredictedCtr: isSet(object.historicalSearchPredictedCtr)
        ? qualityScoreBucketEnum_QualityScoreBucketFromJSON(object.historicalSearchPredictedCtr)
        : 0,
      impressions: isSet(object.impressions) ? Long.fromValue(object.impressions) : undefined,
      interactionRate: isSet(object.interactionRate) ? globalThis.Number(object.interactionRate) : undefined,
      interactions: isSet(object.interactions) ? Long.fromValue(object.interactions) : undefined,
      interactionEventTypes: globalThis.Array.isArray(object?.interactionEventTypes)
        ? object.interactionEventTypes.map((e: any) => interactionEventTypeEnum_InteractionEventTypeFromJSON(e))
        : [],
      invalidClickRate: isSet(object.invalidClickRate) ? globalThis.Number(object.invalidClickRate) : undefined,
      invalidClicks: isSet(object.invalidClicks) ? Long.fromValue(object.invalidClicks) : undefined,
      mobileFriendlyClicksPercentage: isSet(object.mobileFriendlyClicksPercentage)
        ? globalThis.Number(object.mobileFriendlyClicksPercentage)
        : undefined,
      rawEventConversionMetrics: globalThis.Array.isArray(object?.rawEventConversionMetrics)
        ? object.rawEventConversionMetrics.map((e: any) => Value.fromJSON(e))
        : [],
      searchAbsoluteTopImpressionShare: isSet(object.searchAbsoluteTopImpressionShare)
        ? globalThis.Number(object.searchAbsoluteTopImpressionShare)
        : undefined,
      searchBudgetLostAbsoluteTopImpressionShare: isSet(object.searchBudgetLostAbsoluteTopImpressionShare)
        ? globalThis.Number(object.searchBudgetLostAbsoluteTopImpressionShare)
        : undefined,
      searchBudgetLostImpressionShare: isSet(object.searchBudgetLostImpressionShare)
        ? globalThis.Number(object.searchBudgetLostImpressionShare)
        : undefined,
      searchBudgetLostTopImpressionShare: isSet(object.searchBudgetLostTopImpressionShare)
        ? globalThis.Number(object.searchBudgetLostTopImpressionShare)
        : undefined,
      searchClickShare: isSet(object.searchClickShare) ? globalThis.Number(object.searchClickShare) : undefined,
      searchExactMatchImpressionShare: isSet(object.searchExactMatchImpressionShare)
        ? globalThis.Number(object.searchExactMatchImpressionShare)
        : undefined,
      searchImpressionShare: isSet(object.searchImpressionShare)
        ? globalThis.Number(object.searchImpressionShare)
        : undefined,
      searchRankLostAbsoluteTopImpressionShare: isSet(object.searchRankLostAbsoluteTopImpressionShare)
        ? globalThis.Number(object.searchRankLostAbsoluteTopImpressionShare)
        : undefined,
      searchRankLostImpressionShare: isSet(object.searchRankLostImpressionShare)
        ? globalThis.Number(object.searchRankLostImpressionShare)
        : undefined,
      searchRankLostTopImpressionShare: isSet(object.searchRankLostTopImpressionShare)
        ? globalThis.Number(object.searchRankLostTopImpressionShare)
        : undefined,
      searchTopImpressionShare: isSet(object.searchTopImpressionShare)
        ? globalThis.Number(object.searchTopImpressionShare)
        : undefined,
      topImpressionPercentage: isSet(object.topImpressionPercentage)
        ? globalThis.Number(object.topImpressionPercentage)
        : undefined,
      valuePerAllConversions: isSet(object.valuePerAllConversions)
        ? globalThis.Number(object.valuePerAllConversions)
        : undefined,
      valuePerAllConversionsByConversionDate: isSet(object.valuePerAllConversionsByConversionDate)
        ? globalThis.Number(object.valuePerAllConversionsByConversionDate)
        : undefined,
      valuePerConversion: isSet(object.valuePerConversion) ? globalThis.Number(object.valuePerConversion) : undefined,
      valuePerConversionsByConversionDate: isSet(object.valuePerConversionsByConversionDate)
        ? globalThis.Number(object.valuePerConversionsByConversionDate)
        : undefined,
      clientAccountViewThroughConversions: isSet(object.clientAccountViewThroughConversions)
        ? Long.fromValue(object.clientAccountViewThroughConversions)
        : undefined,
      clientAccountCrossSellCostOfGoodsSoldMicros: isSet(object.clientAccountCrossSellCostOfGoodsSoldMicros)
        ? Long.fromValue(object.clientAccountCrossSellCostOfGoodsSoldMicros)
        : undefined,
      crossSellCostOfGoodsSoldMicros: isSet(object.crossSellCostOfGoodsSoldMicros)
        ? Long.fromValue(object.crossSellCostOfGoodsSoldMicros)
        : undefined,
      clientAccountCrossSellGrossProfitMicros: isSet(object.clientAccountCrossSellGrossProfitMicros)
        ? Long.fromValue(object.clientAccountCrossSellGrossProfitMicros)
        : undefined,
      crossSellGrossProfitMicros: isSet(object.crossSellGrossProfitMicros)
        ? Long.fromValue(object.crossSellGrossProfitMicros)
        : undefined,
      clientAccountCrossSellRevenueMicros: isSet(object.clientAccountCrossSellRevenueMicros)
        ? Long.fromValue(object.clientAccountCrossSellRevenueMicros)
        : undefined,
      crossSellRevenueMicros: isSet(object.crossSellRevenueMicros)
        ? Long.fromValue(object.crossSellRevenueMicros)
        : undefined,
      clientAccountCrossSellUnitsSold: isSet(object.clientAccountCrossSellUnitsSold)
        ? globalThis.Number(object.clientAccountCrossSellUnitsSold)
        : undefined,
      crossSellUnitsSold: isSet(object.crossSellUnitsSold) ? globalThis.Number(object.crossSellUnitsSold) : undefined,
      clientAccountLeadCostOfGoodsSoldMicros: isSet(object.clientAccountLeadCostOfGoodsSoldMicros)
        ? Long.fromValue(object.clientAccountLeadCostOfGoodsSoldMicros)
        : undefined,
      leadCostOfGoodsSoldMicros: isSet(object.leadCostOfGoodsSoldMicros)
        ? Long.fromValue(object.leadCostOfGoodsSoldMicros)
        : undefined,
      clientAccountLeadGrossProfitMicros: isSet(object.clientAccountLeadGrossProfitMicros)
        ? Long.fromValue(object.clientAccountLeadGrossProfitMicros)
        : undefined,
      leadGrossProfitMicros: isSet(object.leadGrossProfitMicros)
        ? Long.fromValue(object.leadGrossProfitMicros)
        : undefined,
      clientAccountLeadRevenueMicros: isSet(object.clientAccountLeadRevenueMicros)
        ? Long.fromValue(object.clientAccountLeadRevenueMicros)
        : undefined,
      leadRevenueMicros: isSet(object.leadRevenueMicros) ? Long.fromValue(object.leadRevenueMicros) : undefined,
      clientAccountLeadUnitsSold: isSet(object.clientAccountLeadUnitsSold)
        ? globalThis.Number(object.clientAccountLeadUnitsSold)
        : undefined,
      leadUnitsSold: isSet(object.leadUnitsSold) ? globalThis.Number(object.leadUnitsSold) : undefined,
    };
  },

  toJSON(message: Metrics): unknown {
    const obj: any = {};
    if (message.absoluteTopImpressionPercentage !== undefined) {
      obj.absoluteTopImpressionPercentage = message.absoluteTopImpressionPercentage;
    }
    if (message.allConversionsFromInteractionsRate !== undefined) {
      obj.allConversionsFromInteractionsRate = message.allConversionsFromInteractionsRate;
    }
    if (message.allConversionsValue !== undefined) {
      obj.allConversionsValue = message.allConversionsValue;
    }
    if (message.allConversionsValueByConversionDate !== 0) {
      obj.allConversionsValueByConversionDate = message.allConversionsValueByConversionDate;
    }
    if (message.allConversions !== undefined) {
      obj.allConversions = message.allConversions;
    }
    if (message.allConversionsByConversionDate !== 0) {
      obj.allConversionsByConversionDate = message.allConversionsByConversionDate;
    }
    if (message.allConversionsValuePerCost !== undefined) {
      obj.allConversionsValuePerCost = message.allConversionsValuePerCost;
    }
    if (message.allConversionsFromClickToCall !== undefined) {
      obj.allConversionsFromClickToCall = message.allConversionsFromClickToCall;
    }
    if (message.allConversionsFromDirections !== undefined) {
      obj.allConversionsFromDirections = message.allConversionsFromDirections;
    }
    if (message.allConversionsFromInteractionsValuePerInteraction !== undefined) {
      obj.allConversionsFromInteractionsValuePerInteraction = message.allConversionsFromInteractionsValuePerInteraction;
    }
    if (message.allConversionsFromMenu !== undefined) {
      obj.allConversionsFromMenu = message.allConversionsFromMenu;
    }
    if (message.allConversionsFromOrder !== undefined) {
      obj.allConversionsFromOrder = message.allConversionsFromOrder;
    }
    if (message.allConversionsFromOtherEngagement !== undefined) {
      obj.allConversionsFromOtherEngagement = message.allConversionsFromOtherEngagement;
    }
    if (message.allConversionsFromStoreVisit !== undefined) {
      obj.allConversionsFromStoreVisit = message.allConversionsFromStoreVisit;
    }
    if (message.visits !== undefined) {
      obj.visits = message.visits;
    }
    if (message.allConversionsFromStoreWebsite !== undefined) {
      obj.allConversionsFromStoreWebsite = message.allConversionsFromStoreWebsite;
    }
    if (message.averageCost !== undefined) {
      obj.averageCost = message.averageCost;
    }
    if (message.averageCpc !== undefined) {
      obj.averageCpc = message.averageCpc;
    }
    if (message.averageCpm !== undefined) {
      obj.averageCpm = message.averageCpm;
    }
    if (message.clicks !== undefined) {
      obj.clicks = (message.clicks || Long.ZERO).toString();
    }
    if (message.contentBudgetLostImpressionShare !== undefined) {
      obj.contentBudgetLostImpressionShare = message.contentBudgetLostImpressionShare;
    }
    if (message.contentImpressionShare !== undefined) {
      obj.contentImpressionShare = message.contentImpressionShare;
    }
    if (message.conversionCustomMetrics?.length) {
      obj.conversionCustomMetrics = message.conversionCustomMetrics.map((e) => Value.toJSON(e));
    }
    if (message.contentRankLostImpressionShare !== undefined) {
      obj.contentRankLostImpressionShare = message.contentRankLostImpressionShare;
    }
    if (message.conversionsFromInteractionsRate !== undefined) {
      obj.conversionsFromInteractionsRate = message.conversionsFromInteractionsRate;
    }
    if (message.clientAccountConversionsValue !== undefined) {
      obj.clientAccountConversionsValue = message.clientAccountConversionsValue;
    }
    if (message.conversionsValueByConversionDate !== 0) {
      obj.conversionsValueByConversionDate = message.conversionsValueByConversionDate;
    }
    if (message.conversionsValuePerCost !== undefined) {
      obj.conversionsValuePerCost = message.conversionsValuePerCost;
    }
    if (message.conversionsFromInteractionsValuePerInteraction !== undefined) {
      obj.conversionsFromInteractionsValuePerInteraction = message.conversionsFromInteractionsValuePerInteraction;
    }
    if (message.clientAccountConversions !== undefined) {
      obj.clientAccountConversions = message.clientAccountConversions;
    }
    if (message.conversionsByConversionDate !== 0) {
      obj.conversionsByConversionDate = message.conversionsByConversionDate;
    }
    if (message.costMicros !== undefined) {
      obj.costMicros = (message.costMicros || Long.ZERO).toString();
    }
    if (message.costPerAllConversions !== undefined) {
      obj.costPerAllConversions = message.costPerAllConversions;
    }
    if (message.costPerConversion !== undefined) {
      obj.costPerConversion = message.costPerConversion;
    }
    if (message.costPerCurrentModelAttributedConversion !== undefined) {
      obj.costPerCurrentModelAttributedConversion = message.costPerCurrentModelAttributedConversion;
    }
    if (message.crossDeviceConversions !== undefined) {
      obj.crossDeviceConversions = message.crossDeviceConversions;
    }
    if (message.crossDeviceConversionsValue !== undefined) {
      obj.crossDeviceConversionsValue = message.crossDeviceConversionsValue;
    }
    if (message.ctr !== undefined) {
      obj.ctr = message.ctr;
    }
    if (message.conversions !== undefined) {
      obj.conversions = message.conversions;
    }
    if (message.conversionsValue !== undefined) {
      obj.conversionsValue = message.conversionsValue;
    }
    if (message.historicalCreativeQualityScore !== 0) {
      obj.historicalCreativeQualityScore = qualityScoreBucketEnum_QualityScoreBucketToJSON(
        message.historicalCreativeQualityScore,
      );
    }
    if (message.averageQualityScore !== undefined) {
      obj.averageQualityScore = message.averageQualityScore;
    }
    if (message.historicalLandingPageQualityScore !== 0) {
      obj.historicalLandingPageQualityScore = qualityScoreBucketEnum_QualityScoreBucketToJSON(
        message.historicalLandingPageQualityScore,
      );
    }
    if (message.historicalQualityScore !== undefined) {
      obj.historicalQualityScore = (message.historicalQualityScore || Long.ZERO).toString();
    }
    if (message.historicalSearchPredictedCtr !== 0) {
      obj.historicalSearchPredictedCtr = qualityScoreBucketEnum_QualityScoreBucketToJSON(
        message.historicalSearchPredictedCtr,
      );
    }
    if (message.impressions !== undefined) {
      obj.impressions = (message.impressions || Long.ZERO).toString();
    }
    if (message.interactionRate !== undefined) {
      obj.interactionRate = message.interactionRate;
    }
    if (message.interactions !== undefined) {
      obj.interactions = (message.interactions || Long.ZERO).toString();
    }
    if (message.interactionEventTypes?.length) {
      obj.interactionEventTypes = message.interactionEventTypes.map((e) =>
        interactionEventTypeEnum_InteractionEventTypeToJSON(e)
      );
    }
    if (message.invalidClickRate !== undefined) {
      obj.invalidClickRate = message.invalidClickRate;
    }
    if (message.invalidClicks !== undefined) {
      obj.invalidClicks = (message.invalidClicks || Long.ZERO).toString();
    }
    if (message.mobileFriendlyClicksPercentage !== undefined) {
      obj.mobileFriendlyClicksPercentage = message.mobileFriendlyClicksPercentage;
    }
    if (message.rawEventConversionMetrics?.length) {
      obj.rawEventConversionMetrics = message.rawEventConversionMetrics.map((e) => Value.toJSON(e));
    }
    if (message.searchAbsoluteTopImpressionShare !== undefined) {
      obj.searchAbsoluteTopImpressionShare = message.searchAbsoluteTopImpressionShare;
    }
    if (message.searchBudgetLostAbsoluteTopImpressionShare !== undefined) {
      obj.searchBudgetLostAbsoluteTopImpressionShare = message.searchBudgetLostAbsoluteTopImpressionShare;
    }
    if (message.searchBudgetLostImpressionShare !== undefined) {
      obj.searchBudgetLostImpressionShare = message.searchBudgetLostImpressionShare;
    }
    if (message.searchBudgetLostTopImpressionShare !== undefined) {
      obj.searchBudgetLostTopImpressionShare = message.searchBudgetLostTopImpressionShare;
    }
    if (message.searchClickShare !== undefined) {
      obj.searchClickShare = message.searchClickShare;
    }
    if (message.searchExactMatchImpressionShare !== undefined) {
      obj.searchExactMatchImpressionShare = message.searchExactMatchImpressionShare;
    }
    if (message.searchImpressionShare !== undefined) {
      obj.searchImpressionShare = message.searchImpressionShare;
    }
    if (message.searchRankLostAbsoluteTopImpressionShare !== undefined) {
      obj.searchRankLostAbsoluteTopImpressionShare = message.searchRankLostAbsoluteTopImpressionShare;
    }
    if (message.searchRankLostImpressionShare !== undefined) {
      obj.searchRankLostImpressionShare = message.searchRankLostImpressionShare;
    }
    if (message.searchRankLostTopImpressionShare !== undefined) {
      obj.searchRankLostTopImpressionShare = message.searchRankLostTopImpressionShare;
    }
    if (message.searchTopImpressionShare !== undefined) {
      obj.searchTopImpressionShare = message.searchTopImpressionShare;
    }
    if (message.topImpressionPercentage !== undefined) {
      obj.topImpressionPercentage = message.topImpressionPercentage;
    }
    if (message.valuePerAllConversions !== undefined) {
      obj.valuePerAllConversions = message.valuePerAllConversions;
    }
    if (message.valuePerAllConversionsByConversionDate !== undefined) {
      obj.valuePerAllConversionsByConversionDate = message.valuePerAllConversionsByConversionDate;
    }
    if (message.valuePerConversion !== undefined) {
      obj.valuePerConversion = message.valuePerConversion;
    }
    if (message.valuePerConversionsByConversionDate !== undefined) {
      obj.valuePerConversionsByConversionDate = message.valuePerConversionsByConversionDate;
    }
    if (message.clientAccountViewThroughConversions !== undefined) {
      obj.clientAccountViewThroughConversions = (message.clientAccountViewThroughConversions || Long.ZERO).toString();
    }
    if (message.clientAccountCrossSellCostOfGoodsSoldMicros !== undefined) {
      obj.clientAccountCrossSellCostOfGoodsSoldMicros =
        (message.clientAccountCrossSellCostOfGoodsSoldMicros || Long.ZERO).toString();
    }
    if (message.crossSellCostOfGoodsSoldMicros !== undefined) {
      obj.crossSellCostOfGoodsSoldMicros = (message.crossSellCostOfGoodsSoldMicros || Long.ZERO).toString();
    }
    if (message.clientAccountCrossSellGrossProfitMicros !== undefined) {
      obj.clientAccountCrossSellGrossProfitMicros = (message.clientAccountCrossSellGrossProfitMicros || Long.ZERO)
        .toString();
    }
    if (message.crossSellGrossProfitMicros !== undefined) {
      obj.crossSellGrossProfitMicros = (message.crossSellGrossProfitMicros || Long.ZERO).toString();
    }
    if (message.clientAccountCrossSellRevenueMicros !== undefined) {
      obj.clientAccountCrossSellRevenueMicros = (message.clientAccountCrossSellRevenueMicros || Long.ZERO).toString();
    }
    if (message.crossSellRevenueMicros !== undefined) {
      obj.crossSellRevenueMicros = (message.crossSellRevenueMicros || Long.ZERO).toString();
    }
    if (message.clientAccountCrossSellUnitsSold !== undefined) {
      obj.clientAccountCrossSellUnitsSold = message.clientAccountCrossSellUnitsSold;
    }
    if (message.crossSellUnitsSold !== undefined) {
      obj.crossSellUnitsSold = message.crossSellUnitsSold;
    }
    if (message.clientAccountLeadCostOfGoodsSoldMicros !== undefined) {
      obj.clientAccountLeadCostOfGoodsSoldMicros = (message.clientAccountLeadCostOfGoodsSoldMicros || Long.ZERO)
        .toString();
    }
    if (message.leadCostOfGoodsSoldMicros !== undefined) {
      obj.leadCostOfGoodsSoldMicros = (message.leadCostOfGoodsSoldMicros || Long.ZERO).toString();
    }
    if (message.clientAccountLeadGrossProfitMicros !== undefined) {
      obj.clientAccountLeadGrossProfitMicros = (message.clientAccountLeadGrossProfitMicros || Long.ZERO).toString();
    }
    if (message.leadGrossProfitMicros !== undefined) {
      obj.leadGrossProfitMicros = (message.leadGrossProfitMicros || Long.ZERO).toString();
    }
    if (message.clientAccountLeadRevenueMicros !== undefined) {
      obj.clientAccountLeadRevenueMicros = (message.clientAccountLeadRevenueMicros || Long.ZERO).toString();
    }
    if (message.leadRevenueMicros !== undefined) {
      obj.leadRevenueMicros = (message.leadRevenueMicros || Long.ZERO).toString();
    }
    if (message.clientAccountLeadUnitsSold !== undefined) {
      obj.clientAccountLeadUnitsSold = message.clientAccountLeadUnitsSold;
    }
    if (message.leadUnitsSold !== undefined) {
      obj.leadUnitsSold = message.leadUnitsSold;
    }
    return obj;
  },

  create(base?: DeepPartial<Metrics>): Metrics {
    return Metrics.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Metrics>): Metrics {
    const message = createBaseMetrics();
    message.absoluteTopImpressionPercentage = object.absoluteTopImpressionPercentage ?? undefined;
    message.allConversionsFromInteractionsRate = object.allConversionsFromInteractionsRate ?? undefined;
    message.allConversionsValue = object.allConversionsValue ?? undefined;
    message.allConversionsValueByConversionDate = object.allConversionsValueByConversionDate ?? 0;
    message.allConversions = object.allConversions ?? undefined;
    message.allConversionsByConversionDate = object.allConversionsByConversionDate ?? 0;
    message.allConversionsValuePerCost = object.allConversionsValuePerCost ?? undefined;
    message.allConversionsFromClickToCall = object.allConversionsFromClickToCall ?? undefined;
    message.allConversionsFromDirections = object.allConversionsFromDirections ?? undefined;
    message.allConversionsFromInteractionsValuePerInteraction =
      object.allConversionsFromInteractionsValuePerInteraction ?? undefined;
    message.allConversionsFromMenu = object.allConversionsFromMenu ?? undefined;
    message.allConversionsFromOrder = object.allConversionsFromOrder ?? undefined;
    message.allConversionsFromOtherEngagement = object.allConversionsFromOtherEngagement ?? undefined;
    message.allConversionsFromStoreVisit = object.allConversionsFromStoreVisit ?? undefined;
    message.visits = object.visits ?? undefined;
    message.allConversionsFromStoreWebsite = object.allConversionsFromStoreWebsite ?? undefined;
    message.averageCost = object.averageCost ?? undefined;
    message.averageCpc = object.averageCpc ?? undefined;
    message.averageCpm = object.averageCpm ?? undefined;
    message.clicks = (object.clicks !== undefined && object.clicks !== null)
      ? Long.fromValue(object.clicks)
      : undefined;
    message.contentBudgetLostImpressionShare = object.contentBudgetLostImpressionShare ?? undefined;
    message.contentImpressionShare = object.contentImpressionShare ?? undefined;
    message.conversionCustomMetrics = object.conversionCustomMetrics?.map((e) => Value.fromPartial(e)) || [];
    message.contentRankLostImpressionShare = object.contentRankLostImpressionShare ?? undefined;
    message.conversionsFromInteractionsRate = object.conversionsFromInteractionsRate ?? undefined;
    message.clientAccountConversionsValue = object.clientAccountConversionsValue ?? undefined;
    message.conversionsValueByConversionDate = object.conversionsValueByConversionDate ?? 0;
    message.conversionsValuePerCost = object.conversionsValuePerCost ?? undefined;
    message.conversionsFromInteractionsValuePerInteraction = object.conversionsFromInteractionsValuePerInteraction ??
      undefined;
    message.clientAccountConversions = object.clientAccountConversions ?? undefined;
    message.conversionsByConversionDate = object.conversionsByConversionDate ?? 0;
    message.costMicros = (object.costMicros !== undefined && object.costMicros !== null)
      ? Long.fromValue(object.costMicros)
      : undefined;
    message.costPerAllConversions = object.costPerAllConversions ?? undefined;
    message.costPerConversion = object.costPerConversion ?? undefined;
    message.costPerCurrentModelAttributedConversion = object.costPerCurrentModelAttributedConversion ?? undefined;
    message.crossDeviceConversions = object.crossDeviceConversions ?? undefined;
    message.crossDeviceConversionsValue = object.crossDeviceConversionsValue ?? undefined;
    message.ctr = object.ctr ?? undefined;
    message.conversions = object.conversions ?? undefined;
    message.conversionsValue = object.conversionsValue ?? undefined;
    message.historicalCreativeQualityScore = object.historicalCreativeQualityScore ?? 0;
    message.averageQualityScore = object.averageQualityScore ?? undefined;
    message.historicalLandingPageQualityScore = object.historicalLandingPageQualityScore ?? 0;
    message.historicalQualityScore =
      (object.historicalQualityScore !== undefined && object.historicalQualityScore !== null)
        ? Long.fromValue(object.historicalQualityScore)
        : undefined;
    message.historicalSearchPredictedCtr = object.historicalSearchPredictedCtr ?? 0;
    message.impressions = (object.impressions !== undefined && object.impressions !== null)
      ? Long.fromValue(object.impressions)
      : undefined;
    message.interactionRate = object.interactionRate ?? undefined;
    message.interactions = (object.interactions !== undefined && object.interactions !== null)
      ? Long.fromValue(object.interactions)
      : undefined;
    message.interactionEventTypes = object.interactionEventTypes?.map((e) => e) || [];
    message.invalidClickRate = object.invalidClickRate ?? undefined;
    message.invalidClicks = (object.invalidClicks !== undefined && object.invalidClicks !== null)
      ? Long.fromValue(object.invalidClicks)
      : undefined;
    message.mobileFriendlyClicksPercentage = object.mobileFriendlyClicksPercentage ?? undefined;
    message.rawEventConversionMetrics = object.rawEventConversionMetrics?.map((e) => Value.fromPartial(e)) || [];
    message.searchAbsoluteTopImpressionShare = object.searchAbsoluteTopImpressionShare ?? undefined;
    message.searchBudgetLostAbsoluteTopImpressionShare = object.searchBudgetLostAbsoluteTopImpressionShare ?? undefined;
    message.searchBudgetLostImpressionShare = object.searchBudgetLostImpressionShare ?? undefined;
    message.searchBudgetLostTopImpressionShare = object.searchBudgetLostTopImpressionShare ?? undefined;
    message.searchClickShare = object.searchClickShare ?? undefined;
    message.searchExactMatchImpressionShare = object.searchExactMatchImpressionShare ?? undefined;
    message.searchImpressionShare = object.searchImpressionShare ?? undefined;
    message.searchRankLostAbsoluteTopImpressionShare = object.searchRankLostAbsoluteTopImpressionShare ?? undefined;
    message.searchRankLostImpressionShare = object.searchRankLostImpressionShare ?? undefined;
    message.searchRankLostTopImpressionShare = object.searchRankLostTopImpressionShare ?? undefined;
    message.searchTopImpressionShare = object.searchTopImpressionShare ?? undefined;
    message.topImpressionPercentage = object.topImpressionPercentage ?? undefined;
    message.valuePerAllConversions = object.valuePerAllConversions ?? undefined;
    message.valuePerAllConversionsByConversionDate = object.valuePerAllConversionsByConversionDate ?? undefined;
    message.valuePerConversion = object.valuePerConversion ?? undefined;
    message.valuePerConversionsByConversionDate = object.valuePerConversionsByConversionDate ?? undefined;
    message.clientAccountViewThroughConversions =
      (object.clientAccountViewThroughConversions !== undefined && object.clientAccountViewThroughConversions !== null)
        ? Long.fromValue(object.clientAccountViewThroughConversions)
        : undefined;
    message.clientAccountCrossSellCostOfGoodsSoldMicros =
      (object.clientAccountCrossSellCostOfGoodsSoldMicros !== undefined &&
          object.clientAccountCrossSellCostOfGoodsSoldMicros !== null)
        ? Long.fromValue(object.clientAccountCrossSellCostOfGoodsSoldMicros)
        : undefined;
    message.crossSellCostOfGoodsSoldMicros =
      (object.crossSellCostOfGoodsSoldMicros !== undefined && object.crossSellCostOfGoodsSoldMicros !== null)
        ? Long.fromValue(object.crossSellCostOfGoodsSoldMicros)
        : undefined;
    message.clientAccountCrossSellGrossProfitMicros =
      (object.clientAccountCrossSellGrossProfitMicros !== undefined &&
          object.clientAccountCrossSellGrossProfitMicros !== null)
        ? Long.fromValue(object.clientAccountCrossSellGrossProfitMicros)
        : undefined;
    message.crossSellGrossProfitMicros =
      (object.crossSellGrossProfitMicros !== undefined && object.crossSellGrossProfitMicros !== null)
        ? Long.fromValue(object.crossSellGrossProfitMicros)
        : undefined;
    message.clientAccountCrossSellRevenueMicros =
      (object.clientAccountCrossSellRevenueMicros !== undefined && object.clientAccountCrossSellRevenueMicros !== null)
        ? Long.fromValue(object.clientAccountCrossSellRevenueMicros)
        : undefined;
    message.crossSellRevenueMicros =
      (object.crossSellRevenueMicros !== undefined && object.crossSellRevenueMicros !== null)
        ? Long.fromValue(object.crossSellRevenueMicros)
        : undefined;
    message.clientAccountCrossSellUnitsSold = object.clientAccountCrossSellUnitsSold ?? undefined;
    message.crossSellUnitsSold = object.crossSellUnitsSold ?? undefined;
    message.clientAccountLeadCostOfGoodsSoldMicros =
      (object.clientAccountLeadCostOfGoodsSoldMicros !== undefined &&
          object.clientAccountLeadCostOfGoodsSoldMicros !== null)
        ? Long.fromValue(object.clientAccountLeadCostOfGoodsSoldMicros)
        : undefined;
    message.leadCostOfGoodsSoldMicros =
      (object.leadCostOfGoodsSoldMicros !== undefined && object.leadCostOfGoodsSoldMicros !== null)
        ? Long.fromValue(object.leadCostOfGoodsSoldMicros)
        : undefined;
    message.clientAccountLeadGrossProfitMicros =
      (object.clientAccountLeadGrossProfitMicros !== undefined && object.clientAccountLeadGrossProfitMicros !== null)
        ? Long.fromValue(object.clientAccountLeadGrossProfitMicros)
        : undefined;
    message.leadGrossProfitMicros =
      (object.leadGrossProfitMicros !== undefined && object.leadGrossProfitMicros !== null)
        ? Long.fromValue(object.leadGrossProfitMicros)
        : undefined;
    message.clientAccountLeadRevenueMicros =
      (object.clientAccountLeadRevenueMicros !== undefined && object.clientAccountLeadRevenueMicros !== null)
        ? Long.fromValue(object.clientAccountLeadRevenueMicros)
        : undefined;
    message.leadRevenueMicros = (object.leadRevenueMicros !== undefined && object.leadRevenueMicros !== null)
      ? Long.fromValue(object.leadRevenueMicros)
      : undefined;
    message.clientAccountLeadUnitsSold = object.clientAccountLeadUnitsSold ?? undefined;
    message.leadUnitsSold = object.leadUnitsSold ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
