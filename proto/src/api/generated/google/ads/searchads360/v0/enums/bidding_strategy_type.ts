// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/searchads360/v0/enums/bidding_strategy_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.searchads360.v0.enums";

/** Container for enum describing possible bidding strategy types. */
export interface BiddingStrategyTypeEnum {
}

/** Enum describing possible bidding strategy types. */
export enum BiddingStrategyTypeEnum_BiddingStrategyType {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /**
   * COMMISSION - Commission is an automatic bidding strategy in which the advertiser pays
   * a certain portion of the conversion value.
   */
  COMMISSION = 16,
  /**
   * ENHANCED_CPC - Enhanced CPC is a bidding strategy that raises bids for clicks
   * that seem more likely to lead to a conversion and lowers
   * them for clicks where they seem less likely.
   */
  ENHANCED_CPC = 2,
  /**
   * INVALID - Used for return value only. Indicates that a campaign does not have a
   * bidding strategy. This prevents the campaign from serving. For example,
   * a campaign may be attached to a manager bidding strategy and the serving
   * account is subsequently unlinked from the manager account. In this case
   * the campaign will automatically be detached from the now inaccessible
   * manager bidding strategy and transition to the INVALID bidding strategy
   * type.
   */
  INVALID = 17,
  /**
   * MANUAL_CPA - Manual bidding strategy that allows advertiser to set the bid per
   * advertiser-specified action.
   */
  MANUAL_CPA = 18,
  /** MANUAL_CPC - Manual click based bidding where user pays per click. */
  MANUAL_CPC = 3,
  /**
   * MANUAL_CPM - Manual impression based bidding
   * where user pays per thousand impressions.
   */
  MANUAL_CPM = 4,
  /** MANUAL_CPV - A bidding strategy that pays a configurable amount per video view. */
  MANUAL_CPV = 13,
  /**
   * MAXIMIZE_CONVERSIONS - A bidding strategy that automatically maximizes number of conversions
   * given a daily budget.
   */
  MAXIMIZE_CONVERSIONS = 10,
  /**
   * MAXIMIZE_CONVERSION_VALUE - An automated bidding strategy that automatically sets bids to maximize
   * revenue while spending your budget.
   */
  MAXIMIZE_CONVERSION_VALUE = 11,
  /**
   * PAGE_ONE_PROMOTED - Page-One Promoted bidding scheme, which sets max cpc bids to
   * target impressions on page one or page one promoted slots on google.com.
   * This enum value is deprecated.
   */
  PAGE_ONE_PROMOTED = 5,
  /**
   * PERCENT_CPC - Percent Cpc is bidding strategy where bids are a fraction of the
   * advertised price for some good or service.
   */
  PERCENT_CPC = 12,
  /**
   * TARGET_CPA - Target CPA is an automated bid strategy that sets bids
   * to help get as many conversions as possible
   * at the target cost-per-acquisition (CPA) you set.
   */
  TARGET_CPA = 6,
  /**
   * TARGET_CPM - Target CPM is an automated bid strategy that sets bids to help get
   * as many impressions as possible at the target cost per one thousand
   * impressions (CPM) you set.
   */
  TARGET_CPM = 14,
  /**
   * TARGET_IMPRESSION_SHARE - An automated bidding strategy that sets bids so that a certain percentage
   * of search ads are shown at the top of the first page (or other targeted
   * location).
   */
  TARGET_IMPRESSION_SHARE = 15,
  /**
   * TARGET_OUTRANK_SHARE - Target Outrank Share is an automated bidding strategy that sets bids
   * based on the target fraction of auctions where the advertiser
   * should outrank a specific competitor.
   * This enum value is deprecated.
   */
  TARGET_OUTRANK_SHARE = 7,
  /**
   * TARGET_ROAS - Target ROAS is an automated bidding strategy
   * that helps you maximize revenue while averaging
   * a specific target Return On Average Spend (ROAS).
   */
  TARGET_ROAS = 8,
  /**
   * TARGET_SPEND - Target Spend is an automated bid strategy that sets your bids
   * to help get as many clicks as possible within your budget.
   */
  TARGET_SPEND = 9,
  UNRECOGNIZED = -1,
}

export function biddingStrategyTypeEnum_BiddingStrategyTypeFromJSON(
  object: any,
): BiddingStrategyTypeEnum_BiddingStrategyType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return BiddingStrategyTypeEnum_BiddingStrategyType.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return BiddingStrategyTypeEnum_BiddingStrategyType.UNKNOWN;
    case 16:
    case "COMMISSION":
      return BiddingStrategyTypeEnum_BiddingStrategyType.COMMISSION;
    case 2:
    case "ENHANCED_CPC":
      return BiddingStrategyTypeEnum_BiddingStrategyType.ENHANCED_CPC;
    case 17:
    case "INVALID":
      return BiddingStrategyTypeEnum_BiddingStrategyType.INVALID;
    case 18:
    case "MANUAL_CPA":
      return BiddingStrategyTypeEnum_BiddingStrategyType.MANUAL_CPA;
    case 3:
    case "MANUAL_CPC":
      return BiddingStrategyTypeEnum_BiddingStrategyType.MANUAL_CPC;
    case 4:
    case "MANUAL_CPM":
      return BiddingStrategyTypeEnum_BiddingStrategyType.MANUAL_CPM;
    case 13:
    case "MANUAL_CPV":
      return BiddingStrategyTypeEnum_BiddingStrategyType.MANUAL_CPV;
    case 10:
    case "MAXIMIZE_CONVERSIONS":
      return BiddingStrategyTypeEnum_BiddingStrategyType.MAXIMIZE_CONVERSIONS;
    case 11:
    case "MAXIMIZE_CONVERSION_VALUE":
      return BiddingStrategyTypeEnum_BiddingStrategyType.MAXIMIZE_CONVERSION_VALUE;
    case 5:
    case "PAGE_ONE_PROMOTED":
      return BiddingStrategyTypeEnum_BiddingStrategyType.PAGE_ONE_PROMOTED;
    case 12:
    case "PERCENT_CPC":
      return BiddingStrategyTypeEnum_BiddingStrategyType.PERCENT_CPC;
    case 6:
    case "TARGET_CPA":
      return BiddingStrategyTypeEnum_BiddingStrategyType.TARGET_CPA;
    case 14:
    case "TARGET_CPM":
      return BiddingStrategyTypeEnum_BiddingStrategyType.TARGET_CPM;
    case 15:
    case "TARGET_IMPRESSION_SHARE":
      return BiddingStrategyTypeEnum_BiddingStrategyType.TARGET_IMPRESSION_SHARE;
    case 7:
    case "TARGET_OUTRANK_SHARE":
      return BiddingStrategyTypeEnum_BiddingStrategyType.TARGET_OUTRANK_SHARE;
    case 8:
    case "TARGET_ROAS":
      return BiddingStrategyTypeEnum_BiddingStrategyType.TARGET_ROAS;
    case 9:
    case "TARGET_SPEND":
      return BiddingStrategyTypeEnum_BiddingStrategyType.TARGET_SPEND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BiddingStrategyTypeEnum_BiddingStrategyType.UNRECOGNIZED;
  }
}

export function biddingStrategyTypeEnum_BiddingStrategyTypeToJSON(
  object: BiddingStrategyTypeEnum_BiddingStrategyType,
): string {
  switch (object) {
    case BiddingStrategyTypeEnum_BiddingStrategyType.UNSPECIFIED:
      return "UNSPECIFIED";
    case BiddingStrategyTypeEnum_BiddingStrategyType.UNKNOWN:
      return "UNKNOWN";
    case BiddingStrategyTypeEnum_BiddingStrategyType.COMMISSION:
      return "COMMISSION";
    case BiddingStrategyTypeEnum_BiddingStrategyType.ENHANCED_CPC:
      return "ENHANCED_CPC";
    case BiddingStrategyTypeEnum_BiddingStrategyType.INVALID:
      return "INVALID";
    case BiddingStrategyTypeEnum_BiddingStrategyType.MANUAL_CPA:
      return "MANUAL_CPA";
    case BiddingStrategyTypeEnum_BiddingStrategyType.MANUAL_CPC:
      return "MANUAL_CPC";
    case BiddingStrategyTypeEnum_BiddingStrategyType.MANUAL_CPM:
      return "MANUAL_CPM";
    case BiddingStrategyTypeEnum_BiddingStrategyType.MANUAL_CPV:
      return "MANUAL_CPV";
    case BiddingStrategyTypeEnum_BiddingStrategyType.MAXIMIZE_CONVERSIONS:
      return "MAXIMIZE_CONVERSIONS";
    case BiddingStrategyTypeEnum_BiddingStrategyType.MAXIMIZE_CONVERSION_VALUE:
      return "MAXIMIZE_CONVERSION_VALUE";
    case BiddingStrategyTypeEnum_BiddingStrategyType.PAGE_ONE_PROMOTED:
      return "PAGE_ONE_PROMOTED";
    case BiddingStrategyTypeEnum_BiddingStrategyType.PERCENT_CPC:
      return "PERCENT_CPC";
    case BiddingStrategyTypeEnum_BiddingStrategyType.TARGET_CPA:
      return "TARGET_CPA";
    case BiddingStrategyTypeEnum_BiddingStrategyType.TARGET_CPM:
      return "TARGET_CPM";
    case BiddingStrategyTypeEnum_BiddingStrategyType.TARGET_IMPRESSION_SHARE:
      return "TARGET_IMPRESSION_SHARE";
    case BiddingStrategyTypeEnum_BiddingStrategyType.TARGET_OUTRANK_SHARE:
      return "TARGET_OUTRANK_SHARE";
    case BiddingStrategyTypeEnum_BiddingStrategyType.TARGET_ROAS:
      return "TARGET_ROAS";
    case BiddingStrategyTypeEnum_BiddingStrategyType.TARGET_SPEND:
      return "TARGET_SPEND";
    case BiddingStrategyTypeEnum_BiddingStrategyType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseBiddingStrategyTypeEnum(): BiddingStrategyTypeEnum {
  return {};
}

export const BiddingStrategyTypeEnum: MessageFns<BiddingStrategyTypeEnum> = {
  encode(_: BiddingStrategyTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BiddingStrategyTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBiddingStrategyTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): BiddingStrategyTypeEnum {
    return {};
  },

  toJSON(_: BiddingStrategyTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<BiddingStrategyTypeEnum>): BiddingStrategyTypeEnum {
    return BiddingStrategyTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<BiddingStrategyTypeEnum>): BiddingStrategyTypeEnum {
    const message = createBaseBiddingStrategyTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
