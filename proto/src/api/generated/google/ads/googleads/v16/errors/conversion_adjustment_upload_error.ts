// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/conversion_adjustment_upload_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible conversion adjustment upload errors. */
export interface ConversionAdjustmentUploadErrorEnum {
}

/** Enum describing possible conversion adjustment upload errors. */
export enum ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /**
   * TOO_RECENT_CONVERSION_ACTION - Can't import events to a conversion action that was just created. Try
   * importing again in 6 hours.
   */
  TOO_RECENT_CONVERSION_ACTION = 2,
  /** CONVERSION_ALREADY_RETRACTED - The conversion was already retracted. This adjustment was not processed. */
  CONVERSION_ALREADY_RETRACTED = 4,
  /**
   * CONVERSION_NOT_FOUND - The conversion for this conversion action and conversion identifier can't
   * be found. Make sure your conversion identifiers are associated with the
   * correct conversion action and try again.
   */
  CONVERSION_NOT_FOUND = 5,
  /**
   * CONVERSION_EXPIRED - Adjustment can't be made to a conversion that occurred more than 54 days
   * ago.
   */
  CONVERSION_EXPIRED = 6,
  /**
   * ADJUSTMENT_PRECEDES_CONVERSION - Adjustment has an `adjustment_date_time` that occurred before the
   * associated conversion. Make sure your `adjustment_date_time` is correct
   * and try again.
   */
  ADJUSTMENT_PRECEDES_CONVERSION = 7,
  /**
   * MORE_RECENT_RESTATEMENT_FOUND - More recent adjustment `adjustment_date_time` has already been reported
   * for the associated conversion.  Make sure your adjustment
   * `adjustment_date_time` is correct and try again.
   */
  MORE_RECENT_RESTATEMENT_FOUND = 8,
  /**
   * TOO_RECENT_CONVERSION - Adjustment can't be recorded because the conversion occurred too
   * recently. Try adjusting a conversion that occurred at least 24 hours ago.
   */
  TOO_RECENT_CONVERSION = 9,
  /**
   * CANNOT_RESTATE_CONVERSION_ACTION_THAT_ALWAYS_USES_DEFAULT_CONVERSION_VALUE - Can't make an adjustment to a conversion that is set up to use the
   * default value. Check your conversion action value setting and try again.
   */
  CANNOT_RESTATE_CONVERSION_ACTION_THAT_ALWAYS_USES_DEFAULT_CONVERSION_VALUE = 10,
  /** TOO_MANY_ADJUSTMENTS_IN_REQUEST - Try uploading fewer than 2001 adjustments in a single API request. */
  TOO_MANY_ADJUSTMENTS_IN_REQUEST = 11,
  /**
   * TOO_MANY_ADJUSTMENTS - The conversion has already been adjusted the maximum number of times.
   * Make sure you're only making necessary adjustment to existing conversion.
   */
  TOO_MANY_ADJUSTMENTS = 12,
  /**
   * RESTATEMENT_ALREADY_EXISTS - The conversion has prior a restatement with the same
   * `adjustment_date_time`. Make sure your adjustment has the correct and
   * unique `adjustment_date_time` and try again.
   */
  RESTATEMENT_ALREADY_EXISTS = 13,
  /**
   * DUPLICATE_ADJUSTMENT_IN_REQUEST - Imported adjustment has a duplicate conversion adjustment with same
   * `adjustment_date_time`. Make sure your adjustment has the correct
   * `adjustment_date_time` and try again.
   */
  DUPLICATE_ADJUSTMENT_IN_REQUEST = 14,
  /**
   * CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS - Make sure you agree to the customer data processing terms in conversion
   * settings and try again.
   */
  CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS = 15,
  /** CONVERSION_ACTION_NOT_ELIGIBLE_FOR_ENHANCEMENT - Can't use enhanced conversions with the specified conversion action. */
  CONVERSION_ACTION_NOT_ELIGIBLE_FOR_ENHANCEMENT = 16,
  /**
   * INVALID_USER_IDENTIFIER - Make sure you hash user provided data using SHA-256 and ensure you are
   * normalizing according to the guidelines.
   */
  INVALID_USER_IDENTIFIER = 17,
  /**
   * UNSUPPORTED_USER_IDENTIFIER - Use user provided data such as emails or phone numbers hashed using
   * SHA-256 and try again.
   */
  UNSUPPORTED_USER_IDENTIFIER = 18,
  /**
   * GCLID_DATE_TIME_PAIR_AND_ORDER_ID_BOTH_SET - Cannot set both gclid_date_time_pair and order_id. Use only 1 type and
   * try again.
   */
  GCLID_DATE_TIME_PAIR_AND_ORDER_ID_BOTH_SET = 20,
  /**
   * CONVERSION_ALREADY_ENHANCED - Conversion already has enhancements with the same Order ID and conversion
   * action. Make sure your data is correctly configured and try again.
   */
  CONVERSION_ALREADY_ENHANCED = 21,
  /**
   * DUPLICATE_ENHANCEMENT_IN_REQUEST - Multiple enhancements have the same conversion action and Order ID.  Make
   * sure your data is correctly configured and try again.
   */
  DUPLICATE_ENHANCEMENT_IN_REQUEST = 22,
  /**
   * CUSTOMER_DATA_POLICY_PROHIBITS_ENHANCEMENT - Enhanced conversions can't be used for this account because of Google
   * customer data policies. Contact your Google representative.
   */
  CUSTOMER_DATA_POLICY_PROHIBITS_ENHANCEMENT = 23,
  /**
   * MISSING_ORDER_ID_FOR_WEBPAGE - Adjustment for website conversion requires Order ID (ie, transaction ID).
   * Make sure your website tags capture Order IDs and you send the same Order
   * IDs with your adjustment.
   */
  MISSING_ORDER_ID_FOR_WEBPAGE = 24,
  /**
   * ORDER_ID_CONTAINS_PII - Can't use adjustment with Order IDs containing personally-identifiable
   * information (PII).
   */
  ORDER_ID_CONTAINS_PII = 25,
  /**
   * INVALID_JOB_ID - The provided job id in the request is not within the allowed range. A job
   * ID must be a positive integer in the range [1, 2^31).
   */
  INVALID_JOB_ID = 26,
  /**
   * NO_CONVERSION_ACTION_FOUND - The conversion action specified in the adjustment request cannot be
   * found. Make sure it's available in this account.
   */
  NO_CONVERSION_ACTION_FOUND = 27,
  /**
   * INVALID_CONVERSION_ACTION_TYPE - The type of the conversion action specified in the adjustment request
   * isn't supported for uploading adjustments. A conversion adjustment of
   * type `RETRACTION` or `RESTATEMENT` is only permitted for conversion
   * actions of type `SALESFORCE`, `UPLOAD_CLICK` or `WEBPAGE`. A conversion
   * adjustment of type `ENHANCEMENT` is only permitted for conversion
   * actions of type `WEBPAGE`.
   */
  INVALID_CONVERSION_ACTION_TYPE = 28,
  UNRECOGNIZED = -1,
}

export function conversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadErrorFromJSON(
  object: any,
): ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.UNKNOWN;
    case 2:
    case "TOO_RECENT_CONVERSION_ACTION":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.TOO_RECENT_CONVERSION_ACTION;
    case 4:
    case "CONVERSION_ALREADY_RETRACTED":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.CONVERSION_ALREADY_RETRACTED;
    case 5:
    case "CONVERSION_NOT_FOUND":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.CONVERSION_NOT_FOUND;
    case 6:
    case "CONVERSION_EXPIRED":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.CONVERSION_EXPIRED;
    case 7:
    case "ADJUSTMENT_PRECEDES_CONVERSION":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.ADJUSTMENT_PRECEDES_CONVERSION;
    case 8:
    case "MORE_RECENT_RESTATEMENT_FOUND":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.MORE_RECENT_RESTATEMENT_FOUND;
    case 9:
    case "TOO_RECENT_CONVERSION":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.TOO_RECENT_CONVERSION;
    case 10:
    case "CANNOT_RESTATE_CONVERSION_ACTION_THAT_ALWAYS_USES_DEFAULT_CONVERSION_VALUE":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError
        .CANNOT_RESTATE_CONVERSION_ACTION_THAT_ALWAYS_USES_DEFAULT_CONVERSION_VALUE;
    case 11:
    case "TOO_MANY_ADJUSTMENTS_IN_REQUEST":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.TOO_MANY_ADJUSTMENTS_IN_REQUEST;
    case 12:
    case "TOO_MANY_ADJUSTMENTS":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.TOO_MANY_ADJUSTMENTS;
    case 13:
    case "RESTATEMENT_ALREADY_EXISTS":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.RESTATEMENT_ALREADY_EXISTS;
    case 14:
    case "DUPLICATE_ADJUSTMENT_IN_REQUEST":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.DUPLICATE_ADJUSTMENT_IN_REQUEST;
    case 15:
    case "CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError
        .CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS;
    case 16:
    case "CONVERSION_ACTION_NOT_ELIGIBLE_FOR_ENHANCEMENT":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError
        .CONVERSION_ACTION_NOT_ELIGIBLE_FOR_ENHANCEMENT;
    case 17:
    case "INVALID_USER_IDENTIFIER":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.INVALID_USER_IDENTIFIER;
    case 18:
    case "UNSUPPORTED_USER_IDENTIFIER":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.UNSUPPORTED_USER_IDENTIFIER;
    case 20:
    case "GCLID_DATE_TIME_PAIR_AND_ORDER_ID_BOTH_SET":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError
        .GCLID_DATE_TIME_PAIR_AND_ORDER_ID_BOTH_SET;
    case 21:
    case "CONVERSION_ALREADY_ENHANCED":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.CONVERSION_ALREADY_ENHANCED;
    case 22:
    case "DUPLICATE_ENHANCEMENT_IN_REQUEST":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.DUPLICATE_ENHANCEMENT_IN_REQUEST;
    case 23:
    case "CUSTOMER_DATA_POLICY_PROHIBITS_ENHANCEMENT":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError
        .CUSTOMER_DATA_POLICY_PROHIBITS_ENHANCEMENT;
    case 24:
    case "MISSING_ORDER_ID_FOR_WEBPAGE":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.MISSING_ORDER_ID_FOR_WEBPAGE;
    case 25:
    case "ORDER_ID_CONTAINS_PII":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.ORDER_ID_CONTAINS_PII;
    case 26:
    case "INVALID_JOB_ID":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.INVALID_JOB_ID;
    case 27:
    case "NO_CONVERSION_ACTION_FOUND":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.NO_CONVERSION_ACTION_FOUND;
    case 28:
    case "INVALID_CONVERSION_ACTION_TYPE":
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.INVALID_CONVERSION_ACTION_TYPE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.UNRECOGNIZED;
  }
}

export function conversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadErrorToJSON(
  object: ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError,
): string {
  switch (object) {
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.UNSPECIFIED:
      return "UNSPECIFIED";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.UNKNOWN:
      return "UNKNOWN";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.TOO_RECENT_CONVERSION_ACTION:
      return "TOO_RECENT_CONVERSION_ACTION";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.CONVERSION_ALREADY_RETRACTED:
      return "CONVERSION_ALREADY_RETRACTED";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.CONVERSION_NOT_FOUND:
      return "CONVERSION_NOT_FOUND";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.CONVERSION_EXPIRED:
      return "CONVERSION_EXPIRED";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.ADJUSTMENT_PRECEDES_CONVERSION:
      return "ADJUSTMENT_PRECEDES_CONVERSION";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.MORE_RECENT_RESTATEMENT_FOUND:
      return "MORE_RECENT_RESTATEMENT_FOUND";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.TOO_RECENT_CONVERSION:
      return "TOO_RECENT_CONVERSION";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError
      .CANNOT_RESTATE_CONVERSION_ACTION_THAT_ALWAYS_USES_DEFAULT_CONVERSION_VALUE:
      return "CANNOT_RESTATE_CONVERSION_ACTION_THAT_ALWAYS_USES_DEFAULT_CONVERSION_VALUE";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.TOO_MANY_ADJUSTMENTS_IN_REQUEST:
      return "TOO_MANY_ADJUSTMENTS_IN_REQUEST";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.TOO_MANY_ADJUSTMENTS:
      return "TOO_MANY_ADJUSTMENTS";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.RESTATEMENT_ALREADY_EXISTS:
      return "RESTATEMENT_ALREADY_EXISTS";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.DUPLICATE_ADJUSTMENT_IN_REQUEST:
      return "DUPLICATE_ADJUSTMENT_IN_REQUEST";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS:
      return "CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError
      .CONVERSION_ACTION_NOT_ELIGIBLE_FOR_ENHANCEMENT:
      return "CONVERSION_ACTION_NOT_ELIGIBLE_FOR_ENHANCEMENT";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.INVALID_USER_IDENTIFIER:
      return "INVALID_USER_IDENTIFIER";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.UNSUPPORTED_USER_IDENTIFIER:
      return "UNSUPPORTED_USER_IDENTIFIER";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.GCLID_DATE_TIME_PAIR_AND_ORDER_ID_BOTH_SET:
      return "GCLID_DATE_TIME_PAIR_AND_ORDER_ID_BOTH_SET";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.CONVERSION_ALREADY_ENHANCED:
      return "CONVERSION_ALREADY_ENHANCED";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.DUPLICATE_ENHANCEMENT_IN_REQUEST:
      return "DUPLICATE_ENHANCEMENT_IN_REQUEST";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.CUSTOMER_DATA_POLICY_PROHIBITS_ENHANCEMENT:
      return "CUSTOMER_DATA_POLICY_PROHIBITS_ENHANCEMENT";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.MISSING_ORDER_ID_FOR_WEBPAGE:
      return "MISSING_ORDER_ID_FOR_WEBPAGE";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.ORDER_ID_CONTAINS_PII:
      return "ORDER_ID_CONTAINS_PII";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.INVALID_JOB_ID:
      return "INVALID_JOB_ID";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.NO_CONVERSION_ACTION_FOUND:
      return "NO_CONVERSION_ACTION_FOUND";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.INVALID_CONVERSION_ACTION_TYPE:
      return "INVALID_CONVERSION_ACTION_TYPE";
    case ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseConversionAdjustmentUploadErrorEnum(): ConversionAdjustmentUploadErrorEnum {
  return {};
}

export const ConversionAdjustmentUploadErrorEnum: MessageFns<ConversionAdjustmentUploadErrorEnum> = {
  encode(_: ConversionAdjustmentUploadErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConversionAdjustmentUploadErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversionAdjustmentUploadErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ConversionAdjustmentUploadErrorEnum {
    return {};
  },

  toJSON(_: ConversionAdjustmentUploadErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ConversionAdjustmentUploadErrorEnum>): ConversionAdjustmentUploadErrorEnum {
    return ConversionAdjustmentUploadErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ConversionAdjustmentUploadErrorEnum>): ConversionAdjustmentUploadErrorEnum {
    const message = createBaseConversionAdjustmentUploadErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
