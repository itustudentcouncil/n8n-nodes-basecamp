// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/invoice.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { DateRange } from "../common/dates.js";
import {
  InvoiceTypeEnum_InvoiceType,
  invoiceTypeEnum_InvoiceTypeFromJSON,
  invoiceTypeEnum_InvoiceTypeToJSON,
} from "../enums/invoice_type.js";
import {
  MonthOfYearEnum_MonthOfYear,
  monthOfYearEnum_MonthOfYearFromJSON,
  monthOfYearEnum_MonthOfYearToJSON,
} from "../enums/month_of_year.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * An invoice. All invoice information is snapshotted to match the PDF invoice.
 * For invoices older than the launch of InvoiceService, the snapshotted
 * information may not match the PDF invoice.
 */
export interface Invoice {
  /**
   * Output only. The resource name of the invoice. Multiple customers can share
   * a given invoice, so multiple resource names may point to the same invoice.
   * Invoice resource names have the form:
   *
   * `customers/{customer_id}/invoices/{invoice_id}`
   */
  resourceName: string;
  /**
   * Output only. The ID of the invoice. It appears on the invoice PDF as
   * "Invoice number".
   */
  id?:
    | string
    | undefined;
  /** Output only. The type of invoice. */
  type: InvoiceTypeEnum_InvoiceType;
  /**
   * Output only. The resource name of this invoice's billing setup.
   *
   * `customers/{customer_id}/billingSetups/{billing_setup_id}`
   */
  billingSetup?:
    | string
    | undefined;
  /**
   * Output only. A 16 digit ID used to identify the payments account associated
   * with the billing setup, for example, "1234-5678-9012-3456". It appears on
   * the invoice PDF as "Billing Account Number".
   */
  paymentsAccountId?:
    | string
    | undefined;
  /**
   * Output only. A 12 digit ID used to identify the payments profile associated
   * with the billing setup, for example, "1234-5678-9012". It appears on the
   * invoice PDF as "Billing ID".
   */
  paymentsProfileId?:
    | string
    | undefined;
  /**
   * Output only. The issue date in yyyy-mm-dd format. It appears on the invoice
   * PDF as either "Issue date" or "Invoice date".
   */
  issueDate?:
    | string
    | undefined;
  /** Output only. The due date in yyyy-mm-dd format. */
  dueDate?:
    | string
    | undefined;
  /**
   * Output only. The service period date range of this invoice. The end date is
   * inclusive.
   */
  serviceDateRange:
    | DateRange
    | undefined;
  /**
   * Output only. The currency code. All costs are returned in this currency. A
   * subset of the currency codes derived from the ISO 4217 standard is
   * supported.
   */
  currencyCode?:
    | string
    | undefined;
  /**
   * Output only. The pretax subtotal amount of invoice level adjustments, in
   * micros.
   */
  adjustmentsSubtotalAmountMicros: Long;
  /** Output only. The sum of taxes on the invoice level adjustments, in micros. */
  adjustmentsTaxAmountMicros: Long;
  /** Output only. The total amount of invoice level adjustments, in micros. */
  adjustmentsTotalAmountMicros: Long;
  /**
   * Output only. The pretax subtotal amount of invoice level regulatory costs,
   * in micros.
   */
  regulatoryCostsSubtotalAmountMicros: Long;
  /**
   * Output only. The sum of taxes on the invoice level regulatory costs, in
   * micros.
   */
  regulatoryCostsTaxAmountMicros: Long;
  /** Output only. The total amount of invoice level regulatory costs, in micros. */
  regulatoryCostsTotalAmountMicros: Long;
  /**
   * Output only. The pretax subtotal amount of invoice level export charges, in
   * micros.
   */
  exportChargeSubtotalAmountMicros?:
    | Long
    | undefined;
  /**
   * Output only. The sum of taxes on the invoice level export charges, in
   * micros.
   */
  exportChargeTaxAmountMicros?:
    | Long
    | undefined;
  /** Output only. The total amount of invoice level export charges, in micros. */
  exportChargeTotalAmountMicros?:
    | Long
    | undefined;
  /**
   * Output only. The pretax subtotal amount, in micros. This is equal to the
   * sum of the AccountBudgetSummary subtotal amounts and
   * Invoice.adjustments_subtotal_amount_micros.
   */
  subtotalAmountMicros?:
    | Long
    | undefined;
  /**
   * Output only. The sum of all taxes on the invoice, in micros. This equals
   * the sum of the AccountBudgetSummary tax amounts, plus taxes not associated
   * with a specific account budget.
   */
  taxAmountMicros?:
    | Long
    | undefined;
  /**
   * Output only. The total amount, in micros. This equals the sum of
   * Invoice.subtotal_amount_micros, Invoice.tax_amount_micros,
   * Invoice.regulatory_costs_subtotal_amount_micros, and
   * Invoice.export_charge_subtotal_amount_micros (which is separated into a
   * separate line item starting with V14.1).
   */
  totalAmountMicros?:
    | Long
    | undefined;
  /**
   * Output only. The resource name of the original invoice corrected, wrote
   * off, or canceled by this invoice, if applicable. If `corrected_invoice` is
   * set, `replaced_invoices` will not be set. Invoice resource names have the
   * form:
   *
   * `customers/{customer_id}/invoices/{invoice_id}`
   */
  correctedInvoice?:
    | string
    | undefined;
  /**
   * Output only. The resource name of the original invoice(s) being rebilled or
   * replaced by this invoice, if applicable. There might be multiple replaced
   * invoices due to invoice consolidation. The replaced invoices may not belong
   * to the same payments account. If `replaced_invoices` is set,
   * `corrected_invoice` will not be set. Invoice resource names have the form:
   *
   * `customers/{customer_id}/invoices/{invoice_id}`
   */
  replacedInvoices: string[];
  /**
   * Output only. The URL to a PDF copy of the invoice. Users need to pass in
   * their OAuth token to request the PDF with this URL.
   */
  pdfUrl?:
    | string
    | undefined;
  /**
   * Output only. The list of summarized account budget information associated
   * with this invoice.
   */
  accountBudgetSummaries: Invoice_AccountBudgetSummary[];
  /**
   * Output only. The list of summarized account information associated with
   * this invoice.
   */
  accountSummaries: Invoice_AccountSummary[];
}

/** Represents a summarized view at account level. */
export interface Invoice_AccountSummary {
  /** Output only. The account associated with the account summary. */
  customer?:
    | string
    | undefined;
  /** Output only. Pretax billing correction subtotal amount, in micros. */
  billingCorrectionSubtotalAmountMicros?:
    | Long
    | undefined;
  /** Output only. Tax on billing correction, in micros. */
  billingCorrectionTaxAmountMicros?:
    | Long
    | undefined;
  /** Output only. Total billing correction amount, in micros. */
  billingCorrectionTotalAmountMicros?:
    | Long
    | undefined;
  /** Output only. Pretax coupon adjustment subtotal amount, in micros. */
  couponAdjustmentSubtotalAmountMicros?:
    | Long
    | undefined;
  /** Output only. Tax on coupon adjustment, in micros. */
  couponAdjustmentTaxAmountMicros?:
    | Long
    | undefined;
  /** Output only. Total coupon adjustment amount, in micros. */
  couponAdjustmentTotalAmountMicros?:
    | Long
    | undefined;
  /** Output only. Pretax excess credit adjustment subtotal amount, in micros. */
  excessCreditAdjustmentSubtotalAmountMicros?:
    | Long
    | undefined;
  /** Output only. Tax on excess credit adjustment, in micros. */
  excessCreditAdjustmentTaxAmountMicros?:
    | Long
    | undefined;
  /** Output only. Total excess credit adjustment amount, in micros. */
  excessCreditAdjustmentTotalAmountMicros?:
    | Long
    | undefined;
  /** Output only. Pretax regulatory costs subtotal amount, in micros. */
  regulatoryCostsSubtotalAmountMicros?:
    | Long
    | undefined;
  /** Output only. Tax on regulatory costs, in micros. */
  regulatoryCostsTaxAmountMicros?:
    | Long
    | undefined;
  /** Output only. Total regulatory costs amount, in micros. */
  regulatoryCostsTotalAmountMicros?:
    | Long
    | undefined;
  /** Output only. Pretax export charge subtotal amount, in micros. */
  exportChargeSubtotalAmountMicros?:
    | Long
    | undefined;
  /** Output only. Tax on export charge, in micros. */
  exportChargeTaxAmountMicros?:
    | Long
    | undefined;
  /** Output only. Total export charge amount, in micros. */
  exportChargeTotalAmountMicros?:
    | Long
    | undefined;
  /**
   * Output only. Total pretax subtotal amount attributable to the account
   * during the service period, in micros.
   */
  subtotalAmountMicros?:
    | Long
    | undefined;
  /**
   * Output only. Total tax amount attributable to the account during the
   * service period, in micros.
   */
  taxAmountMicros?:
    | Long
    | undefined;
  /**
   * Output only. Total amount attributable to the account during the service
   * period, in micros. This equals the sum of the subtotal_amount_micros and
   * tax_amount_micros.
   */
  totalAmountMicros?: Long | undefined;
}

/** Represents a summarized account budget billable cost. */
export interface Invoice_AccountBudgetSummary {
  /**
   * Output only. The resource name of the customer associated with this
   * account budget. This contains the customer ID, which appears on the
   * invoice PDF as "Account ID". Customer resource names have the form:
   *
   * `customers/{customer_id}`
   */
  customer?:
    | string
    | undefined;
  /**
   * Output only. The descriptive name of the account budget's customer. It
   * appears on the invoice PDF as "Account".
   */
  customerDescriptiveName?:
    | string
    | undefined;
  /**
   * Output only. The resource name of the account budget associated with this
   * summarized billable cost. AccountBudget resource names have the form:
   *
   * `customers/{customer_id}/accountBudgets/{account_budget_id}`
   */
  accountBudget?:
    | string
    | undefined;
  /**
   * Output only. The name of the account budget. It appears on the invoice
   * PDF as "Account budget".
   */
  accountBudgetName?:
    | string
    | undefined;
  /**
   * Output only. The purchase order number of the account budget. It appears
   * on the invoice PDF as "Purchase order".
   */
  purchaseOrderNumber?:
    | string
    | undefined;
  /**
   * Output only. The pretax subtotal amount attributable to this budget
   * during the service period, in micros.
   */
  subtotalAmountMicros?:
    | Long
    | undefined;
  /**
   * Output only. The tax amount attributable to this budget during the
   * service period, in micros.
   */
  taxAmountMicros?:
    | Long
    | undefined;
  /**
   * Output only. The total amount attributable to this budget during the
   * service period, in micros. This equals the sum of the account budget
   * subtotal amount and the account budget tax amount.
   */
  totalAmountMicros?:
    | Long
    | undefined;
  /**
   * Output only. The billable activity date range of the account budget,
   * within the service date range of this invoice. The end date is inclusive.
   * This can be different from the account budget's start and end time.
   */
  billableActivityDateRange:
    | DateRange
    | undefined;
  /**
   * Output only. The pretax served amount attributable to this budget during
   * the service period, in micros. This is only useful to reconcile invoice
   * and delivery data.
   */
  servedAmountMicros?:
    | Long
    | undefined;
  /**
   * Output only. The pretax billed amount attributable to this budget during
   * the service period, in micros. This does not account for any adjustments.
   */
  billedAmountMicros?:
    | Long
    | undefined;
  /**
   * Output only. The pretax overdelivery amount attributable to this budget
   * during the service period, in micros (negative value).
   */
  overdeliveryAmountMicros?:
    | Long
    | undefined;
  /**
   * Output only. The pretax invalid activity amount attributable to this
   * budget in previous months, in micros (negative value).
   */
  invalidActivityAmountMicros?:
    | Long
    | undefined;
  /**
   * Output only. The list of summarized invalid activity credits with
   * original linkages.
   */
  invalidActivitySummaries: Invoice_InvalidActivitySummary[];
}

/**
 * Details about the invalid activity for the invoice that contain
 * additional details about invoice against which corrections are made.
 */
export interface Invoice_InvalidActivitySummary {
  /**
   * Output only. Original month of service related to this invalid activity
   * credit.
   */
  originalMonthOfService?:
    | MonthOfYearEnum_MonthOfYear
    | undefined;
  /**
   * Output only. Original year of service related to this invalid activity
   * credit.
   */
  originalYearOfService?:
    | string
    | undefined;
  /**
   * Output only. Original invoice number related to this invalid activity
   * credit.
   */
  originalInvoiceId?:
    | string
    | undefined;
  /**
   * Output only. Original account budget name related to this invalid
   * activity credit.
   */
  originalAccountBudgetName?:
    | string
    | undefined;
  /**
   * Output only. Original purchase order number related to this invalid
   * activity credit.
   */
  originalPurchaseOrderNumber?:
    | string
    | undefined;
  /** Output only. Invalid activity amount in micros. */
  amountMicros?: Long | undefined;
}

function createBaseInvoice(): Invoice {
  return {
    resourceName: "",
    id: undefined,
    type: 0,
    billingSetup: undefined,
    paymentsAccountId: undefined,
    paymentsProfileId: undefined,
    issueDate: undefined,
    dueDate: undefined,
    serviceDateRange: undefined,
    currencyCode: undefined,
    adjustmentsSubtotalAmountMicros: Long.ZERO,
    adjustmentsTaxAmountMicros: Long.ZERO,
    adjustmentsTotalAmountMicros: Long.ZERO,
    regulatoryCostsSubtotalAmountMicros: Long.ZERO,
    regulatoryCostsTaxAmountMicros: Long.ZERO,
    regulatoryCostsTotalAmountMicros: Long.ZERO,
    exportChargeSubtotalAmountMicros: undefined,
    exportChargeTaxAmountMicros: undefined,
    exportChargeTotalAmountMicros: undefined,
    subtotalAmountMicros: undefined,
    taxAmountMicros: undefined,
    totalAmountMicros: undefined,
    correctedInvoice: undefined,
    replacedInvoices: [],
    pdfUrl: undefined,
    accountBudgetSummaries: [],
    accountSummaries: [],
  };
}

export const Invoice: MessageFns<Invoice> = {
  encode(message: Invoice, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(202).string(message.id);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.billingSetup !== undefined) {
      writer.uint32(210).string(message.billingSetup);
    }
    if (message.paymentsAccountId !== undefined) {
      writer.uint32(218).string(message.paymentsAccountId);
    }
    if (message.paymentsProfileId !== undefined) {
      writer.uint32(226).string(message.paymentsProfileId);
    }
    if (message.issueDate !== undefined) {
      writer.uint32(234).string(message.issueDate);
    }
    if (message.dueDate !== undefined) {
      writer.uint32(242).string(message.dueDate);
    }
    if (message.serviceDateRange !== undefined) {
      DateRange.encode(message.serviceDateRange, writer.uint32(74).fork()).join();
    }
    if (message.currencyCode !== undefined) {
      writer.uint32(250).string(message.currencyCode);
    }
    if (!message.adjustmentsSubtotalAmountMicros.equals(Long.ZERO)) {
      writer.uint32(152).int64(message.adjustmentsSubtotalAmountMicros.toString());
    }
    if (!message.adjustmentsTaxAmountMicros.equals(Long.ZERO)) {
      writer.uint32(160).int64(message.adjustmentsTaxAmountMicros.toString());
    }
    if (!message.adjustmentsTotalAmountMicros.equals(Long.ZERO)) {
      writer.uint32(168).int64(message.adjustmentsTotalAmountMicros.toString());
    }
    if (!message.regulatoryCostsSubtotalAmountMicros.equals(Long.ZERO)) {
      writer.uint32(176).int64(message.regulatoryCostsSubtotalAmountMicros.toString());
    }
    if (!message.regulatoryCostsTaxAmountMicros.equals(Long.ZERO)) {
      writer.uint32(184).int64(message.regulatoryCostsTaxAmountMicros.toString());
    }
    if (!message.regulatoryCostsTotalAmountMicros.equals(Long.ZERO)) {
      writer.uint32(192).int64(message.regulatoryCostsTotalAmountMicros.toString());
    }
    if (message.exportChargeSubtotalAmountMicros !== undefined) {
      writer.uint32(320).int64(message.exportChargeSubtotalAmountMicros.toString());
    }
    if (message.exportChargeTaxAmountMicros !== undefined) {
      writer.uint32(328).int64(message.exportChargeTaxAmountMicros.toString());
    }
    if (message.exportChargeTotalAmountMicros !== undefined) {
      writer.uint32(336).int64(message.exportChargeTotalAmountMicros.toString());
    }
    if (message.subtotalAmountMicros !== undefined) {
      writer.uint32(264).int64(message.subtotalAmountMicros.toString());
    }
    if (message.taxAmountMicros !== undefined) {
      writer.uint32(272).int64(message.taxAmountMicros.toString());
    }
    if (message.totalAmountMicros !== undefined) {
      writer.uint32(280).int64(message.totalAmountMicros.toString());
    }
    if (message.correctedInvoice !== undefined) {
      writer.uint32(290).string(message.correctedInvoice);
    }
    for (const v of message.replacedInvoices) {
      writer.uint32(298).string(v!);
    }
    if (message.pdfUrl !== undefined) {
      writer.uint32(306).string(message.pdfUrl);
    }
    for (const v of message.accountBudgetSummaries) {
      Invoice_AccountBudgetSummary.encode(v!, writer.uint32(146).fork()).join();
    }
    for (const v of message.accountSummaries) {
      Invoice_AccountSummary.encode(v!, writer.uint32(314).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Invoice {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvoice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.billingSetup = reader.string();
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.paymentsAccountId = reader.string();
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.paymentsProfileId = reader.string();
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.issueDate = reader.string();
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.dueDate = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.serviceDateRange = DateRange.decode(reader, reader.uint32());
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.adjustmentsSubtotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.adjustmentsTaxAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.adjustmentsTotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.regulatoryCostsSubtotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 23:
          if (tag !== 184) {
            break;
          }

          message.regulatoryCostsTaxAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 24:
          if (tag !== 192) {
            break;
          }

          message.regulatoryCostsTotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 40:
          if (tag !== 320) {
            break;
          }

          message.exportChargeSubtotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 41:
          if (tag !== 328) {
            break;
          }

          message.exportChargeTaxAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 42:
          if (tag !== 336) {
            break;
          }

          message.exportChargeTotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 33:
          if (tag !== 264) {
            break;
          }

          message.subtotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 34:
          if (tag !== 272) {
            break;
          }

          message.taxAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 35:
          if (tag !== 280) {
            break;
          }

          message.totalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }

          message.correctedInvoice = reader.string();
          continue;
        case 37:
          if (tag !== 298) {
            break;
          }

          message.replacedInvoices.push(reader.string());
          continue;
        case 38:
          if (tag !== 306) {
            break;
          }

          message.pdfUrl = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.accountBudgetSummaries.push(Invoice_AccountBudgetSummary.decode(reader, reader.uint32()));
          continue;
        case 39:
          if (tag !== 314) {
            break;
          }

          message.accountSummaries.push(Invoice_AccountSummary.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Invoice {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      type: isSet(object.type) ? invoiceTypeEnum_InvoiceTypeFromJSON(object.type) : 0,
      billingSetup: isSet(object.billingSetup) ? globalThis.String(object.billingSetup) : undefined,
      paymentsAccountId: isSet(object.paymentsAccountId) ? globalThis.String(object.paymentsAccountId) : undefined,
      paymentsProfileId: isSet(object.paymentsProfileId) ? globalThis.String(object.paymentsProfileId) : undefined,
      issueDate: isSet(object.issueDate) ? globalThis.String(object.issueDate) : undefined,
      dueDate: isSet(object.dueDate) ? globalThis.String(object.dueDate) : undefined,
      serviceDateRange: isSet(object.serviceDateRange) ? DateRange.fromJSON(object.serviceDateRange) : undefined,
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : undefined,
      adjustmentsSubtotalAmountMicros: isSet(object.adjustmentsSubtotalAmountMicros)
        ? Long.fromValue(object.adjustmentsSubtotalAmountMicros)
        : Long.ZERO,
      adjustmentsTaxAmountMicros: isSet(object.adjustmentsTaxAmountMicros)
        ? Long.fromValue(object.adjustmentsTaxAmountMicros)
        : Long.ZERO,
      adjustmentsTotalAmountMicros: isSet(object.adjustmentsTotalAmountMicros)
        ? Long.fromValue(object.adjustmentsTotalAmountMicros)
        : Long.ZERO,
      regulatoryCostsSubtotalAmountMicros: isSet(object.regulatoryCostsSubtotalAmountMicros)
        ? Long.fromValue(object.regulatoryCostsSubtotalAmountMicros)
        : Long.ZERO,
      regulatoryCostsTaxAmountMicros: isSet(object.regulatoryCostsTaxAmountMicros)
        ? Long.fromValue(object.regulatoryCostsTaxAmountMicros)
        : Long.ZERO,
      regulatoryCostsTotalAmountMicros: isSet(object.regulatoryCostsTotalAmountMicros)
        ? Long.fromValue(object.regulatoryCostsTotalAmountMicros)
        : Long.ZERO,
      exportChargeSubtotalAmountMicros: isSet(object.exportChargeSubtotalAmountMicros)
        ? Long.fromValue(object.exportChargeSubtotalAmountMicros)
        : undefined,
      exportChargeTaxAmountMicros: isSet(object.exportChargeTaxAmountMicros)
        ? Long.fromValue(object.exportChargeTaxAmountMicros)
        : undefined,
      exportChargeTotalAmountMicros: isSet(object.exportChargeTotalAmountMicros)
        ? Long.fromValue(object.exportChargeTotalAmountMicros)
        : undefined,
      subtotalAmountMicros: isSet(object.subtotalAmountMicros)
        ? Long.fromValue(object.subtotalAmountMicros)
        : undefined,
      taxAmountMicros: isSet(object.taxAmountMicros) ? Long.fromValue(object.taxAmountMicros) : undefined,
      totalAmountMicros: isSet(object.totalAmountMicros) ? Long.fromValue(object.totalAmountMicros) : undefined,
      correctedInvoice: isSet(object.correctedInvoice) ? globalThis.String(object.correctedInvoice) : undefined,
      replacedInvoices: globalThis.Array.isArray(object?.replacedInvoices)
        ? object.replacedInvoices.map((e: any) => globalThis.String(e))
        : [],
      pdfUrl: isSet(object.pdfUrl) ? globalThis.String(object.pdfUrl) : undefined,
      accountBudgetSummaries: globalThis.Array.isArray(object?.accountBudgetSummaries)
        ? object.accountBudgetSummaries.map((e: any) => Invoice_AccountBudgetSummary.fromJSON(e))
        : [],
      accountSummaries: globalThis.Array.isArray(object?.accountSummaries)
        ? object.accountSummaries.map((e: any) => Invoice_AccountSummary.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Invoice): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.type !== 0) {
      obj.type = invoiceTypeEnum_InvoiceTypeToJSON(message.type);
    }
    if (message.billingSetup !== undefined) {
      obj.billingSetup = message.billingSetup;
    }
    if (message.paymentsAccountId !== undefined) {
      obj.paymentsAccountId = message.paymentsAccountId;
    }
    if (message.paymentsProfileId !== undefined) {
      obj.paymentsProfileId = message.paymentsProfileId;
    }
    if (message.issueDate !== undefined) {
      obj.issueDate = message.issueDate;
    }
    if (message.dueDate !== undefined) {
      obj.dueDate = message.dueDate;
    }
    if (message.serviceDateRange !== undefined) {
      obj.serviceDateRange = DateRange.toJSON(message.serviceDateRange);
    }
    if (message.currencyCode !== undefined) {
      obj.currencyCode = message.currencyCode;
    }
    if (!message.adjustmentsSubtotalAmountMicros.equals(Long.ZERO)) {
      obj.adjustmentsSubtotalAmountMicros = (message.adjustmentsSubtotalAmountMicros || Long.ZERO).toString();
    }
    if (!message.adjustmentsTaxAmountMicros.equals(Long.ZERO)) {
      obj.adjustmentsTaxAmountMicros = (message.adjustmentsTaxAmountMicros || Long.ZERO).toString();
    }
    if (!message.adjustmentsTotalAmountMicros.equals(Long.ZERO)) {
      obj.adjustmentsTotalAmountMicros = (message.adjustmentsTotalAmountMicros || Long.ZERO).toString();
    }
    if (!message.regulatoryCostsSubtotalAmountMicros.equals(Long.ZERO)) {
      obj.regulatoryCostsSubtotalAmountMicros = (message.regulatoryCostsSubtotalAmountMicros || Long.ZERO).toString();
    }
    if (!message.regulatoryCostsTaxAmountMicros.equals(Long.ZERO)) {
      obj.regulatoryCostsTaxAmountMicros = (message.regulatoryCostsTaxAmountMicros || Long.ZERO).toString();
    }
    if (!message.regulatoryCostsTotalAmountMicros.equals(Long.ZERO)) {
      obj.regulatoryCostsTotalAmountMicros = (message.regulatoryCostsTotalAmountMicros || Long.ZERO).toString();
    }
    if (message.exportChargeSubtotalAmountMicros !== undefined) {
      obj.exportChargeSubtotalAmountMicros = (message.exportChargeSubtotalAmountMicros || Long.ZERO).toString();
    }
    if (message.exportChargeTaxAmountMicros !== undefined) {
      obj.exportChargeTaxAmountMicros = (message.exportChargeTaxAmountMicros || Long.ZERO).toString();
    }
    if (message.exportChargeTotalAmountMicros !== undefined) {
      obj.exportChargeTotalAmountMicros = (message.exportChargeTotalAmountMicros || Long.ZERO).toString();
    }
    if (message.subtotalAmountMicros !== undefined) {
      obj.subtotalAmountMicros = (message.subtotalAmountMicros || Long.ZERO).toString();
    }
    if (message.taxAmountMicros !== undefined) {
      obj.taxAmountMicros = (message.taxAmountMicros || Long.ZERO).toString();
    }
    if (message.totalAmountMicros !== undefined) {
      obj.totalAmountMicros = (message.totalAmountMicros || Long.ZERO).toString();
    }
    if (message.correctedInvoice !== undefined) {
      obj.correctedInvoice = message.correctedInvoice;
    }
    if (message.replacedInvoices?.length) {
      obj.replacedInvoices = message.replacedInvoices;
    }
    if (message.pdfUrl !== undefined) {
      obj.pdfUrl = message.pdfUrl;
    }
    if (message.accountBudgetSummaries?.length) {
      obj.accountBudgetSummaries = message.accountBudgetSummaries.map((e) => Invoice_AccountBudgetSummary.toJSON(e));
    }
    if (message.accountSummaries?.length) {
      obj.accountSummaries = message.accountSummaries.map((e) => Invoice_AccountSummary.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Invoice>): Invoice {
    return Invoice.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Invoice>): Invoice {
    const message = createBaseInvoice();
    message.resourceName = object.resourceName ?? "";
    message.id = object.id ?? undefined;
    message.type = object.type ?? 0;
    message.billingSetup = object.billingSetup ?? undefined;
    message.paymentsAccountId = object.paymentsAccountId ?? undefined;
    message.paymentsProfileId = object.paymentsProfileId ?? undefined;
    message.issueDate = object.issueDate ?? undefined;
    message.dueDate = object.dueDate ?? undefined;
    message.serviceDateRange = (object.serviceDateRange !== undefined && object.serviceDateRange !== null)
      ? DateRange.fromPartial(object.serviceDateRange)
      : undefined;
    message.currencyCode = object.currencyCode ?? undefined;
    message.adjustmentsSubtotalAmountMicros =
      (object.adjustmentsSubtotalAmountMicros !== undefined && object.adjustmentsSubtotalAmountMicros !== null)
        ? Long.fromValue(object.adjustmentsSubtotalAmountMicros)
        : Long.ZERO;
    message.adjustmentsTaxAmountMicros =
      (object.adjustmentsTaxAmountMicros !== undefined && object.adjustmentsTaxAmountMicros !== null)
        ? Long.fromValue(object.adjustmentsTaxAmountMicros)
        : Long.ZERO;
    message.adjustmentsTotalAmountMicros =
      (object.adjustmentsTotalAmountMicros !== undefined && object.adjustmentsTotalAmountMicros !== null)
        ? Long.fromValue(object.adjustmentsTotalAmountMicros)
        : Long.ZERO;
    message.regulatoryCostsSubtotalAmountMicros =
      (object.regulatoryCostsSubtotalAmountMicros !== undefined && object.regulatoryCostsSubtotalAmountMicros !== null)
        ? Long.fromValue(object.regulatoryCostsSubtotalAmountMicros)
        : Long.ZERO;
    message.regulatoryCostsTaxAmountMicros =
      (object.regulatoryCostsTaxAmountMicros !== undefined && object.regulatoryCostsTaxAmountMicros !== null)
        ? Long.fromValue(object.regulatoryCostsTaxAmountMicros)
        : Long.ZERO;
    message.regulatoryCostsTotalAmountMicros =
      (object.regulatoryCostsTotalAmountMicros !== undefined && object.regulatoryCostsTotalAmountMicros !== null)
        ? Long.fromValue(object.regulatoryCostsTotalAmountMicros)
        : Long.ZERO;
    message.exportChargeSubtotalAmountMicros =
      (object.exportChargeSubtotalAmountMicros !== undefined && object.exportChargeSubtotalAmountMicros !== null)
        ? Long.fromValue(object.exportChargeSubtotalAmountMicros)
        : undefined;
    message.exportChargeTaxAmountMicros =
      (object.exportChargeTaxAmountMicros !== undefined && object.exportChargeTaxAmountMicros !== null)
        ? Long.fromValue(object.exportChargeTaxAmountMicros)
        : undefined;
    message.exportChargeTotalAmountMicros =
      (object.exportChargeTotalAmountMicros !== undefined && object.exportChargeTotalAmountMicros !== null)
        ? Long.fromValue(object.exportChargeTotalAmountMicros)
        : undefined;
    message.subtotalAmountMicros = (object.subtotalAmountMicros !== undefined && object.subtotalAmountMicros !== null)
      ? Long.fromValue(object.subtotalAmountMicros)
      : undefined;
    message.taxAmountMicros = (object.taxAmountMicros !== undefined && object.taxAmountMicros !== null)
      ? Long.fromValue(object.taxAmountMicros)
      : undefined;
    message.totalAmountMicros = (object.totalAmountMicros !== undefined && object.totalAmountMicros !== null)
      ? Long.fromValue(object.totalAmountMicros)
      : undefined;
    message.correctedInvoice = object.correctedInvoice ?? undefined;
    message.replacedInvoices = object.replacedInvoices?.map((e) => e) || [];
    message.pdfUrl = object.pdfUrl ?? undefined;
    message.accountBudgetSummaries =
      object.accountBudgetSummaries?.map((e) => Invoice_AccountBudgetSummary.fromPartial(e)) || [];
    message.accountSummaries = object.accountSummaries?.map((e) => Invoice_AccountSummary.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInvoice_AccountSummary(): Invoice_AccountSummary {
  return {
    customer: undefined,
    billingCorrectionSubtotalAmountMicros: undefined,
    billingCorrectionTaxAmountMicros: undefined,
    billingCorrectionTotalAmountMicros: undefined,
    couponAdjustmentSubtotalAmountMicros: undefined,
    couponAdjustmentTaxAmountMicros: undefined,
    couponAdjustmentTotalAmountMicros: undefined,
    excessCreditAdjustmentSubtotalAmountMicros: undefined,
    excessCreditAdjustmentTaxAmountMicros: undefined,
    excessCreditAdjustmentTotalAmountMicros: undefined,
    regulatoryCostsSubtotalAmountMicros: undefined,
    regulatoryCostsTaxAmountMicros: undefined,
    regulatoryCostsTotalAmountMicros: undefined,
    exportChargeSubtotalAmountMicros: undefined,
    exportChargeTaxAmountMicros: undefined,
    exportChargeTotalAmountMicros: undefined,
    subtotalAmountMicros: undefined,
    taxAmountMicros: undefined,
    totalAmountMicros: undefined,
  };
}

export const Invoice_AccountSummary: MessageFns<Invoice_AccountSummary> = {
  encode(message: Invoice_AccountSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customer !== undefined) {
      writer.uint32(10).string(message.customer);
    }
    if (message.billingCorrectionSubtotalAmountMicros !== undefined) {
      writer.uint32(16).int64(message.billingCorrectionSubtotalAmountMicros.toString());
    }
    if (message.billingCorrectionTaxAmountMicros !== undefined) {
      writer.uint32(24).int64(message.billingCorrectionTaxAmountMicros.toString());
    }
    if (message.billingCorrectionTotalAmountMicros !== undefined) {
      writer.uint32(32).int64(message.billingCorrectionTotalAmountMicros.toString());
    }
    if (message.couponAdjustmentSubtotalAmountMicros !== undefined) {
      writer.uint32(40).int64(message.couponAdjustmentSubtotalAmountMicros.toString());
    }
    if (message.couponAdjustmentTaxAmountMicros !== undefined) {
      writer.uint32(48).int64(message.couponAdjustmentTaxAmountMicros.toString());
    }
    if (message.couponAdjustmentTotalAmountMicros !== undefined) {
      writer.uint32(56).int64(message.couponAdjustmentTotalAmountMicros.toString());
    }
    if (message.excessCreditAdjustmentSubtotalAmountMicros !== undefined) {
      writer.uint32(64).int64(message.excessCreditAdjustmentSubtotalAmountMicros.toString());
    }
    if (message.excessCreditAdjustmentTaxAmountMicros !== undefined) {
      writer.uint32(72).int64(message.excessCreditAdjustmentTaxAmountMicros.toString());
    }
    if (message.excessCreditAdjustmentTotalAmountMicros !== undefined) {
      writer.uint32(80).int64(message.excessCreditAdjustmentTotalAmountMicros.toString());
    }
    if (message.regulatoryCostsSubtotalAmountMicros !== undefined) {
      writer.uint32(88).int64(message.regulatoryCostsSubtotalAmountMicros.toString());
    }
    if (message.regulatoryCostsTaxAmountMicros !== undefined) {
      writer.uint32(96).int64(message.regulatoryCostsTaxAmountMicros.toString());
    }
    if (message.regulatoryCostsTotalAmountMicros !== undefined) {
      writer.uint32(104).int64(message.regulatoryCostsTotalAmountMicros.toString());
    }
    if (message.exportChargeSubtotalAmountMicros !== undefined) {
      writer.uint32(136).int64(message.exportChargeSubtotalAmountMicros.toString());
    }
    if (message.exportChargeTaxAmountMicros !== undefined) {
      writer.uint32(144).int64(message.exportChargeTaxAmountMicros.toString());
    }
    if (message.exportChargeTotalAmountMicros !== undefined) {
      writer.uint32(152).int64(message.exportChargeTotalAmountMicros.toString());
    }
    if (message.subtotalAmountMicros !== undefined) {
      writer.uint32(112).int64(message.subtotalAmountMicros.toString());
    }
    if (message.taxAmountMicros !== undefined) {
      writer.uint32(120).int64(message.taxAmountMicros.toString());
    }
    if (message.totalAmountMicros !== undefined) {
      writer.uint32(128).int64(message.totalAmountMicros.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Invoice_AccountSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvoice_AccountSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customer = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.billingCorrectionSubtotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.billingCorrectionTaxAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.billingCorrectionTotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.couponAdjustmentSubtotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.couponAdjustmentTaxAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.couponAdjustmentTotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.excessCreditAdjustmentSubtotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.excessCreditAdjustmentTaxAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.excessCreditAdjustmentTotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.regulatoryCostsSubtotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.regulatoryCostsTaxAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.regulatoryCostsTotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.exportChargeSubtotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.exportChargeTaxAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.exportChargeTotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.subtotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.taxAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.totalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Invoice_AccountSummary {
    return {
      customer: isSet(object.customer) ? globalThis.String(object.customer) : undefined,
      billingCorrectionSubtotalAmountMicros: isSet(object.billingCorrectionSubtotalAmountMicros)
        ? Long.fromValue(object.billingCorrectionSubtotalAmountMicros)
        : undefined,
      billingCorrectionTaxAmountMicros: isSet(object.billingCorrectionTaxAmountMicros)
        ? Long.fromValue(object.billingCorrectionTaxAmountMicros)
        : undefined,
      billingCorrectionTotalAmountMicros: isSet(object.billingCorrectionTotalAmountMicros)
        ? Long.fromValue(object.billingCorrectionTotalAmountMicros)
        : undefined,
      couponAdjustmentSubtotalAmountMicros: isSet(object.couponAdjustmentSubtotalAmountMicros)
        ? Long.fromValue(object.couponAdjustmentSubtotalAmountMicros)
        : undefined,
      couponAdjustmentTaxAmountMicros: isSet(object.couponAdjustmentTaxAmountMicros)
        ? Long.fromValue(object.couponAdjustmentTaxAmountMicros)
        : undefined,
      couponAdjustmentTotalAmountMicros: isSet(object.couponAdjustmentTotalAmountMicros)
        ? Long.fromValue(object.couponAdjustmentTotalAmountMicros)
        : undefined,
      excessCreditAdjustmentSubtotalAmountMicros: isSet(object.excessCreditAdjustmentSubtotalAmountMicros)
        ? Long.fromValue(object.excessCreditAdjustmentSubtotalAmountMicros)
        : undefined,
      excessCreditAdjustmentTaxAmountMicros: isSet(object.excessCreditAdjustmentTaxAmountMicros)
        ? Long.fromValue(object.excessCreditAdjustmentTaxAmountMicros)
        : undefined,
      excessCreditAdjustmentTotalAmountMicros: isSet(object.excessCreditAdjustmentTotalAmountMicros)
        ? Long.fromValue(object.excessCreditAdjustmentTotalAmountMicros)
        : undefined,
      regulatoryCostsSubtotalAmountMicros: isSet(object.regulatoryCostsSubtotalAmountMicros)
        ? Long.fromValue(object.regulatoryCostsSubtotalAmountMicros)
        : undefined,
      regulatoryCostsTaxAmountMicros: isSet(object.regulatoryCostsTaxAmountMicros)
        ? Long.fromValue(object.regulatoryCostsTaxAmountMicros)
        : undefined,
      regulatoryCostsTotalAmountMicros: isSet(object.regulatoryCostsTotalAmountMicros)
        ? Long.fromValue(object.regulatoryCostsTotalAmountMicros)
        : undefined,
      exportChargeSubtotalAmountMicros: isSet(object.exportChargeSubtotalAmountMicros)
        ? Long.fromValue(object.exportChargeSubtotalAmountMicros)
        : undefined,
      exportChargeTaxAmountMicros: isSet(object.exportChargeTaxAmountMicros)
        ? Long.fromValue(object.exportChargeTaxAmountMicros)
        : undefined,
      exportChargeTotalAmountMicros: isSet(object.exportChargeTotalAmountMicros)
        ? Long.fromValue(object.exportChargeTotalAmountMicros)
        : undefined,
      subtotalAmountMicros: isSet(object.subtotalAmountMicros)
        ? Long.fromValue(object.subtotalAmountMicros)
        : undefined,
      taxAmountMicros: isSet(object.taxAmountMicros) ? Long.fromValue(object.taxAmountMicros) : undefined,
      totalAmountMicros: isSet(object.totalAmountMicros) ? Long.fromValue(object.totalAmountMicros) : undefined,
    };
  },

  toJSON(message: Invoice_AccountSummary): unknown {
    const obj: any = {};
    if (message.customer !== undefined) {
      obj.customer = message.customer;
    }
    if (message.billingCorrectionSubtotalAmountMicros !== undefined) {
      obj.billingCorrectionSubtotalAmountMicros = (message.billingCorrectionSubtotalAmountMicros || Long.ZERO)
        .toString();
    }
    if (message.billingCorrectionTaxAmountMicros !== undefined) {
      obj.billingCorrectionTaxAmountMicros = (message.billingCorrectionTaxAmountMicros || Long.ZERO).toString();
    }
    if (message.billingCorrectionTotalAmountMicros !== undefined) {
      obj.billingCorrectionTotalAmountMicros = (message.billingCorrectionTotalAmountMicros || Long.ZERO).toString();
    }
    if (message.couponAdjustmentSubtotalAmountMicros !== undefined) {
      obj.couponAdjustmentSubtotalAmountMicros = (message.couponAdjustmentSubtotalAmountMicros || Long.ZERO).toString();
    }
    if (message.couponAdjustmentTaxAmountMicros !== undefined) {
      obj.couponAdjustmentTaxAmountMicros = (message.couponAdjustmentTaxAmountMicros || Long.ZERO).toString();
    }
    if (message.couponAdjustmentTotalAmountMicros !== undefined) {
      obj.couponAdjustmentTotalAmountMicros = (message.couponAdjustmentTotalAmountMicros || Long.ZERO).toString();
    }
    if (message.excessCreditAdjustmentSubtotalAmountMicros !== undefined) {
      obj.excessCreditAdjustmentSubtotalAmountMicros = (message.excessCreditAdjustmentSubtotalAmountMicros || Long.ZERO)
        .toString();
    }
    if (message.excessCreditAdjustmentTaxAmountMicros !== undefined) {
      obj.excessCreditAdjustmentTaxAmountMicros = (message.excessCreditAdjustmentTaxAmountMicros || Long.ZERO)
        .toString();
    }
    if (message.excessCreditAdjustmentTotalAmountMicros !== undefined) {
      obj.excessCreditAdjustmentTotalAmountMicros = (message.excessCreditAdjustmentTotalAmountMicros || Long.ZERO)
        .toString();
    }
    if (message.regulatoryCostsSubtotalAmountMicros !== undefined) {
      obj.regulatoryCostsSubtotalAmountMicros = (message.regulatoryCostsSubtotalAmountMicros || Long.ZERO).toString();
    }
    if (message.regulatoryCostsTaxAmountMicros !== undefined) {
      obj.regulatoryCostsTaxAmountMicros = (message.regulatoryCostsTaxAmountMicros || Long.ZERO).toString();
    }
    if (message.regulatoryCostsTotalAmountMicros !== undefined) {
      obj.regulatoryCostsTotalAmountMicros = (message.regulatoryCostsTotalAmountMicros || Long.ZERO).toString();
    }
    if (message.exportChargeSubtotalAmountMicros !== undefined) {
      obj.exportChargeSubtotalAmountMicros = (message.exportChargeSubtotalAmountMicros || Long.ZERO).toString();
    }
    if (message.exportChargeTaxAmountMicros !== undefined) {
      obj.exportChargeTaxAmountMicros = (message.exportChargeTaxAmountMicros || Long.ZERO).toString();
    }
    if (message.exportChargeTotalAmountMicros !== undefined) {
      obj.exportChargeTotalAmountMicros = (message.exportChargeTotalAmountMicros || Long.ZERO).toString();
    }
    if (message.subtotalAmountMicros !== undefined) {
      obj.subtotalAmountMicros = (message.subtotalAmountMicros || Long.ZERO).toString();
    }
    if (message.taxAmountMicros !== undefined) {
      obj.taxAmountMicros = (message.taxAmountMicros || Long.ZERO).toString();
    }
    if (message.totalAmountMicros !== undefined) {
      obj.totalAmountMicros = (message.totalAmountMicros || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Invoice_AccountSummary>): Invoice_AccountSummary {
    return Invoice_AccountSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Invoice_AccountSummary>): Invoice_AccountSummary {
    const message = createBaseInvoice_AccountSummary();
    message.customer = object.customer ?? undefined;
    message.billingCorrectionSubtotalAmountMicros =
      (object.billingCorrectionSubtotalAmountMicros !== undefined &&
          object.billingCorrectionSubtotalAmountMicros !== null)
        ? Long.fromValue(object.billingCorrectionSubtotalAmountMicros)
        : undefined;
    message.billingCorrectionTaxAmountMicros =
      (object.billingCorrectionTaxAmountMicros !== undefined && object.billingCorrectionTaxAmountMicros !== null)
        ? Long.fromValue(object.billingCorrectionTaxAmountMicros)
        : undefined;
    message.billingCorrectionTotalAmountMicros =
      (object.billingCorrectionTotalAmountMicros !== undefined && object.billingCorrectionTotalAmountMicros !== null)
        ? Long.fromValue(object.billingCorrectionTotalAmountMicros)
        : undefined;
    message.couponAdjustmentSubtotalAmountMicros =
      (object.couponAdjustmentSubtotalAmountMicros !== undefined &&
          object.couponAdjustmentSubtotalAmountMicros !== null)
        ? Long.fromValue(object.couponAdjustmentSubtotalAmountMicros)
        : undefined;
    message.couponAdjustmentTaxAmountMicros =
      (object.couponAdjustmentTaxAmountMicros !== undefined && object.couponAdjustmentTaxAmountMicros !== null)
        ? Long.fromValue(object.couponAdjustmentTaxAmountMicros)
        : undefined;
    message.couponAdjustmentTotalAmountMicros =
      (object.couponAdjustmentTotalAmountMicros !== undefined && object.couponAdjustmentTotalAmountMicros !== null)
        ? Long.fromValue(object.couponAdjustmentTotalAmountMicros)
        : undefined;
    message.excessCreditAdjustmentSubtotalAmountMicros =
      (object.excessCreditAdjustmentSubtotalAmountMicros !== undefined &&
          object.excessCreditAdjustmentSubtotalAmountMicros !== null)
        ? Long.fromValue(object.excessCreditAdjustmentSubtotalAmountMicros)
        : undefined;
    message.excessCreditAdjustmentTaxAmountMicros =
      (object.excessCreditAdjustmentTaxAmountMicros !== undefined &&
          object.excessCreditAdjustmentTaxAmountMicros !== null)
        ? Long.fromValue(object.excessCreditAdjustmentTaxAmountMicros)
        : undefined;
    message.excessCreditAdjustmentTotalAmountMicros =
      (object.excessCreditAdjustmentTotalAmountMicros !== undefined &&
          object.excessCreditAdjustmentTotalAmountMicros !== null)
        ? Long.fromValue(object.excessCreditAdjustmentTotalAmountMicros)
        : undefined;
    message.regulatoryCostsSubtotalAmountMicros =
      (object.regulatoryCostsSubtotalAmountMicros !== undefined && object.regulatoryCostsSubtotalAmountMicros !== null)
        ? Long.fromValue(object.regulatoryCostsSubtotalAmountMicros)
        : undefined;
    message.regulatoryCostsTaxAmountMicros =
      (object.regulatoryCostsTaxAmountMicros !== undefined && object.regulatoryCostsTaxAmountMicros !== null)
        ? Long.fromValue(object.regulatoryCostsTaxAmountMicros)
        : undefined;
    message.regulatoryCostsTotalAmountMicros =
      (object.regulatoryCostsTotalAmountMicros !== undefined && object.regulatoryCostsTotalAmountMicros !== null)
        ? Long.fromValue(object.regulatoryCostsTotalAmountMicros)
        : undefined;
    message.exportChargeSubtotalAmountMicros =
      (object.exportChargeSubtotalAmountMicros !== undefined && object.exportChargeSubtotalAmountMicros !== null)
        ? Long.fromValue(object.exportChargeSubtotalAmountMicros)
        : undefined;
    message.exportChargeTaxAmountMicros =
      (object.exportChargeTaxAmountMicros !== undefined && object.exportChargeTaxAmountMicros !== null)
        ? Long.fromValue(object.exportChargeTaxAmountMicros)
        : undefined;
    message.exportChargeTotalAmountMicros =
      (object.exportChargeTotalAmountMicros !== undefined && object.exportChargeTotalAmountMicros !== null)
        ? Long.fromValue(object.exportChargeTotalAmountMicros)
        : undefined;
    message.subtotalAmountMicros = (object.subtotalAmountMicros !== undefined && object.subtotalAmountMicros !== null)
      ? Long.fromValue(object.subtotalAmountMicros)
      : undefined;
    message.taxAmountMicros = (object.taxAmountMicros !== undefined && object.taxAmountMicros !== null)
      ? Long.fromValue(object.taxAmountMicros)
      : undefined;
    message.totalAmountMicros = (object.totalAmountMicros !== undefined && object.totalAmountMicros !== null)
      ? Long.fromValue(object.totalAmountMicros)
      : undefined;
    return message;
  },
};

function createBaseInvoice_AccountBudgetSummary(): Invoice_AccountBudgetSummary {
  return {
    customer: undefined,
    customerDescriptiveName: undefined,
    accountBudget: undefined,
    accountBudgetName: undefined,
    purchaseOrderNumber: undefined,
    subtotalAmountMicros: undefined,
    taxAmountMicros: undefined,
    totalAmountMicros: undefined,
    billableActivityDateRange: undefined,
    servedAmountMicros: undefined,
    billedAmountMicros: undefined,
    overdeliveryAmountMicros: undefined,
    invalidActivityAmountMicros: undefined,
    invalidActivitySummaries: [],
  };
}

export const Invoice_AccountBudgetSummary: MessageFns<Invoice_AccountBudgetSummary> = {
  encode(message: Invoice_AccountBudgetSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customer !== undefined) {
      writer.uint32(82).string(message.customer);
    }
    if (message.customerDescriptiveName !== undefined) {
      writer.uint32(90).string(message.customerDescriptiveName);
    }
    if (message.accountBudget !== undefined) {
      writer.uint32(98).string(message.accountBudget);
    }
    if (message.accountBudgetName !== undefined) {
      writer.uint32(106).string(message.accountBudgetName);
    }
    if (message.purchaseOrderNumber !== undefined) {
      writer.uint32(114).string(message.purchaseOrderNumber);
    }
    if (message.subtotalAmountMicros !== undefined) {
      writer.uint32(120).int64(message.subtotalAmountMicros.toString());
    }
    if (message.taxAmountMicros !== undefined) {
      writer.uint32(128).int64(message.taxAmountMicros.toString());
    }
    if (message.totalAmountMicros !== undefined) {
      writer.uint32(136).int64(message.totalAmountMicros.toString());
    }
    if (message.billableActivityDateRange !== undefined) {
      DateRange.encode(message.billableActivityDateRange, writer.uint32(74).fork()).join();
    }
    if (message.servedAmountMicros !== undefined) {
      writer.uint32(144).int64(message.servedAmountMicros.toString());
    }
    if (message.billedAmountMicros !== undefined) {
      writer.uint32(152).int64(message.billedAmountMicros.toString());
    }
    if (message.overdeliveryAmountMicros !== undefined) {
      writer.uint32(160).int64(message.overdeliveryAmountMicros.toString());
    }
    if (message.invalidActivityAmountMicros !== undefined) {
      writer.uint32(168).int64(message.invalidActivityAmountMicros.toString());
    }
    for (const v of message.invalidActivitySummaries) {
      Invoice_InvalidActivitySummary.encode(v!, writer.uint32(178).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Invoice_AccountBudgetSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvoice_AccountBudgetSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 10:
          if (tag !== 82) {
            break;
          }

          message.customer = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.customerDescriptiveName = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.accountBudget = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.accountBudgetName = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.purchaseOrderNumber = reader.string();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.subtotalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.taxAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.totalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.billableActivityDateRange = DateRange.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.servedAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.billedAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.overdeliveryAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.invalidActivityAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.invalidActivitySummaries.push(Invoice_InvalidActivitySummary.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Invoice_AccountBudgetSummary {
    return {
      customer: isSet(object.customer) ? globalThis.String(object.customer) : undefined,
      customerDescriptiveName: isSet(object.customerDescriptiveName)
        ? globalThis.String(object.customerDescriptiveName)
        : undefined,
      accountBudget: isSet(object.accountBudget) ? globalThis.String(object.accountBudget) : undefined,
      accountBudgetName: isSet(object.accountBudgetName) ? globalThis.String(object.accountBudgetName) : undefined,
      purchaseOrderNumber: isSet(object.purchaseOrderNumber)
        ? globalThis.String(object.purchaseOrderNumber)
        : undefined,
      subtotalAmountMicros: isSet(object.subtotalAmountMicros)
        ? Long.fromValue(object.subtotalAmountMicros)
        : undefined,
      taxAmountMicros: isSet(object.taxAmountMicros) ? Long.fromValue(object.taxAmountMicros) : undefined,
      totalAmountMicros: isSet(object.totalAmountMicros) ? Long.fromValue(object.totalAmountMicros) : undefined,
      billableActivityDateRange: isSet(object.billableActivityDateRange)
        ? DateRange.fromJSON(object.billableActivityDateRange)
        : undefined,
      servedAmountMicros: isSet(object.servedAmountMicros) ? Long.fromValue(object.servedAmountMicros) : undefined,
      billedAmountMicros: isSet(object.billedAmountMicros) ? Long.fromValue(object.billedAmountMicros) : undefined,
      overdeliveryAmountMicros: isSet(object.overdeliveryAmountMicros)
        ? Long.fromValue(object.overdeliveryAmountMicros)
        : undefined,
      invalidActivityAmountMicros: isSet(object.invalidActivityAmountMicros)
        ? Long.fromValue(object.invalidActivityAmountMicros)
        : undefined,
      invalidActivitySummaries: globalThis.Array.isArray(object?.invalidActivitySummaries)
        ? object.invalidActivitySummaries.map((e: any) => Invoice_InvalidActivitySummary.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Invoice_AccountBudgetSummary): unknown {
    const obj: any = {};
    if (message.customer !== undefined) {
      obj.customer = message.customer;
    }
    if (message.customerDescriptiveName !== undefined) {
      obj.customerDescriptiveName = message.customerDescriptiveName;
    }
    if (message.accountBudget !== undefined) {
      obj.accountBudget = message.accountBudget;
    }
    if (message.accountBudgetName !== undefined) {
      obj.accountBudgetName = message.accountBudgetName;
    }
    if (message.purchaseOrderNumber !== undefined) {
      obj.purchaseOrderNumber = message.purchaseOrderNumber;
    }
    if (message.subtotalAmountMicros !== undefined) {
      obj.subtotalAmountMicros = (message.subtotalAmountMicros || Long.ZERO).toString();
    }
    if (message.taxAmountMicros !== undefined) {
      obj.taxAmountMicros = (message.taxAmountMicros || Long.ZERO).toString();
    }
    if (message.totalAmountMicros !== undefined) {
      obj.totalAmountMicros = (message.totalAmountMicros || Long.ZERO).toString();
    }
    if (message.billableActivityDateRange !== undefined) {
      obj.billableActivityDateRange = DateRange.toJSON(message.billableActivityDateRange);
    }
    if (message.servedAmountMicros !== undefined) {
      obj.servedAmountMicros = (message.servedAmountMicros || Long.ZERO).toString();
    }
    if (message.billedAmountMicros !== undefined) {
      obj.billedAmountMicros = (message.billedAmountMicros || Long.ZERO).toString();
    }
    if (message.overdeliveryAmountMicros !== undefined) {
      obj.overdeliveryAmountMicros = (message.overdeliveryAmountMicros || Long.ZERO).toString();
    }
    if (message.invalidActivityAmountMicros !== undefined) {
      obj.invalidActivityAmountMicros = (message.invalidActivityAmountMicros || Long.ZERO).toString();
    }
    if (message.invalidActivitySummaries?.length) {
      obj.invalidActivitySummaries = message.invalidActivitySummaries.map((e) =>
        Invoice_InvalidActivitySummary.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<Invoice_AccountBudgetSummary>): Invoice_AccountBudgetSummary {
    return Invoice_AccountBudgetSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Invoice_AccountBudgetSummary>): Invoice_AccountBudgetSummary {
    const message = createBaseInvoice_AccountBudgetSummary();
    message.customer = object.customer ?? undefined;
    message.customerDescriptiveName = object.customerDescriptiveName ?? undefined;
    message.accountBudget = object.accountBudget ?? undefined;
    message.accountBudgetName = object.accountBudgetName ?? undefined;
    message.purchaseOrderNumber = object.purchaseOrderNumber ?? undefined;
    message.subtotalAmountMicros = (object.subtotalAmountMicros !== undefined && object.subtotalAmountMicros !== null)
      ? Long.fromValue(object.subtotalAmountMicros)
      : undefined;
    message.taxAmountMicros = (object.taxAmountMicros !== undefined && object.taxAmountMicros !== null)
      ? Long.fromValue(object.taxAmountMicros)
      : undefined;
    message.totalAmountMicros = (object.totalAmountMicros !== undefined && object.totalAmountMicros !== null)
      ? Long.fromValue(object.totalAmountMicros)
      : undefined;
    message.billableActivityDateRange =
      (object.billableActivityDateRange !== undefined && object.billableActivityDateRange !== null)
        ? DateRange.fromPartial(object.billableActivityDateRange)
        : undefined;
    message.servedAmountMicros = (object.servedAmountMicros !== undefined && object.servedAmountMicros !== null)
      ? Long.fromValue(object.servedAmountMicros)
      : undefined;
    message.billedAmountMicros = (object.billedAmountMicros !== undefined && object.billedAmountMicros !== null)
      ? Long.fromValue(object.billedAmountMicros)
      : undefined;
    message.overdeliveryAmountMicros =
      (object.overdeliveryAmountMicros !== undefined && object.overdeliveryAmountMicros !== null)
        ? Long.fromValue(object.overdeliveryAmountMicros)
        : undefined;
    message.invalidActivityAmountMicros =
      (object.invalidActivityAmountMicros !== undefined && object.invalidActivityAmountMicros !== null)
        ? Long.fromValue(object.invalidActivityAmountMicros)
        : undefined;
    message.invalidActivitySummaries =
      object.invalidActivitySummaries?.map((e) => Invoice_InvalidActivitySummary.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInvoice_InvalidActivitySummary(): Invoice_InvalidActivitySummary {
  return {
    originalMonthOfService: undefined,
    originalYearOfService: undefined,
    originalInvoiceId: undefined,
    originalAccountBudgetName: undefined,
    originalPurchaseOrderNumber: undefined,
    amountMicros: undefined,
  };
}

export const Invoice_InvalidActivitySummary: MessageFns<Invoice_InvalidActivitySummary> = {
  encode(message: Invoice_InvalidActivitySummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.originalMonthOfService !== undefined) {
      writer.uint32(8).int32(message.originalMonthOfService);
    }
    if (message.originalYearOfService !== undefined) {
      writer.uint32(18).string(message.originalYearOfService);
    }
    if (message.originalInvoiceId !== undefined) {
      writer.uint32(26).string(message.originalInvoiceId);
    }
    if (message.originalAccountBudgetName !== undefined) {
      writer.uint32(34).string(message.originalAccountBudgetName);
    }
    if (message.originalPurchaseOrderNumber !== undefined) {
      writer.uint32(42).string(message.originalPurchaseOrderNumber);
    }
    if (message.amountMicros !== undefined) {
      writer.uint32(48).int64(message.amountMicros.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Invoice_InvalidActivitySummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvoice_InvalidActivitySummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.originalMonthOfService = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.originalYearOfService = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.originalInvoiceId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.originalAccountBudgetName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.originalPurchaseOrderNumber = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.amountMicros = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Invoice_InvalidActivitySummary {
    return {
      originalMonthOfService: isSet(object.originalMonthOfService)
        ? monthOfYearEnum_MonthOfYearFromJSON(object.originalMonthOfService)
        : undefined,
      originalYearOfService: isSet(object.originalYearOfService)
        ? globalThis.String(object.originalYearOfService)
        : undefined,
      originalInvoiceId: isSet(object.originalInvoiceId) ? globalThis.String(object.originalInvoiceId) : undefined,
      originalAccountBudgetName: isSet(object.originalAccountBudgetName)
        ? globalThis.String(object.originalAccountBudgetName)
        : undefined,
      originalPurchaseOrderNumber: isSet(object.originalPurchaseOrderNumber)
        ? globalThis.String(object.originalPurchaseOrderNumber)
        : undefined,
      amountMicros: isSet(object.amountMicros) ? Long.fromValue(object.amountMicros) : undefined,
    };
  },

  toJSON(message: Invoice_InvalidActivitySummary): unknown {
    const obj: any = {};
    if (message.originalMonthOfService !== undefined) {
      obj.originalMonthOfService = monthOfYearEnum_MonthOfYearToJSON(message.originalMonthOfService);
    }
    if (message.originalYearOfService !== undefined) {
      obj.originalYearOfService = message.originalYearOfService;
    }
    if (message.originalInvoiceId !== undefined) {
      obj.originalInvoiceId = message.originalInvoiceId;
    }
    if (message.originalAccountBudgetName !== undefined) {
      obj.originalAccountBudgetName = message.originalAccountBudgetName;
    }
    if (message.originalPurchaseOrderNumber !== undefined) {
      obj.originalPurchaseOrderNumber = message.originalPurchaseOrderNumber;
    }
    if (message.amountMicros !== undefined) {
      obj.amountMicros = (message.amountMicros || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Invoice_InvalidActivitySummary>): Invoice_InvalidActivitySummary {
    return Invoice_InvalidActivitySummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Invoice_InvalidActivitySummary>): Invoice_InvalidActivitySummary {
    const message = createBaseInvoice_InvalidActivitySummary();
    message.originalMonthOfService = object.originalMonthOfService ?? undefined;
    message.originalYearOfService = object.originalYearOfService ?? undefined;
    message.originalInvoiceId = object.originalInvoiceId ?? undefined;
    message.originalAccountBudgetName = object.originalAccountBudgetName ?? undefined;
    message.originalPurchaseOrderNumber = object.originalPurchaseOrderNumber ?? undefined;
    message.amountMicros = (object.amountMicros !== undefined && object.amountMicros !== null)
      ? Long.fromValue(object.amountMicros)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
