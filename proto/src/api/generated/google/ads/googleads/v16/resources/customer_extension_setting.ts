// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/customer_extension_setting.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  ExtensionSettingDeviceEnum_ExtensionSettingDevice,
  extensionSettingDeviceEnum_ExtensionSettingDeviceFromJSON,
  extensionSettingDeviceEnum_ExtensionSettingDeviceToJSON,
} from "../enums/extension_setting_device.js";
import {
  ExtensionTypeEnum_ExtensionType,
  extensionTypeEnum_ExtensionTypeFromJSON,
  extensionTypeEnum_ExtensionTypeToJSON,
} from "../enums/extension_type.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/** A customer extension setting. */
export interface CustomerExtensionSetting {
  /**
   * Immutable. The resource name of the customer extension setting.
   * CustomerExtensionSetting resource names have the form:
   *
   * `customers/{customer_id}/customerExtensionSettings/{extension_type}`
   */
  resourceName: string;
  /** Immutable. The extension type of the customer extension setting. */
  extensionType: ExtensionTypeEnum_ExtensionType;
  /**
   * The resource names of the extension feed items to serve under the customer.
   * ExtensionFeedItem resource names have the form:
   *
   * `customers/{customer_id}/extensionFeedItems/{feed_item_id}`
   */
  extensionFeedItems: string[];
  /** The device for which the extensions will serve. Optional. */
  device: ExtensionSettingDeviceEnum_ExtensionSettingDevice;
}

function createBaseCustomerExtensionSetting(): CustomerExtensionSetting {
  return { resourceName: "", extensionType: 0, extensionFeedItems: [], device: 0 };
}

export const CustomerExtensionSetting: MessageFns<CustomerExtensionSetting> = {
  encode(message: CustomerExtensionSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.extensionType !== 0) {
      writer.uint32(16).int32(message.extensionType);
    }
    for (const v of message.extensionFeedItems) {
      writer.uint32(42).string(v!);
    }
    if (message.device !== 0) {
      writer.uint32(32).int32(message.device);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerExtensionSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerExtensionSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.extensionType = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.extensionFeedItems.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.device = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerExtensionSetting {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      extensionType: isSet(object.extensionType) ? extensionTypeEnum_ExtensionTypeFromJSON(object.extensionType) : 0,
      extensionFeedItems: globalThis.Array.isArray(object?.extensionFeedItems)
        ? object.extensionFeedItems.map((e: any) => globalThis.String(e))
        : [],
      device: isSet(object.device) ? extensionSettingDeviceEnum_ExtensionSettingDeviceFromJSON(object.device) : 0,
    };
  },

  toJSON(message: CustomerExtensionSetting): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.extensionType !== 0) {
      obj.extensionType = extensionTypeEnum_ExtensionTypeToJSON(message.extensionType);
    }
    if (message.extensionFeedItems?.length) {
      obj.extensionFeedItems = message.extensionFeedItems;
    }
    if (message.device !== 0) {
      obj.device = extensionSettingDeviceEnum_ExtensionSettingDeviceToJSON(message.device);
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerExtensionSetting>): CustomerExtensionSetting {
    return CustomerExtensionSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerExtensionSetting>): CustomerExtensionSetting {
    const message = createBaseCustomerExtensionSetting();
    message.resourceName = object.resourceName ?? "";
    message.extensionType = object.extensionType ?? 0;
    message.extensionFeedItems = object.extensionFeedItems?.map((e) => e) || [];
    message.device = object.device ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
