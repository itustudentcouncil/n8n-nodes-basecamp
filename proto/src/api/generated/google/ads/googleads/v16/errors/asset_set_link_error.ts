// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/asset_set_link_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible asset set link errors. */
export interface AssetSetLinkErrorEnum {
}

/** Enum describing possible asset set link errors. */
export enum AssetSetLinkErrorEnum_AssetSetLinkError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /**
   * INCOMPATIBLE_ADVERTISING_CHANNEL_TYPE - Advertising channel type cannot be attached to the asset set due to
   * channel-based restrictions.
   */
  INCOMPATIBLE_ADVERTISING_CHANNEL_TYPE = 2,
  /** DUPLICATE_FEED_LINK - For this asset set type, only one campaign to feed linkage is allowed. */
  DUPLICATE_FEED_LINK = 3,
  /** INCOMPATIBLE_ASSET_SET_TYPE_WITH_CAMPAIGN_TYPE - The asset set type and campaign type are incompatible. */
  INCOMPATIBLE_ASSET_SET_TYPE_WITH_CAMPAIGN_TYPE = 4,
  /** DUPLICATE_ASSET_SET_LINK - Cannot link duplicate asset sets to the same campaign. */
  DUPLICATE_ASSET_SET_LINK = 5,
  /**
   * ASSET_SET_LINK_CANNOT_BE_REMOVED - Cannot remove the asset set link. If a campaign is linked with only one
   * asset set and you attempt to unlink them, this error will be triggered.
   */
  ASSET_SET_LINK_CANNOT_BE_REMOVED = 6,
  UNRECOGNIZED = -1,
}

export function assetSetLinkErrorEnum_AssetSetLinkErrorFromJSON(object: any): AssetSetLinkErrorEnum_AssetSetLinkError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return AssetSetLinkErrorEnum_AssetSetLinkError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return AssetSetLinkErrorEnum_AssetSetLinkError.UNKNOWN;
    case 2:
    case "INCOMPATIBLE_ADVERTISING_CHANNEL_TYPE":
      return AssetSetLinkErrorEnum_AssetSetLinkError.INCOMPATIBLE_ADVERTISING_CHANNEL_TYPE;
    case 3:
    case "DUPLICATE_FEED_LINK":
      return AssetSetLinkErrorEnum_AssetSetLinkError.DUPLICATE_FEED_LINK;
    case 4:
    case "INCOMPATIBLE_ASSET_SET_TYPE_WITH_CAMPAIGN_TYPE":
      return AssetSetLinkErrorEnum_AssetSetLinkError.INCOMPATIBLE_ASSET_SET_TYPE_WITH_CAMPAIGN_TYPE;
    case 5:
    case "DUPLICATE_ASSET_SET_LINK":
      return AssetSetLinkErrorEnum_AssetSetLinkError.DUPLICATE_ASSET_SET_LINK;
    case 6:
    case "ASSET_SET_LINK_CANNOT_BE_REMOVED":
      return AssetSetLinkErrorEnum_AssetSetLinkError.ASSET_SET_LINK_CANNOT_BE_REMOVED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AssetSetLinkErrorEnum_AssetSetLinkError.UNRECOGNIZED;
  }
}

export function assetSetLinkErrorEnum_AssetSetLinkErrorToJSON(object: AssetSetLinkErrorEnum_AssetSetLinkError): string {
  switch (object) {
    case AssetSetLinkErrorEnum_AssetSetLinkError.UNSPECIFIED:
      return "UNSPECIFIED";
    case AssetSetLinkErrorEnum_AssetSetLinkError.UNKNOWN:
      return "UNKNOWN";
    case AssetSetLinkErrorEnum_AssetSetLinkError.INCOMPATIBLE_ADVERTISING_CHANNEL_TYPE:
      return "INCOMPATIBLE_ADVERTISING_CHANNEL_TYPE";
    case AssetSetLinkErrorEnum_AssetSetLinkError.DUPLICATE_FEED_LINK:
      return "DUPLICATE_FEED_LINK";
    case AssetSetLinkErrorEnum_AssetSetLinkError.INCOMPATIBLE_ASSET_SET_TYPE_WITH_CAMPAIGN_TYPE:
      return "INCOMPATIBLE_ASSET_SET_TYPE_WITH_CAMPAIGN_TYPE";
    case AssetSetLinkErrorEnum_AssetSetLinkError.DUPLICATE_ASSET_SET_LINK:
      return "DUPLICATE_ASSET_SET_LINK";
    case AssetSetLinkErrorEnum_AssetSetLinkError.ASSET_SET_LINK_CANNOT_BE_REMOVED:
      return "ASSET_SET_LINK_CANNOT_BE_REMOVED";
    case AssetSetLinkErrorEnum_AssetSetLinkError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAssetSetLinkErrorEnum(): AssetSetLinkErrorEnum {
  return {};
}

export const AssetSetLinkErrorEnum: MessageFns<AssetSetLinkErrorEnum> = {
  encode(_: AssetSetLinkErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetSetLinkErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetSetLinkErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AssetSetLinkErrorEnum {
    return {};
  },

  toJSON(_: AssetSetLinkErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AssetSetLinkErrorEnum>): AssetSetLinkErrorEnum {
    return AssetSetLinkErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AssetSetLinkErrorEnum>): AssetSetLinkErrorEnum {
    const message = createBaseAssetSetLinkErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
