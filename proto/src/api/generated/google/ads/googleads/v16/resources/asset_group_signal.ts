// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/asset_group_signal.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { AudienceInfo, SearchThemeInfo } from "../common/criteria.js";
import {
  AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus,
  assetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatusFromJSON,
  assetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatusToJSON,
} from "../enums/asset_group_signal_approval_status.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * AssetGroupSignal represents a signal in an asset group. The existence of a
 * signal tells the performance max campaign who's most likely to convert.
 * Performance Max uses the signal to look for new people with similar or
 * stronger intent to find conversions across Search, Display, Video, and more.
 */
export interface AssetGroupSignal {
  /**
   * Immutable. The resource name of the asset group signal.
   * Asset group signal resource name have the form:
   *
   * `customers/{customer_id}/assetGroupSignals/{asset_group_id}~{signal_id}`
   */
  resourceName: string;
  /** Immutable. The asset group which this asset group signal belongs to. */
  assetGroup: string;
  /**
   * Output only. Approval status is the output value for search theme signal
   * after Google ads policy review. When using Audience signal, this field is
   * not used and will be absent.
   */
  approvalStatus: AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus;
  /**
   * Output only. Computed for SearchTheme signals.
   * When using Audience signal, this field is not used and will be absent.
   */
  disapprovalReasons: string[];
  /**
   * Immutable. The audience signal to be used by the performance max
   * campaign.
   */
  audience?:
    | AudienceInfo
    | undefined;
  /**
   * Immutable. The search_theme signal to be used by the performance max
   * campaign.
   * Mutate errors of search_theme criterion includes
   * AssetGroupSignalError.UNSPECIFIED
   * AssetGroupSignalError.UNKNOWN
   * AssetGroupSignalError.TOO_MANY_WORDS
   * AssetGroupSignalError.SEARCH_THEME_POLICY_VIOLATION
   * FieldError.REQUIRED
   * StringFormatError.ILLEGAL_CHARS
   * StringLengthError.TOO_LONG
   * ResourceCountLimitExceededError.RESOURCE_LIMIT
   */
  searchTheme?: SearchThemeInfo | undefined;
}

function createBaseAssetGroupSignal(): AssetGroupSignal {
  return {
    resourceName: "",
    assetGroup: "",
    approvalStatus: 0,
    disapprovalReasons: [],
    audience: undefined,
    searchTheme: undefined,
  };
}

export const AssetGroupSignal: MessageFns<AssetGroupSignal> = {
  encode(message: AssetGroupSignal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.assetGroup !== "") {
      writer.uint32(18).string(message.assetGroup);
    }
    if (message.approvalStatus !== 0) {
      writer.uint32(48).int32(message.approvalStatus);
    }
    for (const v of message.disapprovalReasons) {
      writer.uint32(58).string(v!);
    }
    if (message.audience !== undefined) {
      AudienceInfo.encode(message.audience, writer.uint32(34).fork()).join();
    }
    if (message.searchTheme !== undefined) {
      SearchThemeInfo.encode(message.searchTheme, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetGroupSignal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetGroupSignal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.assetGroup = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.approvalStatus = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.disapprovalReasons.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.audience = AudienceInfo.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.searchTheme = SearchThemeInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssetGroupSignal {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      assetGroup: isSet(object.assetGroup) ? globalThis.String(object.assetGroup) : "",
      approvalStatus: isSet(object.approvalStatus)
        ? assetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatusFromJSON(object.approvalStatus)
        : 0,
      disapprovalReasons: globalThis.Array.isArray(object?.disapprovalReasons)
        ? object.disapprovalReasons.map((e: any) => globalThis.String(e))
        : [],
      audience: isSet(object.audience) ? AudienceInfo.fromJSON(object.audience) : undefined,
      searchTheme: isSet(object.searchTheme) ? SearchThemeInfo.fromJSON(object.searchTheme) : undefined,
    };
  },

  toJSON(message: AssetGroupSignal): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.assetGroup !== "") {
      obj.assetGroup = message.assetGroup;
    }
    if (message.approvalStatus !== 0) {
      obj.approvalStatus = assetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatusToJSON(
        message.approvalStatus,
      );
    }
    if (message.disapprovalReasons?.length) {
      obj.disapprovalReasons = message.disapprovalReasons;
    }
    if (message.audience !== undefined) {
      obj.audience = AudienceInfo.toJSON(message.audience);
    }
    if (message.searchTheme !== undefined) {
      obj.searchTheme = SearchThemeInfo.toJSON(message.searchTheme);
    }
    return obj;
  },

  create(base?: DeepPartial<AssetGroupSignal>): AssetGroupSignal {
    return AssetGroupSignal.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AssetGroupSignal>): AssetGroupSignal {
    const message = createBaseAssetGroupSignal();
    message.resourceName = object.resourceName ?? "";
    message.assetGroup = object.assetGroup ?? "";
    message.approvalStatus = object.approvalStatus ?? 0;
    message.disapprovalReasons = object.disapprovalReasons?.map((e) => e) || [];
    message.audience = (object.audience !== undefined && object.audience !== null)
      ? AudienceInfo.fromPartial(object.audience)
      : undefined;
    message.searchTheme = (object.searchTheme !== undefined && object.searchTheme !== null)
      ? SearchThemeInfo.fromPartial(object.searchTheme)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
