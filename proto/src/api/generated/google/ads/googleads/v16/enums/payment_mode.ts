// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/enums/payment_mode.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.enums";

/** Container for enum describing possible payment modes. */
export interface PaymentModeEnum {
}

/** Enum describing possible payment modes. */
export enum PaymentModeEnum_PaymentMode {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /** CLICKS - Pay per interaction. */
  CLICKS = 4,
  /**
   * CONVERSION_VALUE - Pay per conversion value. This mode is only supported by campaigns with
   * AdvertisingChannelType.HOTEL, BiddingStrategyType.COMMISSION, and
   * BudgetType.STANDARD.
   */
  CONVERSION_VALUE = 5,
  /**
   * CONVERSIONS - Pay per conversion. This mode is only supported by campaigns with
   * AdvertisingChannelType.DISPLAY (excluding
   * AdvertisingChannelSubType.DISPLAY_GMAIL), BiddingStrategyType.TARGET_CPA,
   * and BudgetType.FIXED_CPA. The customer must also be eligible for this
   * mode. See Customer.eligibility_failure_reasons for details.
   */
  CONVERSIONS = 6,
  /**
   * GUEST_STAY - Pay per guest stay value. This mode is only supported by campaigns with
   * AdvertisingChannelType.HOTEL, BiddingStrategyType.COMMISSION, and
   * BudgetType.STANDARD.
   */
  GUEST_STAY = 7,
  UNRECOGNIZED = -1,
}

export function paymentModeEnum_PaymentModeFromJSON(object: any): PaymentModeEnum_PaymentMode {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return PaymentModeEnum_PaymentMode.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return PaymentModeEnum_PaymentMode.UNKNOWN;
    case 4:
    case "CLICKS":
      return PaymentModeEnum_PaymentMode.CLICKS;
    case 5:
    case "CONVERSION_VALUE":
      return PaymentModeEnum_PaymentMode.CONVERSION_VALUE;
    case 6:
    case "CONVERSIONS":
      return PaymentModeEnum_PaymentMode.CONVERSIONS;
    case 7:
    case "GUEST_STAY":
      return PaymentModeEnum_PaymentMode.GUEST_STAY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentModeEnum_PaymentMode.UNRECOGNIZED;
  }
}

export function paymentModeEnum_PaymentModeToJSON(object: PaymentModeEnum_PaymentMode): string {
  switch (object) {
    case PaymentModeEnum_PaymentMode.UNSPECIFIED:
      return "UNSPECIFIED";
    case PaymentModeEnum_PaymentMode.UNKNOWN:
      return "UNKNOWN";
    case PaymentModeEnum_PaymentMode.CLICKS:
      return "CLICKS";
    case PaymentModeEnum_PaymentMode.CONVERSION_VALUE:
      return "CONVERSION_VALUE";
    case PaymentModeEnum_PaymentMode.CONVERSIONS:
      return "CONVERSIONS";
    case PaymentModeEnum_PaymentMode.GUEST_STAY:
      return "GUEST_STAY";
    case PaymentModeEnum_PaymentMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBasePaymentModeEnum(): PaymentModeEnum {
  return {};
}

export const PaymentModeEnum: MessageFns<PaymentModeEnum> = {
  encode(_: PaymentModeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentModeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentModeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PaymentModeEnum {
    return {};
  },

  toJSON(_: PaymentModeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<PaymentModeEnum>): PaymentModeEnum {
    return PaymentModeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<PaymentModeEnum>): PaymentModeEnum {
    const message = createBasePaymentModeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
