// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/keyword_plan_ad_group_keyword_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/**
 * Container for enum describing possible errors from applying an ad group
 * keyword or a campaign keyword from a keyword plan.
 */
export interface KeywordPlanAdGroupKeywordErrorEnum {
}

/**
 * Enum describing possible errors from applying a keyword plan ad group
 * keyword or keyword plan campaign keyword.
 */
export enum KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** INVALID_KEYWORD_MATCH_TYPE - A keyword or negative keyword has invalid match type. */
  INVALID_KEYWORD_MATCH_TYPE = 2,
  /**
   * DUPLICATE_KEYWORD - A keyword or negative keyword with same text and match type already
   * exists.
   */
  DUPLICATE_KEYWORD = 3,
  /** KEYWORD_TEXT_TOO_LONG - Keyword or negative keyword text exceeds the allowed limit. */
  KEYWORD_TEXT_TOO_LONG = 4,
  /** KEYWORD_HAS_INVALID_CHARS - Keyword or negative keyword text has invalid characters or symbols. */
  KEYWORD_HAS_INVALID_CHARS = 5,
  /** KEYWORD_HAS_TOO_MANY_WORDS - Keyword or negative keyword text has too many words. */
  KEYWORD_HAS_TOO_MANY_WORDS = 6,
  /** INVALID_KEYWORD_TEXT - Keyword or negative keyword has invalid text. */
  INVALID_KEYWORD_TEXT = 7,
  /** NEGATIVE_KEYWORD_HAS_CPC_BID - Cpc Bid set for negative keyword. */
  NEGATIVE_KEYWORD_HAS_CPC_BID = 8,
  /** NEW_BMM_KEYWORDS_NOT_ALLOWED - New broad match modifier (BMM) KpAdGroupKeywords are not allowed. */
  NEW_BMM_KEYWORDS_NOT_ALLOWED = 9,
  UNRECOGNIZED = -1,
}

export function keywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordErrorFromJSON(
  object: any,
): KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.UNKNOWN;
    case 2:
    case "INVALID_KEYWORD_MATCH_TYPE":
      return KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.INVALID_KEYWORD_MATCH_TYPE;
    case 3:
    case "DUPLICATE_KEYWORD":
      return KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.DUPLICATE_KEYWORD;
    case 4:
    case "KEYWORD_TEXT_TOO_LONG":
      return KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.KEYWORD_TEXT_TOO_LONG;
    case 5:
    case "KEYWORD_HAS_INVALID_CHARS":
      return KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.KEYWORD_HAS_INVALID_CHARS;
    case 6:
    case "KEYWORD_HAS_TOO_MANY_WORDS":
      return KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.KEYWORD_HAS_TOO_MANY_WORDS;
    case 7:
    case "INVALID_KEYWORD_TEXT":
      return KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.INVALID_KEYWORD_TEXT;
    case 8:
    case "NEGATIVE_KEYWORD_HAS_CPC_BID":
      return KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.NEGATIVE_KEYWORD_HAS_CPC_BID;
    case 9:
    case "NEW_BMM_KEYWORDS_NOT_ALLOWED":
      return KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.NEW_BMM_KEYWORDS_NOT_ALLOWED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.UNRECOGNIZED;
  }
}

export function keywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordErrorToJSON(
  object: KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError,
): string {
  switch (object) {
    case KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.UNSPECIFIED:
      return "UNSPECIFIED";
    case KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.UNKNOWN:
      return "UNKNOWN";
    case KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.INVALID_KEYWORD_MATCH_TYPE:
      return "INVALID_KEYWORD_MATCH_TYPE";
    case KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.DUPLICATE_KEYWORD:
      return "DUPLICATE_KEYWORD";
    case KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.KEYWORD_TEXT_TOO_LONG:
      return "KEYWORD_TEXT_TOO_LONG";
    case KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.KEYWORD_HAS_INVALID_CHARS:
      return "KEYWORD_HAS_INVALID_CHARS";
    case KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.KEYWORD_HAS_TOO_MANY_WORDS:
      return "KEYWORD_HAS_TOO_MANY_WORDS";
    case KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.INVALID_KEYWORD_TEXT:
      return "INVALID_KEYWORD_TEXT";
    case KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.NEGATIVE_KEYWORD_HAS_CPC_BID:
      return "NEGATIVE_KEYWORD_HAS_CPC_BID";
    case KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.NEW_BMM_KEYWORDS_NOT_ALLOWED:
      return "NEW_BMM_KEYWORDS_NOT_ALLOWED";
    case KeywordPlanAdGroupKeywordErrorEnum_KeywordPlanAdGroupKeywordError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseKeywordPlanAdGroupKeywordErrorEnum(): KeywordPlanAdGroupKeywordErrorEnum {
  return {};
}

export const KeywordPlanAdGroupKeywordErrorEnum: MessageFns<KeywordPlanAdGroupKeywordErrorEnum> = {
  encode(_: KeywordPlanAdGroupKeywordErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeywordPlanAdGroupKeywordErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeywordPlanAdGroupKeywordErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): KeywordPlanAdGroupKeywordErrorEnum {
    return {};
  },

  toJSON(_: KeywordPlanAdGroupKeywordErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<KeywordPlanAdGroupKeywordErrorEnum>): KeywordPlanAdGroupKeywordErrorEnum {
    return KeywordPlanAdGroupKeywordErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<KeywordPlanAdGroupKeywordErrorEnum>): KeywordPlanAdGroupKeywordErrorEnum {
    const message = createBaseKeywordPlanAdGroupKeywordErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
