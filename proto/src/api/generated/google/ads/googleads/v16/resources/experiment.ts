// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/experiment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { MetricGoal } from "../common/metric_goal.js";
import {
  AsyncActionStatusEnum_AsyncActionStatus,
  asyncActionStatusEnum_AsyncActionStatusFromJSON,
  asyncActionStatusEnum_AsyncActionStatusToJSON,
} from "../enums/async_action_status.js";
import {
  ExperimentStatusEnum_ExperimentStatus,
  experimentStatusEnum_ExperimentStatusFromJSON,
  experimentStatusEnum_ExperimentStatusToJSON,
} from "../enums/experiment_status.js";
import {
  ExperimentTypeEnum_ExperimentType,
  experimentTypeEnum_ExperimentTypeFromJSON,
  experimentTypeEnum_ExperimentTypeToJSON,
} from "../enums/experiment_type.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * A Google ads experiment for users to experiment changes on multiple
 * campaigns, compare the performance, and apply the effective changes.
 */
export interface Experiment {
  /**
   * Immutable. The resource name of the experiment.
   * Experiment resource names have the form:
   *
   * `customers/{customer_id}/experiments/{experiment_id}`
   */
  resourceName: string;
  /** Output only. The ID of the experiment. Read only. */
  experimentId?:
    | Long
    | undefined;
  /**
   * Required. The name of the experiment. It must have a minimum length of 1
   * and maximum length of 1024. It must be unique under a customer.
   */
  name: string;
  /**
   * The description of the experiment. It must have a minimum length of 1 and
   * maximum length of 2048.
   */
  description: string;
  /**
   * For system managed experiments, the advertiser must provide a suffix during
   * construction, in the setup stage before moving to initiated. The suffix
   * will be appended to the in-design and experiment campaign names so that the
   * name is base campaign name + suffix.
   */
  suffix: string;
  /** Required. The product/feature that uses this experiment. */
  type: ExperimentTypeEnum_ExperimentType;
  /** The Advertiser-chosen status of this experiment. */
  status: ExperimentStatusEnum_ExperimentStatus;
  /**
   * Date when the experiment starts. By default, the experiment starts
   * now or on the campaign's start date, whichever is later. If this field is
   * set, then the experiment starts at the beginning of the specified date in
   * the customer's time zone.
   *
   * Format: YYYY-MM-DD
   * Example: 2019-03-14
   */
  startDate?:
    | string
    | undefined;
  /**
   * Date when the experiment ends. By default, the experiment ends on
   * the campaign's end date. If this field is set, then the experiment ends at
   * the end of the specified date in the customer's time zone.
   *
   * Format: YYYY-MM-DD
   * Example: 2019-04-18
   */
  endDate?:
    | string
    | undefined;
  /** The goals of this experiment. */
  goals: MetricGoal[];
  /**
   * Output only. The resource name of the long-running operation that can be
   * used to poll for completion of experiment schedule or promote. The most
   * recent long running operation is returned.
   */
  longRunningOperation?:
    | string
    | undefined;
  /** Output only. The status of the experiment promotion process. */
  promoteStatus: AsyncActionStatusEnum_AsyncActionStatus;
  /**
   * Immutable. Set to true if changes to base campaigns should be synced to the
   * trial campaigns. Any changes made directly to trial campaigns will be
   * preserved. This field can only be set when the experiment is being created.
   */
  syncEnabled?: boolean | undefined;
}

function createBaseExperiment(): Experiment {
  return {
    resourceName: "",
    experimentId: undefined,
    name: "",
    description: "",
    suffix: "",
    type: 0,
    status: 0,
    startDate: undefined,
    endDate: undefined,
    goals: [],
    longRunningOperation: undefined,
    promoteStatus: 0,
    syncEnabled: undefined,
  };
}

export const Experiment: MessageFns<Experiment> = {
  encode(message: Experiment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.experimentId !== undefined) {
      writer.uint32(72).int64(message.experimentId.toString());
    }
    if (message.name !== "") {
      writer.uint32(82).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(90).string(message.description);
    }
    if (message.suffix !== "") {
      writer.uint32(98).string(message.suffix);
    }
    if (message.type !== 0) {
      writer.uint32(104).int32(message.type);
    }
    if (message.status !== 0) {
      writer.uint32(112).int32(message.status);
    }
    if (message.startDate !== undefined) {
      writer.uint32(122).string(message.startDate);
    }
    if (message.endDate !== undefined) {
      writer.uint32(130).string(message.endDate);
    }
    for (const v of message.goals) {
      MetricGoal.encode(v!, writer.uint32(138).fork()).join();
    }
    if (message.longRunningOperation !== undefined) {
      writer.uint32(146).string(message.longRunningOperation);
    }
    if (message.promoteStatus !== 0) {
      writer.uint32(152).int32(message.promoteStatus);
    }
    if (message.syncEnabled !== undefined) {
      writer.uint32(160).bool(message.syncEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Experiment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperiment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.experimentId = Long.fromString(reader.int64().toString());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.name = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.description = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.suffix = reader.string();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.startDate = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.endDate = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.goals.push(MetricGoal.decode(reader, reader.uint32()));
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.longRunningOperation = reader.string();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.promoteStatus = reader.int32() as any;
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.syncEnabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Experiment {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      experimentId: isSet(object.experimentId) ? Long.fromValue(object.experimentId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      suffix: isSet(object.suffix) ? globalThis.String(object.suffix) : "",
      type: isSet(object.type) ? experimentTypeEnum_ExperimentTypeFromJSON(object.type) : 0,
      status: isSet(object.status) ? experimentStatusEnum_ExperimentStatusFromJSON(object.status) : 0,
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : undefined,
      goals: globalThis.Array.isArray(object?.goals) ? object.goals.map((e: any) => MetricGoal.fromJSON(e)) : [],
      longRunningOperation: isSet(object.longRunningOperation)
        ? globalThis.String(object.longRunningOperation)
        : undefined,
      promoteStatus: isSet(object.promoteStatus)
        ? asyncActionStatusEnum_AsyncActionStatusFromJSON(object.promoteStatus)
        : 0,
      syncEnabled: isSet(object.syncEnabled) ? globalThis.Boolean(object.syncEnabled) : undefined,
    };
  },

  toJSON(message: Experiment): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.experimentId !== undefined) {
      obj.experimentId = (message.experimentId || Long.ZERO).toString();
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.suffix !== "") {
      obj.suffix = message.suffix;
    }
    if (message.type !== 0) {
      obj.type = experimentTypeEnum_ExperimentTypeToJSON(message.type);
    }
    if (message.status !== 0) {
      obj.status = experimentStatusEnum_ExperimentStatusToJSON(message.status);
    }
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate;
    }
    if (message.goals?.length) {
      obj.goals = message.goals.map((e) => MetricGoal.toJSON(e));
    }
    if (message.longRunningOperation !== undefined) {
      obj.longRunningOperation = message.longRunningOperation;
    }
    if (message.promoteStatus !== 0) {
      obj.promoteStatus = asyncActionStatusEnum_AsyncActionStatusToJSON(message.promoteStatus);
    }
    if (message.syncEnabled !== undefined) {
      obj.syncEnabled = message.syncEnabled;
    }
    return obj;
  },

  create(base?: DeepPartial<Experiment>): Experiment {
    return Experiment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Experiment>): Experiment {
    const message = createBaseExperiment();
    message.resourceName = object.resourceName ?? "";
    message.experimentId = (object.experimentId !== undefined && object.experimentId !== null)
      ? Long.fromValue(object.experimentId)
      : undefined;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.suffix = object.suffix ?? "";
    message.type = object.type ?? 0;
    message.status = object.status ?? 0;
    message.startDate = object.startDate ?? undefined;
    message.endDate = object.endDate ?? undefined;
    message.goals = object.goals?.map((e) => MetricGoal.fromPartial(e)) || [];
    message.longRunningOperation = object.longRunningOperation ?? undefined;
    message.promoteStatus = object.promoteStatus ?? 0;
    message.syncEnabled = object.syncEnabled ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
