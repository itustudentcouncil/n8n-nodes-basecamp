// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/media_upload_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible media uploading errors. */
export interface MediaUploadErrorEnum {
}

/** Enum describing possible media uploading errors. */
export enum MediaUploadErrorEnum_MediaUploadError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** FILE_TOO_BIG - The uploaded file is too big. */
  FILE_TOO_BIG = 2,
  /** UNPARSEABLE_IMAGE - Image data is unparseable. */
  UNPARSEABLE_IMAGE = 3,
  /** ANIMATED_IMAGE_NOT_ALLOWED - Animated images are not allowed. */
  ANIMATED_IMAGE_NOT_ALLOWED = 4,
  /** FORMAT_NOT_ALLOWED - The image or media bundle format is not allowed. */
  FORMAT_NOT_ALLOWED = 5,
  /** EXTERNAL_URL_NOT_ALLOWED - Cannot reference URL external to the media bundle. */
  EXTERNAL_URL_NOT_ALLOWED = 6,
  /** INVALID_URL_REFERENCE - HTML5 ad is trying to reference an asset not in .ZIP file. */
  INVALID_URL_REFERENCE = 7,
  /** MISSING_PRIMARY_MEDIA_BUNDLE_ENTRY - The media bundle contains no primary entry. */
  MISSING_PRIMARY_MEDIA_BUNDLE_ENTRY = 8,
  /** ANIMATED_VISUAL_EFFECT - Animation has disallowed visual effects. */
  ANIMATED_VISUAL_EFFECT = 9,
  /** ANIMATION_TOO_LONG - Animation longer than the allowed 30 second limit. */
  ANIMATION_TOO_LONG = 10,
  /**
   * ASPECT_RATIO_NOT_ALLOWED - The aspect ratio of the image does not match the expected aspect ratios
   * provided in the asset spec.
   */
  ASPECT_RATIO_NOT_ALLOWED = 11,
  /** AUDIO_NOT_ALLOWED_IN_MEDIA_BUNDLE - Audio files are not allowed in bundle. */
  AUDIO_NOT_ALLOWED_IN_MEDIA_BUNDLE = 12,
  /** CMYK_JPEG_NOT_ALLOWED - CMYK jpegs are not supported. */
  CMYK_JPEG_NOT_ALLOWED = 13,
  /** FLASH_NOT_ALLOWED - Flash movies are not allowed. */
  FLASH_NOT_ALLOWED = 14,
  /** FRAME_RATE_TOO_HIGH - The frame rate of the video is higher than the allowed 5fps. */
  FRAME_RATE_TOO_HIGH = 15,
  /** GOOGLE_WEB_DESIGNER_ZIP_FILE_NOT_PUBLISHED - ZIP file from Google Web Designer is not published. */
  GOOGLE_WEB_DESIGNER_ZIP_FILE_NOT_PUBLISHED = 16,
  /**
   * IMAGE_CONSTRAINTS_VIOLATED - Image constraints are violated, but more details (like
   * DIMENSIONS_NOT_ALLOWED or ASPECT_RATIO_NOT_ALLOWED) can not be provided.
   * This happens when asset spec contains more than one constraint and
   * criteria of different constraints are violated.
   */
  IMAGE_CONSTRAINTS_VIOLATED = 17,
  /** INVALID_MEDIA_BUNDLE - Media bundle data is unrecognizable. */
  INVALID_MEDIA_BUNDLE = 18,
  /** INVALID_MEDIA_BUNDLE_ENTRY - There was a problem with one or more of the media bundle entries. */
  INVALID_MEDIA_BUNDLE_ENTRY = 19,
  /** INVALID_MIME_TYPE - The asset has an invalid mime type. */
  INVALID_MIME_TYPE = 20,
  /** INVALID_PATH - The media bundle contains an invalid asset path. */
  INVALID_PATH = 21,
  /** LAYOUT_PROBLEM - Image has layout problem. */
  LAYOUT_PROBLEM = 22,
  /** MALFORMED_URL - An asset had a URL reference that is malformed per RFC 1738 convention. */
  MALFORMED_URL = 23,
  /** MEDIA_BUNDLE_NOT_ALLOWED - The uploaded media bundle format is not allowed. */
  MEDIA_BUNDLE_NOT_ALLOWED = 24,
  /**
   * MEDIA_BUNDLE_NOT_COMPATIBLE_TO_PRODUCT_TYPE - The media bundle is not compatible with the asset spec product type.
   * (For example, Gmail, dynamic remarketing, etc.)
   */
  MEDIA_BUNDLE_NOT_COMPATIBLE_TO_PRODUCT_TYPE = 25,
  /**
   * MEDIA_BUNDLE_REJECTED_BY_MULTIPLE_ASSET_SPECS - A bundle being uploaded that is incompatible with multiple assets for
   * different reasons.
   */
  MEDIA_BUNDLE_REJECTED_BY_MULTIPLE_ASSET_SPECS = 26,
  /** TOO_MANY_FILES_IN_MEDIA_BUNDLE - The media bundle contains too many files. */
  TOO_MANY_FILES_IN_MEDIA_BUNDLE = 27,
  /** UNSUPPORTED_GOOGLE_WEB_DESIGNER_ENVIRONMENT - Google Web Designer not created for "Google Ads" environment. */
  UNSUPPORTED_GOOGLE_WEB_DESIGNER_ENVIRONMENT = 28,
  /** UNSUPPORTED_HTML5_FEATURE - Unsupported HTML5 feature in HTML5 asset. */
  UNSUPPORTED_HTML5_FEATURE = 29,
  /** URL_IN_MEDIA_BUNDLE_NOT_SSL_COMPLIANT - URL in HTML5 entry is not SSL compliant. */
  URL_IN_MEDIA_BUNDLE_NOT_SSL_COMPLIANT = 30,
  /** VIDEO_FILE_NAME_TOO_LONG - Video file name is longer than the 50 allowed characters. */
  VIDEO_FILE_NAME_TOO_LONG = 31,
  /** VIDEO_MULTIPLE_FILES_WITH_SAME_NAME - Multiple videos with same name in a bundle. */
  VIDEO_MULTIPLE_FILES_WITH_SAME_NAME = 32,
  /** VIDEO_NOT_ALLOWED_IN_MEDIA_BUNDLE - Videos are not allowed in media bundle. */
  VIDEO_NOT_ALLOWED_IN_MEDIA_BUNDLE = 33,
  /** CANNOT_UPLOAD_MEDIA_TYPE_THROUGH_API - This type of media cannot be uploaded through the Google Ads API. */
  CANNOT_UPLOAD_MEDIA_TYPE_THROUGH_API = 34,
  /** DIMENSIONS_NOT_ALLOWED - The dimensions of the image are not allowed. */
  DIMENSIONS_NOT_ALLOWED = 35,
  UNRECOGNIZED = -1,
}

export function mediaUploadErrorEnum_MediaUploadErrorFromJSON(object: any): MediaUploadErrorEnum_MediaUploadError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return MediaUploadErrorEnum_MediaUploadError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return MediaUploadErrorEnum_MediaUploadError.UNKNOWN;
    case 2:
    case "FILE_TOO_BIG":
      return MediaUploadErrorEnum_MediaUploadError.FILE_TOO_BIG;
    case 3:
    case "UNPARSEABLE_IMAGE":
      return MediaUploadErrorEnum_MediaUploadError.UNPARSEABLE_IMAGE;
    case 4:
    case "ANIMATED_IMAGE_NOT_ALLOWED":
      return MediaUploadErrorEnum_MediaUploadError.ANIMATED_IMAGE_NOT_ALLOWED;
    case 5:
    case "FORMAT_NOT_ALLOWED":
      return MediaUploadErrorEnum_MediaUploadError.FORMAT_NOT_ALLOWED;
    case 6:
    case "EXTERNAL_URL_NOT_ALLOWED":
      return MediaUploadErrorEnum_MediaUploadError.EXTERNAL_URL_NOT_ALLOWED;
    case 7:
    case "INVALID_URL_REFERENCE":
      return MediaUploadErrorEnum_MediaUploadError.INVALID_URL_REFERENCE;
    case 8:
    case "MISSING_PRIMARY_MEDIA_BUNDLE_ENTRY":
      return MediaUploadErrorEnum_MediaUploadError.MISSING_PRIMARY_MEDIA_BUNDLE_ENTRY;
    case 9:
    case "ANIMATED_VISUAL_EFFECT":
      return MediaUploadErrorEnum_MediaUploadError.ANIMATED_VISUAL_EFFECT;
    case 10:
    case "ANIMATION_TOO_LONG":
      return MediaUploadErrorEnum_MediaUploadError.ANIMATION_TOO_LONG;
    case 11:
    case "ASPECT_RATIO_NOT_ALLOWED":
      return MediaUploadErrorEnum_MediaUploadError.ASPECT_RATIO_NOT_ALLOWED;
    case 12:
    case "AUDIO_NOT_ALLOWED_IN_MEDIA_BUNDLE":
      return MediaUploadErrorEnum_MediaUploadError.AUDIO_NOT_ALLOWED_IN_MEDIA_BUNDLE;
    case 13:
    case "CMYK_JPEG_NOT_ALLOWED":
      return MediaUploadErrorEnum_MediaUploadError.CMYK_JPEG_NOT_ALLOWED;
    case 14:
    case "FLASH_NOT_ALLOWED":
      return MediaUploadErrorEnum_MediaUploadError.FLASH_NOT_ALLOWED;
    case 15:
    case "FRAME_RATE_TOO_HIGH":
      return MediaUploadErrorEnum_MediaUploadError.FRAME_RATE_TOO_HIGH;
    case 16:
    case "GOOGLE_WEB_DESIGNER_ZIP_FILE_NOT_PUBLISHED":
      return MediaUploadErrorEnum_MediaUploadError.GOOGLE_WEB_DESIGNER_ZIP_FILE_NOT_PUBLISHED;
    case 17:
    case "IMAGE_CONSTRAINTS_VIOLATED":
      return MediaUploadErrorEnum_MediaUploadError.IMAGE_CONSTRAINTS_VIOLATED;
    case 18:
    case "INVALID_MEDIA_BUNDLE":
      return MediaUploadErrorEnum_MediaUploadError.INVALID_MEDIA_BUNDLE;
    case 19:
    case "INVALID_MEDIA_BUNDLE_ENTRY":
      return MediaUploadErrorEnum_MediaUploadError.INVALID_MEDIA_BUNDLE_ENTRY;
    case 20:
    case "INVALID_MIME_TYPE":
      return MediaUploadErrorEnum_MediaUploadError.INVALID_MIME_TYPE;
    case 21:
    case "INVALID_PATH":
      return MediaUploadErrorEnum_MediaUploadError.INVALID_PATH;
    case 22:
    case "LAYOUT_PROBLEM":
      return MediaUploadErrorEnum_MediaUploadError.LAYOUT_PROBLEM;
    case 23:
    case "MALFORMED_URL":
      return MediaUploadErrorEnum_MediaUploadError.MALFORMED_URL;
    case 24:
    case "MEDIA_BUNDLE_NOT_ALLOWED":
      return MediaUploadErrorEnum_MediaUploadError.MEDIA_BUNDLE_NOT_ALLOWED;
    case 25:
    case "MEDIA_BUNDLE_NOT_COMPATIBLE_TO_PRODUCT_TYPE":
      return MediaUploadErrorEnum_MediaUploadError.MEDIA_BUNDLE_NOT_COMPATIBLE_TO_PRODUCT_TYPE;
    case 26:
    case "MEDIA_BUNDLE_REJECTED_BY_MULTIPLE_ASSET_SPECS":
      return MediaUploadErrorEnum_MediaUploadError.MEDIA_BUNDLE_REJECTED_BY_MULTIPLE_ASSET_SPECS;
    case 27:
    case "TOO_MANY_FILES_IN_MEDIA_BUNDLE":
      return MediaUploadErrorEnum_MediaUploadError.TOO_MANY_FILES_IN_MEDIA_BUNDLE;
    case 28:
    case "UNSUPPORTED_GOOGLE_WEB_DESIGNER_ENVIRONMENT":
      return MediaUploadErrorEnum_MediaUploadError.UNSUPPORTED_GOOGLE_WEB_DESIGNER_ENVIRONMENT;
    case 29:
    case "UNSUPPORTED_HTML5_FEATURE":
      return MediaUploadErrorEnum_MediaUploadError.UNSUPPORTED_HTML5_FEATURE;
    case 30:
    case "URL_IN_MEDIA_BUNDLE_NOT_SSL_COMPLIANT":
      return MediaUploadErrorEnum_MediaUploadError.URL_IN_MEDIA_BUNDLE_NOT_SSL_COMPLIANT;
    case 31:
    case "VIDEO_FILE_NAME_TOO_LONG":
      return MediaUploadErrorEnum_MediaUploadError.VIDEO_FILE_NAME_TOO_LONG;
    case 32:
    case "VIDEO_MULTIPLE_FILES_WITH_SAME_NAME":
      return MediaUploadErrorEnum_MediaUploadError.VIDEO_MULTIPLE_FILES_WITH_SAME_NAME;
    case 33:
    case "VIDEO_NOT_ALLOWED_IN_MEDIA_BUNDLE":
      return MediaUploadErrorEnum_MediaUploadError.VIDEO_NOT_ALLOWED_IN_MEDIA_BUNDLE;
    case 34:
    case "CANNOT_UPLOAD_MEDIA_TYPE_THROUGH_API":
      return MediaUploadErrorEnum_MediaUploadError.CANNOT_UPLOAD_MEDIA_TYPE_THROUGH_API;
    case 35:
    case "DIMENSIONS_NOT_ALLOWED":
      return MediaUploadErrorEnum_MediaUploadError.DIMENSIONS_NOT_ALLOWED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MediaUploadErrorEnum_MediaUploadError.UNRECOGNIZED;
  }
}

export function mediaUploadErrorEnum_MediaUploadErrorToJSON(object: MediaUploadErrorEnum_MediaUploadError): string {
  switch (object) {
    case MediaUploadErrorEnum_MediaUploadError.UNSPECIFIED:
      return "UNSPECIFIED";
    case MediaUploadErrorEnum_MediaUploadError.UNKNOWN:
      return "UNKNOWN";
    case MediaUploadErrorEnum_MediaUploadError.FILE_TOO_BIG:
      return "FILE_TOO_BIG";
    case MediaUploadErrorEnum_MediaUploadError.UNPARSEABLE_IMAGE:
      return "UNPARSEABLE_IMAGE";
    case MediaUploadErrorEnum_MediaUploadError.ANIMATED_IMAGE_NOT_ALLOWED:
      return "ANIMATED_IMAGE_NOT_ALLOWED";
    case MediaUploadErrorEnum_MediaUploadError.FORMAT_NOT_ALLOWED:
      return "FORMAT_NOT_ALLOWED";
    case MediaUploadErrorEnum_MediaUploadError.EXTERNAL_URL_NOT_ALLOWED:
      return "EXTERNAL_URL_NOT_ALLOWED";
    case MediaUploadErrorEnum_MediaUploadError.INVALID_URL_REFERENCE:
      return "INVALID_URL_REFERENCE";
    case MediaUploadErrorEnum_MediaUploadError.MISSING_PRIMARY_MEDIA_BUNDLE_ENTRY:
      return "MISSING_PRIMARY_MEDIA_BUNDLE_ENTRY";
    case MediaUploadErrorEnum_MediaUploadError.ANIMATED_VISUAL_EFFECT:
      return "ANIMATED_VISUAL_EFFECT";
    case MediaUploadErrorEnum_MediaUploadError.ANIMATION_TOO_LONG:
      return "ANIMATION_TOO_LONG";
    case MediaUploadErrorEnum_MediaUploadError.ASPECT_RATIO_NOT_ALLOWED:
      return "ASPECT_RATIO_NOT_ALLOWED";
    case MediaUploadErrorEnum_MediaUploadError.AUDIO_NOT_ALLOWED_IN_MEDIA_BUNDLE:
      return "AUDIO_NOT_ALLOWED_IN_MEDIA_BUNDLE";
    case MediaUploadErrorEnum_MediaUploadError.CMYK_JPEG_NOT_ALLOWED:
      return "CMYK_JPEG_NOT_ALLOWED";
    case MediaUploadErrorEnum_MediaUploadError.FLASH_NOT_ALLOWED:
      return "FLASH_NOT_ALLOWED";
    case MediaUploadErrorEnum_MediaUploadError.FRAME_RATE_TOO_HIGH:
      return "FRAME_RATE_TOO_HIGH";
    case MediaUploadErrorEnum_MediaUploadError.GOOGLE_WEB_DESIGNER_ZIP_FILE_NOT_PUBLISHED:
      return "GOOGLE_WEB_DESIGNER_ZIP_FILE_NOT_PUBLISHED";
    case MediaUploadErrorEnum_MediaUploadError.IMAGE_CONSTRAINTS_VIOLATED:
      return "IMAGE_CONSTRAINTS_VIOLATED";
    case MediaUploadErrorEnum_MediaUploadError.INVALID_MEDIA_BUNDLE:
      return "INVALID_MEDIA_BUNDLE";
    case MediaUploadErrorEnum_MediaUploadError.INVALID_MEDIA_BUNDLE_ENTRY:
      return "INVALID_MEDIA_BUNDLE_ENTRY";
    case MediaUploadErrorEnum_MediaUploadError.INVALID_MIME_TYPE:
      return "INVALID_MIME_TYPE";
    case MediaUploadErrorEnum_MediaUploadError.INVALID_PATH:
      return "INVALID_PATH";
    case MediaUploadErrorEnum_MediaUploadError.LAYOUT_PROBLEM:
      return "LAYOUT_PROBLEM";
    case MediaUploadErrorEnum_MediaUploadError.MALFORMED_URL:
      return "MALFORMED_URL";
    case MediaUploadErrorEnum_MediaUploadError.MEDIA_BUNDLE_NOT_ALLOWED:
      return "MEDIA_BUNDLE_NOT_ALLOWED";
    case MediaUploadErrorEnum_MediaUploadError.MEDIA_BUNDLE_NOT_COMPATIBLE_TO_PRODUCT_TYPE:
      return "MEDIA_BUNDLE_NOT_COMPATIBLE_TO_PRODUCT_TYPE";
    case MediaUploadErrorEnum_MediaUploadError.MEDIA_BUNDLE_REJECTED_BY_MULTIPLE_ASSET_SPECS:
      return "MEDIA_BUNDLE_REJECTED_BY_MULTIPLE_ASSET_SPECS";
    case MediaUploadErrorEnum_MediaUploadError.TOO_MANY_FILES_IN_MEDIA_BUNDLE:
      return "TOO_MANY_FILES_IN_MEDIA_BUNDLE";
    case MediaUploadErrorEnum_MediaUploadError.UNSUPPORTED_GOOGLE_WEB_DESIGNER_ENVIRONMENT:
      return "UNSUPPORTED_GOOGLE_WEB_DESIGNER_ENVIRONMENT";
    case MediaUploadErrorEnum_MediaUploadError.UNSUPPORTED_HTML5_FEATURE:
      return "UNSUPPORTED_HTML5_FEATURE";
    case MediaUploadErrorEnum_MediaUploadError.URL_IN_MEDIA_BUNDLE_NOT_SSL_COMPLIANT:
      return "URL_IN_MEDIA_BUNDLE_NOT_SSL_COMPLIANT";
    case MediaUploadErrorEnum_MediaUploadError.VIDEO_FILE_NAME_TOO_LONG:
      return "VIDEO_FILE_NAME_TOO_LONG";
    case MediaUploadErrorEnum_MediaUploadError.VIDEO_MULTIPLE_FILES_WITH_SAME_NAME:
      return "VIDEO_MULTIPLE_FILES_WITH_SAME_NAME";
    case MediaUploadErrorEnum_MediaUploadError.VIDEO_NOT_ALLOWED_IN_MEDIA_BUNDLE:
      return "VIDEO_NOT_ALLOWED_IN_MEDIA_BUNDLE";
    case MediaUploadErrorEnum_MediaUploadError.CANNOT_UPLOAD_MEDIA_TYPE_THROUGH_API:
      return "CANNOT_UPLOAD_MEDIA_TYPE_THROUGH_API";
    case MediaUploadErrorEnum_MediaUploadError.DIMENSIONS_NOT_ALLOWED:
      return "DIMENSIONS_NOT_ALLOWED";
    case MediaUploadErrorEnum_MediaUploadError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseMediaUploadErrorEnum(): MediaUploadErrorEnum {
  return {};
}

export const MediaUploadErrorEnum: MessageFns<MediaUploadErrorEnum> = {
  encode(_: MediaUploadErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaUploadErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaUploadErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MediaUploadErrorEnum {
    return {};
  },

  toJSON(_: MediaUploadErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MediaUploadErrorEnum>): MediaUploadErrorEnum {
    return MediaUploadErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MediaUploadErrorEnum>): MediaUploadErrorEnum {
    const message = createBaseMediaUploadErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
