// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/asset_group_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible asset group errors. */
export interface AssetGroupErrorEnum {
}

/** Enum describing possible asset group errors. */
export enum AssetGroupErrorEnum_AssetGroupError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** DUPLICATE_NAME - Each asset group in a single campaign must have a unique name. */
  DUPLICATE_NAME = 2,
  /** CANNOT_ADD_ASSET_GROUP_FOR_CAMPAIGN_TYPE - Cannot add asset group for the campaign type. */
  CANNOT_ADD_ASSET_GROUP_FOR_CAMPAIGN_TYPE = 3,
  /** NOT_ENOUGH_HEADLINE_ASSET - Not enough headline asset for a valid asset group. */
  NOT_ENOUGH_HEADLINE_ASSET = 4,
  /** NOT_ENOUGH_LONG_HEADLINE_ASSET - Not enough long headline asset for a valid asset group. */
  NOT_ENOUGH_LONG_HEADLINE_ASSET = 5,
  /** NOT_ENOUGH_DESCRIPTION_ASSET - Not enough description headline asset for a valid asset group. */
  NOT_ENOUGH_DESCRIPTION_ASSET = 6,
  /** NOT_ENOUGH_BUSINESS_NAME_ASSET - Not enough business name asset for a valid asset group. */
  NOT_ENOUGH_BUSINESS_NAME_ASSET = 7,
  /** NOT_ENOUGH_MARKETING_IMAGE_ASSET - Not enough marketing image asset for a valid asset group. */
  NOT_ENOUGH_MARKETING_IMAGE_ASSET = 8,
  /** NOT_ENOUGH_SQUARE_MARKETING_IMAGE_ASSET - Not enough square marketing image asset for a valid asset group. */
  NOT_ENOUGH_SQUARE_MARKETING_IMAGE_ASSET = 9,
  /** NOT_ENOUGH_LOGO_ASSET - Not enough logo asset for a valid asset group. */
  NOT_ENOUGH_LOGO_ASSET = 10,
  /** FINAL_URL_SHOPPING_MERCHANT_HOME_PAGE_URL_DOMAINS_DIFFER - Final url and shopping merchant url does not have the same domain. */
  FINAL_URL_SHOPPING_MERCHANT_HOME_PAGE_URL_DOMAINS_DIFFER = 11,
  /** PATH1_REQUIRED_WHEN_PATH2_IS_SET - Path1 required when path2 is set. */
  PATH1_REQUIRED_WHEN_PATH2_IS_SET = 12,
  /** SHORT_DESCRIPTION_REQUIRED - At least one short description asset is required for a valid asset group. */
  SHORT_DESCRIPTION_REQUIRED = 13,
  /** FINAL_URL_REQUIRED - Final url field is required for asset group. */
  FINAL_URL_REQUIRED = 14,
  /** FINAL_URL_CONTAINS_INVALID_DOMAIN_NAME - Final url contains invalid domain name. */
  FINAL_URL_CONTAINS_INVALID_DOMAIN_NAME = 15,
  /** AD_CUSTOMIZER_NOT_SUPPORTED - Ad customizers are not supported in asset group's text field. */
  AD_CUSTOMIZER_NOT_SUPPORTED = 16,
  /** CANNOT_MUTATE_ASSET_GROUP_FOR_REMOVED_CAMPAIGN - Cannot mutate asset group for campaign with removed status. */
  CANNOT_MUTATE_ASSET_GROUP_FOR_REMOVED_CAMPAIGN = 17,
  UNRECOGNIZED = -1,
}

export function assetGroupErrorEnum_AssetGroupErrorFromJSON(object: any): AssetGroupErrorEnum_AssetGroupError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return AssetGroupErrorEnum_AssetGroupError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return AssetGroupErrorEnum_AssetGroupError.UNKNOWN;
    case 2:
    case "DUPLICATE_NAME":
      return AssetGroupErrorEnum_AssetGroupError.DUPLICATE_NAME;
    case 3:
    case "CANNOT_ADD_ASSET_GROUP_FOR_CAMPAIGN_TYPE":
      return AssetGroupErrorEnum_AssetGroupError.CANNOT_ADD_ASSET_GROUP_FOR_CAMPAIGN_TYPE;
    case 4:
    case "NOT_ENOUGH_HEADLINE_ASSET":
      return AssetGroupErrorEnum_AssetGroupError.NOT_ENOUGH_HEADLINE_ASSET;
    case 5:
    case "NOT_ENOUGH_LONG_HEADLINE_ASSET":
      return AssetGroupErrorEnum_AssetGroupError.NOT_ENOUGH_LONG_HEADLINE_ASSET;
    case 6:
    case "NOT_ENOUGH_DESCRIPTION_ASSET":
      return AssetGroupErrorEnum_AssetGroupError.NOT_ENOUGH_DESCRIPTION_ASSET;
    case 7:
    case "NOT_ENOUGH_BUSINESS_NAME_ASSET":
      return AssetGroupErrorEnum_AssetGroupError.NOT_ENOUGH_BUSINESS_NAME_ASSET;
    case 8:
    case "NOT_ENOUGH_MARKETING_IMAGE_ASSET":
      return AssetGroupErrorEnum_AssetGroupError.NOT_ENOUGH_MARKETING_IMAGE_ASSET;
    case 9:
    case "NOT_ENOUGH_SQUARE_MARKETING_IMAGE_ASSET":
      return AssetGroupErrorEnum_AssetGroupError.NOT_ENOUGH_SQUARE_MARKETING_IMAGE_ASSET;
    case 10:
    case "NOT_ENOUGH_LOGO_ASSET":
      return AssetGroupErrorEnum_AssetGroupError.NOT_ENOUGH_LOGO_ASSET;
    case 11:
    case "FINAL_URL_SHOPPING_MERCHANT_HOME_PAGE_URL_DOMAINS_DIFFER":
      return AssetGroupErrorEnum_AssetGroupError.FINAL_URL_SHOPPING_MERCHANT_HOME_PAGE_URL_DOMAINS_DIFFER;
    case 12:
    case "PATH1_REQUIRED_WHEN_PATH2_IS_SET":
      return AssetGroupErrorEnum_AssetGroupError.PATH1_REQUIRED_WHEN_PATH2_IS_SET;
    case 13:
    case "SHORT_DESCRIPTION_REQUIRED":
      return AssetGroupErrorEnum_AssetGroupError.SHORT_DESCRIPTION_REQUIRED;
    case 14:
    case "FINAL_URL_REQUIRED":
      return AssetGroupErrorEnum_AssetGroupError.FINAL_URL_REQUIRED;
    case 15:
    case "FINAL_URL_CONTAINS_INVALID_DOMAIN_NAME":
      return AssetGroupErrorEnum_AssetGroupError.FINAL_URL_CONTAINS_INVALID_DOMAIN_NAME;
    case 16:
    case "AD_CUSTOMIZER_NOT_SUPPORTED":
      return AssetGroupErrorEnum_AssetGroupError.AD_CUSTOMIZER_NOT_SUPPORTED;
    case 17:
    case "CANNOT_MUTATE_ASSET_GROUP_FOR_REMOVED_CAMPAIGN":
      return AssetGroupErrorEnum_AssetGroupError.CANNOT_MUTATE_ASSET_GROUP_FOR_REMOVED_CAMPAIGN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AssetGroupErrorEnum_AssetGroupError.UNRECOGNIZED;
  }
}

export function assetGroupErrorEnum_AssetGroupErrorToJSON(object: AssetGroupErrorEnum_AssetGroupError): string {
  switch (object) {
    case AssetGroupErrorEnum_AssetGroupError.UNSPECIFIED:
      return "UNSPECIFIED";
    case AssetGroupErrorEnum_AssetGroupError.UNKNOWN:
      return "UNKNOWN";
    case AssetGroupErrorEnum_AssetGroupError.DUPLICATE_NAME:
      return "DUPLICATE_NAME";
    case AssetGroupErrorEnum_AssetGroupError.CANNOT_ADD_ASSET_GROUP_FOR_CAMPAIGN_TYPE:
      return "CANNOT_ADD_ASSET_GROUP_FOR_CAMPAIGN_TYPE";
    case AssetGroupErrorEnum_AssetGroupError.NOT_ENOUGH_HEADLINE_ASSET:
      return "NOT_ENOUGH_HEADLINE_ASSET";
    case AssetGroupErrorEnum_AssetGroupError.NOT_ENOUGH_LONG_HEADLINE_ASSET:
      return "NOT_ENOUGH_LONG_HEADLINE_ASSET";
    case AssetGroupErrorEnum_AssetGroupError.NOT_ENOUGH_DESCRIPTION_ASSET:
      return "NOT_ENOUGH_DESCRIPTION_ASSET";
    case AssetGroupErrorEnum_AssetGroupError.NOT_ENOUGH_BUSINESS_NAME_ASSET:
      return "NOT_ENOUGH_BUSINESS_NAME_ASSET";
    case AssetGroupErrorEnum_AssetGroupError.NOT_ENOUGH_MARKETING_IMAGE_ASSET:
      return "NOT_ENOUGH_MARKETING_IMAGE_ASSET";
    case AssetGroupErrorEnum_AssetGroupError.NOT_ENOUGH_SQUARE_MARKETING_IMAGE_ASSET:
      return "NOT_ENOUGH_SQUARE_MARKETING_IMAGE_ASSET";
    case AssetGroupErrorEnum_AssetGroupError.NOT_ENOUGH_LOGO_ASSET:
      return "NOT_ENOUGH_LOGO_ASSET";
    case AssetGroupErrorEnum_AssetGroupError.FINAL_URL_SHOPPING_MERCHANT_HOME_PAGE_URL_DOMAINS_DIFFER:
      return "FINAL_URL_SHOPPING_MERCHANT_HOME_PAGE_URL_DOMAINS_DIFFER";
    case AssetGroupErrorEnum_AssetGroupError.PATH1_REQUIRED_WHEN_PATH2_IS_SET:
      return "PATH1_REQUIRED_WHEN_PATH2_IS_SET";
    case AssetGroupErrorEnum_AssetGroupError.SHORT_DESCRIPTION_REQUIRED:
      return "SHORT_DESCRIPTION_REQUIRED";
    case AssetGroupErrorEnum_AssetGroupError.FINAL_URL_REQUIRED:
      return "FINAL_URL_REQUIRED";
    case AssetGroupErrorEnum_AssetGroupError.FINAL_URL_CONTAINS_INVALID_DOMAIN_NAME:
      return "FINAL_URL_CONTAINS_INVALID_DOMAIN_NAME";
    case AssetGroupErrorEnum_AssetGroupError.AD_CUSTOMIZER_NOT_SUPPORTED:
      return "AD_CUSTOMIZER_NOT_SUPPORTED";
    case AssetGroupErrorEnum_AssetGroupError.CANNOT_MUTATE_ASSET_GROUP_FOR_REMOVED_CAMPAIGN:
      return "CANNOT_MUTATE_ASSET_GROUP_FOR_REMOVED_CAMPAIGN";
    case AssetGroupErrorEnum_AssetGroupError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAssetGroupErrorEnum(): AssetGroupErrorEnum {
  return {};
}

export const AssetGroupErrorEnum: MessageFns<AssetGroupErrorEnum> = {
  encode(_: AssetGroupErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetGroupErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetGroupErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AssetGroupErrorEnum {
    return {};
  },

  toJSON(_: AssetGroupErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AssetGroupErrorEnum>): AssetGroupErrorEnum {
    return AssetGroupErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AssetGroupErrorEnum>): AssetGroupErrorEnum {
    const message = createBaseAssetGroupErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
