// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/enums/conversion_lag_bucket.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.enums";

/**
 * Container for enum representing the number of days between impression and
 * conversion.
 */
export interface ConversionLagBucketEnum {
}

/** Enum representing the number of days between impression and conversion. */
export enum ConversionLagBucketEnum_ConversionLagBucket {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /** LESS_THAN_ONE_DAY - Conversion lag bucket from 0 to 1 day. 0 day is included, 1 day is not. */
  LESS_THAN_ONE_DAY = 2,
  /** ONE_TO_TWO_DAYS - Conversion lag bucket from 1 to 2 days. 1 day is included, 2 days is not. */
  ONE_TO_TWO_DAYS = 3,
  /**
   * TWO_TO_THREE_DAYS - Conversion lag bucket from 2 to 3 days. 2 days is included,
   * 3 days is not.
   */
  TWO_TO_THREE_DAYS = 4,
  /**
   * THREE_TO_FOUR_DAYS - Conversion lag bucket from 3 to 4 days. 3 days is included,
   * 4 days is not.
   */
  THREE_TO_FOUR_DAYS = 5,
  /**
   * FOUR_TO_FIVE_DAYS - Conversion lag bucket from 4 to 5 days. 4 days is included,
   * 5 days is not.
   */
  FOUR_TO_FIVE_DAYS = 6,
  /**
   * FIVE_TO_SIX_DAYS - Conversion lag bucket from 5 to 6 days. 5 days is included,
   * 6 days is not.
   */
  FIVE_TO_SIX_DAYS = 7,
  /**
   * SIX_TO_SEVEN_DAYS - Conversion lag bucket from 6 to 7 days. 6 days is included,
   * 7 days is not.
   */
  SIX_TO_SEVEN_DAYS = 8,
  /**
   * SEVEN_TO_EIGHT_DAYS - Conversion lag bucket from 7 to 8 days. 7 days is included,
   * 8 days is not.
   */
  SEVEN_TO_EIGHT_DAYS = 9,
  /**
   * EIGHT_TO_NINE_DAYS - Conversion lag bucket from 8 to 9 days. 8 days is included,
   * 9 days is not.
   */
  EIGHT_TO_NINE_DAYS = 10,
  /**
   * NINE_TO_TEN_DAYS - Conversion lag bucket from 9 to 10 days. 9 days is included,
   * 10 days is not.
   */
  NINE_TO_TEN_DAYS = 11,
  /**
   * TEN_TO_ELEVEN_DAYS - Conversion lag bucket from 10 to 11 days. 10 days is included,
   * 11 days is not.
   */
  TEN_TO_ELEVEN_DAYS = 12,
  /**
   * ELEVEN_TO_TWELVE_DAYS - Conversion lag bucket from 11 to 12 days. 11 days is included,
   * 12 days is not.
   */
  ELEVEN_TO_TWELVE_DAYS = 13,
  /**
   * TWELVE_TO_THIRTEEN_DAYS - Conversion lag bucket from 12 to 13 days. 12 days is included,
   * 13 days is not.
   */
  TWELVE_TO_THIRTEEN_DAYS = 14,
  /**
   * THIRTEEN_TO_FOURTEEN_DAYS - Conversion lag bucket from 13 to 14 days. 13 days is included,
   * 14 days is not.
   */
  THIRTEEN_TO_FOURTEEN_DAYS = 15,
  /**
   * FOURTEEN_TO_TWENTY_ONE_DAYS - Conversion lag bucket from 14 to 21 days. 14 days is included,
   * 21 days is not.
   */
  FOURTEEN_TO_TWENTY_ONE_DAYS = 16,
  /**
   * TWENTY_ONE_TO_THIRTY_DAYS - Conversion lag bucket from 21 to 30 days. 21 days is included,
   * 30 days is not.
   */
  TWENTY_ONE_TO_THIRTY_DAYS = 17,
  /**
   * THIRTY_TO_FORTY_FIVE_DAYS - Conversion lag bucket from 30 to 45 days. 30 days is included,
   * 45 days is not.
   */
  THIRTY_TO_FORTY_FIVE_DAYS = 18,
  /**
   * FORTY_FIVE_TO_SIXTY_DAYS - Conversion lag bucket from 45 to 60 days. 45 days is included,
   * 60 days is not.
   */
  FORTY_FIVE_TO_SIXTY_DAYS = 19,
  /**
   * SIXTY_TO_NINETY_DAYS - Conversion lag bucket from 60 to 90 days. 60 days is included,
   * 90 days is not.
   */
  SIXTY_TO_NINETY_DAYS = 20,
  UNRECOGNIZED = -1,
}

export function conversionLagBucketEnum_ConversionLagBucketFromJSON(
  object: any,
): ConversionLagBucketEnum_ConversionLagBucket {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return ConversionLagBucketEnum_ConversionLagBucket.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return ConversionLagBucketEnum_ConversionLagBucket.UNKNOWN;
    case 2:
    case "LESS_THAN_ONE_DAY":
      return ConversionLagBucketEnum_ConversionLagBucket.LESS_THAN_ONE_DAY;
    case 3:
    case "ONE_TO_TWO_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.ONE_TO_TWO_DAYS;
    case 4:
    case "TWO_TO_THREE_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.TWO_TO_THREE_DAYS;
    case 5:
    case "THREE_TO_FOUR_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.THREE_TO_FOUR_DAYS;
    case 6:
    case "FOUR_TO_FIVE_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.FOUR_TO_FIVE_DAYS;
    case 7:
    case "FIVE_TO_SIX_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.FIVE_TO_SIX_DAYS;
    case 8:
    case "SIX_TO_SEVEN_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.SIX_TO_SEVEN_DAYS;
    case 9:
    case "SEVEN_TO_EIGHT_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.SEVEN_TO_EIGHT_DAYS;
    case 10:
    case "EIGHT_TO_NINE_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.EIGHT_TO_NINE_DAYS;
    case 11:
    case "NINE_TO_TEN_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.NINE_TO_TEN_DAYS;
    case 12:
    case "TEN_TO_ELEVEN_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.TEN_TO_ELEVEN_DAYS;
    case 13:
    case "ELEVEN_TO_TWELVE_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.ELEVEN_TO_TWELVE_DAYS;
    case 14:
    case "TWELVE_TO_THIRTEEN_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.TWELVE_TO_THIRTEEN_DAYS;
    case 15:
    case "THIRTEEN_TO_FOURTEEN_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.THIRTEEN_TO_FOURTEEN_DAYS;
    case 16:
    case "FOURTEEN_TO_TWENTY_ONE_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.FOURTEEN_TO_TWENTY_ONE_DAYS;
    case 17:
    case "TWENTY_ONE_TO_THIRTY_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.TWENTY_ONE_TO_THIRTY_DAYS;
    case 18:
    case "THIRTY_TO_FORTY_FIVE_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.THIRTY_TO_FORTY_FIVE_DAYS;
    case 19:
    case "FORTY_FIVE_TO_SIXTY_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.FORTY_FIVE_TO_SIXTY_DAYS;
    case 20:
    case "SIXTY_TO_NINETY_DAYS":
      return ConversionLagBucketEnum_ConversionLagBucket.SIXTY_TO_NINETY_DAYS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConversionLagBucketEnum_ConversionLagBucket.UNRECOGNIZED;
  }
}

export function conversionLagBucketEnum_ConversionLagBucketToJSON(
  object: ConversionLagBucketEnum_ConversionLagBucket,
): string {
  switch (object) {
    case ConversionLagBucketEnum_ConversionLagBucket.UNSPECIFIED:
      return "UNSPECIFIED";
    case ConversionLagBucketEnum_ConversionLagBucket.UNKNOWN:
      return "UNKNOWN";
    case ConversionLagBucketEnum_ConversionLagBucket.LESS_THAN_ONE_DAY:
      return "LESS_THAN_ONE_DAY";
    case ConversionLagBucketEnum_ConversionLagBucket.ONE_TO_TWO_DAYS:
      return "ONE_TO_TWO_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.TWO_TO_THREE_DAYS:
      return "TWO_TO_THREE_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.THREE_TO_FOUR_DAYS:
      return "THREE_TO_FOUR_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.FOUR_TO_FIVE_DAYS:
      return "FOUR_TO_FIVE_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.FIVE_TO_SIX_DAYS:
      return "FIVE_TO_SIX_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.SIX_TO_SEVEN_DAYS:
      return "SIX_TO_SEVEN_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.SEVEN_TO_EIGHT_DAYS:
      return "SEVEN_TO_EIGHT_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.EIGHT_TO_NINE_DAYS:
      return "EIGHT_TO_NINE_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.NINE_TO_TEN_DAYS:
      return "NINE_TO_TEN_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.TEN_TO_ELEVEN_DAYS:
      return "TEN_TO_ELEVEN_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.ELEVEN_TO_TWELVE_DAYS:
      return "ELEVEN_TO_TWELVE_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.TWELVE_TO_THIRTEEN_DAYS:
      return "TWELVE_TO_THIRTEEN_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.THIRTEEN_TO_FOURTEEN_DAYS:
      return "THIRTEEN_TO_FOURTEEN_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.FOURTEEN_TO_TWENTY_ONE_DAYS:
      return "FOURTEEN_TO_TWENTY_ONE_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.TWENTY_ONE_TO_THIRTY_DAYS:
      return "TWENTY_ONE_TO_THIRTY_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.THIRTY_TO_FORTY_FIVE_DAYS:
      return "THIRTY_TO_FORTY_FIVE_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.FORTY_FIVE_TO_SIXTY_DAYS:
      return "FORTY_FIVE_TO_SIXTY_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.SIXTY_TO_NINETY_DAYS:
      return "SIXTY_TO_NINETY_DAYS";
    case ConversionLagBucketEnum_ConversionLagBucket.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseConversionLagBucketEnum(): ConversionLagBucketEnum {
  return {};
}

export const ConversionLagBucketEnum: MessageFns<ConversionLagBucketEnum> = {
  encode(_: ConversionLagBucketEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConversionLagBucketEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversionLagBucketEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ConversionLagBucketEnum {
    return {};
  },

  toJSON(_: ConversionLagBucketEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ConversionLagBucketEnum>): ConversionLagBucketEnum {
    return ConversionLagBucketEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ConversionLagBucketEnum>): ConversionLagBucketEnum {
    const message = createBaseConversionLagBucketEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
