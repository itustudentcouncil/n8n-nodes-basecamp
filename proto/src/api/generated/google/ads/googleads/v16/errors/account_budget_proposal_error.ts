// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/account_budget_proposal_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible account budget proposal errors. */
export interface AccountBudgetProposalErrorEnum {
}

/** Enum describing possible account budget proposal errors. */
export enum AccountBudgetProposalErrorEnum_AccountBudgetProposalError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** FIELD_MASK_NOT_ALLOWED - The field mask must be empty for create/end/remove proposals. */
  FIELD_MASK_NOT_ALLOWED = 2,
  /** IMMUTABLE_FIELD - The field cannot be set because of the proposal type. */
  IMMUTABLE_FIELD = 3,
  /** REQUIRED_FIELD_MISSING - The field is required because of the proposal type. */
  REQUIRED_FIELD_MISSING = 4,
  /** CANNOT_CANCEL_APPROVED_PROPOSAL - Proposals that have been approved cannot be cancelled. */
  CANNOT_CANCEL_APPROVED_PROPOSAL = 5,
  /** CANNOT_REMOVE_UNAPPROVED_BUDGET - Budgets that haven't been approved cannot be removed. */
  CANNOT_REMOVE_UNAPPROVED_BUDGET = 6,
  /** CANNOT_REMOVE_RUNNING_BUDGET - Budgets that are currently running cannot be removed. */
  CANNOT_REMOVE_RUNNING_BUDGET = 7,
  /** CANNOT_END_UNAPPROVED_BUDGET - Budgets that haven't been approved cannot be truncated. */
  CANNOT_END_UNAPPROVED_BUDGET = 8,
  /** CANNOT_END_INACTIVE_BUDGET - Only budgets that are currently running can be truncated. */
  CANNOT_END_INACTIVE_BUDGET = 9,
  /** BUDGET_NAME_REQUIRED - All budgets must have names. */
  BUDGET_NAME_REQUIRED = 10,
  /**
   * CANNOT_UPDATE_OLD_BUDGET - Expired budgets cannot be edited after a sufficient amount of time has
   * passed.
   */
  CANNOT_UPDATE_OLD_BUDGET = 11,
  /** CANNOT_END_IN_PAST - It is not permissible a propose a new budget that ends in the past. */
  CANNOT_END_IN_PAST = 12,
  /** CANNOT_EXTEND_END_TIME - An expired budget cannot be extended to overlap with the running budget. */
  CANNOT_EXTEND_END_TIME = 13,
  /** PURCHASE_ORDER_NUMBER_REQUIRED - A purchase order number is required. */
  PURCHASE_ORDER_NUMBER_REQUIRED = 14,
  /** PENDING_UPDATE_PROPOSAL_EXISTS - Budgets that have a pending update cannot be updated. */
  PENDING_UPDATE_PROPOSAL_EXISTS = 15,
  /**
   * MULTIPLE_BUDGETS_NOT_ALLOWED_FOR_UNAPPROVED_BILLING_SETUP - Cannot propose more than one budget when the corresponding billing setup
   * hasn't been approved.
   */
  MULTIPLE_BUDGETS_NOT_ALLOWED_FOR_UNAPPROVED_BILLING_SETUP = 16,
  /** CANNOT_UPDATE_START_TIME_FOR_STARTED_BUDGET - Cannot update the start time of a budget that has already started. */
  CANNOT_UPDATE_START_TIME_FOR_STARTED_BUDGET = 17,
  /**
   * SPENDING_LIMIT_LOWER_THAN_ACCRUED_COST_NOT_ALLOWED - Cannot update the spending limit of a budget with an amount lower than
   * what has already been spent.
   */
  SPENDING_LIMIT_LOWER_THAN_ACCRUED_COST_NOT_ALLOWED = 18,
  /** UPDATE_IS_NO_OP - Cannot propose a budget update without actually changing any fields. */
  UPDATE_IS_NO_OP = 19,
  /** END_TIME_MUST_FOLLOW_START_TIME - The end time must come after the start time. */
  END_TIME_MUST_FOLLOW_START_TIME = 20,
  /**
   * BUDGET_DATE_RANGE_INCOMPATIBLE_WITH_BILLING_SETUP - The budget's date range must fall within the date range of its billing
   * setup.
   */
  BUDGET_DATE_RANGE_INCOMPATIBLE_WITH_BILLING_SETUP = 21,
  /** NOT_AUTHORIZED - The user is not authorized to mutate budgets for the given billing setup. */
  NOT_AUTHORIZED = 22,
  /** INVALID_BILLING_SETUP - Mutates are not allowed for the given billing setup. */
  INVALID_BILLING_SETUP = 23,
  /**
   * OVERLAPS_EXISTING_BUDGET - Budget creation failed as it overlaps with a pending budget proposal
   * or an approved budget.
   */
  OVERLAPS_EXISTING_BUDGET = 24,
  /**
   * CANNOT_CREATE_BUDGET_THROUGH_API - The control setting in user's payments profile doesn't allow budget
   * creation through API. Log in to Google Ads to create budget.
   */
  CANNOT_CREATE_BUDGET_THROUGH_API = 25,
  /**
   * INVALID_MASTER_SERVICE_AGREEMENT - Master service agreement has not been signed yet for the Payments
   * Profile.
   */
  INVALID_MASTER_SERVICE_AGREEMENT = 26,
  /**
   * CANCELED_BILLING_SETUP - Budget mutates are not allowed because the given billing setup is
   * canceled.
   */
  CANCELED_BILLING_SETUP = 27,
  UNRECOGNIZED = -1,
}

export function accountBudgetProposalErrorEnum_AccountBudgetProposalErrorFromJSON(
  object: any,
): AccountBudgetProposalErrorEnum_AccountBudgetProposalError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.UNKNOWN;
    case 2:
    case "FIELD_MASK_NOT_ALLOWED":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.FIELD_MASK_NOT_ALLOWED;
    case 3:
    case "IMMUTABLE_FIELD":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.IMMUTABLE_FIELD;
    case 4:
    case "REQUIRED_FIELD_MISSING":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.REQUIRED_FIELD_MISSING;
    case 5:
    case "CANNOT_CANCEL_APPROVED_PROPOSAL":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_CANCEL_APPROVED_PROPOSAL;
    case 6:
    case "CANNOT_REMOVE_UNAPPROVED_BUDGET":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_REMOVE_UNAPPROVED_BUDGET;
    case 7:
    case "CANNOT_REMOVE_RUNNING_BUDGET":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_REMOVE_RUNNING_BUDGET;
    case 8:
    case "CANNOT_END_UNAPPROVED_BUDGET":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_END_UNAPPROVED_BUDGET;
    case 9:
    case "CANNOT_END_INACTIVE_BUDGET":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_END_INACTIVE_BUDGET;
    case 10:
    case "BUDGET_NAME_REQUIRED":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.BUDGET_NAME_REQUIRED;
    case 11:
    case "CANNOT_UPDATE_OLD_BUDGET":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_UPDATE_OLD_BUDGET;
    case 12:
    case "CANNOT_END_IN_PAST":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_END_IN_PAST;
    case 13:
    case "CANNOT_EXTEND_END_TIME":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_EXTEND_END_TIME;
    case 14:
    case "PURCHASE_ORDER_NUMBER_REQUIRED":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.PURCHASE_ORDER_NUMBER_REQUIRED;
    case 15:
    case "PENDING_UPDATE_PROPOSAL_EXISTS":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.PENDING_UPDATE_PROPOSAL_EXISTS;
    case 16:
    case "MULTIPLE_BUDGETS_NOT_ALLOWED_FOR_UNAPPROVED_BILLING_SETUP":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError
        .MULTIPLE_BUDGETS_NOT_ALLOWED_FOR_UNAPPROVED_BILLING_SETUP;
    case 17:
    case "CANNOT_UPDATE_START_TIME_FOR_STARTED_BUDGET":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_UPDATE_START_TIME_FOR_STARTED_BUDGET;
    case 18:
    case "SPENDING_LIMIT_LOWER_THAN_ACCRUED_COST_NOT_ALLOWED":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError
        .SPENDING_LIMIT_LOWER_THAN_ACCRUED_COST_NOT_ALLOWED;
    case 19:
    case "UPDATE_IS_NO_OP":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.UPDATE_IS_NO_OP;
    case 20:
    case "END_TIME_MUST_FOLLOW_START_TIME":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.END_TIME_MUST_FOLLOW_START_TIME;
    case 21:
    case "BUDGET_DATE_RANGE_INCOMPATIBLE_WITH_BILLING_SETUP":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError
        .BUDGET_DATE_RANGE_INCOMPATIBLE_WITH_BILLING_SETUP;
    case 22:
    case "NOT_AUTHORIZED":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.NOT_AUTHORIZED;
    case 23:
    case "INVALID_BILLING_SETUP":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.INVALID_BILLING_SETUP;
    case 24:
    case "OVERLAPS_EXISTING_BUDGET":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.OVERLAPS_EXISTING_BUDGET;
    case 25:
    case "CANNOT_CREATE_BUDGET_THROUGH_API":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_CREATE_BUDGET_THROUGH_API;
    case 26:
    case "INVALID_MASTER_SERVICE_AGREEMENT":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.INVALID_MASTER_SERVICE_AGREEMENT;
    case 27:
    case "CANCELED_BILLING_SETUP":
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANCELED_BILLING_SETUP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AccountBudgetProposalErrorEnum_AccountBudgetProposalError.UNRECOGNIZED;
  }
}

export function accountBudgetProposalErrorEnum_AccountBudgetProposalErrorToJSON(
  object: AccountBudgetProposalErrorEnum_AccountBudgetProposalError,
): string {
  switch (object) {
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.UNSPECIFIED:
      return "UNSPECIFIED";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.UNKNOWN:
      return "UNKNOWN";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.FIELD_MASK_NOT_ALLOWED:
      return "FIELD_MASK_NOT_ALLOWED";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.IMMUTABLE_FIELD:
      return "IMMUTABLE_FIELD";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.REQUIRED_FIELD_MISSING:
      return "REQUIRED_FIELD_MISSING";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_CANCEL_APPROVED_PROPOSAL:
      return "CANNOT_CANCEL_APPROVED_PROPOSAL";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_REMOVE_UNAPPROVED_BUDGET:
      return "CANNOT_REMOVE_UNAPPROVED_BUDGET";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_REMOVE_RUNNING_BUDGET:
      return "CANNOT_REMOVE_RUNNING_BUDGET";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_END_UNAPPROVED_BUDGET:
      return "CANNOT_END_UNAPPROVED_BUDGET";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_END_INACTIVE_BUDGET:
      return "CANNOT_END_INACTIVE_BUDGET";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.BUDGET_NAME_REQUIRED:
      return "BUDGET_NAME_REQUIRED";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_UPDATE_OLD_BUDGET:
      return "CANNOT_UPDATE_OLD_BUDGET";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_END_IN_PAST:
      return "CANNOT_END_IN_PAST";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_EXTEND_END_TIME:
      return "CANNOT_EXTEND_END_TIME";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.PURCHASE_ORDER_NUMBER_REQUIRED:
      return "PURCHASE_ORDER_NUMBER_REQUIRED";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.PENDING_UPDATE_PROPOSAL_EXISTS:
      return "PENDING_UPDATE_PROPOSAL_EXISTS";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError
      .MULTIPLE_BUDGETS_NOT_ALLOWED_FOR_UNAPPROVED_BILLING_SETUP:
      return "MULTIPLE_BUDGETS_NOT_ALLOWED_FOR_UNAPPROVED_BILLING_SETUP";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_UPDATE_START_TIME_FOR_STARTED_BUDGET:
      return "CANNOT_UPDATE_START_TIME_FOR_STARTED_BUDGET";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.SPENDING_LIMIT_LOWER_THAN_ACCRUED_COST_NOT_ALLOWED:
      return "SPENDING_LIMIT_LOWER_THAN_ACCRUED_COST_NOT_ALLOWED";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.UPDATE_IS_NO_OP:
      return "UPDATE_IS_NO_OP";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.END_TIME_MUST_FOLLOW_START_TIME:
      return "END_TIME_MUST_FOLLOW_START_TIME";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.BUDGET_DATE_RANGE_INCOMPATIBLE_WITH_BILLING_SETUP:
      return "BUDGET_DATE_RANGE_INCOMPATIBLE_WITH_BILLING_SETUP";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.NOT_AUTHORIZED:
      return "NOT_AUTHORIZED";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.INVALID_BILLING_SETUP:
      return "INVALID_BILLING_SETUP";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.OVERLAPS_EXISTING_BUDGET:
      return "OVERLAPS_EXISTING_BUDGET";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANNOT_CREATE_BUDGET_THROUGH_API:
      return "CANNOT_CREATE_BUDGET_THROUGH_API";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.INVALID_MASTER_SERVICE_AGREEMENT:
      return "INVALID_MASTER_SERVICE_AGREEMENT";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.CANCELED_BILLING_SETUP:
      return "CANCELED_BILLING_SETUP";
    case AccountBudgetProposalErrorEnum_AccountBudgetProposalError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAccountBudgetProposalErrorEnum(): AccountBudgetProposalErrorEnum {
  return {};
}

export const AccountBudgetProposalErrorEnum: MessageFns<AccountBudgetProposalErrorEnum> = {
  encode(_: AccountBudgetProposalErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountBudgetProposalErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountBudgetProposalErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AccountBudgetProposalErrorEnum {
    return {};
  },

  toJSON(_: AccountBudgetProposalErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AccountBudgetProposalErrorEnum>): AccountBudgetProposalErrorEnum {
    return AccountBudgetProposalErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AccountBudgetProposalErrorEnum>): AccountBudgetProposalErrorEnum {
    const message = createBaseAccountBudgetProposalErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
