// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/services/travel_asset_suggestion_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  AssetFieldTypeEnum_AssetFieldType,
  assetFieldTypeEnum_AssetFieldTypeFromJSON,
  assetFieldTypeEnum_AssetFieldTypeToJSON,
} from "../enums/asset_field_type.js";
import {
  CallToActionTypeEnum_CallToActionType,
  callToActionTypeEnum_CallToActionTypeFromJSON,
  callToActionTypeEnum_CallToActionTypeToJSON,
} from "../enums/call_to_action_type.js";
import {
  HotelAssetSuggestionStatusEnum_HotelAssetSuggestionStatus,
  hotelAssetSuggestionStatusEnum_HotelAssetSuggestionStatusFromJSON,
  hotelAssetSuggestionStatusEnum_HotelAssetSuggestionStatusToJSON,
} from "../enums/hotel_asset_suggestion_status.js";

export const protobufPackage = "google.ads.googleads.v16.services";

/**
 * Request message for
 * [TravelAssetSuggestionService.SuggestTravelAssets][google.ads.googleads.v16.services.TravelAssetSuggestionService.SuggestTravelAssets].
 */
export interface SuggestTravelAssetsRequest {
  /** Required. The ID of the customer. */
  customerId: string;
  /**
   * Required. The language specifications in BCP 47 format (for example, en-US,
   * zh-CN, etc.) for the asset suggestions. Text will be in this language.
   * Usually matches one of the campaign target languages.
   */
  languageOption: string;
  /**
   * The Google Maps Place IDs of hotels for which assets are requested. See
   * https://developers.google.com/places/web-service/place-id for more
   * information.
   */
  placeIds: string[];
}

/**
 * Response message for
 * [TravelAssetSuggestionService.SuggestTravelAssets][google.ads.googleads.v16.services.TravelAssetSuggestionService.SuggestTravelAssets].
 */
export interface SuggestTravelAssetsResponse {
  /** Asset suggestions for each place ID submitted in the request. */
  hotelAssetSuggestions: HotelAssetSuggestion[];
}

/** Message containing the asset suggestions for a hotel. */
export interface HotelAssetSuggestion {
  /** Google Places ID of the hotel. */
  placeId: string;
  /** Suggested final URL for an AssetGroup. */
  finalUrl: string;
  /** Hotel name in requested language. */
  hotelName: string;
  /** Call to action type. */
  callToAction: CallToActionTypeEnum_CallToActionType;
  /** Text assets such as headline, description, etc. */
  textAssets: HotelTextAsset[];
  /** Image assets such as landscape/portrait/square, etc. */
  imageAssets: HotelImageAsset[];
  /** The status of the hotel asset suggestion. */
  status: HotelAssetSuggestionStatusEnum_HotelAssetSuggestionStatus;
}

/** A single text asset suggestion for a hotel. */
export interface HotelTextAsset {
  /** Asset text in requested language. */
  text: string;
  /** The text asset type. For example, HEADLINE, DESCRIPTION, etc. */
  assetFieldType: AssetFieldTypeEnum_AssetFieldType;
}

/** A single image asset suggestion for a hotel. */
export interface HotelImageAsset {
  /** URI for the image. */
  uri: string;
  /**
   * The Image asset type. For example, MARKETING_IMAGE,
   * PORTRAIT_MARKETING_IMAGE, etc.
   */
  assetFieldType: AssetFieldTypeEnum_AssetFieldType;
}

function createBaseSuggestTravelAssetsRequest(): SuggestTravelAssetsRequest {
  return { customerId: "", languageOption: "", placeIds: [] };
}

export const SuggestTravelAssetsRequest: MessageFns<SuggestTravelAssetsRequest> = {
  encode(message: SuggestTravelAssetsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    if (message.languageOption !== "") {
      writer.uint32(18).string(message.languageOption);
    }
    for (const v of message.placeIds) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestTravelAssetsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestTravelAssetsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageOption = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.placeIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestTravelAssetsRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      languageOption: isSet(object.languageOption) ? globalThis.String(object.languageOption) : "",
      placeIds: globalThis.Array.isArray(object?.placeIds) ? object.placeIds.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: SuggestTravelAssetsRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.languageOption !== "") {
      obj.languageOption = message.languageOption;
    }
    if (message.placeIds?.length) {
      obj.placeIds = message.placeIds;
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestTravelAssetsRequest>): SuggestTravelAssetsRequest {
    return SuggestTravelAssetsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestTravelAssetsRequest>): SuggestTravelAssetsRequest {
    const message = createBaseSuggestTravelAssetsRequest();
    message.customerId = object.customerId ?? "";
    message.languageOption = object.languageOption ?? "";
    message.placeIds = object.placeIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseSuggestTravelAssetsResponse(): SuggestTravelAssetsResponse {
  return { hotelAssetSuggestions: [] };
}

export const SuggestTravelAssetsResponse: MessageFns<SuggestTravelAssetsResponse> = {
  encode(message: SuggestTravelAssetsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.hotelAssetSuggestions) {
      HotelAssetSuggestion.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestTravelAssetsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestTravelAssetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hotelAssetSuggestions.push(HotelAssetSuggestion.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestTravelAssetsResponse {
    return {
      hotelAssetSuggestions: globalThis.Array.isArray(object?.hotelAssetSuggestions)
        ? object.hotelAssetSuggestions.map((e: any) => HotelAssetSuggestion.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SuggestTravelAssetsResponse): unknown {
    const obj: any = {};
    if (message.hotelAssetSuggestions?.length) {
      obj.hotelAssetSuggestions = message.hotelAssetSuggestions.map((e) => HotelAssetSuggestion.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestTravelAssetsResponse>): SuggestTravelAssetsResponse {
    return SuggestTravelAssetsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestTravelAssetsResponse>): SuggestTravelAssetsResponse {
    const message = createBaseSuggestTravelAssetsResponse();
    message.hotelAssetSuggestions = object.hotelAssetSuggestions?.map((e) => HotelAssetSuggestion.fromPartial(e)) || [];
    return message;
  },
};

function createBaseHotelAssetSuggestion(): HotelAssetSuggestion {
  return { placeId: "", finalUrl: "", hotelName: "", callToAction: 0, textAssets: [], imageAssets: [], status: 0 };
}

export const HotelAssetSuggestion: MessageFns<HotelAssetSuggestion> = {
  encode(message: HotelAssetSuggestion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.placeId !== "") {
      writer.uint32(10).string(message.placeId);
    }
    if (message.finalUrl !== "") {
      writer.uint32(18).string(message.finalUrl);
    }
    if (message.hotelName !== "") {
      writer.uint32(26).string(message.hotelName);
    }
    if (message.callToAction !== 0) {
      writer.uint32(32).int32(message.callToAction);
    }
    for (const v of message.textAssets) {
      HotelTextAsset.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.imageAssets) {
      HotelImageAsset.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(56).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HotelAssetSuggestion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHotelAssetSuggestion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.placeId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.finalUrl = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hotelName = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.callToAction = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.textAssets.push(HotelTextAsset.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.imageAssets.push(HotelImageAsset.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HotelAssetSuggestion {
    return {
      placeId: isSet(object.placeId) ? globalThis.String(object.placeId) : "",
      finalUrl: isSet(object.finalUrl) ? globalThis.String(object.finalUrl) : "",
      hotelName: isSet(object.hotelName) ? globalThis.String(object.hotelName) : "",
      callToAction: isSet(object.callToAction) ? callToActionTypeEnum_CallToActionTypeFromJSON(object.callToAction) : 0,
      textAssets: globalThis.Array.isArray(object?.textAssets)
        ? object.textAssets.map((e: any) => HotelTextAsset.fromJSON(e))
        : [],
      imageAssets: globalThis.Array.isArray(object?.imageAssets)
        ? object.imageAssets.map((e: any) => HotelImageAsset.fromJSON(e))
        : [],
      status: isSet(object.status)
        ? hotelAssetSuggestionStatusEnum_HotelAssetSuggestionStatusFromJSON(object.status)
        : 0,
    };
  },

  toJSON(message: HotelAssetSuggestion): unknown {
    const obj: any = {};
    if (message.placeId !== "") {
      obj.placeId = message.placeId;
    }
    if (message.finalUrl !== "") {
      obj.finalUrl = message.finalUrl;
    }
    if (message.hotelName !== "") {
      obj.hotelName = message.hotelName;
    }
    if (message.callToAction !== 0) {
      obj.callToAction = callToActionTypeEnum_CallToActionTypeToJSON(message.callToAction);
    }
    if (message.textAssets?.length) {
      obj.textAssets = message.textAssets.map((e) => HotelTextAsset.toJSON(e));
    }
    if (message.imageAssets?.length) {
      obj.imageAssets = message.imageAssets.map((e) => HotelImageAsset.toJSON(e));
    }
    if (message.status !== 0) {
      obj.status = hotelAssetSuggestionStatusEnum_HotelAssetSuggestionStatusToJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<HotelAssetSuggestion>): HotelAssetSuggestion {
    return HotelAssetSuggestion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HotelAssetSuggestion>): HotelAssetSuggestion {
    const message = createBaseHotelAssetSuggestion();
    message.placeId = object.placeId ?? "";
    message.finalUrl = object.finalUrl ?? "";
    message.hotelName = object.hotelName ?? "";
    message.callToAction = object.callToAction ?? 0;
    message.textAssets = object.textAssets?.map((e) => HotelTextAsset.fromPartial(e)) || [];
    message.imageAssets = object.imageAssets?.map((e) => HotelImageAsset.fromPartial(e)) || [];
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseHotelTextAsset(): HotelTextAsset {
  return { text: "", assetFieldType: 0 };
}

export const HotelTextAsset: MessageFns<HotelTextAsset> = {
  encode(message: HotelTextAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    if (message.assetFieldType !== 0) {
      writer.uint32(16).int32(message.assetFieldType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HotelTextAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHotelTextAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.assetFieldType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HotelTextAsset {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      assetFieldType: isSet(object.assetFieldType)
        ? assetFieldTypeEnum_AssetFieldTypeFromJSON(object.assetFieldType)
        : 0,
    };
  },

  toJSON(message: HotelTextAsset): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.assetFieldType !== 0) {
      obj.assetFieldType = assetFieldTypeEnum_AssetFieldTypeToJSON(message.assetFieldType);
    }
    return obj;
  },

  create(base?: DeepPartial<HotelTextAsset>): HotelTextAsset {
    return HotelTextAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HotelTextAsset>): HotelTextAsset {
    const message = createBaseHotelTextAsset();
    message.text = object.text ?? "";
    message.assetFieldType = object.assetFieldType ?? 0;
    return message;
  },
};

function createBaseHotelImageAsset(): HotelImageAsset {
  return { uri: "", assetFieldType: 0 };
}

export const HotelImageAsset: MessageFns<HotelImageAsset> = {
  encode(message: HotelImageAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.assetFieldType !== 0) {
      writer.uint32(16).int32(message.assetFieldType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HotelImageAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHotelImageAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.assetFieldType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HotelImageAsset {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      assetFieldType: isSet(object.assetFieldType)
        ? assetFieldTypeEnum_AssetFieldTypeFromJSON(object.assetFieldType)
        : 0,
    };
  },

  toJSON(message: HotelImageAsset): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.assetFieldType !== 0) {
      obj.assetFieldType = assetFieldTypeEnum_AssetFieldTypeToJSON(message.assetFieldType);
    }
    return obj;
  },

  create(base?: DeepPartial<HotelImageAsset>): HotelImageAsset {
    return HotelImageAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HotelImageAsset>): HotelImageAsset {
    const message = createBaseHotelImageAsset();
    message.uri = object.uri ?? "";
    message.assetFieldType = object.assetFieldType ?? 0;
    return message;
  },
};

/** Service to retrieve Travel asset suggestions. */
export type TravelAssetSuggestionServiceDefinition = typeof TravelAssetSuggestionServiceDefinition;
export const TravelAssetSuggestionServiceDefinition = {
  name: "TravelAssetSuggestionService",
  fullName: "google.ads.googleads.v16.services.TravelAssetSuggestionService",
  methods: {
    /**
     * Returns Travel Asset suggestions. Asset
     * suggestions are returned on a best-effort basis. There are no guarantees
     * that all possible asset types will be returned for any given hotel
     * property.
     */
    suggestTravelAssets: {
      name: "SuggestTravelAssets",
      requestType: SuggestTravelAssetsRequest,
      requestStream: false,
      responseType: SuggestTravelAssetsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              95,
              111,
              112,
              116,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              118,
              49,
              54,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              58,
              115,
              117,
              103,
              103,
              101,
              115,
              116,
              84,
              114,
              97,
              118,
              101,
              108,
              65,
              115,
              115,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface TravelAssetSuggestionServiceImplementation<CallContextExt = {}> {
  /**
   * Returns Travel Asset suggestions. Asset
   * suggestions are returned on a best-effort basis. There are no guarantees
   * that all possible asset types will be returned for any given hotel
   * property.
   */
  suggestTravelAssets(
    request: SuggestTravelAssetsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SuggestTravelAssetsResponse>>;
}

export interface TravelAssetSuggestionServiceClient<CallOptionsExt = {}> {
  /**
   * Returns Travel Asset suggestions. Asset
   * suggestions are returned on a best-effort basis. There are no guarantees
   * that all possible asset types will be returned for any given hotel
   * property.
   */
  suggestTravelAssets(
    request: DeepPartial<SuggestTravelAssetsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SuggestTravelAssetsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
