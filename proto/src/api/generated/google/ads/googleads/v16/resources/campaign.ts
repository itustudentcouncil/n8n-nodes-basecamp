// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/campaign.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  Commission,
  ManualCpa,
  ManualCpc,
  ManualCpm,
  ManualCpv,
  MaximizeConversions,
  MaximizeConversionValue,
  PercentCpc,
  TargetCpa,
  TargetCpm,
  TargetImpressionShare,
  TargetRoas,
  TargetSpend,
} from "../common/bidding.js";
import { CustomParameter } from "../common/custom_parameter.js";
import { FrequencyCapEntry } from "../common/frequency_cap.js";
import { RealTimeBiddingSetting } from "../common/real_time_bidding_setting.js";
import { TargetingSetting } from "../common/targeting_setting.js";
import {
  AdServingOptimizationStatusEnum_AdServingOptimizationStatus,
  adServingOptimizationStatusEnum_AdServingOptimizationStatusFromJSON,
  adServingOptimizationStatusEnum_AdServingOptimizationStatusToJSON,
} from "../enums/ad_serving_optimization_status.js";
import {
  AdvertisingChannelSubTypeEnum_AdvertisingChannelSubType,
  advertisingChannelSubTypeEnum_AdvertisingChannelSubTypeFromJSON,
  advertisingChannelSubTypeEnum_AdvertisingChannelSubTypeToJSON,
} from "../enums/advertising_channel_sub_type.js";
import {
  AdvertisingChannelTypeEnum_AdvertisingChannelType,
  advertisingChannelTypeEnum_AdvertisingChannelTypeFromJSON,
  advertisingChannelTypeEnum_AdvertisingChannelTypeToJSON,
} from "../enums/advertising_channel_type.js";
import {
  AppCampaignAppStoreEnum_AppCampaignAppStore,
  appCampaignAppStoreEnum_AppCampaignAppStoreFromJSON,
  appCampaignAppStoreEnum_AppCampaignAppStoreToJSON,
} from "../enums/app_campaign_app_store.js";
import {
  AppCampaignBiddingStrategyGoalTypeEnum_AppCampaignBiddingStrategyGoalType,
  appCampaignBiddingStrategyGoalTypeEnum_AppCampaignBiddingStrategyGoalTypeFromJSON,
  appCampaignBiddingStrategyGoalTypeEnum_AppCampaignBiddingStrategyGoalTypeToJSON,
} from "../enums/app_campaign_bidding_strategy_goal_type.js";
import {
  AssetAutomationStatusEnum_AssetAutomationStatus,
  assetAutomationStatusEnum_AssetAutomationStatusFromJSON,
  assetAutomationStatusEnum_AssetAutomationStatusToJSON,
} from "../enums/asset_automation_status.js";
import {
  AssetAutomationTypeEnum_AssetAutomationType,
  assetAutomationTypeEnum_AssetAutomationTypeFromJSON,
  assetAutomationTypeEnum_AssetAutomationTypeToJSON,
} from "../enums/asset_automation_type.js";
import {
  AssetFieldTypeEnum_AssetFieldType,
  assetFieldTypeEnum_AssetFieldTypeFromJSON,
  assetFieldTypeEnum_AssetFieldTypeToJSON,
} from "../enums/asset_field_type.js";
import {
  AssetSetTypeEnum_AssetSetType,
  assetSetTypeEnum_AssetSetTypeFromJSON,
  assetSetTypeEnum_AssetSetTypeToJSON,
} from "../enums/asset_set_type.js";
import {
  BiddingStrategySystemStatusEnum_BiddingStrategySystemStatus,
  biddingStrategySystemStatusEnum_BiddingStrategySystemStatusFromJSON,
  biddingStrategySystemStatusEnum_BiddingStrategySystemStatusToJSON,
} from "../enums/bidding_strategy_system_status.js";
import {
  BiddingStrategyTypeEnum_BiddingStrategyType,
  biddingStrategyTypeEnum_BiddingStrategyTypeFromJSON,
  biddingStrategyTypeEnum_BiddingStrategyTypeToJSON,
} from "../enums/bidding_strategy_type.js";
import {
  BrandSafetySuitabilityEnum_BrandSafetySuitability,
  brandSafetySuitabilityEnum_BrandSafetySuitabilityFromJSON,
  brandSafetySuitabilityEnum_BrandSafetySuitabilityToJSON,
} from "../enums/brand_safety_suitability.js";
import {
  CampaignExperimentTypeEnum_CampaignExperimentType,
  campaignExperimentTypeEnum_CampaignExperimentTypeFromJSON,
  campaignExperimentTypeEnum_CampaignExperimentTypeToJSON,
} from "../enums/campaign_experiment_type.js";
import {
  CampaignPrimaryStatusEnum_CampaignPrimaryStatus,
  campaignPrimaryStatusEnum_CampaignPrimaryStatusFromJSON,
  campaignPrimaryStatusEnum_CampaignPrimaryStatusToJSON,
} from "../enums/campaign_primary_status.js";
import {
  CampaignPrimaryStatusReasonEnum_CampaignPrimaryStatusReason,
  campaignPrimaryStatusReasonEnum_CampaignPrimaryStatusReasonFromJSON,
  campaignPrimaryStatusReasonEnum_CampaignPrimaryStatusReasonToJSON,
} from "../enums/campaign_primary_status_reason.js";
import {
  CampaignServingStatusEnum_CampaignServingStatus,
  campaignServingStatusEnum_CampaignServingStatusFromJSON,
  campaignServingStatusEnum_CampaignServingStatusToJSON,
} from "../enums/campaign_serving_status.js";
import {
  CampaignStatusEnum_CampaignStatus,
  campaignStatusEnum_CampaignStatusFromJSON,
  campaignStatusEnum_CampaignStatusToJSON,
} from "../enums/campaign_status.js";
import {
  ListingTypeEnum_ListingType,
  listingTypeEnum_ListingTypeFromJSON,
  listingTypeEnum_ListingTypeToJSON,
} from "../enums/listing_type.js";
import {
  LocationSourceTypeEnum_LocationSourceType,
  locationSourceTypeEnum_LocationSourceTypeFromJSON,
  locationSourceTypeEnum_LocationSourceTypeToJSON,
} from "../enums/location_source_type.js";
import {
  NegativeGeoTargetTypeEnum_NegativeGeoTargetType,
  negativeGeoTargetTypeEnum_NegativeGeoTargetTypeFromJSON,
  negativeGeoTargetTypeEnum_NegativeGeoTargetTypeToJSON,
} from "../enums/negative_geo_target_type.js";
import {
  OptimizationGoalTypeEnum_OptimizationGoalType,
  optimizationGoalTypeEnum_OptimizationGoalTypeFromJSON,
  optimizationGoalTypeEnum_OptimizationGoalTypeToJSON,
} from "../enums/optimization_goal_type.js";
import {
  PaymentModeEnum_PaymentMode,
  paymentModeEnum_PaymentModeFromJSON,
  paymentModeEnum_PaymentModeToJSON,
} from "../enums/payment_mode.js";
import {
  PerformanceMaxUpgradeStatusEnum_PerformanceMaxUpgradeStatus,
  performanceMaxUpgradeStatusEnum_PerformanceMaxUpgradeStatusFromJSON,
  performanceMaxUpgradeStatusEnum_PerformanceMaxUpgradeStatusToJSON,
} from "../enums/performance_max_upgrade_status.js";
import {
  PositiveGeoTargetTypeEnum_PositiveGeoTargetType,
  positiveGeoTargetTypeEnum_PositiveGeoTargetTypeFromJSON,
  positiveGeoTargetTypeEnum_PositiveGeoTargetTypeToJSON,
} from "../enums/positive_geo_target_type.js";
import {
  VanityPharmaDisplayUrlModeEnum_VanityPharmaDisplayUrlMode,
  vanityPharmaDisplayUrlModeEnum_VanityPharmaDisplayUrlModeFromJSON,
  vanityPharmaDisplayUrlModeEnum_VanityPharmaDisplayUrlModeToJSON,
} from "../enums/vanity_pharma_display_url_mode.js";
import {
  VanityPharmaTextEnum_VanityPharmaText,
  vanityPharmaTextEnum_VanityPharmaTextFromJSON,
  vanityPharmaTextEnum_VanityPharmaTextToJSON,
} from "../enums/vanity_pharma_text.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/** A campaign. */
export interface Campaign {
  /**
   * Immutable. The resource name of the campaign.
   * Campaign resource names have the form:
   *
   * `customers/{customer_id}/campaigns/{campaign_id}`
   */
  resourceName: string;
  /** Output only. The ID of the campaign. */
  id?:
    | Long
    | undefined;
  /**
   * The name of the campaign.
   *
   * This field is required and should not be empty when creating new
   * campaigns.
   *
   * It must not contain any null (code point 0x0), NL line feed
   * (code point 0xA) or carriage return (code point 0xD) characters.
   */
  name?:
    | string
    | undefined;
  /**
   * Output only. The primary status of the campaign.
   *
   * Provides insight into why a campaign is not serving or not serving
   * optimally. Modification to the campaign and its related entities might take
   * a while to be reflected in this status.
   */
  primaryStatus: CampaignPrimaryStatusEnum_CampaignPrimaryStatus;
  /**
   * Output only. The primary status reasons of the campaign.
   *
   * Provides insight into why a campaign is not serving or not serving
   * optimally. These reasons are aggregated to determine an overall
   * CampaignPrimaryStatus.
   */
  primaryStatusReasons: CampaignPrimaryStatusReasonEnum_CampaignPrimaryStatusReason[];
  /**
   * The status of the campaign.
   *
   * When a new campaign is added, the status defaults to ENABLED.
   */
  status: CampaignStatusEnum_CampaignStatus;
  /** Output only. The ad serving status of the campaign. */
  servingStatus: CampaignServingStatusEnum_CampaignServingStatus;
  /** Output only. The system status of the campaign's bidding strategy. */
  biddingStrategySystemStatus: BiddingStrategySystemStatusEnum_BiddingStrategySystemStatus;
  /** The ad serving optimization status of the campaign. */
  adServingOptimizationStatus: AdServingOptimizationStatusEnum_AdServingOptimizationStatus;
  /**
   * Immutable. The primary serving target for ads within the campaign.
   * The targeting options can be refined in `network_settings`.
   *
   * This field is required and should not be empty when creating new
   * campaigns.
   *
   * Can be set only when creating campaigns.
   * After the campaign is created, the field can not be changed.
   */
  advertisingChannelType: AdvertisingChannelTypeEnum_AdvertisingChannelType;
  /**
   * Immutable. Optional refinement to `advertising_channel_type`.
   * Must be a valid sub-type of the parent channel type.
   *
   * Can be set only when creating campaigns.
   * After campaign is created, the field can not be changed.
   */
  advertisingChannelSubType: AdvertisingChannelSubTypeEnum_AdvertisingChannelSubType;
  /** The URL template for constructing a tracking URL. */
  trackingUrlTemplate?:
    | string
    | undefined;
  /**
   * The list of mappings used to substitute custom parameter tags in a
   * `tracking_url_template`, `final_urls`, or `mobile_final_urls`.
   */
  urlCustomParameters: CustomParameter[];
  /** The Local Services Campaign related settings. */
  localServicesCampaignSettings:
    | Campaign_LocalServicesCampaignSettings
    | undefined;
  /** Settings for Travel campaign. */
  travelCampaignSettings:
    | Campaign_TravelCampaignSettings
    | undefined;
  /** Settings for Discovery campaign. */
  discoveryCampaignSettings:
    | Campaign_DiscoveryCampaignSettings
    | undefined;
  /**
   * Settings for Real-Time Bidding, a feature only available for campaigns
   * targeting the Ad Exchange network.
   */
  realTimeBiddingSetting:
    | RealTimeBiddingSetting
    | undefined;
  /** The network settings for the campaign. */
  networkSettings:
    | Campaign_NetworkSettings
    | undefined;
  /** Immutable. The hotel setting for the campaign. */
  hotelSetting:
    | Campaign_HotelSettingInfo
    | undefined;
  /** The setting for controlling Dynamic Search Ads (DSA). */
  dynamicSearchAdsSetting:
    | Campaign_DynamicSearchAdsSetting
    | undefined;
  /** The setting for controlling Shopping campaigns. */
  shoppingSetting:
    | Campaign_ShoppingSetting
    | undefined;
  /** Setting for targeting related features. */
  targetingSetting:
    | TargetingSetting
    | undefined;
  /** Immutable. Setting for audience related features. */
  audienceSetting?:
    | Campaign_AudienceSetting
    | undefined;
  /** The setting for ads geotargeting. */
  geoTargetTypeSetting:
    | Campaign_GeoTargetTypeSetting
    | undefined;
  /** The setting for local campaign. */
  localCampaignSetting:
    | Campaign_LocalCampaignSetting
    | undefined;
  /** The setting related to App Campaign. */
  appCampaignSetting:
    | Campaign_AppCampaignSetting
    | undefined;
  /** Output only. The resource names of labels attached to this campaign. */
  labels: string[];
  /** Output only. The type of campaign: normal, draft, or experiment. */
  experimentType: CampaignExperimentTypeEnum_CampaignExperimentType;
  /**
   * Output only. The resource name of the base campaign of a draft or
   * experiment campaign. For base campaigns, this is equal to `resource_name`.
   *
   * This field is read-only.
   */
  baseCampaign?:
    | string
    | undefined;
  /** The budget of the campaign. */
  campaignBudget?:
    | string
    | undefined;
  /**
   * Output only. The type of bidding strategy.
   *
   * A bidding strategy can be created by setting either the bidding scheme to
   * create a standard bidding strategy or the `bidding_strategy` field to
   * create a portfolio bidding strategy.
   *
   * This field is read-only.
   */
  biddingStrategyType: BiddingStrategyTypeEnum_BiddingStrategyType;
  /**
   * Output only. Resource name of AccessibleBiddingStrategy, a read-only view
   * of the unrestricted attributes of the attached portfolio bidding strategy
   * identified by 'bidding_strategy'. Empty, if the campaign does not use a
   * portfolio strategy. Unrestricted strategy attributes are available to all
   * customers with whom the strategy is shared and are read from the
   * AccessibleBiddingStrategy resource. In contrast, restricted attributes are
   * only available to the owner customer of the strategy and their managers.
   * Restricted attributes can only be read from the BiddingStrategy resource.
   */
  accessibleBiddingStrategy: string;
  /**
   * The date when campaign started in serving customer's timezone in YYYY-MM-DD
   * format.
   */
  startDate?:
    | string
    | undefined;
  /** The campaign group this campaign belongs to. */
  campaignGroup?:
    | string
    | undefined;
  /**
   * The last day of the campaign in serving customer's timezone in YYYY-MM-DD
   * format. On create, defaults to 2037-12-30, which means the campaign will
   * run indefinitely. To set an existing campaign to run indefinitely, set this
   * field to 2037-12-30.
   */
  endDate?:
    | string
    | undefined;
  /**
   * Suffix used to append query parameters to landing pages that are served
   * with parallel tracking.
   */
  finalUrlSuffix?:
    | string
    | undefined;
  /** A list that limits how often each user will see this campaign's ads. */
  frequencyCaps: FrequencyCapEntry[];
  /**
   * Output only. Brand Safety setting at the individual campaign level. Allows
   * for selecting an inventory type to show your ads on content that is the
   * right fit for your brand. See
   * https://support.google.com/google-ads/answer/7515513.
   */
  videoBrandSafetySuitability: BrandSafetySuitabilityEnum_BrandSafetySuitability;
  /** Describes how unbranded pharma ads will be displayed. */
  vanityPharma:
    | Campaign_VanityPharma
    | undefined;
  /**
   * Selective optimization setting for this campaign, which includes a set of
   * conversion actions to optimize this campaign towards.
   * This feature only applies to app campaigns that use MULTI_CHANNEL as
   * AdvertisingChannelType and APP_CAMPAIGN or APP_CAMPAIGN_FOR_ENGAGEMENT as
   * AdvertisingChannelSubType.
   */
  selectiveOptimization:
    | Campaign_SelectiveOptimization
    | undefined;
  /**
   * Optimization goal setting for this campaign, which includes a set of
   * optimization goal types.
   */
  optimizationGoalSetting:
    | Campaign_OptimizationGoalSetting
    | undefined;
  /** Output only. Campaign-level settings for tracking information. */
  trackingSetting:
    | Campaign_TrackingSetting
    | undefined;
  /** Payment mode for the campaign. */
  paymentMode: PaymentModeEnum_PaymentMode;
  /**
   * Output only. Optimization score of the campaign.
   *
   * Optimization score is an estimate of how well a campaign is set to perform.
   * It ranges from 0% (0.0) to 100% (1.0), with 100% indicating that the
   * campaign is performing at full potential. This field is null for unscored
   * campaigns.
   *
   * See "About optimization score" at
   * https://support.google.com/google-ads/answer/9061546.
   *
   * This field is read-only.
   */
  optimizationScore?:
    | number
    | undefined;
  /**
   * The asset field types that should be excluded from this campaign. Asset
   * links with these field types will not be inherited by this campaign from
   * the upper level.
   */
  excludedParentAssetFieldTypes: AssetFieldTypeEnum_AssetFieldType[];
  /**
   * The asset set types that should be excluded from this campaign. Asset set
   * links with these types will not be inherited by this campaign from
   * the upper level.
   * Location group types (GMB_DYNAMIC_LOCATION_GROUP,
   * CHAIN_DYNAMIC_LOCATION_GROUP, and STATIC_LOCATION_GROUP) are child types of
   * LOCATION_SYNC. Therefore, if LOCATION_SYNC is set for this field, all
   * location group asset sets are not allowed to be linked to this campaign,
   * and all Location Extension (LE) and Affiliate Location Extensions (ALE)
   * will not be served under this campaign.
   * Only LOCATION_SYNC is currently supported.
   */
  excludedParentAssetSetTypes: AssetSetTypeEnum_AssetSetType[];
  /**
   * Represents opting out of URL expansion to more targeted URLs. If opted out
   * (true), only the final URLs in the asset group or URLs specified in the
   * advertiser's Google Merchant Center or business data feeds are targeted.
   * If opted in (false), the entire domain will be targeted. This field can
   * only be set for Performance Max campaigns, where the default value is
   * false.
   */
  urlExpansionOptOut?:
    | boolean
    | undefined;
  /** Output only. Information about campaigns being upgraded to Performance Max. */
  performanceMaxUpgrade:
    | Campaign_PerformanceMaxUpgrade
    | undefined;
  /**
   * Immutable. The set of hotel properties for Performance Max for travel goals
   * campaigns.
   */
  hotelPropertyAssetSet?:
    | string
    | undefined;
  /**
   * Immutable. Listing type of ads served for this campaign.
   * Field is restricted for usage with Performance Max campaigns.
   */
  listingType?:
    | ListingTypeEnum_ListingType
    | undefined;
  /**
   * Contains the opt-in/out status of each AssetAutomationType.
   * See documentation of each asset automation type enum for default
   * opt in/out behavior.
   */
  assetAutomationSettings: Campaign_AssetAutomationSetting[];
  /** Portfolio bidding strategy used by campaign. */
  biddingStrategy?:
    | string
    | undefined;
  /**
   * Commission is an automatic bidding strategy in which the advertiser pays
   * a certain portion of the conversion value.
   */
  commission?:
    | Commission
    | undefined;
  /**
   * Standard Manual CPA bidding strategy.
   * Manual bidding strategy that allows advertiser to set the bid per
   * advertiser-specified action. Supported only for Local Services campaigns.
   */
  manualCpa?:
    | ManualCpa
    | undefined;
  /**
   * Standard Manual CPC bidding strategy.
   * Manual click-based bidding where user pays per click.
   */
  manualCpc?:
    | ManualCpc
    | undefined;
  /**
   * Standard Manual CPM bidding strategy.
   * Manual impression-based bidding where user pays per thousand
   * impressions.
   */
  manualCpm?:
    | ManualCpm
    | undefined;
  /** A bidding strategy that pays a configurable amount per video view. */
  manualCpv?:
    | ManualCpv
    | undefined;
  /**
   * Standard Maximize Conversions bidding strategy that automatically
   * maximizes number of conversions while spending your budget.
   */
  maximizeConversions?:
    | MaximizeConversions
    | undefined;
  /**
   * Standard Maximize Conversion Value bidding strategy that automatically
   * sets bids to maximize revenue while spending your budget.
   */
  maximizeConversionValue?:
    | MaximizeConversionValue
    | undefined;
  /**
   * Standard Target CPA bidding strategy that automatically sets bids to
   * help get as many conversions as possible at the target
   * cost-per-acquisition (CPA) you set.
   */
  targetCpa?:
    | TargetCpa
    | undefined;
  /**
   * Target Impression Share bidding strategy. An automated bidding strategy
   * that sets bids to achieve a chosen percentage of impressions.
   */
  targetImpressionShare?:
    | TargetImpressionShare
    | undefined;
  /**
   * Standard Target ROAS bidding strategy that automatically maximizes
   * revenue while averaging a specific target return on ad spend (ROAS).
   */
  targetRoas?:
    | TargetRoas
    | undefined;
  /**
   * Standard Target Spend bidding strategy that automatically sets your bids
   * to help get as many clicks as possible within your budget.
   */
  targetSpend?:
    | TargetSpend
    | undefined;
  /**
   * Standard Percent Cpc bidding strategy where bids are a fraction of the
   * advertised price for some good or service.
   */
  percentCpc?:
    | PercentCpc
    | undefined;
  /**
   * A bidding strategy that automatically optimizes cost per thousand
   * impressions.
   */
  targetCpm?: TargetCpm | undefined;
}

/** Information about a campaign being upgraded to Performance Max. */
export interface Campaign_PerformanceMaxUpgrade {
  /**
   * Output only. Indicates which Performance Max campaign the campaign is
   * upgraded to.
   */
  performanceMaxCampaign: string;
  /** Output only. Indicates legacy campaign upgraded to Performance Max. */
  preUpgradeCampaign: string;
  /**
   * Output only. The upgrade status of a campaign requested to be upgraded to
   * Performance Max.
   */
  status: PerformanceMaxUpgradeStatusEnum_PerformanceMaxUpgradeStatus;
}

/** The network settings for the campaign. */
export interface Campaign_NetworkSettings {
  /** Whether ads will be served with google.com search results. */
  targetGoogleSearch?:
    | boolean
    | undefined;
  /**
   * Whether ads will be served on partner sites in the Google Search Network
   * (requires `target_google_search` to also be `true`).
   */
  targetSearchNetwork?:
    | boolean
    | undefined;
  /**
   * Whether ads will be served on specified placements in the Google Display
   * Network. Placements are specified using the Placement criterion.
   */
  targetContentNetwork?:
    | boolean
    | undefined;
  /**
   * Whether ads will be served on the Google Partner Network.
   * This is available only to some select Google partner accounts.
   */
  targetPartnerSearchNetwork?:
    | boolean
    | undefined;
  /** Whether ads will be served on YouTube. */
  targetYoutube?:
    | boolean
    | undefined;
  /** Whether ads will be served on the Google TV network. */
  targetGoogleTvNetwork?: boolean | undefined;
}

/** Campaign-level settings for hotel ads. */
export interface Campaign_HotelSettingInfo {
  /** Immutable. The linked Hotel Center account. */
  hotelCenterId?: Long | undefined;
}

/** The setting for controlling Dynamic Search Ads (DSA). */
export interface Campaign_DynamicSearchAdsSetting {
  /**
   * Required. The Internet domain name that this setting represents, for
   * example, "google.com" or "www.google.com".
   */
  domainName: string;
  /**
   * Required. The language code specifying the language of the domain, for
   * example, "en".
   */
  languageCode: string;
  /** Whether the campaign uses advertiser supplied URLs exclusively. */
  useSuppliedUrlsOnly?:
    | boolean
    | undefined;
  /** The list of page feeds associated with the campaign. */
  feeds: string[];
}

/**
 * The setting for Shopping campaigns. Defines the universe of products that
 * can be advertised by the campaign, and how this campaign interacts with
 * other Shopping campaigns.
 */
export interface Campaign_ShoppingSetting {
  /**
   * ID of the Merchant Center account.
   * This field is required for create operations. This field is immutable for
   * Shopping campaigns.
   */
  merchantId?:
    | Long
    | undefined;
  /**
   * Feed label of products to include in the campaign.
   * Only one of feed_label or sales_country can be set.
   * If used instead of sales_country, the feed_label field accepts country
   * codes in the same format for example: 'XX'.
   * Otherwise can be any string used for feed label in Google Merchant
   * Center.
   */
  feedLabel: string;
  /**
   * Priority of the campaign. Campaigns with numerically higher priorities
   * take precedence over those with lower priorities.
   * This field is required for Shopping campaigns, with values between 0 and
   * 2, inclusive.
   * This field is optional for Smart Shopping campaigns, but must be equal to
   * 3 if set.
   */
  campaignPriority?:
    | number
    | undefined;
  /** Whether to include local products. */
  enableLocal?:
    | boolean
    | undefined;
  /**
   * Immutable. Whether to target Vehicle Listing inventory. This field is
   * supported only in Smart Shopping Campaigns. For setting Vehicle Listing
   * inventory in Performance Max campaigns, use `listing_type` instead.
   */
  useVehicleInventory: boolean;
  /**
   * Immutable. The ads account IDs of advertising partners cooperating within
   * the campaign.
   */
  advertisingPartnerIds: Long[];
  /**
   * Disable the optional product feed. This field is currently supported
   * only for Demand Gen campaigns. See
   * https://support.google.com/google-ads/answer/13721750 to learn more about
   * this feature.
   */
  disableProductFeed?: boolean | undefined;
}

/** Campaign-level settings for tracking information. */
export interface Campaign_TrackingSetting {
  /** Output only. The url used for dynamic tracking. */
  trackingUrl?: string | undefined;
}

/** Represents a collection of settings related to ads geotargeting. */
export interface Campaign_GeoTargetTypeSetting {
  /** The setting used for positive geotargeting in this particular campaign. */
  positiveGeoTargetType: PositiveGeoTargetTypeEnum_PositiveGeoTargetType;
  /** The setting used for negative geotargeting in this particular campaign. */
  negativeGeoTargetType: NegativeGeoTargetTypeEnum_NegativeGeoTargetType;
}

/** Campaign setting for local campaigns. */
export interface Campaign_LocalCampaignSetting {
  /** The location source type for this local campaign. */
  locationSourceType: LocationSourceTypeEnum_LocationSourceType;
}

/** Campaign-level settings for App Campaigns. */
export interface Campaign_AppCampaignSetting {
  /**
   * Represents the goal which the bidding strategy of this app campaign
   * should optimize towards.
   */
  biddingStrategyGoalType: AppCampaignBiddingStrategyGoalTypeEnum_AppCampaignBiddingStrategyGoalType;
  /** Immutable. A string that uniquely identifies a mobile application. */
  appId?:
    | string
    | undefined;
  /** Immutable. The application store that distributes this specific app. */
  appStore: AppCampaignAppStoreEnum_AppCampaignAppStore;
}

/** Describes how unbranded pharma ads will be displayed. */
export interface Campaign_VanityPharma {
  /** The display mode for vanity pharma URLs. */
  vanityPharmaDisplayUrlMode: VanityPharmaDisplayUrlModeEnum_VanityPharmaDisplayUrlMode;
  /**
   * The text that will be displayed in display URL of the text ad when
   * website description is the selected display mode for vanity pharma URLs.
   */
  vanityPharmaText: VanityPharmaTextEnum_VanityPharmaText;
}

/**
 * Selective optimization setting for this campaign, which includes a set of
 * conversion actions to optimize this campaign towards.
 * This feature only applies to app campaigns that use MULTI_CHANNEL as
 * AdvertisingChannelType and APP_CAMPAIGN or APP_CAMPAIGN_FOR_ENGAGEMENT as
 * AdvertisingChannelSubType.
 */
export interface Campaign_SelectiveOptimization {
  /** The selected set of conversion actions for optimizing this campaign. */
  conversionActions: string[];
}

/**
 * Optimization goal setting for this campaign, which includes a set of
 * optimization goal types.
 */
export interface Campaign_OptimizationGoalSetting {
  /** The list of optimization goal types. */
  optimizationGoalTypes: OptimizationGoalTypeEnum_OptimizationGoalType[];
}

/** Settings for the audience targeting. */
export interface Campaign_AudienceSetting {
  /**
   * Immutable. If true, this campaign uses an Audience resource for audience
   * targeting. If false, this campaign may use audience segment criteria
   * instead.
   */
  useAudienceGrouped?: boolean | undefined;
}

/** Settings for LocalServicesCampaign subresource. */
export interface Campaign_LocalServicesCampaignSettings {
  /** Categorical level bids associated with MANUAL_CPA bidding strategy. */
  categoryBids: Campaign_CategoryBid[];
}

/** Category bids in LocalServicesReportingCampaignSettings. */
export interface Campaign_CategoryBid {
  /**
   * Category for which the bid will be associated with. For example,
   * xcat:service_area_business_plumber.
   */
  categoryId?:
    | string
    | undefined;
  /**
   * Manual CPA bid for the category. Bid must be greater than the
   * reserve price associated for that category. Value is in micros
   * and in the advertiser's currency.
   */
  manualCpaBidMicros?: Long | undefined;
}

/** Settings for Travel campaign. */
export interface Campaign_TravelCampaignSettings {
  /** Immutable. The Travel account ID associated with the Travel campaign. */
  travelAccountId?: Long | undefined;
}

/** Settings for Discovery campaign. */
export interface Campaign_DiscoveryCampaignSettings {
  /**
   * Immutable. Specifies whether this campaign uses upgraded targeting
   * options. When this field is set to `true`, you can use location and
   * language targeting at the ad group level as opposed to the standard
   * campaign-level targeting. This field defaults to `false`, and can only be
   * set when creating a campaign.
   */
  upgradedTargeting?: boolean | undefined;
}

/**
 * Asset automation setting contains pair of AssetAutomationType and the
 * asset automation opt-in/out status
 */
export interface Campaign_AssetAutomationSetting {
  /** The asset automation type advertiser would like to opt-in/out. */
  assetAutomationType?:
    | AssetAutomationTypeEnum_AssetAutomationType
    | undefined;
  /** The opt-in/out status of asset automation type. */
  assetAutomationStatus?: AssetAutomationStatusEnum_AssetAutomationStatus | undefined;
}

function createBaseCampaign(): Campaign {
  return {
    resourceName: "",
    id: undefined,
    name: undefined,
    primaryStatus: 0,
    primaryStatusReasons: [],
    status: 0,
    servingStatus: 0,
    biddingStrategySystemStatus: 0,
    adServingOptimizationStatus: 0,
    advertisingChannelType: 0,
    advertisingChannelSubType: 0,
    trackingUrlTemplate: undefined,
    urlCustomParameters: [],
    localServicesCampaignSettings: undefined,
    travelCampaignSettings: undefined,
    discoveryCampaignSettings: undefined,
    realTimeBiddingSetting: undefined,
    networkSettings: undefined,
    hotelSetting: undefined,
    dynamicSearchAdsSetting: undefined,
    shoppingSetting: undefined,
    targetingSetting: undefined,
    audienceSetting: undefined,
    geoTargetTypeSetting: undefined,
    localCampaignSetting: undefined,
    appCampaignSetting: undefined,
    labels: [],
    experimentType: 0,
    baseCampaign: undefined,
    campaignBudget: undefined,
    biddingStrategyType: 0,
    accessibleBiddingStrategy: "",
    startDate: undefined,
    campaignGroup: undefined,
    endDate: undefined,
    finalUrlSuffix: undefined,
    frequencyCaps: [],
    videoBrandSafetySuitability: 0,
    vanityPharma: undefined,
    selectiveOptimization: undefined,
    optimizationGoalSetting: undefined,
    trackingSetting: undefined,
    paymentMode: 0,
    optimizationScore: undefined,
    excludedParentAssetFieldTypes: [],
    excludedParentAssetSetTypes: [],
    urlExpansionOptOut: undefined,
    performanceMaxUpgrade: undefined,
    hotelPropertyAssetSet: undefined,
    listingType: undefined,
    assetAutomationSettings: [],
    biddingStrategy: undefined,
    commission: undefined,
    manualCpa: undefined,
    manualCpc: undefined,
    manualCpm: undefined,
    manualCpv: undefined,
    maximizeConversions: undefined,
    maximizeConversionValue: undefined,
    targetCpa: undefined,
    targetImpressionShare: undefined,
    targetRoas: undefined,
    targetSpend: undefined,
    percentCpc: undefined,
    targetCpm: undefined,
  };
}

export const Campaign: MessageFns<Campaign> = {
  encode(message: Campaign, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(472).int64(message.id.toString());
    }
    if (message.name !== undefined) {
      writer.uint32(466).string(message.name);
    }
    if (message.primaryStatus !== 0) {
      writer.uint32(648).int32(message.primaryStatus);
    }
    writer.uint32(658).fork();
    for (const v of message.primaryStatusReasons) {
      writer.int32(v);
    }
    writer.join();
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.servingStatus !== 0) {
      writer.uint32(168).int32(message.servingStatus);
    }
    if (message.biddingStrategySystemStatus !== 0) {
      writer.uint32(624).int32(message.biddingStrategySystemStatus);
    }
    if (message.adServingOptimizationStatus !== 0) {
      writer.uint32(64).int32(message.adServingOptimizationStatus);
    }
    if (message.advertisingChannelType !== 0) {
      writer.uint32(72).int32(message.advertisingChannelType);
    }
    if (message.advertisingChannelSubType !== 0) {
      writer.uint32(80).int32(message.advertisingChannelSubType);
    }
    if (message.trackingUrlTemplate !== undefined) {
      writer.uint32(482).string(message.trackingUrlTemplate);
    }
    for (const v of message.urlCustomParameters) {
      CustomParameter.encode(v!, writer.uint32(98).fork()).join();
    }
    if (message.localServicesCampaignSettings !== undefined) {
      Campaign_LocalServicesCampaignSettings.encode(message.localServicesCampaignSettings, writer.uint32(602).fork())
        .join();
    }
    if (message.travelCampaignSettings !== undefined) {
      Campaign_TravelCampaignSettings.encode(message.travelCampaignSettings, writer.uint32(682).fork()).join();
    }
    if (message.discoveryCampaignSettings !== undefined) {
      Campaign_DiscoveryCampaignSettings.encode(message.discoveryCampaignSettings, writer.uint32(698).fork()).join();
    }
    if (message.realTimeBiddingSetting !== undefined) {
      RealTimeBiddingSetting.encode(message.realTimeBiddingSetting, writer.uint32(314).fork()).join();
    }
    if (message.networkSettings !== undefined) {
      Campaign_NetworkSettings.encode(message.networkSettings, writer.uint32(114).fork()).join();
    }
    if (message.hotelSetting !== undefined) {
      Campaign_HotelSettingInfo.encode(message.hotelSetting, writer.uint32(258).fork()).join();
    }
    if (message.dynamicSearchAdsSetting !== undefined) {
      Campaign_DynamicSearchAdsSetting.encode(message.dynamicSearchAdsSetting, writer.uint32(266).fork()).join();
    }
    if (message.shoppingSetting !== undefined) {
      Campaign_ShoppingSetting.encode(message.shoppingSetting, writer.uint32(290).fork()).join();
    }
    if (message.targetingSetting !== undefined) {
      TargetingSetting.encode(message.targetingSetting, writer.uint32(346).fork()).join();
    }
    if (message.audienceSetting !== undefined) {
      Campaign_AudienceSetting.encode(message.audienceSetting, writer.uint32(586).fork()).join();
    }
    if (message.geoTargetTypeSetting !== undefined) {
      Campaign_GeoTargetTypeSetting.encode(message.geoTargetTypeSetting, writer.uint32(378).fork()).join();
    }
    if (message.localCampaignSetting !== undefined) {
      Campaign_LocalCampaignSetting.encode(message.localCampaignSetting, writer.uint32(402).fork()).join();
    }
    if (message.appCampaignSetting !== undefined) {
      Campaign_AppCampaignSetting.encode(message.appCampaignSetting, writer.uint32(410).fork()).join();
    }
    for (const v of message.labels) {
      writer.uint32(490).string(v!);
    }
    if (message.experimentType !== 0) {
      writer.uint32(136).int32(message.experimentType);
    }
    if (message.baseCampaign !== undefined) {
      writer.uint32(450).string(message.baseCampaign);
    }
    if (message.campaignBudget !== undefined) {
      writer.uint32(498).string(message.campaignBudget);
    }
    if (message.biddingStrategyType !== 0) {
      writer.uint32(176).int32(message.biddingStrategyType);
    }
    if (message.accessibleBiddingStrategy !== "") {
      writer.uint32(570).string(message.accessibleBiddingStrategy);
    }
    if (message.startDate !== undefined) {
      writer.uint32(506).string(message.startDate);
    }
    if (message.campaignGroup !== undefined) {
      writer.uint32(610).string(message.campaignGroup);
    }
    if (message.endDate !== undefined) {
      writer.uint32(514).string(message.endDate);
    }
    if (message.finalUrlSuffix !== undefined) {
      writer.uint32(522).string(message.finalUrlSuffix);
    }
    for (const v of message.frequencyCaps) {
      FrequencyCapEntry.encode(v!, writer.uint32(322).fork()).join();
    }
    if (message.videoBrandSafetySuitability !== 0) {
      writer.uint32(336).int32(message.videoBrandSafetySuitability);
    }
    if (message.vanityPharma !== undefined) {
      Campaign_VanityPharma.encode(message.vanityPharma, writer.uint32(354).fork()).join();
    }
    if (message.selectiveOptimization !== undefined) {
      Campaign_SelectiveOptimization.encode(message.selectiveOptimization, writer.uint32(362).fork()).join();
    }
    if (message.optimizationGoalSetting !== undefined) {
      Campaign_OptimizationGoalSetting.encode(message.optimizationGoalSetting, writer.uint32(434).fork()).join();
    }
    if (message.trackingSetting !== undefined) {
      Campaign_TrackingSetting.encode(message.trackingSetting, writer.uint32(370).fork()).join();
    }
    if (message.paymentMode !== 0) {
      writer.uint32(416).int32(message.paymentMode);
    }
    if (message.optimizationScore !== undefined) {
      writer.uint32(529).double(message.optimizationScore);
    }
    writer.uint32(554).fork();
    for (const v of message.excludedParentAssetFieldTypes) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(642).fork();
    for (const v of message.excludedParentAssetSetTypes) {
      writer.int32(v);
    }
    writer.join();
    if (message.urlExpansionOptOut !== undefined) {
      writer.uint32(576).bool(message.urlExpansionOptOut);
    }
    if (message.performanceMaxUpgrade !== undefined) {
      Campaign_PerformanceMaxUpgrade.encode(message.performanceMaxUpgrade, writer.uint32(618).fork()).join();
    }
    if (message.hotelPropertyAssetSet !== undefined) {
      writer.uint32(666).string(message.hotelPropertyAssetSet);
    }
    if (message.listingType !== undefined) {
      writer.uint32(688).int32(message.listingType);
    }
    for (const v of message.assetAutomationSettings) {
      Campaign_AssetAutomationSetting.encode(v!, writer.uint32(706).fork()).join();
    }
    if (message.biddingStrategy !== undefined) {
      writer.uint32(538).string(message.biddingStrategy);
    }
    if (message.commission !== undefined) {
      Commission.encode(message.commission, writer.uint32(394).fork()).join();
    }
    if (message.manualCpa !== undefined) {
      ManualCpa.encode(message.manualCpa, writer.uint32(594).fork()).join();
    }
    if (message.manualCpc !== undefined) {
      ManualCpc.encode(message.manualCpc, writer.uint32(194).fork()).join();
    }
    if (message.manualCpm !== undefined) {
      ManualCpm.encode(message.manualCpm, writer.uint32(202).fork()).join();
    }
    if (message.manualCpv !== undefined) {
      ManualCpv.encode(message.manualCpv, writer.uint32(298).fork()).join();
    }
    if (message.maximizeConversions !== undefined) {
      MaximizeConversions.encode(message.maximizeConversions, writer.uint32(242).fork()).join();
    }
    if (message.maximizeConversionValue !== undefined) {
      MaximizeConversionValue.encode(message.maximizeConversionValue, writer.uint32(250).fork()).join();
    }
    if (message.targetCpa !== undefined) {
      TargetCpa.encode(message.targetCpa, writer.uint32(210).fork()).join();
    }
    if (message.targetImpressionShare !== undefined) {
      TargetImpressionShare.encode(message.targetImpressionShare, writer.uint32(386).fork()).join();
    }
    if (message.targetRoas !== undefined) {
      TargetRoas.encode(message.targetRoas, writer.uint32(234).fork()).join();
    }
    if (message.targetSpend !== undefined) {
      TargetSpend.encode(message.targetSpend, writer.uint32(218).fork()).join();
    }
    if (message.percentCpc !== undefined) {
      PercentCpc.encode(message.percentCpc, writer.uint32(274).fork()).join();
    }
    if (message.targetCpm !== undefined) {
      TargetCpm.encode(message.targetCpm, writer.uint32(330).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 59:
          if (tag !== 472) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 58:
          if (tag !== 466) {
            break;
          }

          message.name = reader.string();
          continue;
        case 81:
          if (tag !== 648) {
            break;
          }

          message.primaryStatus = reader.int32() as any;
          continue;
        case 82:
          if (tag === 656) {
            message.primaryStatusReasons.push(reader.int32() as any);

            continue;
          }

          if (tag === 658) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.primaryStatusReasons.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.servingStatus = reader.int32() as any;
          continue;
        case 78:
          if (tag !== 624) {
            break;
          }

          message.biddingStrategySystemStatus = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.adServingOptimizationStatus = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.advertisingChannelType = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.advertisingChannelSubType = reader.int32() as any;
          continue;
        case 60:
          if (tag !== 482) {
            break;
          }

          message.trackingUrlTemplate = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.urlCustomParameters.push(CustomParameter.decode(reader, reader.uint32()));
          continue;
        case 75:
          if (tag !== 602) {
            break;
          }

          message.localServicesCampaignSettings = Campaign_LocalServicesCampaignSettings.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 85:
          if (tag !== 682) {
            break;
          }

          message.travelCampaignSettings = Campaign_TravelCampaignSettings.decode(reader, reader.uint32());
          continue;
        case 87:
          if (tag !== 698) {
            break;
          }

          message.discoveryCampaignSettings = Campaign_DiscoveryCampaignSettings.decode(reader, reader.uint32());
          continue;
        case 39:
          if (tag !== 314) {
            break;
          }

          message.realTimeBiddingSetting = RealTimeBiddingSetting.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.networkSettings = Campaign_NetworkSettings.decode(reader, reader.uint32());
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.hotelSetting = Campaign_HotelSettingInfo.decode(reader, reader.uint32());
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.dynamicSearchAdsSetting = Campaign_DynamicSearchAdsSetting.decode(reader, reader.uint32());
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }

          message.shoppingSetting = Campaign_ShoppingSetting.decode(reader, reader.uint32());
          continue;
        case 43:
          if (tag !== 346) {
            break;
          }

          message.targetingSetting = TargetingSetting.decode(reader, reader.uint32());
          continue;
        case 73:
          if (tag !== 586) {
            break;
          }

          message.audienceSetting = Campaign_AudienceSetting.decode(reader, reader.uint32());
          continue;
        case 47:
          if (tag !== 378) {
            break;
          }

          message.geoTargetTypeSetting = Campaign_GeoTargetTypeSetting.decode(reader, reader.uint32());
          continue;
        case 50:
          if (tag !== 402) {
            break;
          }

          message.localCampaignSetting = Campaign_LocalCampaignSetting.decode(reader, reader.uint32());
          continue;
        case 51:
          if (tag !== 410) {
            break;
          }

          message.appCampaignSetting = Campaign_AppCampaignSetting.decode(reader, reader.uint32());
          continue;
        case 61:
          if (tag !== 490) {
            break;
          }

          message.labels.push(reader.string());
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.experimentType = reader.int32() as any;
          continue;
        case 56:
          if (tag !== 450) {
            break;
          }

          message.baseCampaign = reader.string();
          continue;
        case 62:
          if (tag !== 498) {
            break;
          }

          message.campaignBudget = reader.string();
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.biddingStrategyType = reader.int32() as any;
          continue;
        case 71:
          if (tag !== 570) {
            break;
          }

          message.accessibleBiddingStrategy = reader.string();
          continue;
        case 63:
          if (tag !== 506) {
            break;
          }

          message.startDate = reader.string();
          continue;
        case 76:
          if (tag !== 610) {
            break;
          }

          message.campaignGroup = reader.string();
          continue;
        case 64:
          if (tag !== 514) {
            break;
          }

          message.endDate = reader.string();
          continue;
        case 65:
          if (tag !== 522) {
            break;
          }

          message.finalUrlSuffix = reader.string();
          continue;
        case 40:
          if (tag !== 322) {
            break;
          }

          message.frequencyCaps.push(FrequencyCapEntry.decode(reader, reader.uint32()));
          continue;
        case 42:
          if (tag !== 336) {
            break;
          }

          message.videoBrandSafetySuitability = reader.int32() as any;
          continue;
        case 44:
          if (tag !== 354) {
            break;
          }

          message.vanityPharma = Campaign_VanityPharma.decode(reader, reader.uint32());
          continue;
        case 45:
          if (tag !== 362) {
            break;
          }

          message.selectiveOptimization = Campaign_SelectiveOptimization.decode(reader, reader.uint32());
          continue;
        case 54:
          if (tag !== 434) {
            break;
          }

          message.optimizationGoalSetting = Campaign_OptimizationGoalSetting.decode(reader, reader.uint32());
          continue;
        case 46:
          if (tag !== 370) {
            break;
          }

          message.trackingSetting = Campaign_TrackingSetting.decode(reader, reader.uint32());
          continue;
        case 52:
          if (tag !== 416) {
            break;
          }

          message.paymentMode = reader.int32() as any;
          continue;
        case 66:
          if (tag !== 529) {
            break;
          }

          message.optimizationScore = reader.double();
          continue;
        case 69:
          if (tag === 552) {
            message.excludedParentAssetFieldTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 554) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.excludedParentAssetFieldTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 80:
          if (tag === 640) {
            message.excludedParentAssetSetTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 642) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.excludedParentAssetSetTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 72:
          if (tag !== 576) {
            break;
          }

          message.urlExpansionOptOut = reader.bool();
          continue;
        case 77:
          if (tag !== 618) {
            break;
          }

          message.performanceMaxUpgrade = Campaign_PerformanceMaxUpgrade.decode(reader, reader.uint32());
          continue;
        case 83:
          if (tag !== 666) {
            break;
          }

          message.hotelPropertyAssetSet = reader.string();
          continue;
        case 86:
          if (tag !== 688) {
            break;
          }

          message.listingType = reader.int32() as any;
          continue;
        case 88:
          if (tag !== 706) {
            break;
          }

          message.assetAutomationSettings.push(Campaign_AssetAutomationSetting.decode(reader, reader.uint32()));
          continue;
        case 67:
          if (tag !== 538) {
            break;
          }

          message.biddingStrategy = reader.string();
          continue;
        case 49:
          if (tag !== 394) {
            break;
          }

          message.commission = Commission.decode(reader, reader.uint32());
          continue;
        case 74:
          if (tag !== 594) {
            break;
          }

          message.manualCpa = ManualCpa.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.manualCpc = ManualCpc.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.manualCpm = ManualCpm.decode(reader, reader.uint32());
          continue;
        case 37:
          if (tag !== 298) {
            break;
          }

          message.manualCpv = ManualCpv.decode(reader, reader.uint32());
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.maximizeConversions = MaximizeConversions.decode(reader, reader.uint32());
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.maximizeConversionValue = MaximizeConversionValue.decode(reader, reader.uint32());
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.targetCpa = TargetCpa.decode(reader, reader.uint32());
          continue;
        case 48:
          if (tag !== 386) {
            break;
          }

          message.targetImpressionShare = TargetImpressionShare.decode(reader, reader.uint32());
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.targetRoas = TargetRoas.decode(reader, reader.uint32());
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.targetSpend = TargetSpend.decode(reader, reader.uint32());
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.percentCpc = PercentCpc.decode(reader, reader.uint32());
          continue;
        case 41:
          if (tag !== 330) {
            break;
          }

          message.targetCpm = TargetCpm.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      primaryStatus: isSet(object.primaryStatus)
        ? campaignPrimaryStatusEnum_CampaignPrimaryStatusFromJSON(object.primaryStatus)
        : 0,
      primaryStatusReasons: globalThis.Array.isArray(object?.primaryStatusReasons)
        ? object.primaryStatusReasons.map((e: any) =>
          campaignPrimaryStatusReasonEnum_CampaignPrimaryStatusReasonFromJSON(e)
        )
        : [],
      status: isSet(object.status) ? campaignStatusEnum_CampaignStatusFromJSON(object.status) : 0,
      servingStatus: isSet(object.servingStatus)
        ? campaignServingStatusEnum_CampaignServingStatusFromJSON(object.servingStatus)
        : 0,
      biddingStrategySystemStatus: isSet(object.biddingStrategySystemStatus)
        ? biddingStrategySystemStatusEnum_BiddingStrategySystemStatusFromJSON(object.biddingStrategySystemStatus)
        : 0,
      adServingOptimizationStatus: isSet(object.adServingOptimizationStatus)
        ? adServingOptimizationStatusEnum_AdServingOptimizationStatusFromJSON(object.adServingOptimizationStatus)
        : 0,
      advertisingChannelType: isSet(object.advertisingChannelType)
        ? advertisingChannelTypeEnum_AdvertisingChannelTypeFromJSON(object.advertisingChannelType)
        : 0,
      advertisingChannelSubType: isSet(object.advertisingChannelSubType)
        ? advertisingChannelSubTypeEnum_AdvertisingChannelSubTypeFromJSON(object.advertisingChannelSubType)
        : 0,
      trackingUrlTemplate: isSet(object.trackingUrlTemplate)
        ? globalThis.String(object.trackingUrlTemplate)
        : undefined,
      urlCustomParameters: globalThis.Array.isArray(object?.urlCustomParameters)
        ? object.urlCustomParameters.map((e: any) => CustomParameter.fromJSON(e))
        : [],
      localServicesCampaignSettings: isSet(object.localServicesCampaignSettings)
        ? Campaign_LocalServicesCampaignSettings.fromJSON(object.localServicesCampaignSettings)
        : undefined,
      travelCampaignSettings: isSet(object.travelCampaignSettings)
        ? Campaign_TravelCampaignSettings.fromJSON(object.travelCampaignSettings)
        : undefined,
      discoveryCampaignSettings: isSet(object.discoveryCampaignSettings)
        ? Campaign_DiscoveryCampaignSettings.fromJSON(object.discoveryCampaignSettings)
        : undefined,
      realTimeBiddingSetting: isSet(object.realTimeBiddingSetting)
        ? RealTimeBiddingSetting.fromJSON(object.realTimeBiddingSetting)
        : undefined,
      networkSettings: isSet(object.networkSettings)
        ? Campaign_NetworkSettings.fromJSON(object.networkSettings)
        : undefined,
      hotelSetting: isSet(object.hotelSetting) ? Campaign_HotelSettingInfo.fromJSON(object.hotelSetting) : undefined,
      dynamicSearchAdsSetting: isSet(object.dynamicSearchAdsSetting)
        ? Campaign_DynamicSearchAdsSetting.fromJSON(object.dynamicSearchAdsSetting)
        : undefined,
      shoppingSetting: isSet(object.shoppingSetting)
        ? Campaign_ShoppingSetting.fromJSON(object.shoppingSetting)
        : undefined,
      targetingSetting: isSet(object.targetingSetting) ? TargetingSetting.fromJSON(object.targetingSetting) : undefined,
      audienceSetting: isSet(object.audienceSetting)
        ? Campaign_AudienceSetting.fromJSON(object.audienceSetting)
        : undefined,
      geoTargetTypeSetting: isSet(object.geoTargetTypeSetting)
        ? Campaign_GeoTargetTypeSetting.fromJSON(object.geoTargetTypeSetting)
        : undefined,
      localCampaignSetting: isSet(object.localCampaignSetting)
        ? Campaign_LocalCampaignSetting.fromJSON(object.localCampaignSetting)
        : undefined,
      appCampaignSetting: isSet(object.appCampaignSetting)
        ? Campaign_AppCampaignSetting.fromJSON(object.appCampaignSetting)
        : undefined,
      labels: globalThis.Array.isArray(object?.labels)
        ? object.labels.map((e: any) => globalThis.String(e))
        : [],
      experimentType: isSet(object.experimentType)
        ? campaignExperimentTypeEnum_CampaignExperimentTypeFromJSON(object.experimentType)
        : 0,
      baseCampaign: isSet(object.baseCampaign) ? globalThis.String(object.baseCampaign) : undefined,
      campaignBudget: isSet(object.campaignBudget) ? globalThis.String(object.campaignBudget) : undefined,
      biddingStrategyType: isSet(object.biddingStrategyType)
        ? biddingStrategyTypeEnum_BiddingStrategyTypeFromJSON(object.biddingStrategyType)
        : 0,
      accessibleBiddingStrategy: isSet(object.accessibleBiddingStrategy)
        ? globalThis.String(object.accessibleBiddingStrategy)
        : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : undefined,
      campaignGroup: isSet(object.campaignGroup) ? globalThis.String(object.campaignGroup) : undefined,
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : undefined,
      finalUrlSuffix: isSet(object.finalUrlSuffix) ? globalThis.String(object.finalUrlSuffix) : undefined,
      frequencyCaps: globalThis.Array.isArray(object?.frequencyCaps)
        ? object.frequencyCaps.map((e: any) => FrequencyCapEntry.fromJSON(e))
        : [],
      videoBrandSafetySuitability: isSet(object.videoBrandSafetySuitability)
        ? brandSafetySuitabilityEnum_BrandSafetySuitabilityFromJSON(object.videoBrandSafetySuitability)
        : 0,
      vanityPharma: isSet(object.vanityPharma) ? Campaign_VanityPharma.fromJSON(object.vanityPharma) : undefined,
      selectiveOptimization: isSet(object.selectiveOptimization)
        ? Campaign_SelectiveOptimization.fromJSON(object.selectiveOptimization)
        : undefined,
      optimizationGoalSetting: isSet(object.optimizationGoalSetting)
        ? Campaign_OptimizationGoalSetting.fromJSON(object.optimizationGoalSetting)
        : undefined,
      trackingSetting: isSet(object.trackingSetting)
        ? Campaign_TrackingSetting.fromJSON(object.trackingSetting)
        : undefined,
      paymentMode: isSet(object.paymentMode) ? paymentModeEnum_PaymentModeFromJSON(object.paymentMode) : 0,
      optimizationScore: isSet(object.optimizationScore) ? globalThis.Number(object.optimizationScore) : undefined,
      excludedParentAssetFieldTypes: globalThis.Array.isArray(object?.excludedParentAssetFieldTypes)
        ? object.excludedParentAssetFieldTypes.map((e: any) => assetFieldTypeEnum_AssetFieldTypeFromJSON(e))
        : [],
      excludedParentAssetSetTypes: globalThis.Array.isArray(object?.excludedParentAssetSetTypes)
        ? object.excludedParentAssetSetTypes.map((e: any) => assetSetTypeEnum_AssetSetTypeFromJSON(e))
        : [],
      urlExpansionOptOut: isSet(object.urlExpansionOptOut) ? globalThis.Boolean(object.urlExpansionOptOut) : undefined,
      performanceMaxUpgrade: isSet(object.performanceMaxUpgrade)
        ? Campaign_PerformanceMaxUpgrade.fromJSON(object.performanceMaxUpgrade)
        : undefined,
      hotelPropertyAssetSet: isSet(object.hotelPropertyAssetSet)
        ? globalThis.String(object.hotelPropertyAssetSet)
        : undefined,
      listingType: isSet(object.listingType) ? listingTypeEnum_ListingTypeFromJSON(object.listingType) : undefined,
      assetAutomationSettings: globalThis.Array.isArray(object?.assetAutomationSettings)
        ? object.assetAutomationSettings.map((e: any) => Campaign_AssetAutomationSetting.fromJSON(e))
        : [],
      biddingStrategy: isSet(object.biddingStrategy) ? globalThis.String(object.biddingStrategy) : undefined,
      commission: isSet(object.commission) ? Commission.fromJSON(object.commission) : undefined,
      manualCpa: isSet(object.manualCpa) ? ManualCpa.fromJSON(object.manualCpa) : undefined,
      manualCpc: isSet(object.manualCpc) ? ManualCpc.fromJSON(object.manualCpc) : undefined,
      manualCpm: isSet(object.manualCpm) ? ManualCpm.fromJSON(object.manualCpm) : undefined,
      manualCpv: isSet(object.manualCpv) ? ManualCpv.fromJSON(object.manualCpv) : undefined,
      maximizeConversions: isSet(object.maximizeConversions)
        ? MaximizeConversions.fromJSON(object.maximizeConversions)
        : undefined,
      maximizeConversionValue: isSet(object.maximizeConversionValue)
        ? MaximizeConversionValue.fromJSON(object.maximizeConversionValue)
        : undefined,
      targetCpa: isSet(object.targetCpa) ? TargetCpa.fromJSON(object.targetCpa) : undefined,
      targetImpressionShare: isSet(object.targetImpressionShare)
        ? TargetImpressionShare.fromJSON(object.targetImpressionShare)
        : undefined,
      targetRoas: isSet(object.targetRoas) ? TargetRoas.fromJSON(object.targetRoas) : undefined,
      targetSpend: isSet(object.targetSpend) ? TargetSpend.fromJSON(object.targetSpend) : undefined,
      percentCpc: isSet(object.percentCpc) ? PercentCpc.fromJSON(object.percentCpc) : undefined,
      targetCpm: isSet(object.targetCpm) ? TargetCpm.fromJSON(object.targetCpm) : undefined,
    };
  },

  toJSON(message: Campaign): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.primaryStatus !== 0) {
      obj.primaryStatus = campaignPrimaryStatusEnum_CampaignPrimaryStatusToJSON(message.primaryStatus);
    }
    if (message.primaryStatusReasons?.length) {
      obj.primaryStatusReasons = message.primaryStatusReasons.map((e) =>
        campaignPrimaryStatusReasonEnum_CampaignPrimaryStatusReasonToJSON(e)
      );
    }
    if (message.status !== 0) {
      obj.status = campaignStatusEnum_CampaignStatusToJSON(message.status);
    }
    if (message.servingStatus !== 0) {
      obj.servingStatus = campaignServingStatusEnum_CampaignServingStatusToJSON(message.servingStatus);
    }
    if (message.biddingStrategySystemStatus !== 0) {
      obj.biddingStrategySystemStatus = biddingStrategySystemStatusEnum_BiddingStrategySystemStatusToJSON(
        message.biddingStrategySystemStatus,
      );
    }
    if (message.adServingOptimizationStatus !== 0) {
      obj.adServingOptimizationStatus = adServingOptimizationStatusEnum_AdServingOptimizationStatusToJSON(
        message.adServingOptimizationStatus,
      );
    }
    if (message.advertisingChannelType !== 0) {
      obj.advertisingChannelType = advertisingChannelTypeEnum_AdvertisingChannelTypeToJSON(
        message.advertisingChannelType,
      );
    }
    if (message.advertisingChannelSubType !== 0) {
      obj.advertisingChannelSubType = advertisingChannelSubTypeEnum_AdvertisingChannelSubTypeToJSON(
        message.advertisingChannelSubType,
      );
    }
    if (message.trackingUrlTemplate !== undefined) {
      obj.trackingUrlTemplate = message.trackingUrlTemplate;
    }
    if (message.urlCustomParameters?.length) {
      obj.urlCustomParameters = message.urlCustomParameters.map((e) => CustomParameter.toJSON(e));
    }
    if (message.localServicesCampaignSettings !== undefined) {
      obj.localServicesCampaignSettings = Campaign_LocalServicesCampaignSettings.toJSON(
        message.localServicesCampaignSettings,
      );
    }
    if (message.travelCampaignSettings !== undefined) {
      obj.travelCampaignSettings = Campaign_TravelCampaignSettings.toJSON(message.travelCampaignSettings);
    }
    if (message.discoveryCampaignSettings !== undefined) {
      obj.discoveryCampaignSettings = Campaign_DiscoveryCampaignSettings.toJSON(message.discoveryCampaignSettings);
    }
    if (message.realTimeBiddingSetting !== undefined) {
      obj.realTimeBiddingSetting = RealTimeBiddingSetting.toJSON(message.realTimeBiddingSetting);
    }
    if (message.networkSettings !== undefined) {
      obj.networkSettings = Campaign_NetworkSettings.toJSON(message.networkSettings);
    }
    if (message.hotelSetting !== undefined) {
      obj.hotelSetting = Campaign_HotelSettingInfo.toJSON(message.hotelSetting);
    }
    if (message.dynamicSearchAdsSetting !== undefined) {
      obj.dynamicSearchAdsSetting = Campaign_DynamicSearchAdsSetting.toJSON(message.dynamicSearchAdsSetting);
    }
    if (message.shoppingSetting !== undefined) {
      obj.shoppingSetting = Campaign_ShoppingSetting.toJSON(message.shoppingSetting);
    }
    if (message.targetingSetting !== undefined) {
      obj.targetingSetting = TargetingSetting.toJSON(message.targetingSetting);
    }
    if (message.audienceSetting !== undefined) {
      obj.audienceSetting = Campaign_AudienceSetting.toJSON(message.audienceSetting);
    }
    if (message.geoTargetTypeSetting !== undefined) {
      obj.geoTargetTypeSetting = Campaign_GeoTargetTypeSetting.toJSON(message.geoTargetTypeSetting);
    }
    if (message.localCampaignSetting !== undefined) {
      obj.localCampaignSetting = Campaign_LocalCampaignSetting.toJSON(message.localCampaignSetting);
    }
    if (message.appCampaignSetting !== undefined) {
      obj.appCampaignSetting = Campaign_AppCampaignSetting.toJSON(message.appCampaignSetting);
    }
    if (message.labels?.length) {
      obj.labels = message.labels;
    }
    if (message.experimentType !== 0) {
      obj.experimentType = campaignExperimentTypeEnum_CampaignExperimentTypeToJSON(message.experimentType);
    }
    if (message.baseCampaign !== undefined) {
      obj.baseCampaign = message.baseCampaign;
    }
    if (message.campaignBudget !== undefined) {
      obj.campaignBudget = message.campaignBudget;
    }
    if (message.biddingStrategyType !== 0) {
      obj.biddingStrategyType = biddingStrategyTypeEnum_BiddingStrategyTypeToJSON(message.biddingStrategyType);
    }
    if (message.accessibleBiddingStrategy !== "") {
      obj.accessibleBiddingStrategy = message.accessibleBiddingStrategy;
    }
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate;
    }
    if (message.campaignGroup !== undefined) {
      obj.campaignGroup = message.campaignGroup;
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate;
    }
    if (message.finalUrlSuffix !== undefined) {
      obj.finalUrlSuffix = message.finalUrlSuffix;
    }
    if (message.frequencyCaps?.length) {
      obj.frequencyCaps = message.frequencyCaps.map((e) => FrequencyCapEntry.toJSON(e));
    }
    if (message.videoBrandSafetySuitability !== 0) {
      obj.videoBrandSafetySuitability = brandSafetySuitabilityEnum_BrandSafetySuitabilityToJSON(
        message.videoBrandSafetySuitability,
      );
    }
    if (message.vanityPharma !== undefined) {
      obj.vanityPharma = Campaign_VanityPharma.toJSON(message.vanityPharma);
    }
    if (message.selectiveOptimization !== undefined) {
      obj.selectiveOptimization = Campaign_SelectiveOptimization.toJSON(message.selectiveOptimization);
    }
    if (message.optimizationGoalSetting !== undefined) {
      obj.optimizationGoalSetting = Campaign_OptimizationGoalSetting.toJSON(message.optimizationGoalSetting);
    }
    if (message.trackingSetting !== undefined) {
      obj.trackingSetting = Campaign_TrackingSetting.toJSON(message.trackingSetting);
    }
    if (message.paymentMode !== 0) {
      obj.paymentMode = paymentModeEnum_PaymentModeToJSON(message.paymentMode);
    }
    if (message.optimizationScore !== undefined) {
      obj.optimizationScore = message.optimizationScore;
    }
    if (message.excludedParentAssetFieldTypes?.length) {
      obj.excludedParentAssetFieldTypes = message.excludedParentAssetFieldTypes.map((e) =>
        assetFieldTypeEnum_AssetFieldTypeToJSON(e)
      );
    }
    if (message.excludedParentAssetSetTypes?.length) {
      obj.excludedParentAssetSetTypes = message.excludedParentAssetSetTypes.map((e) =>
        assetSetTypeEnum_AssetSetTypeToJSON(e)
      );
    }
    if (message.urlExpansionOptOut !== undefined) {
      obj.urlExpansionOptOut = message.urlExpansionOptOut;
    }
    if (message.performanceMaxUpgrade !== undefined) {
      obj.performanceMaxUpgrade = Campaign_PerformanceMaxUpgrade.toJSON(message.performanceMaxUpgrade);
    }
    if (message.hotelPropertyAssetSet !== undefined) {
      obj.hotelPropertyAssetSet = message.hotelPropertyAssetSet;
    }
    if (message.listingType !== undefined) {
      obj.listingType = listingTypeEnum_ListingTypeToJSON(message.listingType);
    }
    if (message.assetAutomationSettings?.length) {
      obj.assetAutomationSettings = message.assetAutomationSettings.map((e) =>
        Campaign_AssetAutomationSetting.toJSON(e)
      );
    }
    if (message.biddingStrategy !== undefined) {
      obj.biddingStrategy = message.biddingStrategy;
    }
    if (message.commission !== undefined) {
      obj.commission = Commission.toJSON(message.commission);
    }
    if (message.manualCpa !== undefined) {
      obj.manualCpa = ManualCpa.toJSON(message.manualCpa);
    }
    if (message.manualCpc !== undefined) {
      obj.manualCpc = ManualCpc.toJSON(message.manualCpc);
    }
    if (message.manualCpm !== undefined) {
      obj.manualCpm = ManualCpm.toJSON(message.manualCpm);
    }
    if (message.manualCpv !== undefined) {
      obj.manualCpv = ManualCpv.toJSON(message.manualCpv);
    }
    if (message.maximizeConversions !== undefined) {
      obj.maximizeConversions = MaximizeConversions.toJSON(message.maximizeConversions);
    }
    if (message.maximizeConversionValue !== undefined) {
      obj.maximizeConversionValue = MaximizeConversionValue.toJSON(message.maximizeConversionValue);
    }
    if (message.targetCpa !== undefined) {
      obj.targetCpa = TargetCpa.toJSON(message.targetCpa);
    }
    if (message.targetImpressionShare !== undefined) {
      obj.targetImpressionShare = TargetImpressionShare.toJSON(message.targetImpressionShare);
    }
    if (message.targetRoas !== undefined) {
      obj.targetRoas = TargetRoas.toJSON(message.targetRoas);
    }
    if (message.targetSpend !== undefined) {
      obj.targetSpend = TargetSpend.toJSON(message.targetSpend);
    }
    if (message.percentCpc !== undefined) {
      obj.percentCpc = PercentCpc.toJSON(message.percentCpc);
    }
    if (message.targetCpm !== undefined) {
      obj.targetCpm = TargetCpm.toJSON(message.targetCpm);
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign>): Campaign {
    return Campaign.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign>): Campaign {
    const message = createBaseCampaign();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.name = object.name ?? undefined;
    message.primaryStatus = object.primaryStatus ?? 0;
    message.primaryStatusReasons = object.primaryStatusReasons?.map((e) => e) || [];
    message.status = object.status ?? 0;
    message.servingStatus = object.servingStatus ?? 0;
    message.biddingStrategySystemStatus = object.biddingStrategySystemStatus ?? 0;
    message.adServingOptimizationStatus = object.adServingOptimizationStatus ?? 0;
    message.advertisingChannelType = object.advertisingChannelType ?? 0;
    message.advertisingChannelSubType = object.advertisingChannelSubType ?? 0;
    message.trackingUrlTemplate = object.trackingUrlTemplate ?? undefined;
    message.urlCustomParameters = object.urlCustomParameters?.map((e) => CustomParameter.fromPartial(e)) || [];
    message.localServicesCampaignSettings =
      (object.localServicesCampaignSettings !== undefined && object.localServicesCampaignSettings !== null)
        ? Campaign_LocalServicesCampaignSettings.fromPartial(object.localServicesCampaignSettings)
        : undefined;
    message.travelCampaignSettings =
      (object.travelCampaignSettings !== undefined && object.travelCampaignSettings !== null)
        ? Campaign_TravelCampaignSettings.fromPartial(object.travelCampaignSettings)
        : undefined;
    message.discoveryCampaignSettings =
      (object.discoveryCampaignSettings !== undefined && object.discoveryCampaignSettings !== null)
        ? Campaign_DiscoveryCampaignSettings.fromPartial(object.discoveryCampaignSettings)
        : undefined;
    message.realTimeBiddingSetting =
      (object.realTimeBiddingSetting !== undefined && object.realTimeBiddingSetting !== null)
        ? RealTimeBiddingSetting.fromPartial(object.realTimeBiddingSetting)
        : undefined;
    message.networkSettings = (object.networkSettings !== undefined && object.networkSettings !== null)
      ? Campaign_NetworkSettings.fromPartial(object.networkSettings)
      : undefined;
    message.hotelSetting = (object.hotelSetting !== undefined && object.hotelSetting !== null)
      ? Campaign_HotelSettingInfo.fromPartial(object.hotelSetting)
      : undefined;
    message.dynamicSearchAdsSetting =
      (object.dynamicSearchAdsSetting !== undefined && object.dynamicSearchAdsSetting !== null)
        ? Campaign_DynamicSearchAdsSetting.fromPartial(object.dynamicSearchAdsSetting)
        : undefined;
    message.shoppingSetting = (object.shoppingSetting !== undefined && object.shoppingSetting !== null)
      ? Campaign_ShoppingSetting.fromPartial(object.shoppingSetting)
      : undefined;
    message.targetingSetting = (object.targetingSetting !== undefined && object.targetingSetting !== null)
      ? TargetingSetting.fromPartial(object.targetingSetting)
      : undefined;
    message.audienceSetting = (object.audienceSetting !== undefined && object.audienceSetting !== null)
      ? Campaign_AudienceSetting.fromPartial(object.audienceSetting)
      : undefined;
    message.geoTargetTypeSetting = (object.geoTargetTypeSetting !== undefined && object.geoTargetTypeSetting !== null)
      ? Campaign_GeoTargetTypeSetting.fromPartial(object.geoTargetTypeSetting)
      : undefined;
    message.localCampaignSetting = (object.localCampaignSetting !== undefined && object.localCampaignSetting !== null)
      ? Campaign_LocalCampaignSetting.fromPartial(object.localCampaignSetting)
      : undefined;
    message.appCampaignSetting = (object.appCampaignSetting !== undefined && object.appCampaignSetting !== null)
      ? Campaign_AppCampaignSetting.fromPartial(object.appCampaignSetting)
      : undefined;
    message.labels = object.labels?.map((e) => e) || [];
    message.experimentType = object.experimentType ?? 0;
    message.baseCampaign = object.baseCampaign ?? undefined;
    message.campaignBudget = object.campaignBudget ?? undefined;
    message.biddingStrategyType = object.biddingStrategyType ?? 0;
    message.accessibleBiddingStrategy = object.accessibleBiddingStrategy ?? "";
    message.startDate = object.startDate ?? undefined;
    message.campaignGroup = object.campaignGroup ?? undefined;
    message.endDate = object.endDate ?? undefined;
    message.finalUrlSuffix = object.finalUrlSuffix ?? undefined;
    message.frequencyCaps = object.frequencyCaps?.map((e) => FrequencyCapEntry.fromPartial(e)) || [];
    message.videoBrandSafetySuitability = object.videoBrandSafetySuitability ?? 0;
    message.vanityPharma = (object.vanityPharma !== undefined && object.vanityPharma !== null)
      ? Campaign_VanityPharma.fromPartial(object.vanityPharma)
      : undefined;
    message.selectiveOptimization =
      (object.selectiveOptimization !== undefined && object.selectiveOptimization !== null)
        ? Campaign_SelectiveOptimization.fromPartial(object.selectiveOptimization)
        : undefined;
    message.optimizationGoalSetting =
      (object.optimizationGoalSetting !== undefined && object.optimizationGoalSetting !== null)
        ? Campaign_OptimizationGoalSetting.fromPartial(object.optimizationGoalSetting)
        : undefined;
    message.trackingSetting = (object.trackingSetting !== undefined && object.trackingSetting !== null)
      ? Campaign_TrackingSetting.fromPartial(object.trackingSetting)
      : undefined;
    message.paymentMode = object.paymentMode ?? 0;
    message.optimizationScore = object.optimizationScore ?? undefined;
    message.excludedParentAssetFieldTypes = object.excludedParentAssetFieldTypes?.map((e) => e) || [];
    message.excludedParentAssetSetTypes = object.excludedParentAssetSetTypes?.map((e) => e) || [];
    message.urlExpansionOptOut = object.urlExpansionOptOut ?? undefined;
    message.performanceMaxUpgrade =
      (object.performanceMaxUpgrade !== undefined && object.performanceMaxUpgrade !== null)
        ? Campaign_PerformanceMaxUpgrade.fromPartial(object.performanceMaxUpgrade)
        : undefined;
    message.hotelPropertyAssetSet = object.hotelPropertyAssetSet ?? undefined;
    message.listingType = object.listingType ?? undefined;
    message.assetAutomationSettings =
      object.assetAutomationSettings?.map((e) => Campaign_AssetAutomationSetting.fromPartial(e)) || [];
    message.biddingStrategy = object.biddingStrategy ?? undefined;
    message.commission = (object.commission !== undefined && object.commission !== null)
      ? Commission.fromPartial(object.commission)
      : undefined;
    message.manualCpa = (object.manualCpa !== undefined && object.manualCpa !== null)
      ? ManualCpa.fromPartial(object.manualCpa)
      : undefined;
    message.manualCpc = (object.manualCpc !== undefined && object.manualCpc !== null)
      ? ManualCpc.fromPartial(object.manualCpc)
      : undefined;
    message.manualCpm = (object.manualCpm !== undefined && object.manualCpm !== null)
      ? ManualCpm.fromPartial(object.manualCpm)
      : undefined;
    message.manualCpv = (object.manualCpv !== undefined && object.manualCpv !== null)
      ? ManualCpv.fromPartial(object.manualCpv)
      : undefined;
    message.maximizeConversions = (object.maximizeConversions !== undefined && object.maximizeConversions !== null)
      ? MaximizeConversions.fromPartial(object.maximizeConversions)
      : undefined;
    message.maximizeConversionValue =
      (object.maximizeConversionValue !== undefined && object.maximizeConversionValue !== null)
        ? MaximizeConversionValue.fromPartial(object.maximizeConversionValue)
        : undefined;
    message.targetCpa = (object.targetCpa !== undefined && object.targetCpa !== null)
      ? TargetCpa.fromPartial(object.targetCpa)
      : undefined;
    message.targetImpressionShare =
      (object.targetImpressionShare !== undefined && object.targetImpressionShare !== null)
        ? TargetImpressionShare.fromPartial(object.targetImpressionShare)
        : undefined;
    message.targetRoas = (object.targetRoas !== undefined && object.targetRoas !== null)
      ? TargetRoas.fromPartial(object.targetRoas)
      : undefined;
    message.targetSpend = (object.targetSpend !== undefined && object.targetSpend !== null)
      ? TargetSpend.fromPartial(object.targetSpend)
      : undefined;
    message.percentCpc = (object.percentCpc !== undefined && object.percentCpc !== null)
      ? PercentCpc.fromPartial(object.percentCpc)
      : undefined;
    message.targetCpm = (object.targetCpm !== undefined && object.targetCpm !== null)
      ? TargetCpm.fromPartial(object.targetCpm)
      : undefined;
    return message;
  },
};

function createBaseCampaign_PerformanceMaxUpgrade(): Campaign_PerformanceMaxUpgrade {
  return { performanceMaxCampaign: "", preUpgradeCampaign: "", status: 0 };
}

export const Campaign_PerformanceMaxUpgrade: MessageFns<Campaign_PerformanceMaxUpgrade> = {
  encode(message: Campaign_PerformanceMaxUpgrade, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.performanceMaxCampaign !== "") {
      writer.uint32(10).string(message.performanceMaxCampaign);
    }
    if (message.preUpgradeCampaign !== "") {
      writer.uint32(18).string(message.preUpgradeCampaign);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_PerformanceMaxUpgrade {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_PerformanceMaxUpgrade();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.performanceMaxCampaign = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.preUpgradeCampaign = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_PerformanceMaxUpgrade {
    return {
      performanceMaxCampaign: isSet(object.performanceMaxCampaign)
        ? globalThis.String(object.performanceMaxCampaign)
        : "",
      preUpgradeCampaign: isSet(object.preUpgradeCampaign) ? globalThis.String(object.preUpgradeCampaign) : "",
      status: isSet(object.status)
        ? performanceMaxUpgradeStatusEnum_PerformanceMaxUpgradeStatusFromJSON(object.status)
        : 0,
    };
  },

  toJSON(message: Campaign_PerformanceMaxUpgrade): unknown {
    const obj: any = {};
    if (message.performanceMaxCampaign !== "") {
      obj.performanceMaxCampaign = message.performanceMaxCampaign;
    }
    if (message.preUpgradeCampaign !== "") {
      obj.preUpgradeCampaign = message.preUpgradeCampaign;
    }
    if (message.status !== 0) {
      obj.status = performanceMaxUpgradeStatusEnum_PerformanceMaxUpgradeStatusToJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_PerformanceMaxUpgrade>): Campaign_PerformanceMaxUpgrade {
    return Campaign_PerformanceMaxUpgrade.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_PerformanceMaxUpgrade>): Campaign_PerformanceMaxUpgrade {
    const message = createBaseCampaign_PerformanceMaxUpgrade();
    message.performanceMaxCampaign = object.performanceMaxCampaign ?? "";
    message.preUpgradeCampaign = object.preUpgradeCampaign ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseCampaign_NetworkSettings(): Campaign_NetworkSettings {
  return {
    targetGoogleSearch: undefined,
    targetSearchNetwork: undefined,
    targetContentNetwork: undefined,
    targetPartnerSearchNetwork: undefined,
    targetYoutube: undefined,
    targetGoogleTvNetwork: undefined,
  };
}

export const Campaign_NetworkSettings: MessageFns<Campaign_NetworkSettings> = {
  encode(message: Campaign_NetworkSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetGoogleSearch !== undefined) {
      writer.uint32(40).bool(message.targetGoogleSearch);
    }
    if (message.targetSearchNetwork !== undefined) {
      writer.uint32(48).bool(message.targetSearchNetwork);
    }
    if (message.targetContentNetwork !== undefined) {
      writer.uint32(56).bool(message.targetContentNetwork);
    }
    if (message.targetPartnerSearchNetwork !== undefined) {
      writer.uint32(64).bool(message.targetPartnerSearchNetwork);
    }
    if (message.targetYoutube !== undefined) {
      writer.uint32(72).bool(message.targetYoutube);
    }
    if (message.targetGoogleTvNetwork !== undefined) {
      writer.uint32(80).bool(message.targetGoogleTvNetwork);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_NetworkSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_NetworkSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 40) {
            break;
          }

          message.targetGoogleSearch = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.targetSearchNetwork = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.targetContentNetwork = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.targetPartnerSearchNetwork = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.targetYoutube = reader.bool();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.targetGoogleTvNetwork = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_NetworkSettings {
    return {
      targetGoogleSearch: isSet(object.targetGoogleSearch) ? globalThis.Boolean(object.targetGoogleSearch) : undefined,
      targetSearchNetwork: isSet(object.targetSearchNetwork)
        ? globalThis.Boolean(object.targetSearchNetwork)
        : undefined,
      targetContentNetwork: isSet(object.targetContentNetwork)
        ? globalThis.Boolean(object.targetContentNetwork)
        : undefined,
      targetPartnerSearchNetwork: isSet(object.targetPartnerSearchNetwork)
        ? globalThis.Boolean(object.targetPartnerSearchNetwork)
        : undefined,
      targetYoutube: isSet(object.targetYoutube) ? globalThis.Boolean(object.targetYoutube) : undefined,
      targetGoogleTvNetwork: isSet(object.targetGoogleTvNetwork)
        ? globalThis.Boolean(object.targetGoogleTvNetwork)
        : undefined,
    };
  },

  toJSON(message: Campaign_NetworkSettings): unknown {
    const obj: any = {};
    if (message.targetGoogleSearch !== undefined) {
      obj.targetGoogleSearch = message.targetGoogleSearch;
    }
    if (message.targetSearchNetwork !== undefined) {
      obj.targetSearchNetwork = message.targetSearchNetwork;
    }
    if (message.targetContentNetwork !== undefined) {
      obj.targetContentNetwork = message.targetContentNetwork;
    }
    if (message.targetPartnerSearchNetwork !== undefined) {
      obj.targetPartnerSearchNetwork = message.targetPartnerSearchNetwork;
    }
    if (message.targetYoutube !== undefined) {
      obj.targetYoutube = message.targetYoutube;
    }
    if (message.targetGoogleTvNetwork !== undefined) {
      obj.targetGoogleTvNetwork = message.targetGoogleTvNetwork;
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_NetworkSettings>): Campaign_NetworkSettings {
    return Campaign_NetworkSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_NetworkSettings>): Campaign_NetworkSettings {
    const message = createBaseCampaign_NetworkSettings();
    message.targetGoogleSearch = object.targetGoogleSearch ?? undefined;
    message.targetSearchNetwork = object.targetSearchNetwork ?? undefined;
    message.targetContentNetwork = object.targetContentNetwork ?? undefined;
    message.targetPartnerSearchNetwork = object.targetPartnerSearchNetwork ?? undefined;
    message.targetYoutube = object.targetYoutube ?? undefined;
    message.targetGoogleTvNetwork = object.targetGoogleTvNetwork ?? undefined;
    return message;
  },
};

function createBaseCampaign_HotelSettingInfo(): Campaign_HotelSettingInfo {
  return { hotelCenterId: undefined };
}

export const Campaign_HotelSettingInfo: MessageFns<Campaign_HotelSettingInfo> = {
  encode(message: Campaign_HotelSettingInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hotelCenterId !== undefined) {
      writer.uint32(16).int64(message.hotelCenterId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_HotelSettingInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_HotelSettingInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.hotelCenterId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_HotelSettingInfo {
    return { hotelCenterId: isSet(object.hotelCenterId) ? Long.fromValue(object.hotelCenterId) : undefined };
  },

  toJSON(message: Campaign_HotelSettingInfo): unknown {
    const obj: any = {};
    if (message.hotelCenterId !== undefined) {
      obj.hotelCenterId = (message.hotelCenterId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_HotelSettingInfo>): Campaign_HotelSettingInfo {
    return Campaign_HotelSettingInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_HotelSettingInfo>): Campaign_HotelSettingInfo {
    const message = createBaseCampaign_HotelSettingInfo();
    message.hotelCenterId = (object.hotelCenterId !== undefined && object.hotelCenterId !== null)
      ? Long.fromValue(object.hotelCenterId)
      : undefined;
    return message;
  },
};

function createBaseCampaign_DynamicSearchAdsSetting(): Campaign_DynamicSearchAdsSetting {
  return { domainName: "", languageCode: "", useSuppliedUrlsOnly: undefined, feeds: [] };
}

export const Campaign_DynamicSearchAdsSetting: MessageFns<Campaign_DynamicSearchAdsSetting> = {
  encode(message: Campaign_DynamicSearchAdsSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.domainName !== "") {
      writer.uint32(50).string(message.domainName);
    }
    if (message.languageCode !== "") {
      writer.uint32(58).string(message.languageCode);
    }
    if (message.useSuppliedUrlsOnly !== undefined) {
      writer.uint32(64).bool(message.useSuppliedUrlsOnly);
    }
    for (const v of message.feeds) {
      writer.uint32(74).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_DynamicSearchAdsSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_DynamicSearchAdsSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6:
          if (tag !== 50) {
            break;
          }

          message.domainName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.useSuppliedUrlsOnly = reader.bool();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.feeds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_DynamicSearchAdsSetting {
    return {
      domainName: isSet(object.domainName) ? globalThis.String(object.domainName) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      useSuppliedUrlsOnly: isSet(object.useSuppliedUrlsOnly)
        ? globalThis.Boolean(object.useSuppliedUrlsOnly)
        : undefined,
      feeds: globalThis.Array.isArray(object?.feeds) ? object.feeds.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Campaign_DynamicSearchAdsSetting): unknown {
    const obj: any = {};
    if (message.domainName !== "") {
      obj.domainName = message.domainName;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.useSuppliedUrlsOnly !== undefined) {
      obj.useSuppliedUrlsOnly = message.useSuppliedUrlsOnly;
    }
    if (message.feeds?.length) {
      obj.feeds = message.feeds;
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_DynamicSearchAdsSetting>): Campaign_DynamicSearchAdsSetting {
    return Campaign_DynamicSearchAdsSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_DynamicSearchAdsSetting>): Campaign_DynamicSearchAdsSetting {
    const message = createBaseCampaign_DynamicSearchAdsSetting();
    message.domainName = object.domainName ?? "";
    message.languageCode = object.languageCode ?? "";
    message.useSuppliedUrlsOnly = object.useSuppliedUrlsOnly ?? undefined;
    message.feeds = object.feeds?.map((e) => e) || [];
    return message;
  },
};

function createBaseCampaign_ShoppingSetting(): Campaign_ShoppingSetting {
  return {
    merchantId: undefined,
    feedLabel: "",
    campaignPriority: undefined,
    enableLocal: undefined,
    useVehicleInventory: false,
    advertisingPartnerIds: [],
    disableProductFeed: undefined,
  };
}

export const Campaign_ShoppingSetting: MessageFns<Campaign_ShoppingSetting> = {
  encode(message: Campaign_ShoppingSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.merchantId !== undefined) {
      writer.uint32(40).int64(message.merchantId.toString());
    }
    if (message.feedLabel !== "") {
      writer.uint32(82).string(message.feedLabel);
    }
    if (message.campaignPriority !== undefined) {
      writer.uint32(56).int32(message.campaignPriority);
    }
    if (message.enableLocal !== undefined) {
      writer.uint32(64).bool(message.enableLocal);
    }
    if (message.useVehicleInventory !== false) {
      writer.uint32(72).bool(message.useVehicleInventory);
    }
    writer.uint32(90).fork();
    for (const v of message.advertisingPartnerIds) {
      writer.int64(v.toString());
    }
    writer.join();
    if (message.disableProductFeed !== undefined) {
      writer.uint32(96).bool(message.disableProductFeed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_ShoppingSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_ShoppingSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 40) {
            break;
          }

          message.merchantId = Long.fromString(reader.int64().toString());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.feedLabel = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.campaignPriority = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.enableLocal = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.useVehicleInventory = reader.bool();
          continue;
        case 11:
          if (tag === 88) {
            message.advertisingPartnerIds.push(Long.fromString(reader.int64().toString()));

            continue;
          }

          if (tag === 90) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.advertisingPartnerIds.push(Long.fromString(reader.int64().toString()));
            }

            continue;
          }

          break;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.disableProductFeed = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_ShoppingSetting {
    return {
      merchantId: isSet(object.merchantId) ? Long.fromValue(object.merchantId) : undefined,
      feedLabel: isSet(object.feedLabel) ? globalThis.String(object.feedLabel) : "",
      campaignPriority: isSet(object.campaignPriority) ? globalThis.Number(object.campaignPriority) : undefined,
      enableLocal: isSet(object.enableLocal) ? globalThis.Boolean(object.enableLocal) : undefined,
      useVehicleInventory: isSet(object.useVehicleInventory) ? globalThis.Boolean(object.useVehicleInventory) : false,
      advertisingPartnerIds: globalThis.Array.isArray(object?.advertisingPartnerIds)
        ? object.advertisingPartnerIds.map((e: any) => Long.fromValue(e))
        : [],
      disableProductFeed: isSet(object.disableProductFeed) ? globalThis.Boolean(object.disableProductFeed) : undefined,
    };
  },

  toJSON(message: Campaign_ShoppingSetting): unknown {
    const obj: any = {};
    if (message.merchantId !== undefined) {
      obj.merchantId = (message.merchantId || Long.ZERO).toString();
    }
    if (message.feedLabel !== "") {
      obj.feedLabel = message.feedLabel;
    }
    if (message.campaignPriority !== undefined) {
      obj.campaignPriority = Math.round(message.campaignPriority);
    }
    if (message.enableLocal !== undefined) {
      obj.enableLocal = message.enableLocal;
    }
    if (message.useVehicleInventory !== false) {
      obj.useVehicleInventory = message.useVehicleInventory;
    }
    if (message.advertisingPartnerIds?.length) {
      obj.advertisingPartnerIds = message.advertisingPartnerIds.map((e) => (e || Long.ZERO).toString());
    }
    if (message.disableProductFeed !== undefined) {
      obj.disableProductFeed = message.disableProductFeed;
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_ShoppingSetting>): Campaign_ShoppingSetting {
    return Campaign_ShoppingSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_ShoppingSetting>): Campaign_ShoppingSetting {
    const message = createBaseCampaign_ShoppingSetting();
    message.merchantId = (object.merchantId !== undefined && object.merchantId !== null)
      ? Long.fromValue(object.merchantId)
      : undefined;
    message.feedLabel = object.feedLabel ?? "";
    message.campaignPriority = object.campaignPriority ?? undefined;
    message.enableLocal = object.enableLocal ?? undefined;
    message.useVehicleInventory = object.useVehicleInventory ?? false;
    message.advertisingPartnerIds = object.advertisingPartnerIds?.map((e) => Long.fromValue(e)) || [];
    message.disableProductFeed = object.disableProductFeed ?? undefined;
    return message;
  },
};

function createBaseCampaign_TrackingSetting(): Campaign_TrackingSetting {
  return { trackingUrl: undefined };
}

export const Campaign_TrackingSetting: MessageFns<Campaign_TrackingSetting> = {
  encode(message: Campaign_TrackingSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trackingUrl !== undefined) {
      writer.uint32(18).string(message.trackingUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_TrackingSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_TrackingSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.trackingUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_TrackingSetting {
    return { trackingUrl: isSet(object.trackingUrl) ? globalThis.String(object.trackingUrl) : undefined };
  },

  toJSON(message: Campaign_TrackingSetting): unknown {
    const obj: any = {};
    if (message.trackingUrl !== undefined) {
      obj.trackingUrl = message.trackingUrl;
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_TrackingSetting>): Campaign_TrackingSetting {
    return Campaign_TrackingSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_TrackingSetting>): Campaign_TrackingSetting {
    const message = createBaseCampaign_TrackingSetting();
    message.trackingUrl = object.trackingUrl ?? undefined;
    return message;
  },
};

function createBaseCampaign_GeoTargetTypeSetting(): Campaign_GeoTargetTypeSetting {
  return { positiveGeoTargetType: 0, negativeGeoTargetType: 0 };
}

export const Campaign_GeoTargetTypeSetting: MessageFns<Campaign_GeoTargetTypeSetting> = {
  encode(message: Campaign_GeoTargetTypeSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.positiveGeoTargetType !== 0) {
      writer.uint32(8).int32(message.positiveGeoTargetType);
    }
    if (message.negativeGeoTargetType !== 0) {
      writer.uint32(16).int32(message.negativeGeoTargetType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_GeoTargetTypeSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_GeoTargetTypeSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.positiveGeoTargetType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.negativeGeoTargetType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_GeoTargetTypeSetting {
    return {
      positiveGeoTargetType: isSet(object.positiveGeoTargetType)
        ? positiveGeoTargetTypeEnum_PositiveGeoTargetTypeFromJSON(object.positiveGeoTargetType)
        : 0,
      negativeGeoTargetType: isSet(object.negativeGeoTargetType)
        ? negativeGeoTargetTypeEnum_NegativeGeoTargetTypeFromJSON(object.negativeGeoTargetType)
        : 0,
    };
  },

  toJSON(message: Campaign_GeoTargetTypeSetting): unknown {
    const obj: any = {};
    if (message.positiveGeoTargetType !== 0) {
      obj.positiveGeoTargetType = positiveGeoTargetTypeEnum_PositiveGeoTargetTypeToJSON(message.positiveGeoTargetType);
    }
    if (message.negativeGeoTargetType !== 0) {
      obj.negativeGeoTargetType = negativeGeoTargetTypeEnum_NegativeGeoTargetTypeToJSON(message.negativeGeoTargetType);
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_GeoTargetTypeSetting>): Campaign_GeoTargetTypeSetting {
    return Campaign_GeoTargetTypeSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_GeoTargetTypeSetting>): Campaign_GeoTargetTypeSetting {
    const message = createBaseCampaign_GeoTargetTypeSetting();
    message.positiveGeoTargetType = object.positiveGeoTargetType ?? 0;
    message.negativeGeoTargetType = object.negativeGeoTargetType ?? 0;
    return message;
  },
};

function createBaseCampaign_LocalCampaignSetting(): Campaign_LocalCampaignSetting {
  return { locationSourceType: 0 };
}

export const Campaign_LocalCampaignSetting: MessageFns<Campaign_LocalCampaignSetting> = {
  encode(message: Campaign_LocalCampaignSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locationSourceType !== 0) {
      writer.uint32(8).int32(message.locationSourceType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_LocalCampaignSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_LocalCampaignSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.locationSourceType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_LocalCampaignSetting {
    return {
      locationSourceType: isSet(object.locationSourceType)
        ? locationSourceTypeEnum_LocationSourceTypeFromJSON(object.locationSourceType)
        : 0,
    };
  },

  toJSON(message: Campaign_LocalCampaignSetting): unknown {
    const obj: any = {};
    if (message.locationSourceType !== 0) {
      obj.locationSourceType = locationSourceTypeEnum_LocationSourceTypeToJSON(message.locationSourceType);
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_LocalCampaignSetting>): Campaign_LocalCampaignSetting {
    return Campaign_LocalCampaignSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_LocalCampaignSetting>): Campaign_LocalCampaignSetting {
    const message = createBaseCampaign_LocalCampaignSetting();
    message.locationSourceType = object.locationSourceType ?? 0;
    return message;
  },
};

function createBaseCampaign_AppCampaignSetting(): Campaign_AppCampaignSetting {
  return { biddingStrategyGoalType: 0, appId: undefined, appStore: 0 };
}

export const Campaign_AppCampaignSetting: MessageFns<Campaign_AppCampaignSetting> = {
  encode(message: Campaign_AppCampaignSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.biddingStrategyGoalType !== 0) {
      writer.uint32(8).int32(message.biddingStrategyGoalType);
    }
    if (message.appId !== undefined) {
      writer.uint32(34).string(message.appId);
    }
    if (message.appStore !== 0) {
      writer.uint32(24).int32(message.appStore);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_AppCampaignSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_AppCampaignSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.biddingStrategyGoalType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.appStore = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_AppCampaignSetting {
    return {
      biddingStrategyGoalType: isSet(object.biddingStrategyGoalType)
        ? appCampaignBiddingStrategyGoalTypeEnum_AppCampaignBiddingStrategyGoalTypeFromJSON(
          object.biddingStrategyGoalType,
        )
        : 0,
      appId: isSet(object.appId) ? globalThis.String(object.appId) : undefined,
      appStore: isSet(object.appStore) ? appCampaignAppStoreEnum_AppCampaignAppStoreFromJSON(object.appStore) : 0,
    };
  },

  toJSON(message: Campaign_AppCampaignSetting): unknown {
    const obj: any = {};
    if (message.biddingStrategyGoalType !== 0) {
      obj.biddingStrategyGoalType = appCampaignBiddingStrategyGoalTypeEnum_AppCampaignBiddingStrategyGoalTypeToJSON(
        message.biddingStrategyGoalType,
      );
    }
    if (message.appId !== undefined) {
      obj.appId = message.appId;
    }
    if (message.appStore !== 0) {
      obj.appStore = appCampaignAppStoreEnum_AppCampaignAppStoreToJSON(message.appStore);
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_AppCampaignSetting>): Campaign_AppCampaignSetting {
    return Campaign_AppCampaignSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_AppCampaignSetting>): Campaign_AppCampaignSetting {
    const message = createBaseCampaign_AppCampaignSetting();
    message.biddingStrategyGoalType = object.biddingStrategyGoalType ?? 0;
    message.appId = object.appId ?? undefined;
    message.appStore = object.appStore ?? 0;
    return message;
  },
};

function createBaseCampaign_VanityPharma(): Campaign_VanityPharma {
  return { vanityPharmaDisplayUrlMode: 0, vanityPharmaText: 0 };
}

export const Campaign_VanityPharma: MessageFns<Campaign_VanityPharma> = {
  encode(message: Campaign_VanityPharma, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vanityPharmaDisplayUrlMode !== 0) {
      writer.uint32(8).int32(message.vanityPharmaDisplayUrlMode);
    }
    if (message.vanityPharmaText !== 0) {
      writer.uint32(16).int32(message.vanityPharmaText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_VanityPharma {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_VanityPharma();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.vanityPharmaDisplayUrlMode = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.vanityPharmaText = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_VanityPharma {
    return {
      vanityPharmaDisplayUrlMode: isSet(object.vanityPharmaDisplayUrlMode)
        ? vanityPharmaDisplayUrlModeEnum_VanityPharmaDisplayUrlModeFromJSON(object.vanityPharmaDisplayUrlMode)
        : 0,
      vanityPharmaText: isSet(object.vanityPharmaText)
        ? vanityPharmaTextEnum_VanityPharmaTextFromJSON(object.vanityPharmaText)
        : 0,
    };
  },

  toJSON(message: Campaign_VanityPharma): unknown {
    const obj: any = {};
    if (message.vanityPharmaDisplayUrlMode !== 0) {
      obj.vanityPharmaDisplayUrlMode = vanityPharmaDisplayUrlModeEnum_VanityPharmaDisplayUrlModeToJSON(
        message.vanityPharmaDisplayUrlMode,
      );
    }
    if (message.vanityPharmaText !== 0) {
      obj.vanityPharmaText = vanityPharmaTextEnum_VanityPharmaTextToJSON(message.vanityPharmaText);
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_VanityPharma>): Campaign_VanityPharma {
    return Campaign_VanityPharma.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_VanityPharma>): Campaign_VanityPharma {
    const message = createBaseCampaign_VanityPharma();
    message.vanityPharmaDisplayUrlMode = object.vanityPharmaDisplayUrlMode ?? 0;
    message.vanityPharmaText = object.vanityPharmaText ?? 0;
    return message;
  },
};

function createBaseCampaign_SelectiveOptimization(): Campaign_SelectiveOptimization {
  return { conversionActions: [] };
}

export const Campaign_SelectiveOptimization: MessageFns<Campaign_SelectiveOptimization> = {
  encode(message: Campaign_SelectiveOptimization, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.conversionActions) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_SelectiveOptimization {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_SelectiveOptimization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.conversionActions.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_SelectiveOptimization {
    return {
      conversionActions: globalThis.Array.isArray(object?.conversionActions)
        ? object.conversionActions.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Campaign_SelectiveOptimization): unknown {
    const obj: any = {};
    if (message.conversionActions?.length) {
      obj.conversionActions = message.conversionActions;
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_SelectiveOptimization>): Campaign_SelectiveOptimization {
    return Campaign_SelectiveOptimization.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_SelectiveOptimization>): Campaign_SelectiveOptimization {
    const message = createBaseCampaign_SelectiveOptimization();
    message.conversionActions = object.conversionActions?.map((e) => e) || [];
    return message;
  },
};

function createBaseCampaign_OptimizationGoalSetting(): Campaign_OptimizationGoalSetting {
  return { optimizationGoalTypes: [] };
}

export const Campaign_OptimizationGoalSetting: MessageFns<Campaign_OptimizationGoalSetting> = {
  encode(message: Campaign_OptimizationGoalSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.optimizationGoalTypes) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_OptimizationGoalSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_OptimizationGoalSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.optimizationGoalTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.optimizationGoalTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_OptimizationGoalSetting {
    return {
      optimizationGoalTypes: globalThis.Array.isArray(object?.optimizationGoalTypes)
        ? object.optimizationGoalTypes.map((e: any) => optimizationGoalTypeEnum_OptimizationGoalTypeFromJSON(e))
        : [],
    };
  },

  toJSON(message: Campaign_OptimizationGoalSetting): unknown {
    const obj: any = {};
    if (message.optimizationGoalTypes?.length) {
      obj.optimizationGoalTypes = message.optimizationGoalTypes.map((e) =>
        optimizationGoalTypeEnum_OptimizationGoalTypeToJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_OptimizationGoalSetting>): Campaign_OptimizationGoalSetting {
    return Campaign_OptimizationGoalSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_OptimizationGoalSetting>): Campaign_OptimizationGoalSetting {
    const message = createBaseCampaign_OptimizationGoalSetting();
    message.optimizationGoalTypes = object.optimizationGoalTypes?.map((e) => e) || [];
    return message;
  },
};

function createBaseCampaign_AudienceSetting(): Campaign_AudienceSetting {
  return { useAudienceGrouped: undefined };
}

export const Campaign_AudienceSetting: MessageFns<Campaign_AudienceSetting> = {
  encode(message: Campaign_AudienceSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.useAudienceGrouped !== undefined) {
      writer.uint32(8).bool(message.useAudienceGrouped);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_AudienceSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_AudienceSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.useAudienceGrouped = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_AudienceSetting {
    return {
      useAudienceGrouped: isSet(object.useAudienceGrouped) ? globalThis.Boolean(object.useAudienceGrouped) : undefined,
    };
  },

  toJSON(message: Campaign_AudienceSetting): unknown {
    const obj: any = {};
    if (message.useAudienceGrouped !== undefined) {
      obj.useAudienceGrouped = message.useAudienceGrouped;
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_AudienceSetting>): Campaign_AudienceSetting {
    return Campaign_AudienceSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_AudienceSetting>): Campaign_AudienceSetting {
    const message = createBaseCampaign_AudienceSetting();
    message.useAudienceGrouped = object.useAudienceGrouped ?? undefined;
    return message;
  },
};

function createBaseCampaign_LocalServicesCampaignSettings(): Campaign_LocalServicesCampaignSettings {
  return { categoryBids: [] };
}

export const Campaign_LocalServicesCampaignSettings: MessageFns<Campaign_LocalServicesCampaignSettings> = {
  encode(message: Campaign_LocalServicesCampaignSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.categoryBids) {
      Campaign_CategoryBid.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_LocalServicesCampaignSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_LocalServicesCampaignSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.categoryBids.push(Campaign_CategoryBid.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_LocalServicesCampaignSettings {
    return {
      categoryBids: globalThis.Array.isArray(object?.categoryBids)
        ? object.categoryBids.map((e: any) => Campaign_CategoryBid.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Campaign_LocalServicesCampaignSettings): unknown {
    const obj: any = {};
    if (message.categoryBids?.length) {
      obj.categoryBids = message.categoryBids.map((e) => Campaign_CategoryBid.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_LocalServicesCampaignSettings>): Campaign_LocalServicesCampaignSettings {
    return Campaign_LocalServicesCampaignSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_LocalServicesCampaignSettings>): Campaign_LocalServicesCampaignSettings {
    const message = createBaseCampaign_LocalServicesCampaignSettings();
    message.categoryBids = object.categoryBids?.map((e) => Campaign_CategoryBid.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCampaign_CategoryBid(): Campaign_CategoryBid {
  return { categoryId: undefined, manualCpaBidMicros: undefined };
}

export const Campaign_CategoryBid: MessageFns<Campaign_CategoryBid> = {
  encode(message: Campaign_CategoryBid, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.categoryId !== undefined) {
      writer.uint32(10).string(message.categoryId);
    }
    if (message.manualCpaBidMicros !== undefined) {
      writer.uint32(16).int64(message.manualCpaBidMicros.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_CategoryBid {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_CategoryBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.manualCpaBidMicros = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_CategoryBid {
    return {
      categoryId: isSet(object.categoryId) ? globalThis.String(object.categoryId) : undefined,
      manualCpaBidMicros: isSet(object.manualCpaBidMicros) ? Long.fromValue(object.manualCpaBidMicros) : undefined,
    };
  },

  toJSON(message: Campaign_CategoryBid): unknown {
    const obj: any = {};
    if (message.categoryId !== undefined) {
      obj.categoryId = message.categoryId;
    }
    if (message.manualCpaBidMicros !== undefined) {
      obj.manualCpaBidMicros = (message.manualCpaBidMicros || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_CategoryBid>): Campaign_CategoryBid {
    return Campaign_CategoryBid.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_CategoryBid>): Campaign_CategoryBid {
    const message = createBaseCampaign_CategoryBid();
    message.categoryId = object.categoryId ?? undefined;
    message.manualCpaBidMicros = (object.manualCpaBidMicros !== undefined && object.manualCpaBidMicros !== null)
      ? Long.fromValue(object.manualCpaBidMicros)
      : undefined;
    return message;
  },
};

function createBaseCampaign_TravelCampaignSettings(): Campaign_TravelCampaignSettings {
  return { travelAccountId: undefined };
}

export const Campaign_TravelCampaignSettings: MessageFns<Campaign_TravelCampaignSettings> = {
  encode(message: Campaign_TravelCampaignSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.travelAccountId !== undefined) {
      writer.uint32(8).int64(message.travelAccountId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_TravelCampaignSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_TravelCampaignSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.travelAccountId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_TravelCampaignSettings {
    return { travelAccountId: isSet(object.travelAccountId) ? Long.fromValue(object.travelAccountId) : undefined };
  },

  toJSON(message: Campaign_TravelCampaignSettings): unknown {
    const obj: any = {};
    if (message.travelAccountId !== undefined) {
      obj.travelAccountId = (message.travelAccountId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_TravelCampaignSettings>): Campaign_TravelCampaignSettings {
    return Campaign_TravelCampaignSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_TravelCampaignSettings>): Campaign_TravelCampaignSettings {
    const message = createBaseCampaign_TravelCampaignSettings();
    message.travelAccountId = (object.travelAccountId !== undefined && object.travelAccountId !== null)
      ? Long.fromValue(object.travelAccountId)
      : undefined;
    return message;
  },
};

function createBaseCampaign_DiscoveryCampaignSettings(): Campaign_DiscoveryCampaignSettings {
  return { upgradedTargeting: undefined };
}

export const Campaign_DiscoveryCampaignSettings: MessageFns<Campaign_DiscoveryCampaignSettings> = {
  encode(message: Campaign_DiscoveryCampaignSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.upgradedTargeting !== undefined) {
      writer.uint32(8).bool(message.upgradedTargeting);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_DiscoveryCampaignSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_DiscoveryCampaignSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.upgradedTargeting = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_DiscoveryCampaignSettings {
    return {
      upgradedTargeting: isSet(object.upgradedTargeting) ? globalThis.Boolean(object.upgradedTargeting) : undefined,
    };
  },

  toJSON(message: Campaign_DiscoveryCampaignSettings): unknown {
    const obj: any = {};
    if (message.upgradedTargeting !== undefined) {
      obj.upgradedTargeting = message.upgradedTargeting;
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_DiscoveryCampaignSettings>): Campaign_DiscoveryCampaignSettings {
    return Campaign_DiscoveryCampaignSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_DiscoveryCampaignSettings>): Campaign_DiscoveryCampaignSettings {
    const message = createBaseCampaign_DiscoveryCampaignSettings();
    message.upgradedTargeting = object.upgradedTargeting ?? undefined;
    return message;
  },
};

function createBaseCampaign_AssetAutomationSetting(): Campaign_AssetAutomationSetting {
  return { assetAutomationType: undefined, assetAutomationStatus: undefined };
}

export const Campaign_AssetAutomationSetting: MessageFns<Campaign_AssetAutomationSetting> = {
  encode(message: Campaign_AssetAutomationSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assetAutomationType !== undefined) {
      writer.uint32(8).int32(message.assetAutomationType);
    }
    if (message.assetAutomationStatus !== undefined) {
      writer.uint32(16).int32(message.assetAutomationStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_AssetAutomationSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_AssetAutomationSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.assetAutomationType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.assetAutomationStatus = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_AssetAutomationSetting {
    return {
      assetAutomationType: isSet(object.assetAutomationType)
        ? assetAutomationTypeEnum_AssetAutomationTypeFromJSON(object.assetAutomationType)
        : undefined,
      assetAutomationStatus: isSet(object.assetAutomationStatus)
        ? assetAutomationStatusEnum_AssetAutomationStatusFromJSON(object.assetAutomationStatus)
        : undefined,
    };
  },

  toJSON(message: Campaign_AssetAutomationSetting): unknown {
    const obj: any = {};
    if (message.assetAutomationType !== undefined) {
      obj.assetAutomationType = assetAutomationTypeEnum_AssetAutomationTypeToJSON(message.assetAutomationType);
    }
    if (message.assetAutomationStatus !== undefined) {
      obj.assetAutomationStatus = assetAutomationStatusEnum_AssetAutomationStatusToJSON(message.assetAutomationStatus);
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_AssetAutomationSetting>): Campaign_AssetAutomationSetting {
    return Campaign_AssetAutomationSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_AssetAutomationSetting>): Campaign_AssetAutomationSetting {
    const message = createBaseCampaign_AssetAutomationSetting();
    message.assetAutomationType = object.assetAutomationType ?? undefined;
    message.assetAutomationStatus = object.assetAutomationStatus ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
