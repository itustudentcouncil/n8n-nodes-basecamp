// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/experiment_arm_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible experiment arm error. */
export interface ExperimentArmErrorEnum {
}

/** Enum describing possible experiment arm errors. */
export enum ExperimentArmErrorEnum_ExperimentArmError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** EXPERIMENT_ARM_COUNT_LIMIT_EXCEEDED - Number of experiment arms is above limit. */
  EXPERIMENT_ARM_COUNT_LIMIT_EXCEEDED = 2,
  /** INVALID_CAMPAIGN_STATUS - Cannot add campaign with invalid status to the experiment arm. */
  INVALID_CAMPAIGN_STATUS = 3,
  /** DUPLICATE_EXPERIMENT_ARM_NAME - Cannot add duplicate experiment arm name in one experiment. */
  DUPLICATE_EXPERIMENT_ARM_NAME = 4,
  /** CANNOT_SET_TREATMENT_ARM_CAMPAIGN - Cannot set campaigns of treatment experiment arm. */
  CANNOT_SET_TREATMENT_ARM_CAMPAIGN = 5,
  /** CANNOT_MODIFY_CAMPAIGN_IDS - Cannot edit campaign ids in trial arms in non SETUP experiment. */
  CANNOT_MODIFY_CAMPAIGN_IDS = 6,
  /**
   * CANNOT_MODIFY_CAMPAIGN_WITHOUT_SUFFIX_SET - Cannot modify the campaigns in the control arm
   * if there is not a suffix set in the trial.
   */
  CANNOT_MODIFY_CAMPAIGN_WITHOUT_SUFFIX_SET = 7,
  /**
   * CANNOT_MUTATE_TRAFFIC_SPLIT_AFTER_START - Traffic split related settings (like traffic share bounds) can't be
   * modified after the trial has started.
   */
  CANNOT_MUTATE_TRAFFIC_SPLIT_AFTER_START = 8,
  /** CANNOT_ADD_CAMPAIGN_WITH_SHARED_BUDGET - Cannot use shared budget on experiment's control campaign. */
  CANNOT_ADD_CAMPAIGN_WITH_SHARED_BUDGET = 9,
  /** CANNOT_ADD_CAMPAIGN_WITH_CUSTOM_BUDGET - Cannot use custom budget on experiment's control campaigns. */
  CANNOT_ADD_CAMPAIGN_WITH_CUSTOM_BUDGET = 10,
  /** CANNOT_ADD_CAMPAIGNS_WITH_DYNAMIC_ASSETS_ENABLED - Cannot have enable_dynamic_assets turned on in experiment's campaigns. */
  CANNOT_ADD_CAMPAIGNS_WITH_DYNAMIC_ASSETS_ENABLED = 11,
  /** UNSUPPORTED_CAMPAIGN_ADVERTISING_CHANNEL_SUB_TYPE - Cannot use campaign's advertising channel sub type in experiment. */
  UNSUPPORTED_CAMPAIGN_ADVERTISING_CHANNEL_SUB_TYPE = 12,
  /** CANNOT_ADD_BASE_CAMPAIGN_WITH_DATE_RANGE - Experiment date range must be within base campaign's date range. */
  CANNOT_ADD_BASE_CAMPAIGN_WITH_DATE_RANGE = 13,
  /** BIDDING_STRATEGY_NOT_SUPPORTED_IN_EXPERIMENTS - Bidding strategy is not supported in experiments. */
  BIDDING_STRATEGY_NOT_SUPPORTED_IN_EXPERIMENTS = 14,
  /** TRAFFIC_SPLIT_NOT_SUPPORTED_FOR_CHANNEL_TYPE - Traffic split is not supported for some channel types. */
  TRAFFIC_SPLIT_NOT_SUPPORTED_FOR_CHANNEL_TYPE = 15,
  UNRECOGNIZED = -1,
}

export function experimentArmErrorEnum_ExperimentArmErrorFromJSON(
  object: any,
): ExperimentArmErrorEnum_ExperimentArmError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return ExperimentArmErrorEnum_ExperimentArmError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return ExperimentArmErrorEnum_ExperimentArmError.UNKNOWN;
    case 2:
    case "EXPERIMENT_ARM_COUNT_LIMIT_EXCEEDED":
      return ExperimentArmErrorEnum_ExperimentArmError.EXPERIMENT_ARM_COUNT_LIMIT_EXCEEDED;
    case 3:
    case "INVALID_CAMPAIGN_STATUS":
      return ExperimentArmErrorEnum_ExperimentArmError.INVALID_CAMPAIGN_STATUS;
    case 4:
    case "DUPLICATE_EXPERIMENT_ARM_NAME":
      return ExperimentArmErrorEnum_ExperimentArmError.DUPLICATE_EXPERIMENT_ARM_NAME;
    case 5:
    case "CANNOT_SET_TREATMENT_ARM_CAMPAIGN":
      return ExperimentArmErrorEnum_ExperimentArmError.CANNOT_SET_TREATMENT_ARM_CAMPAIGN;
    case 6:
    case "CANNOT_MODIFY_CAMPAIGN_IDS":
      return ExperimentArmErrorEnum_ExperimentArmError.CANNOT_MODIFY_CAMPAIGN_IDS;
    case 7:
    case "CANNOT_MODIFY_CAMPAIGN_WITHOUT_SUFFIX_SET":
      return ExperimentArmErrorEnum_ExperimentArmError.CANNOT_MODIFY_CAMPAIGN_WITHOUT_SUFFIX_SET;
    case 8:
    case "CANNOT_MUTATE_TRAFFIC_SPLIT_AFTER_START":
      return ExperimentArmErrorEnum_ExperimentArmError.CANNOT_MUTATE_TRAFFIC_SPLIT_AFTER_START;
    case 9:
    case "CANNOT_ADD_CAMPAIGN_WITH_SHARED_BUDGET":
      return ExperimentArmErrorEnum_ExperimentArmError.CANNOT_ADD_CAMPAIGN_WITH_SHARED_BUDGET;
    case 10:
    case "CANNOT_ADD_CAMPAIGN_WITH_CUSTOM_BUDGET":
      return ExperimentArmErrorEnum_ExperimentArmError.CANNOT_ADD_CAMPAIGN_WITH_CUSTOM_BUDGET;
    case 11:
    case "CANNOT_ADD_CAMPAIGNS_WITH_DYNAMIC_ASSETS_ENABLED":
      return ExperimentArmErrorEnum_ExperimentArmError.CANNOT_ADD_CAMPAIGNS_WITH_DYNAMIC_ASSETS_ENABLED;
    case 12:
    case "UNSUPPORTED_CAMPAIGN_ADVERTISING_CHANNEL_SUB_TYPE":
      return ExperimentArmErrorEnum_ExperimentArmError.UNSUPPORTED_CAMPAIGN_ADVERTISING_CHANNEL_SUB_TYPE;
    case 13:
    case "CANNOT_ADD_BASE_CAMPAIGN_WITH_DATE_RANGE":
      return ExperimentArmErrorEnum_ExperimentArmError.CANNOT_ADD_BASE_CAMPAIGN_WITH_DATE_RANGE;
    case 14:
    case "BIDDING_STRATEGY_NOT_SUPPORTED_IN_EXPERIMENTS":
      return ExperimentArmErrorEnum_ExperimentArmError.BIDDING_STRATEGY_NOT_SUPPORTED_IN_EXPERIMENTS;
    case 15:
    case "TRAFFIC_SPLIT_NOT_SUPPORTED_FOR_CHANNEL_TYPE":
      return ExperimentArmErrorEnum_ExperimentArmError.TRAFFIC_SPLIT_NOT_SUPPORTED_FOR_CHANNEL_TYPE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExperimentArmErrorEnum_ExperimentArmError.UNRECOGNIZED;
  }
}

export function experimentArmErrorEnum_ExperimentArmErrorToJSON(
  object: ExperimentArmErrorEnum_ExperimentArmError,
): string {
  switch (object) {
    case ExperimentArmErrorEnum_ExperimentArmError.UNSPECIFIED:
      return "UNSPECIFIED";
    case ExperimentArmErrorEnum_ExperimentArmError.UNKNOWN:
      return "UNKNOWN";
    case ExperimentArmErrorEnum_ExperimentArmError.EXPERIMENT_ARM_COUNT_LIMIT_EXCEEDED:
      return "EXPERIMENT_ARM_COUNT_LIMIT_EXCEEDED";
    case ExperimentArmErrorEnum_ExperimentArmError.INVALID_CAMPAIGN_STATUS:
      return "INVALID_CAMPAIGN_STATUS";
    case ExperimentArmErrorEnum_ExperimentArmError.DUPLICATE_EXPERIMENT_ARM_NAME:
      return "DUPLICATE_EXPERIMENT_ARM_NAME";
    case ExperimentArmErrorEnum_ExperimentArmError.CANNOT_SET_TREATMENT_ARM_CAMPAIGN:
      return "CANNOT_SET_TREATMENT_ARM_CAMPAIGN";
    case ExperimentArmErrorEnum_ExperimentArmError.CANNOT_MODIFY_CAMPAIGN_IDS:
      return "CANNOT_MODIFY_CAMPAIGN_IDS";
    case ExperimentArmErrorEnum_ExperimentArmError.CANNOT_MODIFY_CAMPAIGN_WITHOUT_SUFFIX_SET:
      return "CANNOT_MODIFY_CAMPAIGN_WITHOUT_SUFFIX_SET";
    case ExperimentArmErrorEnum_ExperimentArmError.CANNOT_MUTATE_TRAFFIC_SPLIT_AFTER_START:
      return "CANNOT_MUTATE_TRAFFIC_SPLIT_AFTER_START";
    case ExperimentArmErrorEnum_ExperimentArmError.CANNOT_ADD_CAMPAIGN_WITH_SHARED_BUDGET:
      return "CANNOT_ADD_CAMPAIGN_WITH_SHARED_BUDGET";
    case ExperimentArmErrorEnum_ExperimentArmError.CANNOT_ADD_CAMPAIGN_WITH_CUSTOM_BUDGET:
      return "CANNOT_ADD_CAMPAIGN_WITH_CUSTOM_BUDGET";
    case ExperimentArmErrorEnum_ExperimentArmError.CANNOT_ADD_CAMPAIGNS_WITH_DYNAMIC_ASSETS_ENABLED:
      return "CANNOT_ADD_CAMPAIGNS_WITH_DYNAMIC_ASSETS_ENABLED";
    case ExperimentArmErrorEnum_ExperimentArmError.UNSUPPORTED_CAMPAIGN_ADVERTISING_CHANNEL_SUB_TYPE:
      return "UNSUPPORTED_CAMPAIGN_ADVERTISING_CHANNEL_SUB_TYPE";
    case ExperimentArmErrorEnum_ExperimentArmError.CANNOT_ADD_BASE_CAMPAIGN_WITH_DATE_RANGE:
      return "CANNOT_ADD_BASE_CAMPAIGN_WITH_DATE_RANGE";
    case ExperimentArmErrorEnum_ExperimentArmError.BIDDING_STRATEGY_NOT_SUPPORTED_IN_EXPERIMENTS:
      return "BIDDING_STRATEGY_NOT_SUPPORTED_IN_EXPERIMENTS";
    case ExperimentArmErrorEnum_ExperimentArmError.TRAFFIC_SPLIT_NOT_SUPPORTED_FOR_CHANNEL_TYPE:
      return "TRAFFIC_SPLIT_NOT_SUPPORTED_FOR_CHANNEL_TYPE";
    case ExperimentArmErrorEnum_ExperimentArmError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseExperimentArmErrorEnum(): ExperimentArmErrorEnum {
  return {};
}

export const ExperimentArmErrorEnum: MessageFns<ExperimentArmErrorEnum> = {
  encode(_: ExperimentArmErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExperimentArmErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperimentArmErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ExperimentArmErrorEnum {
    return {};
  },

  toJSON(_: ExperimentArmErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ExperimentArmErrorEnum>): ExperimentArmErrorEnum {
    return ExperimentArmErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ExperimentArmErrorEnum>): ExperimentArmErrorEnum {
    const message = createBaseExperimentArmErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
