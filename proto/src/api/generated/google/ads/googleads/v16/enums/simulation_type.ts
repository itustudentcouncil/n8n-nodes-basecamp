// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/enums/simulation_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.enums";

/** Container for enum describing the field a simulation modifies. */
export interface SimulationTypeEnum {
}

/** Enum describing the field a simulation modifies. */
export enum SimulationTypeEnum_SimulationType {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /** CPC_BID - The simulation is for a CPC bid. */
  CPC_BID = 2,
  /** CPV_BID - The simulation is for a CPV bid. */
  CPV_BID = 3,
  /** TARGET_CPA - The simulation is for a CPA target. */
  TARGET_CPA = 4,
  /** BID_MODIFIER - The simulation is for a bid modifier. */
  BID_MODIFIER = 5,
  /** TARGET_ROAS - The simulation is for a ROAS target. */
  TARGET_ROAS = 6,
  /** PERCENT_CPC_BID - The simulation is for a percent CPC bid. */
  PERCENT_CPC_BID = 7,
  /** TARGET_IMPRESSION_SHARE - The simulation is for an impression share target. */
  TARGET_IMPRESSION_SHARE = 8,
  /** BUDGET - The simulation is for a budget. */
  BUDGET = 9,
  UNRECOGNIZED = -1,
}

export function simulationTypeEnum_SimulationTypeFromJSON(object: any): SimulationTypeEnum_SimulationType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return SimulationTypeEnum_SimulationType.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return SimulationTypeEnum_SimulationType.UNKNOWN;
    case 2:
    case "CPC_BID":
      return SimulationTypeEnum_SimulationType.CPC_BID;
    case 3:
    case "CPV_BID":
      return SimulationTypeEnum_SimulationType.CPV_BID;
    case 4:
    case "TARGET_CPA":
      return SimulationTypeEnum_SimulationType.TARGET_CPA;
    case 5:
    case "BID_MODIFIER":
      return SimulationTypeEnum_SimulationType.BID_MODIFIER;
    case 6:
    case "TARGET_ROAS":
      return SimulationTypeEnum_SimulationType.TARGET_ROAS;
    case 7:
    case "PERCENT_CPC_BID":
      return SimulationTypeEnum_SimulationType.PERCENT_CPC_BID;
    case 8:
    case "TARGET_IMPRESSION_SHARE":
      return SimulationTypeEnum_SimulationType.TARGET_IMPRESSION_SHARE;
    case 9:
    case "BUDGET":
      return SimulationTypeEnum_SimulationType.BUDGET;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SimulationTypeEnum_SimulationType.UNRECOGNIZED;
  }
}

export function simulationTypeEnum_SimulationTypeToJSON(object: SimulationTypeEnum_SimulationType): string {
  switch (object) {
    case SimulationTypeEnum_SimulationType.UNSPECIFIED:
      return "UNSPECIFIED";
    case SimulationTypeEnum_SimulationType.UNKNOWN:
      return "UNKNOWN";
    case SimulationTypeEnum_SimulationType.CPC_BID:
      return "CPC_BID";
    case SimulationTypeEnum_SimulationType.CPV_BID:
      return "CPV_BID";
    case SimulationTypeEnum_SimulationType.TARGET_CPA:
      return "TARGET_CPA";
    case SimulationTypeEnum_SimulationType.BID_MODIFIER:
      return "BID_MODIFIER";
    case SimulationTypeEnum_SimulationType.TARGET_ROAS:
      return "TARGET_ROAS";
    case SimulationTypeEnum_SimulationType.PERCENT_CPC_BID:
      return "PERCENT_CPC_BID";
    case SimulationTypeEnum_SimulationType.TARGET_IMPRESSION_SHARE:
      return "TARGET_IMPRESSION_SHARE";
    case SimulationTypeEnum_SimulationType.BUDGET:
      return "BUDGET";
    case SimulationTypeEnum_SimulationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseSimulationTypeEnum(): SimulationTypeEnum {
  return {};
}

export const SimulationTypeEnum: MessageFns<SimulationTypeEnum> = {
  encode(_: SimulationTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimulationTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimulationTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SimulationTypeEnum {
    return {};
  },

  toJSON(_: SimulationTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SimulationTypeEnum>): SimulationTypeEnum {
    return SimulationTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SimulationTypeEnum>): SimulationTypeEnum {
    const message = createBaseSimulationTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
