// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/services/customer_conversion_goal_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { CustomerConversionGoal } from "../resources/customer_conversion_goal.js";

export const protobufPackage = "google.ads.googleads.v16.services";

/**
 * Request message for
 * [CustomerConversionGoalService.MutateCustomerConversionGoals][google.ads.googleads.v16.services.CustomerConversionGoalService.MutateCustomerConversionGoals].
 */
export interface MutateCustomerConversionGoalsRequest {
  /**
   * Required. The ID of the customer whose customer conversion goals are being
   * modified.
   */
  customerId: string;
  /**
   * Required. The list of operations to perform on individual customer
   * conversion goal.
   */
  operations: CustomerConversionGoalOperation[];
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
}

/** A single operation (update) on a customer conversion goal. */
export interface CustomerConversionGoalOperation {
  /** FieldMask that determines which resource fields are modified in an update. */
  updateMask:
    | string[]
    | undefined;
  /**
   * Update operation: The customer conversion goal is expected to have a
   * valid resource name.
   */
  update?: CustomerConversionGoal | undefined;
}

/** Response message for a customer conversion goal mutate. */
export interface MutateCustomerConversionGoalsResponse {
  /** All results for the mutate. */
  results: MutateCustomerConversionGoalResult[];
}

/** The result for the customer conversion goal mutate. */
export interface MutateCustomerConversionGoalResult {
  /** Returned for successful operations. */
  resourceName: string;
}

function createBaseMutateCustomerConversionGoalsRequest(): MutateCustomerConversionGoalsRequest {
  return { customerId: "", operations: [], validateOnly: false };
}

export const MutateCustomerConversionGoalsRequest: MessageFns<MutateCustomerConversionGoalsRequest> = {
  encode(message: MutateCustomerConversionGoalsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    for (const v of message.operations) {
      CustomerConversionGoalOperation.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCustomerConversionGoalsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCustomerConversionGoalsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operations.push(CustomerConversionGoalOperation.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCustomerConversionGoalsRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      operations: globalThis.Array.isArray(object?.operations)
        ? object.operations.map((e: any) => CustomerConversionGoalOperation.fromJSON(e))
        : [],
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: MutateCustomerConversionGoalsRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.operations?.length) {
      obj.operations = message.operations.map((e) => CustomerConversionGoalOperation.toJSON(e));
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCustomerConversionGoalsRequest>): MutateCustomerConversionGoalsRequest {
    return MutateCustomerConversionGoalsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCustomerConversionGoalsRequest>): MutateCustomerConversionGoalsRequest {
    const message = createBaseMutateCustomerConversionGoalsRequest();
    message.customerId = object.customerId ?? "";
    message.operations = object.operations?.map((e) => CustomerConversionGoalOperation.fromPartial(e)) || [];
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseCustomerConversionGoalOperation(): CustomerConversionGoalOperation {
  return { updateMask: undefined, update: undefined };
}

export const CustomerConversionGoalOperation: MessageFns<CustomerConversionGoalOperation> = {
  encode(message: CustomerConversionGoalOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.update !== undefined) {
      CustomerConversionGoal.encode(message.update, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerConversionGoalOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerConversionGoalOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.update = CustomerConversionGoal.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerConversionGoalOperation {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      update: isSet(object.update) ? CustomerConversionGoal.fromJSON(object.update) : undefined,
    };
  },

  toJSON(message: CustomerConversionGoalOperation): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.update !== undefined) {
      obj.update = CustomerConversionGoal.toJSON(message.update);
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerConversionGoalOperation>): CustomerConversionGoalOperation {
    return CustomerConversionGoalOperation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerConversionGoalOperation>): CustomerConversionGoalOperation {
    const message = createBaseCustomerConversionGoalOperation();
    message.updateMask = object.updateMask ?? undefined;
    message.update = (object.update !== undefined && object.update !== null)
      ? CustomerConversionGoal.fromPartial(object.update)
      : undefined;
    return message;
  },
};

function createBaseMutateCustomerConversionGoalsResponse(): MutateCustomerConversionGoalsResponse {
  return { results: [] };
}

export const MutateCustomerConversionGoalsResponse: MessageFns<MutateCustomerConversionGoalsResponse> = {
  encode(message: MutateCustomerConversionGoalsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.results) {
      MutateCustomerConversionGoalResult.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCustomerConversionGoalsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCustomerConversionGoalsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.results.push(MutateCustomerConversionGoalResult.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCustomerConversionGoalsResponse {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => MutateCustomerConversionGoalResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MutateCustomerConversionGoalsResponse): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => MutateCustomerConversionGoalResult.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCustomerConversionGoalsResponse>): MutateCustomerConversionGoalsResponse {
    return MutateCustomerConversionGoalsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCustomerConversionGoalsResponse>): MutateCustomerConversionGoalsResponse {
    const message = createBaseMutateCustomerConversionGoalsResponse();
    message.results = object.results?.map((e) => MutateCustomerConversionGoalResult.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMutateCustomerConversionGoalResult(): MutateCustomerConversionGoalResult {
  return { resourceName: "" };
}

export const MutateCustomerConversionGoalResult: MessageFns<MutateCustomerConversionGoalResult> = {
  encode(message: MutateCustomerConversionGoalResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCustomerConversionGoalResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCustomerConversionGoalResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCustomerConversionGoalResult {
    return { resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "" };
  },

  toJSON(message: MutateCustomerConversionGoalResult): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCustomerConversionGoalResult>): MutateCustomerConversionGoalResult {
    return MutateCustomerConversionGoalResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCustomerConversionGoalResult>): MutateCustomerConversionGoalResult {
    const message = createBaseMutateCustomerConversionGoalResult();
    message.resourceName = object.resourceName ?? "";
    return message;
  },
};

/** Service to manage customer conversion goal. */
export type CustomerConversionGoalServiceDefinition = typeof CustomerConversionGoalServiceDefinition;
export const CustomerConversionGoalServiceDefinition = {
  name: "CustomerConversionGoalService",
  fullName: "google.ads.googleads.v16.services.CustomerConversionGoalService",
  methods: {
    /**
     * Creates, updates or removes customer conversion goals. Operation statuses
     * are returned.
     */
    mutateCustomerConversionGoals: {
      name: "MutateCustomerConversionGoals",
      requestType: MutateCustomerConversionGoalsRequest,
      requestStream: false,
      responseType: MutateCustomerConversionGoalsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              49,
              54,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              71,
              111,
              97,
              108,
              115,
              58,
              109,
              117,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CustomerConversionGoalServiceImplementation<CallContextExt = {}> {
  /**
   * Creates, updates or removes customer conversion goals. Operation statuses
   * are returned.
   */
  mutateCustomerConversionGoals(
    request: MutateCustomerConversionGoalsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MutateCustomerConversionGoalsResponse>>;
}

export interface CustomerConversionGoalServiceClient<CallOptionsExt = {}> {
  /**
   * Creates, updates or removes customer conversion goals. Operation statuses
   * are returned.
   */
  mutateCustomerConversionGoals(
    request: DeepPartial<MutateCustomerConversionGoalsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MutateCustomerConversionGoalsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
