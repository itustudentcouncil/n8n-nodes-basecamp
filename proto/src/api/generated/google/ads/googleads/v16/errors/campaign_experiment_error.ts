// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/campaign_experiment_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible campaign experiment errors. */
export interface CampaignExperimentErrorEnum {
}

/** Enum describing possible campaign experiment errors. */
export enum CampaignExperimentErrorEnum_CampaignExperimentError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** DUPLICATE_NAME - An active campaign or experiment with this name already exists. */
  DUPLICATE_NAME = 2,
  /**
   * INVALID_TRANSITION - Experiment cannot be updated from the current state to the
   * requested target state. For example, an experiment can only graduate
   * if its status is ENABLED.
   */
  INVALID_TRANSITION = 3,
  /**
   * CANNOT_CREATE_EXPERIMENT_WITH_SHARED_BUDGET - Cannot create an experiment from a campaign using an explicitly shared
   * budget.
   */
  CANNOT_CREATE_EXPERIMENT_WITH_SHARED_BUDGET = 4,
  /** CANNOT_CREATE_EXPERIMENT_FOR_REMOVED_BASE_CAMPAIGN - Cannot create an experiment for a removed base campaign. */
  CANNOT_CREATE_EXPERIMENT_FOR_REMOVED_BASE_CAMPAIGN = 5,
  /**
   * CANNOT_CREATE_EXPERIMENT_FOR_NON_PROPOSED_DRAFT - Cannot create an experiment from a draft, which has a status other than
   * proposed.
   */
  CANNOT_CREATE_EXPERIMENT_FOR_NON_PROPOSED_DRAFT = 6,
  /** CUSTOMER_CANNOT_CREATE_EXPERIMENT - This customer is not allowed to create an experiment. */
  CUSTOMER_CANNOT_CREATE_EXPERIMENT = 7,
  /** CAMPAIGN_CANNOT_CREATE_EXPERIMENT - This campaign is not allowed to create an experiment. */
  CAMPAIGN_CANNOT_CREATE_EXPERIMENT = 8,
  /**
   * EXPERIMENT_DURATIONS_MUST_NOT_OVERLAP - Trying to set an experiment duration which overlaps with another
   * experiment.
   */
  EXPERIMENT_DURATIONS_MUST_NOT_OVERLAP = 9,
  /**
   * EXPERIMENT_DURATION_MUST_BE_WITHIN_CAMPAIGN_DURATION - All non-removed experiments must start and end within their campaign's
   * duration.
   */
  EXPERIMENT_DURATION_MUST_BE_WITHIN_CAMPAIGN_DURATION = 10,
  /**
   * CANNOT_MUTATE_EXPERIMENT_DUE_TO_STATUS - The experiment cannot be modified because its status is in a terminal
   * state, such as REMOVED.
   */
  CANNOT_MUTATE_EXPERIMENT_DUE_TO_STATUS = 11,
  UNRECOGNIZED = -1,
}

export function campaignExperimentErrorEnum_CampaignExperimentErrorFromJSON(
  object: any,
): CampaignExperimentErrorEnum_CampaignExperimentError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return CampaignExperimentErrorEnum_CampaignExperimentError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return CampaignExperimentErrorEnum_CampaignExperimentError.UNKNOWN;
    case 2:
    case "DUPLICATE_NAME":
      return CampaignExperimentErrorEnum_CampaignExperimentError.DUPLICATE_NAME;
    case 3:
    case "INVALID_TRANSITION":
      return CampaignExperimentErrorEnum_CampaignExperimentError.INVALID_TRANSITION;
    case 4:
    case "CANNOT_CREATE_EXPERIMENT_WITH_SHARED_BUDGET":
      return CampaignExperimentErrorEnum_CampaignExperimentError.CANNOT_CREATE_EXPERIMENT_WITH_SHARED_BUDGET;
    case 5:
    case "CANNOT_CREATE_EXPERIMENT_FOR_REMOVED_BASE_CAMPAIGN":
      return CampaignExperimentErrorEnum_CampaignExperimentError.CANNOT_CREATE_EXPERIMENT_FOR_REMOVED_BASE_CAMPAIGN;
    case 6:
    case "CANNOT_CREATE_EXPERIMENT_FOR_NON_PROPOSED_DRAFT":
      return CampaignExperimentErrorEnum_CampaignExperimentError.CANNOT_CREATE_EXPERIMENT_FOR_NON_PROPOSED_DRAFT;
    case 7:
    case "CUSTOMER_CANNOT_CREATE_EXPERIMENT":
      return CampaignExperimentErrorEnum_CampaignExperimentError.CUSTOMER_CANNOT_CREATE_EXPERIMENT;
    case 8:
    case "CAMPAIGN_CANNOT_CREATE_EXPERIMENT":
      return CampaignExperimentErrorEnum_CampaignExperimentError.CAMPAIGN_CANNOT_CREATE_EXPERIMENT;
    case 9:
    case "EXPERIMENT_DURATIONS_MUST_NOT_OVERLAP":
      return CampaignExperimentErrorEnum_CampaignExperimentError.EXPERIMENT_DURATIONS_MUST_NOT_OVERLAP;
    case 10:
    case "EXPERIMENT_DURATION_MUST_BE_WITHIN_CAMPAIGN_DURATION":
      return CampaignExperimentErrorEnum_CampaignExperimentError.EXPERIMENT_DURATION_MUST_BE_WITHIN_CAMPAIGN_DURATION;
    case 11:
    case "CANNOT_MUTATE_EXPERIMENT_DUE_TO_STATUS":
      return CampaignExperimentErrorEnum_CampaignExperimentError.CANNOT_MUTATE_EXPERIMENT_DUE_TO_STATUS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CampaignExperimentErrorEnum_CampaignExperimentError.UNRECOGNIZED;
  }
}

export function campaignExperimentErrorEnum_CampaignExperimentErrorToJSON(
  object: CampaignExperimentErrorEnum_CampaignExperimentError,
): string {
  switch (object) {
    case CampaignExperimentErrorEnum_CampaignExperimentError.UNSPECIFIED:
      return "UNSPECIFIED";
    case CampaignExperimentErrorEnum_CampaignExperimentError.UNKNOWN:
      return "UNKNOWN";
    case CampaignExperimentErrorEnum_CampaignExperimentError.DUPLICATE_NAME:
      return "DUPLICATE_NAME";
    case CampaignExperimentErrorEnum_CampaignExperimentError.INVALID_TRANSITION:
      return "INVALID_TRANSITION";
    case CampaignExperimentErrorEnum_CampaignExperimentError.CANNOT_CREATE_EXPERIMENT_WITH_SHARED_BUDGET:
      return "CANNOT_CREATE_EXPERIMENT_WITH_SHARED_BUDGET";
    case CampaignExperimentErrorEnum_CampaignExperimentError.CANNOT_CREATE_EXPERIMENT_FOR_REMOVED_BASE_CAMPAIGN:
      return "CANNOT_CREATE_EXPERIMENT_FOR_REMOVED_BASE_CAMPAIGN";
    case CampaignExperimentErrorEnum_CampaignExperimentError.CANNOT_CREATE_EXPERIMENT_FOR_NON_PROPOSED_DRAFT:
      return "CANNOT_CREATE_EXPERIMENT_FOR_NON_PROPOSED_DRAFT";
    case CampaignExperimentErrorEnum_CampaignExperimentError.CUSTOMER_CANNOT_CREATE_EXPERIMENT:
      return "CUSTOMER_CANNOT_CREATE_EXPERIMENT";
    case CampaignExperimentErrorEnum_CampaignExperimentError.CAMPAIGN_CANNOT_CREATE_EXPERIMENT:
      return "CAMPAIGN_CANNOT_CREATE_EXPERIMENT";
    case CampaignExperimentErrorEnum_CampaignExperimentError.EXPERIMENT_DURATIONS_MUST_NOT_OVERLAP:
      return "EXPERIMENT_DURATIONS_MUST_NOT_OVERLAP";
    case CampaignExperimentErrorEnum_CampaignExperimentError.EXPERIMENT_DURATION_MUST_BE_WITHIN_CAMPAIGN_DURATION:
      return "EXPERIMENT_DURATION_MUST_BE_WITHIN_CAMPAIGN_DURATION";
    case CampaignExperimentErrorEnum_CampaignExperimentError.CANNOT_MUTATE_EXPERIMENT_DUE_TO_STATUS:
      return "CANNOT_MUTATE_EXPERIMENT_DUE_TO_STATUS";
    case CampaignExperimentErrorEnum_CampaignExperimentError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCampaignExperimentErrorEnum(): CampaignExperimentErrorEnum {
  return {};
}

export const CampaignExperimentErrorEnum: MessageFns<CampaignExperimentErrorEnum> = {
  encode(_: CampaignExperimentErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignExperimentErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignExperimentErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CampaignExperimentErrorEnum {
    return {};
  },

  toJSON(_: CampaignExperimentErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CampaignExperimentErrorEnum>): CampaignExperimentErrorEnum {
    return CampaignExperimentErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CampaignExperimentErrorEnum>): CampaignExperimentErrorEnum {
    const message = createBaseCampaignExperimentErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
