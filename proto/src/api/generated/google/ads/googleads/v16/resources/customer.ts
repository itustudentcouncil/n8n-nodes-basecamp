// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/customer.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  BrandSafetySuitabilityEnum_BrandSafetySuitability,
  brandSafetySuitabilityEnum_BrandSafetySuitabilityFromJSON,
  brandSafetySuitabilityEnum_BrandSafetySuitabilityToJSON,
} from "../enums/brand_safety_suitability.js";
import {
  ConversionTrackingStatusEnum_ConversionTrackingStatus,
  conversionTrackingStatusEnum_ConversionTrackingStatusFromJSON,
  conversionTrackingStatusEnum_ConversionTrackingStatusToJSON,
} from "../enums/conversion_tracking_status_enum.js";
import {
  CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason,
  customerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReasonFromJSON,
  customerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReasonToJSON,
} from "../enums/customer_pay_per_conversion_eligibility_failure_reason.js";
import {
  CustomerStatusEnum_CustomerStatus,
  customerStatusEnum_CustomerStatusFromJSON,
  customerStatusEnum_CustomerStatusToJSON,
} from "../enums/customer_status.js";
import {
  LocalServicesVerificationStatusEnum_LocalServicesVerificationStatus,
  localServicesVerificationStatusEnum_LocalServicesVerificationStatusFromJSON,
  localServicesVerificationStatusEnum_LocalServicesVerificationStatusToJSON,
} from "../enums/local_services_verification_status.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/** A customer. */
export interface Customer {
  /**
   * Immutable. The resource name of the customer.
   * Customer resource names have the form:
   *
   * `customers/{customer_id}`
   */
  resourceName: string;
  /** Output only. The ID of the customer. */
  id?:
    | Long
    | undefined;
  /** Optional, non-unique descriptive name of the customer. */
  descriptiveName?:
    | string
    | undefined;
  /**
   * Immutable. The currency in which the account operates.
   * A subset of the currency codes from the ISO 4217 standard is
   * supported.
   */
  currencyCode?:
    | string
    | undefined;
  /** Immutable. The local timezone ID of the customer. */
  timeZone?:
    | string
    | undefined;
  /**
   * The URL template for constructing a tracking URL out of parameters.
   * Only mutable in an `update` operation.
   */
  trackingUrlTemplate?:
    | string
    | undefined;
  /**
   * The URL template for appending params to the final URL.
   * Only mutable in an `update` operation.
   */
  finalUrlSuffix?:
    | string
    | undefined;
  /** Whether auto-tagging is enabled for the customer. */
  autoTaggingEnabled?:
    | boolean
    | undefined;
  /**
   * Output only. Whether the Customer has a Partners program badge. If the
   * Customer is not associated with the Partners program, this will be false.
   * For more information, see
   * https://support.google.com/partners/answer/3125774.
   */
  hasPartnersBadge?:
    | boolean
    | undefined;
  /** Output only. Whether the customer is a manager. */
  manager?:
    | boolean
    | undefined;
  /** Output only. Whether the customer is a test account. */
  testAccount?:
    | boolean
    | undefined;
  /**
   * Call reporting setting for a customer. Only mutable in an `update`
   * operation.
   */
  callReportingSetting:
    | CallReportingSetting
    | undefined;
  /** Output only. Conversion tracking setting for a customer. */
  conversionTrackingSetting:
    | ConversionTrackingSetting
    | undefined;
  /** Output only. Remarketing setting for a customer. */
  remarketingSetting:
    | RemarketingSetting
    | undefined;
  /**
   * Output only. Reasons why the customer is not eligible to use
   * PaymentMode.CONVERSIONS. If the list is empty, the customer is eligible.
   * This field is read-only.
   */
  payPerConversionEligibilityFailureReasons:
    CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason[];
  /**
   * Output only. Optimization score of the customer.
   *
   * Optimization score is an estimate of how well a customer's campaigns are
   * set to perform. It ranges from 0% (0.0) to 100% (1.0). This field is null
   * for all manager customers, and for unscored non-manager customers.
   *
   * See "About optimization score" at
   * https://support.google.com/google-ads/answer/9061546.
   *
   * This field is read-only.
   */
  optimizationScore?:
    | number
    | undefined;
  /**
   * Output only. Optimization score weight of the customer.
   *
   * Optimization score weight can be used to compare/aggregate optimization
   * scores across multiple non-manager customers. The aggregate optimization
   * score of a manager is computed as the sum over all of their customers of
   * `Customer.optimization_score * Customer.optimization_score_weight`. This
   * field is 0 for all manager customers, and for unscored non-manager
   * customers.
   *
   * This field is read-only.
   */
  optimizationScoreWeight: number;
  /** Output only. The status of the customer. */
  status: CustomerStatusEnum_CustomerStatus;
  /**
   * Output only. True if feed based location has been migrated to asset based
   * location.
   */
  locationAssetAutoMigrationDone?:
    | boolean
    | undefined;
  /**
   * Output only. True if feed based image has been migrated to asset based
   * image.
   */
  imageAssetAutoMigrationDone?:
    | boolean
    | undefined;
  /**
   * Output only. Timestamp of migration from feed based location to asset base
   * location in yyyy-MM-dd HH:mm:ss format.
   */
  locationAssetAutoMigrationDoneDateTime?:
    | string
    | undefined;
  /**
   * Output only. Timestamp of migration from feed based image to asset base
   * image in yyyy-MM-dd HH:mm:ss format.
   */
  imageAssetAutoMigrationDoneDateTime?:
    | string
    | undefined;
  /** Output only. Customer Agreement Setting for a customer. */
  customerAgreementSetting:
    | CustomerAgreementSetting
    | undefined;
  /** Output only. Settings for Local Services customer. */
  localServicesSettings:
    | LocalServicesSettings
    | undefined;
  /**
   * Output only. Brand Safety setting at the account level. Allows for
   * selecting an inventory type to show your ads on content that is the right
   * fit for your brand. See
   * https://support.google.com/google-ads/answer/7515513.
   */
  videoBrandSafetySuitability: BrandSafetySuitabilityEnum_BrandSafetySuitability;
}

/** Call reporting setting for a customer. Only mutable in an `update` operation. */
export interface CallReportingSetting {
  /**
   * Enable reporting of phone call events by redirecting them through Google
   * System.
   */
  callReportingEnabled?:
    | boolean
    | undefined;
  /** Whether to enable call conversion reporting. */
  callConversionReportingEnabled?:
    | boolean
    | undefined;
  /**
   * Customer-level call conversion action to attribute a call conversion to.
   * If not set a default conversion action is used. Only in effect when
   * call_conversion_reporting_enabled is set to true.
   */
  callConversionAction?: string | undefined;
}

/**
 * A collection of customer-wide settings related to Google Ads Conversion
 * Tracking.
 */
export interface ConversionTrackingSetting {
  /**
   * Output only. The conversion tracking id used for this account. This id
   * doesn't indicate whether the customer uses conversion tracking
   * (conversion_tracking_status does). This field is read-only.
   */
  conversionTrackingId?:
    | Long
    | undefined;
  /**
   * Output only. The conversion tracking id of the customer's manager. This is
   * set when the customer is opted into cross account conversion tracking, and
   * it overrides conversion_tracking_id. This field can only be managed through
   * the Google Ads UI. This field is read-only.
   */
  crossAccountConversionTrackingId?:
    | Long
    | undefined;
  /**
   * Output only. Whether the customer has accepted customer data terms. If
   * using cross-account conversion tracking, this value is inherited from the
   * manager. This field is read-only. For more
   * information, see https://support.google.com/adspolicy/answer/7475709.
   */
  acceptedCustomerDataTerms: boolean;
  /**
   * Output only. Conversion tracking status. It indicates whether the customer
   * is using conversion tracking, and who is the conversion tracking owner of
   * this customer. If this customer is using cross-account conversion tracking,
   * the value returned will differ based on the `login-customer-id` of the
   * request.
   */
  conversionTrackingStatus: ConversionTrackingStatusEnum_ConversionTrackingStatus;
  /**
   * Output only. Whether the customer is opted-in for enhanced conversions
   * for leads. If using cross-account conversion tracking, this value is
   * inherited from the manager. This field is read-only.
   */
  enhancedConversionsForLeadsEnabled: boolean;
  /**
   * Output only. The resource name of the customer where conversions are
   * created and managed. This field is read-only.
   */
  googleAdsConversionCustomer: string;
}

/** Remarketing setting for a customer. */
export interface RemarketingSetting {
  /** Output only. The Google tag. */
  googleGlobalSiteTag?: string | undefined;
}

/** Customer Agreement Setting for a customer. */
export interface CustomerAgreementSetting {
  /** Output only. Whether the customer has accepted lead form term of service. */
  acceptedLeadFormTerms: boolean;
}

/** Settings for Local Services customer. */
export interface LocalServicesSettings {
  /** Output only. A read-only list of geo vertical level license statuses. */
  granularLicenseStatuses: GranularLicenseStatus[];
  /** Output only. A read-only list of geo vertical level insurance statuses. */
  granularInsuranceStatuses: GranularInsuranceStatus[];
}

/** License status at geo + vertical level. */
export interface GranularLicenseStatus {
  /**
   * Output only. Geotarget criterion ID associated with the status. Can be on
   * country or state/province geo level, depending on requirements and
   * location. See https://developers.google.com/google-ads/api/data/geotargets
   * for more information.
   */
  geoCriterionId?:
    | Long
    | undefined;
  /**
   * Output only. Service category associated with the status. For example,
   * xcat:service_area_business_plumber.
   * For more details see:
   * https://developers.google.com/google-ads/api/data/codes-formats#local_services_ids
   */
  categoryId?:
    | string
    | undefined;
  /** Output only. Granular license status, per geo + vertical. */
  verificationStatus?: LocalServicesVerificationStatusEnum_LocalServicesVerificationStatus | undefined;
}

/** Insurance status at geo + vertical level. */
export interface GranularInsuranceStatus {
  /**
   * Output only. Geotarget criterion ID associated with the status. Can be on
   * country or state/province geo level, depending on requirements and
   * location. See https://developers.google.com/google-ads/api/data/geotargets
   * for more information.
   */
  geoCriterionId?:
    | Long
    | undefined;
  /**
   * Output only. Service category associated with the status. For example,
   * xcat:service_area_business_plumber.
   * For more details see:
   * https://developers.google.com/google-ads/api/data/codes-formats#local_services_ids
   */
  categoryId?:
    | string
    | undefined;
  /** Output only. Granular insurance status, per geo + vertical. */
  verificationStatus?: LocalServicesVerificationStatusEnum_LocalServicesVerificationStatus | undefined;
}

function createBaseCustomer(): Customer {
  return {
    resourceName: "",
    id: undefined,
    descriptiveName: undefined,
    currencyCode: undefined,
    timeZone: undefined,
    trackingUrlTemplate: undefined,
    finalUrlSuffix: undefined,
    autoTaggingEnabled: undefined,
    hasPartnersBadge: undefined,
    manager: undefined,
    testAccount: undefined,
    callReportingSetting: undefined,
    conversionTrackingSetting: undefined,
    remarketingSetting: undefined,
    payPerConversionEligibilityFailureReasons: [],
    optimizationScore: undefined,
    optimizationScoreWeight: 0,
    status: 0,
    locationAssetAutoMigrationDone: undefined,
    imageAssetAutoMigrationDone: undefined,
    locationAssetAutoMigrationDoneDateTime: undefined,
    imageAssetAutoMigrationDoneDateTime: undefined,
    customerAgreementSetting: undefined,
    localServicesSettings: undefined,
    videoBrandSafetySuitability: 0,
  };
}

export const Customer: MessageFns<Customer> = {
  encode(message: Customer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(152).int64(message.id.toString());
    }
    if (message.descriptiveName !== undefined) {
      writer.uint32(162).string(message.descriptiveName);
    }
    if (message.currencyCode !== undefined) {
      writer.uint32(170).string(message.currencyCode);
    }
    if (message.timeZone !== undefined) {
      writer.uint32(178).string(message.timeZone);
    }
    if (message.trackingUrlTemplate !== undefined) {
      writer.uint32(186).string(message.trackingUrlTemplate);
    }
    if (message.finalUrlSuffix !== undefined) {
      writer.uint32(194).string(message.finalUrlSuffix);
    }
    if (message.autoTaggingEnabled !== undefined) {
      writer.uint32(200).bool(message.autoTaggingEnabled);
    }
    if (message.hasPartnersBadge !== undefined) {
      writer.uint32(208).bool(message.hasPartnersBadge);
    }
    if (message.manager !== undefined) {
      writer.uint32(216).bool(message.manager);
    }
    if (message.testAccount !== undefined) {
      writer.uint32(224).bool(message.testAccount);
    }
    if (message.callReportingSetting !== undefined) {
      CallReportingSetting.encode(message.callReportingSetting, writer.uint32(82).fork()).join();
    }
    if (message.conversionTrackingSetting !== undefined) {
      ConversionTrackingSetting.encode(message.conversionTrackingSetting, writer.uint32(114).fork()).join();
    }
    if (message.remarketingSetting !== undefined) {
      RemarketingSetting.encode(message.remarketingSetting, writer.uint32(122).fork()).join();
    }
    writer.uint32(130).fork();
    for (const v of message.payPerConversionEligibilityFailureReasons) {
      writer.int32(v);
    }
    writer.join();
    if (message.optimizationScore !== undefined) {
      writer.uint32(233).double(message.optimizationScore);
    }
    if (message.optimizationScoreWeight !== 0) {
      writer.uint32(241).double(message.optimizationScoreWeight);
    }
    if (message.status !== 0) {
      writer.uint32(288).int32(message.status);
    }
    if (message.locationAssetAutoMigrationDone !== undefined) {
      writer.uint32(304).bool(message.locationAssetAutoMigrationDone);
    }
    if (message.imageAssetAutoMigrationDone !== undefined) {
      writer.uint32(312).bool(message.imageAssetAutoMigrationDone);
    }
    if (message.locationAssetAutoMigrationDoneDateTime !== undefined) {
      writer.uint32(322).string(message.locationAssetAutoMigrationDoneDateTime);
    }
    if (message.imageAssetAutoMigrationDoneDateTime !== undefined) {
      writer.uint32(330).string(message.imageAssetAutoMigrationDoneDateTime);
    }
    if (message.customerAgreementSetting !== undefined) {
      CustomerAgreementSetting.encode(message.customerAgreementSetting, writer.uint32(354).fork()).join();
    }
    if (message.localServicesSettings !== undefined) {
      LocalServicesSettings.encode(message.localServicesSettings, writer.uint32(362).fork()).join();
    }
    if (message.videoBrandSafetySuitability !== 0) {
      writer.uint32(368).int32(message.videoBrandSafetySuitability);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Customer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.descriptiveName = reader.string();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.timeZone = reader.string();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.trackingUrlTemplate = reader.string();
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.finalUrlSuffix = reader.string();
          continue;
        case 25:
          if (tag !== 200) {
            break;
          }

          message.autoTaggingEnabled = reader.bool();
          continue;
        case 26:
          if (tag !== 208) {
            break;
          }

          message.hasPartnersBadge = reader.bool();
          continue;
        case 27:
          if (tag !== 216) {
            break;
          }

          message.manager = reader.bool();
          continue;
        case 28:
          if (tag !== 224) {
            break;
          }

          message.testAccount = reader.bool();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.callReportingSetting = CallReportingSetting.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.conversionTrackingSetting = ConversionTrackingSetting.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.remarketingSetting = RemarketingSetting.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag === 128) {
            message.payPerConversionEligibilityFailureReasons.push(reader.int32() as any);

            continue;
          }

          if (tag === 130) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.payPerConversionEligibilityFailureReasons.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 29:
          if (tag !== 233) {
            break;
          }

          message.optimizationScore = reader.double();
          continue;
        case 30:
          if (tag !== 241) {
            break;
          }

          message.optimizationScoreWeight = reader.double();
          continue;
        case 36:
          if (tag !== 288) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 38:
          if (tag !== 304) {
            break;
          }

          message.locationAssetAutoMigrationDone = reader.bool();
          continue;
        case 39:
          if (tag !== 312) {
            break;
          }

          message.imageAssetAutoMigrationDone = reader.bool();
          continue;
        case 40:
          if (tag !== 322) {
            break;
          }

          message.locationAssetAutoMigrationDoneDateTime = reader.string();
          continue;
        case 41:
          if (tag !== 330) {
            break;
          }

          message.imageAssetAutoMigrationDoneDateTime = reader.string();
          continue;
        case 44:
          if (tag !== 354) {
            break;
          }

          message.customerAgreementSetting = CustomerAgreementSetting.decode(reader, reader.uint32());
          continue;
        case 45:
          if (tag !== 362) {
            break;
          }

          message.localServicesSettings = LocalServicesSettings.decode(reader, reader.uint32());
          continue;
        case 46:
          if (tag !== 368) {
            break;
          }

          message.videoBrandSafetySuitability = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Customer {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      descriptiveName: isSet(object.descriptiveName) ? globalThis.String(object.descriptiveName) : undefined,
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : undefined,
      timeZone: isSet(object.timeZone) ? globalThis.String(object.timeZone) : undefined,
      trackingUrlTemplate: isSet(object.trackingUrlTemplate)
        ? globalThis.String(object.trackingUrlTemplate)
        : undefined,
      finalUrlSuffix: isSet(object.finalUrlSuffix) ? globalThis.String(object.finalUrlSuffix) : undefined,
      autoTaggingEnabled: isSet(object.autoTaggingEnabled) ? globalThis.Boolean(object.autoTaggingEnabled) : undefined,
      hasPartnersBadge: isSet(object.hasPartnersBadge) ? globalThis.Boolean(object.hasPartnersBadge) : undefined,
      manager: isSet(object.manager) ? globalThis.Boolean(object.manager) : undefined,
      testAccount: isSet(object.testAccount) ? globalThis.Boolean(object.testAccount) : undefined,
      callReportingSetting: isSet(object.callReportingSetting)
        ? CallReportingSetting.fromJSON(object.callReportingSetting)
        : undefined,
      conversionTrackingSetting: isSet(object.conversionTrackingSetting)
        ? ConversionTrackingSetting.fromJSON(object.conversionTrackingSetting)
        : undefined,
      remarketingSetting: isSet(object.remarketingSetting)
        ? RemarketingSetting.fromJSON(object.remarketingSetting)
        : undefined,
      payPerConversionEligibilityFailureReasons:
        globalThis.Array.isArray(object?.payPerConversionEligibilityFailureReasons)
          ? object.payPerConversionEligibilityFailureReasons.map((e: any) =>
            customerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReasonFromJSON(
              e,
            )
          )
          : [],
      optimizationScore: isSet(object.optimizationScore) ? globalThis.Number(object.optimizationScore) : undefined,
      optimizationScoreWeight: isSet(object.optimizationScoreWeight)
        ? globalThis.Number(object.optimizationScoreWeight)
        : 0,
      status: isSet(object.status) ? customerStatusEnum_CustomerStatusFromJSON(object.status) : 0,
      locationAssetAutoMigrationDone: isSet(object.locationAssetAutoMigrationDone)
        ? globalThis.Boolean(object.locationAssetAutoMigrationDone)
        : undefined,
      imageAssetAutoMigrationDone: isSet(object.imageAssetAutoMigrationDone)
        ? globalThis.Boolean(object.imageAssetAutoMigrationDone)
        : undefined,
      locationAssetAutoMigrationDoneDateTime: isSet(object.locationAssetAutoMigrationDoneDateTime)
        ? globalThis.String(object.locationAssetAutoMigrationDoneDateTime)
        : undefined,
      imageAssetAutoMigrationDoneDateTime: isSet(object.imageAssetAutoMigrationDoneDateTime)
        ? globalThis.String(object.imageAssetAutoMigrationDoneDateTime)
        : undefined,
      customerAgreementSetting: isSet(object.customerAgreementSetting)
        ? CustomerAgreementSetting.fromJSON(object.customerAgreementSetting)
        : undefined,
      localServicesSettings: isSet(object.localServicesSettings)
        ? LocalServicesSettings.fromJSON(object.localServicesSettings)
        : undefined,
      videoBrandSafetySuitability: isSet(object.videoBrandSafetySuitability)
        ? brandSafetySuitabilityEnum_BrandSafetySuitabilityFromJSON(object.videoBrandSafetySuitability)
        : 0,
    };
  },

  toJSON(message: Customer): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.descriptiveName !== undefined) {
      obj.descriptiveName = message.descriptiveName;
    }
    if (message.currencyCode !== undefined) {
      obj.currencyCode = message.currencyCode;
    }
    if (message.timeZone !== undefined) {
      obj.timeZone = message.timeZone;
    }
    if (message.trackingUrlTemplate !== undefined) {
      obj.trackingUrlTemplate = message.trackingUrlTemplate;
    }
    if (message.finalUrlSuffix !== undefined) {
      obj.finalUrlSuffix = message.finalUrlSuffix;
    }
    if (message.autoTaggingEnabled !== undefined) {
      obj.autoTaggingEnabled = message.autoTaggingEnabled;
    }
    if (message.hasPartnersBadge !== undefined) {
      obj.hasPartnersBadge = message.hasPartnersBadge;
    }
    if (message.manager !== undefined) {
      obj.manager = message.manager;
    }
    if (message.testAccount !== undefined) {
      obj.testAccount = message.testAccount;
    }
    if (message.callReportingSetting !== undefined) {
      obj.callReportingSetting = CallReportingSetting.toJSON(message.callReportingSetting);
    }
    if (message.conversionTrackingSetting !== undefined) {
      obj.conversionTrackingSetting = ConversionTrackingSetting.toJSON(message.conversionTrackingSetting);
    }
    if (message.remarketingSetting !== undefined) {
      obj.remarketingSetting = RemarketingSetting.toJSON(message.remarketingSetting);
    }
    if (message.payPerConversionEligibilityFailureReasons?.length) {
      obj.payPerConversionEligibilityFailureReasons = message.payPerConversionEligibilityFailureReasons.map((e) =>
        customerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReasonToJSON(e)
      );
    }
    if (message.optimizationScore !== undefined) {
      obj.optimizationScore = message.optimizationScore;
    }
    if (message.optimizationScoreWeight !== 0) {
      obj.optimizationScoreWeight = message.optimizationScoreWeight;
    }
    if (message.status !== 0) {
      obj.status = customerStatusEnum_CustomerStatusToJSON(message.status);
    }
    if (message.locationAssetAutoMigrationDone !== undefined) {
      obj.locationAssetAutoMigrationDone = message.locationAssetAutoMigrationDone;
    }
    if (message.imageAssetAutoMigrationDone !== undefined) {
      obj.imageAssetAutoMigrationDone = message.imageAssetAutoMigrationDone;
    }
    if (message.locationAssetAutoMigrationDoneDateTime !== undefined) {
      obj.locationAssetAutoMigrationDoneDateTime = message.locationAssetAutoMigrationDoneDateTime;
    }
    if (message.imageAssetAutoMigrationDoneDateTime !== undefined) {
      obj.imageAssetAutoMigrationDoneDateTime = message.imageAssetAutoMigrationDoneDateTime;
    }
    if (message.customerAgreementSetting !== undefined) {
      obj.customerAgreementSetting = CustomerAgreementSetting.toJSON(message.customerAgreementSetting);
    }
    if (message.localServicesSettings !== undefined) {
      obj.localServicesSettings = LocalServicesSettings.toJSON(message.localServicesSettings);
    }
    if (message.videoBrandSafetySuitability !== 0) {
      obj.videoBrandSafetySuitability = brandSafetySuitabilityEnum_BrandSafetySuitabilityToJSON(
        message.videoBrandSafetySuitability,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<Customer>): Customer {
    return Customer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Customer>): Customer {
    const message = createBaseCustomer();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.descriptiveName = object.descriptiveName ?? undefined;
    message.currencyCode = object.currencyCode ?? undefined;
    message.timeZone = object.timeZone ?? undefined;
    message.trackingUrlTemplate = object.trackingUrlTemplate ?? undefined;
    message.finalUrlSuffix = object.finalUrlSuffix ?? undefined;
    message.autoTaggingEnabled = object.autoTaggingEnabled ?? undefined;
    message.hasPartnersBadge = object.hasPartnersBadge ?? undefined;
    message.manager = object.manager ?? undefined;
    message.testAccount = object.testAccount ?? undefined;
    message.callReportingSetting = (object.callReportingSetting !== undefined && object.callReportingSetting !== null)
      ? CallReportingSetting.fromPartial(object.callReportingSetting)
      : undefined;
    message.conversionTrackingSetting =
      (object.conversionTrackingSetting !== undefined && object.conversionTrackingSetting !== null)
        ? ConversionTrackingSetting.fromPartial(object.conversionTrackingSetting)
        : undefined;
    message.remarketingSetting = (object.remarketingSetting !== undefined && object.remarketingSetting !== null)
      ? RemarketingSetting.fromPartial(object.remarketingSetting)
      : undefined;
    message.payPerConversionEligibilityFailureReasons =
      object.payPerConversionEligibilityFailureReasons?.map((e) => e) || [];
    message.optimizationScore = object.optimizationScore ?? undefined;
    message.optimizationScoreWeight = object.optimizationScoreWeight ?? 0;
    message.status = object.status ?? 0;
    message.locationAssetAutoMigrationDone = object.locationAssetAutoMigrationDone ?? undefined;
    message.imageAssetAutoMigrationDone = object.imageAssetAutoMigrationDone ?? undefined;
    message.locationAssetAutoMigrationDoneDateTime = object.locationAssetAutoMigrationDoneDateTime ?? undefined;
    message.imageAssetAutoMigrationDoneDateTime = object.imageAssetAutoMigrationDoneDateTime ?? undefined;
    message.customerAgreementSetting =
      (object.customerAgreementSetting !== undefined && object.customerAgreementSetting !== null)
        ? CustomerAgreementSetting.fromPartial(object.customerAgreementSetting)
        : undefined;
    message.localServicesSettings =
      (object.localServicesSettings !== undefined && object.localServicesSettings !== null)
        ? LocalServicesSettings.fromPartial(object.localServicesSettings)
        : undefined;
    message.videoBrandSafetySuitability = object.videoBrandSafetySuitability ?? 0;
    return message;
  },
};

function createBaseCallReportingSetting(): CallReportingSetting {
  return {
    callReportingEnabled: undefined,
    callConversionReportingEnabled: undefined,
    callConversionAction: undefined,
  };
}

export const CallReportingSetting: MessageFns<CallReportingSetting> = {
  encode(message: CallReportingSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.callReportingEnabled !== undefined) {
      writer.uint32(80).bool(message.callReportingEnabled);
    }
    if (message.callConversionReportingEnabled !== undefined) {
      writer.uint32(88).bool(message.callConversionReportingEnabled);
    }
    if (message.callConversionAction !== undefined) {
      writer.uint32(98).string(message.callConversionAction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CallReportingSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallReportingSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 10:
          if (tag !== 80) {
            break;
          }

          message.callReportingEnabled = reader.bool();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.callConversionReportingEnabled = reader.bool();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.callConversionAction = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallReportingSetting {
    return {
      callReportingEnabled: isSet(object.callReportingEnabled)
        ? globalThis.Boolean(object.callReportingEnabled)
        : undefined,
      callConversionReportingEnabled: isSet(object.callConversionReportingEnabled)
        ? globalThis.Boolean(object.callConversionReportingEnabled)
        : undefined,
      callConversionAction: isSet(object.callConversionAction)
        ? globalThis.String(object.callConversionAction)
        : undefined,
    };
  },

  toJSON(message: CallReportingSetting): unknown {
    const obj: any = {};
    if (message.callReportingEnabled !== undefined) {
      obj.callReportingEnabled = message.callReportingEnabled;
    }
    if (message.callConversionReportingEnabled !== undefined) {
      obj.callConversionReportingEnabled = message.callConversionReportingEnabled;
    }
    if (message.callConversionAction !== undefined) {
      obj.callConversionAction = message.callConversionAction;
    }
    return obj;
  },

  create(base?: DeepPartial<CallReportingSetting>): CallReportingSetting {
    return CallReportingSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CallReportingSetting>): CallReportingSetting {
    const message = createBaseCallReportingSetting();
    message.callReportingEnabled = object.callReportingEnabled ?? undefined;
    message.callConversionReportingEnabled = object.callConversionReportingEnabled ?? undefined;
    message.callConversionAction = object.callConversionAction ?? undefined;
    return message;
  },
};

function createBaseConversionTrackingSetting(): ConversionTrackingSetting {
  return {
    conversionTrackingId: undefined,
    crossAccountConversionTrackingId: undefined,
    acceptedCustomerDataTerms: false,
    conversionTrackingStatus: 0,
    enhancedConversionsForLeadsEnabled: false,
    googleAdsConversionCustomer: "",
  };
}

export const ConversionTrackingSetting: MessageFns<ConversionTrackingSetting> = {
  encode(message: ConversionTrackingSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversionTrackingId !== undefined) {
      writer.uint32(24).int64(message.conversionTrackingId.toString());
    }
    if (message.crossAccountConversionTrackingId !== undefined) {
      writer.uint32(32).int64(message.crossAccountConversionTrackingId.toString());
    }
    if (message.acceptedCustomerDataTerms !== false) {
      writer.uint32(40).bool(message.acceptedCustomerDataTerms);
    }
    if (message.conversionTrackingStatus !== 0) {
      writer.uint32(48).int32(message.conversionTrackingStatus);
    }
    if (message.enhancedConversionsForLeadsEnabled !== false) {
      writer.uint32(56).bool(message.enhancedConversionsForLeadsEnabled);
    }
    if (message.googleAdsConversionCustomer !== "") {
      writer.uint32(66).string(message.googleAdsConversionCustomer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConversionTrackingSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversionTrackingSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }

          message.conversionTrackingId = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.crossAccountConversionTrackingId = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.acceptedCustomerDataTerms = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.conversionTrackingStatus = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.enhancedConversionsForLeadsEnabled = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.googleAdsConversionCustomer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConversionTrackingSetting {
    return {
      conversionTrackingId: isSet(object.conversionTrackingId)
        ? Long.fromValue(object.conversionTrackingId)
        : undefined,
      crossAccountConversionTrackingId: isSet(object.crossAccountConversionTrackingId)
        ? Long.fromValue(object.crossAccountConversionTrackingId)
        : undefined,
      acceptedCustomerDataTerms: isSet(object.acceptedCustomerDataTerms)
        ? globalThis.Boolean(object.acceptedCustomerDataTerms)
        : false,
      conversionTrackingStatus: isSet(object.conversionTrackingStatus)
        ? conversionTrackingStatusEnum_ConversionTrackingStatusFromJSON(object.conversionTrackingStatus)
        : 0,
      enhancedConversionsForLeadsEnabled: isSet(object.enhancedConversionsForLeadsEnabled)
        ? globalThis.Boolean(object.enhancedConversionsForLeadsEnabled)
        : false,
      googleAdsConversionCustomer: isSet(object.googleAdsConversionCustomer)
        ? globalThis.String(object.googleAdsConversionCustomer)
        : "",
    };
  },

  toJSON(message: ConversionTrackingSetting): unknown {
    const obj: any = {};
    if (message.conversionTrackingId !== undefined) {
      obj.conversionTrackingId = (message.conversionTrackingId || Long.ZERO).toString();
    }
    if (message.crossAccountConversionTrackingId !== undefined) {
      obj.crossAccountConversionTrackingId = (message.crossAccountConversionTrackingId || Long.ZERO).toString();
    }
    if (message.acceptedCustomerDataTerms !== false) {
      obj.acceptedCustomerDataTerms = message.acceptedCustomerDataTerms;
    }
    if (message.conversionTrackingStatus !== 0) {
      obj.conversionTrackingStatus = conversionTrackingStatusEnum_ConversionTrackingStatusToJSON(
        message.conversionTrackingStatus,
      );
    }
    if (message.enhancedConversionsForLeadsEnabled !== false) {
      obj.enhancedConversionsForLeadsEnabled = message.enhancedConversionsForLeadsEnabled;
    }
    if (message.googleAdsConversionCustomer !== "") {
      obj.googleAdsConversionCustomer = message.googleAdsConversionCustomer;
    }
    return obj;
  },

  create(base?: DeepPartial<ConversionTrackingSetting>): ConversionTrackingSetting {
    return ConversionTrackingSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConversionTrackingSetting>): ConversionTrackingSetting {
    const message = createBaseConversionTrackingSetting();
    message.conversionTrackingId = (object.conversionTrackingId !== undefined && object.conversionTrackingId !== null)
      ? Long.fromValue(object.conversionTrackingId)
      : undefined;
    message.crossAccountConversionTrackingId =
      (object.crossAccountConversionTrackingId !== undefined && object.crossAccountConversionTrackingId !== null)
        ? Long.fromValue(object.crossAccountConversionTrackingId)
        : undefined;
    message.acceptedCustomerDataTerms = object.acceptedCustomerDataTerms ?? false;
    message.conversionTrackingStatus = object.conversionTrackingStatus ?? 0;
    message.enhancedConversionsForLeadsEnabled = object.enhancedConversionsForLeadsEnabled ?? false;
    message.googleAdsConversionCustomer = object.googleAdsConversionCustomer ?? "";
    return message;
  },
};

function createBaseRemarketingSetting(): RemarketingSetting {
  return { googleGlobalSiteTag: undefined };
}

export const RemarketingSetting: MessageFns<RemarketingSetting> = {
  encode(message: RemarketingSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.googleGlobalSiteTag !== undefined) {
      writer.uint32(18).string(message.googleGlobalSiteTag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemarketingSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemarketingSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.googleGlobalSiteTag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemarketingSetting {
    return {
      googleGlobalSiteTag: isSet(object.googleGlobalSiteTag)
        ? globalThis.String(object.googleGlobalSiteTag)
        : undefined,
    };
  },

  toJSON(message: RemarketingSetting): unknown {
    const obj: any = {};
    if (message.googleGlobalSiteTag !== undefined) {
      obj.googleGlobalSiteTag = message.googleGlobalSiteTag;
    }
    return obj;
  },

  create(base?: DeepPartial<RemarketingSetting>): RemarketingSetting {
    return RemarketingSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemarketingSetting>): RemarketingSetting {
    const message = createBaseRemarketingSetting();
    message.googleGlobalSiteTag = object.googleGlobalSiteTag ?? undefined;
    return message;
  },
};

function createBaseCustomerAgreementSetting(): CustomerAgreementSetting {
  return { acceptedLeadFormTerms: false };
}

export const CustomerAgreementSetting: MessageFns<CustomerAgreementSetting> = {
  encode(message: CustomerAgreementSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.acceptedLeadFormTerms !== false) {
      writer.uint32(8).bool(message.acceptedLeadFormTerms);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerAgreementSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerAgreementSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.acceptedLeadFormTerms = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerAgreementSetting {
    return {
      acceptedLeadFormTerms: isSet(object.acceptedLeadFormTerms)
        ? globalThis.Boolean(object.acceptedLeadFormTerms)
        : false,
    };
  },

  toJSON(message: CustomerAgreementSetting): unknown {
    const obj: any = {};
    if (message.acceptedLeadFormTerms !== false) {
      obj.acceptedLeadFormTerms = message.acceptedLeadFormTerms;
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerAgreementSetting>): CustomerAgreementSetting {
    return CustomerAgreementSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerAgreementSetting>): CustomerAgreementSetting {
    const message = createBaseCustomerAgreementSetting();
    message.acceptedLeadFormTerms = object.acceptedLeadFormTerms ?? false;
    return message;
  },
};

function createBaseLocalServicesSettings(): LocalServicesSettings {
  return { granularLicenseStatuses: [], granularInsuranceStatuses: [] };
}

export const LocalServicesSettings: MessageFns<LocalServicesSettings> = {
  encode(message: LocalServicesSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.granularLicenseStatuses) {
      GranularLicenseStatus.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.granularInsuranceStatuses) {
      GranularInsuranceStatus.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalServicesSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalServicesSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.granularLicenseStatuses.push(GranularLicenseStatus.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.granularInsuranceStatuses.push(GranularInsuranceStatus.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalServicesSettings {
    return {
      granularLicenseStatuses: globalThis.Array.isArray(object?.granularLicenseStatuses)
        ? object.granularLicenseStatuses.map((e: any) => GranularLicenseStatus.fromJSON(e))
        : [],
      granularInsuranceStatuses: globalThis.Array.isArray(object?.granularInsuranceStatuses)
        ? object.granularInsuranceStatuses.map((e: any) => GranularInsuranceStatus.fromJSON(e))
        : [],
    };
  },

  toJSON(message: LocalServicesSettings): unknown {
    const obj: any = {};
    if (message.granularLicenseStatuses?.length) {
      obj.granularLicenseStatuses = message.granularLicenseStatuses.map((e) => GranularLicenseStatus.toJSON(e));
    }
    if (message.granularInsuranceStatuses?.length) {
      obj.granularInsuranceStatuses = message.granularInsuranceStatuses.map((e) => GranularInsuranceStatus.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<LocalServicesSettings>): LocalServicesSettings {
    return LocalServicesSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocalServicesSettings>): LocalServicesSettings {
    const message = createBaseLocalServicesSettings();
    message.granularLicenseStatuses =
      object.granularLicenseStatuses?.map((e) => GranularLicenseStatus.fromPartial(e)) || [];
    message.granularInsuranceStatuses =
      object.granularInsuranceStatuses?.map((e) => GranularInsuranceStatus.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGranularLicenseStatus(): GranularLicenseStatus {
  return { geoCriterionId: undefined, categoryId: undefined, verificationStatus: undefined };
}

export const GranularLicenseStatus: MessageFns<GranularLicenseStatus> = {
  encode(message: GranularLicenseStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.geoCriterionId !== undefined) {
      writer.uint32(8).int64(message.geoCriterionId.toString());
    }
    if (message.categoryId !== undefined) {
      writer.uint32(18).string(message.categoryId);
    }
    if (message.verificationStatus !== undefined) {
      writer.uint32(24).int32(message.verificationStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GranularLicenseStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGranularLicenseStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.geoCriterionId = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.verificationStatus = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GranularLicenseStatus {
    return {
      geoCriterionId: isSet(object.geoCriterionId) ? Long.fromValue(object.geoCriterionId) : undefined,
      categoryId: isSet(object.categoryId) ? globalThis.String(object.categoryId) : undefined,
      verificationStatus: isSet(object.verificationStatus)
        ? localServicesVerificationStatusEnum_LocalServicesVerificationStatusFromJSON(object.verificationStatus)
        : undefined,
    };
  },

  toJSON(message: GranularLicenseStatus): unknown {
    const obj: any = {};
    if (message.geoCriterionId !== undefined) {
      obj.geoCriterionId = (message.geoCriterionId || Long.ZERO).toString();
    }
    if (message.categoryId !== undefined) {
      obj.categoryId = message.categoryId;
    }
    if (message.verificationStatus !== undefined) {
      obj.verificationStatus = localServicesVerificationStatusEnum_LocalServicesVerificationStatusToJSON(
        message.verificationStatus,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<GranularLicenseStatus>): GranularLicenseStatus {
    return GranularLicenseStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GranularLicenseStatus>): GranularLicenseStatus {
    const message = createBaseGranularLicenseStatus();
    message.geoCriterionId = (object.geoCriterionId !== undefined && object.geoCriterionId !== null)
      ? Long.fromValue(object.geoCriterionId)
      : undefined;
    message.categoryId = object.categoryId ?? undefined;
    message.verificationStatus = object.verificationStatus ?? undefined;
    return message;
  },
};

function createBaseGranularInsuranceStatus(): GranularInsuranceStatus {
  return { geoCriterionId: undefined, categoryId: undefined, verificationStatus: undefined };
}

export const GranularInsuranceStatus: MessageFns<GranularInsuranceStatus> = {
  encode(message: GranularInsuranceStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.geoCriterionId !== undefined) {
      writer.uint32(8).int64(message.geoCriterionId.toString());
    }
    if (message.categoryId !== undefined) {
      writer.uint32(18).string(message.categoryId);
    }
    if (message.verificationStatus !== undefined) {
      writer.uint32(24).int32(message.verificationStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GranularInsuranceStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGranularInsuranceStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.geoCriterionId = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.verificationStatus = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GranularInsuranceStatus {
    return {
      geoCriterionId: isSet(object.geoCriterionId) ? Long.fromValue(object.geoCriterionId) : undefined,
      categoryId: isSet(object.categoryId) ? globalThis.String(object.categoryId) : undefined,
      verificationStatus: isSet(object.verificationStatus)
        ? localServicesVerificationStatusEnum_LocalServicesVerificationStatusFromJSON(object.verificationStatus)
        : undefined,
    };
  },

  toJSON(message: GranularInsuranceStatus): unknown {
    const obj: any = {};
    if (message.geoCriterionId !== undefined) {
      obj.geoCriterionId = (message.geoCriterionId || Long.ZERO).toString();
    }
    if (message.categoryId !== undefined) {
      obj.categoryId = message.categoryId;
    }
    if (message.verificationStatus !== undefined) {
      obj.verificationStatus = localServicesVerificationStatusEnum_LocalServicesVerificationStatusToJSON(
        message.verificationStatus,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<GranularInsuranceStatus>): GranularInsuranceStatus {
    return GranularInsuranceStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GranularInsuranceStatus>): GranularInsuranceStatus {
    const message = createBaseGranularInsuranceStatus();
    message.geoCriterionId = (object.geoCriterionId !== undefined && object.geoCriterionId !== null)
      ? Long.fromValue(object.geoCriterionId)
      : undefined;
    message.categoryId = object.categoryId ?? undefined;
    message.verificationStatus = object.verificationStatus ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
