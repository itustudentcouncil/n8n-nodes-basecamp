// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/conversion_value_rule_set.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  ConversionActionCategoryEnum_ConversionActionCategory,
  conversionActionCategoryEnum_ConversionActionCategoryFromJSON,
  conversionActionCategoryEnum_ConversionActionCategoryToJSON,
} from "../enums/conversion_action_category.js";
import {
  ConversionValueRuleSetStatusEnum_ConversionValueRuleSetStatus,
  conversionValueRuleSetStatusEnum_ConversionValueRuleSetStatusFromJSON,
  conversionValueRuleSetStatusEnum_ConversionValueRuleSetStatusToJSON,
} from "../enums/conversion_value_rule_set_status.js";
import {
  ValueRuleSetAttachmentTypeEnum_ValueRuleSetAttachmentType,
  valueRuleSetAttachmentTypeEnum_ValueRuleSetAttachmentTypeFromJSON,
  valueRuleSetAttachmentTypeEnum_ValueRuleSetAttachmentTypeToJSON,
} from "../enums/value_rule_set_attachment_type.js";
import {
  ValueRuleSetDimensionEnum_ValueRuleSetDimension,
  valueRuleSetDimensionEnum_ValueRuleSetDimensionFromJSON,
  valueRuleSetDimensionEnum_ValueRuleSetDimensionToJSON,
} from "../enums/value_rule_set_dimension.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/** A conversion value rule set */
export interface ConversionValueRuleSet {
  /**
   * Immutable. The resource name of the conversion value rule set.
   * Conversion value rule set resource names have the form:
   *
   * `customers/{customer_id}/conversionValueRuleSets/{conversion_value_rule_set_id}`
   */
  resourceName: string;
  /** Output only. The ID of the conversion value rule set. */
  id: Long;
  /** Resource names of rules within the rule set. */
  conversionValueRules: string[];
  /**
   * Defines dimensions for Value Rule conditions. The condition types of value
   * rules within this value rule set must be of these dimensions. The first
   * entry in this list is the primary dimension of the included value rules.
   * When using value rule primary dimension segmentation, conversion values
   * will be segmented into the values adjusted by value rules and the original
   * values, if some value rules apply.
   */
  dimensions: ValueRuleSetDimensionEnum_ValueRuleSetDimension[];
  /**
   * Output only. The resource name of the conversion value rule set's owner
   * customer. When the value rule set is inherited from a manager customer,
   * owner_customer will be the resource name of the manager whereas the
   * customer in the resource_name will be of the requesting serving customer.
   * ** Read-only **
   */
  ownerCustomer: string;
  /**
   * Immutable. Defines the scope where the conversion value rule set is
   * attached.
   */
  attachmentType: ValueRuleSetAttachmentTypeEnum_ValueRuleSetAttachmentType;
  /**
   * The resource name of the campaign when the conversion value rule
   * set is attached to a campaign.
   */
  campaign: string;
  /**
   * Output only. The status of the conversion value rule set.
   * ** Read-only **
   */
  status: ConversionValueRuleSetStatusEnum_ConversionValueRuleSetStatus;
  /**
   * Immutable. The conversion action categories of the conversion value rule
   * set.
   */
  conversionActionCategories: ConversionActionCategoryEnum_ConversionActionCategory[];
}

function createBaseConversionValueRuleSet(): ConversionValueRuleSet {
  return {
    resourceName: "",
    id: Long.ZERO,
    conversionValueRules: [],
    dimensions: [],
    ownerCustomer: "",
    attachmentType: 0,
    campaign: "",
    status: 0,
    conversionActionCategories: [],
  };
}

export const ConversionValueRuleSet: MessageFns<ConversionValueRuleSet> = {
  encode(message: ConversionValueRuleSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (!message.id.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.id.toString());
    }
    for (const v of message.conversionValueRules) {
      writer.uint32(26).string(v!);
    }
    writer.uint32(34).fork();
    for (const v of message.dimensions) {
      writer.int32(v);
    }
    writer.join();
    if (message.ownerCustomer !== "") {
      writer.uint32(42).string(message.ownerCustomer);
    }
    if (message.attachmentType !== 0) {
      writer.uint32(48).int32(message.attachmentType);
    }
    if (message.campaign !== "") {
      writer.uint32(58).string(message.campaign);
    }
    if (message.status !== 0) {
      writer.uint32(64).int32(message.status);
    }
    writer.uint32(74).fork();
    for (const v of message.conversionActionCategories) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConversionValueRuleSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversionValueRuleSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.conversionValueRules.push(reader.string());
          continue;
        case 4:
          if (tag === 32) {
            message.dimensions.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.dimensions.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.ownerCustomer = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.attachmentType = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.campaign = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 9:
          if (tag === 72) {
            message.conversionActionCategories.push(reader.int32() as any);

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.conversionActionCategories.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConversionValueRuleSet {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.ZERO,
      conversionValueRules: globalThis.Array.isArray(object?.conversionValueRules)
        ? object.conversionValueRules.map((e: any) => globalThis.String(e))
        : [],
      dimensions: globalThis.Array.isArray(object?.dimensions)
        ? object.dimensions.map((e: any) => valueRuleSetDimensionEnum_ValueRuleSetDimensionFromJSON(e))
        : [],
      ownerCustomer: isSet(object.ownerCustomer) ? globalThis.String(object.ownerCustomer) : "",
      attachmentType: isSet(object.attachmentType)
        ? valueRuleSetAttachmentTypeEnum_ValueRuleSetAttachmentTypeFromJSON(object.attachmentType)
        : 0,
      campaign: isSet(object.campaign) ? globalThis.String(object.campaign) : "",
      status: isSet(object.status)
        ? conversionValueRuleSetStatusEnum_ConversionValueRuleSetStatusFromJSON(object.status)
        : 0,
      conversionActionCategories: globalThis.Array.isArray(object?.conversionActionCategories)
        ? object.conversionActionCategories.map((e: any) =>
          conversionActionCategoryEnum_ConversionActionCategoryFromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: ConversionValueRuleSet): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (!message.id.equals(Long.ZERO)) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.conversionValueRules?.length) {
      obj.conversionValueRules = message.conversionValueRules;
    }
    if (message.dimensions?.length) {
      obj.dimensions = message.dimensions.map((e) => valueRuleSetDimensionEnum_ValueRuleSetDimensionToJSON(e));
    }
    if (message.ownerCustomer !== "") {
      obj.ownerCustomer = message.ownerCustomer;
    }
    if (message.attachmentType !== 0) {
      obj.attachmentType = valueRuleSetAttachmentTypeEnum_ValueRuleSetAttachmentTypeToJSON(message.attachmentType);
    }
    if (message.campaign !== "") {
      obj.campaign = message.campaign;
    }
    if (message.status !== 0) {
      obj.status = conversionValueRuleSetStatusEnum_ConversionValueRuleSetStatusToJSON(message.status);
    }
    if (message.conversionActionCategories?.length) {
      obj.conversionActionCategories = message.conversionActionCategories.map((e) =>
        conversionActionCategoryEnum_ConversionActionCategoryToJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<ConversionValueRuleSet>): ConversionValueRuleSet {
    return ConversionValueRuleSet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConversionValueRuleSet>): ConversionValueRuleSet {
    const message = createBaseConversionValueRuleSet();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.ZERO;
    message.conversionValueRules = object.conversionValueRules?.map((e) => e) || [];
    message.dimensions = object.dimensions?.map((e) => e) || [];
    message.ownerCustomer = object.ownerCustomer ?? "";
    message.attachmentType = object.attachmentType ?? 0;
    message.campaign = object.campaign ?? "";
    message.status = object.status ?? 0;
    message.conversionActionCategories = object.conversionActionCategories?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
