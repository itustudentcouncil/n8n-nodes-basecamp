// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/function_parsing_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible function parsing errors. */
export interface FunctionParsingErrorEnum {
}

/** Enum describing possible function parsing errors. */
export enum FunctionParsingErrorEnum_FunctionParsingError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** NO_MORE_INPUT - Unexpected end of function string. */
  NO_MORE_INPUT = 2,
  /** EXPECTED_CHARACTER - Could not find an expected character. */
  EXPECTED_CHARACTER = 3,
  /** UNEXPECTED_SEPARATOR - Unexpected separator character. */
  UNEXPECTED_SEPARATOR = 4,
  /** UNMATCHED_LEFT_BRACKET - Unmatched left bracket or parenthesis. */
  UNMATCHED_LEFT_BRACKET = 5,
  /** UNMATCHED_RIGHT_BRACKET - Unmatched right bracket or parenthesis. */
  UNMATCHED_RIGHT_BRACKET = 6,
  /** TOO_MANY_NESTED_FUNCTIONS - Functions are nested too deeply. */
  TOO_MANY_NESTED_FUNCTIONS = 7,
  /** MISSING_RIGHT_HAND_OPERAND - Missing right-hand-side operand. */
  MISSING_RIGHT_HAND_OPERAND = 8,
  /** INVALID_OPERATOR_NAME - Invalid operator/function name. */
  INVALID_OPERATOR_NAME = 9,
  /** FEED_ATTRIBUTE_OPERAND_ARGUMENT_NOT_INTEGER - Feed attribute operand's argument is not an integer. */
  FEED_ATTRIBUTE_OPERAND_ARGUMENT_NOT_INTEGER = 10,
  /** NO_OPERANDS - Missing function operands. */
  NO_OPERANDS = 11,
  /** TOO_MANY_OPERANDS - Function had too many operands. */
  TOO_MANY_OPERANDS = 12,
  UNRECOGNIZED = -1,
}

export function functionParsingErrorEnum_FunctionParsingErrorFromJSON(
  object: any,
): FunctionParsingErrorEnum_FunctionParsingError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return FunctionParsingErrorEnum_FunctionParsingError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return FunctionParsingErrorEnum_FunctionParsingError.UNKNOWN;
    case 2:
    case "NO_MORE_INPUT":
      return FunctionParsingErrorEnum_FunctionParsingError.NO_MORE_INPUT;
    case 3:
    case "EXPECTED_CHARACTER":
      return FunctionParsingErrorEnum_FunctionParsingError.EXPECTED_CHARACTER;
    case 4:
    case "UNEXPECTED_SEPARATOR":
      return FunctionParsingErrorEnum_FunctionParsingError.UNEXPECTED_SEPARATOR;
    case 5:
    case "UNMATCHED_LEFT_BRACKET":
      return FunctionParsingErrorEnum_FunctionParsingError.UNMATCHED_LEFT_BRACKET;
    case 6:
    case "UNMATCHED_RIGHT_BRACKET":
      return FunctionParsingErrorEnum_FunctionParsingError.UNMATCHED_RIGHT_BRACKET;
    case 7:
    case "TOO_MANY_NESTED_FUNCTIONS":
      return FunctionParsingErrorEnum_FunctionParsingError.TOO_MANY_NESTED_FUNCTIONS;
    case 8:
    case "MISSING_RIGHT_HAND_OPERAND":
      return FunctionParsingErrorEnum_FunctionParsingError.MISSING_RIGHT_HAND_OPERAND;
    case 9:
    case "INVALID_OPERATOR_NAME":
      return FunctionParsingErrorEnum_FunctionParsingError.INVALID_OPERATOR_NAME;
    case 10:
    case "FEED_ATTRIBUTE_OPERAND_ARGUMENT_NOT_INTEGER":
      return FunctionParsingErrorEnum_FunctionParsingError.FEED_ATTRIBUTE_OPERAND_ARGUMENT_NOT_INTEGER;
    case 11:
    case "NO_OPERANDS":
      return FunctionParsingErrorEnum_FunctionParsingError.NO_OPERANDS;
    case 12:
    case "TOO_MANY_OPERANDS":
      return FunctionParsingErrorEnum_FunctionParsingError.TOO_MANY_OPERANDS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FunctionParsingErrorEnum_FunctionParsingError.UNRECOGNIZED;
  }
}

export function functionParsingErrorEnum_FunctionParsingErrorToJSON(
  object: FunctionParsingErrorEnum_FunctionParsingError,
): string {
  switch (object) {
    case FunctionParsingErrorEnum_FunctionParsingError.UNSPECIFIED:
      return "UNSPECIFIED";
    case FunctionParsingErrorEnum_FunctionParsingError.UNKNOWN:
      return "UNKNOWN";
    case FunctionParsingErrorEnum_FunctionParsingError.NO_MORE_INPUT:
      return "NO_MORE_INPUT";
    case FunctionParsingErrorEnum_FunctionParsingError.EXPECTED_CHARACTER:
      return "EXPECTED_CHARACTER";
    case FunctionParsingErrorEnum_FunctionParsingError.UNEXPECTED_SEPARATOR:
      return "UNEXPECTED_SEPARATOR";
    case FunctionParsingErrorEnum_FunctionParsingError.UNMATCHED_LEFT_BRACKET:
      return "UNMATCHED_LEFT_BRACKET";
    case FunctionParsingErrorEnum_FunctionParsingError.UNMATCHED_RIGHT_BRACKET:
      return "UNMATCHED_RIGHT_BRACKET";
    case FunctionParsingErrorEnum_FunctionParsingError.TOO_MANY_NESTED_FUNCTIONS:
      return "TOO_MANY_NESTED_FUNCTIONS";
    case FunctionParsingErrorEnum_FunctionParsingError.MISSING_RIGHT_HAND_OPERAND:
      return "MISSING_RIGHT_HAND_OPERAND";
    case FunctionParsingErrorEnum_FunctionParsingError.INVALID_OPERATOR_NAME:
      return "INVALID_OPERATOR_NAME";
    case FunctionParsingErrorEnum_FunctionParsingError.FEED_ATTRIBUTE_OPERAND_ARGUMENT_NOT_INTEGER:
      return "FEED_ATTRIBUTE_OPERAND_ARGUMENT_NOT_INTEGER";
    case FunctionParsingErrorEnum_FunctionParsingError.NO_OPERANDS:
      return "NO_OPERANDS";
    case FunctionParsingErrorEnum_FunctionParsingError.TOO_MANY_OPERANDS:
      return "TOO_MANY_OPERANDS";
    case FunctionParsingErrorEnum_FunctionParsingError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseFunctionParsingErrorEnum(): FunctionParsingErrorEnum {
  return {};
}

export const FunctionParsingErrorEnum: MessageFns<FunctionParsingErrorEnum> = {
  encode(_: FunctionParsingErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FunctionParsingErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFunctionParsingErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FunctionParsingErrorEnum {
    return {};
  },

  toJSON(_: FunctionParsingErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<FunctionParsingErrorEnum>): FunctionParsingErrorEnum {
    return FunctionParsingErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<FunctionParsingErrorEnum>): FunctionParsingErrorEnum {
    const message = createBaseFunctionParsingErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
