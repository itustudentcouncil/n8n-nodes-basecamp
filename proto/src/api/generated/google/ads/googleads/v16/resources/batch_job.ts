// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/batch_job.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  BatchJobStatusEnum_BatchJobStatus,
  batchJobStatusEnum_BatchJobStatusFromJSON,
  batchJobStatusEnum_BatchJobStatusToJSON,
} from "../enums/batch_job_status.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * A list of mutates being processed asynchronously. The mutates are uploaded
 * by the user. The mutates themselves aren't readable and the results of the
 * job can only be read using BatchJobService.ListBatchJobResults.
 */
export interface BatchJob {
  /**
   * Immutable. The resource name of the batch job.
   * Batch job resource names have the form:
   *
   * `customers/{customer_id}/batchJobs/{batch_job_id}`
   */
  resourceName: string;
  /** Output only. ID of this batch job. */
  id?:
    | Long
    | undefined;
  /**
   * Output only. The next sequence token to use when adding operations. Only
   * set when the batch job status is PENDING.
   */
  nextAddSequenceToken?:
    | string
    | undefined;
  /** Output only. Contains additional information about this batch job. */
  metadata:
    | BatchJob_BatchJobMetadata
    | undefined;
  /** Output only. Status of this batch job. */
  status: BatchJobStatusEnum_BatchJobStatus;
  /**
   * Output only. The resource name of the long-running operation that can be
   * used to poll for completion. Only set when the batch job status is RUNNING
   * or DONE.
   */
  longRunningOperation?: string | undefined;
}

/**
 * Additional information about the batch job. This message is also used as
 * metadata returned in batch job Long Running Operations.
 */
export interface BatchJob_BatchJobMetadata {
  /**
   * Output only. The time when this batch job was created.
   * Formatted as yyyy-mm-dd hh:mm:ss. Example: "2018-03-05 09:15:00"
   */
  creationDateTime?:
    | string
    | undefined;
  /**
   * Output only. The time when this batch job started running.
   * Formatted as yyyy-mm-dd hh:mm:ss. Example: "2018-03-05 09:15:30"
   */
  startDateTime?:
    | string
    | undefined;
  /**
   * Output only. The time when this batch job was completed.
   * Formatted as yyyy-MM-dd HH:mm:ss. Example: "2018-03-05 09:16:00"
   */
  completionDateTime?:
    | string
    | undefined;
  /**
   * Output only. The fraction (between 0.0 and 1.0) of mutates that have been
   * processed. This is empty if the job hasn't started running yet.
   */
  estimatedCompletionRatio?:
    | number
    | undefined;
  /** Output only. The number of mutate operations in the batch job. */
  operationCount?:
    | Long
    | undefined;
  /**
   * Output only. The number of mutate operations executed by the batch job.
   * Present only if the job has started running.
   */
  executedOperationCount?:
    | Long
    | undefined;
  /**
   * Immutable. The approximate upper bound for how long a batch job can be
   * executed, in seconds. If the job runs more than the given upper bound,
   * the job will be canceled.
   */
  executionLimitSeconds?: number | undefined;
}

function createBaseBatchJob(): BatchJob {
  return {
    resourceName: "",
    id: undefined,
    nextAddSequenceToken: undefined,
    metadata: undefined,
    status: 0,
    longRunningOperation: undefined,
  };
}

export const BatchJob: MessageFns<BatchJob> = {
  encode(message: BatchJob, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(56).int64(message.id.toString());
    }
    if (message.nextAddSequenceToken !== undefined) {
      writer.uint32(66).string(message.nextAddSequenceToken);
    }
    if (message.metadata !== undefined) {
      BatchJob_BatchJobMetadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.longRunningOperation !== undefined) {
      writer.uint32(74).string(message.longRunningOperation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchJob {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchJob();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.nextAddSequenceToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.metadata = BatchJob_BatchJobMetadata.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.longRunningOperation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchJob {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      nextAddSequenceToken: isSet(object.nextAddSequenceToken)
        ? globalThis.String(object.nextAddSequenceToken)
        : undefined,
      metadata: isSet(object.metadata) ? BatchJob_BatchJobMetadata.fromJSON(object.metadata) : undefined,
      status: isSet(object.status) ? batchJobStatusEnum_BatchJobStatusFromJSON(object.status) : 0,
      longRunningOperation: isSet(object.longRunningOperation)
        ? globalThis.String(object.longRunningOperation)
        : undefined,
    };
  },

  toJSON(message: BatchJob): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.nextAddSequenceToken !== undefined) {
      obj.nextAddSequenceToken = message.nextAddSequenceToken;
    }
    if (message.metadata !== undefined) {
      obj.metadata = BatchJob_BatchJobMetadata.toJSON(message.metadata);
    }
    if (message.status !== 0) {
      obj.status = batchJobStatusEnum_BatchJobStatusToJSON(message.status);
    }
    if (message.longRunningOperation !== undefined) {
      obj.longRunningOperation = message.longRunningOperation;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchJob>): BatchJob {
    return BatchJob.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchJob>): BatchJob {
    const message = createBaseBatchJob();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.nextAddSequenceToken = object.nextAddSequenceToken ?? undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? BatchJob_BatchJobMetadata.fromPartial(object.metadata)
      : undefined;
    message.status = object.status ?? 0;
    message.longRunningOperation = object.longRunningOperation ?? undefined;
    return message;
  },
};

function createBaseBatchJob_BatchJobMetadata(): BatchJob_BatchJobMetadata {
  return {
    creationDateTime: undefined,
    startDateTime: undefined,
    completionDateTime: undefined,
    estimatedCompletionRatio: undefined,
    operationCount: undefined,
    executedOperationCount: undefined,
    executionLimitSeconds: undefined,
  };
}

export const BatchJob_BatchJobMetadata: MessageFns<BatchJob_BatchJobMetadata> = {
  encode(message: BatchJob_BatchJobMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creationDateTime !== undefined) {
      writer.uint32(66).string(message.creationDateTime);
    }
    if (message.startDateTime !== undefined) {
      writer.uint32(58).string(message.startDateTime);
    }
    if (message.completionDateTime !== undefined) {
      writer.uint32(74).string(message.completionDateTime);
    }
    if (message.estimatedCompletionRatio !== undefined) {
      writer.uint32(81).double(message.estimatedCompletionRatio);
    }
    if (message.operationCount !== undefined) {
      writer.uint32(88).int64(message.operationCount.toString());
    }
    if (message.executedOperationCount !== undefined) {
      writer.uint32(96).int64(message.executedOperationCount.toString());
    }
    if (message.executionLimitSeconds !== undefined) {
      writer.uint32(104).int32(message.executionLimitSeconds);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchJob_BatchJobMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchJob_BatchJobMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 8:
          if (tag !== 66) {
            break;
          }

          message.creationDateTime = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.startDateTime = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.completionDateTime = reader.string();
          continue;
        case 10:
          if (tag !== 81) {
            break;
          }

          message.estimatedCompletionRatio = reader.double();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.operationCount = Long.fromString(reader.int64().toString());
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.executedOperationCount = Long.fromString(reader.int64().toString());
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.executionLimitSeconds = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchJob_BatchJobMetadata {
    return {
      creationDateTime: isSet(object.creationDateTime) ? globalThis.String(object.creationDateTime) : undefined,
      startDateTime: isSet(object.startDateTime) ? globalThis.String(object.startDateTime) : undefined,
      completionDateTime: isSet(object.completionDateTime) ? globalThis.String(object.completionDateTime) : undefined,
      estimatedCompletionRatio: isSet(object.estimatedCompletionRatio)
        ? globalThis.Number(object.estimatedCompletionRatio)
        : undefined,
      operationCount: isSet(object.operationCount) ? Long.fromValue(object.operationCount) : undefined,
      executedOperationCount: isSet(object.executedOperationCount)
        ? Long.fromValue(object.executedOperationCount)
        : undefined,
      executionLimitSeconds: isSet(object.executionLimitSeconds)
        ? globalThis.Number(object.executionLimitSeconds)
        : undefined,
    };
  },

  toJSON(message: BatchJob_BatchJobMetadata): unknown {
    const obj: any = {};
    if (message.creationDateTime !== undefined) {
      obj.creationDateTime = message.creationDateTime;
    }
    if (message.startDateTime !== undefined) {
      obj.startDateTime = message.startDateTime;
    }
    if (message.completionDateTime !== undefined) {
      obj.completionDateTime = message.completionDateTime;
    }
    if (message.estimatedCompletionRatio !== undefined) {
      obj.estimatedCompletionRatio = message.estimatedCompletionRatio;
    }
    if (message.operationCount !== undefined) {
      obj.operationCount = (message.operationCount || Long.ZERO).toString();
    }
    if (message.executedOperationCount !== undefined) {
      obj.executedOperationCount = (message.executedOperationCount || Long.ZERO).toString();
    }
    if (message.executionLimitSeconds !== undefined) {
      obj.executionLimitSeconds = Math.round(message.executionLimitSeconds);
    }
    return obj;
  },

  create(base?: DeepPartial<BatchJob_BatchJobMetadata>): BatchJob_BatchJobMetadata {
    return BatchJob_BatchJobMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchJob_BatchJobMetadata>): BatchJob_BatchJobMetadata {
    const message = createBaseBatchJob_BatchJobMetadata();
    message.creationDateTime = object.creationDateTime ?? undefined;
    message.startDateTime = object.startDateTime ?? undefined;
    message.completionDateTime = object.completionDateTime ?? undefined;
    message.estimatedCompletionRatio = object.estimatedCompletionRatio ?? undefined;
    message.operationCount = (object.operationCount !== undefined && object.operationCount !== null)
      ? Long.fromValue(object.operationCount)
      : undefined;
    message.executedOperationCount =
      (object.executedOperationCount !== undefined && object.executedOperationCount !== null)
        ? Long.fromValue(object.executedOperationCount)
        : undefined;
    message.executionLimitSeconds = object.executionLimitSeconds ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
