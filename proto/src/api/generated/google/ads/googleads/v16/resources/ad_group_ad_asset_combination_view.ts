// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/ad_group_ad_asset_combination_view.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { AssetUsage } from "../common/asset_usage.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * A view on the usage of ad group ad asset combination.
 * Now we only support AdGroupAdAssetCombinationView for Responsive Search Ads,
 * with more ad types planned for the future.
 */
export interface AdGroupAdAssetCombinationView {
  /**
   * Output only. The resource name of the ad group ad asset combination view.
   * The combination ID is 128 bits long, where the upper 64 bits are stored in
   * asset_combination_id_high, and the lower 64 bits are stored in
   * asset_combination_id_low.
   * AdGroupAd Asset Combination view resource names have the form:
   * `customers/{customer_id}/adGroupAdAssetCombinationViews/{AdGroupAd.ad_group_id}~{AdGroupAd.ad.ad_id}~{AssetCombination.asset_combination_id_low}~{AssetCombination.asset_combination_id_high}`
   */
  resourceName: string;
  /** Output only. Served assets. */
  servedAssets: AssetUsage[];
  /**
   * Output only. The status between the asset combination and the latest
   * version of the ad. If true, the asset combination is linked to the latest
   * version of the ad. If false, it means the link once existed but has been
   * removed and is no longer present in the latest version of the ad.
   */
  enabled?: boolean | undefined;
}

function createBaseAdGroupAdAssetCombinationView(): AdGroupAdAssetCombinationView {
  return { resourceName: "", servedAssets: [], enabled: undefined };
}

export const AdGroupAdAssetCombinationView: MessageFns<AdGroupAdAssetCombinationView> = {
  encode(message: AdGroupAdAssetCombinationView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    for (const v of message.servedAssets) {
      AssetUsage.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.enabled !== undefined) {
      writer.uint32(24).bool(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdGroupAdAssetCombinationView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdGroupAdAssetCombinationView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.servedAssets.push(AssetUsage.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.enabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdGroupAdAssetCombinationView {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      servedAssets: globalThis.Array.isArray(object?.servedAssets)
        ? object.servedAssets.map((e: any) => AssetUsage.fromJSON(e))
        : [],
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : undefined,
    };
  },

  toJSON(message: AdGroupAdAssetCombinationView): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.servedAssets?.length) {
      obj.servedAssets = message.servedAssets.map((e) => AssetUsage.toJSON(e));
    }
    if (message.enabled !== undefined) {
      obj.enabled = message.enabled;
    }
    return obj;
  },

  create(base?: DeepPartial<AdGroupAdAssetCombinationView>): AdGroupAdAssetCombinationView {
    return AdGroupAdAssetCombinationView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdGroupAdAssetCombinationView>): AdGroupAdAssetCombinationView {
    const message = createBaseAdGroupAdAssetCombinationView();
    message.resourceName = object.resourceName ?? "";
    message.servedAssets = object.servedAssets?.map((e) => AssetUsage.fromPartial(e)) || [];
    message.enabled = object.enabled ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
