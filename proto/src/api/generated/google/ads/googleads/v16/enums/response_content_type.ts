// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/enums/response_content_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.enums";

/** Container for possible response content types. */
export interface ResponseContentTypeEnum {
}

/** Possible response content types. */
export enum ResponseContentTypeEnum_ResponseContentType {
  /** UNSPECIFIED - Not specified. Will return the resource name only in the response. */
  UNSPECIFIED = 0,
  /** RESOURCE_NAME_ONLY - The mutate response will be the resource name. */
  RESOURCE_NAME_ONLY = 1,
  /**
   * MUTABLE_RESOURCE - The mutate response will contain the resource name and the resource with
   * mutable fields if possible. Otherwise, only the resource name will be
   * returned.
   */
  MUTABLE_RESOURCE = 2,
  UNRECOGNIZED = -1,
}

export function responseContentTypeEnum_ResponseContentTypeFromJSON(
  object: any,
): ResponseContentTypeEnum_ResponseContentType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return ResponseContentTypeEnum_ResponseContentType.UNSPECIFIED;
    case 1:
    case "RESOURCE_NAME_ONLY":
      return ResponseContentTypeEnum_ResponseContentType.RESOURCE_NAME_ONLY;
    case 2:
    case "MUTABLE_RESOURCE":
      return ResponseContentTypeEnum_ResponseContentType.MUTABLE_RESOURCE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResponseContentTypeEnum_ResponseContentType.UNRECOGNIZED;
  }
}

export function responseContentTypeEnum_ResponseContentTypeToJSON(
  object: ResponseContentTypeEnum_ResponseContentType,
): string {
  switch (object) {
    case ResponseContentTypeEnum_ResponseContentType.UNSPECIFIED:
      return "UNSPECIFIED";
    case ResponseContentTypeEnum_ResponseContentType.RESOURCE_NAME_ONLY:
      return "RESOURCE_NAME_ONLY";
    case ResponseContentTypeEnum_ResponseContentType.MUTABLE_RESOURCE:
      return "MUTABLE_RESOURCE";
    case ResponseContentTypeEnum_ResponseContentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseResponseContentTypeEnum(): ResponseContentTypeEnum {
  return {};
}

export const ResponseContentTypeEnum: MessageFns<ResponseContentTypeEnum> = {
  encode(_: ResponseContentTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseContentTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseContentTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ResponseContentTypeEnum {
    return {};
  },

  toJSON(_: ResponseContentTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ResponseContentTypeEnum>): ResponseContentTypeEnum {
    return ResponseContentTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ResponseContentTypeEnum>): ResponseContentTypeEnum {
    const message = createBaseResponseContentTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
