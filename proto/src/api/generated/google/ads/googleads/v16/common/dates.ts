// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/common/dates.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  MonthOfYearEnum_MonthOfYear,
  monthOfYearEnum_MonthOfYearFromJSON,
  monthOfYearEnum_MonthOfYearToJSON,
} from "../enums/month_of_year.js";

export const protobufPackage = "google.ads.googleads.v16.common";

/** A date range. */
export interface DateRange {
  /** The start date, in yyyy-mm-dd format. This date is inclusive. */
  startDate?:
    | string
    | undefined;
  /** The end date, in yyyy-mm-dd format. This date is inclusive. */
  endDate?: string | undefined;
}

/**
 * The year month range inclusive of the start and end months.
 * Eg: A year month range to represent Jan 2020 would be: (Jan 2020, Jan 2020).
 */
export interface YearMonthRange {
  /** The inclusive start year month. */
  start:
    | YearMonth
    | undefined;
  /** The inclusive end year month. */
  end: YearMonth | undefined;
}

/** Year month. */
export interface YearMonth {
  /** The year (for example, 2020). */
  year: Long;
  /** The month of the year. (for example, FEBRUARY). */
  month: MonthOfYearEnum_MonthOfYear;
}

function createBaseDateRange(): DateRange {
  return { startDate: undefined, endDate: undefined };
}

export const DateRange: MessageFns<DateRange> = {
  encode(message: DateRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startDate !== undefined) {
      writer.uint32(26).string(message.startDate);
    }
    if (message.endDate !== undefined) {
      writer.uint32(34).string(message.endDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DateRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDateRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.startDate = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.endDate = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DateRange {
    return {
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : undefined,
    };
  },

  toJSON(message: DateRange): unknown {
    const obj: any = {};
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate;
    }
    return obj;
  },

  create(base?: DeepPartial<DateRange>): DateRange {
    return DateRange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DateRange>): DateRange {
    const message = createBaseDateRange();
    message.startDate = object.startDate ?? undefined;
    message.endDate = object.endDate ?? undefined;
    return message;
  },
};

function createBaseYearMonthRange(): YearMonthRange {
  return { start: undefined, end: undefined };
}

export const YearMonthRange: MessageFns<YearMonthRange> = {
  encode(message: YearMonthRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.start !== undefined) {
      YearMonth.encode(message.start, writer.uint32(10).fork()).join();
    }
    if (message.end !== undefined) {
      YearMonth.encode(message.end, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): YearMonthRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseYearMonthRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.start = YearMonth.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.end = YearMonth.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): YearMonthRange {
    return {
      start: isSet(object.start) ? YearMonth.fromJSON(object.start) : undefined,
      end: isSet(object.end) ? YearMonth.fromJSON(object.end) : undefined,
    };
  },

  toJSON(message: YearMonthRange): unknown {
    const obj: any = {};
    if (message.start !== undefined) {
      obj.start = YearMonth.toJSON(message.start);
    }
    if (message.end !== undefined) {
      obj.end = YearMonth.toJSON(message.end);
    }
    return obj;
  },

  create(base?: DeepPartial<YearMonthRange>): YearMonthRange {
    return YearMonthRange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<YearMonthRange>): YearMonthRange {
    const message = createBaseYearMonthRange();
    message.start = (object.start !== undefined && object.start !== null)
      ? YearMonth.fromPartial(object.start)
      : undefined;
    message.end = (object.end !== undefined && object.end !== null) ? YearMonth.fromPartial(object.end) : undefined;
    return message;
  },
};

function createBaseYearMonth(): YearMonth {
  return { year: Long.ZERO, month: 0 };
}

export const YearMonth: MessageFns<YearMonth> = {
  encode(message: YearMonth, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.year.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.year.toString());
    }
    if (message.month !== 0) {
      writer.uint32(16).int32(message.month);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): YearMonth {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseYearMonth();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.year = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.month = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): YearMonth {
    return {
      year: isSet(object.year) ? Long.fromValue(object.year) : Long.ZERO,
      month: isSet(object.month) ? monthOfYearEnum_MonthOfYearFromJSON(object.month) : 0,
    };
  },

  toJSON(message: YearMonth): unknown {
    const obj: any = {};
    if (!message.year.equals(Long.ZERO)) {
      obj.year = (message.year || Long.ZERO).toString();
    }
    if (message.month !== 0) {
      obj.month = monthOfYearEnum_MonthOfYearToJSON(message.month);
    }
    return obj;
  },

  create(base?: DeepPartial<YearMonth>): YearMonth {
    return YearMonth.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<YearMonth>): YearMonth {
    const message = createBaseYearMonth();
    message.year = (object.year !== undefined && object.year !== null) ? Long.fromValue(object.year) : Long.ZERO;
    message.month = object.month ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
