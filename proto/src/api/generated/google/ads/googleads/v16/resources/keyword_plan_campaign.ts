// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/keyword_plan_campaign.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  KeywordPlanNetworkEnum_KeywordPlanNetwork,
  keywordPlanNetworkEnum_KeywordPlanNetworkFromJSON,
  keywordPlanNetworkEnum_KeywordPlanNetworkToJSON,
} from "../enums/keyword_plan_network.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * A Keyword Plan campaign.
 * Max number of keyword plan campaigns per plan allowed: 1.
 */
export interface KeywordPlanCampaign {
  /**
   * Immutable. The resource name of the Keyword Plan campaign.
   * KeywordPlanCampaign resource names have the form:
   *
   * `customers/{customer_id}/keywordPlanCampaigns/{kp_campaign_id}`
   */
  resourceName: string;
  /** The keyword plan this campaign belongs to. */
  keywordPlan?:
    | string
    | undefined;
  /** Output only. The ID of the Keyword Plan campaign. */
  id?:
    | Long
    | undefined;
  /**
   * The name of the Keyword Plan campaign.
   *
   * This field is required and should not be empty when creating Keyword Plan
   * campaigns.
   */
  name?:
    | string
    | undefined;
  /**
   * The languages targeted for the Keyword Plan campaign.
   * Max allowed: 1.
   */
  languageConstants: string[];
  /**
   * Targeting network.
   *
   * This field is required and should not be empty when creating Keyword Plan
   * campaigns.
   */
  keywordPlanNetwork: KeywordPlanNetworkEnum_KeywordPlanNetwork;
  /**
   * A default max cpc bid in micros, and in the account currency, for all ad
   * groups under the campaign.
   *
   * This field is required and should not be empty when creating Keyword Plan
   * campaigns.
   */
  cpcBidMicros?:
    | Long
    | undefined;
  /**
   * The geo targets.
   * Max number allowed: 20.
   */
  geoTargets: KeywordPlanGeoTarget[];
}

/** A geo target. */
export interface KeywordPlanGeoTarget {
  /** Required. The resource name of the geo target. */
  geoTargetConstant?: string | undefined;
}

function createBaseKeywordPlanCampaign(): KeywordPlanCampaign {
  return {
    resourceName: "",
    keywordPlan: undefined,
    id: undefined,
    name: undefined,
    languageConstants: [],
    keywordPlanNetwork: 0,
    cpcBidMicros: undefined,
    geoTargets: [],
  };
}

export const KeywordPlanCampaign: MessageFns<KeywordPlanCampaign> = {
  encode(message: KeywordPlanCampaign, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.keywordPlan !== undefined) {
      writer.uint32(74).string(message.keywordPlan);
    }
    if (message.id !== undefined) {
      writer.uint32(80).int64(message.id.toString());
    }
    if (message.name !== undefined) {
      writer.uint32(90).string(message.name);
    }
    for (const v of message.languageConstants) {
      writer.uint32(98).string(v!);
    }
    if (message.keywordPlanNetwork !== 0) {
      writer.uint32(48).int32(message.keywordPlanNetwork);
    }
    if (message.cpcBidMicros !== undefined) {
      writer.uint32(104).int64(message.cpcBidMicros.toString());
    }
    for (const v of message.geoTargets) {
      KeywordPlanGeoTarget.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeywordPlanCampaign {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeywordPlanCampaign();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.keywordPlan = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.name = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.languageConstants.push(reader.string());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.keywordPlanNetwork = reader.int32() as any;
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.cpcBidMicros = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.geoTargets.push(KeywordPlanGeoTarget.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeywordPlanCampaign {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      keywordPlan: isSet(object.keywordPlan) ? globalThis.String(object.keywordPlan) : undefined,
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      languageConstants: globalThis.Array.isArray(object?.languageConstants)
        ? object.languageConstants.map((e: any) => globalThis.String(e))
        : [],
      keywordPlanNetwork: isSet(object.keywordPlanNetwork)
        ? keywordPlanNetworkEnum_KeywordPlanNetworkFromJSON(object.keywordPlanNetwork)
        : 0,
      cpcBidMicros: isSet(object.cpcBidMicros) ? Long.fromValue(object.cpcBidMicros) : undefined,
      geoTargets: globalThis.Array.isArray(object?.geoTargets)
        ? object.geoTargets.map((e: any) => KeywordPlanGeoTarget.fromJSON(e))
        : [],
    };
  },

  toJSON(message: KeywordPlanCampaign): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.keywordPlan !== undefined) {
      obj.keywordPlan = message.keywordPlan;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.languageConstants?.length) {
      obj.languageConstants = message.languageConstants;
    }
    if (message.keywordPlanNetwork !== 0) {
      obj.keywordPlanNetwork = keywordPlanNetworkEnum_KeywordPlanNetworkToJSON(message.keywordPlanNetwork);
    }
    if (message.cpcBidMicros !== undefined) {
      obj.cpcBidMicros = (message.cpcBidMicros || Long.ZERO).toString();
    }
    if (message.geoTargets?.length) {
      obj.geoTargets = message.geoTargets.map((e) => KeywordPlanGeoTarget.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<KeywordPlanCampaign>): KeywordPlanCampaign {
    return KeywordPlanCampaign.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KeywordPlanCampaign>): KeywordPlanCampaign {
    const message = createBaseKeywordPlanCampaign();
    message.resourceName = object.resourceName ?? "";
    message.keywordPlan = object.keywordPlan ?? undefined;
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.name = object.name ?? undefined;
    message.languageConstants = object.languageConstants?.map((e) => e) || [];
    message.keywordPlanNetwork = object.keywordPlanNetwork ?? 0;
    message.cpcBidMicros = (object.cpcBidMicros !== undefined && object.cpcBidMicros !== null)
      ? Long.fromValue(object.cpcBidMicros)
      : undefined;
    message.geoTargets = object.geoTargets?.map((e) => KeywordPlanGeoTarget.fromPartial(e)) || [];
    return message;
  },
};

function createBaseKeywordPlanGeoTarget(): KeywordPlanGeoTarget {
  return { geoTargetConstant: undefined };
}

export const KeywordPlanGeoTarget: MessageFns<KeywordPlanGeoTarget> = {
  encode(message: KeywordPlanGeoTarget, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.geoTargetConstant !== undefined) {
      writer.uint32(18).string(message.geoTargetConstant);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeywordPlanGeoTarget {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeywordPlanGeoTarget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.geoTargetConstant = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeywordPlanGeoTarget {
    return {
      geoTargetConstant: isSet(object.geoTargetConstant) ? globalThis.String(object.geoTargetConstant) : undefined,
    };
  },

  toJSON(message: KeywordPlanGeoTarget): unknown {
    const obj: any = {};
    if (message.geoTargetConstant !== undefined) {
      obj.geoTargetConstant = message.geoTargetConstant;
    }
    return obj;
  },

  create(base?: DeepPartial<KeywordPlanGeoTarget>): KeywordPlanGeoTarget {
    return KeywordPlanGeoTarget.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KeywordPlanGeoTarget>): KeywordPlanGeoTarget {
    const message = createBaseKeywordPlanGeoTarget();
    message.geoTargetConstant = object.geoTargetConstant ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
