// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/campaign_search_term_insight.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * A Campaign search term view.
 * Historical data is available starting March 2023.
 */
export interface CampaignSearchTermInsight {
  /**
   * Output only. The resource name of the campaign level search term insight.
   * Campaign level search term insight resource names have the form:
   *
   * `customers/{customer_id}/campaignSearchTermInsights/{campaign_id}~{category_id}`
   */
  resourceName: string;
  /**
   * Output only. The label for the search category. An empty string denotes the
   * catch-all category for search terms that didn't fit into another category.
   */
  categoryLabel?:
    | string
    | undefined;
  /** Output only. The ID of the insight. */
  id?:
    | Long
    | undefined;
  /** Output only. The ID of the campaign. */
  campaignId?: Long | undefined;
}

function createBaseCampaignSearchTermInsight(): CampaignSearchTermInsight {
  return { resourceName: "", categoryLabel: undefined, id: undefined, campaignId: undefined };
}

export const CampaignSearchTermInsight: MessageFns<CampaignSearchTermInsight> = {
  encode(message: CampaignSearchTermInsight, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.categoryLabel !== undefined) {
      writer.uint32(18).string(message.categoryLabel);
    }
    if (message.id !== undefined) {
      writer.uint32(24).int64(message.id.toString());
    }
    if (message.campaignId !== undefined) {
      writer.uint32(32).int64(message.campaignId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignSearchTermInsight {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignSearchTermInsight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.categoryLabel = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.campaignId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CampaignSearchTermInsight {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      categoryLabel: isSet(object.categoryLabel) ? globalThis.String(object.categoryLabel) : undefined,
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      campaignId: isSet(object.campaignId) ? Long.fromValue(object.campaignId) : undefined,
    };
  },

  toJSON(message: CampaignSearchTermInsight): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.categoryLabel !== undefined) {
      obj.categoryLabel = message.categoryLabel;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.campaignId !== undefined) {
      obj.campaignId = (message.campaignId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<CampaignSearchTermInsight>): CampaignSearchTermInsight {
    return CampaignSearchTermInsight.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CampaignSearchTermInsight>): CampaignSearchTermInsight {
    const message = createBaseCampaignSearchTermInsight();
    message.resourceName = object.resourceName ?? "";
    message.categoryLabel = object.categoryLabel ?? undefined;
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.campaignId = (object.campaignId !== undefined && object.campaignId !== null)
      ? Long.fromValue(object.campaignId)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
