// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/conversion_value_rule_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible conversion value rule errors. */
export interface ConversionValueRuleErrorEnum {
}

/** Enum describing possible conversion value rule errors. */
export enum ConversionValueRuleErrorEnum_ConversionValueRuleError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /**
   * INVALID_GEO_TARGET_CONSTANT - The value rule's geo location condition contains invalid geo target
   * constant(s), for example, there's no matching geo target.
   */
  INVALID_GEO_TARGET_CONSTANT = 2,
  /**
   * CONFLICTING_INCLUDED_AND_EXCLUDED_GEO_TARGET - The value rule's geo location condition contains conflicting included and
   * excluded geo targets. Specifically, some of the excluded geo target(s)
   * are the same as or contain some of the included geo target(s). For
   * example, the geo location condition includes California but excludes U.S.
   */
  CONFLICTING_INCLUDED_AND_EXCLUDED_GEO_TARGET = 3,
  /**
   * CONFLICTING_CONDITIONS - User specified conflicting conditions for two value rules in the same
   * value rule set.
   */
  CONFLICTING_CONDITIONS = 4,
  /**
   * CANNOT_REMOVE_IF_INCLUDED_IN_VALUE_RULE_SET - The value rule cannot be removed because it's still included in some
   * value rule set.
   */
  CANNOT_REMOVE_IF_INCLUDED_IN_VALUE_RULE_SET = 5,
  /**
   * CONDITION_NOT_ALLOWED - The value rule contains a condition that's not allowed by the value rule
   * set including this value rule.
   */
  CONDITION_NOT_ALLOWED = 6,
  /** FIELD_MUST_BE_UNSET - The value rule contains a field that should be unset. */
  FIELD_MUST_BE_UNSET = 7,
  /**
   * CANNOT_PAUSE_UNLESS_VALUE_RULE_SET_IS_PAUSED - Pausing the value rule requires pausing the value rule set because the
   * value rule is (one of) the last enabled in the value rule set.
   */
  CANNOT_PAUSE_UNLESS_VALUE_RULE_SET_IS_PAUSED = 8,
  /**
   * UNTARGETABLE_GEO_TARGET - The value rule's geo location condition contains untargetable geo target
   * constant(s).
   */
  UNTARGETABLE_GEO_TARGET = 9,
  /**
   * INVALID_AUDIENCE_USER_LIST - The value rule's audience condition contains invalid user list(s). In
   * another word, there's no matching user list.
   */
  INVALID_AUDIENCE_USER_LIST = 10,
  /** INACCESSIBLE_USER_LIST - The value rule's audience condition contains inaccessible user list(s). */
  INACCESSIBLE_USER_LIST = 11,
  /**
   * INVALID_AUDIENCE_USER_INTEREST - The value rule's audience condition contains invalid user_interest(s).
   * This might be because there is no matching user interest, or the user
   * interest is not visible.
   */
  INVALID_AUDIENCE_USER_INTEREST = 12,
  /** CANNOT_ADD_RULE_WITH_STATUS_REMOVED - When a value rule is created, it shouldn't have REMOVED status. */
  CANNOT_ADD_RULE_WITH_STATUS_REMOVED = 13,
  UNRECOGNIZED = -1,
}

export function conversionValueRuleErrorEnum_ConversionValueRuleErrorFromJSON(
  object: any,
): ConversionValueRuleErrorEnum_ConversionValueRuleError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return ConversionValueRuleErrorEnum_ConversionValueRuleError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return ConversionValueRuleErrorEnum_ConversionValueRuleError.UNKNOWN;
    case 2:
    case "INVALID_GEO_TARGET_CONSTANT":
      return ConversionValueRuleErrorEnum_ConversionValueRuleError.INVALID_GEO_TARGET_CONSTANT;
    case 3:
    case "CONFLICTING_INCLUDED_AND_EXCLUDED_GEO_TARGET":
      return ConversionValueRuleErrorEnum_ConversionValueRuleError.CONFLICTING_INCLUDED_AND_EXCLUDED_GEO_TARGET;
    case 4:
    case "CONFLICTING_CONDITIONS":
      return ConversionValueRuleErrorEnum_ConversionValueRuleError.CONFLICTING_CONDITIONS;
    case 5:
    case "CANNOT_REMOVE_IF_INCLUDED_IN_VALUE_RULE_SET":
      return ConversionValueRuleErrorEnum_ConversionValueRuleError.CANNOT_REMOVE_IF_INCLUDED_IN_VALUE_RULE_SET;
    case 6:
    case "CONDITION_NOT_ALLOWED":
      return ConversionValueRuleErrorEnum_ConversionValueRuleError.CONDITION_NOT_ALLOWED;
    case 7:
    case "FIELD_MUST_BE_UNSET":
      return ConversionValueRuleErrorEnum_ConversionValueRuleError.FIELD_MUST_BE_UNSET;
    case 8:
    case "CANNOT_PAUSE_UNLESS_VALUE_RULE_SET_IS_PAUSED":
      return ConversionValueRuleErrorEnum_ConversionValueRuleError.CANNOT_PAUSE_UNLESS_VALUE_RULE_SET_IS_PAUSED;
    case 9:
    case "UNTARGETABLE_GEO_TARGET":
      return ConversionValueRuleErrorEnum_ConversionValueRuleError.UNTARGETABLE_GEO_TARGET;
    case 10:
    case "INVALID_AUDIENCE_USER_LIST":
      return ConversionValueRuleErrorEnum_ConversionValueRuleError.INVALID_AUDIENCE_USER_LIST;
    case 11:
    case "INACCESSIBLE_USER_LIST":
      return ConversionValueRuleErrorEnum_ConversionValueRuleError.INACCESSIBLE_USER_LIST;
    case 12:
    case "INVALID_AUDIENCE_USER_INTEREST":
      return ConversionValueRuleErrorEnum_ConversionValueRuleError.INVALID_AUDIENCE_USER_INTEREST;
    case 13:
    case "CANNOT_ADD_RULE_WITH_STATUS_REMOVED":
      return ConversionValueRuleErrorEnum_ConversionValueRuleError.CANNOT_ADD_RULE_WITH_STATUS_REMOVED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConversionValueRuleErrorEnum_ConversionValueRuleError.UNRECOGNIZED;
  }
}

export function conversionValueRuleErrorEnum_ConversionValueRuleErrorToJSON(
  object: ConversionValueRuleErrorEnum_ConversionValueRuleError,
): string {
  switch (object) {
    case ConversionValueRuleErrorEnum_ConversionValueRuleError.UNSPECIFIED:
      return "UNSPECIFIED";
    case ConversionValueRuleErrorEnum_ConversionValueRuleError.UNKNOWN:
      return "UNKNOWN";
    case ConversionValueRuleErrorEnum_ConversionValueRuleError.INVALID_GEO_TARGET_CONSTANT:
      return "INVALID_GEO_TARGET_CONSTANT";
    case ConversionValueRuleErrorEnum_ConversionValueRuleError.CONFLICTING_INCLUDED_AND_EXCLUDED_GEO_TARGET:
      return "CONFLICTING_INCLUDED_AND_EXCLUDED_GEO_TARGET";
    case ConversionValueRuleErrorEnum_ConversionValueRuleError.CONFLICTING_CONDITIONS:
      return "CONFLICTING_CONDITIONS";
    case ConversionValueRuleErrorEnum_ConversionValueRuleError.CANNOT_REMOVE_IF_INCLUDED_IN_VALUE_RULE_SET:
      return "CANNOT_REMOVE_IF_INCLUDED_IN_VALUE_RULE_SET";
    case ConversionValueRuleErrorEnum_ConversionValueRuleError.CONDITION_NOT_ALLOWED:
      return "CONDITION_NOT_ALLOWED";
    case ConversionValueRuleErrorEnum_ConversionValueRuleError.FIELD_MUST_BE_UNSET:
      return "FIELD_MUST_BE_UNSET";
    case ConversionValueRuleErrorEnum_ConversionValueRuleError.CANNOT_PAUSE_UNLESS_VALUE_RULE_SET_IS_PAUSED:
      return "CANNOT_PAUSE_UNLESS_VALUE_RULE_SET_IS_PAUSED";
    case ConversionValueRuleErrorEnum_ConversionValueRuleError.UNTARGETABLE_GEO_TARGET:
      return "UNTARGETABLE_GEO_TARGET";
    case ConversionValueRuleErrorEnum_ConversionValueRuleError.INVALID_AUDIENCE_USER_LIST:
      return "INVALID_AUDIENCE_USER_LIST";
    case ConversionValueRuleErrorEnum_ConversionValueRuleError.INACCESSIBLE_USER_LIST:
      return "INACCESSIBLE_USER_LIST";
    case ConversionValueRuleErrorEnum_ConversionValueRuleError.INVALID_AUDIENCE_USER_INTEREST:
      return "INVALID_AUDIENCE_USER_INTEREST";
    case ConversionValueRuleErrorEnum_ConversionValueRuleError.CANNOT_ADD_RULE_WITH_STATUS_REMOVED:
      return "CANNOT_ADD_RULE_WITH_STATUS_REMOVED";
    case ConversionValueRuleErrorEnum_ConversionValueRuleError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseConversionValueRuleErrorEnum(): ConversionValueRuleErrorEnum {
  return {};
}

export const ConversionValueRuleErrorEnum: MessageFns<ConversionValueRuleErrorEnum> = {
  encode(_: ConversionValueRuleErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConversionValueRuleErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversionValueRuleErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ConversionValueRuleErrorEnum {
    return {};
  },

  toJSON(_: ConversionValueRuleErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ConversionValueRuleErrorEnum>): ConversionValueRuleErrorEnum {
    return ConversionValueRuleErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ConversionValueRuleErrorEnum>): ConversionValueRuleErrorEnum {
    const message = createBaseConversionValueRuleErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
