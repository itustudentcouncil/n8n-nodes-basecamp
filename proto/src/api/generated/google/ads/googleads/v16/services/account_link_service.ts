// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/services/account_link_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Status } from "../../../../rpc/status.js";
import { AccountLink } from "../resources/account_link.js";

export const protobufPackage = "google.ads.googleads.v16.services";

/**
 * Request message for
 * [AccountLinkService.CreateAccountLink][google.ads.googleads.v16.services.AccountLinkService.CreateAccountLink].
 */
export interface CreateAccountLinkRequest {
  /** Required. The ID of the customer for which the account link is created. */
  customerId: string;
  /** Required. The account link to be created. */
  accountLink: AccountLink | undefined;
}

/**
 * Response message for
 * [AccountLinkService.CreateAccountLink][google.ads.googleads.v16.services.AccountLinkService.CreateAccountLink].
 */
export interface CreateAccountLinkResponse {
  /** Returned for successful operations. Resource name of the account link. */
  resourceName: string;
}

/**
 * Request message for
 * [AccountLinkService.MutateAccountLink][google.ads.googleads.v16.services.AccountLinkService.MutateAccountLink].
 */
export interface MutateAccountLinkRequest {
  /** Required. The ID of the customer being modified. */
  customerId: string;
  /** Required. The operation to perform on the link. */
  operation:
    | AccountLinkOperation
    | undefined;
  /**
   * If true, successful operations will be carried out and invalid
   * operations will return errors. If false, all operations will be carried
   * out in one transaction if and only if they are all valid.
   * Default is false.
   */
  partialFailure: boolean;
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
}

/** A single update on an account link. */
export interface AccountLinkOperation {
  /** FieldMask that determines which resource fields are modified in an update. */
  updateMask:
    | string[]
    | undefined;
  /**
   * Update operation: The account link is expected to have
   * a valid resource name.
   */
  update?:
    | AccountLink
    | undefined;
  /**
   * Remove operation: A resource name for the account link to remove is
   * expected, in this format:
   *
   * `customers/{customer_id}/accountLinks/{account_link_id}`
   */
  remove?: string | undefined;
}

/** Response message for account link mutate. */
export interface MutateAccountLinkResponse {
  /** Result for the mutate. */
  result:
    | MutateAccountLinkResult
    | undefined;
  /**
   * Errors that pertain to operation failures in the partial failure mode.
   * Returned only when partial_failure = true and all errors occur inside the
   * operations. If any errors occur outside the operations (for example, auth
   * errors), we return an RPC level error.
   */
  partialFailureError: Status | undefined;
}

/** The result for the account link mutate. */
export interface MutateAccountLinkResult {
  /** Returned for successful operations. */
  resourceName: string;
}

function createBaseCreateAccountLinkRequest(): CreateAccountLinkRequest {
  return { customerId: "", accountLink: undefined };
}

export const CreateAccountLinkRequest: MessageFns<CreateAccountLinkRequest> = {
  encode(message: CreateAccountLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    if (message.accountLink !== undefined) {
      AccountLink.encode(message.accountLink, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAccountLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAccountLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accountLink = AccountLink.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAccountLinkRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      accountLink: isSet(object.accountLink) ? AccountLink.fromJSON(object.accountLink) : undefined,
    };
  },

  toJSON(message: CreateAccountLinkRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.accountLink !== undefined) {
      obj.accountLink = AccountLink.toJSON(message.accountLink);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAccountLinkRequest>): CreateAccountLinkRequest {
    return CreateAccountLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAccountLinkRequest>): CreateAccountLinkRequest {
    const message = createBaseCreateAccountLinkRequest();
    message.customerId = object.customerId ?? "";
    message.accountLink = (object.accountLink !== undefined && object.accountLink !== null)
      ? AccountLink.fromPartial(object.accountLink)
      : undefined;
    return message;
  },
};

function createBaseCreateAccountLinkResponse(): CreateAccountLinkResponse {
  return { resourceName: "" };
}

export const CreateAccountLinkResponse: MessageFns<CreateAccountLinkResponse> = {
  encode(message: CreateAccountLinkResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAccountLinkResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAccountLinkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAccountLinkResponse {
    return { resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "" };
  },

  toJSON(message: CreateAccountLinkResponse): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAccountLinkResponse>): CreateAccountLinkResponse {
    return CreateAccountLinkResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAccountLinkResponse>): CreateAccountLinkResponse {
    const message = createBaseCreateAccountLinkResponse();
    message.resourceName = object.resourceName ?? "";
    return message;
  },
};

function createBaseMutateAccountLinkRequest(): MutateAccountLinkRequest {
  return { customerId: "", operation: undefined, partialFailure: false, validateOnly: false };
}

export const MutateAccountLinkRequest: MessageFns<MutateAccountLinkRequest> = {
  encode(message: MutateAccountLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    if (message.operation !== undefined) {
      AccountLinkOperation.encode(message.operation, writer.uint32(18).fork()).join();
    }
    if (message.partialFailure !== false) {
      writer.uint32(24).bool(message.partialFailure);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateAccountLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateAccountLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operation = AccountLinkOperation.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.partialFailure = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateAccountLinkRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      operation: isSet(object.operation) ? AccountLinkOperation.fromJSON(object.operation) : undefined,
      partialFailure: isSet(object.partialFailure) ? globalThis.Boolean(object.partialFailure) : false,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: MutateAccountLinkRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.operation !== undefined) {
      obj.operation = AccountLinkOperation.toJSON(message.operation);
    }
    if (message.partialFailure !== false) {
      obj.partialFailure = message.partialFailure;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<MutateAccountLinkRequest>): MutateAccountLinkRequest {
    return MutateAccountLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateAccountLinkRequest>): MutateAccountLinkRequest {
    const message = createBaseMutateAccountLinkRequest();
    message.customerId = object.customerId ?? "";
    message.operation = (object.operation !== undefined && object.operation !== null)
      ? AccountLinkOperation.fromPartial(object.operation)
      : undefined;
    message.partialFailure = object.partialFailure ?? false;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseAccountLinkOperation(): AccountLinkOperation {
  return { updateMask: undefined, update: undefined, remove: undefined };
}

export const AccountLinkOperation: MessageFns<AccountLinkOperation> = {
  encode(message: AccountLinkOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    if (message.update !== undefined) {
      AccountLink.encode(message.update, writer.uint32(18).fork()).join();
    }
    if (message.remove !== undefined) {
      writer.uint32(26).string(message.remove);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountLinkOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountLinkOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.update = AccountLink.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.remove = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountLinkOperation {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      update: isSet(object.update) ? AccountLink.fromJSON(object.update) : undefined,
      remove: isSet(object.remove) ? globalThis.String(object.remove) : undefined,
    };
  },

  toJSON(message: AccountLinkOperation): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.update !== undefined) {
      obj.update = AccountLink.toJSON(message.update);
    }
    if (message.remove !== undefined) {
      obj.remove = message.remove;
    }
    return obj;
  },

  create(base?: DeepPartial<AccountLinkOperation>): AccountLinkOperation {
    return AccountLinkOperation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccountLinkOperation>): AccountLinkOperation {
    const message = createBaseAccountLinkOperation();
    message.updateMask = object.updateMask ?? undefined;
    message.update = (object.update !== undefined && object.update !== null)
      ? AccountLink.fromPartial(object.update)
      : undefined;
    message.remove = object.remove ?? undefined;
    return message;
  },
};

function createBaseMutateAccountLinkResponse(): MutateAccountLinkResponse {
  return { result: undefined, partialFailureError: undefined };
}

export const MutateAccountLinkResponse: MessageFns<MutateAccountLinkResponse> = {
  encode(message: MutateAccountLinkResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== undefined) {
      MutateAccountLinkResult.encode(message.result, writer.uint32(10).fork()).join();
    }
    if (message.partialFailureError !== undefined) {
      Status.encode(message.partialFailureError, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateAccountLinkResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateAccountLinkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result = MutateAccountLinkResult.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.partialFailureError = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateAccountLinkResponse {
    return {
      result: isSet(object.result) ? MutateAccountLinkResult.fromJSON(object.result) : undefined,
      partialFailureError: isSet(object.partialFailureError) ? Status.fromJSON(object.partialFailureError) : undefined,
    };
  },

  toJSON(message: MutateAccountLinkResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = MutateAccountLinkResult.toJSON(message.result);
    }
    if (message.partialFailureError !== undefined) {
      obj.partialFailureError = Status.toJSON(message.partialFailureError);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateAccountLinkResponse>): MutateAccountLinkResponse {
    return MutateAccountLinkResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateAccountLinkResponse>): MutateAccountLinkResponse {
    const message = createBaseMutateAccountLinkResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? MutateAccountLinkResult.fromPartial(object.result)
      : undefined;
    message.partialFailureError = (object.partialFailureError !== undefined && object.partialFailureError !== null)
      ? Status.fromPartial(object.partialFailureError)
      : undefined;
    return message;
  },
};

function createBaseMutateAccountLinkResult(): MutateAccountLinkResult {
  return { resourceName: "" };
}

export const MutateAccountLinkResult: MessageFns<MutateAccountLinkResult> = {
  encode(message: MutateAccountLinkResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateAccountLinkResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateAccountLinkResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateAccountLinkResult {
    return { resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "" };
  },

  toJSON(message: MutateAccountLinkResult): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    return obj;
  },

  create(base?: DeepPartial<MutateAccountLinkResult>): MutateAccountLinkResult {
    return MutateAccountLinkResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateAccountLinkResult>): MutateAccountLinkResult {
    const message = createBaseMutateAccountLinkResult();
    message.resourceName = object.resourceName ?? "";
    return message;
  },
};

/**
 * This service allows management of links between Google Ads accounts and other
 * accounts.
 */
export type AccountLinkServiceDefinition = typeof AccountLinkServiceDefinition;
export const AccountLinkServiceDefinition = {
  name: "AccountLinkService",
  fullName: "google.ads.googleads.v16.services.AccountLinkService",
  methods: {
    /**
     * Creates an account link.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     *   [ThirdPartyAppAnalyticsLinkError]()
     */
    createAccountLink: {
      name: "CreateAccountLink",
      requestType: CreateAccountLinkRequest,
      requestStream: false,
      responseType: CreateAccountLinkResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              95,
              108,
              105,
              110,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              118,
              49,
              54,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              76,
              105,
              110,
              107,
              115,
              58,
              99,
              114,
              101,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Creates or removes an account link.
     * From V5, create is not supported through
     * AccountLinkService.MutateAccountLink. Use
     * AccountLinkService.CreateAccountLink instead.
     *
     * List of thrown errors:
     *   [AccountLinkError]()
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [FieldMaskError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    mutateAccountLink: {
      name: "MutateAccountLink",
      requestType: MutateAccountLinkRequest,
      requestStream: false,
      responseType: MutateAccountLinkResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              118,
              49,
              54,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              76,
              105,
              110,
              107,
              115,
              58,
              109,
              117,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AccountLinkServiceImplementation<CallContextExt = {}> {
  /**
   * Creates an account link.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [DatabaseError]()
   *   [FieldError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [MutateError]()
   *   [QuotaError]()
   *   [RequestError]()
   *   [ThirdPartyAppAnalyticsLinkError]()
   */
  createAccountLink(
    request: CreateAccountLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateAccountLinkResponse>>;
  /**
   * Creates or removes an account link.
   * From V5, create is not supported through
   * AccountLinkService.MutateAccountLink. Use
   * AccountLinkService.CreateAccountLink instead.
   *
   * List of thrown errors:
   *   [AccountLinkError]()
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [FieldMaskError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [MutateError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  mutateAccountLink(
    request: MutateAccountLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MutateAccountLinkResponse>>;
}

export interface AccountLinkServiceClient<CallOptionsExt = {}> {
  /**
   * Creates an account link.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [DatabaseError]()
   *   [FieldError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [MutateError]()
   *   [QuotaError]()
   *   [RequestError]()
   *   [ThirdPartyAppAnalyticsLinkError]()
   */
  createAccountLink(
    request: DeepPartial<CreateAccountLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateAccountLinkResponse>;
  /**
   * Creates or removes an account link.
   * From V5, create is not supported through
   * AccountLinkService.MutateAccountLink. Use
   * AccountLinkService.CreateAccountLink instead.
   *
   * List of thrown errors:
   *   [AccountLinkError]()
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [FieldMaskError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [MutateError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  mutateAccountLink(
    request: DeepPartial<MutateAccountLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MutateAccountLinkResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
