// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/enums/sk_ad_network_coarse_conversion_value.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.enums";

/** Container for enumeration of SkAdNetwork coarse conversion values. */
export interface SkAdNetworkCoarseConversionValueEnum {
}

/** Enumerates SkAdNetwork coarse conversion values */
export enum SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The value is unknown in this version. */
  UNKNOWN = 1,
  /**
   * UNAVAILABLE - The value was not present in the postback or we do not have this data for
   * other reasons.
   */
  UNAVAILABLE = 2,
  /** LOW - A low coarse conversion value. */
  LOW = 3,
  /** MEDIUM - A medium coarse conversion value. */
  MEDIUM = 4,
  /** HIGH - A high coarse conversion value. */
  HIGH = 5,
  /** NONE - A coarse conversion value was not configured. */
  NONE = 6,
  UNRECOGNIZED = -1,
}

export function skAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValueFromJSON(
  object: any,
): SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue.UNKNOWN;
    case 2:
    case "UNAVAILABLE":
      return SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue.UNAVAILABLE;
    case 3:
    case "LOW":
      return SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue.LOW;
    case 4:
    case "MEDIUM":
      return SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue.MEDIUM;
    case 5:
    case "HIGH":
      return SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue.HIGH;
    case 6:
    case "NONE":
      return SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue.NONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue.UNRECOGNIZED;
  }
}

export function skAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValueToJSON(
  object: SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue,
): string {
  switch (object) {
    case SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue.UNSPECIFIED:
      return "UNSPECIFIED";
    case SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue.UNKNOWN:
      return "UNKNOWN";
    case SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue.UNAVAILABLE:
      return "UNAVAILABLE";
    case SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue.LOW:
      return "LOW";
    case SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue.MEDIUM:
      return "MEDIUM";
    case SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue.HIGH:
      return "HIGH";
    case SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue.NONE:
      return "NONE";
    case SkAdNetworkCoarseConversionValueEnum_SkAdNetworkCoarseConversionValue.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseSkAdNetworkCoarseConversionValueEnum(): SkAdNetworkCoarseConversionValueEnum {
  return {};
}

export const SkAdNetworkCoarseConversionValueEnum: MessageFns<SkAdNetworkCoarseConversionValueEnum> = {
  encode(_: SkAdNetworkCoarseConversionValueEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SkAdNetworkCoarseConversionValueEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSkAdNetworkCoarseConversionValueEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SkAdNetworkCoarseConversionValueEnum {
    return {};
  },

  toJSON(_: SkAdNetworkCoarseConversionValueEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SkAdNetworkCoarseConversionValueEnum>): SkAdNetworkCoarseConversionValueEnum {
    return SkAdNetworkCoarseConversionValueEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SkAdNetworkCoarseConversionValueEnum>): SkAdNetworkCoarseConversionValueEnum {
    const message = createBaseSkAdNetworkCoarseConversionValueEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
