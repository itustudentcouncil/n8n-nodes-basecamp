// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/enums/customer_pay_per_conversion_eligibility_failure_reason.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.enums";

/**
 * Container for enum describing reasons why a customer is not eligible to use
 * PaymentMode.CONVERSIONS.
 */
export interface CustomerPayPerConversionEligibilityFailureReasonEnum {
}

/**
 * Enum describing possible reasons a customer is not eligible to use
 * PaymentMode.CONVERSIONS.
 */
export enum CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /** NOT_ENOUGH_CONVERSIONS - Customer does not have enough conversions. */
  NOT_ENOUGH_CONVERSIONS = 2,
  /** CONVERSION_LAG_TOO_HIGH - Customer's conversion lag is too high. */
  CONVERSION_LAG_TOO_HIGH = 3,
  /** HAS_CAMPAIGN_WITH_SHARED_BUDGET - Customer uses shared budgets. */
  HAS_CAMPAIGN_WITH_SHARED_BUDGET = 4,
  /** HAS_UPLOAD_CLICKS_CONVERSION - Customer has conversions with ConversionActionType.UPLOAD_CLICKS. */
  HAS_UPLOAD_CLICKS_CONVERSION = 5,
  /** AVERAGE_DAILY_SPEND_TOO_HIGH - Customer's average daily spend is too high. */
  AVERAGE_DAILY_SPEND_TOO_HIGH = 6,
  /**
   * ANALYSIS_NOT_COMPLETE - Customer's eligibility has not yet been calculated by the Google Ads
   * backend. Check back soon.
   */
  ANALYSIS_NOT_COMPLETE = 7,
  /** OTHER - Customer is not eligible due to other reasons. */
  OTHER = 8,
  UNRECOGNIZED = -1,
}

export function customerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReasonFromJSON(
  object: any,
): CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
        .UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
        .UNKNOWN;
    case 2:
    case "NOT_ENOUGH_CONVERSIONS":
      return CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
        .NOT_ENOUGH_CONVERSIONS;
    case 3:
    case "CONVERSION_LAG_TOO_HIGH":
      return CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
        .CONVERSION_LAG_TOO_HIGH;
    case 4:
    case "HAS_CAMPAIGN_WITH_SHARED_BUDGET":
      return CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
        .HAS_CAMPAIGN_WITH_SHARED_BUDGET;
    case 5:
    case "HAS_UPLOAD_CLICKS_CONVERSION":
      return CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
        .HAS_UPLOAD_CLICKS_CONVERSION;
    case 6:
    case "AVERAGE_DAILY_SPEND_TOO_HIGH":
      return CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
        .AVERAGE_DAILY_SPEND_TOO_HIGH;
    case 7:
    case "ANALYSIS_NOT_COMPLETE":
      return CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
        .ANALYSIS_NOT_COMPLETE;
    case 8:
    case "OTHER":
      return CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
        .OTHER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
        .UNRECOGNIZED;
  }
}

export function customerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReasonToJSON(
  object: CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason,
): string {
  switch (object) {
    case CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
      .UNSPECIFIED:
      return "UNSPECIFIED";
    case CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason.UNKNOWN:
      return "UNKNOWN";
    case CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
      .NOT_ENOUGH_CONVERSIONS:
      return "NOT_ENOUGH_CONVERSIONS";
    case CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
      .CONVERSION_LAG_TOO_HIGH:
      return "CONVERSION_LAG_TOO_HIGH";
    case CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
      .HAS_CAMPAIGN_WITH_SHARED_BUDGET:
      return "HAS_CAMPAIGN_WITH_SHARED_BUDGET";
    case CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
      .HAS_UPLOAD_CLICKS_CONVERSION:
      return "HAS_UPLOAD_CLICKS_CONVERSION";
    case CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
      .AVERAGE_DAILY_SPEND_TOO_HIGH:
      return "AVERAGE_DAILY_SPEND_TOO_HIGH";
    case CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
      .ANALYSIS_NOT_COMPLETE:
      return "ANALYSIS_NOT_COMPLETE";
    case CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason.OTHER:
      return "OTHER";
    case CustomerPayPerConversionEligibilityFailureReasonEnum_CustomerPayPerConversionEligibilityFailureReason
      .UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCustomerPayPerConversionEligibilityFailureReasonEnum(): CustomerPayPerConversionEligibilityFailureReasonEnum {
  return {};
}

export const CustomerPayPerConversionEligibilityFailureReasonEnum: MessageFns<
  CustomerPayPerConversionEligibilityFailureReasonEnum
> = {
  encode(
    _: CustomerPayPerConversionEligibilityFailureReasonEnum,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerPayPerConversionEligibilityFailureReasonEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerPayPerConversionEligibilityFailureReasonEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CustomerPayPerConversionEligibilityFailureReasonEnum {
    return {};
  },

  toJSON(_: CustomerPayPerConversionEligibilityFailureReasonEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<CustomerPayPerConversionEligibilityFailureReasonEnum>,
  ): CustomerPayPerConversionEligibilityFailureReasonEnum {
    return CustomerPayPerConversionEligibilityFailureReasonEnum.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<CustomerPayPerConversionEligibilityFailureReasonEnum>,
  ): CustomerPayPerConversionEligibilityFailureReasonEnum {
    const message = createBaseCustomerPayPerConversionEligibilityFailureReasonEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
