// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/search_term_insight_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible search term insight errors. */
export interface SearchTermInsightErrorEnum {
}

/** Enum describing possible search term insight errors. */
export enum SearchTermInsightErrorEnum_SearchTermInsightError {
  /** UNSPECIFIED - Name unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** FILTERING_NOT_ALLOWED_WITH_SEGMENTS - Search term insights cannot be filtered by metrics when segmenting. */
  FILTERING_NOT_ALLOWED_WITH_SEGMENTS = 2,
  /** LIMIT_NOT_ALLOWED_WITH_SEGMENTS - Search term insights cannot have a LIMIT when segmenting. */
  LIMIT_NOT_ALLOWED_WITH_SEGMENTS = 3,
  /** MISSING_FIELD_IN_SELECT_CLAUSE - A selected field requires another field to be selected with it. */
  MISSING_FIELD_IN_SELECT_CLAUSE = 4,
  /** REQUIRES_FILTER_BY_SINGLE_RESOURCE - A selected field/resource requires filtering by a single resource. */
  REQUIRES_FILTER_BY_SINGLE_RESOURCE = 5,
  /** SORTING_NOT_ALLOWED_WITH_SEGMENTS - Search term insights cannot be sorted when segmenting. */
  SORTING_NOT_ALLOWED_WITH_SEGMENTS = 6,
  /** SUMMARY_ROW_NOT_ALLOWED_WITH_SEGMENTS - Search term insights cannot have a summary row when segmenting. */
  SUMMARY_ROW_NOT_ALLOWED_WITH_SEGMENTS = 7,
  UNRECOGNIZED = -1,
}

export function searchTermInsightErrorEnum_SearchTermInsightErrorFromJSON(
  object: any,
): SearchTermInsightErrorEnum_SearchTermInsightError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return SearchTermInsightErrorEnum_SearchTermInsightError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return SearchTermInsightErrorEnum_SearchTermInsightError.UNKNOWN;
    case 2:
    case "FILTERING_NOT_ALLOWED_WITH_SEGMENTS":
      return SearchTermInsightErrorEnum_SearchTermInsightError.FILTERING_NOT_ALLOWED_WITH_SEGMENTS;
    case 3:
    case "LIMIT_NOT_ALLOWED_WITH_SEGMENTS":
      return SearchTermInsightErrorEnum_SearchTermInsightError.LIMIT_NOT_ALLOWED_WITH_SEGMENTS;
    case 4:
    case "MISSING_FIELD_IN_SELECT_CLAUSE":
      return SearchTermInsightErrorEnum_SearchTermInsightError.MISSING_FIELD_IN_SELECT_CLAUSE;
    case 5:
    case "REQUIRES_FILTER_BY_SINGLE_RESOURCE":
      return SearchTermInsightErrorEnum_SearchTermInsightError.REQUIRES_FILTER_BY_SINGLE_RESOURCE;
    case 6:
    case "SORTING_NOT_ALLOWED_WITH_SEGMENTS":
      return SearchTermInsightErrorEnum_SearchTermInsightError.SORTING_NOT_ALLOWED_WITH_SEGMENTS;
    case 7:
    case "SUMMARY_ROW_NOT_ALLOWED_WITH_SEGMENTS":
      return SearchTermInsightErrorEnum_SearchTermInsightError.SUMMARY_ROW_NOT_ALLOWED_WITH_SEGMENTS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SearchTermInsightErrorEnum_SearchTermInsightError.UNRECOGNIZED;
  }
}

export function searchTermInsightErrorEnum_SearchTermInsightErrorToJSON(
  object: SearchTermInsightErrorEnum_SearchTermInsightError,
): string {
  switch (object) {
    case SearchTermInsightErrorEnum_SearchTermInsightError.UNSPECIFIED:
      return "UNSPECIFIED";
    case SearchTermInsightErrorEnum_SearchTermInsightError.UNKNOWN:
      return "UNKNOWN";
    case SearchTermInsightErrorEnum_SearchTermInsightError.FILTERING_NOT_ALLOWED_WITH_SEGMENTS:
      return "FILTERING_NOT_ALLOWED_WITH_SEGMENTS";
    case SearchTermInsightErrorEnum_SearchTermInsightError.LIMIT_NOT_ALLOWED_WITH_SEGMENTS:
      return "LIMIT_NOT_ALLOWED_WITH_SEGMENTS";
    case SearchTermInsightErrorEnum_SearchTermInsightError.MISSING_FIELD_IN_SELECT_CLAUSE:
      return "MISSING_FIELD_IN_SELECT_CLAUSE";
    case SearchTermInsightErrorEnum_SearchTermInsightError.REQUIRES_FILTER_BY_SINGLE_RESOURCE:
      return "REQUIRES_FILTER_BY_SINGLE_RESOURCE";
    case SearchTermInsightErrorEnum_SearchTermInsightError.SORTING_NOT_ALLOWED_WITH_SEGMENTS:
      return "SORTING_NOT_ALLOWED_WITH_SEGMENTS";
    case SearchTermInsightErrorEnum_SearchTermInsightError.SUMMARY_ROW_NOT_ALLOWED_WITH_SEGMENTS:
      return "SUMMARY_ROW_NOT_ALLOWED_WITH_SEGMENTS";
    case SearchTermInsightErrorEnum_SearchTermInsightError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseSearchTermInsightErrorEnum(): SearchTermInsightErrorEnum {
  return {};
}

export const SearchTermInsightErrorEnum: MessageFns<SearchTermInsightErrorEnum> = {
  encode(_: SearchTermInsightErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchTermInsightErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchTermInsightErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SearchTermInsightErrorEnum {
    return {};
  },

  toJSON(_: SearchTermInsightErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SearchTermInsightErrorEnum>): SearchTermInsightErrorEnum {
    return SearchTermInsightErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SearchTermInsightErrorEnum>): SearchTermInsightErrorEnum {
    const message = createBaseSearchTermInsightErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
