// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/user_list.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  BasicUserListInfo,
  CrmBasedUserListInfo,
  LogicalUserListInfo,
  LookalikeUserListInfo,
  RuleBasedUserListInfo,
  SimilarUserListInfo,
} from "../common/user_lists.js";
import {
  AccessReasonEnum_AccessReason,
  accessReasonEnum_AccessReasonFromJSON,
  accessReasonEnum_AccessReasonToJSON,
} from "../enums/access_reason.js";
import {
  UserListAccessStatusEnum_UserListAccessStatus,
  userListAccessStatusEnum_UserListAccessStatusFromJSON,
  userListAccessStatusEnum_UserListAccessStatusToJSON,
} from "../enums/user_list_access_status.js";
import {
  UserListClosingReasonEnum_UserListClosingReason,
  userListClosingReasonEnum_UserListClosingReasonFromJSON,
  userListClosingReasonEnum_UserListClosingReasonToJSON,
} from "../enums/user_list_closing_reason.js";
import {
  UserListMembershipStatusEnum_UserListMembershipStatus,
  userListMembershipStatusEnum_UserListMembershipStatusFromJSON,
  userListMembershipStatusEnum_UserListMembershipStatusToJSON,
} from "../enums/user_list_membership_status.js";
import {
  UserListSizeRangeEnum_UserListSizeRange,
  userListSizeRangeEnum_UserListSizeRangeFromJSON,
  userListSizeRangeEnum_UserListSizeRangeToJSON,
} from "../enums/user_list_size_range.js";
import {
  UserListTypeEnum_UserListType,
  userListTypeEnum_UserListTypeFromJSON,
  userListTypeEnum_UserListTypeToJSON,
} from "../enums/user_list_type.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/** A user list. This is a list of users a customer may target. */
export interface UserList {
  /**
   * Immutable. The resource name of the user list.
   * User list resource names have the form:
   *
   * `customers/{customer_id}/userLists/{user_list_id}`
   */
  resourceName: string;
  /** Output only. Id of the user list. */
  id?:
    | Long
    | undefined;
  /**
   * Output only. An option that indicates if a user may edit a list. Depends on
   * the list ownership and list type. For example, external remarketing user
   * lists are not editable.
   *
   * This field is read-only.
   */
  readOnly?:
    | boolean
    | undefined;
  /**
   * Name of this user list. Depending on its access_reason, the user list name
   * may not be unique (for example, if access_reason=SHARED)
   */
  name?:
    | string
    | undefined;
  /** Description of this user list. */
  description?:
    | string
    | undefined;
  /**
   * Membership status of this user list. Indicates whether a user list is open
   * or active. Only open user lists can accumulate more users and can be
   * targeted to.
   */
  membershipStatus: UserListMembershipStatusEnum_UserListMembershipStatus;
  /**
   * An ID from external system. It is used by user list sellers to correlate
   * IDs on their systems.
   */
  integrationCode?:
    | string
    | undefined;
  /**
   * Number of days a user's cookie stays on your list since its most recent
   * addition to the list. This field must be between 0 and 540 inclusive.
   * However, for CRM based userlists, this field can be set to 10000 which
   * means no expiration.
   *
   * This field is ignored for logical_user_list and rule_based_user_list types.
   * Membership to lists of these types depends on the rules defined by the
   * lists.
   */
  membershipLifeSpan?:
    | Long
    | undefined;
  /**
   * Output only. Estimated number of users in this user list, on the Google
   * Display Network. This value is null if the number of users has not yet been
   * determined.
   *
   * This field is read-only.
   */
  sizeForDisplay?:
    | Long
    | undefined;
  /**
   * Output only. Size range in terms of number of users of the UserList, on the
   * Google Display Network.
   *
   * This field is read-only.
   */
  sizeRangeForDisplay: UserListSizeRangeEnum_UserListSizeRange;
  /**
   * Output only. Estimated number of users in this user list in the google.com
   * domain. These are the users available for targeting in Search campaigns.
   * This value is null if the number of users has not yet been determined.
   *
   * This field is read-only.
   */
  sizeForSearch?:
    | Long
    | undefined;
  /**
   * Output only. Size range in terms of number of users of the UserList, for
   * Search ads.
   *
   * This field is read-only.
   */
  sizeRangeForSearch: UserListSizeRangeEnum_UserListSizeRange;
  /**
   * Output only. Type of this list.
   *
   * This field is read-only.
   */
  type: UserListTypeEnum_UserListType;
  /**
   * Indicating the reason why this user list membership status is closed. It is
   * only populated on lists that were automatically closed due to inactivity,
   * and will be cleared once the list membership status becomes open.
   */
  closingReason: UserListClosingReasonEnum_UserListClosingReason;
  /**
   * Output only. Indicates the reason this account has been granted access to
   * the list. The reason can be SHARED, OWNED, LICENSED or SUBSCRIBED.
   *
   * This field is read-only.
   */
  accessReason: AccessReasonEnum_AccessReason;
  /**
   * Indicates if this share is still enabled. When a UserList is shared with
   * the user this field is set to ENABLED. Later the userList owner can decide
   * to revoke the share and make it DISABLED.
   * The default value of this field is set to ENABLED.
   */
  accountUserListStatus: UserListAccessStatusEnum_UserListAccessStatus;
  /** Indicates if this user list is eligible for Google Search Network. */
  eligibleForSearch?:
    | boolean
    | undefined;
  /**
   * Output only. Indicates this user list is eligible for Google Display
   * Network.
   *
   * This field is read-only.
   */
  eligibleForDisplay?:
    | boolean
    | undefined;
  /**
   * Output only. Indicates match rate for Customer Match lists. The range of
   * this field is [0-100]. This will be null for other list types or when it's
   * not possible to calculate the match rate.
   *
   * This field is read-only.
   */
  matchRatePercentage?:
    | number
    | undefined;
  /** User list of CRM users provided by the advertiser. */
  crmBasedUserList?:
    | CrmBasedUserListInfo
    | undefined;
  /**
   * Output only. User list which are similar to users from another UserList.
   * These lists are readonly and automatically created by google.
   */
  similarUserList?:
    | SimilarUserListInfo
    | undefined;
  /** User list generated by a rule. */
  ruleBasedUserList?:
    | RuleBasedUserListInfo
    | undefined;
  /** User list that is a custom combination of user lists and user interests. */
  logicalUserList?:
    | LogicalUserListInfo
    | undefined;
  /** User list targeting as a collection of conversion or remarketing actions. */
  basicUserList?:
    | BasicUserListInfo
    | undefined;
  /** Immutable. Lookalike User List. */
  lookalikeUserList?: LookalikeUserListInfo | undefined;
}

function createBaseUserList(): UserList {
  return {
    resourceName: "",
    id: undefined,
    readOnly: undefined,
    name: undefined,
    description: undefined,
    membershipStatus: 0,
    integrationCode: undefined,
    membershipLifeSpan: undefined,
    sizeForDisplay: undefined,
    sizeRangeForDisplay: 0,
    sizeForSearch: undefined,
    sizeRangeForSearch: 0,
    type: 0,
    closingReason: 0,
    accessReason: 0,
    accountUserListStatus: 0,
    eligibleForSearch: undefined,
    eligibleForDisplay: undefined,
    matchRatePercentage: undefined,
    crmBasedUserList: undefined,
    similarUserList: undefined,
    ruleBasedUserList: undefined,
    logicalUserList: undefined,
    basicUserList: undefined,
    lookalikeUserList: undefined,
  };
}

export const UserList: MessageFns<UserList> = {
  encode(message: UserList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(200).int64(message.id.toString());
    }
    if (message.readOnly !== undefined) {
      writer.uint32(208).bool(message.readOnly);
    }
    if (message.name !== undefined) {
      writer.uint32(218).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(226).string(message.description);
    }
    if (message.membershipStatus !== 0) {
      writer.uint32(48).int32(message.membershipStatus);
    }
    if (message.integrationCode !== undefined) {
      writer.uint32(234).string(message.integrationCode);
    }
    if (message.membershipLifeSpan !== undefined) {
      writer.uint32(240).int64(message.membershipLifeSpan.toString());
    }
    if (message.sizeForDisplay !== undefined) {
      writer.uint32(248).int64(message.sizeForDisplay.toString());
    }
    if (message.sizeRangeForDisplay !== 0) {
      writer.uint32(80).int32(message.sizeRangeForDisplay);
    }
    if (message.sizeForSearch !== undefined) {
      writer.uint32(256).int64(message.sizeForSearch.toString());
    }
    if (message.sizeRangeForSearch !== 0) {
      writer.uint32(96).int32(message.sizeRangeForSearch);
    }
    if (message.type !== 0) {
      writer.uint32(104).int32(message.type);
    }
    if (message.closingReason !== 0) {
      writer.uint32(112).int32(message.closingReason);
    }
    if (message.accessReason !== 0) {
      writer.uint32(120).int32(message.accessReason);
    }
    if (message.accountUserListStatus !== 0) {
      writer.uint32(128).int32(message.accountUserListStatus);
    }
    if (message.eligibleForSearch !== undefined) {
      writer.uint32(264).bool(message.eligibleForSearch);
    }
    if (message.eligibleForDisplay !== undefined) {
      writer.uint32(272).bool(message.eligibleForDisplay);
    }
    if (message.matchRatePercentage !== undefined) {
      writer.uint32(192).int32(message.matchRatePercentage);
    }
    if (message.crmBasedUserList !== undefined) {
      CrmBasedUserListInfo.encode(message.crmBasedUserList, writer.uint32(154).fork()).join();
    }
    if (message.similarUserList !== undefined) {
      SimilarUserListInfo.encode(message.similarUserList, writer.uint32(162).fork()).join();
    }
    if (message.ruleBasedUserList !== undefined) {
      RuleBasedUserListInfo.encode(message.ruleBasedUserList, writer.uint32(170).fork()).join();
    }
    if (message.logicalUserList !== undefined) {
      LogicalUserListInfo.encode(message.logicalUserList, writer.uint32(178).fork()).join();
    }
    if (message.basicUserList !== undefined) {
      BasicUserListInfo.encode(message.basicUserList, writer.uint32(186).fork()).join();
    }
    if (message.lookalikeUserList !== undefined) {
      LookalikeUserListInfo.encode(message.lookalikeUserList, writer.uint32(290).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 25:
          if (tag !== 200) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 26:
          if (tag !== 208) {
            break;
          }

          message.readOnly = reader.bool();
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.name = reader.string();
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.membershipStatus = reader.int32() as any;
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.integrationCode = reader.string();
          continue;
        case 30:
          if (tag !== 240) {
            break;
          }

          message.membershipLifeSpan = Long.fromString(reader.int64().toString());
          continue;
        case 31:
          if (tag !== 248) {
            break;
          }

          message.sizeForDisplay = Long.fromString(reader.int64().toString());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.sizeRangeForDisplay = reader.int32() as any;
          continue;
        case 32:
          if (tag !== 256) {
            break;
          }

          message.sizeForSearch = Long.fromString(reader.int64().toString());
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.sizeRangeForSearch = reader.int32() as any;
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.closingReason = reader.int32() as any;
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.accessReason = reader.int32() as any;
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.accountUserListStatus = reader.int32() as any;
          continue;
        case 33:
          if (tag !== 264) {
            break;
          }

          message.eligibleForSearch = reader.bool();
          continue;
        case 34:
          if (tag !== 272) {
            break;
          }

          message.eligibleForDisplay = reader.bool();
          continue;
        case 24:
          if (tag !== 192) {
            break;
          }

          message.matchRatePercentage = reader.int32();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.crmBasedUserList = CrmBasedUserListInfo.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.similarUserList = SimilarUserListInfo.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.ruleBasedUserList = RuleBasedUserListInfo.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.logicalUserList = LogicalUserListInfo.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.basicUserList = BasicUserListInfo.decode(reader, reader.uint32());
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }

          message.lookalikeUserList = LookalikeUserListInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserList {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      readOnly: isSet(object.readOnly) ? globalThis.Boolean(object.readOnly) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      membershipStatus: isSet(object.membershipStatus)
        ? userListMembershipStatusEnum_UserListMembershipStatusFromJSON(object.membershipStatus)
        : 0,
      integrationCode: isSet(object.integrationCode) ? globalThis.String(object.integrationCode) : undefined,
      membershipLifeSpan: isSet(object.membershipLifeSpan) ? Long.fromValue(object.membershipLifeSpan) : undefined,
      sizeForDisplay: isSet(object.sizeForDisplay) ? Long.fromValue(object.sizeForDisplay) : undefined,
      sizeRangeForDisplay: isSet(object.sizeRangeForDisplay)
        ? userListSizeRangeEnum_UserListSizeRangeFromJSON(object.sizeRangeForDisplay)
        : 0,
      sizeForSearch: isSet(object.sizeForSearch) ? Long.fromValue(object.sizeForSearch) : undefined,
      sizeRangeForSearch: isSet(object.sizeRangeForSearch)
        ? userListSizeRangeEnum_UserListSizeRangeFromJSON(object.sizeRangeForSearch)
        : 0,
      type: isSet(object.type) ? userListTypeEnum_UserListTypeFromJSON(object.type) : 0,
      closingReason: isSet(object.closingReason)
        ? userListClosingReasonEnum_UserListClosingReasonFromJSON(object.closingReason)
        : 0,
      accessReason: isSet(object.accessReason) ? accessReasonEnum_AccessReasonFromJSON(object.accessReason) : 0,
      accountUserListStatus: isSet(object.accountUserListStatus)
        ? userListAccessStatusEnum_UserListAccessStatusFromJSON(object.accountUserListStatus)
        : 0,
      eligibleForSearch: isSet(object.eligibleForSearch) ? globalThis.Boolean(object.eligibleForSearch) : undefined,
      eligibleForDisplay: isSet(object.eligibleForDisplay) ? globalThis.Boolean(object.eligibleForDisplay) : undefined,
      matchRatePercentage: isSet(object.matchRatePercentage)
        ? globalThis.Number(object.matchRatePercentage)
        : undefined,
      crmBasedUserList: isSet(object.crmBasedUserList)
        ? CrmBasedUserListInfo.fromJSON(object.crmBasedUserList)
        : undefined,
      similarUserList: isSet(object.similarUserList) ? SimilarUserListInfo.fromJSON(object.similarUserList) : undefined,
      ruleBasedUserList: isSet(object.ruleBasedUserList)
        ? RuleBasedUserListInfo.fromJSON(object.ruleBasedUserList)
        : undefined,
      logicalUserList: isSet(object.logicalUserList) ? LogicalUserListInfo.fromJSON(object.logicalUserList) : undefined,
      basicUserList: isSet(object.basicUserList) ? BasicUserListInfo.fromJSON(object.basicUserList) : undefined,
      lookalikeUserList: isSet(object.lookalikeUserList)
        ? LookalikeUserListInfo.fromJSON(object.lookalikeUserList)
        : undefined,
    };
  },

  toJSON(message: UserList): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.readOnly !== undefined) {
      obj.readOnly = message.readOnly;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.membershipStatus !== 0) {
      obj.membershipStatus = userListMembershipStatusEnum_UserListMembershipStatusToJSON(message.membershipStatus);
    }
    if (message.integrationCode !== undefined) {
      obj.integrationCode = message.integrationCode;
    }
    if (message.membershipLifeSpan !== undefined) {
      obj.membershipLifeSpan = (message.membershipLifeSpan || Long.ZERO).toString();
    }
    if (message.sizeForDisplay !== undefined) {
      obj.sizeForDisplay = (message.sizeForDisplay || Long.ZERO).toString();
    }
    if (message.sizeRangeForDisplay !== 0) {
      obj.sizeRangeForDisplay = userListSizeRangeEnum_UserListSizeRangeToJSON(message.sizeRangeForDisplay);
    }
    if (message.sizeForSearch !== undefined) {
      obj.sizeForSearch = (message.sizeForSearch || Long.ZERO).toString();
    }
    if (message.sizeRangeForSearch !== 0) {
      obj.sizeRangeForSearch = userListSizeRangeEnum_UserListSizeRangeToJSON(message.sizeRangeForSearch);
    }
    if (message.type !== 0) {
      obj.type = userListTypeEnum_UserListTypeToJSON(message.type);
    }
    if (message.closingReason !== 0) {
      obj.closingReason = userListClosingReasonEnum_UserListClosingReasonToJSON(message.closingReason);
    }
    if (message.accessReason !== 0) {
      obj.accessReason = accessReasonEnum_AccessReasonToJSON(message.accessReason);
    }
    if (message.accountUserListStatus !== 0) {
      obj.accountUserListStatus = userListAccessStatusEnum_UserListAccessStatusToJSON(message.accountUserListStatus);
    }
    if (message.eligibleForSearch !== undefined) {
      obj.eligibleForSearch = message.eligibleForSearch;
    }
    if (message.eligibleForDisplay !== undefined) {
      obj.eligibleForDisplay = message.eligibleForDisplay;
    }
    if (message.matchRatePercentage !== undefined) {
      obj.matchRatePercentage = Math.round(message.matchRatePercentage);
    }
    if (message.crmBasedUserList !== undefined) {
      obj.crmBasedUserList = CrmBasedUserListInfo.toJSON(message.crmBasedUserList);
    }
    if (message.similarUserList !== undefined) {
      obj.similarUserList = SimilarUserListInfo.toJSON(message.similarUserList);
    }
    if (message.ruleBasedUserList !== undefined) {
      obj.ruleBasedUserList = RuleBasedUserListInfo.toJSON(message.ruleBasedUserList);
    }
    if (message.logicalUserList !== undefined) {
      obj.logicalUserList = LogicalUserListInfo.toJSON(message.logicalUserList);
    }
    if (message.basicUserList !== undefined) {
      obj.basicUserList = BasicUserListInfo.toJSON(message.basicUserList);
    }
    if (message.lookalikeUserList !== undefined) {
      obj.lookalikeUserList = LookalikeUserListInfo.toJSON(message.lookalikeUserList);
    }
    return obj;
  },

  create(base?: DeepPartial<UserList>): UserList {
    return UserList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserList>): UserList {
    const message = createBaseUserList();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.readOnly = object.readOnly ?? undefined;
    message.name = object.name ?? undefined;
    message.description = object.description ?? undefined;
    message.membershipStatus = object.membershipStatus ?? 0;
    message.integrationCode = object.integrationCode ?? undefined;
    message.membershipLifeSpan = (object.membershipLifeSpan !== undefined && object.membershipLifeSpan !== null)
      ? Long.fromValue(object.membershipLifeSpan)
      : undefined;
    message.sizeForDisplay = (object.sizeForDisplay !== undefined && object.sizeForDisplay !== null)
      ? Long.fromValue(object.sizeForDisplay)
      : undefined;
    message.sizeRangeForDisplay = object.sizeRangeForDisplay ?? 0;
    message.sizeForSearch = (object.sizeForSearch !== undefined && object.sizeForSearch !== null)
      ? Long.fromValue(object.sizeForSearch)
      : undefined;
    message.sizeRangeForSearch = object.sizeRangeForSearch ?? 0;
    message.type = object.type ?? 0;
    message.closingReason = object.closingReason ?? 0;
    message.accessReason = object.accessReason ?? 0;
    message.accountUserListStatus = object.accountUserListStatus ?? 0;
    message.eligibleForSearch = object.eligibleForSearch ?? undefined;
    message.eligibleForDisplay = object.eligibleForDisplay ?? undefined;
    message.matchRatePercentage = object.matchRatePercentage ?? undefined;
    message.crmBasedUserList = (object.crmBasedUserList !== undefined && object.crmBasedUserList !== null)
      ? CrmBasedUserListInfo.fromPartial(object.crmBasedUserList)
      : undefined;
    message.similarUserList = (object.similarUserList !== undefined && object.similarUserList !== null)
      ? SimilarUserListInfo.fromPartial(object.similarUserList)
      : undefined;
    message.ruleBasedUserList = (object.ruleBasedUserList !== undefined && object.ruleBasedUserList !== null)
      ? RuleBasedUserListInfo.fromPartial(object.ruleBasedUserList)
      : undefined;
    message.logicalUserList = (object.logicalUserList !== undefined && object.logicalUserList !== null)
      ? LogicalUserListInfo.fromPartial(object.logicalUserList)
      : undefined;
    message.basicUserList = (object.basicUserList !== undefined && object.basicUserList !== null)
      ? BasicUserListInfo.fromPartial(object.basicUserList)
      : undefined;
    message.lookalikeUserList = (object.lookalikeUserList !== undefined && object.lookalikeUserList !== null)
      ? LookalikeUserListInfo.fromPartial(object.lookalikeUserList)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
