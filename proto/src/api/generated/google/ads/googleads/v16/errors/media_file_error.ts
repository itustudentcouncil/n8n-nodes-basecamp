// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/media_file_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible media file errors. */
export interface MediaFileErrorEnum {
}

/** Enum describing possible media file errors. */
export enum MediaFileErrorEnum_MediaFileError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** CANNOT_CREATE_STANDARD_ICON - Cannot create a standard icon type. */
  CANNOT_CREATE_STANDARD_ICON = 2,
  /** CANNOT_SELECT_STANDARD_ICON_WITH_OTHER_TYPES - May only select Standard Icons alone. */
  CANNOT_SELECT_STANDARD_ICON_WITH_OTHER_TYPES = 3,
  /** CANNOT_SPECIFY_MEDIA_FILE_ID_AND_DATA - Image contains both a media file ID and data. */
  CANNOT_SPECIFY_MEDIA_FILE_ID_AND_DATA = 4,
  /** DUPLICATE_MEDIA - A media file with given type and reference ID already exists. */
  DUPLICATE_MEDIA = 5,
  /** EMPTY_FIELD - A required field was not specified or is an empty string. */
  EMPTY_FIELD = 6,
  /** RESOURCE_REFERENCED_IN_MULTIPLE_OPS - A media file may only be modified once per call. */
  RESOURCE_REFERENCED_IN_MULTIPLE_OPS = 7,
  /** FIELD_NOT_SUPPORTED_FOR_MEDIA_SUB_TYPE - Field is not supported for the media sub type. */
  FIELD_NOT_SUPPORTED_FOR_MEDIA_SUB_TYPE = 8,
  /** INVALID_MEDIA_FILE_ID - The media file ID is invalid. */
  INVALID_MEDIA_FILE_ID = 9,
  /** INVALID_MEDIA_SUB_TYPE - The media subtype is invalid. */
  INVALID_MEDIA_SUB_TYPE = 10,
  /** INVALID_MEDIA_FILE_TYPE - The media file type is invalid. */
  INVALID_MEDIA_FILE_TYPE = 11,
  /** INVALID_MIME_TYPE - The mimetype is invalid. */
  INVALID_MIME_TYPE = 12,
  /** INVALID_REFERENCE_ID - The media reference ID is invalid. */
  INVALID_REFERENCE_ID = 13,
  /** INVALID_YOU_TUBE_ID - The YouTube video ID is invalid. */
  INVALID_YOU_TUBE_ID = 14,
  /** MEDIA_FILE_FAILED_TRANSCODING - Media file has failed transcoding */
  MEDIA_FILE_FAILED_TRANSCODING = 15,
  /** MEDIA_NOT_TRANSCODED - Media file has not been transcoded. */
  MEDIA_NOT_TRANSCODED = 16,
  /** MEDIA_TYPE_DOES_NOT_MATCH_MEDIA_FILE_TYPE - The media type does not match the actual media file's type. */
  MEDIA_TYPE_DOES_NOT_MATCH_MEDIA_FILE_TYPE = 17,
  /** NO_FIELDS_SPECIFIED - None of the fields have been specified. */
  NO_FIELDS_SPECIFIED = 18,
  /** NULL_REFERENCE_ID_AND_MEDIA_ID - One of reference ID or media file ID must be specified. */
  NULL_REFERENCE_ID_AND_MEDIA_ID = 19,
  /** TOO_LONG - The string has too many characters. */
  TOO_LONG = 20,
  /** UNSUPPORTED_TYPE - The specified type is not supported. */
  UNSUPPORTED_TYPE = 21,
  /** YOU_TUBE_SERVICE_UNAVAILABLE - YouTube is unavailable for requesting video data. */
  YOU_TUBE_SERVICE_UNAVAILABLE = 22,
  /** YOU_TUBE_VIDEO_HAS_NON_POSITIVE_DURATION - The YouTube video has a non positive duration. */
  YOU_TUBE_VIDEO_HAS_NON_POSITIVE_DURATION = 23,
  /** YOU_TUBE_VIDEO_NOT_FOUND - The YouTube video ID is syntactically valid but the video was not found. */
  YOU_TUBE_VIDEO_NOT_FOUND = 24,
  UNRECOGNIZED = -1,
}

export function mediaFileErrorEnum_MediaFileErrorFromJSON(object: any): MediaFileErrorEnum_MediaFileError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return MediaFileErrorEnum_MediaFileError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return MediaFileErrorEnum_MediaFileError.UNKNOWN;
    case 2:
    case "CANNOT_CREATE_STANDARD_ICON":
      return MediaFileErrorEnum_MediaFileError.CANNOT_CREATE_STANDARD_ICON;
    case 3:
    case "CANNOT_SELECT_STANDARD_ICON_WITH_OTHER_TYPES":
      return MediaFileErrorEnum_MediaFileError.CANNOT_SELECT_STANDARD_ICON_WITH_OTHER_TYPES;
    case 4:
    case "CANNOT_SPECIFY_MEDIA_FILE_ID_AND_DATA":
      return MediaFileErrorEnum_MediaFileError.CANNOT_SPECIFY_MEDIA_FILE_ID_AND_DATA;
    case 5:
    case "DUPLICATE_MEDIA":
      return MediaFileErrorEnum_MediaFileError.DUPLICATE_MEDIA;
    case 6:
    case "EMPTY_FIELD":
      return MediaFileErrorEnum_MediaFileError.EMPTY_FIELD;
    case 7:
    case "RESOURCE_REFERENCED_IN_MULTIPLE_OPS":
      return MediaFileErrorEnum_MediaFileError.RESOURCE_REFERENCED_IN_MULTIPLE_OPS;
    case 8:
    case "FIELD_NOT_SUPPORTED_FOR_MEDIA_SUB_TYPE":
      return MediaFileErrorEnum_MediaFileError.FIELD_NOT_SUPPORTED_FOR_MEDIA_SUB_TYPE;
    case 9:
    case "INVALID_MEDIA_FILE_ID":
      return MediaFileErrorEnum_MediaFileError.INVALID_MEDIA_FILE_ID;
    case 10:
    case "INVALID_MEDIA_SUB_TYPE":
      return MediaFileErrorEnum_MediaFileError.INVALID_MEDIA_SUB_TYPE;
    case 11:
    case "INVALID_MEDIA_FILE_TYPE":
      return MediaFileErrorEnum_MediaFileError.INVALID_MEDIA_FILE_TYPE;
    case 12:
    case "INVALID_MIME_TYPE":
      return MediaFileErrorEnum_MediaFileError.INVALID_MIME_TYPE;
    case 13:
    case "INVALID_REFERENCE_ID":
      return MediaFileErrorEnum_MediaFileError.INVALID_REFERENCE_ID;
    case 14:
    case "INVALID_YOU_TUBE_ID":
      return MediaFileErrorEnum_MediaFileError.INVALID_YOU_TUBE_ID;
    case 15:
    case "MEDIA_FILE_FAILED_TRANSCODING":
      return MediaFileErrorEnum_MediaFileError.MEDIA_FILE_FAILED_TRANSCODING;
    case 16:
    case "MEDIA_NOT_TRANSCODED":
      return MediaFileErrorEnum_MediaFileError.MEDIA_NOT_TRANSCODED;
    case 17:
    case "MEDIA_TYPE_DOES_NOT_MATCH_MEDIA_FILE_TYPE":
      return MediaFileErrorEnum_MediaFileError.MEDIA_TYPE_DOES_NOT_MATCH_MEDIA_FILE_TYPE;
    case 18:
    case "NO_FIELDS_SPECIFIED":
      return MediaFileErrorEnum_MediaFileError.NO_FIELDS_SPECIFIED;
    case 19:
    case "NULL_REFERENCE_ID_AND_MEDIA_ID":
      return MediaFileErrorEnum_MediaFileError.NULL_REFERENCE_ID_AND_MEDIA_ID;
    case 20:
    case "TOO_LONG":
      return MediaFileErrorEnum_MediaFileError.TOO_LONG;
    case 21:
    case "UNSUPPORTED_TYPE":
      return MediaFileErrorEnum_MediaFileError.UNSUPPORTED_TYPE;
    case 22:
    case "YOU_TUBE_SERVICE_UNAVAILABLE":
      return MediaFileErrorEnum_MediaFileError.YOU_TUBE_SERVICE_UNAVAILABLE;
    case 23:
    case "YOU_TUBE_VIDEO_HAS_NON_POSITIVE_DURATION":
      return MediaFileErrorEnum_MediaFileError.YOU_TUBE_VIDEO_HAS_NON_POSITIVE_DURATION;
    case 24:
    case "YOU_TUBE_VIDEO_NOT_FOUND":
      return MediaFileErrorEnum_MediaFileError.YOU_TUBE_VIDEO_NOT_FOUND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MediaFileErrorEnum_MediaFileError.UNRECOGNIZED;
  }
}

export function mediaFileErrorEnum_MediaFileErrorToJSON(object: MediaFileErrorEnum_MediaFileError): string {
  switch (object) {
    case MediaFileErrorEnum_MediaFileError.UNSPECIFIED:
      return "UNSPECIFIED";
    case MediaFileErrorEnum_MediaFileError.UNKNOWN:
      return "UNKNOWN";
    case MediaFileErrorEnum_MediaFileError.CANNOT_CREATE_STANDARD_ICON:
      return "CANNOT_CREATE_STANDARD_ICON";
    case MediaFileErrorEnum_MediaFileError.CANNOT_SELECT_STANDARD_ICON_WITH_OTHER_TYPES:
      return "CANNOT_SELECT_STANDARD_ICON_WITH_OTHER_TYPES";
    case MediaFileErrorEnum_MediaFileError.CANNOT_SPECIFY_MEDIA_FILE_ID_AND_DATA:
      return "CANNOT_SPECIFY_MEDIA_FILE_ID_AND_DATA";
    case MediaFileErrorEnum_MediaFileError.DUPLICATE_MEDIA:
      return "DUPLICATE_MEDIA";
    case MediaFileErrorEnum_MediaFileError.EMPTY_FIELD:
      return "EMPTY_FIELD";
    case MediaFileErrorEnum_MediaFileError.RESOURCE_REFERENCED_IN_MULTIPLE_OPS:
      return "RESOURCE_REFERENCED_IN_MULTIPLE_OPS";
    case MediaFileErrorEnum_MediaFileError.FIELD_NOT_SUPPORTED_FOR_MEDIA_SUB_TYPE:
      return "FIELD_NOT_SUPPORTED_FOR_MEDIA_SUB_TYPE";
    case MediaFileErrorEnum_MediaFileError.INVALID_MEDIA_FILE_ID:
      return "INVALID_MEDIA_FILE_ID";
    case MediaFileErrorEnum_MediaFileError.INVALID_MEDIA_SUB_TYPE:
      return "INVALID_MEDIA_SUB_TYPE";
    case MediaFileErrorEnum_MediaFileError.INVALID_MEDIA_FILE_TYPE:
      return "INVALID_MEDIA_FILE_TYPE";
    case MediaFileErrorEnum_MediaFileError.INVALID_MIME_TYPE:
      return "INVALID_MIME_TYPE";
    case MediaFileErrorEnum_MediaFileError.INVALID_REFERENCE_ID:
      return "INVALID_REFERENCE_ID";
    case MediaFileErrorEnum_MediaFileError.INVALID_YOU_TUBE_ID:
      return "INVALID_YOU_TUBE_ID";
    case MediaFileErrorEnum_MediaFileError.MEDIA_FILE_FAILED_TRANSCODING:
      return "MEDIA_FILE_FAILED_TRANSCODING";
    case MediaFileErrorEnum_MediaFileError.MEDIA_NOT_TRANSCODED:
      return "MEDIA_NOT_TRANSCODED";
    case MediaFileErrorEnum_MediaFileError.MEDIA_TYPE_DOES_NOT_MATCH_MEDIA_FILE_TYPE:
      return "MEDIA_TYPE_DOES_NOT_MATCH_MEDIA_FILE_TYPE";
    case MediaFileErrorEnum_MediaFileError.NO_FIELDS_SPECIFIED:
      return "NO_FIELDS_SPECIFIED";
    case MediaFileErrorEnum_MediaFileError.NULL_REFERENCE_ID_AND_MEDIA_ID:
      return "NULL_REFERENCE_ID_AND_MEDIA_ID";
    case MediaFileErrorEnum_MediaFileError.TOO_LONG:
      return "TOO_LONG";
    case MediaFileErrorEnum_MediaFileError.UNSUPPORTED_TYPE:
      return "UNSUPPORTED_TYPE";
    case MediaFileErrorEnum_MediaFileError.YOU_TUBE_SERVICE_UNAVAILABLE:
      return "YOU_TUBE_SERVICE_UNAVAILABLE";
    case MediaFileErrorEnum_MediaFileError.YOU_TUBE_VIDEO_HAS_NON_POSITIVE_DURATION:
      return "YOU_TUBE_VIDEO_HAS_NON_POSITIVE_DURATION";
    case MediaFileErrorEnum_MediaFileError.YOU_TUBE_VIDEO_NOT_FOUND:
      return "YOU_TUBE_VIDEO_NOT_FOUND";
    case MediaFileErrorEnum_MediaFileError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseMediaFileErrorEnum(): MediaFileErrorEnum {
  return {};
}

export const MediaFileErrorEnum: MessageFns<MediaFileErrorEnum> = {
  encode(_: MediaFileErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaFileErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaFileErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MediaFileErrorEnum {
    return {};
  },

  toJSON(_: MediaFileErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MediaFileErrorEnum>): MediaFileErrorEnum {
    return MediaFileErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MediaFileErrorEnum>): MediaFileErrorEnum {
    const message = createBaseMediaFileErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
