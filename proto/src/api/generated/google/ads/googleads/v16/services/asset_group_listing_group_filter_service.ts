// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/services/asset_group_listing_group_filter_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import {
  ResponseContentTypeEnum_ResponseContentType,
  responseContentTypeEnum_ResponseContentTypeFromJSON,
  responseContentTypeEnum_ResponseContentTypeToJSON,
} from "../enums/response_content_type.js";
import { AssetGroupListingGroupFilter } from "../resources/asset_group_listing_group_filter.js";

export const protobufPackage = "google.ads.googleads.v16.services";

/**
 * Request message for
 * [AssetGroupListingGroupFilterService.MutateAssetGroupListingGroupFilters][google.ads.googleads.v16.services.AssetGroupListingGroupFilterService.MutateAssetGroupListingGroupFilters].
 * partial_failure is not supported because the tree needs to be validated
 * together.
 */
export interface MutateAssetGroupListingGroupFiltersRequest {
  /**
   * Required. The ID of the customer whose asset group listing group filters
   * are being modified.
   */
  customerId: string;
  /**
   * Required. The list of operations to perform on individual asset group
   * listing group filters.
   */
  operations: AssetGroupListingGroupFilterOperation[];
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
  /**
   * The response content type setting. Determines whether the mutable resource
   * or just the resource name should be returned post mutation.
   */
  responseContentType: ResponseContentTypeEnum_ResponseContentType;
}

/** A single operation (create, remove) on an asset group listing group filter. */
export interface AssetGroupListingGroupFilterOperation {
  /** FieldMask that determines which resource fields are modified in an update. */
  updateMask:
    | string[]
    | undefined;
  /**
   * Create operation: No resource name is expected for the new asset group
   * listing group filter.
   */
  create?:
    | AssetGroupListingGroupFilter
    | undefined;
  /**
   * Update operation: The asset group listing group filter is expected to
   * have a valid resource name.
   */
  update?:
    | AssetGroupListingGroupFilter
    | undefined;
  /**
   * Remove operation: A resource name for the removed asset group listing
   * group filter is expected, in this format:
   * `customers/{customer_id}/assetGroupListingGroupFilters/{asset_group_id}~{listing_group_filter_id}`
   * An entity can be removed only if it's not referenced by other
   * parent_listing_group_id. If multiple entities are being deleted, the
   * mutates must be in the correct order.
   */
  remove?: string | undefined;
}

/** Response message for an asset group listing group filter mutate. */
export interface MutateAssetGroupListingGroupFiltersResponse {
  /** All results for the mutate. */
  results: MutateAssetGroupListingGroupFilterResult[];
}

/** The result for the asset group listing group filter mutate. */
export interface MutateAssetGroupListingGroupFilterResult {
  /** Returned for successful operations. */
  resourceName: string;
  /**
   * The mutated AssetGroupListingGroupFilter with only mutable fields after
   * mutate. The field will only be returned when response_content_type is set
   * to "MUTABLE_RESOURCE".
   */
  assetGroupListingGroupFilter: AssetGroupListingGroupFilter | undefined;
}

function createBaseMutateAssetGroupListingGroupFiltersRequest(): MutateAssetGroupListingGroupFiltersRequest {
  return { customerId: "", operations: [], validateOnly: false, responseContentType: 0 };
}

export const MutateAssetGroupListingGroupFiltersRequest: MessageFns<MutateAssetGroupListingGroupFiltersRequest> = {
  encode(message: MutateAssetGroupListingGroupFiltersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    for (const v of message.operations) {
      AssetGroupListingGroupFilterOperation.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    if (message.responseContentType !== 0) {
      writer.uint32(32).int32(message.responseContentType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateAssetGroupListingGroupFiltersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateAssetGroupListingGroupFiltersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operations.push(AssetGroupListingGroupFilterOperation.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.responseContentType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateAssetGroupListingGroupFiltersRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      operations: globalThis.Array.isArray(object?.operations)
        ? object.operations.map((e: any) => AssetGroupListingGroupFilterOperation.fromJSON(e))
        : [],
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      responseContentType: isSet(object.responseContentType)
        ? responseContentTypeEnum_ResponseContentTypeFromJSON(object.responseContentType)
        : 0,
    };
  },

  toJSON(message: MutateAssetGroupListingGroupFiltersRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.operations?.length) {
      obj.operations = message.operations.map((e) => AssetGroupListingGroupFilterOperation.toJSON(e));
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.responseContentType !== 0) {
      obj.responseContentType = responseContentTypeEnum_ResponseContentTypeToJSON(message.responseContentType);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateAssetGroupListingGroupFiltersRequest>): MutateAssetGroupListingGroupFiltersRequest {
    return MutateAssetGroupListingGroupFiltersRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<MutateAssetGroupListingGroupFiltersRequest>,
  ): MutateAssetGroupListingGroupFiltersRequest {
    const message = createBaseMutateAssetGroupListingGroupFiltersRequest();
    message.customerId = object.customerId ?? "";
    message.operations = object.operations?.map((e) => AssetGroupListingGroupFilterOperation.fromPartial(e)) || [];
    message.validateOnly = object.validateOnly ?? false;
    message.responseContentType = object.responseContentType ?? 0;
    return message;
  },
};

function createBaseAssetGroupListingGroupFilterOperation(): AssetGroupListingGroupFilterOperation {
  return { updateMask: undefined, create: undefined, update: undefined, remove: undefined };
}

export const AssetGroupListingGroupFilterOperation: MessageFns<AssetGroupListingGroupFilterOperation> = {
  encode(message: AssetGroupListingGroupFilterOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    if (message.create !== undefined) {
      AssetGroupListingGroupFilter.encode(message.create, writer.uint32(10).fork()).join();
    }
    if (message.update !== undefined) {
      AssetGroupListingGroupFilter.encode(message.update, writer.uint32(18).fork()).join();
    }
    if (message.remove !== undefined) {
      writer.uint32(26).string(message.remove);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetGroupListingGroupFilterOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetGroupListingGroupFilterOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.create = AssetGroupListingGroupFilter.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.update = AssetGroupListingGroupFilter.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.remove = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssetGroupListingGroupFilterOperation {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      create: isSet(object.create) ? AssetGroupListingGroupFilter.fromJSON(object.create) : undefined,
      update: isSet(object.update) ? AssetGroupListingGroupFilter.fromJSON(object.update) : undefined,
      remove: isSet(object.remove) ? globalThis.String(object.remove) : undefined,
    };
  },

  toJSON(message: AssetGroupListingGroupFilterOperation): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.create !== undefined) {
      obj.create = AssetGroupListingGroupFilter.toJSON(message.create);
    }
    if (message.update !== undefined) {
      obj.update = AssetGroupListingGroupFilter.toJSON(message.update);
    }
    if (message.remove !== undefined) {
      obj.remove = message.remove;
    }
    return obj;
  },

  create(base?: DeepPartial<AssetGroupListingGroupFilterOperation>): AssetGroupListingGroupFilterOperation {
    return AssetGroupListingGroupFilterOperation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AssetGroupListingGroupFilterOperation>): AssetGroupListingGroupFilterOperation {
    const message = createBaseAssetGroupListingGroupFilterOperation();
    message.updateMask = object.updateMask ?? undefined;
    message.create = (object.create !== undefined && object.create !== null)
      ? AssetGroupListingGroupFilter.fromPartial(object.create)
      : undefined;
    message.update = (object.update !== undefined && object.update !== null)
      ? AssetGroupListingGroupFilter.fromPartial(object.update)
      : undefined;
    message.remove = object.remove ?? undefined;
    return message;
  },
};

function createBaseMutateAssetGroupListingGroupFiltersResponse(): MutateAssetGroupListingGroupFiltersResponse {
  return { results: [] };
}

export const MutateAssetGroupListingGroupFiltersResponse: MessageFns<MutateAssetGroupListingGroupFiltersResponse> = {
  encode(
    message: MutateAssetGroupListingGroupFiltersResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.results) {
      MutateAssetGroupListingGroupFilterResult.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateAssetGroupListingGroupFiltersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateAssetGroupListingGroupFiltersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.results.push(MutateAssetGroupListingGroupFilterResult.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateAssetGroupListingGroupFiltersResponse {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => MutateAssetGroupListingGroupFilterResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MutateAssetGroupListingGroupFiltersResponse): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => MutateAssetGroupListingGroupFilterResult.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MutateAssetGroupListingGroupFiltersResponse>): MutateAssetGroupListingGroupFiltersResponse {
    return MutateAssetGroupListingGroupFiltersResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<MutateAssetGroupListingGroupFiltersResponse>,
  ): MutateAssetGroupListingGroupFiltersResponse {
    const message = createBaseMutateAssetGroupListingGroupFiltersResponse();
    message.results = object.results?.map((e) => MutateAssetGroupListingGroupFilterResult.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMutateAssetGroupListingGroupFilterResult(): MutateAssetGroupListingGroupFilterResult {
  return { resourceName: "", assetGroupListingGroupFilter: undefined };
}

export const MutateAssetGroupListingGroupFilterResult: MessageFns<MutateAssetGroupListingGroupFilterResult> = {
  encode(message: MutateAssetGroupListingGroupFilterResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.assetGroupListingGroupFilter !== undefined) {
      AssetGroupListingGroupFilter.encode(message.assetGroupListingGroupFilter, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateAssetGroupListingGroupFilterResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateAssetGroupListingGroupFilterResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.assetGroupListingGroupFilter = AssetGroupListingGroupFilter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateAssetGroupListingGroupFilterResult {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      assetGroupListingGroupFilter: isSet(object.assetGroupListingGroupFilter)
        ? AssetGroupListingGroupFilter.fromJSON(object.assetGroupListingGroupFilter)
        : undefined,
    };
  },

  toJSON(message: MutateAssetGroupListingGroupFilterResult): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.assetGroupListingGroupFilter !== undefined) {
      obj.assetGroupListingGroupFilter = AssetGroupListingGroupFilter.toJSON(message.assetGroupListingGroupFilter);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateAssetGroupListingGroupFilterResult>): MutateAssetGroupListingGroupFilterResult {
    return MutateAssetGroupListingGroupFilterResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateAssetGroupListingGroupFilterResult>): MutateAssetGroupListingGroupFilterResult {
    const message = createBaseMutateAssetGroupListingGroupFilterResult();
    message.resourceName = object.resourceName ?? "";
    message.assetGroupListingGroupFilter =
      (object.assetGroupListingGroupFilter !== undefined && object.assetGroupListingGroupFilter !== null)
        ? AssetGroupListingGroupFilter.fromPartial(object.assetGroupListingGroupFilter)
        : undefined;
    return message;
  },
};

/** Service to manage asset group listing group filter. */
export type AssetGroupListingGroupFilterServiceDefinition = typeof AssetGroupListingGroupFilterServiceDefinition;
export const AssetGroupListingGroupFilterServiceDefinition = {
  name: "AssetGroupListingGroupFilterService",
  fullName: "google.ads.googleads.v16.services.AssetGroupListingGroupFilterService",
  methods: {
    /**
     * Creates, updates or removes asset group listing group filters. Operation
     * statuses are returned.
     */
    mutateAssetGroupListingGroupFilters: {
      name: "MutateAssetGroupListingGroupFilters",
      requestType: MutateAssetGroupListingGroupFiltersRequest,
      requestStream: false,
      responseType: MutateAssetGroupListingGroupFiltersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              72,
              58,
              1,
              42,
              34,
              67,
              47,
              118,
              49,
              54,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              97,
              115,
              115,
              101,
              116,
              71,
              114,
              111,
              117,
              112,
              76,
              105,
              115,
              116,
              105,
              110,
              103,
              71,
              114,
              111,
              117,
              112,
              70,
              105,
              108,
              116,
              101,
              114,
              115,
              58,
              109,
              117,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AssetGroupListingGroupFilterServiceImplementation<CallContextExt = {}> {
  /**
   * Creates, updates or removes asset group listing group filters. Operation
   * statuses are returned.
   */
  mutateAssetGroupListingGroupFilters(
    request: MutateAssetGroupListingGroupFiltersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MutateAssetGroupListingGroupFiltersResponse>>;
}

export interface AssetGroupListingGroupFilterServiceClient<CallOptionsExt = {}> {
  /**
   * Creates, updates or removes asset group listing group filters. Operation
   * statuses are returned.
   */
  mutateAssetGroupListingGroupFilters(
    request: DeepPartial<MutateAssetGroupListingGroupFiltersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MutateAssetGroupListingGroupFiltersResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
