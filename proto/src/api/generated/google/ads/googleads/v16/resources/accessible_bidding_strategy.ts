// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/accessible_bidding_strategy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  BiddingStrategyTypeEnum_BiddingStrategyType,
  biddingStrategyTypeEnum_BiddingStrategyTypeFromJSON,
  biddingStrategyTypeEnum_BiddingStrategyTypeToJSON,
} from "../enums/bidding_strategy_type.js";
import {
  TargetImpressionShareLocationEnum_TargetImpressionShareLocation,
  targetImpressionShareLocationEnum_TargetImpressionShareLocationFromJSON,
  targetImpressionShareLocationEnum_TargetImpressionShareLocationToJSON,
} from "../enums/target_impression_share_location.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * Represents a view of BiddingStrategies owned by and shared with the customer.
 *
 * In contrast to BiddingStrategy, this resource includes strategies owned by
 * managers of the customer and shared with this customer - in addition to
 * strategies owned by this customer. This resource does not provide metrics and
 * only exposes a limited subset of the BiddingStrategy attributes.
 */
export interface AccessibleBiddingStrategy {
  /**
   * Output only. The resource name of the accessible bidding strategy.
   * AccessibleBiddingStrategy resource names have the form:
   *
   * `customers/{customer_id}/accessibleBiddingStrategies/{bidding_strategy_id}`
   */
  resourceName: string;
  /** Output only. The ID of the bidding strategy. */
  id: Long;
  /** Output only. The name of the bidding strategy. */
  name: string;
  /** Output only. The type of the bidding strategy. */
  type: BiddingStrategyTypeEnum_BiddingStrategyType;
  /** Output only. The ID of the Customer which owns the bidding strategy. */
  ownerCustomerId: Long;
  /**
   * Output only. descriptive_name of the Customer which owns the bidding
   * strategy.
   */
  ownerDescriptiveName: string;
  /**
   * Output only. An automated bidding strategy to help get the most
   * conversion value for your campaigns while spending your budget.
   */
  maximizeConversionValue?:
    | AccessibleBiddingStrategy_MaximizeConversionValue
    | undefined;
  /**
   * Output only. An automated bidding strategy to help get the most
   * conversions for your campaigns while spending your budget.
   */
  maximizeConversions?:
    | AccessibleBiddingStrategy_MaximizeConversions
    | undefined;
  /**
   * Output only. A bidding strategy that sets bids to help get as many
   * conversions as possible at the target cost-per-acquisition (CPA) you set.
   */
  targetCpa?:
    | AccessibleBiddingStrategy_TargetCpa
    | undefined;
  /**
   * Output only. A bidding strategy that automatically optimizes towards a
   * chosen percentage of impressions.
   */
  targetImpressionShare?:
    | AccessibleBiddingStrategy_TargetImpressionShare
    | undefined;
  /**
   * Output only. A bidding strategy that helps you maximize revenue while
   * averaging a specific target Return On Ad Spend (ROAS).
   */
  targetRoas?:
    | AccessibleBiddingStrategy_TargetRoas
    | undefined;
  /**
   * Output only. A bid strategy that sets your bids to help get as many
   * clicks as possible within your budget.
   */
  targetSpend?: AccessibleBiddingStrategy_TargetSpend | undefined;
}

/**
 * An automated bidding strategy to help get the most conversion value for
 * your campaigns while spending your budget.
 */
export interface AccessibleBiddingStrategy_MaximizeConversionValue {
  /**
   * Output only. The target return on ad spend (ROAS) option. If set, the bid
   * strategy will maximize revenue while averaging the target return on ad
   * spend. If the target ROAS is high, the bid strategy may not be able to
   * spend the full budget. If the target ROAS is not set, the bid strategy
   * will aim to achieve the highest possible ROAS for the budget.
   */
  targetRoas: number;
}

/**
 * An automated bidding strategy to help get the most conversions for your
 * campaigns while spending your budget.
 */
export interface AccessibleBiddingStrategy_MaximizeConversions {
  /**
   * Output only. The target cost per acquisition (CPA) option. This is the
   * average amount that you would like to spend per acquisition.
   */
  targetCpaMicros: Long;
}

/**
 * An automated bid strategy that sets bids to help get as many conversions as
 * possible at the target cost-per-acquisition (CPA) you set.
 */
export interface AccessibleBiddingStrategy_TargetCpa {
  /**
   * Output only. Average CPA target.
   * This target should be greater than or equal to minimum billable unit
   * based on the currency for the account.
   */
  targetCpaMicros?: Long | undefined;
}

/**
 * An automated bidding strategy that sets bids so that a certain percentage
 * of search ads are shown at the top of the first page (or other targeted
 * location).
 */
export interface AccessibleBiddingStrategy_TargetImpressionShare {
  /** Output only. The targeted location on the search results page. */
  location: TargetImpressionShareLocationEnum_TargetImpressionShareLocation;
  /**
   * The chosen fraction of ads to be shown in the targeted location in
   * micros. For example, 1% equals 10,000.
   */
  locationFractionMicros?:
    | Long
    | undefined;
  /**
   * Output only. The highest CPC bid the automated bidding system is
   * permitted to specify. This is a required field entered by the advertiser
   * that sets the ceiling and specified in local micros.
   */
  cpcBidCeilingMicros?: Long | undefined;
}

/**
 * An automated bidding strategy that helps you maximize revenue while
 * averaging a specific target return on ad spend (ROAS).
 */
export interface AccessibleBiddingStrategy_TargetRoas {
  /**
   * Output only. The chosen revenue (based on conversion data) per unit of
   * spend.
   */
  targetRoas?: number | undefined;
}

/**
 * An automated bid strategy that sets your bids to help get as many clicks
 * as possible within your budget.
 */
export interface AccessibleBiddingStrategy_TargetSpend {
  /**
   * Output only. The spend target under which to maximize clicks.
   * A TargetSpend bidder will attempt to spend the smaller of this value
   * or the natural throttling spend amount.
   * If not specified, the budget is used as the spend target.
   * This field is deprecated and should no longer be used. See
   * https://ads-developers.googleblog.com/2020/05/reminder-about-sunset-creation-of.html
   * for details.
   *
   * @deprecated
   */
  targetSpendMicros?:
    | Long
    | undefined;
  /**
   * Output only. Maximum bid limit that can be set by the bid strategy.
   * The limit applies to all keywords managed by the strategy.
   */
  cpcBidCeilingMicros?: Long | undefined;
}

function createBaseAccessibleBiddingStrategy(): AccessibleBiddingStrategy {
  return {
    resourceName: "",
    id: Long.ZERO,
    name: "",
    type: 0,
    ownerCustomerId: Long.ZERO,
    ownerDescriptiveName: "",
    maximizeConversionValue: undefined,
    maximizeConversions: undefined,
    targetCpa: undefined,
    targetImpressionShare: undefined,
    targetRoas: undefined,
    targetSpend: undefined,
  };
}

export const AccessibleBiddingStrategy: MessageFns<AccessibleBiddingStrategy> = {
  encode(message: AccessibleBiddingStrategy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (!message.id.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.id.toString());
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    if (!message.ownerCustomerId.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.ownerCustomerId.toString());
    }
    if (message.ownerDescriptiveName !== "") {
      writer.uint32(50).string(message.ownerDescriptiveName);
    }
    if (message.maximizeConversionValue !== undefined) {
      AccessibleBiddingStrategy_MaximizeConversionValue.encode(
        message.maximizeConversionValue,
        writer.uint32(58).fork(),
      ).join();
    }
    if (message.maximizeConversions !== undefined) {
      AccessibleBiddingStrategy_MaximizeConversions.encode(message.maximizeConversions, writer.uint32(66).fork())
        .join();
    }
    if (message.targetCpa !== undefined) {
      AccessibleBiddingStrategy_TargetCpa.encode(message.targetCpa, writer.uint32(74).fork()).join();
    }
    if (message.targetImpressionShare !== undefined) {
      AccessibleBiddingStrategy_TargetImpressionShare.encode(message.targetImpressionShare, writer.uint32(82).fork())
        .join();
    }
    if (message.targetRoas !== undefined) {
      AccessibleBiddingStrategy_TargetRoas.encode(message.targetRoas, writer.uint32(90).fork()).join();
    }
    if (message.targetSpend !== undefined) {
      AccessibleBiddingStrategy_TargetSpend.encode(message.targetSpend, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessibleBiddingStrategy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessibleBiddingStrategy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.ownerCustomerId = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.ownerDescriptiveName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.maximizeConversionValue = AccessibleBiddingStrategy_MaximizeConversionValue.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.maximizeConversions = AccessibleBiddingStrategy_MaximizeConversions.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.targetCpa = AccessibleBiddingStrategy_TargetCpa.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.targetImpressionShare = AccessibleBiddingStrategy_TargetImpressionShare.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.targetRoas = AccessibleBiddingStrategy_TargetRoas.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.targetSpend = AccessibleBiddingStrategy_TargetSpend.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessibleBiddingStrategy {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.ZERO,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? biddingStrategyTypeEnum_BiddingStrategyTypeFromJSON(object.type) : 0,
      ownerCustomerId: isSet(object.ownerCustomerId) ? Long.fromValue(object.ownerCustomerId) : Long.ZERO,
      ownerDescriptiveName: isSet(object.ownerDescriptiveName) ? globalThis.String(object.ownerDescriptiveName) : "",
      maximizeConversionValue: isSet(object.maximizeConversionValue)
        ? AccessibleBiddingStrategy_MaximizeConversionValue.fromJSON(object.maximizeConversionValue)
        : undefined,
      maximizeConversions: isSet(object.maximizeConversions)
        ? AccessibleBiddingStrategy_MaximizeConversions.fromJSON(object.maximizeConversions)
        : undefined,
      targetCpa: isSet(object.targetCpa) ? AccessibleBiddingStrategy_TargetCpa.fromJSON(object.targetCpa) : undefined,
      targetImpressionShare: isSet(object.targetImpressionShare)
        ? AccessibleBiddingStrategy_TargetImpressionShare.fromJSON(object.targetImpressionShare)
        : undefined,
      targetRoas: isSet(object.targetRoas)
        ? AccessibleBiddingStrategy_TargetRoas.fromJSON(object.targetRoas)
        : undefined,
      targetSpend: isSet(object.targetSpend)
        ? AccessibleBiddingStrategy_TargetSpend.fromJSON(object.targetSpend)
        : undefined,
    };
  },

  toJSON(message: AccessibleBiddingStrategy): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (!message.id.equals(Long.ZERO)) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = biddingStrategyTypeEnum_BiddingStrategyTypeToJSON(message.type);
    }
    if (!message.ownerCustomerId.equals(Long.ZERO)) {
      obj.ownerCustomerId = (message.ownerCustomerId || Long.ZERO).toString();
    }
    if (message.ownerDescriptiveName !== "") {
      obj.ownerDescriptiveName = message.ownerDescriptiveName;
    }
    if (message.maximizeConversionValue !== undefined) {
      obj.maximizeConversionValue = AccessibleBiddingStrategy_MaximizeConversionValue.toJSON(
        message.maximizeConversionValue,
      );
    }
    if (message.maximizeConversions !== undefined) {
      obj.maximizeConversions = AccessibleBiddingStrategy_MaximizeConversions.toJSON(message.maximizeConversions);
    }
    if (message.targetCpa !== undefined) {
      obj.targetCpa = AccessibleBiddingStrategy_TargetCpa.toJSON(message.targetCpa);
    }
    if (message.targetImpressionShare !== undefined) {
      obj.targetImpressionShare = AccessibleBiddingStrategy_TargetImpressionShare.toJSON(message.targetImpressionShare);
    }
    if (message.targetRoas !== undefined) {
      obj.targetRoas = AccessibleBiddingStrategy_TargetRoas.toJSON(message.targetRoas);
    }
    if (message.targetSpend !== undefined) {
      obj.targetSpend = AccessibleBiddingStrategy_TargetSpend.toJSON(message.targetSpend);
    }
    return obj;
  },

  create(base?: DeepPartial<AccessibleBiddingStrategy>): AccessibleBiddingStrategy {
    return AccessibleBiddingStrategy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccessibleBiddingStrategy>): AccessibleBiddingStrategy {
    const message = createBaseAccessibleBiddingStrategy();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.ZERO;
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    message.ownerCustomerId = (object.ownerCustomerId !== undefined && object.ownerCustomerId !== null)
      ? Long.fromValue(object.ownerCustomerId)
      : Long.ZERO;
    message.ownerDescriptiveName = object.ownerDescriptiveName ?? "";
    message.maximizeConversionValue =
      (object.maximizeConversionValue !== undefined && object.maximizeConversionValue !== null)
        ? AccessibleBiddingStrategy_MaximizeConversionValue.fromPartial(object.maximizeConversionValue)
        : undefined;
    message.maximizeConversions = (object.maximizeConversions !== undefined && object.maximizeConversions !== null)
      ? AccessibleBiddingStrategy_MaximizeConversions.fromPartial(object.maximizeConversions)
      : undefined;
    message.targetCpa = (object.targetCpa !== undefined && object.targetCpa !== null)
      ? AccessibleBiddingStrategy_TargetCpa.fromPartial(object.targetCpa)
      : undefined;
    message.targetImpressionShare =
      (object.targetImpressionShare !== undefined && object.targetImpressionShare !== null)
        ? AccessibleBiddingStrategy_TargetImpressionShare.fromPartial(object.targetImpressionShare)
        : undefined;
    message.targetRoas = (object.targetRoas !== undefined && object.targetRoas !== null)
      ? AccessibleBiddingStrategy_TargetRoas.fromPartial(object.targetRoas)
      : undefined;
    message.targetSpend = (object.targetSpend !== undefined && object.targetSpend !== null)
      ? AccessibleBiddingStrategy_TargetSpend.fromPartial(object.targetSpend)
      : undefined;
    return message;
  },
};

function createBaseAccessibleBiddingStrategy_MaximizeConversionValue(): AccessibleBiddingStrategy_MaximizeConversionValue {
  return { targetRoas: 0 };
}

export const AccessibleBiddingStrategy_MaximizeConversionValue: MessageFns<
  AccessibleBiddingStrategy_MaximizeConversionValue
> = {
  encode(
    message: AccessibleBiddingStrategy_MaximizeConversionValue,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.targetRoas !== 0) {
      writer.uint32(9).double(message.targetRoas);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessibleBiddingStrategy_MaximizeConversionValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessibleBiddingStrategy_MaximizeConversionValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.targetRoas = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessibleBiddingStrategy_MaximizeConversionValue {
    return { targetRoas: isSet(object.targetRoas) ? globalThis.Number(object.targetRoas) : 0 };
  },

  toJSON(message: AccessibleBiddingStrategy_MaximizeConversionValue): unknown {
    const obj: any = {};
    if (message.targetRoas !== 0) {
      obj.targetRoas = message.targetRoas;
    }
    return obj;
  },

  create(
    base?: DeepPartial<AccessibleBiddingStrategy_MaximizeConversionValue>,
  ): AccessibleBiddingStrategy_MaximizeConversionValue {
    return AccessibleBiddingStrategy_MaximizeConversionValue.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AccessibleBiddingStrategy_MaximizeConversionValue>,
  ): AccessibleBiddingStrategy_MaximizeConversionValue {
    const message = createBaseAccessibleBiddingStrategy_MaximizeConversionValue();
    message.targetRoas = object.targetRoas ?? 0;
    return message;
  },
};

function createBaseAccessibleBiddingStrategy_MaximizeConversions(): AccessibleBiddingStrategy_MaximizeConversions {
  return { targetCpaMicros: Long.ZERO };
}

export const AccessibleBiddingStrategy_MaximizeConversions: MessageFns<AccessibleBiddingStrategy_MaximizeConversions> =
  {
    encode(
      message: AccessibleBiddingStrategy_MaximizeConversions,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (!message.targetCpaMicros.equals(Long.ZERO)) {
        writer.uint32(16).int64(message.targetCpaMicros.toString());
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): AccessibleBiddingStrategy_MaximizeConversions {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseAccessibleBiddingStrategy_MaximizeConversions();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 2:
            if (tag !== 16) {
              break;
            }

            message.targetCpaMicros = Long.fromString(reader.int64().toString());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): AccessibleBiddingStrategy_MaximizeConversions {
      return { targetCpaMicros: isSet(object.targetCpaMicros) ? Long.fromValue(object.targetCpaMicros) : Long.ZERO };
    },

    toJSON(message: AccessibleBiddingStrategy_MaximizeConversions): unknown {
      const obj: any = {};
      if (!message.targetCpaMicros.equals(Long.ZERO)) {
        obj.targetCpaMicros = (message.targetCpaMicros || Long.ZERO).toString();
      }
      return obj;
    },

    create(
      base?: DeepPartial<AccessibleBiddingStrategy_MaximizeConversions>,
    ): AccessibleBiddingStrategy_MaximizeConversions {
      return AccessibleBiddingStrategy_MaximizeConversions.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<AccessibleBiddingStrategy_MaximizeConversions>,
    ): AccessibleBiddingStrategy_MaximizeConversions {
      const message = createBaseAccessibleBiddingStrategy_MaximizeConversions();
      message.targetCpaMicros = (object.targetCpaMicros !== undefined && object.targetCpaMicros !== null)
        ? Long.fromValue(object.targetCpaMicros)
        : Long.ZERO;
      return message;
    },
  };

function createBaseAccessibleBiddingStrategy_TargetCpa(): AccessibleBiddingStrategy_TargetCpa {
  return { targetCpaMicros: undefined };
}

export const AccessibleBiddingStrategy_TargetCpa: MessageFns<AccessibleBiddingStrategy_TargetCpa> = {
  encode(message: AccessibleBiddingStrategy_TargetCpa, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetCpaMicros !== undefined) {
      writer.uint32(8).int64(message.targetCpaMicros.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessibleBiddingStrategy_TargetCpa {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessibleBiddingStrategy_TargetCpa();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.targetCpaMicros = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessibleBiddingStrategy_TargetCpa {
    return { targetCpaMicros: isSet(object.targetCpaMicros) ? Long.fromValue(object.targetCpaMicros) : undefined };
  },

  toJSON(message: AccessibleBiddingStrategy_TargetCpa): unknown {
    const obj: any = {};
    if (message.targetCpaMicros !== undefined) {
      obj.targetCpaMicros = (message.targetCpaMicros || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<AccessibleBiddingStrategy_TargetCpa>): AccessibleBiddingStrategy_TargetCpa {
    return AccessibleBiddingStrategy_TargetCpa.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccessibleBiddingStrategy_TargetCpa>): AccessibleBiddingStrategy_TargetCpa {
    const message = createBaseAccessibleBiddingStrategy_TargetCpa();
    message.targetCpaMicros = (object.targetCpaMicros !== undefined && object.targetCpaMicros !== null)
      ? Long.fromValue(object.targetCpaMicros)
      : undefined;
    return message;
  },
};

function createBaseAccessibleBiddingStrategy_TargetImpressionShare(): AccessibleBiddingStrategy_TargetImpressionShare {
  return { location: 0, locationFractionMicros: undefined, cpcBidCeilingMicros: undefined };
}

export const AccessibleBiddingStrategy_TargetImpressionShare: MessageFns<
  AccessibleBiddingStrategy_TargetImpressionShare
> = {
  encode(
    message: AccessibleBiddingStrategy_TargetImpressionShare,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.location !== 0) {
      writer.uint32(8).int32(message.location);
    }
    if (message.locationFractionMicros !== undefined) {
      writer.uint32(16).int64(message.locationFractionMicros.toString());
    }
    if (message.cpcBidCeilingMicros !== undefined) {
      writer.uint32(24).int64(message.cpcBidCeilingMicros.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessibleBiddingStrategy_TargetImpressionShare {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessibleBiddingStrategy_TargetImpressionShare();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.location = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.locationFractionMicros = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.cpcBidCeilingMicros = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessibleBiddingStrategy_TargetImpressionShare {
    return {
      location: isSet(object.location)
        ? targetImpressionShareLocationEnum_TargetImpressionShareLocationFromJSON(object.location)
        : 0,
      locationFractionMicros: isSet(object.locationFractionMicros)
        ? Long.fromValue(object.locationFractionMicros)
        : undefined,
      cpcBidCeilingMicros: isSet(object.cpcBidCeilingMicros) ? Long.fromValue(object.cpcBidCeilingMicros) : undefined,
    };
  },

  toJSON(message: AccessibleBiddingStrategy_TargetImpressionShare): unknown {
    const obj: any = {};
    if (message.location !== 0) {
      obj.location = targetImpressionShareLocationEnum_TargetImpressionShareLocationToJSON(message.location);
    }
    if (message.locationFractionMicros !== undefined) {
      obj.locationFractionMicros = (message.locationFractionMicros || Long.ZERO).toString();
    }
    if (message.cpcBidCeilingMicros !== undefined) {
      obj.cpcBidCeilingMicros = (message.cpcBidCeilingMicros || Long.ZERO).toString();
    }
    return obj;
  },

  create(
    base?: DeepPartial<AccessibleBiddingStrategy_TargetImpressionShare>,
  ): AccessibleBiddingStrategy_TargetImpressionShare {
    return AccessibleBiddingStrategy_TargetImpressionShare.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AccessibleBiddingStrategy_TargetImpressionShare>,
  ): AccessibleBiddingStrategy_TargetImpressionShare {
    const message = createBaseAccessibleBiddingStrategy_TargetImpressionShare();
    message.location = object.location ?? 0;
    message.locationFractionMicros =
      (object.locationFractionMicros !== undefined && object.locationFractionMicros !== null)
        ? Long.fromValue(object.locationFractionMicros)
        : undefined;
    message.cpcBidCeilingMicros = (object.cpcBidCeilingMicros !== undefined && object.cpcBidCeilingMicros !== null)
      ? Long.fromValue(object.cpcBidCeilingMicros)
      : undefined;
    return message;
  },
};

function createBaseAccessibleBiddingStrategy_TargetRoas(): AccessibleBiddingStrategy_TargetRoas {
  return { targetRoas: undefined };
}

export const AccessibleBiddingStrategy_TargetRoas: MessageFns<AccessibleBiddingStrategy_TargetRoas> = {
  encode(message: AccessibleBiddingStrategy_TargetRoas, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetRoas !== undefined) {
      writer.uint32(9).double(message.targetRoas);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessibleBiddingStrategy_TargetRoas {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessibleBiddingStrategy_TargetRoas();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.targetRoas = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessibleBiddingStrategy_TargetRoas {
    return { targetRoas: isSet(object.targetRoas) ? globalThis.Number(object.targetRoas) : undefined };
  },

  toJSON(message: AccessibleBiddingStrategy_TargetRoas): unknown {
    const obj: any = {};
    if (message.targetRoas !== undefined) {
      obj.targetRoas = message.targetRoas;
    }
    return obj;
  },

  create(base?: DeepPartial<AccessibleBiddingStrategy_TargetRoas>): AccessibleBiddingStrategy_TargetRoas {
    return AccessibleBiddingStrategy_TargetRoas.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccessibleBiddingStrategy_TargetRoas>): AccessibleBiddingStrategy_TargetRoas {
    const message = createBaseAccessibleBiddingStrategy_TargetRoas();
    message.targetRoas = object.targetRoas ?? undefined;
    return message;
  },
};

function createBaseAccessibleBiddingStrategy_TargetSpend(): AccessibleBiddingStrategy_TargetSpend {
  return { targetSpendMicros: undefined, cpcBidCeilingMicros: undefined };
}

export const AccessibleBiddingStrategy_TargetSpend: MessageFns<AccessibleBiddingStrategy_TargetSpend> = {
  encode(message: AccessibleBiddingStrategy_TargetSpend, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetSpendMicros !== undefined) {
      writer.uint32(8).int64(message.targetSpendMicros.toString());
    }
    if (message.cpcBidCeilingMicros !== undefined) {
      writer.uint32(16).int64(message.cpcBidCeilingMicros.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessibleBiddingStrategy_TargetSpend {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessibleBiddingStrategy_TargetSpend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.targetSpendMicros = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.cpcBidCeilingMicros = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessibleBiddingStrategy_TargetSpend {
    return {
      targetSpendMicros: isSet(object.targetSpendMicros) ? Long.fromValue(object.targetSpendMicros) : undefined,
      cpcBidCeilingMicros: isSet(object.cpcBidCeilingMicros) ? Long.fromValue(object.cpcBidCeilingMicros) : undefined,
    };
  },

  toJSON(message: AccessibleBiddingStrategy_TargetSpend): unknown {
    const obj: any = {};
    if (message.targetSpendMicros !== undefined) {
      obj.targetSpendMicros = (message.targetSpendMicros || Long.ZERO).toString();
    }
    if (message.cpcBidCeilingMicros !== undefined) {
      obj.cpcBidCeilingMicros = (message.cpcBidCeilingMicros || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<AccessibleBiddingStrategy_TargetSpend>): AccessibleBiddingStrategy_TargetSpend {
    return AccessibleBiddingStrategy_TargetSpend.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccessibleBiddingStrategy_TargetSpend>): AccessibleBiddingStrategy_TargetSpend {
    const message = createBaseAccessibleBiddingStrategy_TargetSpend();
    message.targetSpendMicros = (object.targetSpendMicros !== undefined && object.targetSpendMicros !== null)
      ? Long.fromValue(object.targetSpendMicros)
      : undefined;
    message.cpcBidCeilingMicros = (object.cpcBidCeilingMicros !== undefined && object.cpcBidCeilingMicros !== null)
      ? Long.fromValue(object.cpcBidCeilingMicros)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
