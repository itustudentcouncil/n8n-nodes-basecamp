// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/services/customer_client_link_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { CustomerClientLink } from "../resources/customer_client_link.js";

export const protobufPackage = "google.ads.googleads.v17.services";

/**
 * Request message for
 * [CustomerClientLinkService.MutateCustomerClientLink][google.ads.googleads.v17.services.CustomerClientLinkService.MutateCustomerClientLink].
 */
export interface MutateCustomerClientLinkRequest {
  /** Required. The ID of the customer whose customer link are being modified. */
  customerId: string;
  /** Required. The operation to perform on the individual CustomerClientLink. */
  operation:
    | CustomerClientLinkOperation
    | undefined;
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
}

/** A single operation (create, update) on a CustomerClientLink. */
export interface CustomerClientLinkOperation {
  /** FieldMask that determines which resource fields are modified in an update. */
  updateMask:
    | string[]
    | undefined;
  /** Create operation: No resource name is expected for the new link. */
  create?:
    | CustomerClientLink
    | undefined;
  /** Update operation: The link is expected to have a valid resource name. */
  update?: CustomerClientLink | undefined;
}

/** Response message for a CustomerClientLink mutate. */
export interface MutateCustomerClientLinkResponse {
  /** A result that identifies the resource affected by the mutate request. */
  result: MutateCustomerClientLinkResult | undefined;
}

/** The result for a single customer client link mutate. */
export interface MutateCustomerClientLinkResult {
  /** Returned for successful operations. */
  resourceName: string;
}

function createBaseMutateCustomerClientLinkRequest(): MutateCustomerClientLinkRequest {
  return { customerId: "", operation: undefined, validateOnly: false };
}

export const MutateCustomerClientLinkRequest: MessageFns<MutateCustomerClientLinkRequest> = {
  encode(message: MutateCustomerClientLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    if (message.operation !== undefined) {
      CustomerClientLinkOperation.encode(message.operation, writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCustomerClientLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCustomerClientLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operation = CustomerClientLinkOperation.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCustomerClientLinkRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      operation: isSet(object.operation) ? CustomerClientLinkOperation.fromJSON(object.operation) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: MutateCustomerClientLinkRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.operation !== undefined) {
      obj.operation = CustomerClientLinkOperation.toJSON(message.operation);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCustomerClientLinkRequest>): MutateCustomerClientLinkRequest {
    return MutateCustomerClientLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCustomerClientLinkRequest>): MutateCustomerClientLinkRequest {
    const message = createBaseMutateCustomerClientLinkRequest();
    message.customerId = object.customerId ?? "";
    message.operation = (object.operation !== undefined && object.operation !== null)
      ? CustomerClientLinkOperation.fromPartial(object.operation)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseCustomerClientLinkOperation(): CustomerClientLinkOperation {
  return { updateMask: undefined, create: undefined, update: undefined };
}

export const CustomerClientLinkOperation: MessageFns<CustomerClientLinkOperation> = {
  encode(message: CustomerClientLinkOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    if (message.create !== undefined) {
      CustomerClientLink.encode(message.create, writer.uint32(10).fork()).join();
    }
    if (message.update !== undefined) {
      CustomerClientLink.encode(message.update, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerClientLinkOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerClientLinkOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.create = CustomerClientLink.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.update = CustomerClientLink.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerClientLinkOperation {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      create: isSet(object.create) ? CustomerClientLink.fromJSON(object.create) : undefined,
      update: isSet(object.update) ? CustomerClientLink.fromJSON(object.update) : undefined,
    };
  },

  toJSON(message: CustomerClientLinkOperation): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.create !== undefined) {
      obj.create = CustomerClientLink.toJSON(message.create);
    }
    if (message.update !== undefined) {
      obj.update = CustomerClientLink.toJSON(message.update);
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerClientLinkOperation>): CustomerClientLinkOperation {
    return CustomerClientLinkOperation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerClientLinkOperation>): CustomerClientLinkOperation {
    const message = createBaseCustomerClientLinkOperation();
    message.updateMask = object.updateMask ?? undefined;
    message.create = (object.create !== undefined && object.create !== null)
      ? CustomerClientLink.fromPartial(object.create)
      : undefined;
    message.update = (object.update !== undefined && object.update !== null)
      ? CustomerClientLink.fromPartial(object.update)
      : undefined;
    return message;
  },
};

function createBaseMutateCustomerClientLinkResponse(): MutateCustomerClientLinkResponse {
  return { result: undefined };
}

export const MutateCustomerClientLinkResponse: MessageFns<MutateCustomerClientLinkResponse> = {
  encode(message: MutateCustomerClientLinkResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== undefined) {
      MutateCustomerClientLinkResult.encode(message.result, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCustomerClientLinkResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCustomerClientLinkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result = MutateCustomerClientLinkResult.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCustomerClientLinkResponse {
    return { result: isSet(object.result) ? MutateCustomerClientLinkResult.fromJSON(object.result) : undefined };
  },

  toJSON(message: MutateCustomerClientLinkResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = MutateCustomerClientLinkResult.toJSON(message.result);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCustomerClientLinkResponse>): MutateCustomerClientLinkResponse {
    return MutateCustomerClientLinkResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCustomerClientLinkResponse>): MutateCustomerClientLinkResponse {
    const message = createBaseMutateCustomerClientLinkResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? MutateCustomerClientLinkResult.fromPartial(object.result)
      : undefined;
    return message;
  },
};

function createBaseMutateCustomerClientLinkResult(): MutateCustomerClientLinkResult {
  return { resourceName: "" };
}

export const MutateCustomerClientLinkResult: MessageFns<MutateCustomerClientLinkResult> = {
  encode(message: MutateCustomerClientLinkResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCustomerClientLinkResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCustomerClientLinkResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCustomerClientLinkResult {
    return { resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "" };
  },

  toJSON(message: MutateCustomerClientLinkResult): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCustomerClientLinkResult>): MutateCustomerClientLinkResult {
    return MutateCustomerClientLinkResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCustomerClientLinkResult>): MutateCustomerClientLinkResult {
    const message = createBaseMutateCustomerClientLinkResult();
    message.resourceName = object.resourceName ?? "";
    return message;
  },
};

/** Service to manage customer client links. */
export type CustomerClientLinkServiceDefinition = typeof CustomerClientLinkServiceDefinition;
export const CustomerClientLinkServiceDefinition = {
  name: "CustomerClientLinkService",
  fullName: "google.ads.googleads.v17.services.CustomerClientLinkService",
  methods: {
    /**
     * Creates or updates a customer client link. Operation statuses are returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [FieldMaskError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [ManagerLinkError]()
     *   [MutateError]()
     *   [NewResourceCreationError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    mutateCustomerClientLink: {
      name: "MutateCustomerClientLink",
      requestType: MutateCustomerClientLinkRequest,
      requestStream: false,
      responseType: MutateCustomerClientLinkResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              55,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              67,
              108,
              105,
              101,
              110,
              116,
              76,
              105,
              110,
              107,
              115,
              58,
              109,
              117,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CustomerClientLinkServiceImplementation<CallContextExt = {}> {
  /**
   * Creates or updates a customer client link. Operation statuses are returned.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [DatabaseError]()
   *   [FieldError]()
   *   [FieldMaskError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [ManagerLinkError]()
   *   [MutateError]()
   *   [NewResourceCreationError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  mutateCustomerClientLink(
    request: MutateCustomerClientLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MutateCustomerClientLinkResponse>>;
}

export interface CustomerClientLinkServiceClient<CallOptionsExt = {}> {
  /**
   * Creates or updates a customer client link. Operation statuses are returned.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [DatabaseError]()
   *   [FieldError]()
   *   [FieldMaskError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [ManagerLinkError]()
   *   [MutateError]()
   *   [NewResourceCreationError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  mutateCustomerClientLink(
    request: DeepPartial<MutateCustomerClientLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MutateCustomerClientLinkResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
