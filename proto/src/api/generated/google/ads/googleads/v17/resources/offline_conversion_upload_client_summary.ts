// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/offline_conversion_upload_client_summary.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus,
  offlineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatusFromJSON,
  offlineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatusToJSON,
} from "../enums/offline_conversion_diagnostic_status_enum.js";
import {
  OfflineEventUploadClientEnum_OfflineEventUploadClient,
  offlineEventUploadClientEnum_OfflineEventUploadClientFromJSON,
  offlineEventUploadClientEnum_OfflineEventUploadClientToJSON,
} from "../enums/offline_event_upload_client_enum.js";
import {
  CollectionSizeErrorEnum_CollectionSizeError,
  collectionSizeErrorEnum_CollectionSizeErrorFromJSON,
  collectionSizeErrorEnum_CollectionSizeErrorToJSON,
} from "../errors/collection_size_error.js";
import {
  ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError,
  conversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadErrorFromJSON,
  conversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadErrorToJSON,
} from "../errors/conversion_adjustment_upload_error.js";
import {
  ConversionUploadErrorEnum_ConversionUploadError,
  conversionUploadErrorEnum_ConversionUploadErrorFromJSON,
  conversionUploadErrorEnum_ConversionUploadErrorToJSON,
} from "../errors/conversion_upload_error.js";
import {
  DateErrorEnum_DateError,
  dateErrorEnum_DateErrorFromJSON,
  dateErrorEnum_DateErrorToJSON,
} from "../errors/date_error.js";
import {
  DistinctErrorEnum_DistinctError,
  distinctErrorEnum_DistinctErrorFromJSON,
  distinctErrorEnum_DistinctErrorToJSON,
} from "../errors/distinct_error.js";
import {
  FieldErrorEnum_FieldError,
  fieldErrorEnum_FieldErrorFromJSON,
  fieldErrorEnum_FieldErrorToJSON,
} from "../errors/field_error.js";
import {
  MutateErrorEnum_MutateError,
  mutateErrorEnum_MutateErrorFromJSON,
  mutateErrorEnum_MutateErrorToJSON,
} from "../errors/mutate_error.js";
import {
  NotAllowlistedErrorEnum_NotAllowlistedError,
  notAllowlistedErrorEnum_NotAllowlistedErrorFromJSON,
  notAllowlistedErrorEnum_NotAllowlistedErrorToJSON,
} from "../errors/not_allowlisted_error.js";
import {
  StringFormatErrorEnum_StringFormatError,
  stringFormatErrorEnum_StringFormatErrorFromJSON,
  stringFormatErrorEnum_StringFormatErrorToJSON,
} from "../errors/string_format_error.js";
import {
  StringLengthErrorEnum_StringLengthError,
  stringLengthErrorEnum_StringLengthErrorFromJSON,
  stringLengthErrorEnum_StringLengthErrorToJSON,
} from "../errors/string_length_error.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/** Offline conversion upload summary at customer level. */
export interface OfflineConversionUploadClientSummary {
  /**
   * Output only. The resource name of the offline conversion upload summary at
   * customer level. Offline conversion upload client summary resource names
   * have the form:
   *
   * `customers/{customer_id}/offlineConversionUploadClientSummaries/{client}`
   */
  resourceName: string;
  /** Output only. Client type of the upload event. */
  client: OfflineEventUploadClientEnum_OfflineEventUploadClient;
  /**
   * Output only. Overall status for offline conversion client summary. Status
   * is generated from most recent calendar day with upload stats.
   */
  status: OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus;
  /** Output only. Total count of uploaded events. */
  totalEventCount: Long;
  /** Output only. Total count of successful uploaded events. */
  successfulEventCount: Long;
  /** Output only. Successful rate. */
  successRate: number;
  /** Output only. Total count of pending uploaded events. */
  pendingEventCount: Long;
  /** Output only. The ratio of total pending events to total events. */
  pendingRate: number;
  /**
   * Output only. Date for the latest upload batch. The format is "yyyy-mm-dd
   * hh:mm:ss", and it's in the time zone of the Google Ads account.
   */
  lastUploadDateTime: string;
  /** Output only. Summary of history stats by last N days. */
  dailySummaries: OfflineConversionSummary[];
  /** Output only. Summary of history stats by last N jobs. */
  jobSummaries: OfflineConversionSummary[];
  /**
   * Output only. Details for each error code. Alerts are generated from most
   * recent calendar day with upload stats.
   */
  alerts: OfflineConversionAlert[];
}

/** Historical upload summary, grouped by upload date or job. */
export interface OfflineConversionSummary {
  /** Output only. Total count of successful event. */
  successfulCount: Long;
  /** Output only. Total count of failed event. */
  failedCount: Long;
  /** Output only. Total count of pending uploaded event. */
  pendingCount: Long;
  /** Output only. Dimension key for last N jobs. */
  jobId?:
    | Long
    | undefined;
  /** Output only. Dimension key for last N days. */
  uploadDate?: string | undefined;
}

/** Alert for offline conversion client summary. */
export interface OfflineConversionAlert {
  /** Output only. Error for offline conversion client alert. */
  error:
    | OfflineConversionError
    | undefined;
  /**
   * Output only. Percentage of the error, the range of this field should be
   * [0, 1.0].
   */
  errorPercentage: number;
}

/** Possible errors for offline conversion client summary. */
export interface OfflineConversionError {
  /** Output only. Collection size error. */
  collectionSizeError?:
    | CollectionSizeErrorEnum_CollectionSizeError
    | undefined;
  /** Output only. Conversion adjustment upload error. */
  conversionAdjustmentUploadError?:
    | ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError
    | undefined;
  /** Output only. Conversion upload error. */
  conversionUploadError?:
    | ConversionUploadErrorEnum_ConversionUploadError
    | undefined;
  /** Output only. Date error. */
  dateError?:
    | DateErrorEnum_DateError
    | undefined;
  /** Output only. Distinct error. */
  distinctError?:
    | DistinctErrorEnum_DistinctError
    | undefined;
  /** Output only. Field error. */
  fieldError?:
    | FieldErrorEnum_FieldError
    | undefined;
  /** Output only. Mutate error. */
  mutateError?:
    | MutateErrorEnum_MutateError
    | undefined;
  /** Output only. Not allowlisted error. */
  notAllowlistedError?:
    | NotAllowlistedErrorEnum_NotAllowlistedError
    | undefined;
  /** Output only. String format error. */
  stringFormatError?:
    | StringFormatErrorEnum_StringFormatError
    | undefined;
  /** Output only. String length error. */
  stringLengthError?: StringLengthErrorEnum_StringLengthError | undefined;
}

function createBaseOfflineConversionUploadClientSummary(): OfflineConversionUploadClientSummary {
  return {
    resourceName: "",
    client: 0,
    status: 0,
    totalEventCount: Long.ZERO,
    successfulEventCount: Long.ZERO,
    successRate: 0,
    pendingEventCount: Long.ZERO,
    pendingRate: 0,
    lastUploadDateTime: "",
    dailySummaries: [],
    jobSummaries: [],
    alerts: [],
  };
}

export const OfflineConversionUploadClientSummary: MessageFns<OfflineConversionUploadClientSummary> = {
  encode(message: OfflineConversionUploadClientSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.client !== 0) {
      writer.uint32(16).int32(message.client);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (!message.totalEventCount.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.totalEventCount.toString());
    }
    if (!message.successfulEventCount.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.successfulEventCount.toString());
    }
    if (message.successRate !== 0) {
      writer.uint32(49).double(message.successRate);
    }
    if (!message.pendingEventCount.equals(Long.ZERO)) {
      writer.uint32(88).int64(message.pendingEventCount.toString());
    }
    if (message.pendingRate !== 0) {
      writer.uint32(97).double(message.pendingRate);
    }
    if (message.lastUploadDateTime !== "") {
      writer.uint32(58).string(message.lastUploadDateTime);
    }
    for (const v of message.dailySummaries) {
      OfflineConversionSummary.encode(v!, writer.uint32(66).fork()).join();
    }
    for (const v of message.jobSummaries) {
      OfflineConversionSummary.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.alerts) {
      OfflineConversionAlert.encode(v!, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OfflineConversionUploadClientSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOfflineConversionUploadClientSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.client = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.totalEventCount = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.successfulEventCount = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.successRate = reader.double();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.pendingEventCount = Long.fromString(reader.int64().toString());
          continue;
        case 12:
          if (tag !== 97) {
            break;
          }

          message.pendingRate = reader.double();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.lastUploadDateTime = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.dailySummaries.push(OfflineConversionSummary.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.jobSummaries.push(OfflineConversionSummary.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.alerts.push(OfflineConversionAlert.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OfflineConversionUploadClientSummary {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      client: isSet(object.client) ? offlineEventUploadClientEnum_OfflineEventUploadClientFromJSON(object.client) : 0,
      status: isSet(object.status)
        ? offlineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatusFromJSON(object.status)
        : 0,
      totalEventCount: isSet(object.totalEventCount) ? Long.fromValue(object.totalEventCount) : Long.ZERO,
      successfulEventCount: isSet(object.successfulEventCount)
        ? Long.fromValue(object.successfulEventCount)
        : Long.ZERO,
      successRate: isSet(object.successRate) ? globalThis.Number(object.successRate) : 0,
      pendingEventCount: isSet(object.pendingEventCount) ? Long.fromValue(object.pendingEventCount) : Long.ZERO,
      pendingRate: isSet(object.pendingRate) ? globalThis.Number(object.pendingRate) : 0,
      lastUploadDateTime: isSet(object.lastUploadDateTime) ? globalThis.String(object.lastUploadDateTime) : "",
      dailySummaries: globalThis.Array.isArray(object?.dailySummaries)
        ? object.dailySummaries.map((e: any) => OfflineConversionSummary.fromJSON(e))
        : [],
      jobSummaries: globalThis.Array.isArray(object?.jobSummaries)
        ? object.jobSummaries.map((e: any) => OfflineConversionSummary.fromJSON(e))
        : [],
      alerts: globalThis.Array.isArray(object?.alerts)
        ? object.alerts.map((e: any) => OfflineConversionAlert.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OfflineConversionUploadClientSummary): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.client !== 0) {
      obj.client = offlineEventUploadClientEnum_OfflineEventUploadClientToJSON(message.client);
    }
    if (message.status !== 0) {
      obj.status = offlineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatusToJSON(message.status);
    }
    if (!message.totalEventCount.equals(Long.ZERO)) {
      obj.totalEventCount = (message.totalEventCount || Long.ZERO).toString();
    }
    if (!message.successfulEventCount.equals(Long.ZERO)) {
      obj.successfulEventCount = (message.successfulEventCount || Long.ZERO).toString();
    }
    if (message.successRate !== 0) {
      obj.successRate = message.successRate;
    }
    if (!message.pendingEventCount.equals(Long.ZERO)) {
      obj.pendingEventCount = (message.pendingEventCount || Long.ZERO).toString();
    }
    if (message.pendingRate !== 0) {
      obj.pendingRate = message.pendingRate;
    }
    if (message.lastUploadDateTime !== "") {
      obj.lastUploadDateTime = message.lastUploadDateTime;
    }
    if (message.dailySummaries?.length) {
      obj.dailySummaries = message.dailySummaries.map((e) => OfflineConversionSummary.toJSON(e));
    }
    if (message.jobSummaries?.length) {
      obj.jobSummaries = message.jobSummaries.map((e) => OfflineConversionSummary.toJSON(e));
    }
    if (message.alerts?.length) {
      obj.alerts = message.alerts.map((e) => OfflineConversionAlert.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<OfflineConversionUploadClientSummary>): OfflineConversionUploadClientSummary {
    return OfflineConversionUploadClientSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OfflineConversionUploadClientSummary>): OfflineConversionUploadClientSummary {
    const message = createBaseOfflineConversionUploadClientSummary();
    message.resourceName = object.resourceName ?? "";
    message.client = object.client ?? 0;
    message.status = object.status ?? 0;
    message.totalEventCount = (object.totalEventCount !== undefined && object.totalEventCount !== null)
      ? Long.fromValue(object.totalEventCount)
      : Long.ZERO;
    message.successfulEventCount = (object.successfulEventCount !== undefined && object.successfulEventCount !== null)
      ? Long.fromValue(object.successfulEventCount)
      : Long.ZERO;
    message.successRate = object.successRate ?? 0;
    message.pendingEventCount = (object.pendingEventCount !== undefined && object.pendingEventCount !== null)
      ? Long.fromValue(object.pendingEventCount)
      : Long.ZERO;
    message.pendingRate = object.pendingRate ?? 0;
    message.lastUploadDateTime = object.lastUploadDateTime ?? "";
    message.dailySummaries = object.dailySummaries?.map((e) => OfflineConversionSummary.fromPartial(e)) || [];
    message.jobSummaries = object.jobSummaries?.map((e) => OfflineConversionSummary.fromPartial(e)) || [];
    message.alerts = object.alerts?.map((e) => OfflineConversionAlert.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOfflineConversionSummary(): OfflineConversionSummary {
  return {
    successfulCount: Long.ZERO,
    failedCount: Long.ZERO,
    pendingCount: Long.ZERO,
    jobId: undefined,
    uploadDate: undefined,
  };
}

export const OfflineConversionSummary: MessageFns<OfflineConversionSummary> = {
  encode(message: OfflineConversionSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.successfulCount.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.successfulCount.toString());
    }
    if (!message.failedCount.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.failedCount.toString());
    }
    if (!message.pendingCount.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.pendingCount.toString());
    }
    if (message.jobId !== undefined) {
      writer.uint32(8).int64(message.jobId.toString());
    }
    if (message.uploadDate !== undefined) {
      writer.uint32(18).string(message.uploadDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OfflineConversionSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOfflineConversionSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }

          message.successfulCount = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.failedCount = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.pendingCount = Long.fromString(reader.int64().toString());
          continue;
        case 1:
          if (tag !== 8) {
            break;
          }

          message.jobId = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uploadDate = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OfflineConversionSummary {
    return {
      successfulCount: isSet(object.successfulCount) ? Long.fromValue(object.successfulCount) : Long.ZERO,
      failedCount: isSet(object.failedCount) ? Long.fromValue(object.failedCount) : Long.ZERO,
      pendingCount: isSet(object.pendingCount) ? Long.fromValue(object.pendingCount) : Long.ZERO,
      jobId: isSet(object.jobId) ? Long.fromValue(object.jobId) : undefined,
      uploadDate: isSet(object.uploadDate) ? globalThis.String(object.uploadDate) : undefined,
    };
  },

  toJSON(message: OfflineConversionSummary): unknown {
    const obj: any = {};
    if (!message.successfulCount.equals(Long.ZERO)) {
      obj.successfulCount = (message.successfulCount || Long.ZERO).toString();
    }
    if (!message.failedCount.equals(Long.ZERO)) {
      obj.failedCount = (message.failedCount || Long.ZERO).toString();
    }
    if (!message.pendingCount.equals(Long.ZERO)) {
      obj.pendingCount = (message.pendingCount || Long.ZERO).toString();
    }
    if (message.jobId !== undefined) {
      obj.jobId = (message.jobId || Long.ZERO).toString();
    }
    if (message.uploadDate !== undefined) {
      obj.uploadDate = message.uploadDate;
    }
    return obj;
  },

  create(base?: DeepPartial<OfflineConversionSummary>): OfflineConversionSummary {
    return OfflineConversionSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OfflineConversionSummary>): OfflineConversionSummary {
    const message = createBaseOfflineConversionSummary();
    message.successfulCount = (object.successfulCount !== undefined && object.successfulCount !== null)
      ? Long.fromValue(object.successfulCount)
      : Long.ZERO;
    message.failedCount = (object.failedCount !== undefined && object.failedCount !== null)
      ? Long.fromValue(object.failedCount)
      : Long.ZERO;
    message.pendingCount = (object.pendingCount !== undefined && object.pendingCount !== null)
      ? Long.fromValue(object.pendingCount)
      : Long.ZERO;
    message.jobId = (object.jobId !== undefined && object.jobId !== null) ? Long.fromValue(object.jobId) : undefined;
    message.uploadDate = object.uploadDate ?? undefined;
    return message;
  },
};

function createBaseOfflineConversionAlert(): OfflineConversionAlert {
  return { error: undefined, errorPercentage: 0 };
}

export const OfflineConversionAlert: MessageFns<OfflineConversionAlert> = {
  encode(message: OfflineConversionAlert, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== undefined) {
      OfflineConversionError.encode(message.error, writer.uint32(10).fork()).join();
    }
    if (message.errorPercentage !== 0) {
      writer.uint32(17).double(message.errorPercentage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OfflineConversionAlert {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOfflineConversionAlert();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = OfflineConversionError.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.errorPercentage = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OfflineConversionAlert {
    return {
      error: isSet(object.error) ? OfflineConversionError.fromJSON(object.error) : undefined,
      errorPercentage: isSet(object.errorPercentage) ? globalThis.Number(object.errorPercentage) : 0,
    };
  },

  toJSON(message: OfflineConversionAlert): unknown {
    const obj: any = {};
    if (message.error !== undefined) {
      obj.error = OfflineConversionError.toJSON(message.error);
    }
    if (message.errorPercentage !== 0) {
      obj.errorPercentage = message.errorPercentage;
    }
    return obj;
  },

  create(base?: DeepPartial<OfflineConversionAlert>): OfflineConversionAlert {
    return OfflineConversionAlert.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OfflineConversionAlert>): OfflineConversionAlert {
    const message = createBaseOfflineConversionAlert();
    message.error = (object.error !== undefined && object.error !== null)
      ? OfflineConversionError.fromPartial(object.error)
      : undefined;
    message.errorPercentage = object.errorPercentage ?? 0;
    return message;
  },
};

function createBaseOfflineConversionError(): OfflineConversionError {
  return {
    collectionSizeError: undefined,
    conversionAdjustmentUploadError: undefined,
    conversionUploadError: undefined,
    dateError: undefined,
    distinctError: undefined,
    fieldError: undefined,
    mutateError: undefined,
    notAllowlistedError: undefined,
    stringFormatError: undefined,
    stringLengthError: undefined,
  };
}

export const OfflineConversionError: MessageFns<OfflineConversionError> = {
  encode(message: OfflineConversionError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.collectionSizeError !== undefined) {
      writer.uint32(8).int32(message.collectionSizeError);
    }
    if (message.conversionAdjustmentUploadError !== undefined) {
      writer.uint32(16).int32(message.conversionAdjustmentUploadError);
    }
    if (message.conversionUploadError !== undefined) {
      writer.uint32(24).int32(message.conversionUploadError);
    }
    if (message.dateError !== undefined) {
      writer.uint32(32).int32(message.dateError);
    }
    if (message.distinctError !== undefined) {
      writer.uint32(40).int32(message.distinctError);
    }
    if (message.fieldError !== undefined) {
      writer.uint32(48).int32(message.fieldError);
    }
    if (message.mutateError !== undefined) {
      writer.uint32(56).int32(message.mutateError);
    }
    if (message.notAllowlistedError !== undefined) {
      writer.uint32(64).int32(message.notAllowlistedError);
    }
    if (message.stringFormatError !== undefined) {
      writer.uint32(72).int32(message.stringFormatError);
    }
    if (message.stringLengthError !== undefined) {
      writer.uint32(80).int32(message.stringLengthError);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OfflineConversionError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOfflineConversionError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.collectionSizeError = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.conversionAdjustmentUploadError = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.conversionUploadError = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.dateError = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.distinctError = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.fieldError = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.mutateError = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.notAllowlistedError = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.stringFormatError = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.stringLengthError = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OfflineConversionError {
    return {
      collectionSizeError: isSet(object.collectionSizeError)
        ? collectionSizeErrorEnum_CollectionSizeErrorFromJSON(object.collectionSizeError)
        : undefined,
      conversionAdjustmentUploadError: isSet(object.conversionAdjustmentUploadError)
        ? conversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadErrorFromJSON(
          object.conversionAdjustmentUploadError,
        )
        : undefined,
      conversionUploadError: isSet(object.conversionUploadError)
        ? conversionUploadErrorEnum_ConversionUploadErrorFromJSON(object.conversionUploadError)
        : undefined,
      dateError: isSet(object.dateError) ? dateErrorEnum_DateErrorFromJSON(object.dateError) : undefined,
      distinctError: isSet(object.distinctError)
        ? distinctErrorEnum_DistinctErrorFromJSON(object.distinctError)
        : undefined,
      fieldError: isSet(object.fieldError) ? fieldErrorEnum_FieldErrorFromJSON(object.fieldError) : undefined,
      mutateError: isSet(object.mutateError) ? mutateErrorEnum_MutateErrorFromJSON(object.mutateError) : undefined,
      notAllowlistedError: isSet(object.notAllowlistedError)
        ? notAllowlistedErrorEnum_NotAllowlistedErrorFromJSON(object.notAllowlistedError)
        : undefined,
      stringFormatError: isSet(object.stringFormatError)
        ? stringFormatErrorEnum_StringFormatErrorFromJSON(object.stringFormatError)
        : undefined,
      stringLengthError: isSet(object.stringLengthError)
        ? stringLengthErrorEnum_StringLengthErrorFromJSON(object.stringLengthError)
        : undefined,
    };
  },

  toJSON(message: OfflineConversionError): unknown {
    const obj: any = {};
    if (message.collectionSizeError !== undefined) {
      obj.collectionSizeError = collectionSizeErrorEnum_CollectionSizeErrorToJSON(message.collectionSizeError);
    }
    if (message.conversionAdjustmentUploadError !== undefined) {
      obj.conversionAdjustmentUploadError = conversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadErrorToJSON(
        message.conversionAdjustmentUploadError,
      );
    }
    if (message.conversionUploadError !== undefined) {
      obj.conversionUploadError = conversionUploadErrorEnum_ConversionUploadErrorToJSON(message.conversionUploadError);
    }
    if (message.dateError !== undefined) {
      obj.dateError = dateErrorEnum_DateErrorToJSON(message.dateError);
    }
    if (message.distinctError !== undefined) {
      obj.distinctError = distinctErrorEnum_DistinctErrorToJSON(message.distinctError);
    }
    if (message.fieldError !== undefined) {
      obj.fieldError = fieldErrorEnum_FieldErrorToJSON(message.fieldError);
    }
    if (message.mutateError !== undefined) {
      obj.mutateError = mutateErrorEnum_MutateErrorToJSON(message.mutateError);
    }
    if (message.notAllowlistedError !== undefined) {
      obj.notAllowlistedError = notAllowlistedErrorEnum_NotAllowlistedErrorToJSON(message.notAllowlistedError);
    }
    if (message.stringFormatError !== undefined) {
      obj.stringFormatError = stringFormatErrorEnum_StringFormatErrorToJSON(message.stringFormatError);
    }
    if (message.stringLengthError !== undefined) {
      obj.stringLengthError = stringLengthErrorEnum_StringLengthErrorToJSON(message.stringLengthError);
    }
    return obj;
  },

  create(base?: DeepPartial<OfflineConversionError>): OfflineConversionError {
    return OfflineConversionError.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OfflineConversionError>): OfflineConversionError {
    const message = createBaseOfflineConversionError();
    message.collectionSizeError = object.collectionSizeError ?? undefined;
    message.conversionAdjustmentUploadError = object.conversionAdjustmentUploadError ?? undefined;
    message.conversionUploadError = object.conversionUploadError ?? undefined;
    message.dateError = object.dateError ?? undefined;
    message.distinctError = object.distinctError ?? undefined;
    message.fieldError = object.fieldError ?? undefined;
    message.mutateError = object.mutateError ?? undefined;
    message.notAllowlistedError = object.notAllowlistedError ?? undefined;
    message.stringFormatError = object.stringFormatError ?? undefined;
    message.stringLengthError = object.stringLengthError ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
