// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/bidding_strategy_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible bidding strategy errors. */
export interface BiddingStrategyErrorEnum {
}

/** Enum describing possible bidding strategy errors. */
export enum BiddingStrategyErrorEnum_BiddingStrategyError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** DUPLICATE_NAME - Each bidding strategy must have a unique name. */
  DUPLICATE_NAME = 2,
  /** CANNOT_CHANGE_BIDDING_STRATEGY_TYPE - Bidding strategy type is immutable. */
  CANNOT_CHANGE_BIDDING_STRATEGY_TYPE = 3,
  /**
   * CANNOT_REMOVE_ASSOCIATED_STRATEGY - Only bidding strategies not linked to campaigns, adgroups or adgroup
   * criteria can be removed.
   */
  CANNOT_REMOVE_ASSOCIATED_STRATEGY = 4,
  /** BIDDING_STRATEGY_NOT_SUPPORTED - The specified bidding strategy is not supported. */
  BIDDING_STRATEGY_NOT_SUPPORTED = 5,
  /**
   * INCOMPATIBLE_BIDDING_STRATEGY_AND_BIDDING_STRATEGY_GOAL_TYPE - The bidding strategy is incompatible with the campaign's bidding
   * strategy goal type.
   */
  INCOMPATIBLE_BIDDING_STRATEGY_AND_BIDDING_STRATEGY_GOAL_TYPE = 6,
  UNRECOGNIZED = -1,
}

export function biddingStrategyErrorEnum_BiddingStrategyErrorFromJSON(
  object: any,
): BiddingStrategyErrorEnum_BiddingStrategyError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return BiddingStrategyErrorEnum_BiddingStrategyError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return BiddingStrategyErrorEnum_BiddingStrategyError.UNKNOWN;
    case 2:
    case "DUPLICATE_NAME":
      return BiddingStrategyErrorEnum_BiddingStrategyError.DUPLICATE_NAME;
    case 3:
    case "CANNOT_CHANGE_BIDDING_STRATEGY_TYPE":
      return BiddingStrategyErrorEnum_BiddingStrategyError.CANNOT_CHANGE_BIDDING_STRATEGY_TYPE;
    case 4:
    case "CANNOT_REMOVE_ASSOCIATED_STRATEGY":
      return BiddingStrategyErrorEnum_BiddingStrategyError.CANNOT_REMOVE_ASSOCIATED_STRATEGY;
    case 5:
    case "BIDDING_STRATEGY_NOT_SUPPORTED":
      return BiddingStrategyErrorEnum_BiddingStrategyError.BIDDING_STRATEGY_NOT_SUPPORTED;
    case 6:
    case "INCOMPATIBLE_BIDDING_STRATEGY_AND_BIDDING_STRATEGY_GOAL_TYPE":
      return BiddingStrategyErrorEnum_BiddingStrategyError.INCOMPATIBLE_BIDDING_STRATEGY_AND_BIDDING_STRATEGY_GOAL_TYPE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BiddingStrategyErrorEnum_BiddingStrategyError.UNRECOGNIZED;
  }
}

export function biddingStrategyErrorEnum_BiddingStrategyErrorToJSON(
  object: BiddingStrategyErrorEnum_BiddingStrategyError,
): string {
  switch (object) {
    case BiddingStrategyErrorEnum_BiddingStrategyError.UNSPECIFIED:
      return "UNSPECIFIED";
    case BiddingStrategyErrorEnum_BiddingStrategyError.UNKNOWN:
      return "UNKNOWN";
    case BiddingStrategyErrorEnum_BiddingStrategyError.DUPLICATE_NAME:
      return "DUPLICATE_NAME";
    case BiddingStrategyErrorEnum_BiddingStrategyError.CANNOT_CHANGE_BIDDING_STRATEGY_TYPE:
      return "CANNOT_CHANGE_BIDDING_STRATEGY_TYPE";
    case BiddingStrategyErrorEnum_BiddingStrategyError.CANNOT_REMOVE_ASSOCIATED_STRATEGY:
      return "CANNOT_REMOVE_ASSOCIATED_STRATEGY";
    case BiddingStrategyErrorEnum_BiddingStrategyError.BIDDING_STRATEGY_NOT_SUPPORTED:
      return "BIDDING_STRATEGY_NOT_SUPPORTED";
    case BiddingStrategyErrorEnum_BiddingStrategyError.INCOMPATIBLE_BIDDING_STRATEGY_AND_BIDDING_STRATEGY_GOAL_TYPE:
      return "INCOMPATIBLE_BIDDING_STRATEGY_AND_BIDDING_STRATEGY_GOAL_TYPE";
    case BiddingStrategyErrorEnum_BiddingStrategyError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseBiddingStrategyErrorEnum(): BiddingStrategyErrorEnum {
  return {};
}

export const BiddingStrategyErrorEnum: MessageFns<BiddingStrategyErrorEnum> = {
  encode(_: BiddingStrategyErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BiddingStrategyErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBiddingStrategyErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): BiddingStrategyErrorEnum {
    return {};
  },

  toJSON(_: BiddingStrategyErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<BiddingStrategyErrorEnum>): BiddingStrategyErrorEnum {
    return BiddingStrategyErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<BiddingStrategyErrorEnum>): BiddingStrategyErrorEnum {
    const message = createBaseBiddingStrategyErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
