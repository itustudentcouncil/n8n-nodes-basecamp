// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/custom_audience.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  CustomAudienceMemberTypeEnum_CustomAudienceMemberType,
  customAudienceMemberTypeEnum_CustomAudienceMemberTypeFromJSON,
  customAudienceMemberTypeEnum_CustomAudienceMemberTypeToJSON,
} from "../enums/custom_audience_member_type.js";
import {
  CustomAudienceStatusEnum_CustomAudienceStatus,
  customAudienceStatusEnum_CustomAudienceStatusFromJSON,
  customAudienceStatusEnum_CustomAudienceStatusToJSON,
} from "../enums/custom_audience_status.js";
import {
  CustomAudienceTypeEnum_CustomAudienceType,
  customAudienceTypeEnum_CustomAudienceTypeFromJSON,
  customAudienceTypeEnum_CustomAudienceTypeToJSON,
} from "../enums/custom_audience_type.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/** A custom audience. This is a list of users by interest. */
export interface CustomAudience {
  /**
   * Immutable. The resource name of the custom audience.
   * Custom audience resource names have the form:
   *
   * `customers/{customer_id}/customAudiences/{custom_audience_id}`
   */
  resourceName: string;
  /** Output only. ID of the custom audience. */
  id: Long;
  /**
   * Output only. Status of this custom audience. Indicates whether the custom
   * audience is enabled or removed.
   */
  status: CustomAudienceStatusEnum_CustomAudienceStatus;
  /**
   * Name of the custom audience. It should be unique for all custom audiences
   * created by a customer.
   * This field is required for creating operations.
   */
  name: string;
  /**
   * Type of the custom audience.
   * ("INTEREST" OR "PURCHASE_INTENT" is not allowed for newly created custom
   * audience but kept for existing audiences)
   */
  type: CustomAudienceTypeEnum_CustomAudienceType;
  /** Description of this custom audience. */
  description: string;
  /**
   * List of custom audience members that this custom audience is composed of.
   * Members can be added during CustomAudience creation. If members are
   * presented in UPDATE operation, existing members will be overridden.
   */
  members: CustomAudienceMember[];
}

/**
 * A member of custom audience. A member can be a KEYWORD, URL,
 * PLACE_CATEGORY or APP. It can only be created or removed but not changed.
 */
export interface CustomAudienceMember {
  /** The type of custom audience member, KEYWORD, URL, PLACE_CATEGORY or APP. */
  memberType: CustomAudienceMemberTypeEnum_CustomAudienceMemberType;
  /**
   * A keyword or keyword phrase — at most 10 words and 80 characters.
   * Languages with double-width characters such as Chinese, Japanese,
   * or Korean, are allowed 40 characters, which describes the user's
   * interests or actions.
   */
  keyword?:
    | string
    | undefined;
  /**
   * An HTTP URL, protocol-included — at most 2048 characters, which includes
   * contents users have interests in.
   */
  url?:
    | string
    | undefined;
  /** A place type described by a place category users visit. */
  placeCategory?:
    | Long
    | undefined;
  /**
   * A package name of Android apps which users installed such as
   * com.google.example.
   */
  app?: string | undefined;
}

function createBaseCustomAudience(): CustomAudience {
  return { resourceName: "", id: Long.ZERO, status: 0, name: "", type: 0, description: "", members: [] };
}

export const CustomAudience: MessageFns<CustomAudience> = {
  encode(message: CustomAudience, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (!message.id.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.id.toString());
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(40).int32(message.type);
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    for (const v of message.members) {
      CustomAudienceMember.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomAudience {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomAudience();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.members.push(CustomAudienceMember.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomAudience {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.ZERO,
      status: isSet(object.status) ? customAudienceStatusEnum_CustomAudienceStatusFromJSON(object.status) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? customAudienceTypeEnum_CustomAudienceTypeFromJSON(object.type) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      members: globalThis.Array.isArray(object?.members)
        ? object.members.map((e: any) => CustomAudienceMember.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CustomAudience): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (!message.id.equals(Long.ZERO)) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.status !== 0) {
      obj.status = customAudienceStatusEnum_CustomAudienceStatusToJSON(message.status);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = customAudienceTypeEnum_CustomAudienceTypeToJSON(message.type);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.members?.length) {
      obj.members = message.members.map((e) => CustomAudienceMember.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CustomAudience>): CustomAudience {
    return CustomAudience.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomAudience>): CustomAudience {
    const message = createBaseCustomAudience();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.ZERO;
    message.status = object.status ?? 0;
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    message.description = object.description ?? "";
    message.members = object.members?.map((e) => CustomAudienceMember.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCustomAudienceMember(): CustomAudienceMember {
  return { memberType: 0, keyword: undefined, url: undefined, placeCategory: undefined, app: undefined };
}

export const CustomAudienceMember: MessageFns<CustomAudienceMember> = {
  encode(message: CustomAudienceMember, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.memberType !== 0) {
      writer.uint32(8).int32(message.memberType);
    }
    if (message.keyword !== undefined) {
      writer.uint32(18).string(message.keyword);
    }
    if (message.url !== undefined) {
      writer.uint32(26).string(message.url);
    }
    if (message.placeCategory !== undefined) {
      writer.uint32(32).int64(message.placeCategory.toString());
    }
    if (message.app !== undefined) {
      writer.uint32(42).string(message.app);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomAudienceMember {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomAudienceMember();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.memberType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keyword = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.url = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.placeCategory = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.app = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomAudienceMember {
    return {
      memberType: isSet(object.memberType)
        ? customAudienceMemberTypeEnum_CustomAudienceMemberTypeFromJSON(object.memberType)
        : 0,
      keyword: isSet(object.keyword) ? globalThis.String(object.keyword) : undefined,
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      placeCategory: isSet(object.placeCategory) ? Long.fromValue(object.placeCategory) : undefined,
      app: isSet(object.app) ? globalThis.String(object.app) : undefined,
    };
  },

  toJSON(message: CustomAudienceMember): unknown {
    const obj: any = {};
    if (message.memberType !== 0) {
      obj.memberType = customAudienceMemberTypeEnum_CustomAudienceMemberTypeToJSON(message.memberType);
    }
    if (message.keyword !== undefined) {
      obj.keyword = message.keyword;
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.placeCategory !== undefined) {
      obj.placeCategory = (message.placeCategory || Long.ZERO).toString();
    }
    if (message.app !== undefined) {
      obj.app = message.app;
    }
    return obj;
  },

  create(base?: DeepPartial<CustomAudienceMember>): CustomAudienceMember {
    return CustomAudienceMember.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomAudienceMember>): CustomAudienceMember {
    const message = createBaseCustomAudienceMember();
    message.memberType = object.memberType ?? 0;
    message.keyword = object.keyword ?? undefined;
    message.url = object.url ?? undefined;
    message.placeCategory = (object.placeCategory !== undefined && object.placeCategory !== null)
      ? Long.fromValue(object.placeCategory)
      : undefined;
    message.app = object.app ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
