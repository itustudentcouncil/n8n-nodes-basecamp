// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/bidding_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible bidding errors. */
export interface BiddingErrorEnum {
}

/** Enum describing possible bidding errors. */
export enum BiddingErrorEnum_BiddingError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** BIDDING_STRATEGY_TRANSITION_NOT_ALLOWED - Cannot transition to new bidding strategy. */
  BIDDING_STRATEGY_TRANSITION_NOT_ALLOWED = 2,
  /** CANNOT_ATTACH_BIDDING_STRATEGY_TO_CAMPAIGN - Cannot attach bidding strategy to campaign. */
  CANNOT_ATTACH_BIDDING_STRATEGY_TO_CAMPAIGN = 7,
  /** INVALID_ANONYMOUS_BIDDING_STRATEGY_TYPE - Bidding strategy is not supported or cannot be used as anonymous. */
  INVALID_ANONYMOUS_BIDDING_STRATEGY_TYPE = 10,
  /** INVALID_BIDDING_STRATEGY_TYPE - The type does not match the named strategy's type. */
  INVALID_BIDDING_STRATEGY_TYPE = 14,
  /** INVALID_BID - The bid is invalid. */
  INVALID_BID = 17,
  /** BIDDING_STRATEGY_NOT_AVAILABLE_FOR_ACCOUNT_TYPE - Bidding strategy is not available for the account type. */
  BIDDING_STRATEGY_NOT_AVAILABLE_FOR_ACCOUNT_TYPE = 18,
  /**
   * CANNOT_CREATE_CAMPAIGN_WITH_BIDDING_STRATEGY - Campaign can not be created with given bidding strategy. It can be
   * transitioned to the strategy, once eligible.
   */
  CANNOT_CREATE_CAMPAIGN_WITH_BIDDING_STRATEGY = 21,
  /**
   * CANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_CAMPAIGN_LEVEL_POP_BIDDING_STRATEGY - Cannot target content network only as campaign uses Page One Promoted
   * bidding strategy.
   */
  CANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_CAMPAIGN_LEVEL_POP_BIDDING_STRATEGY = 23,
  /**
   * BIDDING_STRATEGY_NOT_SUPPORTED_WITH_AD_SCHEDULE - Budget Optimizer and Target Spend bidding strategies are not supported
   * for campaigns with AdSchedule targeting.
   */
  BIDDING_STRATEGY_NOT_SUPPORTED_WITH_AD_SCHEDULE = 24,
  /**
   * PAY_PER_CONVERSION_NOT_AVAILABLE_FOR_CUSTOMER - Pay per conversion is not available to all the customer, only few
   * customers on the allow-list can use this.
   */
  PAY_PER_CONVERSION_NOT_AVAILABLE_FOR_CUSTOMER = 25,
  /** PAY_PER_CONVERSION_NOT_ALLOWED_WITH_TARGET_CPA - Pay per conversion is not allowed with Target CPA. */
  PAY_PER_CONVERSION_NOT_ALLOWED_WITH_TARGET_CPA = 26,
  /**
   * BIDDING_STRATEGY_NOT_ALLOWED_FOR_SEARCH_ONLY_CAMPAIGNS - Cannot set bidding strategy to Manual CPM for search network only
   * campaigns.
   */
  BIDDING_STRATEGY_NOT_ALLOWED_FOR_SEARCH_ONLY_CAMPAIGNS = 27,
  /** BIDDING_STRATEGY_NOT_SUPPORTED_IN_DRAFTS_OR_EXPERIMENTS - The bidding strategy is not supported for use in drafts or experiments. */
  BIDDING_STRATEGY_NOT_SUPPORTED_IN_DRAFTS_OR_EXPERIMENTS = 28,
  /** BIDDING_STRATEGY_TYPE_DOES_NOT_SUPPORT_PRODUCT_TYPE_ADGROUP_CRITERION - Bidding strategy type does not support product type ad group criterion. */
  BIDDING_STRATEGY_TYPE_DOES_NOT_SUPPORT_PRODUCT_TYPE_ADGROUP_CRITERION = 29,
  /** BID_TOO_SMALL - Bid amount is too small. */
  BID_TOO_SMALL = 30,
  /** BID_TOO_BIG - Bid amount is too big. */
  BID_TOO_BIG = 31,
  /** BID_TOO_MANY_FRACTIONAL_DIGITS - Bid has too many fractional digit precision. */
  BID_TOO_MANY_FRACTIONAL_DIGITS = 32,
  /** INVALID_DOMAIN_NAME - Invalid domain name specified. */
  INVALID_DOMAIN_NAME = 33,
  /** NOT_COMPATIBLE_WITH_PAYMENT_MODE - The field is not compatible with the payment mode. */
  NOT_COMPATIBLE_WITH_PAYMENT_MODE = 34,
  /** BIDDING_STRATEGY_TYPE_INCOMPATIBLE_WITH_SHARED_BUDGET - Bidding strategy type is incompatible with shared budget. */
  BIDDING_STRATEGY_TYPE_INCOMPATIBLE_WITH_SHARED_BUDGET = 37,
  /**
   * BIDDING_STRATEGY_AND_BUDGET_MUST_BE_ALIGNED - The attached bidding strategy and budget must be aligned with each other
   * if alignment is specified on either entity.
   */
  BIDDING_STRATEGY_AND_BUDGET_MUST_BE_ALIGNED = 38,
  /**
   * BIDDING_STRATEGY_AND_BUDGET_MUST_BE_ATTACHED_TO_THE_SAME_CAMPAIGNS_TO_ALIGN - The attached bidding strategy and budget must be attached to the same
   * campaigns to become aligned.
   */
  BIDDING_STRATEGY_AND_BUDGET_MUST_BE_ATTACHED_TO_THE_SAME_CAMPAIGNS_TO_ALIGN = 39,
  /** BIDDING_STRATEGY_AND_BUDGET_MUST_BE_REMOVED_TOGETHER - The aligned bidding strategy and budget must be removed at the same time. */
  BIDDING_STRATEGY_AND_BUDGET_MUST_BE_REMOVED_TOGETHER = 40,
  /** CPC_BID_FLOOR_MICROS_GREATER_THAN_CPC_BID_CEILING_MICROS - cpc_bid_floor_micros is greater than cpc_bid_ceiling_micros. */
  CPC_BID_FLOOR_MICROS_GREATER_THAN_CPC_BID_CEILING_MICROS = 41,
  UNRECOGNIZED = -1,
}

export function biddingErrorEnum_BiddingErrorFromJSON(object: any): BiddingErrorEnum_BiddingError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return BiddingErrorEnum_BiddingError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return BiddingErrorEnum_BiddingError.UNKNOWN;
    case 2:
    case "BIDDING_STRATEGY_TRANSITION_NOT_ALLOWED":
      return BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_TRANSITION_NOT_ALLOWED;
    case 7:
    case "CANNOT_ATTACH_BIDDING_STRATEGY_TO_CAMPAIGN":
      return BiddingErrorEnum_BiddingError.CANNOT_ATTACH_BIDDING_STRATEGY_TO_CAMPAIGN;
    case 10:
    case "INVALID_ANONYMOUS_BIDDING_STRATEGY_TYPE":
      return BiddingErrorEnum_BiddingError.INVALID_ANONYMOUS_BIDDING_STRATEGY_TYPE;
    case 14:
    case "INVALID_BIDDING_STRATEGY_TYPE":
      return BiddingErrorEnum_BiddingError.INVALID_BIDDING_STRATEGY_TYPE;
    case 17:
    case "INVALID_BID":
      return BiddingErrorEnum_BiddingError.INVALID_BID;
    case 18:
    case "BIDDING_STRATEGY_NOT_AVAILABLE_FOR_ACCOUNT_TYPE":
      return BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_NOT_AVAILABLE_FOR_ACCOUNT_TYPE;
    case 21:
    case "CANNOT_CREATE_CAMPAIGN_WITH_BIDDING_STRATEGY":
      return BiddingErrorEnum_BiddingError.CANNOT_CREATE_CAMPAIGN_WITH_BIDDING_STRATEGY;
    case 23:
    case "CANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_CAMPAIGN_LEVEL_POP_BIDDING_STRATEGY":
      return BiddingErrorEnum_BiddingError.CANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_CAMPAIGN_LEVEL_POP_BIDDING_STRATEGY;
    case 24:
    case "BIDDING_STRATEGY_NOT_SUPPORTED_WITH_AD_SCHEDULE":
      return BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_NOT_SUPPORTED_WITH_AD_SCHEDULE;
    case 25:
    case "PAY_PER_CONVERSION_NOT_AVAILABLE_FOR_CUSTOMER":
      return BiddingErrorEnum_BiddingError.PAY_PER_CONVERSION_NOT_AVAILABLE_FOR_CUSTOMER;
    case 26:
    case "PAY_PER_CONVERSION_NOT_ALLOWED_WITH_TARGET_CPA":
      return BiddingErrorEnum_BiddingError.PAY_PER_CONVERSION_NOT_ALLOWED_WITH_TARGET_CPA;
    case 27:
    case "BIDDING_STRATEGY_NOT_ALLOWED_FOR_SEARCH_ONLY_CAMPAIGNS":
      return BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_NOT_ALLOWED_FOR_SEARCH_ONLY_CAMPAIGNS;
    case 28:
    case "BIDDING_STRATEGY_NOT_SUPPORTED_IN_DRAFTS_OR_EXPERIMENTS":
      return BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_NOT_SUPPORTED_IN_DRAFTS_OR_EXPERIMENTS;
    case 29:
    case "BIDDING_STRATEGY_TYPE_DOES_NOT_SUPPORT_PRODUCT_TYPE_ADGROUP_CRITERION":
      return BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_TYPE_DOES_NOT_SUPPORT_PRODUCT_TYPE_ADGROUP_CRITERION;
    case 30:
    case "BID_TOO_SMALL":
      return BiddingErrorEnum_BiddingError.BID_TOO_SMALL;
    case 31:
    case "BID_TOO_BIG":
      return BiddingErrorEnum_BiddingError.BID_TOO_BIG;
    case 32:
    case "BID_TOO_MANY_FRACTIONAL_DIGITS":
      return BiddingErrorEnum_BiddingError.BID_TOO_MANY_FRACTIONAL_DIGITS;
    case 33:
    case "INVALID_DOMAIN_NAME":
      return BiddingErrorEnum_BiddingError.INVALID_DOMAIN_NAME;
    case 34:
    case "NOT_COMPATIBLE_WITH_PAYMENT_MODE":
      return BiddingErrorEnum_BiddingError.NOT_COMPATIBLE_WITH_PAYMENT_MODE;
    case 37:
    case "BIDDING_STRATEGY_TYPE_INCOMPATIBLE_WITH_SHARED_BUDGET":
      return BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_TYPE_INCOMPATIBLE_WITH_SHARED_BUDGET;
    case 38:
    case "BIDDING_STRATEGY_AND_BUDGET_MUST_BE_ALIGNED":
      return BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_AND_BUDGET_MUST_BE_ALIGNED;
    case 39:
    case "BIDDING_STRATEGY_AND_BUDGET_MUST_BE_ATTACHED_TO_THE_SAME_CAMPAIGNS_TO_ALIGN":
      return BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_AND_BUDGET_MUST_BE_ATTACHED_TO_THE_SAME_CAMPAIGNS_TO_ALIGN;
    case 40:
    case "BIDDING_STRATEGY_AND_BUDGET_MUST_BE_REMOVED_TOGETHER":
      return BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_AND_BUDGET_MUST_BE_REMOVED_TOGETHER;
    case 41:
    case "CPC_BID_FLOOR_MICROS_GREATER_THAN_CPC_BID_CEILING_MICROS":
      return BiddingErrorEnum_BiddingError.CPC_BID_FLOOR_MICROS_GREATER_THAN_CPC_BID_CEILING_MICROS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BiddingErrorEnum_BiddingError.UNRECOGNIZED;
  }
}

export function biddingErrorEnum_BiddingErrorToJSON(object: BiddingErrorEnum_BiddingError): string {
  switch (object) {
    case BiddingErrorEnum_BiddingError.UNSPECIFIED:
      return "UNSPECIFIED";
    case BiddingErrorEnum_BiddingError.UNKNOWN:
      return "UNKNOWN";
    case BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_TRANSITION_NOT_ALLOWED:
      return "BIDDING_STRATEGY_TRANSITION_NOT_ALLOWED";
    case BiddingErrorEnum_BiddingError.CANNOT_ATTACH_BIDDING_STRATEGY_TO_CAMPAIGN:
      return "CANNOT_ATTACH_BIDDING_STRATEGY_TO_CAMPAIGN";
    case BiddingErrorEnum_BiddingError.INVALID_ANONYMOUS_BIDDING_STRATEGY_TYPE:
      return "INVALID_ANONYMOUS_BIDDING_STRATEGY_TYPE";
    case BiddingErrorEnum_BiddingError.INVALID_BIDDING_STRATEGY_TYPE:
      return "INVALID_BIDDING_STRATEGY_TYPE";
    case BiddingErrorEnum_BiddingError.INVALID_BID:
      return "INVALID_BID";
    case BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_NOT_AVAILABLE_FOR_ACCOUNT_TYPE:
      return "BIDDING_STRATEGY_NOT_AVAILABLE_FOR_ACCOUNT_TYPE";
    case BiddingErrorEnum_BiddingError.CANNOT_CREATE_CAMPAIGN_WITH_BIDDING_STRATEGY:
      return "CANNOT_CREATE_CAMPAIGN_WITH_BIDDING_STRATEGY";
    case BiddingErrorEnum_BiddingError.CANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_CAMPAIGN_LEVEL_POP_BIDDING_STRATEGY:
      return "CANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_CAMPAIGN_LEVEL_POP_BIDDING_STRATEGY";
    case BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_NOT_SUPPORTED_WITH_AD_SCHEDULE:
      return "BIDDING_STRATEGY_NOT_SUPPORTED_WITH_AD_SCHEDULE";
    case BiddingErrorEnum_BiddingError.PAY_PER_CONVERSION_NOT_AVAILABLE_FOR_CUSTOMER:
      return "PAY_PER_CONVERSION_NOT_AVAILABLE_FOR_CUSTOMER";
    case BiddingErrorEnum_BiddingError.PAY_PER_CONVERSION_NOT_ALLOWED_WITH_TARGET_CPA:
      return "PAY_PER_CONVERSION_NOT_ALLOWED_WITH_TARGET_CPA";
    case BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_NOT_ALLOWED_FOR_SEARCH_ONLY_CAMPAIGNS:
      return "BIDDING_STRATEGY_NOT_ALLOWED_FOR_SEARCH_ONLY_CAMPAIGNS";
    case BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_NOT_SUPPORTED_IN_DRAFTS_OR_EXPERIMENTS:
      return "BIDDING_STRATEGY_NOT_SUPPORTED_IN_DRAFTS_OR_EXPERIMENTS";
    case BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_TYPE_DOES_NOT_SUPPORT_PRODUCT_TYPE_ADGROUP_CRITERION:
      return "BIDDING_STRATEGY_TYPE_DOES_NOT_SUPPORT_PRODUCT_TYPE_ADGROUP_CRITERION";
    case BiddingErrorEnum_BiddingError.BID_TOO_SMALL:
      return "BID_TOO_SMALL";
    case BiddingErrorEnum_BiddingError.BID_TOO_BIG:
      return "BID_TOO_BIG";
    case BiddingErrorEnum_BiddingError.BID_TOO_MANY_FRACTIONAL_DIGITS:
      return "BID_TOO_MANY_FRACTIONAL_DIGITS";
    case BiddingErrorEnum_BiddingError.INVALID_DOMAIN_NAME:
      return "INVALID_DOMAIN_NAME";
    case BiddingErrorEnum_BiddingError.NOT_COMPATIBLE_WITH_PAYMENT_MODE:
      return "NOT_COMPATIBLE_WITH_PAYMENT_MODE";
    case BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_TYPE_INCOMPATIBLE_WITH_SHARED_BUDGET:
      return "BIDDING_STRATEGY_TYPE_INCOMPATIBLE_WITH_SHARED_BUDGET";
    case BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_AND_BUDGET_MUST_BE_ALIGNED:
      return "BIDDING_STRATEGY_AND_BUDGET_MUST_BE_ALIGNED";
    case BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_AND_BUDGET_MUST_BE_ATTACHED_TO_THE_SAME_CAMPAIGNS_TO_ALIGN:
      return "BIDDING_STRATEGY_AND_BUDGET_MUST_BE_ATTACHED_TO_THE_SAME_CAMPAIGNS_TO_ALIGN";
    case BiddingErrorEnum_BiddingError.BIDDING_STRATEGY_AND_BUDGET_MUST_BE_REMOVED_TOGETHER:
      return "BIDDING_STRATEGY_AND_BUDGET_MUST_BE_REMOVED_TOGETHER";
    case BiddingErrorEnum_BiddingError.CPC_BID_FLOOR_MICROS_GREATER_THAN_CPC_BID_CEILING_MICROS:
      return "CPC_BID_FLOOR_MICROS_GREATER_THAN_CPC_BID_CEILING_MICROS";
    case BiddingErrorEnum_BiddingError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseBiddingErrorEnum(): BiddingErrorEnum {
  return {};
}

export const BiddingErrorEnum: MessageFns<BiddingErrorEnum> = {
  encode(_: BiddingErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BiddingErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBiddingErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): BiddingErrorEnum {
    return {};
  },

  toJSON(_: BiddingErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<BiddingErrorEnum>): BiddingErrorEnum {
    return BiddingErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<BiddingErrorEnum>): BiddingErrorEnum {
    const message = createBaseBiddingErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
