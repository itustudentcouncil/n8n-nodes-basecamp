// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/product_category_constant.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  ProductCategoryLevelEnum_ProductCategoryLevel,
  productCategoryLevelEnum_ProductCategoryLevelFromJSON,
  productCategoryLevelEnum_ProductCategoryLevelToJSON,
} from "../enums/product_category_level.js";
import {
  ProductCategoryStateEnum_ProductCategoryState,
  productCategoryStateEnum_ProductCategoryStateFromJSON,
  productCategoryStateEnum_ProductCategoryStateToJSON,
} from "../enums/product_category_state.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/** A Product Category. */
export interface ProductCategoryConstant {
  /**
   * Output only. The resource name of the product category.
   * Product category resource names have the form:
   *
   * `productCategoryConstants/{level}~{category_id}`
   */
  resourceName: string;
  /**
   * Output only. The ID of the product category.
   *
   * This ID is equivalent to the google_product_category ID as described in
   * this article: https://support.google.com/merchants/answer/6324436.
   */
  categoryId: Long;
  /** Output only. Resource name of the parent product category. */
  productCategoryConstantParent?:
    | string
    | undefined;
  /** Output only. Level of the product category. */
  level: ProductCategoryLevelEnum_ProductCategoryLevel;
  /** Output only. State of the product category. */
  state: ProductCategoryStateEnum_ProductCategoryState;
  /** Output only. List of all available localizations of the product category. */
  localizations: ProductCategoryConstant_ProductCategoryLocalization[];
}

/** Localization for the product category. */
export interface ProductCategoryConstant_ProductCategoryLocalization {
  /**
   * Output only. Upper-case two-letter ISO 3166-1 country code of the
   * localized category.
   */
  regionCode: string;
  /**
   * Output only. Two-letter ISO 639-1 language code of the localized
   * category.
   */
  languageCode: string;
  /** Output only. The name of the category in the specified locale. */
  value: string;
}

function createBaseProductCategoryConstant(): ProductCategoryConstant {
  return {
    resourceName: "",
    categoryId: Long.ZERO,
    productCategoryConstantParent: undefined,
    level: 0,
    state: 0,
    localizations: [],
  };
}

export const ProductCategoryConstant: MessageFns<ProductCategoryConstant> = {
  encode(message: ProductCategoryConstant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (!message.categoryId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.categoryId.toString());
    }
    if (message.productCategoryConstantParent !== undefined) {
      writer.uint32(26).string(message.productCategoryConstantParent);
    }
    if (message.level !== 0) {
      writer.uint32(32).int32(message.level);
    }
    if (message.state !== 0) {
      writer.uint32(40).int32(message.state);
    }
    for (const v of message.localizations) {
      ProductCategoryConstant_ProductCategoryLocalization.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductCategoryConstant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductCategoryConstant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.categoryId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.productCategoryConstantParent = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.level = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.localizations.push(
            ProductCategoryConstant_ProductCategoryLocalization.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductCategoryConstant {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      categoryId: isSet(object.categoryId) ? Long.fromValue(object.categoryId) : Long.ZERO,
      productCategoryConstantParent: isSet(object.productCategoryConstantParent)
        ? globalThis.String(object.productCategoryConstantParent)
        : undefined,
      level: isSet(object.level) ? productCategoryLevelEnum_ProductCategoryLevelFromJSON(object.level) : 0,
      state: isSet(object.state) ? productCategoryStateEnum_ProductCategoryStateFromJSON(object.state) : 0,
      localizations: globalThis.Array.isArray(object?.localizations)
        ? object.localizations.map((e: any) => ProductCategoryConstant_ProductCategoryLocalization.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ProductCategoryConstant): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (!message.categoryId.equals(Long.ZERO)) {
      obj.categoryId = (message.categoryId || Long.ZERO).toString();
    }
    if (message.productCategoryConstantParent !== undefined) {
      obj.productCategoryConstantParent = message.productCategoryConstantParent;
    }
    if (message.level !== 0) {
      obj.level = productCategoryLevelEnum_ProductCategoryLevelToJSON(message.level);
    }
    if (message.state !== 0) {
      obj.state = productCategoryStateEnum_ProductCategoryStateToJSON(message.state);
    }
    if (message.localizations?.length) {
      obj.localizations = message.localizations.map((e) =>
        ProductCategoryConstant_ProductCategoryLocalization.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<ProductCategoryConstant>): ProductCategoryConstant {
    return ProductCategoryConstant.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductCategoryConstant>): ProductCategoryConstant {
    const message = createBaseProductCategoryConstant();
    message.resourceName = object.resourceName ?? "";
    message.categoryId = (object.categoryId !== undefined && object.categoryId !== null)
      ? Long.fromValue(object.categoryId)
      : Long.ZERO;
    message.productCategoryConstantParent = object.productCategoryConstantParent ?? undefined;
    message.level = object.level ?? 0;
    message.state = object.state ?? 0;
    message.localizations =
      object.localizations?.map((e) => ProductCategoryConstant_ProductCategoryLocalization.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProductCategoryConstant_ProductCategoryLocalization(): ProductCategoryConstant_ProductCategoryLocalization {
  return { regionCode: "", languageCode: "", value: "" };
}

export const ProductCategoryConstant_ProductCategoryLocalization: MessageFns<
  ProductCategoryConstant_ProductCategoryLocalization
> = {
  encode(
    message: ProductCategoryConstant_ProductCategoryLocalization,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.regionCode !== "") {
      writer.uint32(10).string(message.regionCode);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    if (message.value !== "") {
      writer.uint32(26).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductCategoryConstant_ProductCategoryLocalization {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductCategoryConstant_ProductCategoryLocalization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.regionCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductCategoryConstant_ProductCategoryLocalization {
    return {
      regionCode: isSet(object.regionCode) ? globalThis.String(object.regionCode) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ProductCategoryConstant_ProductCategoryLocalization): unknown {
    const obj: any = {};
    if (message.regionCode !== "") {
      obj.regionCode = message.regionCode;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ProductCategoryConstant_ProductCategoryLocalization>,
  ): ProductCategoryConstant_ProductCategoryLocalization {
    return ProductCategoryConstant_ProductCategoryLocalization.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ProductCategoryConstant_ProductCategoryLocalization>,
  ): ProductCategoryConstant_ProductCategoryLocalization {
    const message = createBaseProductCategoryConstant_ProductCategoryLocalization();
    message.regionCode = object.regionCode ?? "";
    message.languageCode = object.languageCode ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
