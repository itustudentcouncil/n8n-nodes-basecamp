// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/services/customer_user_access_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { CustomerUserAccess } from "../resources/customer_user_access.js";

export const protobufPackage = "google.ads.googleads.v17.services";

/**
 * Mutate Request for
 * [CustomerUserAccessService.MutateCustomerUserAccess][google.ads.googleads.v17.services.CustomerUserAccessService.MutateCustomerUserAccess].
 */
export interface MutateCustomerUserAccessRequest {
  /** Required. The ID of the customer being modified. */
  customerId: string;
  /** Required. The operation to perform on the customer */
  operation: CustomerUserAccessOperation | undefined;
}

/** A single operation (update, remove) on customer user access. */
export interface CustomerUserAccessOperation {
  /** FieldMask that determines which resource fields are modified in an update. */
  updateMask:
    | string[]
    | undefined;
  /**
   * Update operation: The customer user access is expected to have a valid
   * resource name.
   */
  update?:
    | CustomerUserAccess
    | undefined;
  /**
   * Remove operation: A resource name for the removed access is
   * expected, in this format:
   *
   * `customers/{customer_id}/customerUserAccesses/{CustomerUserAccess.user_id}`
   */
  remove?: string | undefined;
}

/** Response message for customer user access mutate. */
export interface MutateCustomerUserAccessResponse {
  /** Result for the mutate. */
  result: MutateCustomerUserAccessResult | undefined;
}

/** The result for the customer user access mutate. */
export interface MutateCustomerUserAccessResult {
  /** Returned for successful operations. */
  resourceName: string;
}

function createBaseMutateCustomerUserAccessRequest(): MutateCustomerUserAccessRequest {
  return { customerId: "", operation: undefined };
}

export const MutateCustomerUserAccessRequest: MessageFns<MutateCustomerUserAccessRequest> = {
  encode(message: MutateCustomerUserAccessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    if (message.operation !== undefined) {
      CustomerUserAccessOperation.encode(message.operation, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCustomerUserAccessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCustomerUserAccessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operation = CustomerUserAccessOperation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCustomerUserAccessRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      operation: isSet(object.operation) ? CustomerUserAccessOperation.fromJSON(object.operation) : undefined,
    };
  },

  toJSON(message: MutateCustomerUserAccessRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.operation !== undefined) {
      obj.operation = CustomerUserAccessOperation.toJSON(message.operation);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCustomerUserAccessRequest>): MutateCustomerUserAccessRequest {
    return MutateCustomerUserAccessRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCustomerUserAccessRequest>): MutateCustomerUserAccessRequest {
    const message = createBaseMutateCustomerUserAccessRequest();
    message.customerId = object.customerId ?? "";
    message.operation = (object.operation !== undefined && object.operation !== null)
      ? CustomerUserAccessOperation.fromPartial(object.operation)
      : undefined;
    return message;
  },
};

function createBaseCustomerUserAccessOperation(): CustomerUserAccessOperation {
  return { updateMask: undefined, update: undefined, remove: undefined };
}

export const CustomerUserAccessOperation: MessageFns<CustomerUserAccessOperation> = {
  encode(message: CustomerUserAccessOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    if (message.update !== undefined) {
      CustomerUserAccess.encode(message.update, writer.uint32(10).fork()).join();
    }
    if (message.remove !== undefined) {
      writer.uint32(18).string(message.remove);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerUserAccessOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerUserAccessOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.update = CustomerUserAccess.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.remove = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerUserAccessOperation {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      update: isSet(object.update) ? CustomerUserAccess.fromJSON(object.update) : undefined,
      remove: isSet(object.remove) ? globalThis.String(object.remove) : undefined,
    };
  },

  toJSON(message: CustomerUserAccessOperation): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.update !== undefined) {
      obj.update = CustomerUserAccess.toJSON(message.update);
    }
    if (message.remove !== undefined) {
      obj.remove = message.remove;
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerUserAccessOperation>): CustomerUserAccessOperation {
    return CustomerUserAccessOperation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerUserAccessOperation>): CustomerUserAccessOperation {
    const message = createBaseCustomerUserAccessOperation();
    message.updateMask = object.updateMask ?? undefined;
    message.update = (object.update !== undefined && object.update !== null)
      ? CustomerUserAccess.fromPartial(object.update)
      : undefined;
    message.remove = object.remove ?? undefined;
    return message;
  },
};

function createBaseMutateCustomerUserAccessResponse(): MutateCustomerUserAccessResponse {
  return { result: undefined };
}

export const MutateCustomerUserAccessResponse: MessageFns<MutateCustomerUserAccessResponse> = {
  encode(message: MutateCustomerUserAccessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== undefined) {
      MutateCustomerUserAccessResult.encode(message.result, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCustomerUserAccessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCustomerUserAccessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result = MutateCustomerUserAccessResult.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCustomerUserAccessResponse {
    return { result: isSet(object.result) ? MutateCustomerUserAccessResult.fromJSON(object.result) : undefined };
  },

  toJSON(message: MutateCustomerUserAccessResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = MutateCustomerUserAccessResult.toJSON(message.result);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCustomerUserAccessResponse>): MutateCustomerUserAccessResponse {
    return MutateCustomerUserAccessResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCustomerUserAccessResponse>): MutateCustomerUserAccessResponse {
    const message = createBaseMutateCustomerUserAccessResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? MutateCustomerUserAccessResult.fromPartial(object.result)
      : undefined;
    return message;
  },
};

function createBaseMutateCustomerUserAccessResult(): MutateCustomerUserAccessResult {
  return { resourceName: "" };
}

export const MutateCustomerUserAccessResult: MessageFns<MutateCustomerUserAccessResult> = {
  encode(message: MutateCustomerUserAccessResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCustomerUserAccessResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCustomerUserAccessResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCustomerUserAccessResult {
    return { resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "" };
  },

  toJSON(message: MutateCustomerUserAccessResult): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCustomerUserAccessResult>): MutateCustomerUserAccessResult {
    return MutateCustomerUserAccessResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCustomerUserAccessResult>): MutateCustomerUserAccessResult {
    const message = createBaseMutateCustomerUserAccessResult();
    message.resourceName = object.resourceName ?? "";
    return message;
  },
};

/** This service manages the permissions of a user on a given customer. */
export type CustomerUserAccessServiceDefinition = typeof CustomerUserAccessServiceDefinition;
export const CustomerUserAccessServiceDefinition = {
  name: "CustomerUserAccessService",
  fullName: "google.ads.googleads.v17.services.CustomerUserAccessService",
  methods: {
    /**
     * Updates, removes permission of a user on a given customer. Operation
     * statuses are returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [CustomerUserAccessError]()
     *   [FieldMaskError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    mutateCustomerUserAccess: {
      name: "MutateCustomerUserAccess",
      requestType: MutateCustomerUserAccessRequest,
      requestStream: false,
      responseType: MutateCustomerUserAccessResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              1,
              42,
              34,
              58,
              47,
              118,
              49,
              55,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              85,
              115,
              101,
              114,
              65,
              99,
              99,
              101,
              115,
              115,
              101,
              115,
              58,
              109,
              117,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CustomerUserAccessServiceImplementation<CallContextExt = {}> {
  /**
   * Updates, removes permission of a user on a given customer. Operation
   * statuses are returned.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [CustomerUserAccessError]()
   *   [FieldMaskError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [MutateError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  mutateCustomerUserAccess(
    request: MutateCustomerUserAccessRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MutateCustomerUserAccessResponse>>;
}

export interface CustomerUserAccessServiceClient<CallOptionsExt = {}> {
  /**
   * Updates, removes permission of a user on a given customer. Operation
   * statuses are returned.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [CustomerUserAccessError]()
   *   [FieldMaskError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [MutateError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  mutateCustomerUserAccess(
    request: DeepPartial<MutateCustomerUserAccessRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MutateCustomerUserAccessResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
