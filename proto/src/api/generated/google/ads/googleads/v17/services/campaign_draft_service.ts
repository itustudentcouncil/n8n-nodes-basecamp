// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/services/campaign_draft_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Status } from "../../../../rpc/status.js";
import {
  ResponseContentTypeEnum_ResponseContentType,
  responseContentTypeEnum_ResponseContentTypeFromJSON,
  responseContentTypeEnum_ResponseContentTypeToJSON,
} from "../enums/response_content_type.js";
import { CampaignDraft } from "../resources/campaign_draft.js";

export const protobufPackage = "google.ads.googleads.v17.services";

/**
 * Request message for
 * [CampaignDraftService.MutateCampaignDrafts][google.ads.googleads.v17.services.CampaignDraftService.MutateCampaignDrafts].
 */
export interface MutateCampaignDraftsRequest {
  /** Required. The ID of the customer whose campaign drafts are being modified. */
  customerId: string;
  /** Required. The list of operations to perform on individual campaign drafts. */
  operations: CampaignDraftOperation[];
  /**
   * If true, successful operations will be carried out and invalid
   * operations will return errors. If false, all operations will be carried
   * out in one transaction if and only if they are all valid.
   * Default is false.
   */
  partialFailure: boolean;
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
  /**
   * The response content type setting. Determines whether the mutable resource
   * or just the resource name should be returned post mutation.
   */
  responseContentType: ResponseContentTypeEnum_ResponseContentType;
}

/**
 * Request message for
 * [CampaignDraftService.PromoteCampaignDraft][google.ads.googleads.v17.services.CampaignDraftService.PromoteCampaignDraft].
 */
export interface PromoteCampaignDraftRequest {
  /** Required. The resource name of the campaign draft to promote. */
  campaignDraft: string;
  /**
   * If true, the request is validated but no Long Running Operation is created.
   * Only errors are returned.
   */
  validateOnly: boolean;
}

/** A single operation (create, update, remove) on a campaign draft. */
export interface CampaignDraftOperation {
  /** FieldMask that determines which resource fields are modified in an update. */
  updateMask:
    | string[]
    | undefined;
  /**
   * Create operation: No resource name is expected for the new campaign
   * draft.
   */
  create?:
    | CampaignDraft
    | undefined;
  /**
   * Update operation: The campaign draft is expected to have a valid
   * resource name.
   */
  update?:
    | CampaignDraft
    | undefined;
  /**
   * Remove operation: The campaign draft is expected to have a valid
   * resource name, in this format:
   *
   * `customers/{customer_id}/campaignDrafts/{base_campaign_id}~{draft_id}`
   */
  remove?: string | undefined;
}

/** Response message for campaign draft mutate. */
export interface MutateCampaignDraftsResponse {
  /**
   * Errors that pertain to operation failures in the partial failure mode.
   * Returned only when partial_failure = true and all errors occur inside the
   * operations. If any errors occur outside the operations (for example, auth
   * errors), we return an RPC level error.
   */
  partialFailureError:
    | Status
    | undefined;
  /** All results for the mutate. */
  results: MutateCampaignDraftResult[];
}

/** The result for the campaign draft mutate. */
export interface MutateCampaignDraftResult {
  /** Returned for successful operations. */
  resourceName: string;
  /**
   * The mutated campaign draft with only mutable fields after mutate. The field
   * will only be returned when response_content_type is set to
   * "MUTABLE_RESOURCE".
   */
  campaignDraft: CampaignDraft | undefined;
}

/**
 * Request message for
 * [CampaignDraftService.ListCampaignDraftAsyncErrors][google.ads.googleads.v17.services.CampaignDraftService.ListCampaignDraftAsyncErrors].
 */
export interface ListCampaignDraftAsyncErrorsRequest {
  /**
   * Required. The name of the campaign draft from which to retrieve the async
   * errors.
   */
  resourceName: string;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   */
  pageToken: string;
  /**
   * Number of elements to retrieve in a single page.
   * When a page request is too large, the server may decide to
   * further limit the number of returned resources.
   */
  pageSize: number;
}

/**
 * Response message for
 * [CampaignDraftService.ListCampaignDraftAsyncErrors][google.ads.googleads.v17.services.CampaignDraftService.ListCampaignDraftAsyncErrors].
 */
export interface ListCampaignDraftAsyncErrorsResponse {
  /** Details of the errors when performing the asynchronous operation. */
  errors: Status[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

function createBaseMutateCampaignDraftsRequest(): MutateCampaignDraftsRequest {
  return { customerId: "", operations: [], partialFailure: false, validateOnly: false, responseContentType: 0 };
}

export const MutateCampaignDraftsRequest: MessageFns<MutateCampaignDraftsRequest> = {
  encode(message: MutateCampaignDraftsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    for (const v of message.operations) {
      CampaignDraftOperation.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.partialFailure !== false) {
      writer.uint32(24).bool(message.partialFailure);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    if (message.responseContentType !== 0) {
      writer.uint32(40).int32(message.responseContentType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCampaignDraftsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCampaignDraftsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operations.push(CampaignDraftOperation.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.partialFailure = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.responseContentType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCampaignDraftsRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      operations: globalThis.Array.isArray(object?.operations)
        ? object.operations.map((e: any) => CampaignDraftOperation.fromJSON(e))
        : [],
      partialFailure: isSet(object.partialFailure) ? globalThis.Boolean(object.partialFailure) : false,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      responseContentType: isSet(object.responseContentType)
        ? responseContentTypeEnum_ResponseContentTypeFromJSON(object.responseContentType)
        : 0,
    };
  },

  toJSON(message: MutateCampaignDraftsRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.operations?.length) {
      obj.operations = message.operations.map((e) => CampaignDraftOperation.toJSON(e));
    }
    if (message.partialFailure !== false) {
      obj.partialFailure = message.partialFailure;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.responseContentType !== 0) {
      obj.responseContentType = responseContentTypeEnum_ResponseContentTypeToJSON(message.responseContentType);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCampaignDraftsRequest>): MutateCampaignDraftsRequest {
    return MutateCampaignDraftsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCampaignDraftsRequest>): MutateCampaignDraftsRequest {
    const message = createBaseMutateCampaignDraftsRequest();
    message.customerId = object.customerId ?? "";
    message.operations = object.operations?.map((e) => CampaignDraftOperation.fromPartial(e)) || [];
    message.partialFailure = object.partialFailure ?? false;
    message.validateOnly = object.validateOnly ?? false;
    message.responseContentType = object.responseContentType ?? 0;
    return message;
  },
};

function createBasePromoteCampaignDraftRequest(): PromoteCampaignDraftRequest {
  return { campaignDraft: "", validateOnly: false };
}

export const PromoteCampaignDraftRequest: MessageFns<PromoteCampaignDraftRequest> = {
  encode(message: PromoteCampaignDraftRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.campaignDraft !== "") {
      writer.uint32(10).string(message.campaignDraft);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PromoteCampaignDraftRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePromoteCampaignDraftRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.campaignDraft = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PromoteCampaignDraftRequest {
    return {
      campaignDraft: isSet(object.campaignDraft) ? globalThis.String(object.campaignDraft) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: PromoteCampaignDraftRequest): unknown {
    const obj: any = {};
    if (message.campaignDraft !== "") {
      obj.campaignDraft = message.campaignDraft;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<PromoteCampaignDraftRequest>): PromoteCampaignDraftRequest {
    return PromoteCampaignDraftRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PromoteCampaignDraftRequest>): PromoteCampaignDraftRequest {
    const message = createBasePromoteCampaignDraftRequest();
    message.campaignDraft = object.campaignDraft ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseCampaignDraftOperation(): CampaignDraftOperation {
  return { updateMask: undefined, create: undefined, update: undefined, remove: undefined };
}

export const CampaignDraftOperation: MessageFns<CampaignDraftOperation> = {
  encode(message: CampaignDraftOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    if (message.create !== undefined) {
      CampaignDraft.encode(message.create, writer.uint32(10).fork()).join();
    }
    if (message.update !== undefined) {
      CampaignDraft.encode(message.update, writer.uint32(18).fork()).join();
    }
    if (message.remove !== undefined) {
      writer.uint32(26).string(message.remove);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignDraftOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignDraftOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.create = CampaignDraft.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.update = CampaignDraft.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.remove = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CampaignDraftOperation {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      create: isSet(object.create) ? CampaignDraft.fromJSON(object.create) : undefined,
      update: isSet(object.update) ? CampaignDraft.fromJSON(object.update) : undefined,
      remove: isSet(object.remove) ? globalThis.String(object.remove) : undefined,
    };
  },

  toJSON(message: CampaignDraftOperation): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.create !== undefined) {
      obj.create = CampaignDraft.toJSON(message.create);
    }
    if (message.update !== undefined) {
      obj.update = CampaignDraft.toJSON(message.update);
    }
    if (message.remove !== undefined) {
      obj.remove = message.remove;
    }
    return obj;
  },

  create(base?: DeepPartial<CampaignDraftOperation>): CampaignDraftOperation {
    return CampaignDraftOperation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CampaignDraftOperation>): CampaignDraftOperation {
    const message = createBaseCampaignDraftOperation();
    message.updateMask = object.updateMask ?? undefined;
    message.create = (object.create !== undefined && object.create !== null)
      ? CampaignDraft.fromPartial(object.create)
      : undefined;
    message.update = (object.update !== undefined && object.update !== null)
      ? CampaignDraft.fromPartial(object.update)
      : undefined;
    message.remove = object.remove ?? undefined;
    return message;
  },
};

function createBaseMutateCampaignDraftsResponse(): MutateCampaignDraftsResponse {
  return { partialFailureError: undefined, results: [] };
}

export const MutateCampaignDraftsResponse: MessageFns<MutateCampaignDraftsResponse> = {
  encode(message: MutateCampaignDraftsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.partialFailureError !== undefined) {
      Status.encode(message.partialFailureError, writer.uint32(26).fork()).join();
    }
    for (const v of message.results) {
      MutateCampaignDraftResult.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCampaignDraftsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCampaignDraftsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.partialFailureError = Status.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.results.push(MutateCampaignDraftResult.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCampaignDraftsResponse {
    return {
      partialFailureError: isSet(object.partialFailureError) ? Status.fromJSON(object.partialFailureError) : undefined,
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => MutateCampaignDraftResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MutateCampaignDraftsResponse): unknown {
    const obj: any = {};
    if (message.partialFailureError !== undefined) {
      obj.partialFailureError = Status.toJSON(message.partialFailureError);
    }
    if (message.results?.length) {
      obj.results = message.results.map((e) => MutateCampaignDraftResult.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCampaignDraftsResponse>): MutateCampaignDraftsResponse {
    return MutateCampaignDraftsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCampaignDraftsResponse>): MutateCampaignDraftsResponse {
    const message = createBaseMutateCampaignDraftsResponse();
    message.partialFailureError = (object.partialFailureError !== undefined && object.partialFailureError !== null)
      ? Status.fromPartial(object.partialFailureError)
      : undefined;
    message.results = object.results?.map((e) => MutateCampaignDraftResult.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMutateCampaignDraftResult(): MutateCampaignDraftResult {
  return { resourceName: "", campaignDraft: undefined };
}

export const MutateCampaignDraftResult: MessageFns<MutateCampaignDraftResult> = {
  encode(message: MutateCampaignDraftResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.campaignDraft !== undefined) {
      CampaignDraft.encode(message.campaignDraft, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCampaignDraftResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCampaignDraftResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.campaignDraft = CampaignDraft.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCampaignDraftResult {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      campaignDraft: isSet(object.campaignDraft) ? CampaignDraft.fromJSON(object.campaignDraft) : undefined,
    };
  },

  toJSON(message: MutateCampaignDraftResult): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.campaignDraft !== undefined) {
      obj.campaignDraft = CampaignDraft.toJSON(message.campaignDraft);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCampaignDraftResult>): MutateCampaignDraftResult {
    return MutateCampaignDraftResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCampaignDraftResult>): MutateCampaignDraftResult {
    const message = createBaseMutateCampaignDraftResult();
    message.resourceName = object.resourceName ?? "";
    message.campaignDraft = (object.campaignDraft !== undefined && object.campaignDraft !== null)
      ? CampaignDraft.fromPartial(object.campaignDraft)
      : undefined;
    return message;
  },
};

function createBaseListCampaignDraftAsyncErrorsRequest(): ListCampaignDraftAsyncErrorsRequest {
  return { resourceName: "", pageToken: "", pageSize: 0 };
}

export const ListCampaignDraftAsyncErrorsRequest: MessageFns<ListCampaignDraftAsyncErrorsRequest> = {
  encode(message: ListCampaignDraftAsyncErrorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCampaignDraftAsyncErrorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCampaignDraftAsyncErrorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCampaignDraftAsyncErrorsRequest {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListCampaignDraftAsyncErrorsRequest): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListCampaignDraftAsyncErrorsRequest>): ListCampaignDraftAsyncErrorsRequest {
    return ListCampaignDraftAsyncErrorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCampaignDraftAsyncErrorsRequest>): ListCampaignDraftAsyncErrorsRequest {
    const message = createBaseListCampaignDraftAsyncErrorsRequest();
    message.resourceName = object.resourceName ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListCampaignDraftAsyncErrorsResponse(): ListCampaignDraftAsyncErrorsResponse {
  return { errors: [], nextPageToken: "" };
}

export const ListCampaignDraftAsyncErrorsResponse: MessageFns<ListCampaignDraftAsyncErrorsResponse> = {
  encode(message: ListCampaignDraftAsyncErrorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.errors) {
      Status.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCampaignDraftAsyncErrorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCampaignDraftAsyncErrorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.errors.push(Status.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCampaignDraftAsyncErrorsResponse {
    return {
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => Status.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCampaignDraftAsyncErrorsResponse): unknown {
    const obj: any = {};
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => Status.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCampaignDraftAsyncErrorsResponse>): ListCampaignDraftAsyncErrorsResponse {
    return ListCampaignDraftAsyncErrorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCampaignDraftAsyncErrorsResponse>): ListCampaignDraftAsyncErrorsResponse {
    const message = createBaseListCampaignDraftAsyncErrorsResponse();
    message.errors = object.errors?.map((e) => Status.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** Service to manage campaign drafts. */
export type CampaignDraftServiceDefinition = typeof CampaignDraftServiceDefinition;
export const CampaignDraftServiceDefinition = {
  name: "CampaignDraftService",
  fullName: "google.ads.googleads.v17.services.CampaignDraftService",
  methods: {
    /**
     * Creates, updates, or removes campaign drafts. Operation statuses are
     * returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [CampaignDraftError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    mutateCampaignDrafts: {
      name: "MutateCampaignDrafts",
      requestType: MutateCampaignDraftsRequest,
      requestStream: false,
      responseType: MutateCampaignDraftsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              57,
              58,
              1,
              42,
              34,
              52,
              47,
              118,
              49,
              55,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              99,
              97,
              109,
              112,
              97,
              105,
              103,
              110,
              68,
              114,
              97,
              102,
              116,
              115,
              58,
              109,
              117,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Promotes the changes in a draft back to the base campaign.
     *
     * This method returns a Long Running Operation (LRO) indicating if the
     * Promote is done. Use [Operations.GetOperation] to poll the LRO until it
     * is done. Only a done status is returned in the response. See the status
     * in the Campaign Draft resource to determine if the promotion was
     * successful. If the LRO failed, use
     * [CampaignDraftService.ListCampaignDraftAsyncErrors][google.ads.googleads.v17.services.CampaignDraftService.ListCampaignDraftAsyncErrors]
     * to view the list of error reasons.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [CampaignDraftError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    promoteCampaignDraft: {
      name: "PromoteCampaignDraft",
      requestType: PromoteCampaignDraftRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              46,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
            ]),
          ],
          8410: [Buffer.from([14, 99, 97, 109, 112, 97, 105, 103, 110, 95, 100, 114, 97, 102, 116])],
          578365826: [
            Buffer.from([
              63,
              58,
              1,
              42,
              34,
              58,
              47,
              118,
              49,
              55,
              47,
              123,
              99,
              97,
              109,
              112,
              97,
              105,
              103,
              110,
              95,
              100,
              114,
              97,
              102,
              116,
              61,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              97,
              109,
              112,
              97,
              105,
              103,
              110,
              68,
              114,
              97,
              102,
              116,
              115,
              47,
              42,
              125,
              58,
              112,
              114,
              111,
              109,
              111,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Returns all errors that occurred during CampaignDraft promote. Throws an
     * error if called before campaign draft is promoted.
     * Supports standard list paging.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    listCampaignDraftAsyncErrors: {
      name: "ListCampaignDraftAsyncErrors",
      requestType: ListCampaignDraftAsyncErrorsRequest,
      requestStream: false,
      responseType: ListCampaignDraftAsyncErrorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 114, 101, 115, 111, 117, 114, 99, 101, 95, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              67,
              18,
              65,
              47,
              118,
              49,
              55,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              61,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              97,
              109,
              112,
              97,
              105,
              103,
              110,
              68,
              114,
              97,
              102,
              116,
              115,
              47,
              42,
              125,
              58,
              108,
              105,
              115,
              116,
              65,
              115,
              121,
              110,
              99,
              69,
              114,
              114,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CampaignDraftServiceImplementation<CallContextExt = {}> {
  /**
   * Creates, updates, or removes campaign drafts. Operation statuses are
   * returned.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [CampaignDraftError]()
   *   [DatabaseError]()
   *   [FieldError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [MutateError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  mutateCampaignDrafts(
    request: MutateCampaignDraftsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MutateCampaignDraftsResponse>>;
  /**
   * Promotes the changes in a draft back to the base campaign.
   *
   * This method returns a Long Running Operation (LRO) indicating if the
   * Promote is done. Use [Operations.GetOperation] to poll the LRO until it
   * is done. Only a done status is returned in the response. See the status
   * in the Campaign Draft resource to determine if the promotion was
   * successful. If the LRO failed, use
   * [CampaignDraftService.ListCampaignDraftAsyncErrors][google.ads.googleads.v17.services.CampaignDraftService.ListCampaignDraftAsyncErrors]
   * to view the list of error reasons.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [CampaignDraftError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  promoteCampaignDraft(
    request: PromoteCampaignDraftRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Returns all errors that occurred during CampaignDraft promote. Throws an
   * error if called before campaign draft is promoted.
   * Supports standard list paging.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  listCampaignDraftAsyncErrors(
    request: ListCampaignDraftAsyncErrorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCampaignDraftAsyncErrorsResponse>>;
}

export interface CampaignDraftServiceClient<CallOptionsExt = {}> {
  /**
   * Creates, updates, or removes campaign drafts. Operation statuses are
   * returned.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [CampaignDraftError]()
   *   [DatabaseError]()
   *   [FieldError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [MutateError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  mutateCampaignDrafts(
    request: DeepPartial<MutateCampaignDraftsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MutateCampaignDraftsResponse>;
  /**
   * Promotes the changes in a draft back to the base campaign.
   *
   * This method returns a Long Running Operation (LRO) indicating if the
   * Promote is done. Use [Operations.GetOperation] to poll the LRO until it
   * is done. Only a done status is returned in the response. See the status
   * in the Campaign Draft resource to determine if the promotion was
   * successful. If the LRO failed, use
   * [CampaignDraftService.ListCampaignDraftAsyncErrors][google.ads.googleads.v17.services.CampaignDraftService.ListCampaignDraftAsyncErrors]
   * to view the list of error reasons.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [CampaignDraftError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  promoteCampaignDraft(
    request: DeepPartial<PromoteCampaignDraftRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Returns all errors that occurred during CampaignDraft promote. Throws an
   * error if called before campaign draft is promoted.
   * Supports standard list paging.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  listCampaignDraftAsyncErrors(
    request: DeepPartial<ListCampaignDraftAsyncErrorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCampaignDraftAsyncErrorsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
