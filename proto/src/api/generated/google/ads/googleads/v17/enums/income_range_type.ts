// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/enums/income_range_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.enums";

/** Container for enum describing the type of demographic income ranges. */
export interface IncomeRangeTypeEnum {
}

/** The type of demographic income ranges (for example, between 0% to 50%). */
export enum IncomeRangeTypeEnum_IncomeRangeType {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /** INCOME_RANGE_0_50 - 0%-50%. */
  INCOME_RANGE_0_50 = 510001,
  /** INCOME_RANGE_50_60 - 50% to 60%. */
  INCOME_RANGE_50_60 = 510002,
  /** INCOME_RANGE_60_70 - 60% to 70%. */
  INCOME_RANGE_60_70 = 510003,
  /** INCOME_RANGE_70_80 - 70% to 80%. */
  INCOME_RANGE_70_80 = 510004,
  /** INCOME_RANGE_80_90 - 80% to 90%. */
  INCOME_RANGE_80_90 = 510005,
  /** INCOME_RANGE_90_UP - Greater than 90%. */
  INCOME_RANGE_90_UP = 510006,
  /** INCOME_RANGE_UNDETERMINED - Undetermined income range. */
  INCOME_RANGE_UNDETERMINED = 510000,
  UNRECOGNIZED = -1,
}

export function incomeRangeTypeEnum_IncomeRangeTypeFromJSON(object: any): IncomeRangeTypeEnum_IncomeRangeType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return IncomeRangeTypeEnum_IncomeRangeType.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return IncomeRangeTypeEnum_IncomeRangeType.UNKNOWN;
    case 510001:
    case "INCOME_RANGE_0_50":
      return IncomeRangeTypeEnum_IncomeRangeType.INCOME_RANGE_0_50;
    case 510002:
    case "INCOME_RANGE_50_60":
      return IncomeRangeTypeEnum_IncomeRangeType.INCOME_RANGE_50_60;
    case 510003:
    case "INCOME_RANGE_60_70":
      return IncomeRangeTypeEnum_IncomeRangeType.INCOME_RANGE_60_70;
    case 510004:
    case "INCOME_RANGE_70_80":
      return IncomeRangeTypeEnum_IncomeRangeType.INCOME_RANGE_70_80;
    case 510005:
    case "INCOME_RANGE_80_90":
      return IncomeRangeTypeEnum_IncomeRangeType.INCOME_RANGE_80_90;
    case 510006:
    case "INCOME_RANGE_90_UP":
      return IncomeRangeTypeEnum_IncomeRangeType.INCOME_RANGE_90_UP;
    case 510000:
    case "INCOME_RANGE_UNDETERMINED":
      return IncomeRangeTypeEnum_IncomeRangeType.INCOME_RANGE_UNDETERMINED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IncomeRangeTypeEnum_IncomeRangeType.UNRECOGNIZED;
  }
}

export function incomeRangeTypeEnum_IncomeRangeTypeToJSON(object: IncomeRangeTypeEnum_IncomeRangeType): string {
  switch (object) {
    case IncomeRangeTypeEnum_IncomeRangeType.UNSPECIFIED:
      return "UNSPECIFIED";
    case IncomeRangeTypeEnum_IncomeRangeType.UNKNOWN:
      return "UNKNOWN";
    case IncomeRangeTypeEnum_IncomeRangeType.INCOME_RANGE_0_50:
      return "INCOME_RANGE_0_50";
    case IncomeRangeTypeEnum_IncomeRangeType.INCOME_RANGE_50_60:
      return "INCOME_RANGE_50_60";
    case IncomeRangeTypeEnum_IncomeRangeType.INCOME_RANGE_60_70:
      return "INCOME_RANGE_60_70";
    case IncomeRangeTypeEnum_IncomeRangeType.INCOME_RANGE_70_80:
      return "INCOME_RANGE_70_80";
    case IncomeRangeTypeEnum_IncomeRangeType.INCOME_RANGE_80_90:
      return "INCOME_RANGE_80_90";
    case IncomeRangeTypeEnum_IncomeRangeType.INCOME_RANGE_90_UP:
      return "INCOME_RANGE_90_UP";
    case IncomeRangeTypeEnum_IncomeRangeType.INCOME_RANGE_UNDETERMINED:
      return "INCOME_RANGE_UNDETERMINED";
    case IncomeRangeTypeEnum_IncomeRangeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseIncomeRangeTypeEnum(): IncomeRangeTypeEnum {
  return {};
}

export const IncomeRangeTypeEnum: MessageFns<IncomeRangeTypeEnum> = {
  encode(_: IncomeRangeTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IncomeRangeTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomeRangeTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): IncomeRangeTypeEnum {
    return {};
  },

  toJSON(_: IncomeRangeTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<IncomeRangeTypeEnum>): IncomeRangeTypeEnum {
    return IncomeRangeTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<IncomeRangeTypeEnum>): IncomeRangeTypeEnum {
    const message = createBaseIncomeRangeTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
