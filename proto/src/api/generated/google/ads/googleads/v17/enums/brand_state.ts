// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/enums/brand_state.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.enums";

/** Container for enum describing possible brand states. */
export interface BrandStateEnum {
}

/** Enumeration of different brand states. */
export enum BrandStateEnum_BrandState {
  /** UNSPECIFIED - No value has been specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /** ENABLED - Brand is verified and globally available for selection */
  ENABLED = 2,
  /**
   * DEPRECATED - Brand was globally available in past but is no longer a valid brand
   * (based on business criteria)
   */
  DEPRECATED = 3,
  /**
   * UNVERIFIED - Brand is unverified and customer scoped, but can be selected by customer
   * (only who requested for same) for targeting
   */
  UNVERIFIED = 4,
  /**
   * APPROVED - Was a customer-scoped (unverified) brand, which got approved by business
   * and added to the global list. Its assigned CKG MID should be used instead
   * of this
   */
  APPROVED = 5,
  /**
   * CANCELLED - Was a customer-scoped (unverified) brand, but the request was canceled by
   * customer and this brand id is no longer valid
   */
  CANCELLED = 6,
  /**
   * REJECTED - Was a customer-scoped (unverified) brand, but the request was rejected by
   * internal business team and this brand id is no longer valid
   */
  REJECTED = 7,
  UNRECOGNIZED = -1,
}

export function brandStateEnum_BrandStateFromJSON(object: any): BrandStateEnum_BrandState {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return BrandStateEnum_BrandState.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return BrandStateEnum_BrandState.UNKNOWN;
    case 2:
    case "ENABLED":
      return BrandStateEnum_BrandState.ENABLED;
    case 3:
    case "DEPRECATED":
      return BrandStateEnum_BrandState.DEPRECATED;
    case 4:
    case "UNVERIFIED":
      return BrandStateEnum_BrandState.UNVERIFIED;
    case 5:
    case "APPROVED":
      return BrandStateEnum_BrandState.APPROVED;
    case 6:
    case "CANCELLED":
      return BrandStateEnum_BrandState.CANCELLED;
    case 7:
    case "REJECTED":
      return BrandStateEnum_BrandState.REJECTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BrandStateEnum_BrandState.UNRECOGNIZED;
  }
}

export function brandStateEnum_BrandStateToJSON(object: BrandStateEnum_BrandState): string {
  switch (object) {
    case BrandStateEnum_BrandState.UNSPECIFIED:
      return "UNSPECIFIED";
    case BrandStateEnum_BrandState.UNKNOWN:
      return "UNKNOWN";
    case BrandStateEnum_BrandState.ENABLED:
      return "ENABLED";
    case BrandStateEnum_BrandState.DEPRECATED:
      return "DEPRECATED";
    case BrandStateEnum_BrandState.UNVERIFIED:
      return "UNVERIFIED";
    case BrandStateEnum_BrandState.APPROVED:
      return "APPROVED";
    case BrandStateEnum_BrandState.CANCELLED:
      return "CANCELLED";
    case BrandStateEnum_BrandState.REJECTED:
      return "REJECTED";
    case BrandStateEnum_BrandState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseBrandStateEnum(): BrandStateEnum {
  return {};
}

export const BrandStateEnum: MessageFns<BrandStateEnum> = {
  encode(_: BrandStateEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BrandStateEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrandStateEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): BrandStateEnum {
    return {};
  },

  toJSON(_: BrandStateEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<BrandStateEnum>): BrandStateEnum {
    return BrandStateEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<BrandStateEnum>): BrandStateEnum {
    const message = createBaseBrandStateEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
