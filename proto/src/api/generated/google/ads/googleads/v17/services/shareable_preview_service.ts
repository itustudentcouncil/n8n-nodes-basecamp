// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/services/shareable_preview_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Status } from "../../../../rpc/status.js";

export const protobufPackage = "google.ads.googleads.v17.services";

/**
 * Request message for
 * [ShareablePreviewService.GenerateShareablePreviews][google.ads.googleads.v17.services.ShareablePreviewService.GenerateShareablePreviews].
 */
export interface GenerateShareablePreviewsRequest {
  /** Required. The customer creating the shareable previews request. */
  customerId: string;
  /** Required. The list of shareable previews to generate. */
  shareablePreviews: ShareablePreview[];
}

/** A shareable preview with its identifier. */
export interface ShareablePreview {
  /** Required. Asset group of the shareable preview. */
  assetGroupIdentifier: AssetGroupIdentifier | undefined;
}

/** Asset group of the shareable preview. */
export interface AssetGroupIdentifier {
  /** Required. The asset group identifier. */
  assetGroupId: Long;
}

/**
 * Response message for
 * [ShareablePreviewService.GenerateShareablePreviews][google.ads.googleads.v17.services.ShareablePreviewService.GenerateShareablePreviews].
 */
export interface GenerateShareablePreviewsResponse {
  /** List of generate shareable preview results. */
  responses: ShareablePreviewOrError[];
}

/** Result of the generate shareable preview. */
export interface ShareablePreviewOrError {
  /** The asset group of the shareable preview. */
  assetGroupIdentifier:
    | AssetGroupIdentifier
    | undefined;
  /** The shareable preview result. */
  shareablePreviewResult?:
    | ShareablePreviewResult
    | undefined;
  /** The shareable preview partial failure error. */
  partialFailureError?: Status | undefined;
}

/** Message to hold a shareable preview result. */
export interface ShareablePreviewResult {
  /** The shareable preview URL. */
  shareablePreviewUrl: string;
  /** Expiration date time using the ISO-8601 format. */
  expirationDateTime: string;
}

function createBaseGenerateShareablePreviewsRequest(): GenerateShareablePreviewsRequest {
  return { customerId: "", shareablePreviews: [] };
}

export const GenerateShareablePreviewsRequest: MessageFns<GenerateShareablePreviewsRequest> = {
  encode(message: GenerateShareablePreviewsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    for (const v of message.shareablePreviews) {
      ShareablePreview.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateShareablePreviewsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateShareablePreviewsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.shareablePreviews.push(ShareablePreview.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateShareablePreviewsRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      shareablePreviews: globalThis.Array.isArray(object?.shareablePreviews)
        ? object.shareablePreviews.map((e: any) => ShareablePreview.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenerateShareablePreviewsRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.shareablePreviews?.length) {
      obj.shareablePreviews = message.shareablePreviews.map((e) => ShareablePreview.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateShareablePreviewsRequest>): GenerateShareablePreviewsRequest {
    return GenerateShareablePreviewsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateShareablePreviewsRequest>): GenerateShareablePreviewsRequest {
    const message = createBaseGenerateShareablePreviewsRequest();
    message.customerId = object.customerId ?? "";
    message.shareablePreviews = object.shareablePreviews?.map((e) => ShareablePreview.fromPartial(e)) || [];
    return message;
  },
};

function createBaseShareablePreview(): ShareablePreview {
  return { assetGroupIdentifier: undefined };
}

export const ShareablePreview: MessageFns<ShareablePreview> = {
  encode(message: ShareablePreview, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assetGroupIdentifier !== undefined) {
      AssetGroupIdentifier.encode(message.assetGroupIdentifier, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShareablePreview {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShareablePreview();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.assetGroupIdentifier = AssetGroupIdentifier.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShareablePreview {
    return {
      assetGroupIdentifier: isSet(object.assetGroupIdentifier)
        ? AssetGroupIdentifier.fromJSON(object.assetGroupIdentifier)
        : undefined,
    };
  },

  toJSON(message: ShareablePreview): unknown {
    const obj: any = {};
    if (message.assetGroupIdentifier !== undefined) {
      obj.assetGroupIdentifier = AssetGroupIdentifier.toJSON(message.assetGroupIdentifier);
    }
    return obj;
  },

  create(base?: DeepPartial<ShareablePreview>): ShareablePreview {
    return ShareablePreview.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ShareablePreview>): ShareablePreview {
    const message = createBaseShareablePreview();
    message.assetGroupIdentifier = (object.assetGroupIdentifier !== undefined && object.assetGroupIdentifier !== null)
      ? AssetGroupIdentifier.fromPartial(object.assetGroupIdentifier)
      : undefined;
    return message;
  },
};

function createBaseAssetGroupIdentifier(): AssetGroupIdentifier {
  return { assetGroupId: Long.ZERO };
}

export const AssetGroupIdentifier: MessageFns<AssetGroupIdentifier> = {
  encode(message: AssetGroupIdentifier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.assetGroupId.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.assetGroupId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetGroupIdentifier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetGroupIdentifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.assetGroupId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssetGroupIdentifier {
    return { assetGroupId: isSet(object.assetGroupId) ? Long.fromValue(object.assetGroupId) : Long.ZERO };
  },

  toJSON(message: AssetGroupIdentifier): unknown {
    const obj: any = {};
    if (!message.assetGroupId.equals(Long.ZERO)) {
      obj.assetGroupId = (message.assetGroupId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<AssetGroupIdentifier>): AssetGroupIdentifier {
    return AssetGroupIdentifier.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AssetGroupIdentifier>): AssetGroupIdentifier {
    const message = createBaseAssetGroupIdentifier();
    message.assetGroupId = (object.assetGroupId !== undefined && object.assetGroupId !== null)
      ? Long.fromValue(object.assetGroupId)
      : Long.ZERO;
    return message;
  },
};

function createBaseGenerateShareablePreviewsResponse(): GenerateShareablePreviewsResponse {
  return { responses: [] };
}

export const GenerateShareablePreviewsResponse: MessageFns<GenerateShareablePreviewsResponse> = {
  encode(message: GenerateShareablePreviewsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.responses) {
      ShareablePreviewOrError.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateShareablePreviewsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateShareablePreviewsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.responses.push(ShareablePreviewOrError.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateShareablePreviewsResponse {
    return {
      responses: globalThis.Array.isArray(object?.responses)
        ? object.responses.map((e: any) => ShareablePreviewOrError.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenerateShareablePreviewsResponse): unknown {
    const obj: any = {};
    if (message.responses?.length) {
      obj.responses = message.responses.map((e) => ShareablePreviewOrError.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateShareablePreviewsResponse>): GenerateShareablePreviewsResponse {
    return GenerateShareablePreviewsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateShareablePreviewsResponse>): GenerateShareablePreviewsResponse {
    const message = createBaseGenerateShareablePreviewsResponse();
    message.responses = object.responses?.map((e) => ShareablePreviewOrError.fromPartial(e)) || [];
    return message;
  },
};

function createBaseShareablePreviewOrError(): ShareablePreviewOrError {
  return { assetGroupIdentifier: undefined, shareablePreviewResult: undefined, partialFailureError: undefined };
}

export const ShareablePreviewOrError: MessageFns<ShareablePreviewOrError> = {
  encode(message: ShareablePreviewOrError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assetGroupIdentifier !== undefined) {
      AssetGroupIdentifier.encode(message.assetGroupIdentifier, writer.uint32(26).fork()).join();
    }
    if (message.shareablePreviewResult !== undefined) {
      ShareablePreviewResult.encode(message.shareablePreviewResult, writer.uint32(10).fork()).join();
    }
    if (message.partialFailureError !== undefined) {
      Status.encode(message.partialFailureError, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShareablePreviewOrError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShareablePreviewOrError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.assetGroupIdentifier = AssetGroupIdentifier.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.shareablePreviewResult = ShareablePreviewResult.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.partialFailureError = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShareablePreviewOrError {
    return {
      assetGroupIdentifier: isSet(object.assetGroupIdentifier)
        ? AssetGroupIdentifier.fromJSON(object.assetGroupIdentifier)
        : undefined,
      shareablePreviewResult: isSet(object.shareablePreviewResult)
        ? ShareablePreviewResult.fromJSON(object.shareablePreviewResult)
        : undefined,
      partialFailureError: isSet(object.partialFailureError) ? Status.fromJSON(object.partialFailureError) : undefined,
    };
  },

  toJSON(message: ShareablePreviewOrError): unknown {
    const obj: any = {};
    if (message.assetGroupIdentifier !== undefined) {
      obj.assetGroupIdentifier = AssetGroupIdentifier.toJSON(message.assetGroupIdentifier);
    }
    if (message.shareablePreviewResult !== undefined) {
      obj.shareablePreviewResult = ShareablePreviewResult.toJSON(message.shareablePreviewResult);
    }
    if (message.partialFailureError !== undefined) {
      obj.partialFailureError = Status.toJSON(message.partialFailureError);
    }
    return obj;
  },

  create(base?: DeepPartial<ShareablePreviewOrError>): ShareablePreviewOrError {
    return ShareablePreviewOrError.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ShareablePreviewOrError>): ShareablePreviewOrError {
    const message = createBaseShareablePreviewOrError();
    message.assetGroupIdentifier = (object.assetGroupIdentifier !== undefined && object.assetGroupIdentifier !== null)
      ? AssetGroupIdentifier.fromPartial(object.assetGroupIdentifier)
      : undefined;
    message.shareablePreviewResult =
      (object.shareablePreviewResult !== undefined && object.shareablePreviewResult !== null)
        ? ShareablePreviewResult.fromPartial(object.shareablePreviewResult)
        : undefined;
    message.partialFailureError = (object.partialFailureError !== undefined && object.partialFailureError !== null)
      ? Status.fromPartial(object.partialFailureError)
      : undefined;
    return message;
  },
};

function createBaseShareablePreviewResult(): ShareablePreviewResult {
  return { shareablePreviewUrl: "", expirationDateTime: "" };
}

export const ShareablePreviewResult: MessageFns<ShareablePreviewResult> = {
  encode(message: ShareablePreviewResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shareablePreviewUrl !== "") {
      writer.uint32(10).string(message.shareablePreviewUrl);
    }
    if (message.expirationDateTime !== "") {
      writer.uint32(18).string(message.expirationDateTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShareablePreviewResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShareablePreviewResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.shareablePreviewUrl = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.expirationDateTime = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShareablePreviewResult {
    return {
      shareablePreviewUrl: isSet(object.shareablePreviewUrl) ? globalThis.String(object.shareablePreviewUrl) : "",
      expirationDateTime: isSet(object.expirationDateTime) ? globalThis.String(object.expirationDateTime) : "",
    };
  },

  toJSON(message: ShareablePreviewResult): unknown {
    const obj: any = {};
    if (message.shareablePreviewUrl !== "") {
      obj.shareablePreviewUrl = message.shareablePreviewUrl;
    }
    if (message.expirationDateTime !== "") {
      obj.expirationDateTime = message.expirationDateTime;
    }
    return obj;
  },

  create(base?: DeepPartial<ShareablePreviewResult>): ShareablePreviewResult {
    return ShareablePreviewResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ShareablePreviewResult>): ShareablePreviewResult {
    const message = createBaseShareablePreviewResult();
    message.shareablePreviewUrl = object.shareablePreviewUrl ?? "";
    message.expirationDateTime = object.expirationDateTime ?? "";
    return message;
  },
};

/** Service to generate Shareable Previews. */
export type ShareablePreviewServiceDefinition = typeof ShareablePreviewServiceDefinition;
export const ShareablePreviewServiceDefinition = {
  name: "ShareablePreviewService",
  fullName: "google.ads.googleads.v17.services.ShareablePreviewService",
  methods: {
    /** Returns the requested Shareable Preview. */
    generateShareablePreviews: {
      name: "GenerateShareablePreviews",
      requestType: GenerateShareablePreviewsRequest,
      requestStream: false,
      responseType: GenerateShareablePreviewsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              30,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              115,
              104,
              97,
              114,
              101,
              97,
              98,
              108,
              101,
              95,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              118,
              49,
              55,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              83,
              104,
              97,
              114,
              101,
              97,
              98,
              108,
              101,
              80,
              114,
              101,
              118,
              105,
              101,
              119,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ShareablePreviewServiceImplementation<CallContextExt = {}> {
  /** Returns the requested Shareable Preview. */
  generateShareablePreviews(
    request: GenerateShareablePreviewsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateShareablePreviewsResponse>>;
}

export interface ShareablePreviewServiceClient<CallOptionsExt = {}> {
  /** Returns the requested Shareable Preview. */
  generateShareablePreviews(
    request: DeepPartial<GenerateShareablePreviewsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateShareablePreviewsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
