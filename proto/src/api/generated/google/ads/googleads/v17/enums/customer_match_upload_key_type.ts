// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/enums/customer_match_upload_key_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.enums";

/** Indicates what type of data are the user list's members matched from. */
export interface CustomerMatchUploadKeyTypeEnum {
}

/** Enum describing possible customer match upload key types. */
export enum CustomerMatchUploadKeyTypeEnum_CustomerMatchUploadKeyType {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /**
   * CONTACT_INFO - Members are matched from customer info such as email address, phone
   * number or physical address.
   */
  CONTACT_INFO = 2,
  /**
   * CRM_ID - Members are matched from a user id generated and assigned by the
   * advertiser.
   */
  CRM_ID = 3,
  /** MOBILE_ADVERTISING_ID - Members are matched from mobile advertising ids. */
  MOBILE_ADVERTISING_ID = 4,
  UNRECOGNIZED = -1,
}

export function customerMatchUploadKeyTypeEnum_CustomerMatchUploadKeyTypeFromJSON(
  object: any,
): CustomerMatchUploadKeyTypeEnum_CustomerMatchUploadKeyType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return CustomerMatchUploadKeyTypeEnum_CustomerMatchUploadKeyType.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return CustomerMatchUploadKeyTypeEnum_CustomerMatchUploadKeyType.UNKNOWN;
    case 2:
    case "CONTACT_INFO":
      return CustomerMatchUploadKeyTypeEnum_CustomerMatchUploadKeyType.CONTACT_INFO;
    case 3:
    case "CRM_ID":
      return CustomerMatchUploadKeyTypeEnum_CustomerMatchUploadKeyType.CRM_ID;
    case 4:
    case "MOBILE_ADVERTISING_ID":
      return CustomerMatchUploadKeyTypeEnum_CustomerMatchUploadKeyType.MOBILE_ADVERTISING_ID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CustomerMatchUploadKeyTypeEnum_CustomerMatchUploadKeyType.UNRECOGNIZED;
  }
}

export function customerMatchUploadKeyTypeEnum_CustomerMatchUploadKeyTypeToJSON(
  object: CustomerMatchUploadKeyTypeEnum_CustomerMatchUploadKeyType,
): string {
  switch (object) {
    case CustomerMatchUploadKeyTypeEnum_CustomerMatchUploadKeyType.UNSPECIFIED:
      return "UNSPECIFIED";
    case CustomerMatchUploadKeyTypeEnum_CustomerMatchUploadKeyType.UNKNOWN:
      return "UNKNOWN";
    case CustomerMatchUploadKeyTypeEnum_CustomerMatchUploadKeyType.CONTACT_INFO:
      return "CONTACT_INFO";
    case CustomerMatchUploadKeyTypeEnum_CustomerMatchUploadKeyType.CRM_ID:
      return "CRM_ID";
    case CustomerMatchUploadKeyTypeEnum_CustomerMatchUploadKeyType.MOBILE_ADVERTISING_ID:
      return "MOBILE_ADVERTISING_ID";
    case CustomerMatchUploadKeyTypeEnum_CustomerMatchUploadKeyType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCustomerMatchUploadKeyTypeEnum(): CustomerMatchUploadKeyTypeEnum {
  return {};
}

export const CustomerMatchUploadKeyTypeEnum: MessageFns<CustomerMatchUploadKeyTypeEnum> = {
  encode(_: CustomerMatchUploadKeyTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerMatchUploadKeyTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerMatchUploadKeyTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CustomerMatchUploadKeyTypeEnum {
    return {};
  },

  toJSON(_: CustomerMatchUploadKeyTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CustomerMatchUploadKeyTypeEnum>): CustomerMatchUploadKeyTypeEnum {
    return CustomerMatchUploadKeyTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CustomerMatchUploadKeyTypeEnum>): CustomerMatchUploadKeyTypeEnum {
    const message = createBaseCustomerMatchUploadKeyTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
