// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/click_view.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ClickLocation } from "../common/click_location.js";
import { KeywordInfo } from "../common/criteria.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/**
 * A click view with metrics aggregated at each click level, including both
 * valid and invalid clicks. For non-Search campaigns, metrics.clicks
 * represents the number of valid and invalid interactions.
 * Queries including ClickView must have a filter limiting the results to one
 * day and can be requested for dates back to 90 days before the time of the
 * request.
 */
export interface ClickView {
  /**
   * Output only. The resource name of the click view.
   * Click view resource names have the form:
   *
   * `customers/{customer_id}/clickViews/{date (yyyy-MM-dd)}~{gclid}`
   */
  resourceName: string;
  /** Output only. The Google Click ID. */
  gclid?:
    | string
    | undefined;
  /**
   * Output only. The location criteria matching the area of interest associated
   * with the impression.
   */
  areaOfInterest:
    | ClickLocation
    | undefined;
  /**
   * Output only. The location criteria matching the location of presence
   * associated with the impression.
   */
  locationOfPresence:
    | ClickLocation
    | undefined;
  /** Output only. Page number in search results where the ad was shown. */
  pageNumber?:
    | Long
    | undefined;
  /** Output only. The associated ad. */
  adGroupAd?:
    | string
    | undefined;
  /** Output only. The associated campaign location target, if one exists. */
  campaignLocationTarget?:
    | string
    | undefined;
  /** Output only. The associated user list, if one exists. */
  userList?:
    | string
    | undefined;
  /**
   * Output only. The associated keyword, if one exists and the click
   * corresponds to the SEARCH channel.
   */
  keyword: string;
  /** Output only. Basic information about the associated keyword, if it exists. */
  keywordInfo: KeywordInfo | undefined;
}

function createBaseClickView(): ClickView {
  return {
    resourceName: "",
    gclid: undefined,
    areaOfInterest: undefined,
    locationOfPresence: undefined,
    pageNumber: undefined,
    adGroupAd: undefined,
    campaignLocationTarget: undefined,
    userList: undefined,
    keyword: "",
    keywordInfo: undefined,
  };
}

export const ClickView: MessageFns<ClickView> = {
  encode(message: ClickView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.gclid !== undefined) {
      writer.uint32(66).string(message.gclid);
    }
    if (message.areaOfInterest !== undefined) {
      ClickLocation.encode(message.areaOfInterest, writer.uint32(26).fork()).join();
    }
    if (message.locationOfPresence !== undefined) {
      ClickLocation.encode(message.locationOfPresence, writer.uint32(34).fork()).join();
    }
    if (message.pageNumber !== undefined) {
      writer.uint32(72).int64(message.pageNumber.toString());
    }
    if (message.adGroupAd !== undefined) {
      writer.uint32(82).string(message.adGroupAd);
    }
    if (message.campaignLocationTarget !== undefined) {
      writer.uint32(90).string(message.campaignLocationTarget);
    }
    if (message.userList !== undefined) {
      writer.uint32(98).string(message.userList);
    }
    if (message.keyword !== "") {
      writer.uint32(106).string(message.keyword);
    }
    if (message.keywordInfo !== undefined) {
      KeywordInfo.encode(message.keywordInfo, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClickView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClickView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.gclid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.areaOfInterest = ClickLocation.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.locationOfPresence = ClickLocation.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.pageNumber = Long.fromString(reader.int64().toString());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.adGroupAd = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.campaignLocationTarget = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.userList = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.keyword = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.keywordInfo = KeywordInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClickView {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      gclid: isSet(object.gclid) ? globalThis.String(object.gclid) : undefined,
      areaOfInterest: isSet(object.areaOfInterest) ? ClickLocation.fromJSON(object.areaOfInterest) : undefined,
      locationOfPresence: isSet(object.locationOfPresence)
        ? ClickLocation.fromJSON(object.locationOfPresence)
        : undefined,
      pageNumber: isSet(object.pageNumber) ? Long.fromValue(object.pageNumber) : undefined,
      adGroupAd: isSet(object.adGroupAd) ? globalThis.String(object.adGroupAd) : undefined,
      campaignLocationTarget: isSet(object.campaignLocationTarget)
        ? globalThis.String(object.campaignLocationTarget)
        : undefined,
      userList: isSet(object.userList) ? globalThis.String(object.userList) : undefined,
      keyword: isSet(object.keyword) ? globalThis.String(object.keyword) : "",
      keywordInfo: isSet(object.keywordInfo) ? KeywordInfo.fromJSON(object.keywordInfo) : undefined,
    };
  },

  toJSON(message: ClickView): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.gclid !== undefined) {
      obj.gclid = message.gclid;
    }
    if (message.areaOfInterest !== undefined) {
      obj.areaOfInterest = ClickLocation.toJSON(message.areaOfInterest);
    }
    if (message.locationOfPresence !== undefined) {
      obj.locationOfPresence = ClickLocation.toJSON(message.locationOfPresence);
    }
    if (message.pageNumber !== undefined) {
      obj.pageNumber = (message.pageNumber || Long.ZERO).toString();
    }
    if (message.adGroupAd !== undefined) {
      obj.adGroupAd = message.adGroupAd;
    }
    if (message.campaignLocationTarget !== undefined) {
      obj.campaignLocationTarget = message.campaignLocationTarget;
    }
    if (message.userList !== undefined) {
      obj.userList = message.userList;
    }
    if (message.keyword !== "") {
      obj.keyword = message.keyword;
    }
    if (message.keywordInfo !== undefined) {
      obj.keywordInfo = KeywordInfo.toJSON(message.keywordInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<ClickView>): ClickView {
    return ClickView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClickView>): ClickView {
    const message = createBaseClickView();
    message.resourceName = object.resourceName ?? "";
    message.gclid = object.gclid ?? undefined;
    message.areaOfInterest = (object.areaOfInterest !== undefined && object.areaOfInterest !== null)
      ? ClickLocation.fromPartial(object.areaOfInterest)
      : undefined;
    message.locationOfPresence = (object.locationOfPresence !== undefined && object.locationOfPresence !== null)
      ? ClickLocation.fromPartial(object.locationOfPresence)
      : undefined;
    message.pageNumber = (object.pageNumber !== undefined && object.pageNumber !== null)
      ? Long.fromValue(object.pageNumber)
      : undefined;
    message.adGroupAd = object.adGroupAd ?? undefined;
    message.campaignLocationTarget = object.campaignLocationTarget ?? undefined;
    message.userList = object.userList ?? undefined;
    message.keyword = object.keyword ?? "";
    message.keywordInfo = (object.keywordInfo !== undefined && object.keywordInfo !== null)
      ? KeywordInfo.fromPartial(object.keywordInfo)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
