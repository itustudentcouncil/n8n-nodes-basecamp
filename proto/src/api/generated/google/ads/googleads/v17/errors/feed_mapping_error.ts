// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/feed_mapping_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible feed item errors. */
export interface FeedMappingErrorEnum {
}

/** Enum describing possible feed item errors. */
export enum FeedMappingErrorEnum_FeedMappingError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** INVALID_PLACEHOLDER_FIELD - The given placeholder field does not exist. */
  INVALID_PLACEHOLDER_FIELD = 2,
  /** INVALID_CRITERION_FIELD - The given criterion field does not exist. */
  INVALID_CRITERION_FIELD = 3,
  /** INVALID_PLACEHOLDER_TYPE - The given placeholder type does not exist. */
  INVALID_PLACEHOLDER_TYPE = 4,
  /** INVALID_CRITERION_TYPE - The given criterion type does not exist. */
  INVALID_CRITERION_TYPE = 5,
  /** NO_ATTRIBUTE_FIELD_MAPPINGS - A feed mapping must contain at least one attribute field mapping. */
  NO_ATTRIBUTE_FIELD_MAPPINGS = 7,
  /**
   * FEED_ATTRIBUTE_TYPE_MISMATCH - The type of the feed attribute referenced in the attribute field mapping
   * must match the type of the placeholder field.
   */
  FEED_ATTRIBUTE_TYPE_MISMATCH = 8,
  /** CANNOT_OPERATE_ON_MAPPINGS_FOR_SYSTEM_GENERATED_FEED - A feed mapping for a system generated feed cannot be operated on. */
  CANNOT_OPERATE_ON_MAPPINGS_FOR_SYSTEM_GENERATED_FEED = 9,
  /**
   * MULTIPLE_MAPPINGS_FOR_PLACEHOLDER_TYPE - Only one feed mapping for a placeholder type is allowed per feed or
   * customer (depending on the placeholder type).
   */
  MULTIPLE_MAPPINGS_FOR_PLACEHOLDER_TYPE = 10,
  /** MULTIPLE_MAPPINGS_FOR_CRITERION_TYPE - Only one feed mapping for a criterion type is allowed per customer. */
  MULTIPLE_MAPPINGS_FOR_CRITERION_TYPE = 11,
  /**
   * MULTIPLE_MAPPINGS_FOR_PLACEHOLDER_FIELD - Only one feed attribute mapping for a placeholder field is allowed
   * (depending on the placeholder type).
   */
  MULTIPLE_MAPPINGS_FOR_PLACEHOLDER_FIELD = 12,
  /**
   * MULTIPLE_MAPPINGS_FOR_CRITERION_FIELD - Only one feed attribute mapping for a criterion field is allowed
   * (depending on the criterion type).
   */
  MULTIPLE_MAPPINGS_FOR_CRITERION_FIELD = 13,
  /** UNEXPECTED_ATTRIBUTE_FIELD_MAPPINGS - This feed mapping may not contain any explicit attribute field mappings. */
  UNEXPECTED_ATTRIBUTE_FIELD_MAPPINGS = 14,
  /** LOCATION_PLACEHOLDER_ONLY_FOR_PLACES_FEEDS - Location placeholder feed mappings can only be created for Places feeds. */
  LOCATION_PLACEHOLDER_ONLY_FOR_PLACES_FEEDS = 15,
  /** CANNOT_MODIFY_MAPPINGS_FOR_TYPED_FEED - Mappings for typed feeds cannot be modified. */
  CANNOT_MODIFY_MAPPINGS_FOR_TYPED_FEED = 16,
  /** INVALID_PLACEHOLDER_TYPE_FOR_NON_SYSTEM_GENERATED_FEED - The given placeholder type can only be mapped to system generated feeds. */
  INVALID_PLACEHOLDER_TYPE_FOR_NON_SYSTEM_GENERATED_FEED = 17,
  /**
   * INVALID_PLACEHOLDER_TYPE_FOR_SYSTEM_GENERATED_FEED_TYPE - The given placeholder type cannot be mapped to a system generated feed
   * with the given type.
   */
  INVALID_PLACEHOLDER_TYPE_FOR_SYSTEM_GENERATED_FEED_TYPE = 18,
  /** ATTRIBUTE_FIELD_MAPPING_MISSING_FIELD - The "field" oneof was not set in an AttributeFieldMapping. */
  ATTRIBUTE_FIELD_MAPPING_MISSING_FIELD = 19,
  /** LEGACY_FEED_TYPE_READ_ONLY - Feed is read only. */
  LEGACY_FEED_TYPE_READ_ONLY = 20,
  UNRECOGNIZED = -1,
}

export function feedMappingErrorEnum_FeedMappingErrorFromJSON(object: any): FeedMappingErrorEnum_FeedMappingError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return FeedMappingErrorEnum_FeedMappingError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return FeedMappingErrorEnum_FeedMappingError.UNKNOWN;
    case 2:
    case "INVALID_PLACEHOLDER_FIELD":
      return FeedMappingErrorEnum_FeedMappingError.INVALID_PLACEHOLDER_FIELD;
    case 3:
    case "INVALID_CRITERION_FIELD":
      return FeedMappingErrorEnum_FeedMappingError.INVALID_CRITERION_FIELD;
    case 4:
    case "INVALID_PLACEHOLDER_TYPE":
      return FeedMappingErrorEnum_FeedMappingError.INVALID_PLACEHOLDER_TYPE;
    case 5:
    case "INVALID_CRITERION_TYPE":
      return FeedMappingErrorEnum_FeedMappingError.INVALID_CRITERION_TYPE;
    case 7:
    case "NO_ATTRIBUTE_FIELD_MAPPINGS":
      return FeedMappingErrorEnum_FeedMappingError.NO_ATTRIBUTE_FIELD_MAPPINGS;
    case 8:
    case "FEED_ATTRIBUTE_TYPE_MISMATCH":
      return FeedMappingErrorEnum_FeedMappingError.FEED_ATTRIBUTE_TYPE_MISMATCH;
    case 9:
    case "CANNOT_OPERATE_ON_MAPPINGS_FOR_SYSTEM_GENERATED_FEED":
      return FeedMappingErrorEnum_FeedMappingError.CANNOT_OPERATE_ON_MAPPINGS_FOR_SYSTEM_GENERATED_FEED;
    case 10:
    case "MULTIPLE_MAPPINGS_FOR_PLACEHOLDER_TYPE":
      return FeedMappingErrorEnum_FeedMappingError.MULTIPLE_MAPPINGS_FOR_PLACEHOLDER_TYPE;
    case 11:
    case "MULTIPLE_MAPPINGS_FOR_CRITERION_TYPE":
      return FeedMappingErrorEnum_FeedMappingError.MULTIPLE_MAPPINGS_FOR_CRITERION_TYPE;
    case 12:
    case "MULTIPLE_MAPPINGS_FOR_PLACEHOLDER_FIELD":
      return FeedMappingErrorEnum_FeedMappingError.MULTIPLE_MAPPINGS_FOR_PLACEHOLDER_FIELD;
    case 13:
    case "MULTIPLE_MAPPINGS_FOR_CRITERION_FIELD":
      return FeedMappingErrorEnum_FeedMappingError.MULTIPLE_MAPPINGS_FOR_CRITERION_FIELD;
    case 14:
    case "UNEXPECTED_ATTRIBUTE_FIELD_MAPPINGS":
      return FeedMappingErrorEnum_FeedMappingError.UNEXPECTED_ATTRIBUTE_FIELD_MAPPINGS;
    case 15:
    case "LOCATION_PLACEHOLDER_ONLY_FOR_PLACES_FEEDS":
      return FeedMappingErrorEnum_FeedMappingError.LOCATION_PLACEHOLDER_ONLY_FOR_PLACES_FEEDS;
    case 16:
    case "CANNOT_MODIFY_MAPPINGS_FOR_TYPED_FEED":
      return FeedMappingErrorEnum_FeedMappingError.CANNOT_MODIFY_MAPPINGS_FOR_TYPED_FEED;
    case 17:
    case "INVALID_PLACEHOLDER_TYPE_FOR_NON_SYSTEM_GENERATED_FEED":
      return FeedMappingErrorEnum_FeedMappingError.INVALID_PLACEHOLDER_TYPE_FOR_NON_SYSTEM_GENERATED_FEED;
    case 18:
    case "INVALID_PLACEHOLDER_TYPE_FOR_SYSTEM_GENERATED_FEED_TYPE":
      return FeedMappingErrorEnum_FeedMappingError.INVALID_PLACEHOLDER_TYPE_FOR_SYSTEM_GENERATED_FEED_TYPE;
    case 19:
    case "ATTRIBUTE_FIELD_MAPPING_MISSING_FIELD":
      return FeedMappingErrorEnum_FeedMappingError.ATTRIBUTE_FIELD_MAPPING_MISSING_FIELD;
    case 20:
    case "LEGACY_FEED_TYPE_READ_ONLY":
      return FeedMappingErrorEnum_FeedMappingError.LEGACY_FEED_TYPE_READ_ONLY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeedMappingErrorEnum_FeedMappingError.UNRECOGNIZED;
  }
}

export function feedMappingErrorEnum_FeedMappingErrorToJSON(object: FeedMappingErrorEnum_FeedMappingError): string {
  switch (object) {
    case FeedMappingErrorEnum_FeedMappingError.UNSPECIFIED:
      return "UNSPECIFIED";
    case FeedMappingErrorEnum_FeedMappingError.UNKNOWN:
      return "UNKNOWN";
    case FeedMappingErrorEnum_FeedMappingError.INVALID_PLACEHOLDER_FIELD:
      return "INVALID_PLACEHOLDER_FIELD";
    case FeedMappingErrorEnum_FeedMappingError.INVALID_CRITERION_FIELD:
      return "INVALID_CRITERION_FIELD";
    case FeedMappingErrorEnum_FeedMappingError.INVALID_PLACEHOLDER_TYPE:
      return "INVALID_PLACEHOLDER_TYPE";
    case FeedMappingErrorEnum_FeedMappingError.INVALID_CRITERION_TYPE:
      return "INVALID_CRITERION_TYPE";
    case FeedMappingErrorEnum_FeedMappingError.NO_ATTRIBUTE_FIELD_MAPPINGS:
      return "NO_ATTRIBUTE_FIELD_MAPPINGS";
    case FeedMappingErrorEnum_FeedMappingError.FEED_ATTRIBUTE_TYPE_MISMATCH:
      return "FEED_ATTRIBUTE_TYPE_MISMATCH";
    case FeedMappingErrorEnum_FeedMappingError.CANNOT_OPERATE_ON_MAPPINGS_FOR_SYSTEM_GENERATED_FEED:
      return "CANNOT_OPERATE_ON_MAPPINGS_FOR_SYSTEM_GENERATED_FEED";
    case FeedMappingErrorEnum_FeedMappingError.MULTIPLE_MAPPINGS_FOR_PLACEHOLDER_TYPE:
      return "MULTIPLE_MAPPINGS_FOR_PLACEHOLDER_TYPE";
    case FeedMappingErrorEnum_FeedMappingError.MULTIPLE_MAPPINGS_FOR_CRITERION_TYPE:
      return "MULTIPLE_MAPPINGS_FOR_CRITERION_TYPE";
    case FeedMappingErrorEnum_FeedMappingError.MULTIPLE_MAPPINGS_FOR_PLACEHOLDER_FIELD:
      return "MULTIPLE_MAPPINGS_FOR_PLACEHOLDER_FIELD";
    case FeedMappingErrorEnum_FeedMappingError.MULTIPLE_MAPPINGS_FOR_CRITERION_FIELD:
      return "MULTIPLE_MAPPINGS_FOR_CRITERION_FIELD";
    case FeedMappingErrorEnum_FeedMappingError.UNEXPECTED_ATTRIBUTE_FIELD_MAPPINGS:
      return "UNEXPECTED_ATTRIBUTE_FIELD_MAPPINGS";
    case FeedMappingErrorEnum_FeedMappingError.LOCATION_PLACEHOLDER_ONLY_FOR_PLACES_FEEDS:
      return "LOCATION_PLACEHOLDER_ONLY_FOR_PLACES_FEEDS";
    case FeedMappingErrorEnum_FeedMappingError.CANNOT_MODIFY_MAPPINGS_FOR_TYPED_FEED:
      return "CANNOT_MODIFY_MAPPINGS_FOR_TYPED_FEED";
    case FeedMappingErrorEnum_FeedMappingError.INVALID_PLACEHOLDER_TYPE_FOR_NON_SYSTEM_GENERATED_FEED:
      return "INVALID_PLACEHOLDER_TYPE_FOR_NON_SYSTEM_GENERATED_FEED";
    case FeedMappingErrorEnum_FeedMappingError.INVALID_PLACEHOLDER_TYPE_FOR_SYSTEM_GENERATED_FEED_TYPE:
      return "INVALID_PLACEHOLDER_TYPE_FOR_SYSTEM_GENERATED_FEED_TYPE";
    case FeedMappingErrorEnum_FeedMappingError.ATTRIBUTE_FIELD_MAPPING_MISSING_FIELD:
      return "ATTRIBUTE_FIELD_MAPPING_MISSING_FIELD";
    case FeedMappingErrorEnum_FeedMappingError.LEGACY_FEED_TYPE_READ_ONLY:
      return "LEGACY_FEED_TYPE_READ_ONLY";
    case FeedMappingErrorEnum_FeedMappingError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseFeedMappingErrorEnum(): FeedMappingErrorEnum {
  return {};
}

export const FeedMappingErrorEnum: MessageFns<FeedMappingErrorEnum> = {
  encode(_: FeedMappingErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeedMappingErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeedMappingErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FeedMappingErrorEnum {
    return {};
  },

  toJSON(_: FeedMappingErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<FeedMappingErrorEnum>): FeedMappingErrorEnum {
    return FeedMappingErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<FeedMappingErrorEnum>): FeedMappingErrorEnum {
    const message = createBaseFeedMappingErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
