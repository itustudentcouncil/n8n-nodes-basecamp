// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/enums/experiment_metric_direction.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.enums";

/** Container for enum describing the type of experiment metric direction. */
export interface ExperimentMetricDirectionEnum {
}

/** The type of experiment metric direction. */
export enum ExperimentMetricDirectionEnum_ExperimentMetricDirection {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The value is unknown in this version. */
  UNKNOWN = 1,
  /** NO_CHANGE - The goal of the experiment is to not change the metric. */
  NO_CHANGE = 2,
  /** INCREASE - The goal of the experiment is to increate the metric. */
  INCREASE = 3,
  /** DECREASE - The goal of the experiment is to decrease the metric. */
  DECREASE = 4,
  /**
   * NO_CHANGE_OR_INCREASE - The goal of the experiment is to either not change or increase the
   * metric.
   */
  NO_CHANGE_OR_INCREASE = 5,
  /**
   * NO_CHANGE_OR_DECREASE - The goal of the experiment is to either not change or decrease the
   * metric.
   */
  NO_CHANGE_OR_DECREASE = 6,
  UNRECOGNIZED = -1,
}

export function experimentMetricDirectionEnum_ExperimentMetricDirectionFromJSON(
  object: any,
): ExperimentMetricDirectionEnum_ExperimentMetricDirection {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return ExperimentMetricDirectionEnum_ExperimentMetricDirection.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return ExperimentMetricDirectionEnum_ExperimentMetricDirection.UNKNOWN;
    case 2:
    case "NO_CHANGE":
      return ExperimentMetricDirectionEnum_ExperimentMetricDirection.NO_CHANGE;
    case 3:
    case "INCREASE":
      return ExperimentMetricDirectionEnum_ExperimentMetricDirection.INCREASE;
    case 4:
    case "DECREASE":
      return ExperimentMetricDirectionEnum_ExperimentMetricDirection.DECREASE;
    case 5:
    case "NO_CHANGE_OR_INCREASE":
      return ExperimentMetricDirectionEnum_ExperimentMetricDirection.NO_CHANGE_OR_INCREASE;
    case 6:
    case "NO_CHANGE_OR_DECREASE":
      return ExperimentMetricDirectionEnum_ExperimentMetricDirection.NO_CHANGE_OR_DECREASE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExperimentMetricDirectionEnum_ExperimentMetricDirection.UNRECOGNIZED;
  }
}

export function experimentMetricDirectionEnum_ExperimentMetricDirectionToJSON(
  object: ExperimentMetricDirectionEnum_ExperimentMetricDirection,
): string {
  switch (object) {
    case ExperimentMetricDirectionEnum_ExperimentMetricDirection.UNSPECIFIED:
      return "UNSPECIFIED";
    case ExperimentMetricDirectionEnum_ExperimentMetricDirection.UNKNOWN:
      return "UNKNOWN";
    case ExperimentMetricDirectionEnum_ExperimentMetricDirection.NO_CHANGE:
      return "NO_CHANGE";
    case ExperimentMetricDirectionEnum_ExperimentMetricDirection.INCREASE:
      return "INCREASE";
    case ExperimentMetricDirectionEnum_ExperimentMetricDirection.DECREASE:
      return "DECREASE";
    case ExperimentMetricDirectionEnum_ExperimentMetricDirection.NO_CHANGE_OR_INCREASE:
      return "NO_CHANGE_OR_INCREASE";
    case ExperimentMetricDirectionEnum_ExperimentMetricDirection.NO_CHANGE_OR_DECREASE:
      return "NO_CHANGE_OR_DECREASE";
    case ExperimentMetricDirectionEnum_ExperimentMetricDirection.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseExperimentMetricDirectionEnum(): ExperimentMetricDirectionEnum {
  return {};
}

export const ExperimentMetricDirectionEnum: MessageFns<ExperimentMetricDirectionEnum> = {
  encode(_: ExperimentMetricDirectionEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExperimentMetricDirectionEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperimentMetricDirectionEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ExperimentMetricDirectionEnum {
    return {};
  },

  toJSON(_: ExperimentMetricDirectionEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ExperimentMetricDirectionEnum>): ExperimentMetricDirectionEnum {
    return ExperimentMetricDirectionEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ExperimentMetricDirectionEnum>): ExperimentMetricDirectionEnum {
    const message = createBaseExperimentMetricDirectionEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
