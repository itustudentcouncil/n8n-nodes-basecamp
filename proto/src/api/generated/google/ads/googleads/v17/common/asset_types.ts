// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/common/asset_types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  CallConversionReportingStateEnum_CallConversionReportingState,
  callConversionReportingStateEnum_CallConversionReportingStateFromJSON,
  callConversionReportingStateEnum_CallConversionReportingStateToJSON,
} from "../enums/call_conversion_reporting_state.js";
import {
  CallToActionTypeEnum_CallToActionType,
  callToActionTypeEnum_CallToActionTypeFromJSON,
  callToActionTypeEnum_CallToActionTypeToJSON,
} from "../enums/call_to_action_type.js";
import {
  LeadFormCallToActionTypeEnum_LeadFormCallToActionType,
  leadFormCallToActionTypeEnum_LeadFormCallToActionTypeFromJSON,
  leadFormCallToActionTypeEnum_LeadFormCallToActionTypeToJSON,
} from "../enums/lead_form_call_to_action_type.js";
import {
  LeadFormDesiredIntentEnum_LeadFormDesiredIntent,
  leadFormDesiredIntentEnum_LeadFormDesiredIntentFromJSON,
  leadFormDesiredIntentEnum_LeadFormDesiredIntentToJSON,
} from "../enums/lead_form_desired_intent.js";
import {
  LeadFormFieldUserInputTypeEnum_LeadFormFieldUserInputType,
  leadFormFieldUserInputTypeEnum_LeadFormFieldUserInputTypeFromJSON,
  leadFormFieldUserInputTypeEnum_LeadFormFieldUserInputTypeToJSON,
} from "../enums/lead_form_field_user_input_type.js";
import {
  LeadFormPostSubmitCallToActionTypeEnum_LeadFormPostSubmitCallToActionType,
  leadFormPostSubmitCallToActionTypeEnum_LeadFormPostSubmitCallToActionTypeFromJSON,
  leadFormPostSubmitCallToActionTypeEnum_LeadFormPostSubmitCallToActionTypeToJSON,
} from "../enums/lead_form_post_submit_call_to_action_type.js";
import {
  LocationOwnershipTypeEnum_LocationOwnershipType,
  locationOwnershipTypeEnum_LocationOwnershipTypeFromJSON,
  locationOwnershipTypeEnum_LocationOwnershipTypeToJSON,
} from "../enums/location_ownership_type.js";
import {
  MimeTypeEnum_MimeType,
  mimeTypeEnum_MimeTypeFromJSON,
  mimeTypeEnum_MimeTypeToJSON,
} from "../enums/mime_type.js";
import {
  MobileAppVendorEnum_MobileAppVendor,
  mobileAppVendorEnum_MobileAppVendorFromJSON,
  mobileAppVendorEnum_MobileAppVendorToJSON,
} from "../enums/mobile_app_vendor.js";
import {
  PriceExtensionPriceQualifierEnum_PriceExtensionPriceQualifier,
  priceExtensionPriceQualifierEnum_PriceExtensionPriceQualifierFromJSON,
  priceExtensionPriceQualifierEnum_PriceExtensionPriceQualifierToJSON,
} from "../enums/price_extension_price_qualifier.js";
import {
  PriceExtensionPriceUnitEnum_PriceExtensionPriceUnit,
  priceExtensionPriceUnitEnum_PriceExtensionPriceUnitFromJSON,
  priceExtensionPriceUnitEnum_PriceExtensionPriceUnitToJSON,
} from "../enums/price_extension_price_unit.js";
import {
  PriceExtensionTypeEnum_PriceExtensionType,
  priceExtensionTypeEnum_PriceExtensionTypeFromJSON,
  priceExtensionTypeEnum_PriceExtensionTypeToJSON,
} from "../enums/price_extension_type.js";
import {
  PromotionExtensionDiscountModifierEnum_PromotionExtensionDiscountModifier,
  promotionExtensionDiscountModifierEnum_PromotionExtensionDiscountModifierFromJSON,
  promotionExtensionDiscountModifierEnum_PromotionExtensionDiscountModifierToJSON,
} from "../enums/promotion_extension_discount_modifier.js";
import {
  PromotionExtensionOccasionEnum_PromotionExtensionOccasion,
  promotionExtensionOccasionEnum_PromotionExtensionOccasionFromJSON,
  promotionExtensionOccasionEnum_PromotionExtensionOccasionToJSON,
} from "../enums/promotion_extension_occasion.js";
import { AdScheduleInfo } from "./criteria.js";
import { Money } from "./feed_common.js";

export const protobufPackage = "google.ads.googleads.v17.common";

/** A YouTube asset. */
export interface YoutubeVideoAsset {
  /**
   * YouTube video id. This is the 11 character string value used in the
   * YouTube video URL.
   */
  youtubeVideoId?:
    | string
    | undefined;
  /** YouTube video title. */
  youtubeVideoTitle: string;
}

/** A MediaBundle asset. */
export interface MediaBundleAsset {
  /**
   * Media bundle (ZIP file) asset data. The format of the uploaded ZIP file
   * depends on the ad field where it will be used. For more information on the
   * format, see the documentation of the ad field where you plan on using the
   * MediaBundleAsset. This field is mutate only.
   */
  data?: Buffer | undefined;
}

/** An Image asset. */
export interface ImageAsset {
  /** The raw bytes data of an image. This field is mutate only. */
  data?:
    | Buffer
    | undefined;
  /** File size of the image asset in bytes. */
  fileSize?:
    | Long
    | undefined;
  /** MIME type of the image asset. */
  mimeType: MimeTypeEnum_MimeType;
  /** Metadata for this image at its original size. */
  fullSize: ImageDimension | undefined;
}

/** Metadata for an image at a certain size, either original or resized. */
export interface ImageDimension {
  /** Height of the image. */
  heightPixels?:
    | Long
    | undefined;
  /** Width of the image. */
  widthPixels?:
    | Long
    | undefined;
  /** A URL that returns the image with this height and width. */
  url?: string | undefined;
}

/** A Text asset. */
export interface TextAsset {
  /** Text content of the text asset. */
  text?: string | undefined;
}

/** A Lead Form asset. */
export interface LeadFormAsset {
  /** Required. The name of the business being advertised. */
  businessName: string;
  /** Required. Pre-defined display text that encourages user to expand the form. */
  callToActionType: LeadFormCallToActionTypeEnum_LeadFormCallToActionType;
  /**
   * Required. Text giving a clear value proposition of what users expect once
   * they expand the form.
   */
  callToActionDescription: string;
  /**
   * Required. Headline of the expanded form to describe what the form is asking
   * for or facilitating.
   */
  headline: string;
  /**
   * Required. Detailed description of the expanded form to describe what the
   * form is asking for or facilitating.
   */
  description: string;
  /**
   * Required. Link to a page describing the policy on how the collected data is
   * handled by the advertiser/business.
   */
  privacyPolicyUrl: string;
  /**
   * Headline of text shown after form submission that describes how the
   * advertiser will follow up with the user.
   */
  postSubmitHeadline?:
    | string
    | undefined;
  /**
   * Detailed description shown after form submission that describes how the
   * advertiser will follow up with the user.
   */
  postSubmitDescription?:
    | string
    | undefined;
  /**
   * Ordered list of input fields. This field can be updated by reordering
   * questions, but not by adding or removing questions.
   */
  fields: LeadFormField[];
  /**
   * Ordered list of custom question fields. This field is subject to a limit of
   * 5 qualifying questions per form.
   */
  customQuestionFields: LeadFormCustomQuestionField[];
  /**
   * Configured methods for collected lead data to be delivered to advertiser.
   * Only one method typed as WebhookDelivery can be configured.
   */
  deliveryMethods: LeadFormDeliveryMethod[];
  /**
   * Pre-defined display text that encourages user action after the form is
   * submitted.
   */
  postSubmitCallToActionType: LeadFormPostSubmitCallToActionTypeEnum_LeadFormPostSubmitCallToActionType;
  /**
   * Asset resource name of the background image.
   * The image dimensions must be exactly 1200x628.
   */
  backgroundImageAsset?:
    | string
    | undefined;
  /**
   * Chosen intent for the lead form, for example, more volume or more
   * qualified.
   */
  desiredIntent: LeadFormDesiredIntentEnum_LeadFormDesiredIntent;
  /**
   * Custom disclosure shown along with Google disclaimer on the lead form.
   * Accessible to allowed customers only.
   */
  customDisclosure?: string | undefined;
}

/** One input field instance within a form. */
export interface LeadFormField {
  /**
   * Describes the input type, which may be a predefined type such as "full
   * name" or a pre-vetted question like "What kind of vehicle do you have?".
   */
  inputType: LeadFormFieldUserInputTypeEnum_LeadFormFieldUserInputType;
  /**
   * Answer configuration for a single choice question. Can be set only for
   * pre-vetted question fields. Minimum of 2 answers required and maximum of
   * 12 allowed.
   */
  singleChoiceAnswers?:
    | LeadFormSingleChoiceAnswers
    | undefined;
  /**
   * Answer configuration for location question. If true, campaign/account
   * level location data (state, city, business name etc) will be rendered on
   * the Lead Form.
   * Starting V13.1, has_location_answer can only be set for "What is your
   * preferred dealership?" question, for advertisers with Location Assets
   * setup at campaign/account level.
   */
  hasLocationAnswer?: boolean | undefined;
}

/** One custom question input field instance within a form. */
export interface LeadFormCustomQuestionField {
  /**
   * The exact custom question field text (for example, "What kind of vehicle
   * do you have?").
   */
  customQuestionText: string;
  /**
   * Answer configuration for a single choice question.
   * Minimum of 2 answers and maximum of 12 allowed.
   */
  singleChoiceAnswers?:
    | LeadFormSingleChoiceAnswers
    | undefined;
  /**
   * Answer configuration for location question. If true, campaign/account
   * level location data (state, city, business name etc) will be rendered on
   * the Lead Form.
   * Starting V13.1, has_location_answer can only be set for "What is your
   * preferred dealership?" question, for advertisers with Location Assets
   * setup at campaign/account level.
   */
  hasLocationAnswer?: boolean | undefined;
}

/**
 * Defines possible answers for a single choice question, usually presented as
 * a single-choice drop-down list.
 */
export interface LeadFormSingleChoiceAnswers {
  /**
   * List of choices for a single question field. The order of entries defines
   * UI order. Minimum of 2 answers required and maximum of 12 allowed.
   */
  answers: string[];
}

/** A configuration of how leads are delivered to the advertiser. */
export interface LeadFormDeliveryMethod {
  /** Webhook method of delivery. */
  webhook?: WebhookDelivery | undefined;
}

/**
 * Google notifies the advertiser of leads by making HTTP calls to an
 * endpoint they specify. The requests contain JSON matching a schema that
 * Google publishes as part of form ads documentation.
 */
export interface WebhookDelivery {
  /** Webhook url specified by advertiser to send the lead. */
  advertiserWebhookUrl?:
    | string
    | undefined;
  /** Anti-spoofing secret set by the advertiser as part of the webhook payload. */
  googleSecret?:
    | string
    | undefined;
  /** The schema version that this delivery instance will use. */
  payloadSchemaVersion?: Long | undefined;
}

/**
 * A Book on Google asset. Used to redirect user to book through Google.
 * Book on Google will change the redirect url to book directly through
 * Google.
 */
export interface BookOnGoogleAsset {
}

/** A Promotion asset. */
export interface PromotionAsset {
  /** Required. A freeform description of what the promotion is targeting. */
  promotionTarget: string;
  /** A modifier for qualification of the discount. */
  discountModifier: PromotionExtensionDiscountModifierEnum_PromotionExtensionDiscountModifier;
  /**
   * Start date of when the promotion is eligible to be redeemed, in yyyy-MM-dd
   * format.
   */
  redemptionStartDate: string;
  /**
   * Last date of when the promotion is eligible to be redeemed, in yyyy-MM-dd
   * format.
   */
  redemptionEndDate: string;
  /**
   * The occasion the promotion was intended for.
   * If an occasion is set, the redemption window will need to fall within the
   * date range associated with the occasion.
   */
  occasion: PromotionExtensionOccasionEnum_PromotionExtensionOccasion;
  /**
   * The language of the promotion.
   * Represented as BCP 47 language tag.
   */
  languageCode: string;
  /**
   * Start date of when this asset is effective and can begin serving, in
   * yyyy-MM-dd format.
   */
  startDate: string;
  /**
   * Last date of when this asset is effective and still serving, in yyyy-MM-dd
   * format.
   */
  endDate: string;
  /**
   * List of non-overlapping schedules specifying all time intervals for which
   * the asset may serve. There can be a maximum of 6 schedules per day, 42 in
   * total.
   */
  adScheduleTargets: AdScheduleInfo[];
  /**
   * Percentage off discount in the promotion. 1,000,000 = 100%.
   * Either this or money_amount_off is required.
   */
  percentOff?:
    | Long
    | undefined;
  /**
   * Money amount off for discount in the promotion.
   * Either this or percent_off is required.
   */
  moneyAmountOff?:
    | Money
    | undefined;
  /** A code the user should use in order to be eligible for the promotion. */
  promotionCode?:
    | string
    | undefined;
  /**
   * The amount the total order needs to be for the user to be eligible for
   * the promotion.
   */
  ordersOverAmount?: Money | undefined;
}

/** A Callout asset. */
export interface CalloutAsset {
  /**
   * Required. The callout text.
   * The length of this string should be between 1 and 25, inclusive.
   */
  calloutText: string;
  /**
   * Start date of when this asset is effective and can begin serving, in
   * yyyy-MM-dd format.
   */
  startDate: string;
  /**
   * Last date of when this asset is effective and still serving, in yyyy-MM-dd
   * format.
   */
  endDate: string;
  /**
   * List of non-overlapping schedules specifying all time intervals for which
   * the asset may serve. There can be a maximum of 6 schedules per day, 42 in
   * total.
   */
  adScheduleTargets: AdScheduleInfo[];
}

/** A Structured Snippet asset. */
export interface StructuredSnippetAsset {
  /**
   * Required. The header of the snippet.
   * This string should be one of the predefined values at
   * https://developers.google.com/google-ads/api/reference/data/structured-snippet-headers
   */
  header: string;
  /**
   * Required. The values in the snippet.
   * The size of this collection should be between 3 and 10, inclusive.
   * The length of each value should be between 1 and 25 characters, inclusive.
   */
  values: string[];
}

/** A Sitelink asset. */
export interface SitelinkAsset {
  /**
   * Required. URL display text for the sitelink.
   * The length of this string should be between 1 and 25, inclusive.
   */
  linkText: string;
  /**
   * First line of the description for the sitelink.
   * If set, the length should be between 1 and 35, inclusive, and description2
   * must also be set.
   */
  description1: string;
  /**
   * Second line of the description for the sitelink.
   * If set, the length should be between 1 and 35, inclusive, and description1
   * must also be set.
   */
  description2: string;
  /**
   * Start date of when this asset is effective and can begin serving, in
   * yyyy-MM-dd format.
   */
  startDate: string;
  /**
   * Last date of when this asset is effective and still serving, in yyyy-MM-dd
   * format.
   */
  endDate: string;
  /**
   * List of non-overlapping schedules specifying all time intervals for which
   * the asset may serve. There can be a maximum of 6 schedules per day, 42 in
   * total.
   */
  adScheduleTargets: AdScheduleInfo[];
}

/** A Page Feed asset. */
export interface PageFeedAsset {
  /** Required. The webpage that advertisers want to target. */
  pageUrl: string;
  /** Labels used to group the page urls. */
  labels: string[];
}

/** A Dynamic Education asset. */
export interface DynamicEducationAsset {
  /**
   * Required. Program ID which can be any sequence of letters and digits, and
   * must be unique and match the values of remarketing tag. Required.
   */
  programId: string;
  /**
   * Location ID which can be any sequence of letters and digits and must be
   * unique.
   */
  locationId: string;
  /** Required. Program name, for example, Nursing. Required. */
  programName: string;
  /** Subject of study, for example, Health. */
  subject: string;
  /** Program description, for example, Nursing Certification. */
  programDescription: string;
  /** School name, for example, Mountain View School of Nursing. */
  schoolName: string;
  /**
   * School address which can be specified in one of the following formats.
   * (1) City, state, code, country, for example, Mountain View, CA, USA.
   * (2) Full address, for example, 123 Boulevard St, Mountain View, CA 94043.
   * (3) Latitude-longitude in the DDD format, for example, 41.40338, 2.17403
   */
  address: string;
  /**
   * Contextual keywords, for example, Nursing certification, Health, Mountain
   * View.
   */
  contextualKeywords: string[];
  /**
   * Android deep link, for example,
   * android-app://com.example.android/http/example.com/gizmos?1234.
   */
  androidAppLink: string;
  /** Similar program IDs. */
  similarProgramIds: string[];
  /** iOS deep link, for example, exampleApp://content/page. */
  iosAppLink: string;
  /**
   * iOS app store ID. This is used to check if the user has the app installed
   * on their device before deep linking. If this field is set, then the
   * ios_app_link field must also be present.
   */
  iosAppStoreId: Long;
  /**
   * Thumbnail image url, for example, http://www.example.com/thumbnail.png. The
   * thumbnail image will not be uploaded as image asset.
   */
  thumbnailImageUrl: string;
  /**
   * Image url, for example, http://www.example.com/image.png. The image will
   * not be uploaded as image asset.
   */
  imageUrl: string;
}

/** An asset representing a mobile app. */
export interface MobileAppAsset {
  /**
   * Required. A string that uniquely identifies a mobile application. It should
   * just contain the platform native id, like "com.android.ebay" for Android or
   * "12345689" for iOS.
   */
  appId: string;
  /** Required. The application store that distributes this specific app. */
  appStore: MobileAppVendorEnum_MobileAppVendor;
  /**
   * Required. The visible text displayed when the link is rendered in an ad.
   * The length of this string should be between 1 and 25, inclusive.
   */
  linkText: string;
  /**
   * Start date of when this asset is effective and can begin serving, in
   * yyyy-MM-dd format.
   */
  startDate: string;
  /**
   * Last date of when this asset is effective and still serving, in yyyy-MM-dd
   * format.
   */
  endDate: string;
}

/** An asset representing a hotel callout. */
export interface HotelCalloutAsset {
  /**
   * Required. The text of the hotel callout asset.
   * The length of this string should be between 1 and 25, inclusive.
   */
  text: string;
  /**
   * Required. The language of the hotel callout.
   * Represented as BCP 47 language tag.
   */
  languageCode: string;
}

/** A Call asset. */
export interface CallAsset {
  /**
   * Required. Two-letter country code of the phone number. Examples: 'US',
   * 'us'.
   */
  countryCode: string;
  /**
   * Required. The advertiser's raw phone number. Examples: '1234567890',
   * '(123)456-7890'
   */
  phoneNumber: string;
  /**
   * Indicates whether this CallAsset should use its own call conversion
   * setting, follow the account level setting, or disable call conversion.
   */
  callConversionReportingState: CallConversionReportingStateEnum_CallConversionReportingState;
  /**
   * The conversion action to attribute a call conversion to. If not set, the
   * default conversion action is used. This field only has effect if
   * call_conversion_reporting_state is set to
   * USE_RESOURCE_LEVEL_CALL_CONVERSION_ACTION.
   */
  callConversionAction: string;
  /**
   * List of non-overlapping schedules specifying all time intervals for which
   * the asset may serve. There can be a maximum of 6 schedules per day, 42 in
   * total.
   */
  adScheduleTargets: AdScheduleInfo[];
}

/** An asset representing a list of price offers. */
export interface PriceAsset {
  /** Required. The type of the price asset. */
  type: PriceExtensionTypeEnum_PriceExtensionType;
  /** The price qualifier of the price asset. */
  priceQualifier: PriceExtensionPriceQualifierEnum_PriceExtensionPriceQualifier;
  /**
   * Required. The language of the price asset.
   * Represented as BCP 47 language tag.
   */
  languageCode: string;
  /**
   * The price offerings of the price asset.
   * The size of this collection should be between 3 and 8, inclusive.
   */
  priceOfferings: PriceOffering[];
}

/** A single price offering within a PriceAsset. */
export interface PriceOffering {
  /**
   * Required. The header of the price offering.
   * The length of this string should be between 1 and 25, inclusive.
   */
  header: string;
  /**
   * Required. The description of the price offering.
   * The length of this string should be between 1 and 25, inclusive.
   */
  description: string;
  /** Required. The price value of the price offering. */
  price:
    | Money
    | undefined;
  /** The price unit of the price offering. */
  unit: PriceExtensionPriceUnitEnum_PriceExtensionPriceUnit;
  /** Required. The final URL after all cross domain redirects. */
  finalUrl: string;
  /** The final mobile URL after all cross domain redirects. */
  finalMobileUrl: string;
}

/** A call to action asset. */
export interface CallToActionAsset {
  /** Call to action. */
  callToAction: CallToActionTypeEnum_CallToActionType;
}

/** A dynamic real estate asset. */
export interface DynamicRealEstateAsset {
  /**
   * Required. Listing ID which can be any sequence of letters and digits, and
   * must be unique and match the values of remarketing tag. Required.
   */
  listingId: string;
  /** Required. Listing name, for example, Boulevard Bungalow. Required. */
  listingName: string;
  /** City name, for example, Mountain View, California. */
  cityName: string;
  /** Description, for example, 3 beds, 2 baths, 1568 sq. ft. */
  description: string;
  /**
   * Address which can be specified in one of the following formats.
   * (1) City, state, code, country, for example, Mountain View, CA, USA.
   * (2) Full address, for example, 123 Boulevard St, Mountain View, CA 94043.
   * (3) Latitude-longitude in the DDD format, for example, 41.40338, 2.17403
   */
  address: string;
  /**
   * Price which can be number followed by the alphabetic currency code,
   * ISO 4217 standard. Use '.' as the decimal mark, for example, 200,000.00
   * USD.
   */
  price: string;
  /**
   * Image URL, for example, http://www.example.com/image.png. The image will
   * not be uploaded as image asset.
   */
  imageUrl: string;
  /** Property type, for example, House. */
  propertyType: string;
  /** Listing type, for example, For sale. */
  listingType: string;
  /** Contextual keywords, for example, For sale; Houses for sale. */
  contextualKeywords: string[];
  /**
   * Formatted price which can be any characters. If set, this attribute will be
   * used instead of 'price', for example, Starting at $200,000.00.
   */
  formattedPrice: string;
  /**
   * Android deep link, for example,
   * android-app://com.example.android/http/example.com/gizmos?1234.
   */
  androidAppLink: string;
  /** iOS deep link, for example, exampleApp://content/page. */
  iosAppLink: string;
  /**
   * iOS app store ID. This is used to check if the user has the app installed
   * on their device before deep linking. If this field is set, then the
   * ios_app_link field must also be present.
   */
  iosAppStoreId: Long;
  /** Similar listing IDs. */
  similarListingIds: string[];
}

/** A dynamic custom asset. */
export interface DynamicCustomAsset {
  /**
   * Required. ID which can be any sequence of letters and digits, and must be
   * unique and match the values of remarketing tag, for example, sedan.
   * Required.
   */
  id: string;
  /**
   * ID2 which can be any sequence of letters and digits, for example, red. ID
   * sequence (ID + ID2) must be unique.
   */
  id2: string;
  /** Required. Item title, for example, Mid-size sedan. Required. */
  itemTitle: string;
  /** Item subtitle, for example, At your Mountain View dealership. */
  itemSubtitle: string;
  /** Item description, for example, Best selling mid-size car. */
  itemDescription: string;
  /**
   * Item address which can be specified in one of the following formats.
   * (1) City, state, code, country, for example, Mountain View, CA, USA.
   * (2) Full address, for example, 123 Boulevard St, Mountain View, CA 94043.
   * (3) Latitude-longitude in the DDD format, for example, 41.40338, 2.17403
   */
  itemAddress: string;
  /** Item category, for example, Sedans. */
  itemCategory: string;
  /**
   * Price which can be number followed by the alphabetic currency code,
   * ISO 4217 standard. Use '.' as the decimal mark, for example, 20,000.00 USD.
   */
  price: string;
  /**
   * Sale price which can be number followed by the alphabetic currency code,
   * ISO 4217 standard. Use '.' as the decimal mark, for example, 15,000.00 USD.
   * Must be less than the 'price' field.
   */
  salePrice: string;
  /**
   * Formatted price which can be any characters. If set, this attribute will be
   * used instead of 'price', for example, Starting at $20,000.00.
   */
  formattedPrice: string;
  /**
   * Formatted sale price which can be any characters. If set, this attribute
   * will be used instead of 'sale price', for example, On sale for $15,000.00.
   */
  formattedSalePrice: string;
  /**
   * Image URL, for example, http://www.example.com/image.png. The image will
   * not be uploaded as image asset.
   */
  imageUrl: string;
  /** Contextual keywords, for example, Sedans, 4 door sedans. */
  contextualKeywords: string[];
  /**
   * Android deep link, for example,
   * android-app://com.example.android/http/example.com/gizmos?1234.
   */
  androidAppLink: string;
  /** iOS deep link, for example, exampleApp://content/page. */
  iosAppLink: string;
  /**
   * iOS app store ID. This is used to check if the user has the app installed
   * on their device before deep linking. If this field is set, then the
   * ios_app_link field must also be present.
   */
  iosAppStoreId: Long;
  /** Similar IDs. */
  similarIds: string[];
}

/** A dynamic hotels and rentals asset. */
export interface DynamicHotelsAndRentalsAsset {
  /**
   * Required. Property ID which can be any sequence of letters and digits, and
   * must be unique and match the values of remarketing tag. Required.
   */
  propertyId: string;
  /** Required. Property name, for example, Mountain View Hotel. Required. */
  propertyName: string;
  /**
   * Image URL, for example, http://www.example.com/image.png. The image will
   * not be uploaded as image asset.
   */
  imageUrl: string;
  /** Destination name, for example, Downtown Mountain View. */
  destinationName: string;
  /** Description, for example, Close to SJC Airport. */
  description: string;
  /**
   * Price which can be number followed by the alphabetic currency code,
   * ISO 4217 standard. Use '.' as the decimal mark, for example, 100.00 USD.
   */
  price: string;
  /**
   * ISO 4217 standard. Use '.' as the decimal mark, for example, 80.00 USD.
   * Must be less than the 'price' field.
   */
  salePrice: string;
  /** Star rating. Must be a number between 1 to 5, inclusive. */
  starRating: Long;
  /** Category, for example, Hotel suite. */
  category: string;
  /** Contextual keywords, for example, Mountain View "Hotels", South Bay hotels. */
  contextualKeywords: string[];
  /**
   * Address which can be specified in one of the following formats.
   * (1) City, state, code, country, for example, Mountain View, CA, USA.
   * (2) Full address, for example, 123 Boulevard St, Mountain View, CA 94043.
   * (3) Latitude-longitude in the DDD format, for example, 41.40338, 2.17403
   */
  address: string;
  /**
   * Android deep link, for example,
   * android-app://com.example.android/http/example.com/gizmos?1234.
   */
  androidAppLink: string;
  /** iOS deep link, for example, exampleApp://content/page. */
  iosAppLink: string;
  /**
   * iOS app store ID. This is used to check if the user has the app installed
   * on their device before deep linking. If this field is set, then the
   * ios_app_link field must also be present.
   */
  iosAppStoreId: Long;
  /**
   * Formatted price which can be any characters. If set, this attribute will be
   * used instead of 'price', for example, Starting at $100.00.
   */
  formattedPrice: string;
  /**
   * Formatted sale price which can be any characters. If set, this attribute
   * will be used instead of 'sale price', for example, On sale for $80.00.
   */
  formattedSalePrice: string;
  /** Similar property IDs. */
  similarPropertyIds: string[];
}

/** A dynamic flights asset. */
export interface DynamicFlightsAsset {
  /**
   * Required. Destination ID which can be any sequence of letters and digits,
   * and must be unique and match the values of remarketing tag. Required.
   */
  destinationId: string;
  /**
   * Origin ID which can be any sequence of letters and digits. The ID sequence
   * (destination ID + origin ID) must be unique.
   */
  originId: string;
  /** Required. Flight description, for example, Book your ticket. Required. */
  flightDescription: string;
  /**
   * Image URL, for example, http://www.example.com/image.png. The image will
   * not be uploaded as image asset.
   */
  imageUrl: string;
  /** Destination name, for example, Paris. */
  destinationName: string;
  /** Origin name, for example, London. */
  originName: string;
  /**
   * Flight price which can be number followed by the alphabetic currency code,
   * ISO 4217 standard. Use '.' as the decimal mark, for example, 100.00 USD.
   */
  flightPrice: string;
  /**
   * Flight sale price which can be number followed by the alphabetic currency
   * code, ISO 4217 standard. Use '.' as the decimal mark, for example, 80.00
   * USD. Must be less than the 'flight_price' field.
   */
  flightSalePrice: string;
  /**
   * Formatted price which can be any characters. If set, this attribute will be
   * used instead of 'price', for example, Starting at $100.00.
   */
  formattedPrice: string;
  /**
   * Formatted sale price which can be any characters. If set, this attribute
   * will be used instead of 'sale price', for example, On sale for $80.00.
   */
  formattedSalePrice: string;
  /**
   * Android deep link, for example,
   * android-app://com.example.android/http/example.com/gizmos?1234.
   */
  androidAppLink: string;
  /** iOS deep link, for example, exampleApp://content/page. */
  iosAppLink: string;
  /**
   * iOS app store ID. This is used to check if the user has the app installed
   * on their device before deep linking. If this field is set, then the
   * ios_app_link field must also be present.
   */
  iosAppStoreId: Long;
  /** Similar destination IDs, for example, PAR,LON. */
  similarDestinationIds: string[];
  /**
   * A custom field which can be multiple key to values mapping separated by
   * delimiters (",", "|" and ":"), in the forms of
   * "<KEY_1>: <VALUE_1>, <VALUE_2>, ... ,<VALUE_N> | <KEY_2>: <VALUE_1>, ...
   * ,<VALUE_N> | ... | <KEY_N>: <VALUE_1>, ... ,<VALUE_N>" for example, wifi:
   * most | aircraft: 320, 77W | flights: 42 | legroom: 32".
   */
  customMapping: string;
}

/** A Demand Gen Carousel Card asset. */
export interface DemandGenCarouselCardAsset {
  /**
   * Asset resource name of the associated 1.91:1 marketing image. This and/or
   * square marketing image asset is required.
   */
  marketingImageAsset: string;
  /**
   * Asset resource name of the associated square marketing image. This
   * and/or a marketing image asset is required.
   */
  squareMarketingImageAsset: string;
  /** Asset resource name of the associated 4:5 portrait marketing image. */
  portraitMarketingImageAsset: string;
  /** Required. Headline of the carousel card. */
  headline: string;
  /** Call to action text. */
  callToActionText: string;
}

/** A dynamic travel asset. */
export interface DynamicTravelAsset {
  /**
   * Required. Destination ID which can be any sequence of letters and digits,
   * and must be unique and match the values of remarketing tag. Required.
   */
  destinationId: string;
  /**
   * Origin ID which can be any sequence of letters and digits. The ID sequence
   * (destination ID + origin ID) must be unique.
   */
  originId: string;
  /** Required. Title, for example, Book your train ticket. Required. */
  title: string;
  /** Destination name, for example, Paris. */
  destinationName: string;
  /**
   * Destination address which can be specified in one of the following formats.
   * (1) City, state, code, country, for example, Mountain View, CA, USA.
   * (2) Full address, for example, 123 Boulevard St, Mountain View, CA 94043.
   * (3) Latitude-longitude in the DDD format, for example, 41.40338, 2.17403.
   */
  destinationAddress: string;
  /** Origin name, for example, London. */
  originName: string;
  /**
   * Price which can be a number followed by the alphabetic currency code,
   * ISO 4217 standard. Use '.' as the decimal mark, for example, 100.00 USD.
   */
  price: string;
  /**
   * Sale price which can be a number followed by the alphabetic currency
   * code, ISO 4217 standard. Use '.' as the decimal mark, for example, 80.00
   * USD. Must be less than the 'price' field.
   */
  salePrice: string;
  /**
   * Formatted price which can be any characters. If set, this attribute will be
   * used instead of 'price', for example, Starting at $100.00.
   */
  formattedPrice: string;
  /**
   * Formatted sale price which can be any characters. If set, this attribute
   * will be used instead of 'sale price', for example, On sale for $80.00.
   */
  formattedSalePrice: string;
  /** Category, for example, Express. */
  category: string;
  /** Contextual keywords, for example, Paris trains. */
  contextualKeywords: string[];
  /** Similar destination IDs, for example, NYC. */
  similarDestinationIds: string[];
  /**
   * Image URL, for example, http://www.example.com/image.png. The image will
   * not be uploaded as image asset.
   */
  imageUrl: string;
  /**
   * Android deep link, for example,
   * android-app://com.example.android/http/example.com/gizmos?1234.
   */
  androidAppLink: string;
  /** iOS deep link, for example, exampleApp://content/page. */
  iosAppLink: string;
  /**
   * iOS app store ID. This is used to check if the user has the app installed
   * on their device before deep linking. If this field is set, then the
   * ios_app_link field must also be present.
   */
  iosAppStoreId: Long;
}

/** A dynamic local asset. */
export interface DynamicLocalAsset {
  /**
   * Required. Deal ID which can be any sequence of letters and digits, and must
   * be unique and match the values of remarketing tag. Required.
   */
  dealId: string;
  /**
   * Required. Deal name, for example, 50% off at Mountain View Grocers.
   * Required.
   */
  dealName: string;
  /** Subtitle, for example, Groceries. */
  subtitle: string;
  /** Description, for example, Save on your weekly bill. */
  description: string;
  /**
   * Price which can be a number followed by the alphabetic currency code,
   * ISO 4217 standard. Use '.' as the decimal mark, for example, 100.00 USD.
   */
  price: string;
  /**
   * Sale price which can be number followed by the alphabetic currency code,
   * ISO 4217 standard. Use '.' as the decimal mark, for example, 80.00 USD.
   * Must be less than the 'price' field.
   */
  salePrice: string;
  /**
   * Image URL, for example, http://www.example.com/image.png. The image will
   * not be uploaded as image asset.
   */
  imageUrl: string;
  /**
   * Address which can be specified in one of the following formats.
   * (1) City, state, code, country, for example, Mountain View, CA, USA.
   * (2) Full address, for example, 123 Boulevard St, Mountain View, CA 94043.
   * (3) Latitude-longitude in the DDD format, for example, 41.40338, 2.17403.
   */
  address: string;
  /** Category, for example, Food. */
  category: string;
  /** Contextual keywords, for example, Save groceries coupons. */
  contextualKeywords: string[];
  /**
   * Formatted price which can be any characters. If set, this attribute will be
   * used instead of 'price', for example, Starting at $100.00.
   */
  formattedPrice: string;
  /**
   * Formatted sale price which can be any characters. If set, this attribute
   * will be used instead of 'sale price', for example, On sale for $80.00.
   */
  formattedSalePrice: string;
  /**
   * Android deep link, for example,
   * android-app://com.example.android/http/example.com/gizmos?1234.
   */
  androidAppLink: string;
  /** Similar deal IDs, for example, 1275. */
  similarDealIds: string[];
  /** iOS deep link, for example, exampleApp://content/page. */
  iosAppLink: string;
  /**
   * iOS app store ID. This is used to check if the user has the app installed
   * on their device before deep linking. If this field is set, then the
   * ios_app_link field must also be present.
   */
  iosAppStoreId: Long;
}

/** A dynamic jobs asset. */
export interface DynamicJobsAsset {
  /**
   * Required. Job ID which can be any sequence of letters and digits, and must
   * be unique and match the values of remarketing tag. Required.
   */
  jobId: string;
  /**
   * Location ID which can be any sequence of letters and digits. The ID
   * sequence (job ID + location ID) must be unique.
   */
  locationId: string;
  /** Required. Job title, for example, Software engineer. Required. */
  jobTitle: string;
  /** Job subtitle, for example, Level II. */
  jobSubtitle: string;
  /** Description, for example, Apply your technical skills. */
  description: string;
  /**
   * Image URL, for example, http://www.example.com/image.png. The image will
   * not be uploaded as image asset.
   */
  imageUrl: string;
  /** Job category, for example, Technical. */
  jobCategory: string;
  /** Contextual keywords, for example, Software engineering job. */
  contextualKeywords: string[];
  /**
   * Address which can be specified in one of the following formats.
   * (1) City, state, code, country, for example, Mountain View, CA, USA.
   * (2) Full address, for example, 123 Boulevard St, Mountain View, CA 94043.
   * (3) Latitude-longitude in the DDD format, for example, 41.40338, 2.17403.
   */
  address: string;
  /** Salary, for example, $100,000. */
  salary: string;
  /**
   * Android deep link, for example,
   * android-app://com.example.android/http/example.com/gizmos?1234.
   */
  androidAppLink: string;
  /** Similar job IDs, for example, 1275. */
  similarJobIds: string[];
  /** iOS deep link, for example, exampleApp://content/page. */
  iosAppLink: string;
  /**
   * iOS app store ID. This is used to check if the user has the app installed
   * on their device before deep linking. If this field is set, then the
   * ios_app_link field must also be present.
   */
  iosAppStoreId: Long;
}

/** A location asset. */
export interface LocationAsset {
  /**
   * Place IDs uniquely identify a place in the Google Places database and on
   * Google Maps.
   * This field is unique for a given customer ID and asset type. See
   * https://developers.google.com/places/web-service/place-id to learn more
   * about Place ID.
   */
  placeId: string;
  /**
   * The list of business locations for the customer.
   * This will only be returned if the Location Asset is syncing from the
   * Business Profile account. It is possible to have multiple Business Profile
   * listings under the same account that point to the same Place ID.
   */
  businessProfileLocations: BusinessProfileLocation[];
  /**
   * The type of location ownership.
   * If the type is BUSINESS_OWNER, it will be served as a location extension.
   * If the type is AFFILIATE, it will be served as an affiliate location.
   */
  locationOwnershipType: LocationOwnershipTypeEnum_LocationOwnershipType;
}

/**
 * Business Profile location data synced from the linked Business Profile
 * account.
 */
export interface BusinessProfileLocation {
  /**
   * Advertiser specified label for the location on the Business Profile
   * account. This is synced from the Business Profile account.
   */
  labels: string[];
  /**
   * Business Profile store code of this location. This is synced from the
   * Business Profile account.
   */
  storeCode: string;
  /**
   * Listing ID of this Business Profile location. This is synced from the
   * linked Business Profile account.
   */
  listingId: Long;
}

/** A hotel property asset. */
export interface HotelPropertyAsset {
  /**
   * Place IDs uniquely identify a place in the Google Places database and on
   * Google Maps. See https://developers.google.com/places/web-service/place-id
   * to learn more.
   */
  placeId: string;
  /** Address of the hotel. Read-only. */
  hotelAddress: string;
  /** Name of the hotel. Read-only. */
  hotelName: string;
}

function createBaseYoutubeVideoAsset(): YoutubeVideoAsset {
  return { youtubeVideoId: undefined, youtubeVideoTitle: "" };
}

export const YoutubeVideoAsset: MessageFns<YoutubeVideoAsset> = {
  encode(message: YoutubeVideoAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.youtubeVideoId !== undefined) {
      writer.uint32(18).string(message.youtubeVideoId);
    }
    if (message.youtubeVideoTitle !== "") {
      writer.uint32(26).string(message.youtubeVideoTitle);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): YoutubeVideoAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseYoutubeVideoAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.youtubeVideoId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.youtubeVideoTitle = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): YoutubeVideoAsset {
    return {
      youtubeVideoId: isSet(object.youtubeVideoId) ? globalThis.String(object.youtubeVideoId) : undefined,
      youtubeVideoTitle: isSet(object.youtubeVideoTitle) ? globalThis.String(object.youtubeVideoTitle) : "",
    };
  },

  toJSON(message: YoutubeVideoAsset): unknown {
    const obj: any = {};
    if (message.youtubeVideoId !== undefined) {
      obj.youtubeVideoId = message.youtubeVideoId;
    }
    if (message.youtubeVideoTitle !== "") {
      obj.youtubeVideoTitle = message.youtubeVideoTitle;
    }
    return obj;
  },

  create(base?: DeepPartial<YoutubeVideoAsset>): YoutubeVideoAsset {
    return YoutubeVideoAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<YoutubeVideoAsset>): YoutubeVideoAsset {
    const message = createBaseYoutubeVideoAsset();
    message.youtubeVideoId = object.youtubeVideoId ?? undefined;
    message.youtubeVideoTitle = object.youtubeVideoTitle ?? "";
    return message;
  },
};

function createBaseMediaBundleAsset(): MediaBundleAsset {
  return { data: undefined };
}

export const MediaBundleAsset: MessageFns<MediaBundleAsset> = {
  encode(message: MediaBundleAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      writer.uint32(18).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaBundleAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaBundleAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaBundleAsset {
    return { data: isSet(object.data) ? Buffer.from(bytesFromBase64(object.data)) : undefined };
  },

  toJSON(message: MediaBundleAsset): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<MediaBundleAsset>): MediaBundleAsset {
    return MediaBundleAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MediaBundleAsset>): MediaBundleAsset {
    const message = createBaseMediaBundleAsset();
    message.data = object.data ?? undefined;
    return message;
  },
};

function createBaseImageAsset(): ImageAsset {
  return { data: undefined, fileSize: undefined, mimeType: 0, fullSize: undefined };
}

export const ImageAsset: MessageFns<ImageAsset> = {
  encode(message: ImageAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      writer.uint32(42).bytes(message.data);
    }
    if (message.fileSize !== undefined) {
      writer.uint32(48).int64(message.fileSize.toString());
    }
    if (message.mimeType !== 0) {
      writer.uint32(24).int32(message.mimeType);
    }
    if (message.fullSize !== undefined) {
      ImageDimension.encode(message.fullSize, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 42) {
            break;
          }

          message.data = Buffer.from(reader.bytes());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.fileSize = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.mimeType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.fullSize = ImageDimension.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageAsset {
    return {
      data: isSet(object.data) ? Buffer.from(bytesFromBase64(object.data)) : undefined,
      fileSize: isSet(object.fileSize) ? Long.fromValue(object.fileSize) : undefined,
      mimeType: isSet(object.mimeType) ? mimeTypeEnum_MimeTypeFromJSON(object.mimeType) : 0,
      fullSize: isSet(object.fullSize) ? ImageDimension.fromJSON(object.fullSize) : undefined,
    };
  },

  toJSON(message: ImageAsset): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.fileSize !== undefined) {
      obj.fileSize = (message.fileSize || Long.ZERO).toString();
    }
    if (message.mimeType !== 0) {
      obj.mimeType = mimeTypeEnum_MimeTypeToJSON(message.mimeType);
    }
    if (message.fullSize !== undefined) {
      obj.fullSize = ImageDimension.toJSON(message.fullSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ImageAsset>): ImageAsset {
    return ImageAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImageAsset>): ImageAsset {
    const message = createBaseImageAsset();
    message.data = object.data ?? undefined;
    message.fileSize = (object.fileSize !== undefined && object.fileSize !== null)
      ? Long.fromValue(object.fileSize)
      : undefined;
    message.mimeType = object.mimeType ?? 0;
    message.fullSize = (object.fullSize !== undefined && object.fullSize !== null)
      ? ImageDimension.fromPartial(object.fullSize)
      : undefined;
    return message;
  },
};

function createBaseImageDimension(): ImageDimension {
  return { heightPixels: undefined, widthPixels: undefined, url: undefined };
}

export const ImageDimension: MessageFns<ImageDimension> = {
  encode(message: ImageDimension, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.heightPixels !== undefined) {
      writer.uint32(32).int64(message.heightPixels.toString());
    }
    if (message.widthPixels !== undefined) {
      writer.uint32(40).int64(message.widthPixels.toString());
    }
    if (message.url !== undefined) {
      writer.uint32(50).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageDimension {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageDimension();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 32) {
            break;
          }

          message.heightPixels = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.widthPixels = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageDimension {
    return {
      heightPixels: isSet(object.heightPixels) ? Long.fromValue(object.heightPixels) : undefined,
      widthPixels: isSet(object.widthPixels) ? Long.fromValue(object.widthPixels) : undefined,
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
    };
  },

  toJSON(message: ImageDimension): unknown {
    const obj: any = {};
    if (message.heightPixels !== undefined) {
      obj.heightPixels = (message.heightPixels || Long.ZERO).toString();
    }
    if (message.widthPixels !== undefined) {
      obj.widthPixels = (message.widthPixels || Long.ZERO).toString();
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    return obj;
  },

  create(base?: DeepPartial<ImageDimension>): ImageDimension {
    return ImageDimension.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImageDimension>): ImageDimension {
    const message = createBaseImageDimension();
    message.heightPixels = (object.heightPixels !== undefined && object.heightPixels !== null)
      ? Long.fromValue(object.heightPixels)
      : undefined;
    message.widthPixels = (object.widthPixels !== undefined && object.widthPixels !== null)
      ? Long.fromValue(object.widthPixels)
      : undefined;
    message.url = object.url ?? undefined;
    return message;
  },
};

function createBaseTextAsset(): TextAsset {
  return { text: undefined };
}

export const TextAsset: MessageFns<TextAsset> = {
  encode(message: TextAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      writer.uint32(18).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextAsset {
    return { text: isSet(object.text) ? globalThis.String(object.text) : undefined };
  },

  toJSON(message: TextAsset): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    return obj;
  },

  create(base?: DeepPartial<TextAsset>): TextAsset {
    return TextAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TextAsset>): TextAsset {
    const message = createBaseTextAsset();
    message.text = object.text ?? undefined;
    return message;
  },
};

function createBaseLeadFormAsset(): LeadFormAsset {
  return {
    businessName: "",
    callToActionType: 0,
    callToActionDescription: "",
    headline: "",
    description: "",
    privacyPolicyUrl: "",
    postSubmitHeadline: undefined,
    postSubmitDescription: undefined,
    fields: [],
    customQuestionFields: [],
    deliveryMethods: [],
    postSubmitCallToActionType: 0,
    backgroundImageAsset: undefined,
    desiredIntent: 0,
    customDisclosure: undefined,
  };
}

export const LeadFormAsset: MessageFns<LeadFormAsset> = {
  encode(message: LeadFormAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.businessName !== "") {
      writer.uint32(82).string(message.businessName);
    }
    if (message.callToActionType !== 0) {
      writer.uint32(136).int32(message.callToActionType);
    }
    if (message.callToActionDescription !== "") {
      writer.uint32(146).string(message.callToActionDescription);
    }
    if (message.headline !== "") {
      writer.uint32(98).string(message.headline);
    }
    if (message.description !== "") {
      writer.uint32(106).string(message.description);
    }
    if (message.privacyPolicyUrl !== "") {
      writer.uint32(114).string(message.privacyPolicyUrl);
    }
    if (message.postSubmitHeadline !== undefined) {
      writer.uint32(122).string(message.postSubmitHeadline);
    }
    if (message.postSubmitDescription !== undefined) {
      writer.uint32(130).string(message.postSubmitDescription);
    }
    for (const v of message.fields) {
      LeadFormField.encode(v!, writer.uint32(66).fork()).join();
    }
    for (const v of message.customQuestionFields) {
      LeadFormCustomQuestionField.encode(v!, writer.uint32(186).fork()).join();
    }
    for (const v of message.deliveryMethods) {
      LeadFormDeliveryMethod.encode(v!, writer.uint32(74).fork()).join();
    }
    if (message.postSubmitCallToActionType !== 0) {
      writer.uint32(152).int32(message.postSubmitCallToActionType);
    }
    if (message.backgroundImageAsset !== undefined) {
      writer.uint32(162).string(message.backgroundImageAsset);
    }
    if (message.desiredIntent !== 0) {
      writer.uint32(168).int32(message.desiredIntent);
    }
    if (message.customDisclosure !== undefined) {
      writer.uint32(178).string(message.customDisclosure);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeadFormAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeadFormAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 10:
          if (tag !== 82) {
            break;
          }

          message.businessName = reader.string();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.callToActionType = reader.int32() as any;
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.callToActionDescription = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.headline = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.description = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.privacyPolicyUrl = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.postSubmitHeadline = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.postSubmitDescription = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.fields.push(LeadFormField.decode(reader, reader.uint32()));
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.customQuestionFields.push(LeadFormCustomQuestionField.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.deliveryMethods.push(LeadFormDeliveryMethod.decode(reader, reader.uint32()));
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.postSubmitCallToActionType = reader.int32() as any;
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.backgroundImageAsset = reader.string();
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.desiredIntent = reader.int32() as any;
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.customDisclosure = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeadFormAsset {
    return {
      businessName: isSet(object.businessName) ? globalThis.String(object.businessName) : "",
      callToActionType: isSet(object.callToActionType)
        ? leadFormCallToActionTypeEnum_LeadFormCallToActionTypeFromJSON(object.callToActionType)
        : 0,
      callToActionDescription: isSet(object.callToActionDescription)
        ? globalThis.String(object.callToActionDescription)
        : "",
      headline: isSet(object.headline) ? globalThis.String(object.headline) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      privacyPolicyUrl: isSet(object.privacyPolicyUrl) ? globalThis.String(object.privacyPolicyUrl) : "",
      postSubmitHeadline: isSet(object.postSubmitHeadline) ? globalThis.String(object.postSubmitHeadline) : undefined,
      postSubmitDescription: isSet(object.postSubmitDescription)
        ? globalThis.String(object.postSubmitDescription)
        : undefined,
      fields: globalThis.Array.isArray(object?.fields) ? object.fields.map((e: any) => LeadFormField.fromJSON(e)) : [],
      customQuestionFields: globalThis.Array.isArray(object?.customQuestionFields)
        ? object.customQuestionFields.map((e: any) => LeadFormCustomQuestionField.fromJSON(e))
        : [],
      deliveryMethods: globalThis.Array.isArray(object?.deliveryMethods)
        ? object.deliveryMethods.map((e: any) => LeadFormDeliveryMethod.fromJSON(e))
        : [],
      postSubmitCallToActionType: isSet(object.postSubmitCallToActionType)
        ? leadFormPostSubmitCallToActionTypeEnum_LeadFormPostSubmitCallToActionTypeFromJSON(
          object.postSubmitCallToActionType,
        )
        : 0,
      backgroundImageAsset: isSet(object.backgroundImageAsset)
        ? globalThis.String(object.backgroundImageAsset)
        : undefined,
      desiredIntent: isSet(object.desiredIntent)
        ? leadFormDesiredIntentEnum_LeadFormDesiredIntentFromJSON(object.desiredIntent)
        : 0,
      customDisclosure: isSet(object.customDisclosure) ? globalThis.String(object.customDisclosure) : undefined,
    };
  },

  toJSON(message: LeadFormAsset): unknown {
    const obj: any = {};
    if (message.businessName !== "") {
      obj.businessName = message.businessName;
    }
    if (message.callToActionType !== 0) {
      obj.callToActionType = leadFormCallToActionTypeEnum_LeadFormCallToActionTypeToJSON(message.callToActionType);
    }
    if (message.callToActionDescription !== "") {
      obj.callToActionDescription = message.callToActionDescription;
    }
    if (message.headline !== "") {
      obj.headline = message.headline;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.privacyPolicyUrl !== "") {
      obj.privacyPolicyUrl = message.privacyPolicyUrl;
    }
    if (message.postSubmitHeadline !== undefined) {
      obj.postSubmitHeadline = message.postSubmitHeadline;
    }
    if (message.postSubmitDescription !== undefined) {
      obj.postSubmitDescription = message.postSubmitDescription;
    }
    if (message.fields?.length) {
      obj.fields = message.fields.map((e) => LeadFormField.toJSON(e));
    }
    if (message.customQuestionFields?.length) {
      obj.customQuestionFields = message.customQuestionFields.map((e) => LeadFormCustomQuestionField.toJSON(e));
    }
    if (message.deliveryMethods?.length) {
      obj.deliveryMethods = message.deliveryMethods.map((e) => LeadFormDeliveryMethod.toJSON(e));
    }
    if (message.postSubmitCallToActionType !== 0) {
      obj.postSubmitCallToActionType = leadFormPostSubmitCallToActionTypeEnum_LeadFormPostSubmitCallToActionTypeToJSON(
        message.postSubmitCallToActionType,
      );
    }
    if (message.backgroundImageAsset !== undefined) {
      obj.backgroundImageAsset = message.backgroundImageAsset;
    }
    if (message.desiredIntent !== 0) {
      obj.desiredIntent = leadFormDesiredIntentEnum_LeadFormDesiredIntentToJSON(message.desiredIntent);
    }
    if (message.customDisclosure !== undefined) {
      obj.customDisclosure = message.customDisclosure;
    }
    return obj;
  },

  create(base?: DeepPartial<LeadFormAsset>): LeadFormAsset {
    return LeadFormAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LeadFormAsset>): LeadFormAsset {
    const message = createBaseLeadFormAsset();
    message.businessName = object.businessName ?? "";
    message.callToActionType = object.callToActionType ?? 0;
    message.callToActionDescription = object.callToActionDescription ?? "";
    message.headline = object.headline ?? "";
    message.description = object.description ?? "";
    message.privacyPolicyUrl = object.privacyPolicyUrl ?? "";
    message.postSubmitHeadline = object.postSubmitHeadline ?? undefined;
    message.postSubmitDescription = object.postSubmitDescription ?? undefined;
    message.fields = object.fields?.map((e) => LeadFormField.fromPartial(e)) || [];
    message.customQuestionFields =
      object.customQuestionFields?.map((e) => LeadFormCustomQuestionField.fromPartial(e)) || [];
    message.deliveryMethods = object.deliveryMethods?.map((e) => LeadFormDeliveryMethod.fromPartial(e)) || [];
    message.postSubmitCallToActionType = object.postSubmitCallToActionType ?? 0;
    message.backgroundImageAsset = object.backgroundImageAsset ?? undefined;
    message.desiredIntent = object.desiredIntent ?? 0;
    message.customDisclosure = object.customDisclosure ?? undefined;
    return message;
  },
};

function createBaseLeadFormField(): LeadFormField {
  return { inputType: 0, singleChoiceAnswers: undefined, hasLocationAnswer: undefined };
}

export const LeadFormField: MessageFns<LeadFormField> = {
  encode(message: LeadFormField, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inputType !== 0) {
      writer.uint32(8).int32(message.inputType);
    }
    if (message.singleChoiceAnswers !== undefined) {
      LeadFormSingleChoiceAnswers.encode(message.singleChoiceAnswers, writer.uint32(18).fork()).join();
    }
    if (message.hasLocationAnswer !== undefined) {
      writer.uint32(24).bool(message.hasLocationAnswer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeadFormField {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeadFormField();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.inputType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.singleChoiceAnswers = LeadFormSingleChoiceAnswers.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hasLocationAnswer = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeadFormField {
    return {
      inputType: isSet(object.inputType)
        ? leadFormFieldUserInputTypeEnum_LeadFormFieldUserInputTypeFromJSON(object.inputType)
        : 0,
      singleChoiceAnswers: isSet(object.singleChoiceAnswers)
        ? LeadFormSingleChoiceAnswers.fromJSON(object.singleChoiceAnswers)
        : undefined,
      hasLocationAnswer: isSet(object.hasLocationAnswer) ? globalThis.Boolean(object.hasLocationAnswer) : undefined,
    };
  },

  toJSON(message: LeadFormField): unknown {
    const obj: any = {};
    if (message.inputType !== 0) {
      obj.inputType = leadFormFieldUserInputTypeEnum_LeadFormFieldUserInputTypeToJSON(message.inputType);
    }
    if (message.singleChoiceAnswers !== undefined) {
      obj.singleChoiceAnswers = LeadFormSingleChoiceAnswers.toJSON(message.singleChoiceAnswers);
    }
    if (message.hasLocationAnswer !== undefined) {
      obj.hasLocationAnswer = message.hasLocationAnswer;
    }
    return obj;
  },

  create(base?: DeepPartial<LeadFormField>): LeadFormField {
    return LeadFormField.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LeadFormField>): LeadFormField {
    const message = createBaseLeadFormField();
    message.inputType = object.inputType ?? 0;
    message.singleChoiceAnswers = (object.singleChoiceAnswers !== undefined && object.singleChoiceAnswers !== null)
      ? LeadFormSingleChoiceAnswers.fromPartial(object.singleChoiceAnswers)
      : undefined;
    message.hasLocationAnswer = object.hasLocationAnswer ?? undefined;
    return message;
  },
};

function createBaseLeadFormCustomQuestionField(): LeadFormCustomQuestionField {
  return { customQuestionText: "", singleChoiceAnswers: undefined, hasLocationAnswer: undefined };
}

export const LeadFormCustomQuestionField: MessageFns<LeadFormCustomQuestionField> = {
  encode(message: LeadFormCustomQuestionField, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customQuestionText !== "") {
      writer.uint32(10).string(message.customQuestionText);
    }
    if (message.singleChoiceAnswers !== undefined) {
      LeadFormSingleChoiceAnswers.encode(message.singleChoiceAnswers, writer.uint32(18).fork()).join();
    }
    if (message.hasLocationAnswer !== undefined) {
      writer.uint32(24).bool(message.hasLocationAnswer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeadFormCustomQuestionField {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeadFormCustomQuestionField();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customQuestionText = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.singleChoiceAnswers = LeadFormSingleChoiceAnswers.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hasLocationAnswer = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeadFormCustomQuestionField {
    return {
      customQuestionText: isSet(object.customQuestionText) ? globalThis.String(object.customQuestionText) : "",
      singleChoiceAnswers: isSet(object.singleChoiceAnswers)
        ? LeadFormSingleChoiceAnswers.fromJSON(object.singleChoiceAnswers)
        : undefined,
      hasLocationAnswer: isSet(object.hasLocationAnswer) ? globalThis.Boolean(object.hasLocationAnswer) : undefined,
    };
  },

  toJSON(message: LeadFormCustomQuestionField): unknown {
    const obj: any = {};
    if (message.customQuestionText !== "") {
      obj.customQuestionText = message.customQuestionText;
    }
    if (message.singleChoiceAnswers !== undefined) {
      obj.singleChoiceAnswers = LeadFormSingleChoiceAnswers.toJSON(message.singleChoiceAnswers);
    }
    if (message.hasLocationAnswer !== undefined) {
      obj.hasLocationAnswer = message.hasLocationAnswer;
    }
    return obj;
  },

  create(base?: DeepPartial<LeadFormCustomQuestionField>): LeadFormCustomQuestionField {
    return LeadFormCustomQuestionField.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LeadFormCustomQuestionField>): LeadFormCustomQuestionField {
    const message = createBaseLeadFormCustomQuestionField();
    message.customQuestionText = object.customQuestionText ?? "";
    message.singleChoiceAnswers = (object.singleChoiceAnswers !== undefined && object.singleChoiceAnswers !== null)
      ? LeadFormSingleChoiceAnswers.fromPartial(object.singleChoiceAnswers)
      : undefined;
    message.hasLocationAnswer = object.hasLocationAnswer ?? undefined;
    return message;
  },
};

function createBaseLeadFormSingleChoiceAnswers(): LeadFormSingleChoiceAnswers {
  return { answers: [] };
}

export const LeadFormSingleChoiceAnswers: MessageFns<LeadFormSingleChoiceAnswers> = {
  encode(message: LeadFormSingleChoiceAnswers, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.answers) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeadFormSingleChoiceAnswers {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeadFormSingleChoiceAnswers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.answers.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeadFormSingleChoiceAnswers {
    return {
      answers: globalThis.Array.isArray(object?.answers) ? object.answers.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: LeadFormSingleChoiceAnswers): unknown {
    const obj: any = {};
    if (message.answers?.length) {
      obj.answers = message.answers;
    }
    return obj;
  },

  create(base?: DeepPartial<LeadFormSingleChoiceAnswers>): LeadFormSingleChoiceAnswers {
    return LeadFormSingleChoiceAnswers.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LeadFormSingleChoiceAnswers>): LeadFormSingleChoiceAnswers {
    const message = createBaseLeadFormSingleChoiceAnswers();
    message.answers = object.answers?.map((e) => e) || [];
    return message;
  },
};

function createBaseLeadFormDeliveryMethod(): LeadFormDeliveryMethod {
  return { webhook: undefined };
}

export const LeadFormDeliveryMethod: MessageFns<LeadFormDeliveryMethod> = {
  encode(message: LeadFormDeliveryMethod, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.webhook !== undefined) {
      WebhookDelivery.encode(message.webhook, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeadFormDeliveryMethod {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeadFormDeliveryMethod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.webhook = WebhookDelivery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeadFormDeliveryMethod {
    return { webhook: isSet(object.webhook) ? WebhookDelivery.fromJSON(object.webhook) : undefined };
  },

  toJSON(message: LeadFormDeliveryMethod): unknown {
    const obj: any = {};
    if (message.webhook !== undefined) {
      obj.webhook = WebhookDelivery.toJSON(message.webhook);
    }
    return obj;
  },

  create(base?: DeepPartial<LeadFormDeliveryMethod>): LeadFormDeliveryMethod {
    return LeadFormDeliveryMethod.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LeadFormDeliveryMethod>): LeadFormDeliveryMethod {
    const message = createBaseLeadFormDeliveryMethod();
    message.webhook = (object.webhook !== undefined && object.webhook !== null)
      ? WebhookDelivery.fromPartial(object.webhook)
      : undefined;
    return message;
  },
};

function createBaseWebhookDelivery(): WebhookDelivery {
  return { advertiserWebhookUrl: undefined, googleSecret: undefined, payloadSchemaVersion: undefined };
}

export const WebhookDelivery: MessageFns<WebhookDelivery> = {
  encode(message: WebhookDelivery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.advertiserWebhookUrl !== undefined) {
      writer.uint32(34).string(message.advertiserWebhookUrl);
    }
    if (message.googleSecret !== undefined) {
      writer.uint32(42).string(message.googleSecret);
    }
    if (message.payloadSchemaVersion !== undefined) {
      writer.uint32(48).int64(message.payloadSchemaVersion.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebhookDelivery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebhookDelivery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.advertiserWebhookUrl = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.googleSecret = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.payloadSchemaVersion = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebhookDelivery {
    return {
      advertiserWebhookUrl: isSet(object.advertiserWebhookUrl)
        ? globalThis.String(object.advertiserWebhookUrl)
        : undefined,
      googleSecret: isSet(object.googleSecret) ? globalThis.String(object.googleSecret) : undefined,
      payloadSchemaVersion: isSet(object.payloadSchemaVersion)
        ? Long.fromValue(object.payloadSchemaVersion)
        : undefined,
    };
  },

  toJSON(message: WebhookDelivery): unknown {
    const obj: any = {};
    if (message.advertiserWebhookUrl !== undefined) {
      obj.advertiserWebhookUrl = message.advertiserWebhookUrl;
    }
    if (message.googleSecret !== undefined) {
      obj.googleSecret = message.googleSecret;
    }
    if (message.payloadSchemaVersion !== undefined) {
      obj.payloadSchemaVersion = (message.payloadSchemaVersion || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<WebhookDelivery>): WebhookDelivery {
    return WebhookDelivery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WebhookDelivery>): WebhookDelivery {
    const message = createBaseWebhookDelivery();
    message.advertiserWebhookUrl = object.advertiserWebhookUrl ?? undefined;
    message.googleSecret = object.googleSecret ?? undefined;
    message.payloadSchemaVersion = (object.payloadSchemaVersion !== undefined && object.payloadSchemaVersion !== null)
      ? Long.fromValue(object.payloadSchemaVersion)
      : undefined;
    return message;
  },
};

function createBaseBookOnGoogleAsset(): BookOnGoogleAsset {
  return {};
}

export const BookOnGoogleAsset: MessageFns<BookOnGoogleAsset> = {
  encode(_: BookOnGoogleAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BookOnGoogleAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBookOnGoogleAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): BookOnGoogleAsset {
    return {};
  },

  toJSON(_: BookOnGoogleAsset): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<BookOnGoogleAsset>): BookOnGoogleAsset {
    return BookOnGoogleAsset.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<BookOnGoogleAsset>): BookOnGoogleAsset {
    const message = createBaseBookOnGoogleAsset();
    return message;
  },
};

function createBasePromotionAsset(): PromotionAsset {
  return {
    promotionTarget: "",
    discountModifier: 0,
    redemptionStartDate: "",
    redemptionEndDate: "",
    occasion: 0,
    languageCode: "",
    startDate: "",
    endDate: "",
    adScheduleTargets: [],
    percentOff: undefined,
    moneyAmountOff: undefined,
    promotionCode: undefined,
    ordersOverAmount: undefined,
  };
}

export const PromotionAsset: MessageFns<PromotionAsset> = {
  encode(message: PromotionAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.promotionTarget !== "") {
      writer.uint32(10).string(message.promotionTarget);
    }
    if (message.discountModifier !== 0) {
      writer.uint32(16).int32(message.discountModifier);
    }
    if (message.redemptionStartDate !== "") {
      writer.uint32(58).string(message.redemptionStartDate);
    }
    if (message.redemptionEndDate !== "") {
      writer.uint32(66).string(message.redemptionEndDate);
    }
    if (message.occasion !== 0) {
      writer.uint32(72).int32(message.occasion);
    }
    if (message.languageCode !== "") {
      writer.uint32(82).string(message.languageCode);
    }
    if (message.startDate !== "") {
      writer.uint32(90).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(98).string(message.endDate);
    }
    for (const v of message.adScheduleTargets) {
      AdScheduleInfo.encode(v!, writer.uint32(106).fork()).join();
    }
    if (message.percentOff !== undefined) {
      writer.uint32(24).int64(message.percentOff.toString());
    }
    if (message.moneyAmountOff !== undefined) {
      Money.encode(message.moneyAmountOff, writer.uint32(34).fork()).join();
    }
    if (message.promotionCode !== undefined) {
      writer.uint32(42).string(message.promotionCode);
    }
    if (message.ordersOverAmount !== undefined) {
      Money.encode(message.ordersOverAmount, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PromotionAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePromotionAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.promotionTarget = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.discountModifier = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.redemptionStartDate = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.redemptionEndDate = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.occasion = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.startDate = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.endDate = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.adScheduleTargets.push(AdScheduleInfo.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.percentOff = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.moneyAmountOff = Money.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.promotionCode = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.ordersOverAmount = Money.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PromotionAsset {
    return {
      promotionTarget: isSet(object.promotionTarget) ? globalThis.String(object.promotionTarget) : "",
      discountModifier: isSet(object.discountModifier)
        ? promotionExtensionDiscountModifierEnum_PromotionExtensionDiscountModifierFromJSON(object.discountModifier)
        : 0,
      redemptionStartDate: isSet(object.redemptionStartDate) ? globalThis.String(object.redemptionStartDate) : "",
      redemptionEndDate: isSet(object.redemptionEndDate) ? globalThis.String(object.redemptionEndDate) : "",
      occasion: isSet(object.occasion)
        ? promotionExtensionOccasionEnum_PromotionExtensionOccasionFromJSON(object.occasion)
        : 0,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
      adScheduleTargets: globalThis.Array.isArray(object?.adScheduleTargets)
        ? object.adScheduleTargets.map((e: any) => AdScheduleInfo.fromJSON(e))
        : [],
      percentOff: isSet(object.percentOff) ? Long.fromValue(object.percentOff) : undefined,
      moneyAmountOff: isSet(object.moneyAmountOff) ? Money.fromJSON(object.moneyAmountOff) : undefined,
      promotionCode: isSet(object.promotionCode) ? globalThis.String(object.promotionCode) : undefined,
      ordersOverAmount: isSet(object.ordersOverAmount) ? Money.fromJSON(object.ordersOverAmount) : undefined,
    };
  },

  toJSON(message: PromotionAsset): unknown {
    const obj: any = {};
    if (message.promotionTarget !== "") {
      obj.promotionTarget = message.promotionTarget;
    }
    if (message.discountModifier !== 0) {
      obj.discountModifier = promotionExtensionDiscountModifierEnum_PromotionExtensionDiscountModifierToJSON(
        message.discountModifier,
      );
    }
    if (message.redemptionStartDate !== "") {
      obj.redemptionStartDate = message.redemptionStartDate;
    }
    if (message.redemptionEndDate !== "") {
      obj.redemptionEndDate = message.redemptionEndDate;
    }
    if (message.occasion !== 0) {
      obj.occasion = promotionExtensionOccasionEnum_PromotionExtensionOccasionToJSON(message.occasion);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.startDate !== "") {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== "") {
      obj.endDate = message.endDate;
    }
    if (message.adScheduleTargets?.length) {
      obj.adScheduleTargets = message.adScheduleTargets.map((e) => AdScheduleInfo.toJSON(e));
    }
    if (message.percentOff !== undefined) {
      obj.percentOff = (message.percentOff || Long.ZERO).toString();
    }
    if (message.moneyAmountOff !== undefined) {
      obj.moneyAmountOff = Money.toJSON(message.moneyAmountOff);
    }
    if (message.promotionCode !== undefined) {
      obj.promotionCode = message.promotionCode;
    }
    if (message.ordersOverAmount !== undefined) {
      obj.ordersOverAmount = Money.toJSON(message.ordersOverAmount);
    }
    return obj;
  },

  create(base?: DeepPartial<PromotionAsset>): PromotionAsset {
    return PromotionAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PromotionAsset>): PromotionAsset {
    const message = createBasePromotionAsset();
    message.promotionTarget = object.promotionTarget ?? "";
    message.discountModifier = object.discountModifier ?? 0;
    message.redemptionStartDate = object.redemptionStartDate ?? "";
    message.redemptionEndDate = object.redemptionEndDate ?? "";
    message.occasion = object.occasion ?? 0;
    message.languageCode = object.languageCode ?? "";
    message.startDate = object.startDate ?? "";
    message.endDate = object.endDate ?? "";
    message.adScheduleTargets = object.adScheduleTargets?.map((e) => AdScheduleInfo.fromPartial(e)) || [];
    message.percentOff = (object.percentOff !== undefined && object.percentOff !== null)
      ? Long.fromValue(object.percentOff)
      : undefined;
    message.moneyAmountOff = (object.moneyAmountOff !== undefined && object.moneyAmountOff !== null)
      ? Money.fromPartial(object.moneyAmountOff)
      : undefined;
    message.promotionCode = object.promotionCode ?? undefined;
    message.ordersOverAmount = (object.ordersOverAmount !== undefined && object.ordersOverAmount !== null)
      ? Money.fromPartial(object.ordersOverAmount)
      : undefined;
    return message;
  },
};

function createBaseCalloutAsset(): CalloutAsset {
  return { calloutText: "", startDate: "", endDate: "", adScheduleTargets: [] };
}

export const CalloutAsset: MessageFns<CalloutAsset> = {
  encode(message: CalloutAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.calloutText !== "") {
      writer.uint32(10).string(message.calloutText);
    }
    if (message.startDate !== "") {
      writer.uint32(18).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(26).string(message.endDate);
    }
    for (const v of message.adScheduleTargets) {
      AdScheduleInfo.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CalloutAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalloutAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.calloutText = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.startDate = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.endDate = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.adScheduleTargets.push(AdScheduleInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CalloutAsset {
    return {
      calloutText: isSet(object.calloutText) ? globalThis.String(object.calloutText) : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
      adScheduleTargets: globalThis.Array.isArray(object?.adScheduleTargets)
        ? object.adScheduleTargets.map((e: any) => AdScheduleInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CalloutAsset): unknown {
    const obj: any = {};
    if (message.calloutText !== "") {
      obj.calloutText = message.calloutText;
    }
    if (message.startDate !== "") {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== "") {
      obj.endDate = message.endDate;
    }
    if (message.adScheduleTargets?.length) {
      obj.adScheduleTargets = message.adScheduleTargets.map((e) => AdScheduleInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CalloutAsset>): CalloutAsset {
    return CalloutAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CalloutAsset>): CalloutAsset {
    const message = createBaseCalloutAsset();
    message.calloutText = object.calloutText ?? "";
    message.startDate = object.startDate ?? "";
    message.endDate = object.endDate ?? "";
    message.adScheduleTargets = object.adScheduleTargets?.map((e) => AdScheduleInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStructuredSnippetAsset(): StructuredSnippetAsset {
  return { header: "", values: [] };
}

export const StructuredSnippetAsset: MessageFns<StructuredSnippetAsset> = {
  encode(message: StructuredSnippetAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== "") {
      writer.uint32(10).string(message.header);
    }
    for (const v of message.values) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StructuredSnippetAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStructuredSnippetAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.values.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StructuredSnippetAsset {
    return {
      header: isSet(object.header) ? globalThis.String(object.header) : "",
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: StructuredSnippetAsset): unknown {
    const obj: any = {};
    if (message.header !== "") {
      obj.header = message.header;
    }
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create(base?: DeepPartial<StructuredSnippetAsset>): StructuredSnippetAsset {
    return StructuredSnippetAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StructuredSnippetAsset>): StructuredSnippetAsset {
    const message = createBaseStructuredSnippetAsset();
    message.header = object.header ?? "";
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseSitelinkAsset(): SitelinkAsset {
  return { linkText: "", description1: "", description2: "", startDate: "", endDate: "", adScheduleTargets: [] };
}

export const SitelinkAsset: MessageFns<SitelinkAsset> = {
  encode(message: SitelinkAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.linkText !== "") {
      writer.uint32(10).string(message.linkText);
    }
    if (message.description1 !== "") {
      writer.uint32(18).string(message.description1);
    }
    if (message.description2 !== "") {
      writer.uint32(26).string(message.description2);
    }
    if (message.startDate !== "") {
      writer.uint32(34).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(42).string(message.endDate);
    }
    for (const v of message.adScheduleTargets) {
      AdScheduleInfo.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SitelinkAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSitelinkAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.linkText = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description1 = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description2 = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.startDate = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.endDate = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.adScheduleTargets.push(AdScheduleInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SitelinkAsset {
    return {
      linkText: isSet(object.linkText) ? globalThis.String(object.linkText) : "",
      description1: isSet(object.description1) ? globalThis.String(object.description1) : "",
      description2: isSet(object.description2) ? globalThis.String(object.description2) : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
      adScheduleTargets: globalThis.Array.isArray(object?.adScheduleTargets)
        ? object.adScheduleTargets.map((e: any) => AdScheduleInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SitelinkAsset): unknown {
    const obj: any = {};
    if (message.linkText !== "") {
      obj.linkText = message.linkText;
    }
    if (message.description1 !== "") {
      obj.description1 = message.description1;
    }
    if (message.description2 !== "") {
      obj.description2 = message.description2;
    }
    if (message.startDate !== "") {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== "") {
      obj.endDate = message.endDate;
    }
    if (message.adScheduleTargets?.length) {
      obj.adScheduleTargets = message.adScheduleTargets.map((e) => AdScheduleInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SitelinkAsset>): SitelinkAsset {
    return SitelinkAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SitelinkAsset>): SitelinkAsset {
    const message = createBaseSitelinkAsset();
    message.linkText = object.linkText ?? "";
    message.description1 = object.description1 ?? "";
    message.description2 = object.description2 ?? "";
    message.startDate = object.startDate ?? "";
    message.endDate = object.endDate ?? "";
    message.adScheduleTargets = object.adScheduleTargets?.map((e) => AdScheduleInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBasePageFeedAsset(): PageFeedAsset {
  return { pageUrl: "", labels: [] };
}

export const PageFeedAsset: MessageFns<PageFeedAsset> = {
  encode(message: PageFeedAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageUrl !== "") {
      writer.uint32(10).string(message.pageUrl);
    }
    for (const v of message.labels) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PageFeedAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePageFeedAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pageUrl = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.labels.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PageFeedAsset {
    return {
      pageUrl: isSet(object.pageUrl) ? globalThis.String(object.pageUrl) : "",
      labels: globalThis.Array.isArray(object?.labels) ? object.labels.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: PageFeedAsset): unknown {
    const obj: any = {};
    if (message.pageUrl !== "") {
      obj.pageUrl = message.pageUrl;
    }
    if (message.labels?.length) {
      obj.labels = message.labels;
    }
    return obj;
  },

  create(base?: DeepPartial<PageFeedAsset>): PageFeedAsset {
    return PageFeedAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PageFeedAsset>): PageFeedAsset {
    const message = createBasePageFeedAsset();
    message.pageUrl = object.pageUrl ?? "";
    message.labels = object.labels?.map((e) => e) || [];
    return message;
  },
};

function createBaseDynamicEducationAsset(): DynamicEducationAsset {
  return {
    programId: "",
    locationId: "",
    programName: "",
    subject: "",
    programDescription: "",
    schoolName: "",
    address: "",
    contextualKeywords: [],
    androidAppLink: "",
    similarProgramIds: [],
    iosAppLink: "",
    iosAppStoreId: Long.ZERO,
    thumbnailImageUrl: "",
    imageUrl: "",
  };
}

export const DynamicEducationAsset: MessageFns<DynamicEducationAsset> = {
  encode(message: DynamicEducationAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.programId !== "") {
      writer.uint32(10).string(message.programId);
    }
    if (message.locationId !== "") {
      writer.uint32(18).string(message.locationId);
    }
    if (message.programName !== "") {
      writer.uint32(26).string(message.programName);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.programDescription !== "") {
      writer.uint32(42).string(message.programDescription);
    }
    if (message.schoolName !== "") {
      writer.uint32(50).string(message.schoolName);
    }
    if (message.address !== "") {
      writer.uint32(58).string(message.address);
    }
    for (const v of message.contextualKeywords) {
      writer.uint32(66).string(v!);
    }
    if (message.androidAppLink !== "") {
      writer.uint32(74).string(message.androidAppLink);
    }
    for (const v of message.similarProgramIds) {
      writer.uint32(82).string(v!);
    }
    if (message.iosAppLink !== "") {
      writer.uint32(90).string(message.iosAppLink);
    }
    if (!message.iosAppStoreId.equals(Long.ZERO)) {
      writer.uint32(96).int64(message.iosAppStoreId.toString());
    }
    if (message.thumbnailImageUrl !== "") {
      writer.uint32(106).string(message.thumbnailImageUrl);
    }
    if (message.imageUrl !== "") {
      writer.uint32(114).string(message.imageUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicEducationAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicEducationAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.programId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.locationId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.programName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.programDescription = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.schoolName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.address = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.contextualKeywords.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.androidAppLink = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.similarProgramIds.push(reader.string());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.iosAppLink = reader.string();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.iosAppStoreId = Long.fromString(reader.int64().toString());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.thumbnailImageUrl = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicEducationAsset {
    return {
      programId: isSet(object.programId) ? globalThis.String(object.programId) : "",
      locationId: isSet(object.locationId) ? globalThis.String(object.locationId) : "",
      programName: isSet(object.programName) ? globalThis.String(object.programName) : "",
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      programDescription: isSet(object.programDescription) ? globalThis.String(object.programDescription) : "",
      schoolName: isSet(object.schoolName) ? globalThis.String(object.schoolName) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      contextualKeywords: globalThis.Array.isArray(object?.contextualKeywords)
        ? object.contextualKeywords.map((e: any) => globalThis.String(e))
        : [],
      androidAppLink: isSet(object.androidAppLink) ? globalThis.String(object.androidAppLink) : "",
      similarProgramIds: globalThis.Array.isArray(object?.similarProgramIds)
        ? object.similarProgramIds.map((e: any) => globalThis.String(e))
        : [],
      iosAppLink: isSet(object.iosAppLink) ? globalThis.String(object.iosAppLink) : "",
      iosAppStoreId: isSet(object.iosAppStoreId) ? Long.fromValue(object.iosAppStoreId) : Long.ZERO,
      thumbnailImageUrl: isSet(object.thumbnailImageUrl) ? globalThis.String(object.thumbnailImageUrl) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
    };
  },

  toJSON(message: DynamicEducationAsset): unknown {
    const obj: any = {};
    if (message.programId !== "") {
      obj.programId = message.programId;
    }
    if (message.locationId !== "") {
      obj.locationId = message.locationId;
    }
    if (message.programName !== "") {
      obj.programName = message.programName;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.programDescription !== "") {
      obj.programDescription = message.programDescription;
    }
    if (message.schoolName !== "") {
      obj.schoolName = message.schoolName;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.contextualKeywords?.length) {
      obj.contextualKeywords = message.contextualKeywords;
    }
    if (message.androidAppLink !== "") {
      obj.androidAppLink = message.androidAppLink;
    }
    if (message.similarProgramIds?.length) {
      obj.similarProgramIds = message.similarProgramIds;
    }
    if (message.iosAppLink !== "") {
      obj.iosAppLink = message.iosAppLink;
    }
    if (!message.iosAppStoreId.equals(Long.ZERO)) {
      obj.iosAppStoreId = (message.iosAppStoreId || Long.ZERO).toString();
    }
    if (message.thumbnailImageUrl !== "") {
      obj.thumbnailImageUrl = message.thumbnailImageUrl;
    }
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    return obj;
  },

  create(base?: DeepPartial<DynamicEducationAsset>): DynamicEducationAsset {
    return DynamicEducationAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DynamicEducationAsset>): DynamicEducationAsset {
    const message = createBaseDynamicEducationAsset();
    message.programId = object.programId ?? "";
    message.locationId = object.locationId ?? "";
    message.programName = object.programName ?? "";
    message.subject = object.subject ?? "";
    message.programDescription = object.programDescription ?? "";
    message.schoolName = object.schoolName ?? "";
    message.address = object.address ?? "";
    message.contextualKeywords = object.contextualKeywords?.map((e) => e) || [];
    message.androidAppLink = object.androidAppLink ?? "";
    message.similarProgramIds = object.similarProgramIds?.map((e) => e) || [];
    message.iosAppLink = object.iosAppLink ?? "";
    message.iosAppStoreId = (object.iosAppStoreId !== undefined && object.iosAppStoreId !== null)
      ? Long.fromValue(object.iosAppStoreId)
      : Long.ZERO;
    message.thumbnailImageUrl = object.thumbnailImageUrl ?? "";
    message.imageUrl = object.imageUrl ?? "";
    return message;
  },
};

function createBaseMobileAppAsset(): MobileAppAsset {
  return { appId: "", appStore: 0, linkText: "", startDate: "", endDate: "" };
}

export const MobileAppAsset: MessageFns<MobileAppAsset> = {
  encode(message: MobileAppAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.appId !== "") {
      writer.uint32(10).string(message.appId);
    }
    if (message.appStore !== 0) {
      writer.uint32(16).int32(message.appStore);
    }
    if (message.linkText !== "") {
      writer.uint32(26).string(message.linkText);
    }
    if (message.startDate !== "") {
      writer.uint32(34).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(42).string(message.endDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MobileAppAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMobileAppAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.appStore = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.linkText = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.startDate = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.endDate = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MobileAppAsset {
    return {
      appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
      appStore: isSet(object.appStore) ? mobileAppVendorEnum_MobileAppVendorFromJSON(object.appStore) : 0,
      linkText: isSet(object.linkText) ? globalThis.String(object.linkText) : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
    };
  },

  toJSON(message: MobileAppAsset): unknown {
    const obj: any = {};
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.appStore !== 0) {
      obj.appStore = mobileAppVendorEnum_MobileAppVendorToJSON(message.appStore);
    }
    if (message.linkText !== "") {
      obj.linkText = message.linkText;
    }
    if (message.startDate !== "") {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== "") {
      obj.endDate = message.endDate;
    }
    return obj;
  },

  create(base?: DeepPartial<MobileAppAsset>): MobileAppAsset {
    return MobileAppAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MobileAppAsset>): MobileAppAsset {
    const message = createBaseMobileAppAsset();
    message.appId = object.appId ?? "";
    message.appStore = object.appStore ?? 0;
    message.linkText = object.linkText ?? "";
    message.startDate = object.startDate ?? "";
    message.endDate = object.endDate ?? "";
    return message;
  },
};

function createBaseHotelCalloutAsset(): HotelCalloutAsset {
  return { text: "", languageCode: "" };
}

export const HotelCalloutAsset: MessageFns<HotelCalloutAsset> = {
  encode(message: HotelCalloutAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HotelCalloutAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHotelCalloutAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HotelCalloutAsset {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: HotelCalloutAsset): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<HotelCalloutAsset>): HotelCalloutAsset {
    return HotelCalloutAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HotelCalloutAsset>): HotelCalloutAsset {
    const message = createBaseHotelCalloutAsset();
    message.text = object.text ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseCallAsset(): CallAsset {
  return {
    countryCode: "",
    phoneNumber: "",
    callConversionReportingState: 0,
    callConversionAction: "",
    adScheduleTargets: [],
  };
}

export const CallAsset: MessageFns<CallAsset> = {
  encode(message: CallAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.countryCode !== "") {
      writer.uint32(10).string(message.countryCode);
    }
    if (message.phoneNumber !== "") {
      writer.uint32(18).string(message.phoneNumber);
    }
    if (message.callConversionReportingState !== 0) {
      writer.uint32(24).int32(message.callConversionReportingState);
    }
    if (message.callConversionAction !== "") {
      writer.uint32(34).string(message.callConversionAction);
    }
    for (const v of message.adScheduleTargets) {
      AdScheduleInfo.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CallAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.callConversionReportingState = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.callConversionAction = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.adScheduleTargets.push(AdScheduleInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallAsset {
    return {
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      callConversionReportingState: isSet(object.callConversionReportingState)
        ? callConversionReportingStateEnum_CallConversionReportingStateFromJSON(object.callConversionReportingState)
        : 0,
      callConversionAction: isSet(object.callConversionAction) ? globalThis.String(object.callConversionAction) : "",
      adScheduleTargets: globalThis.Array.isArray(object?.adScheduleTargets)
        ? object.adScheduleTargets.map((e: any) => AdScheduleInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CallAsset): unknown {
    const obj: any = {};
    if (message.countryCode !== "") {
      obj.countryCode = message.countryCode;
    }
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.callConversionReportingState !== 0) {
      obj.callConversionReportingState = callConversionReportingStateEnum_CallConversionReportingStateToJSON(
        message.callConversionReportingState,
      );
    }
    if (message.callConversionAction !== "") {
      obj.callConversionAction = message.callConversionAction;
    }
    if (message.adScheduleTargets?.length) {
      obj.adScheduleTargets = message.adScheduleTargets.map((e) => AdScheduleInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CallAsset>): CallAsset {
    return CallAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CallAsset>): CallAsset {
    const message = createBaseCallAsset();
    message.countryCode = object.countryCode ?? "";
    message.phoneNumber = object.phoneNumber ?? "";
    message.callConversionReportingState = object.callConversionReportingState ?? 0;
    message.callConversionAction = object.callConversionAction ?? "";
    message.adScheduleTargets = object.adScheduleTargets?.map((e) => AdScheduleInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBasePriceAsset(): PriceAsset {
  return { type: 0, priceQualifier: 0, languageCode: "", priceOfferings: [] };
}

export const PriceAsset: MessageFns<PriceAsset> = {
  encode(message: PriceAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.priceQualifier !== 0) {
      writer.uint32(16).int32(message.priceQualifier);
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    for (const v of message.priceOfferings) {
      PriceOffering.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PriceAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePriceAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.priceQualifier = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.priceOfferings.push(PriceOffering.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PriceAsset {
    return {
      type: isSet(object.type) ? priceExtensionTypeEnum_PriceExtensionTypeFromJSON(object.type) : 0,
      priceQualifier: isSet(object.priceQualifier)
        ? priceExtensionPriceQualifierEnum_PriceExtensionPriceQualifierFromJSON(object.priceQualifier)
        : 0,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      priceOfferings: globalThis.Array.isArray(object?.priceOfferings)
        ? object.priceOfferings.map((e: any) => PriceOffering.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PriceAsset): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = priceExtensionTypeEnum_PriceExtensionTypeToJSON(message.type);
    }
    if (message.priceQualifier !== 0) {
      obj.priceQualifier = priceExtensionPriceQualifierEnum_PriceExtensionPriceQualifierToJSON(message.priceQualifier);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.priceOfferings?.length) {
      obj.priceOfferings = message.priceOfferings.map((e) => PriceOffering.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PriceAsset>): PriceAsset {
    return PriceAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PriceAsset>): PriceAsset {
    const message = createBasePriceAsset();
    message.type = object.type ?? 0;
    message.priceQualifier = object.priceQualifier ?? 0;
    message.languageCode = object.languageCode ?? "";
    message.priceOfferings = object.priceOfferings?.map((e) => PriceOffering.fromPartial(e)) || [];
    return message;
  },
};

function createBasePriceOffering(): PriceOffering {
  return { header: "", description: "", price: undefined, unit: 0, finalUrl: "", finalMobileUrl: "" };
}

export const PriceOffering: MessageFns<PriceOffering> = {
  encode(message: PriceOffering, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== "") {
      writer.uint32(10).string(message.header);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.price !== undefined) {
      Money.encode(message.price, writer.uint32(26).fork()).join();
    }
    if (message.unit !== 0) {
      writer.uint32(32).int32(message.unit);
    }
    if (message.finalUrl !== "") {
      writer.uint32(42).string(message.finalUrl);
    }
    if (message.finalMobileUrl !== "") {
      writer.uint32(50).string(message.finalMobileUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PriceOffering {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePriceOffering();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.price = Money.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.unit = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.finalUrl = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.finalMobileUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PriceOffering {
    return {
      header: isSet(object.header) ? globalThis.String(object.header) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      price: isSet(object.price) ? Money.fromJSON(object.price) : undefined,
      unit: isSet(object.unit) ? priceExtensionPriceUnitEnum_PriceExtensionPriceUnitFromJSON(object.unit) : 0,
      finalUrl: isSet(object.finalUrl) ? globalThis.String(object.finalUrl) : "",
      finalMobileUrl: isSet(object.finalMobileUrl) ? globalThis.String(object.finalMobileUrl) : "",
    };
  },

  toJSON(message: PriceOffering): unknown {
    const obj: any = {};
    if (message.header !== "") {
      obj.header = message.header;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.price !== undefined) {
      obj.price = Money.toJSON(message.price);
    }
    if (message.unit !== 0) {
      obj.unit = priceExtensionPriceUnitEnum_PriceExtensionPriceUnitToJSON(message.unit);
    }
    if (message.finalUrl !== "") {
      obj.finalUrl = message.finalUrl;
    }
    if (message.finalMobileUrl !== "") {
      obj.finalMobileUrl = message.finalMobileUrl;
    }
    return obj;
  },

  create(base?: DeepPartial<PriceOffering>): PriceOffering {
    return PriceOffering.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PriceOffering>): PriceOffering {
    const message = createBasePriceOffering();
    message.header = object.header ?? "";
    message.description = object.description ?? "";
    message.price = (object.price !== undefined && object.price !== null) ? Money.fromPartial(object.price) : undefined;
    message.unit = object.unit ?? 0;
    message.finalUrl = object.finalUrl ?? "";
    message.finalMobileUrl = object.finalMobileUrl ?? "";
    return message;
  },
};

function createBaseCallToActionAsset(): CallToActionAsset {
  return { callToAction: 0 };
}

export const CallToActionAsset: MessageFns<CallToActionAsset> = {
  encode(message: CallToActionAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.callToAction !== 0) {
      writer.uint32(8).int32(message.callToAction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CallToActionAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallToActionAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.callToAction = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallToActionAsset {
    return {
      callToAction: isSet(object.callToAction) ? callToActionTypeEnum_CallToActionTypeFromJSON(object.callToAction) : 0,
    };
  },

  toJSON(message: CallToActionAsset): unknown {
    const obj: any = {};
    if (message.callToAction !== 0) {
      obj.callToAction = callToActionTypeEnum_CallToActionTypeToJSON(message.callToAction);
    }
    return obj;
  },

  create(base?: DeepPartial<CallToActionAsset>): CallToActionAsset {
    return CallToActionAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CallToActionAsset>): CallToActionAsset {
    const message = createBaseCallToActionAsset();
    message.callToAction = object.callToAction ?? 0;
    return message;
  },
};

function createBaseDynamicRealEstateAsset(): DynamicRealEstateAsset {
  return {
    listingId: "",
    listingName: "",
    cityName: "",
    description: "",
    address: "",
    price: "",
    imageUrl: "",
    propertyType: "",
    listingType: "",
    contextualKeywords: [],
    formattedPrice: "",
    androidAppLink: "",
    iosAppLink: "",
    iosAppStoreId: Long.ZERO,
    similarListingIds: [],
  };
}

export const DynamicRealEstateAsset: MessageFns<DynamicRealEstateAsset> = {
  encode(message: DynamicRealEstateAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.listingId !== "") {
      writer.uint32(10).string(message.listingId);
    }
    if (message.listingName !== "") {
      writer.uint32(18).string(message.listingName);
    }
    if (message.cityName !== "") {
      writer.uint32(26).string(message.cityName);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.address !== "") {
      writer.uint32(42).string(message.address);
    }
    if (message.price !== "") {
      writer.uint32(50).string(message.price);
    }
    if (message.imageUrl !== "") {
      writer.uint32(58).string(message.imageUrl);
    }
    if (message.propertyType !== "") {
      writer.uint32(66).string(message.propertyType);
    }
    if (message.listingType !== "") {
      writer.uint32(74).string(message.listingType);
    }
    for (const v of message.contextualKeywords) {
      writer.uint32(82).string(v!);
    }
    if (message.formattedPrice !== "") {
      writer.uint32(90).string(message.formattedPrice);
    }
    if (message.androidAppLink !== "") {
      writer.uint32(98).string(message.androidAppLink);
    }
    if (message.iosAppLink !== "") {
      writer.uint32(106).string(message.iosAppLink);
    }
    if (!message.iosAppStoreId.equals(Long.ZERO)) {
      writer.uint32(112).int64(message.iosAppStoreId.toString());
    }
    for (const v of message.similarListingIds) {
      writer.uint32(122).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicRealEstateAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicRealEstateAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listingId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.listingName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.cityName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.address = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.price = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.propertyType = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.listingType = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.contextualKeywords.push(reader.string());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.formattedPrice = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.androidAppLink = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.iosAppLink = reader.string();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.iosAppStoreId = Long.fromString(reader.int64().toString());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.similarListingIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicRealEstateAsset {
    return {
      listingId: isSet(object.listingId) ? globalThis.String(object.listingId) : "",
      listingName: isSet(object.listingName) ? globalThis.String(object.listingName) : "",
      cityName: isSet(object.cityName) ? globalThis.String(object.cityName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      price: isSet(object.price) ? globalThis.String(object.price) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
      propertyType: isSet(object.propertyType) ? globalThis.String(object.propertyType) : "",
      listingType: isSet(object.listingType) ? globalThis.String(object.listingType) : "",
      contextualKeywords: globalThis.Array.isArray(object?.contextualKeywords)
        ? object.contextualKeywords.map((e: any) => globalThis.String(e))
        : [],
      formattedPrice: isSet(object.formattedPrice) ? globalThis.String(object.formattedPrice) : "",
      androidAppLink: isSet(object.androidAppLink) ? globalThis.String(object.androidAppLink) : "",
      iosAppLink: isSet(object.iosAppLink) ? globalThis.String(object.iosAppLink) : "",
      iosAppStoreId: isSet(object.iosAppStoreId) ? Long.fromValue(object.iosAppStoreId) : Long.ZERO,
      similarListingIds: globalThis.Array.isArray(object?.similarListingIds)
        ? object.similarListingIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: DynamicRealEstateAsset): unknown {
    const obj: any = {};
    if (message.listingId !== "") {
      obj.listingId = message.listingId;
    }
    if (message.listingName !== "") {
      obj.listingName = message.listingName;
    }
    if (message.cityName !== "") {
      obj.cityName = message.cityName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.price !== "") {
      obj.price = message.price;
    }
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    if (message.propertyType !== "") {
      obj.propertyType = message.propertyType;
    }
    if (message.listingType !== "") {
      obj.listingType = message.listingType;
    }
    if (message.contextualKeywords?.length) {
      obj.contextualKeywords = message.contextualKeywords;
    }
    if (message.formattedPrice !== "") {
      obj.formattedPrice = message.formattedPrice;
    }
    if (message.androidAppLink !== "") {
      obj.androidAppLink = message.androidAppLink;
    }
    if (message.iosAppLink !== "") {
      obj.iosAppLink = message.iosAppLink;
    }
    if (!message.iosAppStoreId.equals(Long.ZERO)) {
      obj.iosAppStoreId = (message.iosAppStoreId || Long.ZERO).toString();
    }
    if (message.similarListingIds?.length) {
      obj.similarListingIds = message.similarListingIds;
    }
    return obj;
  },

  create(base?: DeepPartial<DynamicRealEstateAsset>): DynamicRealEstateAsset {
    return DynamicRealEstateAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DynamicRealEstateAsset>): DynamicRealEstateAsset {
    const message = createBaseDynamicRealEstateAsset();
    message.listingId = object.listingId ?? "";
    message.listingName = object.listingName ?? "";
    message.cityName = object.cityName ?? "";
    message.description = object.description ?? "";
    message.address = object.address ?? "";
    message.price = object.price ?? "";
    message.imageUrl = object.imageUrl ?? "";
    message.propertyType = object.propertyType ?? "";
    message.listingType = object.listingType ?? "";
    message.contextualKeywords = object.contextualKeywords?.map((e) => e) || [];
    message.formattedPrice = object.formattedPrice ?? "";
    message.androidAppLink = object.androidAppLink ?? "";
    message.iosAppLink = object.iosAppLink ?? "";
    message.iosAppStoreId = (object.iosAppStoreId !== undefined && object.iosAppStoreId !== null)
      ? Long.fromValue(object.iosAppStoreId)
      : Long.ZERO;
    message.similarListingIds = object.similarListingIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseDynamicCustomAsset(): DynamicCustomAsset {
  return {
    id: "",
    id2: "",
    itemTitle: "",
    itemSubtitle: "",
    itemDescription: "",
    itemAddress: "",
    itemCategory: "",
    price: "",
    salePrice: "",
    formattedPrice: "",
    formattedSalePrice: "",
    imageUrl: "",
    contextualKeywords: [],
    androidAppLink: "",
    iosAppLink: "",
    iosAppStoreId: Long.ZERO,
    similarIds: [],
  };
}

export const DynamicCustomAsset: MessageFns<DynamicCustomAsset> = {
  encode(message: DynamicCustomAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.id2 !== "") {
      writer.uint32(18).string(message.id2);
    }
    if (message.itemTitle !== "") {
      writer.uint32(26).string(message.itemTitle);
    }
    if (message.itemSubtitle !== "") {
      writer.uint32(34).string(message.itemSubtitle);
    }
    if (message.itemDescription !== "") {
      writer.uint32(42).string(message.itemDescription);
    }
    if (message.itemAddress !== "") {
      writer.uint32(50).string(message.itemAddress);
    }
    if (message.itemCategory !== "") {
      writer.uint32(58).string(message.itemCategory);
    }
    if (message.price !== "") {
      writer.uint32(66).string(message.price);
    }
    if (message.salePrice !== "") {
      writer.uint32(74).string(message.salePrice);
    }
    if (message.formattedPrice !== "") {
      writer.uint32(82).string(message.formattedPrice);
    }
    if (message.formattedSalePrice !== "") {
      writer.uint32(90).string(message.formattedSalePrice);
    }
    if (message.imageUrl !== "") {
      writer.uint32(98).string(message.imageUrl);
    }
    for (const v of message.contextualKeywords) {
      writer.uint32(106).string(v!);
    }
    if (message.androidAppLink !== "") {
      writer.uint32(114).string(message.androidAppLink);
    }
    if (message.iosAppLink !== "") {
      writer.uint32(130).string(message.iosAppLink);
    }
    if (!message.iosAppStoreId.equals(Long.ZERO)) {
      writer.uint32(136).int64(message.iosAppStoreId.toString());
    }
    for (const v of message.similarIds) {
      writer.uint32(122).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicCustomAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicCustomAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id2 = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.itemTitle = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.itemSubtitle = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.itemDescription = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.itemAddress = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.itemCategory = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.price = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.salePrice = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.formattedPrice = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.formattedSalePrice = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.contextualKeywords.push(reader.string());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.androidAppLink = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.iosAppLink = reader.string();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.iosAppStoreId = Long.fromString(reader.int64().toString());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.similarIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicCustomAsset {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      id2: isSet(object.id2) ? globalThis.String(object.id2) : "",
      itemTitle: isSet(object.itemTitle) ? globalThis.String(object.itemTitle) : "",
      itemSubtitle: isSet(object.itemSubtitle) ? globalThis.String(object.itemSubtitle) : "",
      itemDescription: isSet(object.itemDescription) ? globalThis.String(object.itemDescription) : "",
      itemAddress: isSet(object.itemAddress) ? globalThis.String(object.itemAddress) : "",
      itemCategory: isSet(object.itemCategory) ? globalThis.String(object.itemCategory) : "",
      price: isSet(object.price) ? globalThis.String(object.price) : "",
      salePrice: isSet(object.salePrice) ? globalThis.String(object.salePrice) : "",
      formattedPrice: isSet(object.formattedPrice) ? globalThis.String(object.formattedPrice) : "",
      formattedSalePrice: isSet(object.formattedSalePrice) ? globalThis.String(object.formattedSalePrice) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
      contextualKeywords: globalThis.Array.isArray(object?.contextualKeywords)
        ? object.contextualKeywords.map((e: any) => globalThis.String(e))
        : [],
      androidAppLink: isSet(object.androidAppLink) ? globalThis.String(object.androidAppLink) : "",
      iosAppLink: isSet(object.iosAppLink) ? globalThis.String(object.iosAppLink) : "",
      iosAppStoreId: isSet(object.iosAppStoreId) ? Long.fromValue(object.iosAppStoreId) : Long.ZERO,
      similarIds: globalThis.Array.isArray(object?.similarIds)
        ? object.similarIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: DynamicCustomAsset): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.id2 !== "") {
      obj.id2 = message.id2;
    }
    if (message.itemTitle !== "") {
      obj.itemTitle = message.itemTitle;
    }
    if (message.itemSubtitle !== "") {
      obj.itemSubtitle = message.itemSubtitle;
    }
    if (message.itemDescription !== "") {
      obj.itemDescription = message.itemDescription;
    }
    if (message.itemAddress !== "") {
      obj.itemAddress = message.itemAddress;
    }
    if (message.itemCategory !== "") {
      obj.itemCategory = message.itemCategory;
    }
    if (message.price !== "") {
      obj.price = message.price;
    }
    if (message.salePrice !== "") {
      obj.salePrice = message.salePrice;
    }
    if (message.formattedPrice !== "") {
      obj.formattedPrice = message.formattedPrice;
    }
    if (message.formattedSalePrice !== "") {
      obj.formattedSalePrice = message.formattedSalePrice;
    }
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    if (message.contextualKeywords?.length) {
      obj.contextualKeywords = message.contextualKeywords;
    }
    if (message.androidAppLink !== "") {
      obj.androidAppLink = message.androidAppLink;
    }
    if (message.iosAppLink !== "") {
      obj.iosAppLink = message.iosAppLink;
    }
    if (!message.iosAppStoreId.equals(Long.ZERO)) {
      obj.iosAppStoreId = (message.iosAppStoreId || Long.ZERO).toString();
    }
    if (message.similarIds?.length) {
      obj.similarIds = message.similarIds;
    }
    return obj;
  },

  create(base?: DeepPartial<DynamicCustomAsset>): DynamicCustomAsset {
    return DynamicCustomAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DynamicCustomAsset>): DynamicCustomAsset {
    const message = createBaseDynamicCustomAsset();
    message.id = object.id ?? "";
    message.id2 = object.id2 ?? "";
    message.itemTitle = object.itemTitle ?? "";
    message.itemSubtitle = object.itemSubtitle ?? "";
    message.itemDescription = object.itemDescription ?? "";
    message.itemAddress = object.itemAddress ?? "";
    message.itemCategory = object.itemCategory ?? "";
    message.price = object.price ?? "";
    message.salePrice = object.salePrice ?? "";
    message.formattedPrice = object.formattedPrice ?? "";
    message.formattedSalePrice = object.formattedSalePrice ?? "";
    message.imageUrl = object.imageUrl ?? "";
    message.contextualKeywords = object.contextualKeywords?.map((e) => e) || [];
    message.androidAppLink = object.androidAppLink ?? "";
    message.iosAppLink = object.iosAppLink ?? "";
    message.iosAppStoreId = (object.iosAppStoreId !== undefined && object.iosAppStoreId !== null)
      ? Long.fromValue(object.iosAppStoreId)
      : Long.ZERO;
    message.similarIds = object.similarIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseDynamicHotelsAndRentalsAsset(): DynamicHotelsAndRentalsAsset {
  return {
    propertyId: "",
    propertyName: "",
    imageUrl: "",
    destinationName: "",
    description: "",
    price: "",
    salePrice: "",
    starRating: Long.ZERO,
    category: "",
    contextualKeywords: [],
    address: "",
    androidAppLink: "",
    iosAppLink: "",
    iosAppStoreId: Long.ZERO,
    formattedPrice: "",
    formattedSalePrice: "",
    similarPropertyIds: [],
  };
}

export const DynamicHotelsAndRentalsAsset: MessageFns<DynamicHotelsAndRentalsAsset> = {
  encode(message: DynamicHotelsAndRentalsAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.propertyId !== "") {
      writer.uint32(10).string(message.propertyId);
    }
    if (message.propertyName !== "") {
      writer.uint32(18).string(message.propertyName);
    }
    if (message.imageUrl !== "") {
      writer.uint32(26).string(message.imageUrl);
    }
    if (message.destinationName !== "") {
      writer.uint32(34).string(message.destinationName);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.price !== "") {
      writer.uint32(50).string(message.price);
    }
    if (message.salePrice !== "") {
      writer.uint32(58).string(message.salePrice);
    }
    if (!message.starRating.equals(Long.ZERO)) {
      writer.uint32(64).int64(message.starRating.toString());
    }
    if (message.category !== "") {
      writer.uint32(74).string(message.category);
    }
    for (const v of message.contextualKeywords) {
      writer.uint32(82).string(v!);
    }
    if (message.address !== "") {
      writer.uint32(90).string(message.address);
    }
    if (message.androidAppLink !== "") {
      writer.uint32(98).string(message.androidAppLink);
    }
    if (message.iosAppLink !== "") {
      writer.uint32(106).string(message.iosAppLink);
    }
    if (!message.iosAppStoreId.equals(Long.ZERO)) {
      writer.uint32(112).int64(message.iosAppStoreId.toString());
    }
    if (message.formattedPrice !== "") {
      writer.uint32(122).string(message.formattedPrice);
    }
    if (message.formattedSalePrice !== "") {
      writer.uint32(130).string(message.formattedSalePrice);
    }
    for (const v of message.similarPropertyIds) {
      writer.uint32(138).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicHotelsAndRentalsAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicHotelsAndRentalsAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.propertyId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.propertyName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.destinationName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.price = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.salePrice = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.starRating = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.category = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.contextualKeywords.push(reader.string());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.address = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.androidAppLink = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.iosAppLink = reader.string();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.iosAppStoreId = Long.fromString(reader.int64().toString());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.formattedPrice = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.formattedSalePrice = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.similarPropertyIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicHotelsAndRentalsAsset {
    return {
      propertyId: isSet(object.propertyId) ? globalThis.String(object.propertyId) : "",
      propertyName: isSet(object.propertyName) ? globalThis.String(object.propertyName) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
      destinationName: isSet(object.destinationName) ? globalThis.String(object.destinationName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      price: isSet(object.price) ? globalThis.String(object.price) : "",
      salePrice: isSet(object.salePrice) ? globalThis.String(object.salePrice) : "",
      starRating: isSet(object.starRating) ? Long.fromValue(object.starRating) : Long.ZERO,
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      contextualKeywords: globalThis.Array.isArray(object?.contextualKeywords)
        ? object.contextualKeywords.map((e: any) => globalThis.String(e))
        : [],
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      androidAppLink: isSet(object.androidAppLink) ? globalThis.String(object.androidAppLink) : "",
      iosAppLink: isSet(object.iosAppLink) ? globalThis.String(object.iosAppLink) : "",
      iosAppStoreId: isSet(object.iosAppStoreId) ? Long.fromValue(object.iosAppStoreId) : Long.ZERO,
      formattedPrice: isSet(object.formattedPrice) ? globalThis.String(object.formattedPrice) : "",
      formattedSalePrice: isSet(object.formattedSalePrice) ? globalThis.String(object.formattedSalePrice) : "",
      similarPropertyIds: globalThis.Array.isArray(object?.similarPropertyIds)
        ? object.similarPropertyIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: DynamicHotelsAndRentalsAsset): unknown {
    const obj: any = {};
    if (message.propertyId !== "") {
      obj.propertyId = message.propertyId;
    }
    if (message.propertyName !== "") {
      obj.propertyName = message.propertyName;
    }
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    if (message.destinationName !== "") {
      obj.destinationName = message.destinationName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.price !== "") {
      obj.price = message.price;
    }
    if (message.salePrice !== "") {
      obj.salePrice = message.salePrice;
    }
    if (!message.starRating.equals(Long.ZERO)) {
      obj.starRating = (message.starRating || Long.ZERO).toString();
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.contextualKeywords?.length) {
      obj.contextualKeywords = message.contextualKeywords;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.androidAppLink !== "") {
      obj.androidAppLink = message.androidAppLink;
    }
    if (message.iosAppLink !== "") {
      obj.iosAppLink = message.iosAppLink;
    }
    if (!message.iosAppStoreId.equals(Long.ZERO)) {
      obj.iosAppStoreId = (message.iosAppStoreId || Long.ZERO).toString();
    }
    if (message.formattedPrice !== "") {
      obj.formattedPrice = message.formattedPrice;
    }
    if (message.formattedSalePrice !== "") {
      obj.formattedSalePrice = message.formattedSalePrice;
    }
    if (message.similarPropertyIds?.length) {
      obj.similarPropertyIds = message.similarPropertyIds;
    }
    return obj;
  },

  create(base?: DeepPartial<DynamicHotelsAndRentalsAsset>): DynamicHotelsAndRentalsAsset {
    return DynamicHotelsAndRentalsAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DynamicHotelsAndRentalsAsset>): DynamicHotelsAndRentalsAsset {
    const message = createBaseDynamicHotelsAndRentalsAsset();
    message.propertyId = object.propertyId ?? "";
    message.propertyName = object.propertyName ?? "";
    message.imageUrl = object.imageUrl ?? "";
    message.destinationName = object.destinationName ?? "";
    message.description = object.description ?? "";
    message.price = object.price ?? "";
    message.salePrice = object.salePrice ?? "";
    message.starRating = (object.starRating !== undefined && object.starRating !== null)
      ? Long.fromValue(object.starRating)
      : Long.ZERO;
    message.category = object.category ?? "";
    message.contextualKeywords = object.contextualKeywords?.map((e) => e) || [];
    message.address = object.address ?? "";
    message.androidAppLink = object.androidAppLink ?? "";
    message.iosAppLink = object.iosAppLink ?? "";
    message.iosAppStoreId = (object.iosAppStoreId !== undefined && object.iosAppStoreId !== null)
      ? Long.fromValue(object.iosAppStoreId)
      : Long.ZERO;
    message.formattedPrice = object.formattedPrice ?? "";
    message.formattedSalePrice = object.formattedSalePrice ?? "";
    message.similarPropertyIds = object.similarPropertyIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseDynamicFlightsAsset(): DynamicFlightsAsset {
  return {
    destinationId: "",
    originId: "",
    flightDescription: "",
    imageUrl: "",
    destinationName: "",
    originName: "",
    flightPrice: "",
    flightSalePrice: "",
    formattedPrice: "",
    formattedSalePrice: "",
    androidAppLink: "",
    iosAppLink: "",
    iosAppStoreId: Long.ZERO,
    similarDestinationIds: [],
    customMapping: "",
  };
}

export const DynamicFlightsAsset: MessageFns<DynamicFlightsAsset> = {
  encode(message: DynamicFlightsAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationId !== "") {
      writer.uint32(10).string(message.destinationId);
    }
    if (message.originId !== "") {
      writer.uint32(18).string(message.originId);
    }
    if (message.flightDescription !== "") {
      writer.uint32(26).string(message.flightDescription);
    }
    if (message.imageUrl !== "") {
      writer.uint32(34).string(message.imageUrl);
    }
    if (message.destinationName !== "") {
      writer.uint32(42).string(message.destinationName);
    }
    if (message.originName !== "") {
      writer.uint32(50).string(message.originName);
    }
    if (message.flightPrice !== "") {
      writer.uint32(58).string(message.flightPrice);
    }
    if (message.flightSalePrice !== "") {
      writer.uint32(66).string(message.flightSalePrice);
    }
    if (message.formattedPrice !== "") {
      writer.uint32(74).string(message.formattedPrice);
    }
    if (message.formattedSalePrice !== "") {
      writer.uint32(82).string(message.formattedSalePrice);
    }
    if (message.androidAppLink !== "") {
      writer.uint32(90).string(message.androidAppLink);
    }
    if (message.iosAppLink !== "") {
      writer.uint32(98).string(message.iosAppLink);
    }
    if (!message.iosAppStoreId.equals(Long.ZERO)) {
      writer.uint32(104).int64(message.iosAppStoreId.toString());
    }
    for (const v of message.similarDestinationIds) {
      writer.uint32(114).string(v!);
    }
    if (message.customMapping !== "") {
      writer.uint32(122).string(message.customMapping);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicFlightsAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicFlightsAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.destinationId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.originId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.flightDescription = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.destinationName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.originName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.flightPrice = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.flightSalePrice = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.formattedPrice = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.formattedSalePrice = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.androidAppLink = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.iosAppLink = reader.string();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.iosAppStoreId = Long.fromString(reader.int64().toString());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.similarDestinationIds.push(reader.string());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.customMapping = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicFlightsAsset {
    return {
      destinationId: isSet(object.destinationId) ? globalThis.String(object.destinationId) : "",
      originId: isSet(object.originId) ? globalThis.String(object.originId) : "",
      flightDescription: isSet(object.flightDescription) ? globalThis.String(object.flightDescription) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
      destinationName: isSet(object.destinationName) ? globalThis.String(object.destinationName) : "",
      originName: isSet(object.originName) ? globalThis.String(object.originName) : "",
      flightPrice: isSet(object.flightPrice) ? globalThis.String(object.flightPrice) : "",
      flightSalePrice: isSet(object.flightSalePrice) ? globalThis.String(object.flightSalePrice) : "",
      formattedPrice: isSet(object.formattedPrice) ? globalThis.String(object.formattedPrice) : "",
      formattedSalePrice: isSet(object.formattedSalePrice) ? globalThis.String(object.formattedSalePrice) : "",
      androidAppLink: isSet(object.androidAppLink) ? globalThis.String(object.androidAppLink) : "",
      iosAppLink: isSet(object.iosAppLink) ? globalThis.String(object.iosAppLink) : "",
      iosAppStoreId: isSet(object.iosAppStoreId) ? Long.fromValue(object.iosAppStoreId) : Long.ZERO,
      similarDestinationIds: globalThis.Array.isArray(object?.similarDestinationIds)
        ? object.similarDestinationIds.map((e: any) => globalThis.String(e))
        : [],
      customMapping: isSet(object.customMapping) ? globalThis.String(object.customMapping) : "",
    };
  },

  toJSON(message: DynamicFlightsAsset): unknown {
    const obj: any = {};
    if (message.destinationId !== "") {
      obj.destinationId = message.destinationId;
    }
    if (message.originId !== "") {
      obj.originId = message.originId;
    }
    if (message.flightDescription !== "") {
      obj.flightDescription = message.flightDescription;
    }
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    if (message.destinationName !== "") {
      obj.destinationName = message.destinationName;
    }
    if (message.originName !== "") {
      obj.originName = message.originName;
    }
    if (message.flightPrice !== "") {
      obj.flightPrice = message.flightPrice;
    }
    if (message.flightSalePrice !== "") {
      obj.flightSalePrice = message.flightSalePrice;
    }
    if (message.formattedPrice !== "") {
      obj.formattedPrice = message.formattedPrice;
    }
    if (message.formattedSalePrice !== "") {
      obj.formattedSalePrice = message.formattedSalePrice;
    }
    if (message.androidAppLink !== "") {
      obj.androidAppLink = message.androidAppLink;
    }
    if (message.iosAppLink !== "") {
      obj.iosAppLink = message.iosAppLink;
    }
    if (!message.iosAppStoreId.equals(Long.ZERO)) {
      obj.iosAppStoreId = (message.iosAppStoreId || Long.ZERO).toString();
    }
    if (message.similarDestinationIds?.length) {
      obj.similarDestinationIds = message.similarDestinationIds;
    }
    if (message.customMapping !== "") {
      obj.customMapping = message.customMapping;
    }
    return obj;
  },

  create(base?: DeepPartial<DynamicFlightsAsset>): DynamicFlightsAsset {
    return DynamicFlightsAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DynamicFlightsAsset>): DynamicFlightsAsset {
    const message = createBaseDynamicFlightsAsset();
    message.destinationId = object.destinationId ?? "";
    message.originId = object.originId ?? "";
    message.flightDescription = object.flightDescription ?? "";
    message.imageUrl = object.imageUrl ?? "";
    message.destinationName = object.destinationName ?? "";
    message.originName = object.originName ?? "";
    message.flightPrice = object.flightPrice ?? "";
    message.flightSalePrice = object.flightSalePrice ?? "";
    message.formattedPrice = object.formattedPrice ?? "";
    message.formattedSalePrice = object.formattedSalePrice ?? "";
    message.androidAppLink = object.androidAppLink ?? "";
    message.iosAppLink = object.iosAppLink ?? "";
    message.iosAppStoreId = (object.iosAppStoreId !== undefined && object.iosAppStoreId !== null)
      ? Long.fromValue(object.iosAppStoreId)
      : Long.ZERO;
    message.similarDestinationIds = object.similarDestinationIds?.map((e) => e) || [];
    message.customMapping = object.customMapping ?? "";
    return message;
  },
};

function createBaseDemandGenCarouselCardAsset(): DemandGenCarouselCardAsset {
  return {
    marketingImageAsset: "",
    squareMarketingImageAsset: "",
    portraitMarketingImageAsset: "",
    headline: "",
    callToActionText: "",
  };
}

export const DemandGenCarouselCardAsset: MessageFns<DemandGenCarouselCardAsset> = {
  encode(message: DemandGenCarouselCardAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.marketingImageAsset !== "") {
      writer.uint32(10).string(message.marketingImageAsset);
    }
    if (message.squareMarketingImageAsset !== "") {
      writer.uint32(18).string(message.squareMarketingImageAsset);
    }
    if (message.portraitMarketingImageAsset !== "") {
      writer.uint32(26).string(message.portraitMarketingImageAsset);
    }
    if (message.headline !== "") {
      writer.uint32(34).string(message.headline);
    }
    if (message.callToActionText !== "") {
      writer.uint32(42).string(message.callToActionText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DemandGenCarouselCardAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDemandGenCarouselCardAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.marketingImageAsset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.squareMarketingImageAsset = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.portraitMarketingImageAsset = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.headline = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.callToActionText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DemandGenCarouselCardAsset {
    return {
      marketingImageAsset: isSet(object.marketingImageAsset) ? globalThis.String(object.marketingImageAsset) : "",
      squareMarketingImageAsset: isSet(object.squareMarketingImageAsset)
        ? globalThis.String(object.squareMarketingImageAsset)
        : "",
      portraitMarketingImageAsset: isSet(object.portraitMarketingImageAsset)
        ? globalThis.String(object.portraitMarketingImageAsset)
        : "",
      headline: isSet(object.headline) ? globalThis.String(object.headline) : "",
      callToActionText: isSet(object.callToActionText) ? globalThis.String(object.callToActionText) : "",
    };
  },

  toJSON(message: DemandGenCarouselCardAsset): unknown {
    const obj: any = {};
    if (message.marketingImageAsset !== "") {
      obj.marketingImageAsset = message.marketingImageAsset;
    }
    if (message.squareMarketingImageAsset !== "") {
      obj.squareMarketingImageAsset = message.squareMarketingImageAsset;
    }
    if (message.portraitMarketingImageAsset !== "") {
      obj.portraitMarketingImageAsset = message.portraitMarketingImageAsset;
    }
    if (message.headline !== "") {
      obj.headline = message.headline;
    }
    if (message.callToActionText !== "") {
      obj.callToActionText = message.callToActionText;
    }
    return obj;
  },

  create(base?: DeepPartial<DemandGenCarouselCardAsset>): DemandGenCarouselCardAsset {
    return DemandGenCarouselCardAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DemandGenCarouselCardAsset>): DemandGenCarouselCardAsset {
    const message = createBaseDemandGenCarouselCardAsset();
    message.marketingImageAsset = object.marketingImageAsset ?? "";
    message.squareMarketingImageAsset = object.squareMarketingImageAsset ?? "";
    message.portraitMarketingImageAsset = object.portraitMarketingImageAsset ?? "";
    message.headline = object.headline ?? "";
    message.callToActionText = object.callToActionText ?? "";
    return message;
  },
};

function createBaseDynamicTravelAsset(): DynamicTravelAsset {
  return {
    destinationId: "",
    originId: "",
    title: "",
    destinationName: "",
    destinationAddress: "",
    originName: "",
    price: "",
    salePrice: "",
    formattedPrice: "",
    formattedSalePrice: "",
    category: "",
    contextualKeywords: [],
    similarDestinationIds: [],
    imageUrl: "",
    androidAppLink: "",
    iosAppLink: "",
    iosAppStoreId: Long.ZERO,
  };
}

export const DynamicTravelAsset: MessageFns<DynamicTravelAsset> = {
  encode(message: DynamicTravelAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationId !== "") {
      writer.uint32(10).string(message.destinationId);
    }
    if (message.originId !== "") {
      writer.uint32(18).string(message.originId);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.destinationName !== "") {
      writer.uint32(34).string(message.destinationName);
    }
    if (message.destinationAddress !== "") {
      writer.uint32(42).string(message.destinationAddress);
    }
    if (message.originName !== "") {
      writer.uint32(50).string(message.originName);
    }
    if (message.price !== "") {
      writer.uint32(58).string(message.price);
    }
    if (message.salePrice !== "") {
      writer.uint32(66).string(message.salePrice);
    }
    if (message.formattedPrice !== "") {
      writer.uint32(74).string(message.formattedPrice);
    }
    if (message.formattedSalePrice !== "") {
      writer.uint32(82).string(message.formattedSalePrice);
    }
    if (message.category !== "") {
      writer.uint32(90).string(message.category);
    }
    for (const v of message.contextualKeywords) {
      writer.uint32(98).string(v!);
    }
    for (const v of message.similarDestinationIds) {
      writer.uint32(106).string(v!);
    }
    if (message.imageUrl !== "") {
      writer.uint32(114).string(message.imageUrl);
    }
    if (message.androidAppLink !== "") {
      writer.uint32(122).string(message.androidAppLink);
    }
    if (message.iosAppLink !== "") {
      writer.uint32(130).string(message.iosAppLink);
    }
    if (!message.iosAppStoreId.equals(Long.ZERO)) {
      writer.uint32(136).int64(message.iosAppStoreId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicTravelAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicTravelAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.destinationId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.originId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.destinationName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.destinationAddress = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.originName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.price = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.salePrice = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.formattedPrice = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.formattedSalePrice = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.category = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.contextualKeywords.push(reader.string());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.similarDestinationIds.push(reader.string());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.androidAppLink = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.iosAppLink = reader.string();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.iosAppStoreId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicTravelAsset {
    return {
      destinationId: isSet(object.destinationId) ? globalThis.String(object.destinationId) : "",
      originId: isSet(object.originId) ? globalThis.String(object.originId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      destinationName: isSet(object.destinationName) ? globalThis.String(object.destinationName) : "",
      destinationAddress: isSet(object.destinationAddress) ? globalThis.String(object.destinationAddress) : "",
      originName: isSet(object.originName) ? globalThis.String(object.originName) : "",
      price: isSet(object.price) ? globalThis.String(object.price) : "",
      salePrice: isSet(object.salePrice) ? globalThis.String(object.salePrice) : "",
      formattedPrice: isSet(object.formattedPrice) ? globalThis.String(object.formattedPrice) : "",
      formattedSalePrice: isSet(object.formattedSalePrice) ? globalThis.String(object.formattedSalePrice) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      contextualKeywords: globalThis.Array.isArray(object?.contextualKeywords)
        ? object.contextualKeywords.map((e: any) => globalThis.String(e))
        : [],
      similarDestinationIds: globalThis.Array.isArray(object?.similarDestinationIds)
        ? object.similarDestinationIds.map((e: any) => globalThis.String(e))
        : [],
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
      androidAppLink: isSet(object.androidAppLink) ? globalThis.String(object.androidAppLink) : "",
      iosAppLink: isSet(object.iosAppLink) ? globalThis.String(object.iosAppLink) : "",
      iosAppStoreId: isSet(object.iosAppStoreId) ? Long.fromValue(object.iosAppStoreId) : Long.ZERO,
    };
  },

  toJSON(message: DynamicTravelAsset): unknown {
    const obj: any = {};
    if (message.destinationId !== "") {
      obj.destinationId = message.destinationId;
    }
    if (message.originId !== "") {
      obj.originId = message.originId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.destinationName !== "") {
      obj.destinationName = message.destinationName;
    }
    if (message.destinationAddress !== "") {
      obj.destinationAddress = message.destinationAddress;
    }
    if (message.originName !== "") {
      obj.originName = message.originName;
    }
    if (message.price !== "") {
      obj.price = message.price;
    }
    if (message.salePrice !== "") {
      obj.salePrice = message.salePrice;
    }
    if (message.formattedPrice !== "") {
      obj.formattedPrice = message.formattedPrice;
    }
    if (message.formattedSalePrice !== "") {
      obj.formattedSalePrice = message.formattedSalePrice;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.contextualKeywords?.length) {
      obj.contextualKeywords = message.contextualKeywords;
    }
    if (message.similarDestinationIds?.length) {
      obj.similarDestinationIds = message.similarDestinationIds;
    }
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    if (message.androidAppLink !== "") {
      obj.androidAppLink = message.androidAppLink;
    }
    if (message.iosAppLink !== "") {
      obj.iosAppLink = message.iosAppLink;
    }
    if (!message.iosAppStoreId.equals(Long.ZERO)) {
      obj.iosAppStoreId = (message.iosAppStoreId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<DynamicTravelAsset>): DynamicTravelAsset {
    return DynamicTravelAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DynamicTravelAsset>): DynamicTravelAsset {
    const message = createBaseDynamicTravelAsset();
    message.destinationId = object.destinationId ?? "";
    message.originId = object.originId ?? "";
    message.title = object.title ?? "";
    message.destinationName = object.destinationName ?? "";
    message.destinationAddress = object.destinationAddress ?? "";
    message.originName = object.originName ?? "";
    message.price = object.price ?? "";
    message.salePrice = object.salePrice ?? "";
    message.formattedPrice = object.formattedPrice ?? "";
    message.formattedSalePrice = object.formattedSalePrice ?? "";
    message.category = object.category ?? "";
    message.contextualKeywords = object.contextualKeywords?.map((e) => e) || [];
    message.similarDestinationIds = object.similarDestinationIds?.map((e) => e) || [];
    message.imageUrl = object.imageUrl ?? "";
    message.androidAppLink = object.androidAppLink ?? "";
    message.iosAppLink = object.iosAppLink ?? "";
    message.iosAppStoreId = (object.iosAppStoreId !== undefined && object.iosAppStoreId !== null)
      ? Long.fromValue(object.iosAppStoreId)
      : Long.ZERO;
    return message;
  },
};

function createBaseDynamicLocalAsset(): DynamicLocalAsset {
  return {
    dealId: "",
    dealName: "",
    subtitle: "",
    description: "",
    price: "",
    salePrice: "",
    imageUrl: "",
    address: "",
    category: "",
    contextualKeywords: [],
    formattedPrice: "",
    formattedSalePrice: "",
    androidAppLink: "",
    similarDealIds: [],
    iosAppLink: "",
    iosAppStoreId: Long.ZERO,
  };
}

export const DynamicLocalAsset: MessageFns<DynamicLocalAsset> = {
  encode(message: DynamicLocalAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dealId !== "") {
      writer.uint32(10).string(message.dealId);
    }
    if (message.dealName !== "") {
      writer.uint32(18).string(message.dealName);
    }
    if (message.subtitle !== "") {
      writer.uint32(26).string(message.subtitle);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.price !== "") {
      writer.uint32(42).string(message.price);
    }
    if (message.salePrice !== "") {
      writer.uint32(50).string(message.salePrice);
    }
    if (message.imageUrl !== "") {
      writer.uint32(58).string(message.imageUrl);
    }
    if (message.address !== "") {
      writer.uint32(66).string(message.address);
    }
    if (message.category !== "") {
      writer.uint32(74).string(message.category);
    }
    for (const v of message.contextualKeywords) {
      writer.uint32(82).string(v!);
    }
    if (message.formattedPrice !== "") {
      writer.uint32(90).string(message.formattedPrice);
    }
    if (message.formattedSalePrice !== "") {
      writer.uint32(98).string(message.formattedSalePrice);
    }
    if (message.androidAppLink !== "") {
      writer.uint32(106).string(message.androidAppLink);
    }
    for (const v of message.similarDealIds) {
      writer.uint32(114).string(v!);
    }
    if (message.iosAppLink !== "") {
      writer.uint32(122).string(message.iosAppLink);
    }
    if (!message.iosAppStoreId.equals(Long.ZERO)) {
      writer.uint32(128).int64(message.iosAppStoreId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicLocalAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicLocalAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dealId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dealName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.subtitle = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.price = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.salePrice = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.address = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.category = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.contextualKeywords.push(reader.string());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.formattedPrice = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.formattedSalePrice = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.androidAppLink = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.similarDealIds.push(reader.string());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.iosAppLink = reader.string();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.iosAppStoreId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicLocalAsset {
    return {
      dealId: isSet(object.dealId) ? globalThis.String(object.dealId) : "",
      dealName: isSet(object.dealName) ? globalThis.String(object.dealName) : "",
      subtitle: isSet(object.subtitle) ? globalThis.String(object.subtitle) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      price: isSet(object.price) ? globalThis.String(object.price) : "",
      salePrice: isSet(object.salePrice) ? globalThis.String(object.salePrice) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      contextualKeywords: globalThis.Array.isArray(object?.contextualKeywords)
        ? object.contextualKeywords.map((e: any) => globalThis.String(e))
        : [],
      formattedPrice: isSet(object.formattedPrice) ? globalThis.String(object.formattedPrice) : "",
      formattedSalePrice: isSet(object.formattedSalePrice) ? globalThis.String(object.formattedSalePrice) : "",
      androidAppLink: isSet(object.androidAppLink) ? globalThis.String(object.androidAppLink) : "",
      similarDealIds: globalThis.Array.isArray(object?.similarDealIds)
        ? object.similarDealIds.map((e: any) => globalThis.String(e))
        : [],
      iosAppLink: isSet(object.iosAppLink) ? globalThis.String(object.iosAppLink) : "",
      iosAppStoreId: isSet(object.iosAppStoreId) ? Long.fromValue(object.iosAppStoreId) : Long.ZERO,
    };
  },

  toJSON(message: DynamicLocalAsset): unknown {
    const obj: any = {};
    if (message.dealId !== "") {
      obj.dealId = message.dealId;
    }
    if (message.dealName !== "") {
      obj.dealName = message.dealName;
    }
    if (message.subtitle !== "") {
      obj.subtitle = message.subtitle;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.price !== "") {
      obj.price = message.price;
    }
    if (message.salePrice !== "") {
      obj.salePrice = message.salePrice;
    }
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.contextualKeywords?.length) {
      obj.contextualKeywords = message.contextualKeywords;
    }
    if (message.formattedPrice !== "") {
      obj.formattedPrice = message.formattedPrice;
    }
    if (message.formattedSalePrice !== "") {
      obj.formattedSalePrice = message.formattedSalePrice;
    }
    if (message.androidAppLink !== "") {
      obj.androidAppLink = message.androidAppLink;
    }
    if (message.similarDealIds?.length) {
      obj.similarDealIds = message.similarDealIds;
    }
    if (message.iosAppLink !== "") {
      obj.iosAppLink = message.iosAppLink;
    }
    if (!message.iosAppStoreId.equals(Long.ZERO)) {
      obj.iosAppStoreId = (message.iosAppStoreId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<DynamicLocalAsset>): DynamicLocalAsset {
    return DynamicLocalAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DynamicLocalAsset>): DynamicLocalAsset {
    const message = createBaseDynamicLocalAsset();
    message.dealId = object.dealId ?? "";
    message.dealName = object.dealName ?? "";
    message.subtitle = object.subtitle ?? "";
    message.description = object.description ?? "";
    message.price = object.price ?? "";
    message.salePrice = object.salePrice ?? "";
    message.imageUrl = object.imageUrl ?? "";
    message.address = object.address ?? "";
    message.category = object.category ?? "";
    message.contextualKeywords = object.contextualKeywords?.map((e) => e) || [];
    message.formattedPrice = object.formattedPrice ?? "";
    message.formattedSalePrice = object.formattedSalePrice ?? "";
    message.androidAppLink = object.androidAppLink ?? "";
    message.similarDealIds = object.similarDealIds?.map((e) => e) || [];
    message.iosAppLink = object.iosAppLink ?? "";
    message.iosAppStoreId = (object.iosAppStoreId !== undefined && object.iosAppStoreId !== null)
      ? Long.fromValue(object.iosAppStoreId)
      : Long.ZERO;
    return message;
  },
};

function createBaseDynamicJobsAsset(): DynamicJobsAsset {
  return {
    jobId: "",
    locationId: "",
    jobTitle: "",
    jobSubtitle: "",
    description: "",
    imageUrl: "",
    jobCategory: "",
    contextualKeywords: [],
    address: "",
    salary: "",
    androidAppLink: "",
    similarJobIds: [],
    iosAppLink: "",
    iosAppStoreId: Long.ZERO,
  };
}

export const DynamicJobsAsset: MessageFns<DynamicJobsAsset> = {
  encode(message: DynamicJobsAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobId !== "") {
      writer.uint32(10).string(message.jobId);
    }
    if (message.locationId !== "") {
      writer.uint32(18).string(message.locationId);
    }
    if (message.jobTitle !== "") {
      writer.uint32(26).string(message.jobTitle);
    }
    if (message.jobSubtitle !== "") {
      writer.uint32(34).string(message.jobSubtitle);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.imageUrl !== "") {
      writer.uint32(50).string(message.imageUrl);
    }
    if (message.jobCategory !== "") {
      writer.uint32(58).string(message.jobCategory);
    }
    for (const v of message.contextualKeywords) {
      writer.uint32(66).string(v!);
    }
    if (message.address !== "") {
      writer.uint32(74).string(message.address);
    }
    if (message.salary !== "") {
      writer.uint32(82).string(message.salary);
    }
    if (message.androidAppLink !== "") {
      writer.uint32(90).string(message.androidAppLink);
    }
    for (const v of message.similarJobIds) {
      writer.uint32(98).string(v!);
    }
    if (message.iosAppLink !== "") {
      writer.uint32(106).string(message.iosAppLink);
    }
    if (!message.iosAppStoreId.equals(Long.ZERO)) {
      writer.uint32(112).int64(message.iosAppStoreId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicJobsAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicJobsAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jobId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.locationId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jobTitle = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.jobSubtitle = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.jobCategory = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.contextualKeywords.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.address = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.salary = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.androidAppLink = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.similarJobIds.push(reader.string());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.iosAppLink = reader.string();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.iosAppStoreId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicJobsAsset {
    return {
      jobId: isSet(object.jobId) ? globalThis.String(object.jobId) : "",
      locationId: isSet(object.locationId) ? globalThis.String(object.locationId) : "",
      jobTitle: isSet(object.jobTitle) ? globalThis.String(object.jobTitle) : "",
      jobSubtitle: isSet(object.jobSubtitle) ? globalThis.String(object.jobSubtitle) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
      jobCategory: isSet(object.jobCategory) ? globalThis.String(object.jobCategory) : "",
      contextualKeywords: globalThis.Array.isArray(object?.contextualKeywords)
        ? object.contextualKeywords.map((e: any) => globalThis.String(e))
        : [],
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      salary: isSet(object.salary) ? globalThis.String(object.salary) : "",
      androidAppLink: isSet(object.androidAppLink) ? globalThis.String(object.androidAppLink) : "",
      similarJobIds: globalThis.Array.isArray(object?.similarJobIds)
        ? object.similarJobIds.map((e: any) => globalThis.String(e))
        : [],
      iosAppLink: isSet(object.iosAppLink) ? globalThis.String(object.iosAppLink) : "",
      iosAppStoreId: isSet(object.iosAppStoreId) ? Long.fromValue(object.iosAppStoreId) : Long.ZERO,
    };
  },

  toJSON(message: DynamicJobsAsset): unknown {
    const obj: any = {};
    if (message.jobId !== "") {
      obj.jobId = message.jobId;
    }
    if (message.locationId !== "") {
      obj.locationId = message.locationId;
    }
    if (message.jobTitle !== "") {
      obj.jobTitle = message.jobTitle;
    }
    if (message.jobSubtitle !== "") {
      obj.jobSubtitle = message.jobSubtitle;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    if (message.jobCategory !== "") {
      obj.jobCategory = message.jobCategory;
    }
    if (message.contextualKeywords?.length) {
      obj.contextualKeywords = message.contextualKeywords;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.salary !== "") {
      obj.salary = message.salary;
    }
    if (message.androidAppLink !== "") {
      obj.androidAppLink = message.androidAppLink;
    }
    if (message.similarJobIds?.length) {
      obj.similarJobIds = message.similarJobIds;
    }
    if (message.iosAppLink !== "") {
      obj.iosAppLink = message.iosAppLink;
    }
    if (!message.iosAppStoreId.equals(Long.ZERO)) {
      obj.iosAppStoreId = (message.iosAppStoreId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<DynamicJobsAsset>): DynamicJobsAsset {
    return DynamicJobsAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DynamicJobsAsset>): DynamicJobsAsset {
    const message = createBaseDynamicJobsAsset();
    message.jobId = object.jobId ?? "";
    message.locationId = object.locationId ?? "";
    message.jobTitle = object.jobTitle ?? "";
    message.jobSubtitle = object.jobSubtitle ?? "";
    message.description = object.description ?? "";
    message.imageUrl = object.imageUrl ?? "";
    message.jobCategory = object.jobCategory ?? "";
    message.contextualKeywords = object.contextualKeywords?.map((e) => e) || [];
    message.address = object.address ?? "";
    message.salary = object.salary ?? "";
    message.androidAppLink = object.androidAppLink ?? "";
    message.similarJobIds = object.similarJobIds?.map((e) => e) || [];
    message.iosAppLink = object.iosAppLink ?? "";
    message.iosAppStoreId = (object.iosAppStoreId !== undefined && object.iosAppStoreId !== null)
      ? Long.fromValue(object.iosAppStoreId)
      : Long.ZERO;
    return message;
  },
};

function createBaseLocationAsset(): LocationAsset {
  return { placeId: "", businessProfileLocations: [], locationOwnershipType: 0 };
}

export const LocationAsset: MessageFns<LocationAsset> = {
  encode(message: LocationAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.placeId !== "") {
      writer.uint32(10).string(message.placeId);
    }
    for (const v of message.businessProfileLocations) {
      BusinessProfileLocation.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.locationOwnershipType !== 0) {
      writer.uint32(24).int32(message.locationOwnershipType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocationAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocationAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.placeId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.businessProfileLocations.push(BusinessProfileLocation.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.locationOwnershipType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocationAsset {
    return {
      placeId: isSet(object.placeId) ? globalThis.String(object.placeId) : "",
      businessProfileLocations: globalThis.Array.isArray(object?.businessProfileLocations)
        ? object.businessProfileLocations.map((e: any) => BusinessProfileLocation.fromJSON(e))
        : [],
      locationOwnershipType: isSet(object.locationOwnershipType)
        ? locationOwnershipTypeEnum_LocationOwnershipTypeFromJSON(object.locationOwnershipType)
        : 0,
    };
  },

  toJSON(message: LocationAsset): unknown {
    const obj: any = {};
    if (message.placeId !== "") {
      obj.placeId = message.placeId;
    }
    if (message.businessProfileLocations?.length) {
      obj.businessProfileLocations = message.businessProfileLocations.map((e) => BusinessProfileLocation.toJSON(e));
    }
    if (message.locationOwnershipType !== 0) {
      obj.locationOwnershipType = locationOwnershipTypeEnum_LocationOwnershipTypeToJSON(message.locationOwnershipType);
    }
    return obj;
  },

  create(base?: DeepPartial<LocationAsset>): LocationAsset {
    return LocationAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocationAsset>): LocationAsset {
    const message = createBaseLocationAsset();
    message.placeId = object.placeId ?? "";
    message.businessProfileLocations =
      object.businessProfileLocations?.map((e) => BusinessProfileLocation.fromPartial(e)) || [];
    message.locationOwnershipType = object.locationOwnershipType ?? 0;
    return message;
  },
};

function createBaseBusinessProfileLocation(): BusinessProfileLocation {
  return { labels: [], storeCode: "", listingId: Long.ZERO };
}

export const BusinessProfileLocation: MessageFns<BusinessProfileLocation> = {
  encode(message: BusinessProfileLocation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.labels) {
      writer.uint32(10).string(v!);
    }
    if (message.storeCode !== "") {
      writer.uint32(18).string(message.storeCode);
    }
    if (!message.listingId.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.listingId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessProfileLocation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessProfileLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.labels.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.storeCode = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.listingId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessProfileLocation {
    return {
      labels: globalThis.Array.isArray(object?.labels) ? object.labels.map((e: any) => globalThis.String(e)) : [],
      storeCode: isSet(object.storeCode) ? globalThis.String(object.storeCode) : "",
      listingId: isSet(object.listingId) ? Long.fromValue(object.listingId) : Long.ZERO,
    };
  },

  toJSON(message: BusinessProfileLocation): unknown {
    const obj: any = {};
    if (message.labels?.length) {
      obj.labels = message.labels;
    }
    if (message.storeCode !== "") {
      obj.storeCode = message.storeCode;
    }
    if (!message.listingId.equals(Long.ZERO)) {
      obj.listingId = (message.listingId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<BusinessProfileLocation>): BusinessProfileLocation {
    return BusinessProfileLocation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BusinessProfileLocation>): BusinessProfileLocation {
    const message = createBaseBusinessProfileLocation();
    message.labels = object.labels?.map((e) => e) || [];
    message.storeCode = object.storeCode ?? "";
    message.listingId = (object.listingId !== undefined && object.listingId !== null)
      ? Long.fromValue(object.listingId)
      : Long.ZERO;
    return message;
  },
};

function createBaseHotelPropertyAsset(): HotelPropertyAsset {
  return { placeId: "", hotelAddress: "", hotelName: "" };
}

export const HotelPropertyAsset: MessageFns<HotelPropertyAsset> = {
  encode(message: HotelPropertyAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.placeId !== "") {
      writer.uint32(10).string(message.placeId);
    }
    if (message.hotelAddress !== "") {
      writer.uint32(18).string(message.hotelAddress);
    }
    if (message.hotelName !== "") {
      writer.uint32(26).string(message.hotelName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HotelPropertyAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHotelPropertyAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.placeId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hotelAddress = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hotelName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HotelPropertyAsset {
    return {
      placeId: isSet(object.placeId) ? globalThis.String(object.placeId) : "",
      hotelAddress: isSet(object.hotelAddress) ? globalThis.String(object.hotelAddress) : "",
      hotelName: isSet(object.hotelName) ? globalThis.String(object.hotelName) : "",
    };
  },

  toJSON(message: HotelPropertyAsset): unknown {
    const obj: any = {};
    if (message.placeId !== "") {
      obj.placeId = message.placeId;
    }
    if (message.hotelAddress !== "") {
      obj.hotelAddress = message.hotelAddress;
    }
    if (message.hotelName !== "") {
      obj.hotelName = message.hotelName;
    }
    return obj;
  },

  create(base?: DeepPartial<HotelPropertyAsset>): HotelPropertyAsset {
    return HotelPropertyAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HotelPropertyAsset>): HotelPropertyAsset {
    const message = createBaseHotelPropertyAsset();
    message.placeId = object.placeId ?? "";
    message.hotelAddress = object.hotelAddress ?? "";
    message.hotelName = object.hotelName ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
