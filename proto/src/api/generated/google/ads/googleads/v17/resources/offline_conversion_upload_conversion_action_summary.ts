// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/offline_conversion_upload_conversion_action_summary.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus,
  offlineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatusFromJSON,
  offlineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatusToJSON,
} from "../enums/offline_conversion_diagnostic_status_enum.js";
import {
  OfflineEventUploadClientEnum_OfflineEventUploadClient,
  offlineEventUploadClientEnum_OfflineEventUploadClientFromJSON,
  offlineEventUploadClientEnum_OfflineEventUploadClientToJSON,
} from "../enums/offline_event_upload_client_enum.js";
import { OfflineConversionAlert, OfflineConversionSummary } from "./offline_conversion_upload_client_summary.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/** Offline conversion upload summary at conversion action level. */
export interface OfflineConversionUploadConversionActionSummary {
  /**
   * Output only. The resource name of the offline conversion upload summary at
   * conversion action level. Offline conversion upload conversion action
   * summary resource names have the form:
   *
   * `customers/{customer_id}/offlineConversionUploadConversionActionSummaries/{conversion_action_id}~{client}`
   */
  resourceName: string;
  /** Output only. Client type of the upload event. */
  client: OfflineEventUploadClientEnum_OfflineEventUploadClient;
  /** Output only. Conversion action id. */
  conversionActionId: Long;
  /** Output only. The name of the conversion action. */
  conversionActionName: string;
  /**
   * Output only. Overall status for offline conversion upload conversion action
   * summary. Status is generated from most recent calendar day with upload
   * stats.
   */
  status: OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus;
  /** Output only. Total count of uploaded events. */
  totalEventCount: Long;
  /** Output only. Total count of successful uploaded events. */
  successfulEventCount: Long;
  /** Output only. Total count of pending uploaded events. */
  pendingEventCount: Long;
  /**
   * Output only. Date for the latest upload batch. The format is "yyyy-mm-dd
   * hh:mm:ss", and it's in the time zone of the Google Ads account.
   */
  lastUploadDateTime: string;
  /** Output only. Summary of history stats by last N days. */
  dailySummaries: OfflineConversionSummary[];
  /** Output only. Summary of history stats by last N jobs. */
  jobSummaries: OfflineConversionSummary[];
  /**
   * Output only. Details for each error code. Alerts are generated from most
   * recent calendar day with upload stats.
   */
  alerts: OfflineConversionAlert[];
}

function createBaseOfflineConversionUploadConversionActionSummary(): OfflineConversionUploadConversionActionSummary {
  return {
    resourceName: "",
    client: 0,
    conversionActionId: Long.ZERO,
    conversionActionName: "",
    status: 0,
    totalEventCount: Long.ZERO,
    successfulEventCount: Long.ZERO,
    pendingEventCount: Long.ZERO,
    lastUploadDateTime: "",
    dailySummaries: [],
    jobSummaries: [],
    alerts: [],
  };
}

export const OfflineConversionUploadConversionActionSummary: MessageFns<
  OfflineConversionUploadConversionActionSummary
> = {
  encode(
    message: OfflineConversionUploadConversionActionSummary,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.client !== 0) {
      writer.uint32(16).int32(message.client);
    }
    if (!message.conversionActionId.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.conversionActionId.toString());
    }
    if (message.conversionActionName !== "") {
      writer.uint32(34).string(message.conversionActionName);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (!message.totalEventCount.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.totalEventCount.toString());
    }
    if (!message.successfulEventCount.equals(Long.ZERO)) {
      writer.uint32(56).int64(message.successfulEventCount.toString());
    }
    if (!message.pendingEventCount.equals(Long.ZERO)) {
      writer.uint32(64).int64(message.pendingEventCount.toString());
    }
    if (message.lastUploadDateTime !== "") {
      writer.uint32(74).string(message.lastUploadDateTime);
    }
    for (const v of message.dailySummaries) {
      OfflineConversionSummary.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.jobSummaries) {
      OfflineConversionSummary.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.alerts) {
      OfflineConversionAlert.encode(v!, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OfflineConversionUploadConversionActionSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOfflineConversionUploadConversionActionSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.client = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.conversionActionId = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.conversionActionName = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.totalEventCount = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.successfulEventCount = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.pendingEventCount = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.lastUploadDateTime = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.dailySummaries.push(OfflineConversionSummary.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.jobSummaries.push(OfflineConversionSummary.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.alerts.push(OfflineConversionAlert.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OfflineConversionUploadConversionActionSummary {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      client: isSet(object.client) ? offlineEventUploadClientEnum_OfflineEventUploadClientFromJSON(object.client) : 0,
      conversionActionId: isSet(object.conversionActionId) ? Long.fromValue(object.conversionActionId) : Long.ZERO,
      conversionActionName: isSet(object.conversionActionName) ? globalThis.String(object.conversionActionName) : "",
      status: isSet(object.status)
        ? offlineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatusFromJSON(object.status)
        : 0,
      totalEventCount: isSet(object.totalEventCount) ? Long.fromValue(object.totalEventCount) : Long.ZERO,
      successfulEventCount: isSet(object.successfulEventCount)
        ? Long.fromValue(object.successfulEventCount)
        : Long.ZERO,
      pendingEventCount: isSet(object.pendingEventCount) ? Long.fromValue(object.pendingEventCount) : Long.ZERO,
      lastUploadDateTime: isSet(object.lastUploadDateTime) ? globalThis.String(object.lastUploadDateTime) : "",
      dailySummaries: globalThis.Array.isArray(object?.dailySummaries)
        ? object.dailySummaries.map((e: any) => OfflineConversionSummary.fromJSON(e))
        : [],
      jobSummaries: globalThis.Array.isArray(object?.jobSummaries)
        ? object.jobSummaries.map((e: any) => OfflineConversionSummary.fromJSON(e))
        : [],
      alerts: globalThis.Array.isArray(object?.alerts)
        ? object.alerts.map((e: any) => OfflineConversionAlert.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OfflineConversionUploadConversionActionSummary): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.client !== 0) {
      obj.client = offlineEventUploadClientEnum_OfflineEventUploadClientToJSON(message.client);
    }
    if (!message.conversionActionId.equals(Long.ZERO)) {
      obj.conversionActionId = (message.conversionActionId || Long.ZERO).toString();
    }
    if (message.conversionActionName !== "") {
      obj.conversionActionName = message.conversionActionName;
    }
    if (message.status !== 0) {
      obj.status = offlineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatusToJSON(message.status);
    }
    if (!message.totalEventCount.equals(Long.ZERO)) {
      obj.totalEventCount = (message.totalEventCount || Long.ZERO).toString();
    }
    if (!message.successfulEventCount.equals(Long.ZERO)) {
      obj.successfulEventCount = (message.successfulEventCount || Long.ZERO).toString();
    }
    if (!message.pendingEventCount.equals(Long.ZERO)) {
      obj.pendingEventCount = (message.pendingEventCount || Long.ZERO).toString();
    }
    if (message.lastUploadDateTime !== "") {
      obj.lastUploadDateTime = message.lastUploadDateTime;
    }
    if (message.dailySummaries?.length) {
      obj.dailySummaries = message.dailySummaries.map((e) => OfflineConversionSummary.toJSON(e));
    }
    if (message.jobSummaries?.length) {
      obj.jobSummaries = message.jobSummaries.map((e) => OfflineConversionSummary.toJSON(e));
    }
    if (message.alerts?.length) {
      obj.alerts = message.alerts.map((e) => OfflineConversionAlert.toJSON(e));
    }
    return obj;
  },

  create(
    base?: DeepPartial<OfflineConversionUploadConversionActionSummary>,
  ): OfflineConversionUploadConversionActionSummary {
    return OfflineConversionUploadConversionActionSummary.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<OfflineConversionUploadConversionActionSummary>,
  ): OfflineConversionUploadConversionActionSummary {
    const message = createBaseOfflineConversionUploadConversionActionSummary();
    message.resourceName = object.resourceName ?? "";
    message.client = object.client ?? 0;
    message.conversionActionId = (object.conversionActionId !== undefined && object.conversionActionId !== null)
      ? Long.fromValue(object.conversionActionId)
      : Long.ZERO;
    message.conversionActionName = object.conversionActionName ?? "";
    message.status = object.status ?? 0;
    message.totalEventCount = (object.totalEventCount !== undefined && object.totalEventCount !== null)
      ? Long.fromValue(object.totalEventCount)
      : Long.ZERO;
    message.successfulEventCount = (object.successfulEventCount !== undefined && object.successfulEventCount !== null)
      ? Long.fromValue(object.successfulEventCount)
      : Long.ZERO;
    message.pendingEventCount = (object.pendingEventCount !== undefined && object.pendingEventCount !== null)
      ? Long.fromValue(object.pendingEventCount)
      : Long.ZERO;
    message.lastUploadDateTime = object.lastUploadDateTime ?? "";
    message.dailySummaries = object.dailySummaries?.map((e) => OfflineConversionSummary.fromPartial(e)) || [];
    message.jobSummaries = object.jobSummaries?.map((e) => OfflineConversionSummary.fromPartial(e)) || [];
    message.alerts = object.alerts?.map((e) => OfflineConversionAlert.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
