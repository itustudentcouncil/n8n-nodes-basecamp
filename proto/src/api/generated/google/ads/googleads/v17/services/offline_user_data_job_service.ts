// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/services/offline_user_data_job_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { Status } from "../../../../rpc/status.js";
import { UserData } from "../common/offline_user_data.js";
import { OfflineUserDataJob } from "../resources/offline_user_data_job.js";

export const protobufPackage = "google.ads.googleads.v17.services";

/**
 * Request message for
 * [OfflineUserDataJobService.CreateOfflineUserDataJob][google.ads.googleads.v17.services.OfflineUserDataJobService.CreateOfflineUserDataJob].
 */
export interface CreateOfflineUserDataJobRequest {
  /**
   * Required. The ID of the customer for which to create an offline user data
   * job.
   */
  customerId: string;
  /** Required. The offline user data job to be created. */
  job:
    | OfflineUserDataJob
    | undefined;
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
  /**
   * If true, match rate range for the offline user data job is calculated and
   * made available in the resource.
   */
  enableMatchRateRangePreview: boolean;
}

/**
 * Response message for
 * [OfflineUserDataJobService.CreateOfflineUserDataJob][google.ads.googleads.v17.services.OfflineUserDataJobService.CreateOfflineUserDataJob].
 */
export interface CreateOfflineUserDataJobResponse {
  /** The resource name of the OfflineUserDataJob. */
  resourceName: string;
}

/**
 * Request message for
 * [OfflineUserDataJobService.RunOfflineUserDataJob][google.ads.googleads.v17.services.OfflineUserDataJobService.RunOfflineUserDataJob].
 */
export interface RunOfflineUserDataJobRequest {
  /** Required. The resource name of the OfflineUserDataJob to run. */
  resourceName: string;
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
}

/**
 * Request message for
 * [OfflineUserDataJobService.AddOfflineUserDataJobOperations][google.ads.googleads.v17.services.OfflineUserDataJobService.AddOfflineUserDataJobOperations].
 */
export interface AddOfflineUserDataJobOperationsRequest {
  /** Required. The resource name of the OfflineUserDataJob. */
  resourceName: string;
  /** True to enable partial failure for the offline user data job. */
  enablePartialFailure?:
    | boolean
    | undefined;
  /**
   * True to enable warnings for the offline user data job. When enabled, a
   * warning will not block the OfflineUserDataJobOperation, and will also
   * return warning messages about malformed field values.
   */
  enableWarnings?:
    | boolean
    | undefined;
  /** Required. The list of operations to be done. */
  operations: OfflineUserDataJobOperation[];
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
}

/** Operation to be made for the AddOfflineUserDataJobOperationsRequest. */
export interface OfflineUserDataJobOperation {
  /**
   * Add the provided data to the transaction. Data cannot be retrieved after
   * being uploaded.
   */
  create?:
    | UserData
    | undefined;
  /**
   * Remove the provided data from the transaction. Data cannot be retrieved
   * after being uploaded.
   */
  remove?:
    | UserData
    | undefined;
  /**
   * Remove all previously provided data. This is only supported for Customer
   * Match.
   */
  removeAll?: boolean | undefined;
}

/**
 * Response message for
 * [OfflineUserDataJobService.AddOfflineUserDataJobOperations][google.ads.googleads.v17.services.OfflineUserDataJobService.AddOfflineUserDataJobOperations].
 */
export interface AddOfflineUserDataJobOperationsResponse {
  /**
   * Errors that pertain to operation failures in the partial failure mode.
   * Returned only when partial_failure = true and all errors occur inside the
   * operations. If any errors occur outside the operations (for example, auth
   * errors), we return an RPC level error.
   */
  partialFailureError:
    | Status
    | undefined;
  /**
   * Non blocking errors that pertain to operation failures in the warnings
   * mode. Returned only when enable_warnings = true.
   */
  warning: Status | undefined;
}

function createBaseCreateOfflineUserDataJobRequest(): CreateOfflineUserDataJobRequest {
  return { customerId: "", job: undefined, validateOnly: false, enableMatchRateRangePreview: false };
}

export const CreateOfflineUserDataJobRequest: MessageFns<CreateOfflineUserDataJobRequest> = {
  encode(message: CreateOfflineUserDataJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    if (message.job !== undefined) {
      OfflineUserDataJob.encode(message.job, writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    if (message.enableMatchRateRangePreview !== false) {
      writer.uint32(40).bool(message.enableMatchRateRangePreview);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOfflineUserDataJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOfflineUserDataJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.job = OfflineUserDataJob.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.enableMatchRateRangePreview = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOfflineUserDataJobRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      job: isSet(object.job) ? OfflineUserDataJob.fromJSON(object.job) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      enableMatchRateRangePreview: isSet(object.enableMatchRateRangePreview)
        ? globalThis.Boolean(object.enableMatchRateRangePreview)
        : false,
    };
  },

  toJSON(message: CreateOfflineUserDataJobRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.job !== undefined) {
      obj.job = OfflineUserDataJob.toJSON(message.job);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.enableMatchRateRangePreview !== false) {
      obj.enableMatchRateRangePreview = message.enableMatchRateRangePreview;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateOfflineUserDataJobRequest>): CreateOfflineUserDataJobRequest {
    return CreateOfflineUserDataJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateOfflineUserDataJobRequest>): CreateOfflineUserDataJobRequest {
    const message = createBaseCreateOfflineUserDataJobRequest();
    message.customerId = object.customerId ?? "";
    message.job = (object.job !== undefined && object.job !== null)
      ? OfflineUserDataJob.fromPartial(object.job)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    message.enableMatchRateRangePreview = object.enableMatchRateRangePreview ?? false;
    return message;
  },
};

function createBaseCreateOfflineUserDataJobResponse(): CreateOfflineUserDataJobResponse {
  return { resourceName: "" };
}

export const CreateOfflineUserDataJobResponse: MessageFns<CreateOfflineUserDataJobResponse> = {
  encode(message: CreateOfflineUserDataJobResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOfflineUserDataJobResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOfflineUserDataJobResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOfflineUserDataJobResponse {
    return { resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "" };
  },

  toJSON(message: CreateOfflineUserDataJobResponse): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateOfflineUserDataJobResponse>): CreateOfflineUserDataJobResponse {
    return CreateOfflineUserDataJobResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateOfflineUserDataJobResponse>): CreateOfflineUserDataJobResponse {
    const message = createBaseCreateOfflineUserDataJobResponse();
    message.resourceName = object.resourceName ?? "";
    return message;
  },
};

function createBaseRunOfflineUserDataJobRequest(): RunOfflineUserDataJobRequest {
  return { resourceName: "", validateOnly: false };
}

export const RunOfflineUserDataJobRequest: MessageFns<RunOfflineUserDataJobRequest> = {
  encode(message: RunOfflineUserDataJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunOfflineUserDataJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunOfflineUserDataJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunOfflineUserDataJobRequest {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: RunOfflineUserDataJobRequest): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<RunOfflineUserDataJobRequest>): RunOfflineUserDataJobRequest {
    return RunOfflineUserDataJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RunOfflineUserDataJobRequest>): RunOfflineUserDataJobRequest {
    const message = createBaseRunOfflineUserDataJobRequest();
    message.resourceName = object.resourceName ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseAddOfflineUserDataJobOperationsRequest(): AddOfflineUserDataJobOperationsRequest {
  return {
    resourceName: "",
    enablePartialFailure: undefined,
    enableWarnings: undefined,
    operations: [],
    validateOnly: false,
  };
}

export const AddOfflineUserDataJobOperationsRequest: MessageFns<AddOfflineUserDataJobOperationsRequest> = {
  encode(message: AddOfflineUserDataJobOperationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.enablePartialFailure !== undefined) {
      writer.uint32(32).bool(message.enablePartialFailure);
    }
    if (message.enableWarnings !== undefined) {
      writer.uint32(48).bool(message.enableWarnings);
    }
    for (const v of message.operations) {
      OfflineUserDataJobOperation.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(40).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddOfflineUserDataJobOperationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOfflineUserDataJobOperationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.enablePartialFailure = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.enableWarnings = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.operations.push(OfflineUserDataJobOperation.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOfflineUserDataJobOperationsRequest {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      enablePartialFailure: isSet(object.enablePartialFailure)
        ? globalThis.Boolean(object.enablePartialFailure)
        : undefined,
      enableWarnings: isSet(object.enableWarnings) ? globalThis.Boolean(object.enableWarnings) : undefined,
      operations: globalThis.Array.isArray(object?.operations)
        ? object.operations.map((e: any) => OfflineUserDataJobOperation.fromJSON(e))
        : [],
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: AddOfflineUserDataJobOperationsRequest): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.enablePartialFailure !== undefined) {
      obj.enablePartialFailure = message.enablePartialFailure;
    }
    if (message.enableWarnings !== undefined) {
      obj.enableWarnings = message.enableWarnings;
    }
    if (message.operations?.length) {
      obj.operations = message.operations.map((e) => OfflineUserDataJobOperation.toJSON(e));
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<AddOfflineUserDataJobOperationsRequest>): AddOfflineUserDataJobOperationsRequest {
    return AddOfflineUserDataJobOperationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOfflineUserDataJobOperationsRequest>): AddOfflineUserDataJobOperationsRequest {
    const message = createBaseAddOfflineUserDataJobOperationsRequest();
    message.resourceName = object.resourceName ?? "";
    message.enablePartialFailure = object.enablePartialFailure ?? undefined;
    message.enableWarnings = object.enableWarnings ?? undefined;
    message.operations = object.operations?.map((e) => OfflineUserDataJobOperation.fromPartial(e)) || [];
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseOfflineUserDataJobOperation(): OfflineUserDataJobOperation {
  return { create: undefined, remove: undefined, removeAll: undefined };
}

export const OfflineUserDataJobOperation: MessageFns<OfflineUserDataJobOperation> = {
  encode(message: OfflineUserDataJobOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.create !== undefined) {
      UserData.encode(message.create, writer.uint32(10).fork()).join();
    }
    if (message.remove !== undefined) {
      UserData.encode(message.remove, writer.uint32(18).fork()).join();
    }
    if (message.removeAll !== undefined) {
      writer.uint32(24).bool(message.removeAll);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OfflineUserDataJobOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOfflineUserDataJobOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.create = UserData.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.remove = UserData.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.removeAll = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OfflineUserDataJobOperation {
    return {
      create: isSet(object.create) ? UserData.fromJSON(object.create) : undefined,
      remove: isSet(object.remove) ? UserData.fromJSON(object.remove) : undefined,
      removeAll: isSet(object.removeAll) ? globalThis.Boolean(object.removeAll) : undefined,
    };
  },

  toJSON(message: OfflineUserDataJobOperation): unknown {
    const obj: any = {};
    if (message.create !== undefined) {
      obj.create = UserData.toJSON(message.create);
    }
    if (message.remove !== undefined) {
      obj.remove = UserData.toJSON(message.remove);
    }
    if (message.removeAll !== undefined) {
      obj.removeAll = message.removeAll;
    }
    return obj;
  },

  create(base?: DeepPartial<OfflineUserDataJobOperation>): OfflineUserDataJobOperation {
    return OfflineUserDataJobOperation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OfflineUserDataJobOperation>): OfflineUserDataJobOperation {
    const message = createBaseOfflineUserDataJobOperation();
    message.create = (object.create !== undefined && object.create !== null)
      ? UserData.fromPartial(object.create)
      : undefined;
    message.remove = (object.remove !== undefined && object.remove !== null)
      ? UserData.fromPartial(object.remove)
      : undefined;
    message.removeAll = object.removeAll ?? undefined;
    return message;
  },
};

function createBaseAddOfflineUserDataJobOperationsResponse(): AddOfflineUserDataJobOperationsResponse {
  return { partialFailureError: undefined, warning: undefined };
}

export const AddOfflineUserDataJobOperationsResponse: MessageFns<AddOfflineUserDataJobOperationsResponse> = {
  encode(message: AddOfflineUserDataJobOperationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.partialFailureError !== undefined) {
      Status.encode(message.partialFailureError, writer.uint32(10).fork()).join();
    }
    if (message.warning !== undefined) {
      Status.encode(message.warning, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddOfflineUserDataJobOperationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOfflineUserDataJobOperationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.partialFailureError = Status.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.warning = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOfflineUserDataJobOperationsResponse {
    return {
      partialFailureError: isSet(object.partialFailureError) ? Status.fromJSON(object.partialFailureError) : undefined,
      warning: isSet(object.warning) ? Status.fromJSON(object.warning) : undefined,
    };
  },

  toJSON(message: AddOfflineUserDataJobOperationsResponse): unknown {
    const obj: any = {};
    if (message.partialFailureError !== undefined) {
      obj.partialFailureError = Status.toJSON(message.partialFailureError);
    }
    if (message.warning !== undefined) {
      obj.warning = Status.toJSON(message.warning);
    }
    return obj;
  },

  create(base?: DeepPartial<AddOfflineUserDataJobOperationsResponse>): AddOfflineUserDataJobOperationsResponse {
    return AddOfflineUserDataJobOperationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOfflineUserDataJobOperationsResponse>): AddOfflineUserDataJobOperationsResponse {
    const message = createBaseAddOfflineUserDataJobOperationsResponse();
    message.partialFailureError = (object.partialFailureError !== undefined && object.partialFailureError !== null)
      ? Status.fromPartial(object.partialFailureError)
      : undefined;
    message.warning = (object.warning !== undefined && object.warning !== null)
      ? Status.fromPartial(object.warning)
      : undefined;
    return message;
  },
};

/** Service to manage offline user data jobs. */
export type OfflineUserDataJobServiceDefinition = typeof OfflineUserDataJobServiceDefinition;
export const OfflineUserDataJobServiceDefinition = {
  name: "OfflineUserDataJobService",
  fullName: "google.ads.googleads.v17.services.OfflineUserDataJobService",
  methods: {
    /**
     * Creates an offline user data job.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [NotAllowlistedError]()
     *   [OfflineUserDataJobError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    createOfflineUserDataJob: {
      name: "CreateOfflineUserDataJob",
      requestType: CreateOfflineUserDataJobRequest,
      requestStream: false,
      responseType: CreateOfflineUserDataJobResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 99, 117, 115, 116, 111, 109, 101, 114, 95, 105, 100, 44, 106, 111, 98])],
          578365826: [
            Buffer.from([
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              55,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              111,
              102,
              102,
              108,
              105,
              110,
              101,
              85,
              115,
              101,
              114,
              68,
              97,
              116,
              97,
              74,
              111,
              98,
              115,
              58,
              99,
              114,
              101,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Adds operations to the offline user data job.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [OfflineUserDataJobError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    addOfflineUserDataJobOperations: {
      name: "AddOfflineUserDataJobOperations",
      requestType: AddOfflineUserDataJobOperationsRequest,
      requestStream: false,
      responseType: AddOfflineUserDataJobOperationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              44,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              73,
              58,
              1,
              42,
              34,
              68,
              47,
              118,
              49,
              55,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              61,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              111,
              102,
              102,
              108,
              105,
              110,
              101,
              85,
              115,
              101,
              114,
              68,
              97,
              116,
              97,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              97,
              100,
              100,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Runs the offline user data job.
     *
     * When finished, the long running operation will contain the processing
     * result or failure information, if any.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [OfflineUserDataJobError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    runOfflineUserDataJob: {
      name: "RunOfflineUserDataJob",
      requestType: RunOfflineUserDataJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              86,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              61,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              97,
              100,
              115,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              97,
              100,
              115,
              46,
              118,
              49,
              55,
              46,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              46,
              79,
              102,
              102,
              108,
              105,
              110,
              101,
              85,
              115,
              101,
              114,
              68,
              97,
              116,
              97,
              74,
              111,
              98,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([13, 114, 101, 115, 111, 117, 114, 99, 101, 95, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              58,
              1,
              42,
              34,
              58,
              47,
              118,
              49,
              55,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              61,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              111,
              102,
              102,
              108,
              105,
              110,
              101,
              85,
              115,
              101,
              114,
              68,
              97,
              116,
              97,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              114,
              117,
              110,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface OfflineUserDataJobServiceImplementation<CallContextExt = {}> {
  /**
   * Creates an offline user data job.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [DatabaseError]()
   *   [FieldError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [NotAllowlistedError]()
   *   [OfflineUserDataJobError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  createOfflineUserDataJob(
    request: CreateOfflineUserDataJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateOfflineUserDataJobResponse>>;
  /**
   * Adds operations to the offline user data job.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [DatabaseError]()
   *   [FieldError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [MutateError]()
   *   [OfflineUserDataJobError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  addOfflineUserDataJobOperations(
    request: AddOfflineUserDataJobOperationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddOfflineUserDataJobOperationsResponse>>;
  /**
   * Runs the offline user data job.
   *
   * When finished, the long running operation will contain the processing
   * result or failure information, if any.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [DatabaseError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [OfflineUserDataJobError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  runOfflineUserDataJob(
    request: RunOfflineUserDataJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface OfflineUserDataJobServiceClient<CallOptionsExt = {}> {
  /**
   * Creates an offline user data job.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [DatabaseError]()
   *   [FieldError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [NotAllowlistedError]()
   *   [OfflineUserDataJobError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  createOfflineUserDataJob(
    request: DeepPartial<CreateOfflineUserDataJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateOfflineUserDataJobResponse>;
  /**
   * Adds operations to the offline user data job.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [DatabaseError]()
   *   [FieldError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [MutateError]()
   *   [OfflineUserDataJobError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  addOfflineUserDataJobOperations(
    request: DeepPartial<AddOfflineUserDataJobOperationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddOfflineUserDataJobOperationsResponse>;
  /**
   * Runs the offline user data job.
   *
   * When finished, the long running operation will contain the processing
   * result or failure information, if any.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [DatabaseError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [OfflineUserDataJobError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  runOfflineUserDataJob(
    request: DeepPartial<RunOfflineUserDataJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
