// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/enums/converting_user_prior_engagement_type_and_ltv_bucket.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.enums";

/**
 * Container for enumeration of converting user prior engagement types and
 * lifetime-value bucket.
 */
export interface ConvertingUserPriorEngagementTypeAndLtvBucketEnum {
}

/** Enumerates converting user prior engagement types and lifetime-value bucket */
export enum ConvertingUserPriorEngagementTypeAndLtvBucketEnum_ConvertingUserPriorEngagementTypeAndLtvBucket {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The value is unknown in this version. */
  UNKNOWN = 1,
  /** NEW - Converting user is new to the advertiser. */
  NEW = 2,
  /**
   * RETURNING - Converting user is returning to the advertiser. Definition of returning
   * differs among conversion types, such as a second store visit versus a
   * second online purchase.
   */
  RETURNING = 3,
  /** NEW_AND_HIGH_LTV - Converting user is new to the advertiser and has high lifetime value. */
  NEW_AND_HIGH_LTV = 4,
  UNRECOGNIZED = -1,
}

export function convertingUserPriorEngagementTypeAndLtvBucketEnum_ConvertingUserPriorEngagementTypeAndLtvBucketFromJSON(
  object: any,
): ConvertingUserPriorEngagementTypeAndLtvBucketEnum_ConvertingUserPriorEngagementTypeAndLtvBucket {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return ConvertingUserPriorEngagementTypeAndLtvBucketEnum_ConvertingUserPriorEngagementTypeAndLtvBucket
        .UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return ConvertingUserPriorEngagementTypeAndLtvBucketEnum_ConvertingUserPriorEngagementTypeAndLtvBucket.UNKNOWN;
    case 2:
    case "NEW":
      return ConvertingUserPriorEngagementTypeAndLtvBucketEnum_ConvertingUserPriorEngagementTypeAndLtvBucket.NEW;
    case 3:
    case "RETURNING":
      return ConvertingUserPriorEngagementTypeAndLtvBucketEnum_ConvertingUserPriorEngagementTypeAndLtvBucket.RETURNING;
    case 4:
    case "NEW_AND_HIGH_LTV":
      return ConvertingUserPriorEngagementTypeAndLtvBucketEnum_ConvertingUserPriorEngagementTypeAndLtvBucket
        .NEW_AND_HIGH_LTV;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConvertingUserPriorEngagementTypeAndLtvBucketEnum_ConvertingUserPriorEngagementTypeAndLtvBucket
        .UNRECOGNIZED;
  }
}

export function convertingUserPriorEngagementTypeAndLtvBucketEnum_ConvertingUserPriorEngagementTypeAndLtvBucketToJSON(
  object: ConvertingUserPriorEngagementTypeAndLtvBucketEnum_ConvertingUserPriorEngagementTypeAndLtvBucket,
): string {
  switch (object) {
    case ConvertingUserPriorEngagementTypeAndLtvBucketEnum_ConvertingUserPriorEngagementTypeAndLtvBucket.UNSPECIFIED:
      return "UNSPECIFIED";
    case ConvertingUserPriorEngagementTypeAndLtvBucketEnum_ConvertingUserPriorEngagementTypeAndLtvBucket.UNKNOWN:
      return "UNKNOWN";
    case ConvertingUserPriorEngagementTypeAndLtvBucketEnum_ConvertingUserPriorEngagementTypeAndLtvBucket.NEW:
      return "NEW";
    case ConvertingUserPriorEngagementTypeAndLtvBucketEnum_ConvertingUserPriorEngagementTypeAndLtvBucket.RETURNING:
      return "RETURNING";
    case ConvertingUserPriorEngagementTypeAndLtvBucketEnum_ConvertingUserPriorEngagementTypeAndLtvBucket
      .NEW_AND_HIGH_LTV:
      return "NEW_AND_HIGH_LTV";
    case ConvertingUserPriorEngagementTypeAndLtvBucketEnum_ConvertingUserPriorEngagementTypeAndLtvBucket.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseConvertingUserPriorEngagementTypeAndLtvBucketEnum(): ConvertingUserPriorEngagementTypeAndLtvBucketEnum {
  return {};
}

export const ConvertingUserPriorEngagementTypeAndLtvBucketEnum: MessageFns<
  ConvertingUserPriorEngagementTypeAndLtvBucketEnum
> = {
  encode(
    _: ConvertingUserPriorEngagementTypeAndLtvBucketEnum,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConvertingUserPriorEngagementTypeAndLtvBucketEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConvertingUserPriorEngagementTypeAndLtvBucketEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ConvertingUserPriorEngagementTypeAndLtvBucketEnum {
    return {};
  },

  toJSON(_: ConvertingUserPriorEngagementTypeAndLtvBucketEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<ConvertingUserPriorEngagementTypeAndLtvBucketEnum>,
  ): ConvertingUserPriorEngagementTypeAndLtvBucketEnum {
    return ConvertingUserPriorEngagementTypeAndLtvBucketEnum.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<ConvertingUserPriorEngagementTypeAndLtvBucketEnum>,
  ): ConvertingUserPriorEngagementTypeAndLtvBucketEnum {
    const message = createBaseConvertingUserPriorEngagementTypeAndLtvBucketEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
