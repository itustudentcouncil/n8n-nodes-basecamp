// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/enums/message_placeholder_field.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.enums";

/** Values for Message placeholder fields. */
export interface MessagePlaceholderFieldEnum {
}

/** Possible values for Message placeholder fields. */
export enum MessagePlaceholderFieldEnum_MessagePlaceholderField {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /** BUSINESS_NAME - Data Type: STRING. The name of your business. */
  BUSINESS_NAME = 2,
  /** COUNTRY_CODE - Data Type: STRING. Country code of phone number. */
  COUNTRY_CODE = 3,
  /**
   * PHONE_NUMBER - Data Type: STRING. A phone number that's capable of sending and receiving
   * text messages.
   */
  PHONE_NUMBER = 4,
  /** MESSAGE_EXTENSION_TEXT - Data Type: STRING. The text that will go in your click-to-message ad. */
  MESSAGE_EXTENSION_TEXT = 5,
  /**
   * MESSAGE_TEXT - Data Type: STRING. The message text automatically shows in people's
   * messaging apps when they tap to send you a message.
   */
  MESSAGE_TEXT = 6,
  UNRECOGNIZED = -1,
}

export function messagePlaceholderFieldEnum_MessagePlaceholderFieldFromJSON(
  object: any,
): MessagePlaceholderFieldEnum_MessagePlaceholderField {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return MessagePlaceholderFieldEnum_MessagePlaceholderField.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return MessagePlaceholderFieldEnum_MessagePlaceholderField.UNKNOWN;
    case 2:
    case "BUSINESS_NAME":
      return MessagePlaceholderFieldEnum_MessagePlaceholderField.BUSINESS_NAME;
    case 3:
    case "COUNTRY_CODE":
      return MessagePlaceholderFieldEnum_MessagePlaceholderField.COUNTRY_CODE;
    case 4:
    case "PHONE_NUMBER":
      return MessagePlaceholderFieldEnum_MessagePlaceholderField.PHONE_NUMBER;
    case 5:
    case "MESSAGE_EXTENSION_TEXT":
      return MessagePlaceholderFieldEnum_MessagePlaceholderField.MESSAGE_EXTENSION_TEXT;
    case 6:
    case "MESSAGE_TEXT":
      return MessagePlaceholderFieldEnum_MessagePlaceholderField.MESSAGE_TEXT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MessagePlaceholderFieldEnum_MessagePlaceholderField.UNRECOGNIZED;
  }
}

export function messagePlaceholderFieldEnum_MessagePlaceholderFieldToJSON(
  object: MessagePlaceholderFieldEnum_MessagePlaceholderField,
): string {
  switch (object) {
    case MessagePlaceholderFieldEnum_MessagePlaceholderField.UNSPECIFIED:
      return "UNSPECIFIED";
    case MessagePlaceholderFieldEnum_MessagePlaceholderField.UNKNOWN:
      return "UNKNOWN";
    case MessagePlaceholderFieldEnum_MessagePlaceholderField.BUSINESS_NAME:
      return "BUSINESS_NAME";
    case MessagePlaceholderFieldEnum_MessagePlaceholderField.COUNTRY_CODE:
      return "COUNTRY_CODE";
    case MessagePlaceholderFieldEnum_MessagePlaceholderField.PHONE_NUMBER:
      return "PHONE_NUMBER";
    case MessagePlaceholderFieldEnum_MessagePlaceholderField.MESSAGE_EXTENSION_TEXT:
      return "MESSAGE_EXTENSION_TEXT";
    case MessagePlaceholderFieldEnum_MessagePlaceholderField.MESSAGE_TEXT:
      return "MESSAGE_TEXT";
    case MessagePlaceholderFieldEnum_MessagePlaceholderField.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseMessagePlaceholderFieldEnum(): MessagePlaceholderFieldEnum {
  return {};
}

export const MessagePlaceholderFieldEnum: MessageFns<MessagePlaceholderFieldEnum> = {
  encode(_: MessagePlaceholderFieldEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessagePlaceholderFieldEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessagePlaceholderFieldEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MessagePlaceholderFieldEnum {
    return {};
  },

  toJSON(_: MessagePlaceholderFieldEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MessagePlaceholderFieldEnum>): MessagePlaceholderFieldEnum {
    return MessagePlaceholderFieldEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MessagePlaceholderFieldEnum>): MessagePlaceholderFieldEnum {
    const message = createBaseMessagePlaceholderFieldEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
