// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/asset_set_type_view.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  AssetSetTypeEnum_AssetSetType,
  assetSetTypeEnum_AssetSetTypeFromJSON,
  assetSetTypeEnum_AssetSetTypeToJSON,
} from "../enums/asset_set_type.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/**
 * An asset set type view.
 * This view reports non-overcounted metrics for each asset set type. Child
 * asset set types are not included in this report. Their stats are aggregated
 * under the parent asset set type.
 */
export interface AssetSetTypeView {
  /**
   * Output only. The resource name of the asset set type view.
   * Asset set type view resource names have the form:
   *
   * `customers/{customer_id}/assetSetTypeViews/{asset_set_type}`
   */
  resourceName: string;
  /** Output only. The asset set type of the asset set type view. */
  assetSetType: AssetSetTypeEnum_AssetSetType;
}

function createBaseAssetSetTypeView(): AssetSetTypeView {
  return { resourceName: "", assetSetType: 0 };
}

export const AssetSetTypeView: MessageFns<AssetSetTypeView> = {
  encode(message: AssetSetTypeView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.assetSetType !== 0) {
      writer.uint32(24).int32(message.assetSetType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetSetTypeView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetSetTypeView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.assetSetType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssetSetTypeView {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      assetSetType: isSet(object.assetSetType) ? assetSetTypeEnum_AssetSetTypeFromJSON(object.assetSetType) : 0,
    };
  },

  toJSON(message: AssetSetTypeView): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.assetSetType !== 0) {
      obj.assetSetType = assetSetTypeEnum_AssetSetTypeToJSON(message.assetSetType);
    }
    return obj;
  },

  create(base?: DeepPartial<AssetSetTypeView>): AssetSetTypeView {
    return AssetSetTypeView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AssetSetTypeView>): AssetSetTypeView {
    const message = createBaseAssetSetTypeView();
    message.resourceName = object.resourceName ?? "";
    message.assetSetType = object.assetSetType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
