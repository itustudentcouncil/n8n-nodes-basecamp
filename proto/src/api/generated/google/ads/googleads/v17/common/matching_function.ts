// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/common/matching_function.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  MatchingFunctionContextTypeEnum_MatchingFunctionContextType,
  matchingFunctionContextTypeEnum_MatchingFunctionContextTypeFromJSON,
  matchingFunctionContextTypeEnum_MatchingFunctionContextTypeToJSON,
} from "../enums/matching_function_context_type.js";
import {
  MatchingFunctionOperatorEnum_MatchingFunctionOperator,
  matchingFunctionOperatorEnum_MatchingFunctionOperatorFromJSON,
  matchingFunctionOperatorEnum_MatchingFunctionOperatorToJSON,
} from "../enums/matching_function_operator.js";

export const protobufPackage = "google.ads.googleads.v17.common";

/**
 * Matching function associated with a
 * CustomerFeed, CampaignFeed, or AdGroupFeed. The matching function is used
 * to filter the set of feed items selected.
 */
export interface MatchingFunction {
  /**
   * String representation of the Function.
   *
   * Examples:
   *
   * 1. IDENTITY(true) or IDENTITY(false). All or no feed items served.
   * 2. EQUALS(CONTEXT.DEVICE,"Mobile")
   * 3. IN(FEED_ITEM_ID,{1000001,1000002,1000003})
   * 4. CONTAINS_ANY(FeedAttribute[12345678,0],{"Mars cruise","Venus cruise"})
   * 5. AND(IN(FEED_ITEM_ID,{10001,10002}),EQUALS(CONTEXT.DEVICE,"Mobile"))
   *
   * For more details, visit
   * https://developers.google.com/google-ads/api/docs/extensions/feeds/matching-functions
   *
   * Note that because multiple strings may represent the same underlying
   * function (whitespace and single versus double quotation marks, for
   * example), the value returned may not be identical to the string sent in a
   * mutate request.
   */
  functionString?:
    | string
    | undefined;
  /** Operator for a function. */
  operator: MatchingFunctionOperatorEnum_MatchingFunctionOperator;
  /**
   * The operands on the left hand side of the equation. This is also the
   * operand to be used for single operand expressions such as NOT.
   */
  leftOperands: Operand[];
  /** The operands on the right hand side of the equation. */
  rightOperands: Operand[];
}

/** An operand in a matching function. */
export interface Operand {
  /** A constant operand in a matching function. */
  constantOperand?:
    | Operand_ConstantOperand
    | undefined;
  /** This operand specifies a feed attribute in feed. */
  feedAttributeOperand?:
    | Operand_FeedAttributeOperand
    | undefined;
  /**
   * A function operand in a matching function.
   * Used to represent nested functions.
   */
  functionOperand?:
    | Operand_FunctionOperand
    | undefined;
  /** An operand in a function referring to a value in the request context. */
  requestContextOperand?: Operand_RequestContextOperand | undefined;
}

/** A constant operand in a matching function. */
export interface Operand_ConstantOperand {
  /** String value of the operand if it is a string type. */
  stringValue?:
    | string
    | undefined;
  /** Int64 value of the operand if it is a int64 type. */
  longValue?:
    | Long
    | undefined;
  /** Boolean value of the operand if it is a boolean type. */
  booleanValue?:
    | boolean
    | undefined;
  /** Double value of the operand if it is a double type. */
  doubleValue?: number | undefined;
}

/**
 * A feed attribute operand in a matching function.
 * Used to represent a feed attribute in feed.
 */
export interface Operand_FeedAttributeOperand {
  /** The associated feed. Required. */
  feedId?:
    | Long
    | undefined;
  /** Id of the referenced feed attribute. Required. */
  feedAttributeId?: Long | undefined;
}

/**
 * A function operand in a matching function.
 * Used to represent nested functions.
 */
export interface Operand_FunctionOperand {
  /** The matching function held in this operand. */
  matchingFunction: MatchingFunction | undefined;
}

/** An operand in a function referring to a value in the request context. */
export interface Operand_RequestContextOperand {
  /** Type of value to be referred in the request context. */
  contextType: MatchingFunctionContextTypeEnum_MatchingFunctionContextType;
}

function createBaseMatchingFunction(): MatchingFunction {
  return { functionString: undefined, operator: 0, leftOperands: [], rightOperands: [] };
}

export const MatchingFunction: MessageFns<MatchingFunction> = {
  encode(message: MatchingFunction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.functionString !== undefined) {
      writer.uint32(42).string(message.functionString);
    }
    if (message.operator !== 0) {
      writer.uint32(32).int32(message.operator);
    }
    for (const v of message.leftOperands) {
      Operand.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.rightOperands) {
      Operand.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MatchingFunction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMatchingFunction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 42) {
            break;
          }

          message.functionString = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.operator = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.leftOperands.push(Operand.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rightOperands.push(Operand.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MatchingFunction {
    return {
      functionString: isSet(object.functionString) ? globalThis.String(object.functionString) : undefined,
      operator: isSet(object.operator)
        ? matchingFunctionOperatorEnum_MatchingFunctionOperatorFromJSON(object.operator)
        : 0,
      leftOperands: globalThis.Array.isArray(object?.leftOperands)
        ? object.leftOperands.map((e: any) => Operand.fromJSON(e))
        : [],
      rightOperands: globalThis.Array.isArray(object?.rightOperands)
        ? object.rightOperands.map((e: any) => Operand.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MatchingFunction): unknown {
    const obj: any = {};
    if (message.functionString !== undefined) {
      obj.functionString = message.functionString;
    }
    if (message.operator !== 0) {
      obj.operator = matchingFunctionOperatorEnum_MatchingFunctionOperatorToJSON(message.operator);
    }
    if (message.leftOperands?.length) {
      obj.leftOperands = message.leftOperands.map((e) => Operand.toJSON(e));
    }
    if (message.rightOperands?.length) {
      obj.rightOperands = message.rightOperands.map((e) => Operand.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MatchingFunction>): MatchingFunction {
    return MatchingFunction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MatchingFunction>): MatchingFunction {
    const message = createBaseMatchingFunction();
    message.functionString = object.functionString ?? undefined;
    message.operator = object.operator ?? 0;
    message.leftOperands = object.leftOperands?.map((e) => Operand.fromPartial(e)) || [];
    message.rightOperands = object.rightOperands?.map((e) => Operand.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOperand(): Operand {
  return {
    constantOperand: undefined,
    feedAttributeOperand: undefined,
    functionOperand: undefined,
    requestContextOperand: undefined,
  };
}

export const Operand: MessageFns<Operand> = {
  encode(message: Operand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.constantOperand !== undefined) {
      Operand_ConstantOperand.encode(message.constantOperand, writer.uint32(10).fork()).join();
    }
    if (message.feedAttributeOperand !== undefined) {
      Operand_FeedAttributeOperand.encode(message.feedAttributeOperand, writer.uint32(18).fork()).join();
    }
    if (message.functionOperand !== undefined) {
      Operand_FunctionOperand.encode(message.functionOperand, writer.uint32(26).fork()).join();
    }
    if (message.requestContextOperand !== undefined) {
      Operand_RequestContextOperand.encode(message.requestContextOperand, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Operand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.constantOperand = Operand_ConstantOperand.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.feedAttributeOperand = Operand_FeedAttributeOperand.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.functionOperand = Operand_FunctionOperand.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestContextOperand = Operand_RequestContextOperand.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Operand {
    return {
      constantOperand: isSet(object.constantOperand)
        ? Operand_ConstantOperand.fromJSON(object.constantOperand)
        : undefined,
      feedAttributeOperand: isSet(object.feedAttributeOperand)
        ? Operand_FeedAttributeOperand.fromJSON(object.feedAttributeOperand)
        : undefined,
      functionOperand: isSet(object.functionOperand)
        ? Operand_FunctionOperand.fromJSON(object.functionOperand)
        : undefined,
      requestContextOperand: isSet(object.requestContextOperand)
        ? Operand_RequestContextOperand.fromJSON(object.requestContextOperand)
        : undefined,
    };
  },

  toJSON(message: Operand): unknown {
    const obj: any = {};
    if (message.constantOperand !== undefined) {
      obj.constantOperand = Operand_ConstantOperand.toJSON(message.constantOperand);
    }
    if (message.feedAttributeOperand !== undefined) {
      obj.feedAttributeOperand = Operand_FeedAttributeOperand.toJSON(message.feedAttributeOperand);
    }
    if (message.functionOperand !== undefined) {
      obj.functionOperand = Operand_FunctionOperand.toJSON(message.functionOperand);
    }
    if (message.requestContextOperand !== undefined) {
      obj.requestContextOperand = Operand_RequestContextOperand.toJSON(message.requestContextOperand);
    }
    return obj;
  },

  create(base?: DeepPartial<Operand>): Operand {
    return Operand.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Operand>): Operand {
    const message = createBaseOperand();
    message.constantOperand = (object.constantOperand !== undefined && object.constantOperand !== null)
      ? Operand_ConstantOperand.fromPartial(object.constantOperand)
      : undefined;
    message.feedAttributeOperand = (object.feedAttributeOperand !== undefined && object.feedAttributeOperand !== null)
      ? Operand_FeedAttributeOperand.fromPartial(object.feedAttributeOperand)
      : undefined;
    message.functionOperand = (object.functionOperand !== undefined && object.functionOperand !== null)
      ? Operand_FunctionOperand.fromPartial(object.functionOperand)
      : undefined;
    message.requestContextOperand =
      (object.requestContextOperand !== undefined && object.requestContextOperand !== null)
        ? Operand_RequestContextOperand.fromPartial(object.requestContextOperand)
        : undefined;
    return message;
  },
};

function createBaseOperand_ConstantOperand(): Operand_ConstantOperand {
  return { stringValue: undefined, longValue: undefined, booleanValue: undefined, doubleValue: undefined };
}

export const Operand_ConstantOperand: MessageFns<Operand_ConstantOperand> = {
  encode(message: Operand_ConstantOperand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stringValue !== undefined) {
      writer.uint32(42).string(message.stringValue);
    }
    if (message.longValue !== undefined) {
      writer.uint32(48).int64(message.longValue.toString());
    }
    if (message.booleanValue !== undefined) {
      writer.uint32(56).bool(message.booleanValue);
    }
    if (message.doubleValue !== undefined) {
      writer.uint32(65).double(message.doubleValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Operand_ConstantOperand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperand_ConstantOperand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 42) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.longValue = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.booleanValue = reader.bool();
          continue;
        case 8:
          if (tag !== 65) {
            break;
          }

          message.doubleValue = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Operand_ConstantOperand {
    return {
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : undefined,
      longValue: isSet(object.longValue) ? Long.fromValue(object.longValue) : undefined,
      booleanValue: isSet(object.booleanValue) ? globalThis.Boolean(object.booleanValue) : undefined,
      doubleValue: isSet(object.doubleValue) ? globalThis.Number(object.doubleValue) : undefined,
    };
  },

  toJSON(message: Operand_ConstantOperand): unknown {
    const obj: any = {};
    if (message.stringValue !== undefined) {
      obj.stringValue = message.stringValue;
    }
    if (message.longValue !== undefined) {
      obj.longValue = (message.longValue || Long.ZERO).toString();
    }
    if (message.booleanValue !== undefined) {
      obj.booleanValue = message.booleanValue;
    }
    if (message.doubleValue !== undefined) {
      obj.doubleValue = message.doubleValue;
    }
    return obj;
  },

  create(base?: DeepPartial<Operand_ConstantOperand>): Operand_ConstantOperand {
    return Operand_ConstantOperand.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Operand_ConstantOperand>): Operand_ConstantOperand {
    const message = createBaseOperand_ConstantOperand();
    message.stringValue = object.stringValue ?? undefined;
    message.longValue = (object.longValue !== undefined && object.longValue !== null)
      ? Long.fromValue(object.longValue)
      : undefined;
    message.booleanValue = object.booleanValue ?? undefined;
    message.doubleValue = object.doubleValue ?? undefined;
    return message;
  },
};

function createBaseOperand_FeedAttributeOperand(): Operand_FeedAttributeOperand {
  return { feedId: undefined, feedAttributeId: undefined };
}

export const Operand_FeedAttributeOperand: MessageFns<Operand_FeedAttributeOperand> = {
  encode(message: Operand_FeedAttributeOperand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.feedId !== undefined) {
      writer.uint32(24).int64(message.feedId.toString());
    }
    if (message.feedAttributeId !== undefined) {
      writer.uint32(32).int64(message.feedAttributeId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Operand_FeedAttributeOperand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperand_FeedAttributeOperand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }

          message.feedId = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.feedAttributeId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Operand_FeedAttributeOperand {
    return {
      feedId: isSet(object.feedId) ? Long.fromValue(object.feedId) : undefined,
      feedAttributeId: isSet(object.feedAttributeId) ? Long.fromValue(object.feedAttributeId) : undefined,
    };
  },

  toJSON(message: Operand_FeedAttributeOperand): unknown {
    const obj: any = {};
    if (message.feedId !== undefined) {
      obj.feedId = (message.feedId || Long.ZERO).toString();
    }
    if (message.feedAttributeId !== undefined) {
      obj.feedAttributeId = (message.feedAttributeId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Operand_FeedAttributeOperand>): Operand_FeedAttributeOperand {
    return Operand_FeedAttributeOperand.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Operand_FeedAttributeOperand>): Operand_FeedAttributeOperand {
    const message = createBaseOperand_FeedAttributeOperand();
    message.feedId = (object.feedId !== undefined && object.feedId !== null)
      ? Long.fromValue(object.feedId)
      : undefined;
    message.feedAttributeId = (object.feedAttributeId !== undefined && object.feedAttributeId !== null)
      ? Long.fromValue(object.feedAttributeId)
      : undefined;
    return message;
  },
};

function createBaseOperand_FunctionOperand(): Operand_FunctionOperand {
  return { matchingFunction: undefined };
}

export const Operand_FunctionOperand: MessageFns<Operand_FunctionOperand> = {
  encode(message: Operand_FunctionOperand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.matchingFunction !== undefined) {
      MatchingFunction.encode(message.matchingFunction, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Operand_FunctionOperand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperand_FunctionOperand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.matchingFunction = MatchingFunction.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Operand_FunctionOperand {
    return {
      matchingFunction: isSet(object.matchingFunction) ? MatchingFunction.fromJSON(object.matchingFunction) : undefined,
    };
  },

  toJSON(message: Operand_FunctionOperand): unknown {
    const obj: any = {};
    if (message.matchingFunction !== undefined) {
      obj.matchingFunction = MatchingFunction.toJSON(message.matchingFunction);
    }
    return obj;
  },

  create(base?: DeepPartial<Operand_FunctionOperand>): Operand_FunctionOperand {
    return Operand_FunctionOperand.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Operand_FunctionOperand>): Operand_FunctionOperand {
    const message = createBaseOperand_FunctionOperand();
    message.matchingFunction = (object.matchingFunction !== undefined && object.matchingFunction !== null)
      ? MatchingFunction.fromPartial(object.matchingFunction)
      : undefined;
    return message;
  },
};

function createBaseOperand_RequestContextOperand(): Operand_RequestContextOperand {
  return { contextType: 0 };
}

export const Operand_RequestContextOperand: MessageFns<Operand_RequestContextOperand> = {
  encode(message: Operand_RequestContextOperand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contextType !== 0) {
      writer.uint32(8).int32(message.contextType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Operand_RequestContextOperand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperand_RequestContextOperand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.contextType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Operand_RequestContextOperand {
    return {
      contextType: isSet(object.contextType)
        ? matchingFunctionContextTypeEnum_MatchingFunctionContextTypeFromJSON(object.contextType)
        : 0,
    };
  },

  toJSON(message: Operand_RequestContextOperand): unknown {
    const obj: any = {};
    if (message.contextType !== 0) {
      obj.contextType = matchingFunctionContextTypeEnum_MatchingFunctionContextTypeToJSON(message.contextType);
    }
    return obj;
  },

  create(base?: DeepPartial<Operand_RequestContextOperand>): Operand_RequestContextOperand {
    return Operand_RequestContextOperand.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Operand_RequestContextOperand>): Operand_RequestContextOperand {
    const message = createBaseOperand_RequestContextOperand();
    message.contextType = object.contextType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
