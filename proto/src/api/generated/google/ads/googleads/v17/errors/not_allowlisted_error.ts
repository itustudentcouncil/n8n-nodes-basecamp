// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/not_allowlisted_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible not allowlisted errors. */
export interface NotAllowlistedErrorEnum {
}

/** Enum describing possible not allowlisted errors. */
export enum NotAllowlistedErrorEnum_NotAllowlistedError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** CUSTOMER_NOT_ALLOWLISTED_FOR_THIS_FEATURE - Customer is not allowlisted for accessing this feature. */
  CUSTOMER_NOT_ALLOWLISTED_FOR_THIS_FEATURE = 2,
  UNRECOGNIZED = -1,
}

export function notAllowlistedErrorEnum_NotAllowlistedErrorFromJSON(
  object: any,
): NotAllowlistedErrorEnum_NotAllowlistedError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return NotAllowlistedErrorEnum_NotAllowlistedError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return NotAllowlistedErrorEnum_NotAllowlistedError.UNKNOWN;
    case 2:
    case "CUSTOMER_NOT_ALLOWLISTED_FOR_THIS_FEATURE":
      return NotAllowlistedErrorEnum_NotAllowlistedError.CUSTOMER_NOT_ALLOWLISTED_FOR_THIS_FEATURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NotAllowlistedErrorEnum_NotAllowlistedError.UNRECOGNIZED;
  }
}

export function notAllowlistedErrorEnum_NotAllowlistedErrorToJSON(
  object: NotAllowlistedErrorEnum_NotAllowlistedError,
): string {
  switch (object) {
    case NotAllowlistedErrorEnum_NotAllowlistedError.UNSPECIFIED:
      return "UNSPECIFIED";
    case NotAllowlistedErrorEnum_NotAllowlistedError.UNKNOWN:
      return "UNKNOWN";
    case NotAllowlistedErrorEnum_NotAllowlistedError.CUSTOMER_NOT_ALLOWLISTED_FOR_THIS_FEATURE:
      return "CUSTOMER_NOT_ALLOWLISTED_FOR_THIS_FEATURE";
    case NotAllowlistedErrorEnum_NotAllowlistedError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseNotAllowlistedErrorEnum(): NotAllowlistedErrorEnum {
  return {};
}

export const NotAllowlistedErrorEnum: MessageFns<NotAllowlistedErrorEnum> = {
  encode(_: NotAllowlistedErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotAllowlistedErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotAllowlistedErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NotAllowlistedErrorEnum {
    return {};
  },

  toJSON(_: NotAllowlistedErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<NotAllowlistedErrorEnum>): NotAllowlistedErrorEnum {
    return NotAllowlistedErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<NotAllowlistedErrorEnum>): NotAllowlistedErrorEnum {
    const message = createBaseNotAllowlistedErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
