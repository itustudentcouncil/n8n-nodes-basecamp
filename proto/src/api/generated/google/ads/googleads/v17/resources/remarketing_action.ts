// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/remarketing_action.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { TagSnippet } from "../common/tag_snippet.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/**
 * A remarketing action. A snippet of JavaScript code that will collect the
 * product id and the type of page people visited (product page, shopping cart
 * page, purchase page, general site visit) on an advertiser's website.
 */
export interface RemarketingAction {
  /**
   * Immutable. The resource name of the remarketing action.
   * Remarketing action resource names have the form:
   *
   * `customers/{customer_id}/remarketingActions/{remarketing_action_id}`
   */
  resourceName: string;
  /** Output only. Id of the remarketing action. */
  id?:
    | Long
    | undefined;
  /**
   * The name of the remarketing action.
   *
   * This field is required and should not be empty when creating new
   * remarketing actions.
   */
  name?:
    | string
    | undefined;
  /** Output only. The snippets used for tracking remarketing actions. */
  tagSnippets: TagSnippet[];
}

function createBaseRemarketingAction(): RemarketingAction {
  return { resourceName: "", id: undefined, name: undefined, tagSnippets: [] };
}

export const RemarketingAction: MessageFns<RemarketingAction> = {
  encode(message: RemarketingAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(40).int64(message.id.toString());
    }
    if (message.name !== undefined) {
      writer.uint32(50).string(message.name);
    }
    for (const v of message.tagSnippets) {
      TagSnippet.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemarketingAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemarketingAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tagSnippets.push(TagSnippet.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemarketingAction {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      tagSnippets: globalThis.Array.isArray(object?.tagSnippets)
        ? object.tagSnippets.map((e: any) => TagSnippet.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RemarketingAction): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.tagSnippets?.length) {
      obj.tagSnippets = message.tagSnippets.map((e) => TagSnippet.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RemarketingAction>): RemarketingAction {
    return RemarketingAction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemarketingAction>): RemarketingAction {
    const message = createBaseRemarketingAction();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.name = object.name ?? undefined;
    message.tagSnippets = object.tagSnippets?.map((e) => TagSnippet.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
