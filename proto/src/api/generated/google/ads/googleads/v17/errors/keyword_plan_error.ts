// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/keyword_plan_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/**
 * Container for enum describing possible errors from applying a keyword plan
 * resource (keyword plan, keyword plan campaign, keyword plan ad group or
 * keyword plan keyword) or KeywordPlanService RPC.
 */
export interface KeywordPlanErrorEnum {
}

/** Enum describing possible errors from applying a keyword plan. */
export enum KeywordPlanErrorEnum_KeywordPlanError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** BID_MULTIPLIER_OUT_OF_RANGE - The plan's bid multiplier value is outside the valid range. */
  BID_MULTIPLIER_OUT_OF_RANGE = 2,
  /** BID_TOO_HIGH - The plan's bid value is too high. */
  BID_TOO_HIGH = 3,
  /** BID_TOO_LOW - The plan's bid value is too low. */
  BID_TOO_LOW = 4,
  /** BID_TOO_MANY_FRACTIONAL_DIGITS - The plan's cpc bid is not a multiple of the minimum billable unit. */
  BID_TOO_MANY_FRACTIONAL_DIGITS = 5,
  /** DAILY_BUDGET_TOO_LOW - The plan's daily budget value is too low. */
  DAILY_BUDGET_TOO_LOW = 6,
  /** DAILY_BUDGET_TOO_MANY_FRACTIONAL_DIGITS - The plan's daily budget is not a multiple of the minimum billable unit. */
  DAILY_BUDGET_TOO_MANY_FRACTIONAL_DIGITS = 7,
  /** INVALID_VALUE - The input has an invalid value. */
  INVALID_VALUE = 8,
  /** KEYWORD_PLAN_HAS_NO_KEYWORDS - The plan has no keyword. */
  KEYWORD_PLAN_HAS_NO_KEYWORDS = 9,
  /**
   * KEYWORD_PLAN_NOT_ENABLED - The plan is not enabled and API cannot provide mutation, forecast or
   * stats.
   */
  KEYWORD_PLAN_NOT_ENABLED = 10,
  /** KEYWORD_PLAN_NOT_FOUND - The requested plan cannot be found for providing forecast or stats. */
  KEYWORD_PLAN_NOT_FOUND = 11,
  /** MISSING_BID - The plan is missing a cpc bid. */
  MISSING_BID = 13,
  /** MISSING_FORECAST_PERIOD - The plan is missing required forecast_period field. */
  MISSING_FORECAST_PERIOD = 14,
  /** INVALID_FORECAST_DATE_RANGE - The plan's forecast_period has invalid forecast date range. */
  INVALID_FORECAST_DATE_RANGE = 15,
  /** INVALID_NAME - The plan's name is invalid. */
  INVALID_NAME = 16,
  UNRECOGNIZED = -1,
}

export function keywordPlanErrorEnum_KeywordPlanErrorFromJSON(object: any): KeywordPlanErrorEnum_KeywordPlanError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return KeywordPlanErrorEnum_KeywordPlanError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return KeywordPlanErrorEnum_KeywordPlanError.UNKNOWN;
    case 2:
    case "BID_MULTIPLIER_OUT_OF_RANGE":
      return KeywordPlanErrorEnum_KeywordPlanError.BID_MULTIPLIER_OUT_OF_RANGE;
    case 3:
    case "BID_TOO_HIGH":
      return KeywordPlanErrorEnum_KeywordPlanError.BID_TOO_HIGH;
    case 4:
    case "BID_TOO_LOW":
      return KeywordPlanErrorEnum_KeywordPlanError.BID_TOO_LOW;
    case 5:
    case "BID_TOO_MANY_FRACTIONAL_DIGITS":
      return KeywordPlanErrorEnum_KeywordPlanError.BID_TOO_MANY_FRACTIONAL_DIGITS;
    case 6:
    case "DAILY_BUDGET_TOO_LOW":
      return KeywordPlanErrorEnum_KeywordPlanError.DAILY_BUDGET_TOO_LOW;
    case 7:
    case "DAILY_BUDGET_TOO_MANY_FRACTIONAL_DIGITS":
      return KeywordPlanErrorEnum_KeywordPlanError.DAILY_BUDGET_TOO_MANY_FRACTIONAL_DIGITS;
    case 8:
    case "INVALID_VALUE":
      return KeywordPlanErrorEnum_KeywordPlanError.INVALID_VALUE;
    case 9:
    case "KEYWORD_PLAN_HAS_NO_KEYWORDS":
      return KeywordPlanErrorEnum_KeywordPlanError.KEYWORD_PLAN_HAS_NO_KEYWORDS;
    case 10:
    case "KEYWORD_PLAN_NOT_ENABLED":
      return KeywordPlanErrorEnum_KeywordPlanError.KEYWORD_PLAN_NOT_ENABLED;
    case 11:
    case "KEYWORD_PLAN_NOT_FOUND":
      return KeywordPlanErrorEnum_KeywordPlanError.KEYWORD_PLAN_NOT_FOUND;
    case 13:
    case "MISSING_BID":
      return KeywordPlanErrorEnum_KeywordPlanError.MISSING_BID;
    case 14:
    case "MISSING_FORECAST_PERIOD":
      return KeywordPlanErrorEnum_KeywordPlanError.MISSING_FORECAST_PERIOD;
    case 15:
    case "INVALID_FORECAST_DATE_RANGE":
      return KeywordPlanErrorEnum_KeywordPlanError.INVALID_FORECAST_DATE_RANGE;
    case 16:
    case "INVALID_NAME":
      return KeywordPlanErrorEnum_KeywordPlanError.INVALID_NAME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return KeywordPlanErrorEnum_KeywordPlanError.UNRECOGNIZED;
  }
}

export function keywordPlanErrorEnum_KeywordPlanErrorToJSON(object: KeywordPlanErrorEnum_KeywordPlanError): string {
  switch (object) {
    case KeywordPlanErrorEnum_KeywordPlanError.UNSPECIFIED:
      return "UNSPECIFIED";
    case KeywordPlanErrorEnum_KeywordPlanError.UNKNOWN:
      return "UNKNOWN";
    case KeywordPlanErrorEnum_KeywordPlanError.BID_MULTIPLIER_OUT_OF_RANGE:
      return "BID_MULTIPLIER_OUT_OF_RANGE";
    case KeywordPlanErrorEnum_KeywordPlanError.BID_TOO_HIGH:
      return "BID_TOO_HIGH";
    case KeywordPlanErrorEnum_KeywordPlanError.BID_TOO_LOW:
      return "BID_TOO_LOW";
    case KeywordPlanErrorEnum_KeywordPlanError.BID_TOO_MANY_FRACTIONAL_DIGITS:
      return "BID_TOO_MANY_FRACTIONAL_DIGITS";
    case KeywordPlanErrorEnum_KeywordPlanError.DAILY_BUDGET_TOO_LOW:
      return "DAILY_BUDGET_TOO_LOW";
    case KeywordPlanErrorEnum_KeywordPlanError.DAILY_BUDGET_TOO_MANY_FRACTIONAL_DIGITS:
      return "DAILY_BUDGET_TOO_MANY_FRACTIONAL_DIGITS";
    case KeywordPlanErrorEnum_KeywordPlanError.INVALID_VALUE:
      return "INVALID_VALUE";
    case KeywordPlanErrorEnum_KeywordPlanError.KEYWORD_PLAN_HAS_NO_KEYWORDS:
      return "KEYWORD_PLAN_HAS_NO_KEYWORDS";
    case KeywordPlanErrorEnum_KeywordPlanError.KEYWORD_PLAN_NOT_ENABLED:
      return "KEYWORD_PLAN_NOT_ENABLED";
    case KeywordPlanErrorEnum_KeywordPlanError.KEYWORD_PLAN_NOT_FOUND:
      return "KEYWORD_PLAN_NOT_FOUND";
    case KeywordPlanErrorEnum_KeywordPlanError.MISSING_BID:
      return "MISSING_BID";
    case KeywordPlanErrorEnum_KeywordPlanError.MISSING_FORECAST_PERIOD:
      return "MISSING_FORECAST_PERIOD";
    case KeywordPlanErrorEnum_KeywordPlanError.INVALID_FORECAST_DATE_RANGE:
      return "INVALID_FORECAST_DATE_RANGE";
    case KeywordPlanErrorEnum_KeywordPlanError.INVALID_NAME:
      return "INVALID_NAME";
    case KeywordPlanErrorEnum_KeywordPlanError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseKeywordPlanErrorEnum(): KeywordPlanErrorEnum {
  return {};
}

export const KeywordPlanErrorEnum: MessageFns<KeywordPlanErrorEnum> = {
  encode(_: KeywordPlanErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeywordPlanErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeywordPlanErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): KeywordPlanErrorEnum {
    return {};
  },

  toJSON(_: KeywordPlanErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<KeywordPlanErrorEnum>): KeywordPlanErrorEnum {
    return KeywordPlanErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<KeywordPlanErrorEnum>): KeywordPlanErrorEnum {
    const message = createBaseKeywordPlanErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
