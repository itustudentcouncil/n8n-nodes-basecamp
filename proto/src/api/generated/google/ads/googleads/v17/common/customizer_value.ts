// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/common/customizer_value.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  CustomizerAttributeTypeEnum_CustomizerAttributeType,
  customizerAttributeTypeEnum_CustomizerAttributeTypeFromJSON,
  customizerAttributeTypeEnum_CustomizerAttributeTypeToJSON,
} from "../enums/customizer_attribute_type.js";

export const protobufPackage = "google.ads.googleads.v17.common";

/**
 * A customizer value that is referenced in customizer linkage entities
 * like CustomerCustomizer, CampaignCustomizer, etc.
 */
export interface CustomizerValue {
  /**
   * Required. The data type for the customizer value. It must match the
   * attribute type. The string_value content must match the constraints
   * associated with the type.
   */
  type: CustomizerAttributeTypeEnum_CustomizerAttributeType;
  /**
   * Required. Value to insert in creative text. Customizer values of all types
   * are stored as string to make formatting unambiguous.
   */
  stringValue: string;
}

function createBaseCustomizerValue(): CustomizerValue {
  return { type: 0, stringValue: "" };
}

export const CustomizerValue: MessageFns<CustomizerValue> = {
  encode(message: CustomizerValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.stringValue !== "") {
      writer.uint32(18).string(message.stringValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomizerValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomizerValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stringValue = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomizerValue {
    return {
      type: isSet(object.type) ? customizerAttributeTypeEnum_CustomizerAttributeTypeFromJSON(object.type) : 0,
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : "",
    };
  },

  toJSON(message: CustomizerValue): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = customizerAttributeTypeEnum_CustomizerAttributeTypeToJSON(message.type);
    }
    if (message.stringValue !== "") {
      obj.stringValue = message.stringValue;
    }
    return obj;
  },

  create(base?: DeepPartial<CustomizerValue>): CustomizerValue {
    return CustomizerValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomizerValue>): CustomizerValue {
    const message = createBaseCustomizerValue();
    message.type = object.type ?? 0;
    message.stringValue = object.stringValue ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
