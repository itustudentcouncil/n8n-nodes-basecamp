// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/date_range_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible date range errors. */
export interface DateRangeErrorEnum {
}

/** Enum describing possible date range errors. */
export enum DateRangeErrorEnum_DateRangeError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** INVALID_DATE - Invalid date. */
  INVALID_DATE = 2,
  /** START_DATE_AFTER_END_DATE - The start date was after the end date. */
  START_DATE_AFTER_END_DATE = 3,
  /** CANNOT_SET_DATE_TO_PAST - Cannot set date to past time */
  CANNOT_SET_DATE_TO_PAST = 4,
  /** AFTER_MAXIMUM_ALLOWABLE_DATE - A date was used that is past the system "last" date. */
  AFTER_MAXIMUM_ALLOWABLE_DATE = 5,
  /** CANNOT_MODIFY_START_DATE_IF_ALREADY_STARTED - Trying to change start date on a resource that has started. */
  CANNOT_MODIFY_START_DATE_IF_ALREADY_STARTED = 6,
  UNRECOGNIZED = -1,
}

export function dateRangeErrorEnum_DateRangeErrorFromJSON(object: any): DateRangeErrorEnum_DateRangeError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return DateRangeErrorEnum_DateRangeError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return DateRangeErrorEnum_DateRangeError.UNKNOWN;
    case 2:
    case "INVALID_DATE":
      return DateRangeErrorEnum_DateRangeError.INVALID_DATE;
    case 3:
    case "START_DATE_AFTER_END_DATE":
      return DateRangeErrorEnum_DateRangeError.START_DATE_AFTER_END_DATE;
    case 4:
    case "CANNOT_SET_DATE_TO_PAST":
      return DateRangeErrorEnum_DateRangeError.CANNOT_SET_DATE_TO_PAST;
    case 5:
    case "AFTER_MAXIMUM_ALLOWABLE_DATE":
      return DateRangeErrorEnum_DateRangeError.AFTER_MAXIMUM_ALLOWABLE_DATE;
    case 6:
    case "CANNOT_MODIFY_START_DATE_IF_ALREADY_STARTED":
      return DateRangeErrorEnum_DateRangeError.CANNOT_MODIFY_START_DATE_IF_ALREADY_STARTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DateRangeErrorEnum_DateRangeError.UNRECOGNIZED;
  }
}

export function dateRangeErrorEnum_DateRangeErrorToJSON(object: DateRangeErrorEnum_DateRangeError): string {
  switch (object) {
    case DateRangeErrorEnum_DateRangeError.UNSPECIFIED:
      return "UNSPECIFIED";
    case DateRangeErrorEnum_DateRangeError.UNKNOWN:
      return "UNKNOWN";
    case DateRangeErrorEnum_DateRangeError.INVALID_DATE:
      return "INVALID_DATE";
    case DateRangeErrorEnum_DateRangeError.START_DATE_AFTER_END_DATE:
      return "START_DATE_AFTER_END_DATE";
    case DateRangeErrorEnum_DateRangeError.CANNOT_SET_DATE_TO_PAST:
      return "CANNOT_SET_DATE_TO_PAST";
    case DateRangeErrorEnum_DateRangeError.AFTER_MAXIMUM_ALLOWABLE_DATE:
      return "AFTER_MAXIMUM_ALLOWABLE_DATE";
    case DateRangeErrorEnum_DateRangeError.CANNOT_MODIFY_START_DATE_IF_ALREADY_STARTED:
      return "CANNOT_MODIFY_START_DATE_IF_ALREADY_STARTED";
    case DateRangeErrorEnum_DateRangeError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDateRangeErrorEnum(): DateRangeErrorEnum {
  return {};
}

export const DateRangeErrorEnum: MessageFns<DateRangeErrorEnum> = {
  encode(_: DateRangeErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DateRangeErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDateRangeErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DateRangeErrorEnum {
    return {};
  },

  toJSON(_: DateRangeErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DateRangeErrorEnum>): DateRangeErrorEnum {
    return DateRangeErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DateRangeErrorEnum>): DateRangeErrorEnum {
    const message = createBaseDateRangeErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
