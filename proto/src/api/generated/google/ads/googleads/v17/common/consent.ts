// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/common/consent.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  ConsentStatusEnum_ConsentStatus,
  consentStatusEnum_ConsentStatusFromJSON,
  consentStatusEnum_ConsentStatusToJSON,
} from "../enums/consent_status.js";

export const protobufPackage = "google.ads.googleads.v17.common";

/** Consent */
export interface Consent {
  /** This represents consent for ad user data. */
  adUserData: ConsentStatusEnum_ConsentStatus;
  /**
   * This represents consent for ad personalization.
   * This can only be set for OfflineUserDataJobService and UserDataService.
   */
  adPersonalization: ConsentStatusEnum_ConsentStatus;
}

function createBaseConsent(): Consent {
  return { adUserData: 0, adPersonalization: 0 };
}

export const Consent: MessageFns<Consent> = {
  encode(message: Consent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.adUserData !== 0) {
      writer.uint32(8).int32(message.adUserData);
    }
    if (message.adPersonalization !== 0) {
      writer.uint32(16).int32(message.adPersonalization);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Consent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.adUserData = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.adPersonalization = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Consent {
    return {
      adUserData: isSet(object.adUserData) ? consentStatusEnum_ConsentStatusFromJSON(object.adUserData) : 0,
      adPersonalization: isSet(object.adPersonalization)
        ? consentStatusEnum_ConsentStatusFromJSON(object.adPersonalization)
        : 0,
    };
  },

  toJSON(message: Consent): unknown {
    const obj: any = {};
    if (message.adUserData !== 0) {
      obj.adUserData = consentStatusEnum_ConsentStatusToJSON(message.adUserData);
    }
    if (message.adPersonalization !== 0) {
      obj.adPersonalization = consentStatusEnum_ConsentStatusToJSON(message.adPersonalization);
    }
    return obj;
  },

  create(base?: DeepPartial<Consent>): Consent {
    return Consent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Consent>): Consent {
    const message = createBaseConsent();
    message.adUserData = object.adUserData ?? 0;
    message.adPersonalization = object.adPersonalization ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
