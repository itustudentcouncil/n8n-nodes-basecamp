// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/hotel_reconciliation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  HotelReconciliationStatusEnum_HotelReconciliationStatus,
  hotelReconciliationStatusEnum_HotelReconciliationStatusFromJSON,
  hotelReconciliationStatusEnum_HotelReconciliationStatusToJSON,
} from "../enums/hotel_reconciliation_status.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/**
 * A hotel reconciliation. It contains conversion information from Hotel
 * bookings to reconcile with advertiser records. These rows may be updated
 * or canceled before billing through Bulk Uploads.
 */
export interface HotelReconciliation {
  /**
   * Immutable. The resource name of the hotel reconciliation.
   * Hotel reconciliation resource names have the form:
   *
   * `customers/{customer_id}/hotelReconciliations/{commission_id}`
   */
  resourceName: string;
  /**
   * Required. Output only. The commission ID is Google's ID for this booking.
   * Every booking event is assigned a Commission ID to help you match it to a
   * guest stay.
   */
  commissionId: string;
  /**
   * Output only. The order ID is the identifier for this booking as provided in
   * the 'transaction_id' parameter of the conversion tracking tag.
   */
  orderId: string;
  /**
   * Output only. The resource name for the Campaign associated with the
   * conversion.
   */
  campaign: string;
  /**
   * Output only. Identifier for the Hotel Center account which provides the
   * rates for the Hotel campaign.
   */
  hotelCenterId: Long;
  /**
   * Output only. Unique identifier for the booked property, as provided in the
   * Hotel Center feed. The hotel ID comes from the 'ID' parameter of the
   * conversion tracking tag.
   */
  hotelId: string;
  /**
   * Output only. Check-in date recorded when the booking is made. If the
   * check-in date is modified at reconciliation, the revised date will then
   * take the place of the original date in this column. Format is YYYY-MM-DD.
   */
  checkInDate: string;
  /**
   * Output only. Check-out date recorded when the booking is made. If the
   * check-in date is modified at reconciliation, the revised date will then
   * take the place of the original date in this column. Format is YYYY-MM-DD.
   */
  checkOutDate: string;
  /**
   * Required. Output only. Reconciled value is the final value of a booking as
   * paid by the guest. If original booking value changes for any reason, such
   * as itinerary changes or room upsells, the reconciled value should be the
   * full final amount collected. If a booking is canceled, the reconciled value
   * should include the value of any cancellation fees or non-refundable nights
   * charged. Value is in millionths of the base unit currency. For example,
   * $12.35 would be represented as 12350000. Currency unit is in the default
   * customer currency.
   */
  reconciledValueMicros: Long;
  /**
   * Output only. Whether a given booking has been billed. Once billed, a
   * booking can't be modified.
   */
  billed: boolean;
  /**
   * Required. Output only. Current status of a booking with regards to
   * reconciliation and billing. Bookings should be reconciled within 45 days
   * after the check-out date. Any booking not reconciled within 45 days will be
   * billed at its original value.
   */
  status: HotelReconciliationStatusEnum_HotelReconciliationStatus;
}

function createBaseHotelReconciliation(): HotelReconciliation {
  return {
    resourceName: "",
    commissionId: "",
    orderId: "",
    campaign: "",
    hotelCenterId: Long.ZERO,
    hotelId: "",
    checkInDate: "",
    checkOutDate: "",
    reconciledValueMicros: Long.ZERO,
    billed: false,
    status: 0,
  };
}

export const HotelReconciliation: MessageFns<HotelReconciliation> = {
  encode(message: HotelReconciliation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.commissionId !== "") {
      writer.uint32(18).string(message.commissionId);
    }
    if (message.orderId !== "") {
      writer.uint32(26).string(message.orderId);
    }
    if (message.campaign !== "") {
      writer.uint32(90).string(message.campaign);
    }
    if (!message.hotelCenterId.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.hotelCenterId.toString());
    }
    if (message.hotelId !== "") {
      writer.uint32(42).string(message.hotelId);
    }
    if (message.checkInDate !== "") {
      writer.uint32(50).string(message.checkInDate);
    }
    if (message.checkOutDate !== "") {
      writer.uint32(58).string(message.checkOutDate);
    }
    if (!message.reconciledValueMicros.equals(Long.ZERO)) {
      writer.uint32(64).int64(message.reconciledValueMicros.toString());
    }
    if (message.billed !== false) {
      writer.uint32(72).bool(message.billed);
    }
    if (message.status !== 0) {
      writer.uint32(80).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HotelReconciliation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHotelReconciliation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.commissionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.orderId = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.campaign = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.hotelCenterId = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.hotelId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.checkInDate = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.checkOutDate = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.reconciledValueMicros = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.billed = reader.bool();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HotelReconciliation {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      commissionId: isSet(object.commissionId) ? globalThis.String(object.commissionId) : "",
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      campaign: isSet(object.campaign) ? globalThis.String(object.campaign) : "",
      hotelCenterId: isSet(object.hotelCenterId) ? Long.fromValue(object.hotelCenterId) : Long.ZERO,
      hotelId: isSet(object.hotelId) ? globalThis.String(object.hotelId) : "",
      checkInDate: isSet(object.checkInDate) ? globalThis.String(object.checkInDate) : "",
      checkOutDate: isSet(object.checkOutDate) ? globalThis.String(object.checkOutDate) : "",
      reconciledValueMicros: isSet(object.reconciledValueMicros)
        ? Long.fromValue(object.reconciledValueMicros)
        : Long.ZERO,
      billed: isSet(object.billed) ? globalThis.Boolean(object.billed) : false,
      status: isSet(object.status) ? hotelReconciliationStatusEnum_HotelReconciliationStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: HotelReconciliation): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.commissionId !== "") {
      obj.commissionId = message.commissionId;
    }
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.campaign !== "") {
      obj.campaign = message.campaign;
    }
    if (!message.hotelCenterId.equals(Long.ZERO)) {
      obj.hotelCenterId = (message.hotelCenterId || Long.ZERO).toString();
    }
    if (message.hotelId !== "") {
      obj.hotelId = message.hotelId;
    }
    if (message.checkInDate !== "") {
      obj.checkInDate = message.checkInDate;
    }
    if (message.checkOutDate !== "") {
      obj.checkOutDate = message.checkOutDate;
    }
    if (!message.reconciledValueMicros.equals(Long.ZERO)) {
      obj.reconciledValueMicros = (message.reconciledValueMicros || Long.ZERO).toString();
    }
    if (message.billed !== false) {
      obj.billed = message.billed;
    }
    if (message.status !== 0) {
      obj.status = hotelReconciliationStatusEnum_HotelReconciliationStatusToJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<HotelReconciliation>): HotelReconciliation {
    return HotelReconciliation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HotelReconciliation>): HotelReconciliation {
    const message = createBaseHotelReconciliation();
    message.resourceName = object.resourceName ?? "";
    message.commissionId = object.commissionId ?? "";
    message.orderId = object.orderId ?? "";
    message.campaign = object.campaign ?? "";
    message.hotelCenterId = (object.hotelCenterId !== undefined && object.hotelCenterId !== null)
      ? Long.fromValue(object.hotelCenterId)
      : Long.ZERO;
    message.hotelId = object.hotelId ?? "";
    message.checkInDate = object.checkInDate ?? "";
    message.checkOutDate = object.checkOutDate ?? "";
    message.reconciledValueMicros =
      (object.reconciledValueMicros !== undefined && object.reconciledValueMicros !== null)
        ? Long.fromValue(object.reconciledValueMicros)
        : Long.ZERO;
    message.billed = object.billed ?? false;
    message.status = object.status ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
