// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/campaign_aggregate_asset_view.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  AssetFieldTypeEnum_AssetFieldType,
  assetFieldTypeEnum_AssetFieldTypeFromJSON,
  assetFieldTypeEnum_AssetFieldTypeToJSON,
} from "../enums/asset_field_type.js";
import {
  AssetSourceEnum_AssetSource,
  assetSourceEnum_AssetSourceFromJSON,
  assetSourceEnum_AssetSourceToJSON,
} from "../enums/asset_source.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/**
 * A campaign-level aggregate asset view that shows where the asset is linked,
 * performamce of the asset and stats.
 */
export interface CampaignAggregateAssetView {
  /**
   * Output only. The resource name of the campaign aggregate asset view.
   * Campaign aggregate asset view resource names have the form:
   *
   * `customers/{customer_id}/campaignAggregateAssetViews/{Campaign.campaign_id}~{Asset.asset_id}~{AssetLinkSource.asset_link_source}~{AssetFieldType.field_type}`
   */
  resourceName: string;
  /** Output only. Campaign in which the asset served. */
  campaign?:
    | string
    | undefined;
  /** Output only. The ID of the asset. */
  asset?:
    | string
    | undefined;
  /** Output only. Source of the asset link. */
  assetSource?:
    | AssetSourceEnum_AssetSource
    | undefined;
  /** Output only. FieldType of the asset. */
  fieldType?: AssetFieldTypeEnum_AssetFieldType | undefined;
}

function createBaseCampaignAggregateAssetView(): CampaignAggregateAssetView {
  return { resourceName: "", campaign: undefined, asset: undefined, assetSource: undefined, fieldType: undefined };
}

export const CampaignAggregateAssetView: MessageFns<CampaignAggregateAssetView> = {
  encode(message: CampaignAggregateAssetView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.campaign !== undefined) {
      writer.uint32(18).string(message.campaign);
    }
    if (message.asset !== undefined) {
      writer.uint32(26).string(message.asset);
    }
    if (message.assetSource !== undefined) {
      writer.uint32(32).int32(message.assetSource);
    }
    if (message.fieldType !== undefined) {
      writer.uint32(40).int32(message.fieldType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignAggregateAssetView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignAggregateAssetView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.campaign = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.assetSource = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.fieldType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CampaignAggregateAssetView {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      campaign: isSet(object.campaign) ? globalThis.String(object.campaign) : undefined,
      asset: isSet(object.asset) ? globalThis.String(object.asset) : undefined,
      assetSource: isSet(object.assetSource) ? assetSourceEnum_AssetSourceFromJSON(object.assetSource) : undefined,
      fieldType: isSet(object.fieldType) ? assetFieldTypeEnum_AssetFieldTypeFromJSON(object.fieldType) : undefined,
    };
  },

  toJSON(message: CampaignAggregateAssetView): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.campaign !== undefined) {
      obj.campaign = message.campaign;
    }
    if (message.asset !== undefined) {
      obj.asset = message.asset;
    }
    if (message.assetSource !== undefined) {
      obj.assetSource = assetSourceEnum_AssetSourceToJSON(message.assetSource);
    }
    if (message.fieldType !== undefined) {
      obj.fieldType = assetFieldTypeEnum_AssetFieldTypeToJSON(message.fieldType);
    }
    return obj;
  },

  create(base?: DeepPartial<CampaignAggregateAssetView>): CampaignAggregateAssetView {
    return CampaignAggregateAssetView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CampaignAggregateAssetView>): CampaignAggregateAssetView {
    const message = createBaseCampaignAggregateAssetView();
    message.resourceName = object.resourceName ?? "";
    message.campaign = object.campaign ?? undefined;
    message.asset = object.asset ?? undefined;
    message.assetSource = object.assetSource ?? undefined;
    message.fieldType = object.fieldType ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
