// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/enums/user_list_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.enums";

/** The user list types. */
export interface UserListTypeEnum {
}

/** Enum containing possible user list types. */
export enum UserListTypeEnum_UserListType {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /** REMARKETING - UserList represented as a collection of conversion types. */
  REMARKETING = 2,
  /** LOGICAL - UserList represented as a combination of other user lists/interests. */
  LOGICAL = 3,
  /** EXTERNAL_REMARKETING - UserList created in the Google Ad Manager platform. */
  EXTERNAL_REMARKETING = 4,
  /** RULE_BASED - UserList associated with a rule. */
  RULE_BASED = 5,
  /** SIMILAR - UserList with users similar to users of another UserList. */
  SIMILAR = 6,
  /**
   * CRM_BASED - UserList of first-party CRM data provided by advertiser in the form of
   * emails or other formats.
   */
  CRM_BASED = 7,
  /**
   * LOOKALIKE - LookalikeUserlist, composed of users similar to those
   * of a configurable seed (set of UserLists)
   */
  LOOKALIKE = 9,
  UNRECOGNIZED = -1,
}

export function userListTypeEnum_UserListTypeFromJSON(object: any): UserListTypeEnum_UserListType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return UserListTypeEnum_UserListType.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return UserListTypeEnum_UserListType.UNKNOWN;
    case 2:
    case "REMARKETING":
      return UserListTypeEnum_UserListType.REMARKETING;
    case 3:
    case "LOGICAL":
      return UserListTypeEnum_UserListType.LOGICAL;
    case 4:
    case "EXTERNAL_REMARKETING":
      return UserListTypeEnum_UserListType.EXTERNAL_REMARKETING;
    case 5:
    case "RULE_BASED":
      return UserListTypeEnum_UserListType.RULE_BASED;
    case 6:
    case "SIMILAR":
      return UserListTypeEnum_UserListType.SIMILAR;
    case 7:
    case "CRM_BASED":
      return UserListTypeEnum_UserListType.CRM_BASED;
    case 9:
    case "LOOKALIKE":
      return UserListTypeEnum_UserListType.LOOKALIKE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserListTypeEnum_UserListType.UNRECOGNIZED;
  }
}

export function userListTypeEnum_UserListTypeToJSON(object: UserListTypeEnum_UserListType): string {
  switch (object) {
    case UserListTypeEnum_UserListType.UNSPECIFIED:
      return "UNSPECIFIED";
    case UserListTypeEnum_UserListType.UNKNOWN:
      return "UNKNOWN";
    case UserListTypeEnum_UserListType.REMARKETING:
      return "REMARKETING";
    case UserListTypeEnum_UserListType.LOGICAL:
      return "LOGICAL";
    case UserListTypeEnum_UserListType.EXTERNAL_REMARKETING:
      return "EXTERNAL_REMARKETING";
    case UserListTypeEnum_UserListType.RULE_BASED:
      return "RULE_BASED";
    case UserListTypeEnum_UserListType.SIMILAR:
      return "SIMILAR";
    case UserListTypeEnum_UserListType.CRM_BASED:
      return "CRM_BASED";
    case UserListTypeEnum_UserListType.LOOKALIKE:
      return "LOOKALIKE";
    case UserListTypeEnum_UserListType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseUserListTypeEnum(): UserListTypeEnum {
  return {};
}

export const UserListTypeEnum: MessageFns<UserListTypeEnum> = {
  encode(_: UserListTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserListTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserListTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UserListTypeEnum {
    return {};
  },

  toJSON(_: UserListTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UserListTypeEnum>): UserListTypeEnum {
    return UserListTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UserListTypeEnum>): UserListTypeEnum {
    const message = createBaseUserListTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
