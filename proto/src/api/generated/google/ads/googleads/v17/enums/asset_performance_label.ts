// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/enums/asset_performance_label.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.enums";

/** Container for enum describing the performance label of an asset. */
export interface AssetPerformanceLabelEnum {
}

/**
 * Enum describing the possible performance labels of an asset, usually
 * computed in the context of a linkage.
 */
export enum AssetPerformanceLabelEnum_AssetPerformanceLabel {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /**
   * PENDING - This asset does not yet have any performance informantion. This may be
   * because it is still under review.
   */
  PENDING = 2,
  /**
   * LEARNING - The asset has started getting impressions but the stats are not
   * statistically significant enough to get an asset performance label.
   */
  LEARNING = 3,
  /** LOW - Worst performing assets. */
  LOW = 4,
  /** GOOD - Good performing assets. */
  GOOD = 5,
  /** BEST - Best performing assets. */
  BEST = 6,
  UNRECOGNIZED = -1,
}

export function assetPerformanceLabelEnum_AssetPerformanceLabelFromJSON(
  object: any,
): AssetPerformanceLabelEnum_AssetPerformanceLabel {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return AssetPerformanceLabelEnum_AssetPerformanceLabel.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return AssetPerformanceLabelEnum_AssetPerformanceLabel.UNKNOWN;
    case 2:
    case "PENDING":
      return AssetPerformanceLabelEnum_AssetPerformanceLabel.PENDING;
    case 3:
    case "LEARNING":
      return AssetPerformanceLabelEnum_AssetPerformanceLabel.LEARNING;
    case 4:
    case "LOW":
      return AssetPerformanceLabelEnum_AssetPerformanceLabel.LOW;
    case 5:
    case "GOOD":
      return AssetPerformanceLabelEnum_AssetPerformanceLabel.GOOD;
    case 6:
    case "BEST":
      return AssetPerformanceLabelEnum_AssetPerformanceLabel.BEST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AssetPerformanceLabelEnum_AssetPerformanceLabel.UNRECOGNIZED;
  }
}

export function assetPerformanceLabelEnum_AssetPerformanceLabelToJSON(
  object: AssetPerformanceLabelEnum_AssetPerformanceLabel,
): string {
  switch (object) {
    case AssetPerformanceLabelEnum_AssetPerformanceLabel.UNSPECIFIED:
      return "UNSPECIFIED";
    case AssetPerformanceLabelEnum_AssetPerformanceLabel.UNKNOWN:
      return "UNKNOWN";
    case AssetPerformanceLabelEnum_AssetPerformanceLabel.PENDING:
      return "PENDING";
    case AssetPerformanceLabelEnum_AssetPerformanceLabel.LEARNING:
      return "LEARNING";
    case AssetPerformanceLabelEnum_AssetPerformanceLabel.LOW:
      return "LOW";
    case AssetPerformanceLabelEnum_AssetPerformanceLabel.GOOD:
      return "GOOD";
    case AssetPerformanceLabelEnum_AssetPerformanceLabel.BEST:
      return "BEST";
    case AssetPerformanceLabelEnum_AssetPerformanceLabel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAssetPerformanceLabelEnum(): AssetPerformanceLabelEnum {
  return {};
}

export const AssetPerformanceLabelEnum: MessageFns<AssetPerformanceLabelEnum> = {
  encode(_: AssetPerformanceLabelEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetPerformanceLabelEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetPerformanceLabelEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AssetPerformanceLabelEnum {
    return {};
  },

  toJSON(_: AssetPerformanceLabelEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AssetPerformanceLabelEnum>): AssetPerformanceLabelEnum {
    return AssetPerformanceLabelEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AssetPerformanceLabelEnum>): AssetPerformanceLabelEnum {
    const message = createBaseAssetPerformanceLabelEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
