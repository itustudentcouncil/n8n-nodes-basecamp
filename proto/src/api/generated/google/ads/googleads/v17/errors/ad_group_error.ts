// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/ad_group_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible ad group errors. */
export interface AdGroupErrorEnum {
}

/** Enum describing possible ad group errors. */
export enum AdGroupErrorEnum_AdGroupError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** DUPLICATE_ADGROUP_NAME - AdGroup with the same name already exists for the campaign. */
  DUPLICATE_ADGROUP_NAME = 2,
  /** INVALID_ADGROUP_NAME - AdGroup name is not valid. */
  INVALID_ADGROUP_NAME = 3,
  /**
   * ADVERTISER_NOT_ON_CONTENT_NETWORK - Advertiser is not allowed to target sites or set site bids that are not
   * on the Google Search Network.
   */
  ADVERTISER_NOT_ON_CONTENT_NETWORK = 5,
  /** BID_TOO_BIG - Bid amount is too big. */
  BID_TOO_BIG = 6,
  /** BID_TYPE_AND_BIDDING_STRATEGY_MISMATCH - AdGroup bid does not match the campaign's bidding strategy. */
  BID_TYPE_AND_BIDDING_STRATEGY_MISMATCH = 7,
  /** MISSING_ADGROUP_NAME - AdGroup name is required for Add. */
  MISSING_ADGROUP_NAME = 8,
  /** ADGROUP_LABEL_DOES_NOT_EXIST - No link found between the ad group and the label. */
  ADGROUP_LABEL_DOES_NOT_EXIST = 9,
  /** ADGROUP_LABEL_ALREADY_EXISTS - The label has already been attached to the ad group. */
  ADGROUP_LABEL_ALREADY_EXISTS = 10,
  /** INVALID_CONTENT_BID_CRITERION_TYPE_GROUP - The CriterionTypeGroup is not supported for the content bid dimension. */
  INVALID_CONTENT_BID_CRITERION_TYPE_GROUP = 11,
  /** AD_GROUP_TYPE_NOT_VALID_FOR_ADVERTISING_CHANNEL_TYPE - The ad group type is not compatible with the campaign channel type. */
  AD_GROUP_TYPE_NOT_VALID_FOR_ADVERTISING_CHANNEL_TYPE = 12,
  /**
   * ADGROUP_TYPE_NOT_SUPPORTED_FOR_CAMPAIGN_SALES_COUNTRY - The ad group type is not supported in the country of sale of the
   * campaign.
   */
  ADGROUP_TYPE_NOT_SUPPORTED_FOR_CAMPAIGN_SALES_COUNTRY = 13,
  /**
   * CANNOT_ADD_ADGROUP_OF_TYPE_DSA_TO_CAMPAIGN_WITHOUT_DSA_SETTING - Ad groups of AdGroupType.SEARCH_DYNAMIC_ADS can only be added to
   * campaigns that have DynamicSearchAdsSetting attached.
   */
  CANNOT_ADD_ADGROUP_OF_TYPE_DSA_TO_CAMPAIGN_WITHOUT_DSA_SETTING = 14,
  /**
   * PROMOTED_HOTEL_AD_GROUPS_NOT_AVAILABLE_FOR_CUSTOMER - Promoted hotels ad groups are only available to customers on the
   * allow-list.
   */
  PROMOTED_HOTEL_AD_GROUPS_NOT_AVAILABLE_FOR_CUSTOMER = 15,
  /**
   * INVALID_EXCLUDED_PARENT_ASSET_FIELD_TYPE - The field type cannot be excluded because an active ad group-asset link
   * of this type exists.
   */
  INVALID_EXCLUDED_PARENT_ASSET_FIELD_TYPE = 16,
  /**
   * INVALID_EXCLUDED_PARENT_ASSET_SET_TYPE - The asset set type is invalid for setting the
   * excluded_parent_asset_set_types field.
   */
  INVALID_EXCLUDED_PARENT_ASSET_SET_TYPE = 17,
  /** CANNOT_ADD_AD_GROUP_FOR_CAMPAIGN_TYPE - Cannot add ad groups for the campaign type. */
  CANNOT_ADD_AD_GROUP_FOR_CAMPAIGN_TYPE = 18,
  /** INVALID_STATUS - Invalid status for the ad group. */
  INVALID_STATUS = 19,
  UNRECOGNIZED = -1,
}

export function adGroupErrorEnum_AdGroupErrorFromJSON(object: any): AdGroupErrorEnum_AdGroupError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return AdGroupErrorEnum_AdGroupError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return AdGroupErrorEnum_AdGroupError.UNKNOWN;
    case 2:
    case "DUPLICATE_ADGROUP_NAME":
      return AdGroupErrorEnum_AdGroupError.DUPLICATE_ADGROUP_NAME;
    case 3:
    case "INVALID_ADGROUP_NAME":
      return AdGroupErrorEnum_AdGroupError.INVALID_ADGROUP_NAME;
    case 5:
    case "ADVERTISER_NOT_ON_CONTENT_NETWORK":
      return AdGroupErrorEnum_AdGroupError.ADVERTISER_NOT_ON_CONTENT_NETWORK;
    case 6:
    case "BID_TOO_BIG":
      return AdGroupErrorEnum_AdGroupError.BID_TOO_BIG;
    case 7:
    case "BID_TYPE_AND_BIDDING_STRATEGY_MISMATCH":
      return AdGroupErrorEnum_AdGroupError.BID_TYPE_AND_BIDDING_STRATEGY_MISMATCH;
    case 8:
    case "MISSING_ADGROUP_NAME":
      return AdGroupErrorEnum_AdGroupError.MISSING_ADGROUP_NAME;
    case 9:
    case "ADGROUP_LABEL_DOES_NOT_EXIST":
      return AdGroupErrorEnum_AdGroupError.ADGROUP_LABEL_DOES_NOT_EXIST;
    case 10:
    case "ADGROUP_LABEL_ALREADY_EXISTS":
      return AdGroupErrorEnum_AdGroupError.ADGROUP_LABEL_ALREADY_EXISTS;
    case 11:
    case "INVALID_CONTENT_BID_CRITERION_TYPE_GROUP":
      return AdGroupErrorEnum_AdGroupError.INVALID_CONTENT_BID_CRITERION_TYPE_GROUP;
    case 12:
    case "AD_GROUP_TYPE_NOT_VALID_FOR_ADVERTISING_CHANNEL_TYPE":
      return AdGroupErrorEnum_AdGroupError.AD_GROUP_TYPE_NOT_VALID_FOR_ADVERTISING_CHANNEL_TYPE;
    case 13:
    case "ADGROUP_TYPE_NOT_SUPPORTED_FOR_CAMPAIGN_SALES_COUNTRY":
      return AdGroupErrorEnum_AdGroupError.ADGROUP_TYPE_NOT_SUPPORTED_FOR_CAMPAIGN_SALES_COUNTRY;
    case 14:
    case "CANNOT_ADD_ADGROUP_OF_TYPE_DSA_TO_CAMPAIGN_WITHOUT_DSA_SETTING":
      return AdGroupErrorEnum_AdGroupError.CANNOT_ADD_ADGROUP_OF_TYPE_DSA_TO_CAMPAIGN_WITHOUT_DSA_SETTING;
    case 15:
    case "PROMOTED_HOTEL_AD_GROUPS_NOT_AVAILABLE_FOR_CUSTOMER":
      return AdGroupErrorEnum_AdGroupError.PROMOTED_HOTEL_AD_GROUPS_NOT_AVAILABLE_FOR_CUSTOMER;
    case 16:
    case "INVALID_EXCLUDED_PARENT_ASSET_FIELD_TYPE":
      return AdGroupErrorEnum_AdGroupError.INVALID_EXCLUDED_PARENT_ASSET_FIELD_TYPE;
    case 17:
    case "INVALID_EXCLUDED_PARENT_ASSET_SET_TYPE":
      return AdGroupErrorEnum_AdGroupError.INVALID_EXCLUDED_PARENT_ASSET_SET_TYPE;
    case 18:
    case "CANNOT_ADD_AD_GROUP_FOR_CAMPAIGN_TYPE":
      return AdGroupErrorEnum_AdGroupError.CANNOT_ADD_AD_GROUP_FOR_CAMPAIGN_TYPE;
    case 19:
    case "INVALID_STATUS":
      return AdGroupErrorEnum_AdGroupError.INVALID_STATUS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AdGroupErrorEnum_AdGroupError.UNRECOGNIZED;
  }
}

export function adGroupErrorEnum_AdGroupErrorToJSON(object: AdGroupErrorEnum_AdGroupError): string {
  switch (object) {
    case AdGroupErrorEnum_AdGroupError.UNSPECIFIED:
      return "UNSPECIFIED";
    case AdGroupErrorEnum_AdGroupError.UNKNOWN:
      return "UNKNOWN";
    case AdGroupErrorEnum_AdGroupError.DUPLICATE_ADGROUP_NAME:
      return "DUPLICATE_ADGROUP_NAME";
    case AdGroupErrorEnum_AdGroupError.INVALID_ADGROUP_NAME:
      return "INVALID_ADGROUP_NAME";
    case AdGroupErrorEnum_AdGroupError.ADVERTISER_NOT_ON_CONTENT_NETWORK:
      return "ADVERTISER_NOT_ON_CONTENT_NETWORK";
    case AdGroupErrorEnum_AdGroupError.BID_TOO_BIG:
      return "BID_TOO_BIG";
    case AdGroupErrorEnum_AdGroupError.BID_TYPE_AND_BIDDING_STRATEGY_MISMATCH:
      return "BID_TYPE_AND_BIDDING_STRATEGY_MISMATCH";
    case AdGroupErrorEnum_AdGroupError.MISSING_ADGROUP_NAME:
      return "MISSING_ADGROUP_NAME";
    case AdGroupErrorEnum_AdGroupError.ADGROUP_LABEL_DOES_NOT_EXIST:
      return "ADGROUP_LABEL_DOES_NOT_EXIST";
    case AdGroupErrorEnum_AdGroupError.ADGROUP_LABEL_ALREADY_EXISTS:
      return "ADGROUP_LABEL_ALREADY_EXISTS";
    case AdGroupErrorEnum_AdGroupError.INVALID_CONTENT_BID_CRITERION_TYPE_GROUP:
      return "INVALID_CONTENT_BID_CRITERION_TYPE_GROUP";
    case AdGroupErrorEnum_AdGroupError.AD_GROUP_TYPE_NOT_VALID_FOR_ADVERTISING_CHANNEL_TYPE:
      return "AD_GROUP_TYPE_NOT_VALID_FOR_ADVERTISING_CHANNEL_TYPE";
    case AdGroupErrorEnum_AdGroupError.ADGROUP_TYPE_NOT_SUPPORTED_FOR_CAMPAIGN_SALES_COUNTRY:
      return "ADGROUP_TYPE_NOT_SUPPORTED_FOR_CAMPAIGN_SALES_COUNTRY";
    case AdGroupErrorEnum_AdGroupError.CANNOT_ADD_ADGROUP_OF_TYPE_DSA_TO_CAMPAIGN_WITHOUT_DSA_SETTING:
      return "CANNOT_ADD_ADGROUP_OF_TYPE_DSA_TO_CAMPAIGN_WITHOUT_DSA_SETTING";
    case AdGroupErrorEnum_AdGroupError.PROMOTED_HOTEL_AD_GROUPS_NOT_AVAILABLE_FOR_CUSTOMER:
      return "PROMOTED_HOTEL_AD_GROUPS_NOT_AVAILABLE_FOR_CUSTOMER";
    case AdGroupErrorEnum_AdGroupError.INVALID_EXCLUDED_PARENT_ASSET_FIELD_TYPE:
      return "INVALID_EXCLUDED_PARENT_ASSET_FIELD_TYPE";
    case AdGroupErrorEnum_AdGroupError.INVALID_EXCLUDED_PARENT_ASSET_SET_TYPE:
      return "INVALID_EXCLUDED_PARENT_ASSET_SET_TYPE";
    case AdGroupErrorEnum_AdGroupError.CANNOT_ADD_AD_GROUP_FOR_CAMPAIGN_TYPE:
      return "CANNOT_ADD_AD_GROUP_FOR_CAMPAIGN_TYPE";
    case AdGroupErrorEnum_AdGroupError.INVALID_STATUS:
      return "INVALID_STATUS";
    case AdGroupErrorEnum_AdGroupError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAdGroupErrorEnum(): AdGroupErrorEnum {
  return {};
}

export const AdGroupErrorEnum: MessageFns<AdGroupErrorEnum> = {
  encode(_: AdGroupErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdGroupErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdGroupErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AdGroupErrorEnum {
    return {};
  },

  toJSON(_: AdGroupErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AdGroupErrorEnum>): AdGroupErrorEnum {
    return AdGroupErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AdGroupErrorEnum>): AdGroupErrorEnum {
    const message = createBaseAdGroupErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
