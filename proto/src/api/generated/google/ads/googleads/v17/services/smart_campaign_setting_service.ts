// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/services/smart_campaign_setting_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Status } from "../../../../rpc/status.js";
import {
  ResponseContentTypeEnum_ResponseContentType,
  responseContentTypeEnum_ResponseContentTypeFromJSON,
  responseContentTypeEnum_ResponseContentTypeToJSON,
} from "../enums/response_content_type.js";
import {
  SmartCampaignNotEligibleReasonEnum_SmartCampaignNotEligibleReason,
  smartCampaignNotEligibleReasonEnum_SmartCampaignNotEligibleReasonFromJSON,
  smartCampaignNotEligibleReasonEnum_SmartCampaignNotEligibleReasonToJSON,
} from "../enums/smart_campaign_not_eligible_reason.js";
import {
  SmartCampaignStatusEnum_SmartCampaignStatus,
  smartCampaignStatusEnum_SmartCampaignStatusFromJSON,
  smartCampaignStatusEnum_SmartCampaignStatusToJSON,
} from "../enums/smart_campaign_status.js";
import { SmartCampaignSetting } from "../resources/smart_campaign_setting.js";

export const protobufPackage = "google.ads.googleads.v17.services";

/**
 * Request message for
 * [SmartCampaignSettingService.GetSmartCampaignStatus][google.ads.googleads.v17.services.SmartCampaignSettingService.GetSmartCampaignStatus].
 */
export interface GetSmartCampaignStatusRequest {
  /**
   * Required. The resource name of the Smart campaign setting belonging to the
   * Smart campaign to fetch the status of.
   */
  resourceName: string;
}

/** Details related to Smart campaigns that are not eligible to serve. */
export interface SmartCampaignNotEligibleDetails {
  /** The reason why the Smart campaign is not eligible to serve. */
  notEligibleReason?: SmartCampaignNotEligibleReasonEnum_SmartCampaignNotEligibleReason | undefined;
}

/** Details related to Smart campaigns that are eligible to serve. */
export interface SmartCampaignEligibleDetails {
  /**
   * The timestamp of the last impression observed in the last 48 hours for this
   * campaign.
   * The timestamp is in the customer’s timezone and in
   * “yyyy-MM-dd HH:mm:ss” format.
   */
  lastImpressionDateTime?:
    | string
    | undefined;
  /**
   * The timestamp of when the campaign will end, if applicable.
   * The timestamp is in the customer’s timezone and in
   * “yyyy-MM-dd HH:mm:ss” format.
   */
  endDateTime?: string | undefined;
}

/** Details related to paused Smart campaigns. */
export interface SmartCampaignPausedDetails {
  /**
   * The timestamp of when the campaign was last paused.
   * The timestamp is in the customer’s timezone and in
   * “yyyy-MM-dd HH:mm:ss” format.
   */
  pausedDateTime?: string | undefined;
}

/** Details related to removed Smart campaigns. */
export interface SmartCampaignRemovedDetails {
  /**
   * The timestamp of when the campaign was removed.
   * The timestamp is in the customer’s timezone and in
   * “yyyy-MM-dd HH:mm:ss” format.
   */
  removedDateTime?: string | undefined;
}

/** Details related to Smart campaigns that have ended. */
export interface SmartCampaignEndedDetails {
  /**
   * The timestamp of when the campaign ended.
   * The timestamp is in the customer’s timezone and in
   * “yyyy-MM-dd HH:mm:ss” format.
   */
  endDateTime?: string | undefined;
}

/**
 * Response message for
 * [SmartCampaignSettingService.GetSmartCampaignStatus][google.ads.googleads.v17.services.SmartCampaignSettingService.GetSmartCampaignStatus].
 */
export interface GetSmartCampaignStatusResponse {
  /** The status of this Smart campaign. */
  smartCampaignStatus: SmartCampaignStatusEnum_SmartCampaignStatus;
  /** Details related to Smart campaigns that are ineligible to serve. */
  notEligibleDetails?:
    | SmartCampaignNotEligibleDetails
    | undefined;
  /** Details related to Smart campaigns that are eligible to serve. */
  eligibleDetails?:
    | SmartCampaignEligibleDetails
    | undefined;
  /** Details related to paused Smart campaigns. */
  pausedDetails?:
    | SmartCampaignPausedDetails
    | undefined;
  /** Details related to removed Smart campaigns. */
  removedDetails?:
    | SmartCampaignRemovedDetails
    | undefined;
  /** Details related to Smart campaigns that have ended. */
  endedDetails?: SmartCampaignEndedDetails | undefined;
}

/**
 * Request message for
 * [SmartCampaignSettingService.MutateSmartCampaignSettings][google.ads.googleads.v17.services.SmartCampaignSettingService.MutateSmartCampaignSettings].
 */
export interface MutateSmartCampaignSettingsRequest {
  /**
   * Required. The ID of the customer whose Smart campaign settings are being
   * modified.
   */
  customerId: string;
  /**
   * Required. The list of operations to perform on individual Smart campaign
   * settings.
   */
  operations: SmartCampaignSettingOperation[];
  /**
   * If true, successful operations will be carried out and invalid
   * operations will return errors. If false, all operations will be carried
   * out in one transaction if and only if they are all valid.
   * Default is false.
   */
  partialFailure: boolean;
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
  /**
   * The response content type setting. Determines whether the mutable resource
   * or just the resource name should be returned post mutation.
   */
  responseContentType: ResponseContentTypeEnum_ResponseContentType;
}

/** A single operation to update Smart campaign settings for a campaign. */
export interface SmartCampaignSettingOperation {
  /**
   * Update operation: The Smart campaign setting must specify a valid
   * resource name.
   */
  update:
    | SmartCampaignSetting
    | undefined;
  /** FieldMask that determines which resource fields are modified in an update. */
  updateMask: string[] | undefined;
}

/** Response message for campaign mutate. */
export interface MutateSmartCampaignSettingsResponse {
  /**
   * Errors that pertain to operation failures in the partial failure mode.
   * Returned only when partial_failure = true and all errors occur inside the
   * operations. If any errors occur outside the operations (for example, auth
   * errors), we return an RPC level error.
   */
  partialFailureError:
    | Status
    | undefined;
  /** All results for the mutate. */
  results: MutateSmartCampaignSettingResult[];
}

/** The result for the Smart campaign setting mutate. */
export interface MutateSmartCampaignSettingResult {
  /** Returned for successful operations. */
  resourceName: string;
  /**
   * The mutated Smart campaign setting with only mutable fields after mutate.
   * The field will only be returned when response_content_type is set to
   * "MUTABLE_RESOURCE".
   */
  smartCampaignSetting: SmartCampaignSetting | undefined;
}

function createBaseGetSmartCampaignStatusRequest(): GetSmartCampaignStatusRequest {
  return { resourceName: "" };
}

export const GetSmartCampaignStatusRequest: MessageFns<GetSmartCampaignStatusRequest> = {
  encode(message: GetSmartCampaignStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSmartCampaignStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSmartCampaignStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSmartCampaignStatusRequest {
    return { resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "" };
  },

  toJSON(message: GetSmartCampaignStatusRequest): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSmartCampaignStatusRequest>): GetSmartCampaignStatusRequest {
    return GetSmartCampaignStatusRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSmartCampaignStatusRequest>): GetSmartCampaignStatusRequest {
    const message = createBaseGetSmartCampaignStatusRequest();
    message.resourceName = object.resourceName ?? "";
    return message;
  },
};

function createBaseSmartCampaignNotEligibleDetails(): SmartCampaignNotEligibleDetails {
  return { notEligibleReason: undefined };
}

export const SmartCampaignNotEligibleDetails: MessageFns<SmartCampaignNotEligibleDetails> = {
  encode(message: SmartCampaignNotEligibleDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notEligibleReason !== undefined) {
      writer.uint32(8).int32(message.notEligibleReason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmartCampaignNotEligibleDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmartCampaignNotEligibleDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.notEligibleReason = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SmartCampaignNotEligibleDetails {
    return {
      notEligibleReason: isSet(object.notEligibleReason)
        ? smartCampaignNotEligibleReasonEnum_SmartCampaignNotEligibleReasonFromJSON(object.notEligibleReason)
        : undefined,
    };
  },

  toJSON(message: SmartCampaignNotEligibleDetails): unknown {
    const obj: any = {};
    if (message.notEligibleReason !== undefined) {
      obj.notEligibleReason = smartCampaignNotEligibleReasonEnum_SmartCampaignNotEligibleReasonToJSON(
        message.notEligibleReason,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<SmartCampaignNotEligibleDetails>): SmartCampaignNotEligibleDetails {
    return SmartCampaignNotEligibleDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SmartCampaignNotEligibleDetails>): SmartCampaignNotEligibleDetails {
    const message = createBaseSmartCampaignNotEligibleDetails();
    message.notEligibleReason = object.notEligibleReason ?? undefined;
    return message;
  },
};

function createBaseSmartCampaignEligibleDetails(): SmartCampaignEligibleDetails {
  return { lastImpressionDateTime: undefined, endDateTime: undefined };
}

export const SmartCampaignEligibleDetails: MessageFns<SmartCampaignEligibleDetails> = {
  encode(message: SmartCampaignEligibleDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastImpressionDateTime !== undefined) {
      writer.uint32(10).string(message.lastImpressionDateTime);
    }
    if (message.endDateTime !== undefined) {
      writer.uint32(18).string(message.endDateTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmartCampaignEligibleDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmartCampaignEligibleDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.lastImpressionDateTime = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endDateTime = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SmartCampaignEligibleDetails {
    return {
      lastImpressionDateTime: isSet(object.lastImpressionDateTime)
        ? globalThis.String(object.lastImpressionDateTime)
        : undefined,
      endDateTime: isSet(object.endDateTime) ? globalThis.String(object.endDateTime) : undefined,
    };
  },

  toJSON(message: SmartCampaignEligibleDetails): unknown {
    const obj: any = {};
    if (message.lastImpressionDateTime !== undefined) {
      obj.lastImpressionDateTime = message.lastImpressionDateTime;
    }
    if (message.endDateTime !== undefined) {
      obj.endDateTime = message.endDateTime;
    }
    return obj;
  },

  create(base?: DeepPartial<SmartCampaignEligibleDetails>): SmartCampaignEligibleDetails {
    return SmartCampaignEligibleDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SmartCampaignEligibleDetails>): SmartCampaignEligibleDetails {
    const message = createBaseSmartCampaignEligibleDetails();
    message.lastImpressionDateTime = object.lastImpressionDateTime ?? undefined;
    message.endDateTime = object.endDateTime ?? undefined;
    return message;
  },
};

function createBaseSmartCampaignPausedDetails(): SmartCampaignPausedDetails {
  return { pausedDateTime: undefined };
}

export const SmartCampaignPausedDetails: MessageFns<SmartCampaignPausedDetails> = {
  encode(message: SmartCampaignPausedDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pausedDateTime !== undefined) {
      writer.uint32(10).string(message.pausedDateTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmartCampaignPausedDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmartCampaignPausedDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pausedDateTime = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SmartCampaignPausedDetails {
    return { pausedDateTime: isSet(object.pausedDateTime) ? globalThis.String(object.pausedDateTime) : undefined };
  },

  toJSON(message: SmartCampaignPausedDetails): unknown {
    const obj: any = {};
    if (message.pausedDateTime !== undefined) {
      obj.pausedDateTime = message.pausedDateTime;
    }
    return obj;
  },

  create(base?: DeepPartial<SmartCampaignPausedDetails>): SmartCampaignPausedDetails {
    return SmartCampaignPausedDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SmartCampaignPausedDetails>): SmartCampaignPausedDetails {
    const message = createBaseSmartCampaignPausedDetails();
    message.pausedDateTime = object.pausedDateTime ?? undefined;
    return message;
  },
};

function createBaseSmartCampaignRemovedDetails(): SmartCampaignRemovedDetails {
  return { removedDateTime: undefined };
}

export const SmartCampaignRemovedDetails: MessageFns<SmartCampaignRemovedDetails> = {
  encode(message: SmartCampaignRemovedDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.removedDateTime !== undefined) {
      writer.uint32(10).string(message.removedDateTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmartCampaignRemovedDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmartCampaignRemovedDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.removedDateTime = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SmartCampaignRemovedDetails {
    return { removedDateTime: isSet(object.removedDateTime) ? globalThis.String(object.removedDateTime) : undefined };
  },

  toJSON(message: SmartCampaignRemovedDetails): unknown {
    const obj: any = {};
    if (message.removedDateTime !== undefined) {
      obj.removedDateTime = message.removedDateTime;
    }
    return obj;
  },

  create(base?: DeepPartial<SmartCampaignRemovedDetails>): SmartCampaignRemovedDetails {
    return SmartCampaignRemovedDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SmartCampaignRemovedDetails>): SmartCampaignRemovedDetails {
    const message = createBaseSmartCampaignRemovedDetails();
    message.removedDateTime = object.removedDateTime ?? undefined;
    return message;
  },
};

function createBaseSmartCampaignEndedDetails(): SmartCampaignEndedDetails {
  return { endDateTime: undefined };
}

export const SmartCampaignEndedDetails: MessageFns<SmartCampaignEndedDetails> = {
  encode(message: SmartCampaignEndedDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endDateTime !== undefined) {
      writer.uint32(10).string(message.endDateTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmartCampaignEndedDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmartCampaignEndedDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.endDateTime = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SmartCampaignEndedDetails {
    return { endDateTime: isSet(object.endDateTime) ? globalThis.String(object.endDateTime) : undefined };
  },

  toJSON(message: SmartCampaignEndedDetails): unknown {
    const obj: any = {};
    if (message.endDateTime !== undefined) {
      obj.endDateTime = message.endDateTime;
    }
    return obj;
  },

  create(base?: DeepPartial<SmartCampaignEndedDetails>): SmartCampaignEndedDetails {
    return SmartCampaignEndedDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SmartCampaignEndedDetails>): SmartCampaignEndedDetails {
    const message = createBaseSmartCampaignEndedDetails();
    message.endDateTime = object.endDateTime ?? undefined;
    return message;
  },
};

function createBaseGetSmartCampaignStatusResponse(): GetSmartCampaignStatusResponse {
  return {
    smartCampaignStatus: 0,
    notEligibleDetails: undefined,
    eligibleDetails: undefined,
    pausedDetails: undefined,
    removedDetails: undefined,
    endedDetails: undefined,
  };
}

export const GetSmartCampaignStatusResponse: MessageFns<GetSmartCampaignStatusResponse> = {
  encode(message: GetSmartCampaignStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.smartCampaignStatus !== 0) {
      writer.uint32(8).int32(message.smartCampaignStatus);
    }
    if (message.notEligibleDetails !== undefined) {
      SmartCampaignNotEligibleDetails.encode(message.notEligibleDetails, writer.uint32(18).fork()).join();
    }
    if (message.eligibleDetails !== undefined) {
      SmartCampaignEligibleDetails.encode(message.eligibleDetails, writer.uint32(26).fork()).join();
    }
    if (message.pausedDetails !== undefined) {
      SmartCampaignPausedDetails.encode(message.pausedDetails, writer.uint32(34).fork()).join();
    }
    if (message.removedDetails !== undefined) {
      SmartCampaignRemovedDetails.encode(message.removedDetails, writer.uint32(42).fork()).join();
    }
    if (message.endedDetails !== undefined) {
      SmartCampaignEndedDetails.encode(message.endedDetails, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSmartCampaignStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSmartCampaignStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.smartCampaignStatus = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.notEligibleDetails = SmartCampaignNotEligibleDetails.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.eligibleDetails = SmartCampaignEligibleDetails.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pausedDetails = SmartCampaignPausedDetails.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.removedDetails = SmartCampaignRemovedDetails.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.endedDetails = SmartCampaignEndedDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSmartCampaignStatusResponse {
    return {
      smartCampaignStatus: isSet(object.smartCampaignStatus)
        ? smartCampaignStatusEnum_SmartCampaignStatusFromJSON(object.smartCampaignStatus)
        : 0,
      notEligibleDetails: isSet(object.notEligibleDetails)
        ? SmartCampaignNotEligibleDetails.fromJSON(object.notEligibleDetails)
        : undefined,
      eligibleDetails: isSet(object.eligibleDetails)
        ? SmartCampaignEligibleDetails.fromJSON(object.eligibleDetails)
        : undefined,
      pausedDetails: isSet(object.pausedDetails)
        ? SmartCampaignPausedDetails.fromJSON(object.pausedDetails)
        : undefined,
      removedDetails: isSet(object.removedDetails)
        ? SmartCampaignRemovedDetails.fromJSON(object.removedDetails)
        : undefined,
      endedDetails: isSet(object.endedDetails) ? SmartCampaignEndedDetails.fromJSON(object.endedDetails) : undefined,
    };
  },

  toJSON(message: GetSmartCampaignStatusResponse): unknown {
    const obj: any = {};
    if (message.smartCampaignStatus !== 0) {
      obj.smartCampaignStatus = smartCampaignStatusEnum_SmartCampaignStatusToJSON(message.smartCampaignStatus);
    }
    if (message.notEligibleDetails !== undefined) {
      obj.notEligibleDetails = SmartCampaignNotEligibleDetails.toJSON(message.notEligibleDetails);
    }
    if (message.eligibleDetails !== undefined) {
      obj.eligibleDetails = SmartCampaignEligibleDetails.toJSON(message.eligibleDetails);
    }
    if (message.pausedDetails !== undefined) {
      obj.pausedDetails = SmartCampaignPausedDetails.toJSON(message.pausedDetails);
    }
    if (message.removedDetails !== undefined) {
      obj.removedDetails = SmartCampaignRemovedDetails.toJSON(message.removedDetails);
    }
    if (message.endedDetails !== undefined) {
      obj.endedDetails = SmartCampaignEndedDetails.toJSON(message.endedDetails);
    }
    return obj;
  },

  create(base?: DeepPartial<GetSmartCampaignStatusResponse>): GetSmartCampaignStatusResponse {
    return GetSmartCampaignStatusResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSmartCampaignStatusResponse>): GetSmartCampaignStatusResponse {
    const message = createBaseGetSmartCampaignStatusResponse();
    message.smartCampaignStatus = object.smartCampaignStatus ?? 0;
    message.notEligibleDetails = (object.notEligibleDetails !== undefined && object.notEligibleDetails !== null)
      ? SmartCampaignNotEligibleDetails.fromPartial(object.notEligibleDetails)
      : undefined;
    message.eligibleDetails = (object.eligibleDetails !== undefined && object.eligibleDetails !== null)
      ? SmartCampaignEligibleDetails.fromPartial(object.eligibleDetails)
      : undefined;
    message.pausedDetails = (object.pausedDetails !== undefined && object.pausedDetails !== null)
      ? SmartCampaignPausedDetails.fromPartial(object.pausedDetails)
      : undefined;
    message.removedDetails = (object.removedDetails !== undefined && object.removedDetails !== null)
      ? SmartCampaignRemovedDetails.fromPartial(object.removedDetails)
      : undefined;
    message.endedDetails = (object.endedDetails !== undefined && object.endedDetails !== null)
      ? SmartCampaignEndedDetails.fromPartial(object.endedDetails)
      : undefined;
    return message;
  },
};

function createBaseMutateSmartCampaignSettingsRequest(): MutateSmartCampaignSettingsRequest {
  return { customerId: "", operations: [], partialFailure: false, validateOnly: false, responseContentType: 0 };
}

export const MutateSmartCampaignSettingsRequest: MessageFns<MutateSmartCampaignSettingsRequest> = {
  encode(message: MutateSmartCampaignSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    for (const v of message.operations) {
      SmartCampaignSettingOperation.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.partialFailure !== false) {
      writer.uint32(24).bool(message.partialFailure);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    if (message.responseContentType !== 0) {
      writer.uint32(40).int32(message.responseContentType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateSmartCampaignSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateSmartCampaignSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operations.push(SmartCampaignSettingOperation.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.partialFailure = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.responseContentType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateSmartCampaignSettingsRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      operations: globalThis.Array.isArray(object?.operations)
        ? object.operations.map((e: any) => SmartCampaignSettingOperation.fromJSON(e))
        : [],
      partialFailure: isSet(object.partialFailure) ? globalThis.Boolean(object.partialFailure) : false,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      responseContentType: isSet(object.responseContentType)
        ? responseContentTypeEnum_ResponseContentTypeFromJSON(object.responseContentType)
        : 0,
    };
  },

  toJSON(message: MutateSmartCampaignSettingsRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.operations?.length) {
      obj.operations = message.operations.map((e) => SmartCampaignSettingOperation.toJSON(e));
    }
    if (message.partialFailure !== false) {
      obj.partialFailure = message.partialFailure;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.responseContentType !== 0) {
      obj.responseContentType = responseContentTypeEnum_ResponseContentTypeToJSON(message.responseContentType);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateSmartCampaignSettingsRequest>): MutateSmartCampaignSettingsRequest {
    return MutateSmartCampaignSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateSmartCampaignSettingsRequest>): MutateSmartCampaignSettingsRequest {
    const message = createBaseMutateSmartCampaignSettingsRequest();
    message.customerId = object.customerId ?? "";
    message.operations = object.operations?.map((e) => SmartCampaignSettingOperation.fromPartial(e)) || [];
    message.partialFailure = object.partialFailure ?? false;
    message.validateOnly = object.validateOnly ?? false;
    message.responseContentType = object.responseContentType ?? 0;
    return message;
  },
};

function createBaseSmartCampaignSettingOperation(): SmartCampaignSettingOperation {
  return { update: undefined, updateMask: undefined };
}

export const SmartCampaignSettingOperation: MessageFns<SmartCampaignSettingOperation> = {
  encode(message: SmartCampaignSettingOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.update !== undefined) {
      SmartCampaignSetting.encode(message.update, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmartCampaignSettingOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmartCampaignSettingOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.update = SmartCampaignSetting.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SmartCampaignSettingOperation {
    return {
      update: isSet(object.update) ? SmartCampaignSetting.fromJSON(object.update) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: SmartCampaignSettingOperation): unknown {
    const obj: any = {};
    if (message.update !== undefined) {
      obj.update = SmartCampaignSetting.toJSON(message.update);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<SmartCampaignSettingOperation>): SmartCampaignSettingOperation {
    return SmartCampaignSettingOperation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SmartCampaignSettingOperation>): SmartCampaignSettingOperation {
    const message = createBaseSmartCampaignSettingOperation();
    message.update = (object.update !== undefined && object.update !== null)
      ? SmartCampaignSetting.fromPartial(object.update)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseMutateSmartCampaignSettingsResponse(): MutateSmartCampaignSettingsResponse {
  return { partialFailureError: undefined, results: [] };
}

export const MutateSmartCampaignSettingsResponse: MessageFns<MutateSmartCampaignSettingsResponse> = {
  encode(message: MutateSmartCampaignSettingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.partialFailureError !== undefined) {
      Status.encode(message.partialFailureError, writer.uint32(10).fork()).join();
    }
    for (const v of message.results) {
      MutateSmartCampaignSettingResult.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateSmartCampaignSettingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateSmartCampaignSettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.partialFailureError = Status.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.results.push(MutateSmartCampaignSettingResult.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateSmartCampaignSettingsResponse {
    return {
      partialFailureError: isSet(object.partialFailureError) ? Status.fromJSON(object.partialFailureError) : undefined,
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => MutateSmartCampaignSettingResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MutateSmartCampaignSettingsResponse): unknown {
    const obj: any = {};
    if (message.partialFailureError !== undefined) {
      obj.partialFailureError = Status.toJSON(message.partialFailureError);
    }
    if (message.results?.length) {
      obj.results = message.results.map((e) => MutateSmartCampaignSettingResult.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MutateSmartCampaignSettingsResponse>): MutateSmartCampaignSettingsResponse {
    return MutateSmartCampaignSettingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateSmartCampaignSettingsResponse>): MutateSmartCampaignSettingsResponse {
    const message = createBaseMutateSmartCampaignSettingsResponse();
    message.partialFailureError = (object.partialFailureError !== undefined && object.partialFailureError !== null)
      ? Status.fromPartial(object.partialFailureError)
      : undefined;
    message.results = object.results?.map((e) => MutateSmartCampaignSettingResult.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMutateSmartCampaignSettingResult(): MutateSmartCampaignSettingResult {
  return { resourceName: "", smartCampaignSetting: undefined };
}

export const MutateSmartCampaignSettingResult: MessageFns<MutateSmartCampaignSettingResult> = {
  encode(message: MutateSmartCampaignSettingResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.smartCampaignSetting !== undefined) {
      SmartCampaignSetting.encode(message.smartCampaignSetting, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateSmartCampaignSettingResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateSmartCampaignSettingResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.smartCampaignSetting = SmartCampaignSetting.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateSmartCampaignSettingResult {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      smartCampaignSetting: isSet(object.smartCampaignSetting)
        ? SmartCampaignSetting.fromJSON(object.smartCampaignSetting)
        : undefined,
    };
  },

  toJSON(message: MutateSmartCampaignSettingResult): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.smartCampaignSetting !== undefined) {
      obj.smartCampaignSetting = SmartCampaignSetting.toJSON(message.smartCampaignSetting);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateSmartCampaignSettingResult>): MutateSmartCampaignSettingResult {
    return MutateSmartCampaignSettingResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateSmartCampaignSettingResult>): MutateSmartCampaignSettingResult {
    const message = createBaseMutateSmartCampaignSettingResult();
    message.resourceName = object.resourceName ?? "";
    message.smartCampaignSetting = (object.smartCampaignSetting !== undefined && object.smartCampaignSetting !== null)
      ? SmartCampaignSetting.fromPartial(object.smartCampaignSetting)
      : undefined;
    return message;
  },
};

/** Service to manage Smart campaign settings. */
export type SmartCampaignSettingServiceDefinition = typeof SmartCampaignSettingServiceDefinition;
export const SmartCampaignSettingServiceDefinition = {
  name: "SmartCampaignSettingService",
  fullName: "google.ads.googleads.v17.services.SmartCampaignSettingService",
  methods: {
    /** Returns the status of the requested Smart campaign. */
    getSmartCampaignStatus: {
      name: "GetSmartCampaignStatus",
      requestType: GetSmartCampaignStatusRequest,
      requestStream: false,
      responseType: GetSmartCampaignStatusResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 114, 101, 115, 111, 117, 114, 99, 101, 95, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              81,
              18,
              79,
              47,
              118,
              49,
              55,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              61,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              109,
              97,
              114,
              116,
              67,
              97,
              109,
              112,
              97,
              105,
              103,
              110,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              83,
              109,
              97,
              114,
              116,
              67,
              97,
              109,
              112,
              97,
              105,
              103,
              110,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates Smart campaign settings for campaigns. */
    mutateSmartCampaignSettings: {
      name: "MutateSmartCampaignSettings",
      requestType: MutateSmartCampaignSettingsRequest,
      requestStream: false,
      responseType: MutateSmartCampaignSettingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              64,
              58,
              1,
              42,
              34,
              59,
              47,
              118,
              49,
              55,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              115,
              109,
              97,
              114,
              116,
              67,
              97,
              109,
              112,
              97,
              105,
              103,
              110,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              58,
              109,
              117,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SmartCampaignSettingServiceImplementation<CallContextExt = {}> {
  /** Returns the status of the requested Smart campaign. */
  getSmartCampaignStatus(
    request: GetSmartCampaignStatusRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetSmartCampaignStatusResponse>>;
  /** Updates Smart campaign settings for campaigns. */
  mutateSmartCampaignSettings(
    request: MutateSmartCampaignSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MutateSmartCampaignSettingsResponse>>;
}

export interface SmartCampaignSettingServiceClient<CallOptionsExt = {}> {
  /** Returns the status of the requested Smart campaign. */
  getSmartCampaignStatus(
    request: DeepPartial<GetSmartCampaignStatusRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetSmartCampaignStatusResponse>;
  /** Updates Smart campaign settings for campaigns. */
  mutateSmartCampaignSettings(
    request: DeepPartial<MutateSmartCampaignSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MutateSmartCampaignSettingsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
