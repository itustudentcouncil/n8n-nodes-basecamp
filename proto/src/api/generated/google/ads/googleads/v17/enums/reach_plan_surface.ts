// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/enums/reach_plan_surface.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.enums";

/**
 * Container for enum describing surfaces available for targeting in forecasts.
 * Surfaces refer to the available types of ad inventories such as In-Feed,
 * In-Stream, and Shorts.
 */
export interface ReachPlanSurfaceEnum {
}

/** Surfaces available to target in reach forecasts. */
export enum ReachPlanSurfaceEnum_ReachPlanSurface {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The value is unknown in this version. */
  UNKNOWN = 1,
  /** IN_FEED - In-Feed ad surface. */
  IN_FEED = 2,
  /** IN_STREAM_BUMPER - In-Stream bumper ad surface. */
  IN_STREAM_BUMPER = 3,
  /** IN_STREAM_NON_SKIPPABLE - In-Stream non-skippable ad surface. */
  IN_STREAM_NON_SKIPPABLE = 4,
  /** IN_STREAM_SKIPPABLE - In-Stream skippable ad surface. */
  IN_STREAM_SKIPPABLE = 5,
  /** SHORTS - Shorts ad surface. */
  SHORTS = 6,
  UNRECOGNIZED = -1,
}

export function reachPlanSurfaceEnum_ReachPlanSurfaceFromJSON(object: any): ReachPlanSurfaceEnum_ReachPlanSurface {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return ReachPlanSurfaceEnum_ReachPlanSurface.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return ReachPlanSurfaceEnum_ReachPlanSurface.UNKNOWN;
    case 2:
    case "IN_FEED":
      return ReachPlanSurfaceEnum_ReachPlanSurface.IN_FEED;
    case 3:
    case "IN_STREAM_BUMPER":
      return ReachPlanSurfaceEnum_ReachPlanSurface.IN_STREAM_BUMPER;
    case 4:
    case "IN_STREAM_NON_SKIPPABLE":
      return ReachPlanSurfaceEnum_ReachPlanSurface.IN_STREAM_NON_SKIPPABLE;
    case 5:
    case "IN_STREAM_SKIPPABLE":
      return ReachPlanSurfaceEnum_ReachPlanSurface.IN_STREAM_SKIPPABLE;
    case 6:
    case "SHORTS":
      return ReachPlanSurfaceEnum_ReachPlanSurface.SHORTS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ReachPlanSurfaceEnum_ReachPlanSurface.UNRECOGNIZED;
  }
}

export function reachPlanSurfaceEnum_ReachPlanSurfaceToJSON(object: ReachPlanSurfaceEnum_ReachPlanSurface): string {
  switch (object) {
    case ReachPlanSurfaceEnum_ReachPlanSurface.UNSPECIFIED:
      return "UNSPECIFIED";
    case ReachPlanSurfaceEnum_ReachPlanSurface.UNKNOWN:
      return "UNKNOWN";
    case ReachPlanSurfaceEnum_ReachPlanSurface.IN_FEED:
      return "IN_FEED";
    case ReachPlanSurfaceEnum_ReachPlanSurface.IN_STREAM_BUMPER:
      return "IN_STREAM_BUMPER";
    case ReachPlanSurfaceEnum_ReachPlanSurface.IN_STREAM_NON_SKIPPABLE:
      return "IN_STREAM_NON_SKIPPABLE";
    case ReachPlanSurfaceEnum_ReachPlanSurface.IN_STREAM_SKIPPABLE:
      return "IN_STREAM_SKIPPABLE";
    case ReachPlanSurfaceEnum_ReachPlanSurface.SHORTS:
      return "SHORTS";
    case ReachPlanSurfaceEnum_ReachPlanSurface.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseReachPlanSurfaceEnum(): ReachPlanSurfaceEnum {
  return {};
}

export const ReachPlanSurfaceEnum: MessageFns<ReachPlanSurfaceEnum> = {
  encode(_: ReachPlanSurfaceEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReachPlanSurfaceEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReachPlanSurfaceEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ReachPlanSurfaceEnum {
    return {};
  },

  toJSON(_: ReachPlanSurfaceEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ReachPlanSurfaceEnum>): ReachPlanSurfaceEnum {
    return ReachPlanSurfaceEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ReachPlanSurfaceEnum>): ReachPlanSurfaceEnum {
    const message = createBaseReachPlanSurfaceEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
