// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/common/metrics.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  InteractionEventTypeEnum_InteractionEventType,
  interactionEventTypeEnum_InteractionEventTypeFromJSON,
  interactionEventTypeEnum_InteractionEventTypeToJSON,
} from "../enums/interaction_event_type.js";
import {
  QualityScoreBucketEnum_QualityScoreBucket,
  qualityScoreBucketEnum_QualityScoreBucketFromJSON,
  qualityScoreBucketEnum_QualityScoreBucketToJSON,
} from "../enums/quality_score_bucket.js";

export const protobufPackage = "google.ads.googleads.v17.common";

/** Metrics data. */
export interface Metrics {
  /**
   * Search absolute top impression share is the percentage of your Search ad
   * impressions that are shown in the most prominent Search position.
   */
  absoluteTopImpressionPercentage?:
    | number
    | undefined;
  /** Average cost of viewable impressions (`active_view_impressions`). */
  activeViewCpm?:
    | number
    | undefined;
  /**
   * Active view measurable clicks divided by active view viewable impressions.
   *
   * This metric is reported only for the Display Network.
   */
  activeViewCtr?:
    | number
    | undefined;
  /**
   * A measurement of how often your ad has become viewable on a Display
   * Network site.
   */
  activeViewImpressions?:
    | Long
    | undefined;
  /**
   * The ratio of impressions that could be measured by Active View over the
   * number of served impressions.
   */
  activeViewMeasurability?:
    | number
    | undefined;
  /**
   * The cost of the impressions you received that were measurable by Active
   * View.
   */
  activeViewMeasurableCostMicros?:
    | Long
    | undefined;
  /**
   * The number of times your ads are appearing on placements in positions
   * where they can be seen.
   */
  activeViewMeasurableImpressions?:
    | Long
    | undefined;
  /**
   * The percentage of time when your ad appeared on an Active View enabled site
   * (measurable impressions) and was viewable (viewable impressions).
   */
  activeViewViewability?:
    | number
    | undefined;
  /**
   * All conversions from interactions (as oppose to view through conversions)
   * divided by the number of ad interactions.
   */
  allConversionsFromInteractionsRate?:
    | number
    | undefined;
  /** The value of all conversions. */
  allConversionsValue?:
    | number
    | undefined;
  /**
   * The value of all conversions. When this column is selected with date, the
   * values in date column means the conversion date. Details for the
   * by_conversion_date columns are available at
   * https://support.google.com/google-ads/answer/9549009.
   */
  allConversionsValueByConversionDate?:
    | number
    | undefined;
  /**
   * All of new customers' lifetime conversion value. If you have set up
   * customer acquisition goal at either account level or campaign level, this
   * will include the additional conversion value from new customers for both
   * biddable and non-biddable conversions. If your campaign has adopted the
   * customer acquisition goal and selected "bid higher for new customers",
   * these values will be included in "all_conversions_value". See
   * https://support.google.com/google-ads/answer/12080169 for more details.
   */
  allNewCustomerLifetimeValue?:
    | number
    | undefined;
  /**
   * The total number of conversions. This includes all conversions regardless
   * of the value of include_in_conversions_metric.
   */
  allConversions?:
    | number
    | undefined;
  /**
   * The total number of conversions. This includes all conversions regardless
   * of the value of include_in_conversions_metric. When this column is selected
   * with date, the values in date column means the conversion date. Details for
   * the by_conversion_date columns are available at
   * https://support.google.com/google-ads/answer/9549009.
   */
  allConversionsByConversionDate?:
    | number
    | undefined;
  /**
   * The value of all conversions divided by the total cost of ad interactions
   * (such as clicks for text ads or views for video ads).
   */
  allConversionsValuePerCost?:
    | number
    | undefined;
  /**
   * The number of times people clicked the "Call" button to call a store during
   * or after clicking an ad. This number doesn't include whether or not calls
   * were connected, or the duration of any calls.
   *
   * This metric applies to feed items only.
   */
  allConversionsFromClickToCall?:
    | number
    | undefined;
  /**
   * The number of times people clicked a "Get directions" button to navigate to
   * a store after clicking an ad.
   *
   * This metric applies to feed items only.
   */
  allConversionsFromDirections?:
    | number
    | undefined;
  /**
   * The value of all conversions from interactions divided by the total number
   * of interactions.
   */
  allConversionsFromInteractionsValuePerInteraction?:
    | number
    | undefined;
  /**
   * The number of times people clicked a link to view a store's menu after
   * clicking an ad.
   *
   * This metric applies to feed items only.
   */
  allConversionsFromMenu?:
    | number
    | undefined;
  /**
   * The number of times people placed an order at a store after clicking an ad.
   *
   * This metric applies to feed items only.
   */
  allConversionsFromOrder?:
    | number
    | undefined;
  /**
   * The number of other conversions (for example, posting a review or saving a
   * location for a store) that occurred after people clicked an ad.
   *
   * This metric applies to feed items only.
   */
  allConversionsFromOtherEngagement?:
    | number
    | undefined;
  /**
   * Estimated number of times people visited a store after clicking an ad.
   *
   * This metric applies to feed items only.
   */
  allConversionsFromStoreVisit?:
    | number
    | undefined;
  /**
   * The number of times that people were taken to a store's URL after clicking
   * an ad.
   *
   * This metric applies to feed items only.
   */
  allConversionsFromStoreWebsite?:
    | number
    | undefined;
  /**
   * This metric is part of the Auction Insights report, and tells how often
   * the ads of another participant showed in the most prominent position on the
   * search results page.
   * This percentage is computed only over the auctions that you appeared in
   * the page.
   *
   * This metric is not publicly available.
   */
  auctionInsightSearchAbsoluteTopImpressionPercentage?:
    | number
    | undefined;
  /**
   * This metric is part of the Auction Insights report, and tells the
   * percentage of impressions that another participant obtained, over the total
   * number of impressions that your ads were eligible for.
   * Any value below 0.1 is reported as 0.0999.
   *
   * This metric is not publicly available.
   */
  auctionInsightSearchImpressionShare?:
    | number
    | undefined;
  /**
   * This metric is part of the Auction Insights report, and tells the
   * percentage of impressions that your ads outranked (showed above)
   * another participant in the auction, compared to the total number of
   * impressions that your ads were eligible for.
   * Any value below 0.1 is reported as 0.0999.
   *
   * This metric is not publicly available.
   */
  auctionInsightSearchOutrankingShare?:
    | number
    | undefined;
  /**
   * This metric is part of the Auction Insights report, and tells how often
   * another participant's ad received an impression when your ad also received
   * an impression.
   *
   * This metric is not publicly available.
   */
  auctionInsightSearchOverlapRate?:
    | number
    | undefined;
  /**
   * This metric is part of the Auction Insights report, and tells how often
   * another participant's ad was shown in a higher position than yours, when
   * both of your ads were shown at the same page.
   *
   * This metric is not publicly available.
   */
  auctionInsightSearchPositionAboveRate?:
    | number
    | undefined;
  /**
   * This metric is part of the Auction Insights report, and tells how often
   * the ads of another participant showed adjacent to the top organic search
   * results. This percentage is computed only over the auctions that you
   * appeared in the page.
   *
   * This metric is not publicly available.
   */
  auctionInsightSearchTopImpressionPercentage?:
    | number
    | undefined;
  /**
   * The average amount you pay per interaction. This amount is the total cost
   * of your ads divided by the total number of interactions.
   */
  averageCost?:
    | number
    | undefined;
  /**
   * The total cost of all clicks divided by the total number of clicks
   * received.
   */
  averageCpc?:
    | number
    | undefined;
  /**
   * The average amount that you've been charged for an ad engagement. This
   * amount is the total cost of all ad engagements divided by the total number
   * of ad engagements.
   */
  averageCpe?:
    | number
    | undefined;
  /** Average cost-per-thousand impressions (CPM). */
  averageCpm?:
    | number
    | undefined;
  /**
   * The average amount you pay each time someone views your ad.
   * The average CPV is defined by the total cost of all ad views divided by
   * the number of views.
   */
  averageCpv?:
    | number
    | undefined;
  /** Average number of pages viewed per session. */
  averagePageViews?:
    | number
    | undefined;
  /**
   * Total duration of all sessions (in seconds) / number of sessions. Imported
   * from Google Analytics.
   */
  averageTimeOnSite?:
    | number
    | undefined;
  /** An indication of how other advertisers are bidding on similar products. */
  benchmarkAverageMaxCpc?:
    | number
    | undefined;
  /** Number of app installs. */
  biddableAppInstallConversions?:
    | number
    | undefined;
  /** Number of in-app actions. */
  biddableAppPostInstallConversions?:
    | number
    | undefined;
  /**
   * An indication on how other advertisers' Shopping ads for similar products
   * are performing based on how often people who see their ad click on it.
   */
  benchmarkCtr?:
    | number
    | undefined;
  /**
   * Percentage of clicks where the user only visited a single page on your
   * site. Imported from Google Analytics.
   */
  bounceRate?:
    | number
    | undefined;
  /** The number of clicks. */
  clicks?:
    | Long
    | undefined;
  /**
   * The number of times your ad or your site's listing in the unpaid
   * results was clicked. See the help page at
   * https://support.google.com/google-ads/answer/3097241 for details.
   */
  combinedClicks?:
    | Long
    | undefined;
  /**
   * The number of times your ad or your site's listing in the unpaid
   * results was clicked (combined_clicks) divided by combined_queries. See the
   * help page at https://support.google.com/google-ads/answer/3097241 for
   * details.
   */
  combinedClicksPerQuery?:
    | number
    | undefined;
  /**
   * The number of searches that returned pages from your site in the unpaid
   * results or showed one of your text ads. See the help page at
   * https://support.google.com/google-ads/answer/3097241 for details.
   */
  combinedQueries?:
    | Long
    | undefined;
  /**
   * The estimated percent of times that your ad was eligible to show
   * on the Display Network but didn't because your budget was too low.
   * Note: Content budget lost impression share is reported in the range of 0
   * to 0.9. Any value above 0.9 is reported as 0.9001.
   */
  contentBudgetLostImpressionShare?:
    | number
    | undefined;
  /**
   * The impressions you've received on the Display Network divided
   * by the estimated number of impressions you were eligible to receive.
   * Note: Content impression share is reported in the range of 0.1 to 1. Any
   * value below 0.1 is reported as 0.0999.
   */
  contentImpressionShare?:
    | number
    | undefined;
  /**
   * The last date/time a conversion tag for this conversion action successfully
   * fired and was seen by Google Ads. This firing event may not have been the
   * result of an attributable conversion (for example, because the tag was
   * fired from a browser that did not previously click an ad from an
   * appropriate advertiser). The date/time is in the customer's time zone.
   */
  conversionLastReceivedRequestDateTime?:
    | string
    | undefined;
  /**
   * The date of the most recent conversion for this conversion action. The date
   * is in the customer's time zone.
   */
  conversionLastConversionDate?:
    | string
    | undefined;
  /**
   * The estimated percentage of impressions on the Display Network
   * that your ads didn't receive due to poor Ad Rank.
   * Note: Content rank lost impression share is reported in the range of 0
   * to 0.9. Any value above 0.9 is reported as 0.9001.
   */
  contentRankLostImpressionShare?:
    | number
    | undefined;
  /**
   * Conversions from interactions divided by the number of ad interactions
   * (such as clicks for text ads or views for video ads). This only includes
   * conversion actions which include_in_conversions_metric attribute is set to
   * true. If you use conversion-based bidding, your bid strategies will
   * optimize for these conversions.
   */
  conversionsFromInteractionsRate?:
    | number
    | undefined;
  /**
   * The value of conversions. This only includes conversion actions which
   * include_in_conversions_metric attribute is set to true. If you use
   * conversion-based bidding, your bid strategies will optimize for these
   * conversions.
   */
  conversionsValue?:
    | number
    | undefined;
  /**
   * The value of conversions. This only includes conversion actions which
   * include_in_conversions_metric attribute is set to true. If you use
   * conversion-based bidding, your bid strategies will optimize for these
   * conversions. When this column is selected with date, the values in date
   * column means the conversion date. Details for the by_conversion_date
   * columns are available at
   * https://support.google.com/google-ads/answer/9549009.
   */
  conversionsValueByConversionDate?:
    | number
    | undefined;
  /**
   * New customers' lifetime conversion value. If you have set up
   * customer acquisition goal at either account level or campaign level, this
   * will include the additional conversion value from new customers for
   * biddable conversions. If your campaign has adopted the customer
   * acquisition goal and selected "bid higher for new customers", these values
   * will be included in "conversions_value" for optimization. See
   * https://support.google.com/google-ads/answer/12080169 for more details.
   */
  newCustomerLifetimeValue?:
    | number
    | undefined;
  /**
   * The value of conversions divided by the cost of ad interactions. This only
   * includes conversion actions which include_in_conversions_metric attribute
   * is set to true. If you use conversion-based bidding, your bid strategies
   * will optimize for these conversions.
   */
  conversionsValuePerCost?:
    | number
    | undefined;
  /**
   * The value of conversions from interactions divided by the number of ad
   * interactions. This only includes conversion actions which
   * include_in_conversions_metric attribute is set to true. If you use
   * conversion-based bidding, your bid strategies will optimize for these
   * conversions.
   */
  conversionsFromInteractionsValuePerInteraction?:
    | number
    | undefined;
  /**
   * The number of conversions. This only includes conversion actions which
   * include_in_conversions_metric attribute is set to true. If you use
   * conversion-based bidding, your bid strategies will optimize for these
   * conversions.
   */
  conversions?:
    | number
    | undefined;
  /**
   * The number of conversions. This only includes conversion actions which
   * include_in_conversions_metric attribute is set to true. If you use
   * conversion-based bidding, your bid strategies will optimize for these
   * conversions. When this column is selected with date, the values in date
   * column means the conversion date. Details for the by_conversion_date
   * columns are available at
   * https://support.google.com/google-ads/answer/9549009.
   */
  conversionsByConversionDate?:
    | number
    | undefined;
  /**
   * The sum of your cost-per-click (CPC) and cost-per-thousand impressions
   * (CPM) costs during this period.
   */
  costMicros?:
    | Long
    | undefined;
  /** The cost of ad interactions divided by all conversions. */
  costPerAllConversions?:
    | number
    | undefined;
  /**
   * The cost of ad interactions divided by conversions. This only includes
   * conversion actions which include_in_conversions_metric attribute is set to
   * true. If you use conversion-based bidding, your bid strategies will
   * optimize for these conversions.
   */
  costPerConversion?:
    | number
    | undefined;
  /**
   * The cost of ad interactions divided by current model attributed
   * conversions. This only includes conversion actions which
   * include_in_conversions_metric attribute is set to true. If you use
   * conversion-based bidding, your bid strategies will optimize for these
   * conversions.
   */
  costPerCurrentModelAttributedConversion?:
    | number
    | undefined;
  /**
   * Conversions from when a customer clicks on a Google Ads ad on one device,
   * then converts on a different device or browser.
   * Cross-device conversions are already included in all_conversions.
   */
  crossDeviceConversions?:
    | number
    | undefined;
  /** The sum of the value of cross-device conversions, in micros. */
  crossDeviceConversionsValueMicros?:
    | Long
    | undefined;
  /**
   * The number of clicks your ad receives (Clicks) divided by the number
   * of times your ad is shown (Impressions).
   */
  ctr?:
    | number
    | undefined;
  /**
   * Shows how your historic conversions data would look under the attribution
   * model you've currently selected. This only includes conversion actions
   * which include_in_conversions_metric attribute is set to true. If you use
   * conversion-based bidding, your bid strategies will optimize for these
   * conversions.
   */
  currentModelAttributedConversions?:
    | number
    | undefined;
  /**
   * Current model attributed conversions from interactions divided by the
   * number of ad interactions (such as clicks for text ads or views for video
   * ads). This only includes conversion actions which
   * include_in_conversions_metric attribute is set to true. If you use
   * conversion-based bidding, your bid strategies will optimize for these
   * conversions.
   */
  currentModelAttributedConversionsFromInteractionsRate?:
    | number
    | undefined;
  /**
   * The value of current model attributed conversions from interactions divided
   * by the number of ad interactions. This only includes conversion actions
   * which include_in_conversions_metric attribute is set to true. If you use
   * conversion-based bidding, your bid strategies will optimize for these
   * conversions.
   */
  currentModelAttributedConversionsFromInteractionsValuePerInteraction?:
    | number
    | undefined;
  /**
   * The value of current model attributed conversions. This only includes
   * conversion actions which include_in_conversions_metric attribute is set to
   * true. If you use conversion-based bidding, your bid strategies will
   * optimize for these conversions.
   */
  currentModelAttributedConversionsValue?:
    | number
    | undefined;
  /**
   * The value of current model attributed conversions divided by the cost of ad
   * interactions. This only includes conversion actions which
   * include_in_conversions_metric attribute is set to true. If you use
   * conversion-based bidding, your bid strategies will optimize for these
   * conversions.
   */
  currentModelAttributedConversionsValuePerCost?:
    | number
    | undefined;
  /**
   * How often people engage with your ad after it's shown to them. This is the
   * number of ad expansions divided by the number of times your ad is shown.
   */
  engagementRate?:
    | number
    | undefined;
  /**
   * The number of engagements.
   * An engagement occurs when a viewer expands your Lightbox ad. Also, in the
   * future, other ad types may support engagement metrics.
   */
  engagements?:
    | Long
    | undefined;
  /** Average lead value based on clicks. */
  hotelAverageLeadValueMicros?:
    | number
    | undefined;
  /**
   * Commission bid rate in micros. A 20% commission is represented as
   * 200,000.
   */
  hotelCommissionRateMicros?:
    | Long
    | undefined;
  /**
   * Expected commission cost. The result of multiplying the commission value
   * times the hotel_commission_rate in advertiser currency.
   */
  hotelExpectedCommissionCost?:
    | number
    | undefined;
  /**
   * The average price difference between the price offered by reporting hotel
   * advertiser and the cheapest price offered by the competing advertiser.
   */
  hotelPriceDifferencePercentage?:
    | number
    | undefined;
  /**
   * The number of impressions that hotel partners could have had given their
   * feed performance.
   */
  hotelEligibleImpressions?:
    | Long
    | undefined;
  /** The creative historical quality score. */
  historicalCreativeQualityScore: QualityScoreBucketEnum_QualityScoreBucket;
  /** The quality of historical landing page experience. */
  historicalLandingPageQualityScore: QualityScoreBucketEnum_QualityScoreBucket;
  /** The historical quality score. */
  historicalQualityScore?:
    | Long
    | undefined;
  /** The historical search predicted click through rate (CTR). */
  historicalSearchPredictedCtr: QualityScoreBucketEnum_QualityScoreBucket;
  /** The number of times the ad was forwarded to someone else as a message. */
  gmailForwards?:
    | Long
    | undefined;
  /**
   * The number of times someone has saved your Gmail ad to their inbox as a
   * message.
   */
  gmailSaves?:
    | Long
    | undefined;
  /**
   * The number of clicks to the landing page on the expanded state of Gmail
   * ads.
   */
  gmailSecondaryClicks?:
    | Long
    | undefined;
  /**
   * The number of times a store's location-based ad was shown.
   *
   * This metric applies to feed items only.
   */
  impressionsFromStoreReach?:
    | Long
    | undefined;
  /**
   * Count of how often your ad has appeared on a search results page or
   * website on the Google Network.
   */
  impressions?:
    | Long
    | undefined;
  /**
   * How often people interact with your ad after it is shown to them.
   * This is the number of interactions divided by the number of times your ad
   * is shown.
   */
  interactionRate?:
    | number
    | undefined;
  /**
   * The number of interactions.
   * An interaction is the main user action associated with an ad format-clicks
   * for text and shopping ads, views for video ads, and so on.
   */
  interactions?:
    | Long
    | undefined;
  /** The types of payable and free interactions. */
  interactionEventTypes: InteractionEventTypeEnum_InteractionEventType[];
  /**
   * The percentage of clicks filtered out of your total number of clicks
   * (filtered + non-filtered clicks) during the reporting period.
   */
  invalidClickRate?:
    | number
    | undefined;
  /** Number of clicks Google considers illegitimate and doesn't charge you for. */
  invalidClicks?:
    | Long
    | undefined;
  /**
   * Number of message chats initiated for Click To Message impressions that
   * were message tracking eligible.
   */
  messageChats?:
    | Long
    | undefined;
  /** Number of Click To Message impressions that were message tracking eligible. */
  messageImpressions?:
    | Long
    | undefined;
  /**
   * Number of message chats initiated (message_chats) divided by the number
   * of message impressions (message_impressions).
   * Rate at which a user initiates a message chat from an ad impression with
   * a messaging option and message tracking enabled.
   * Note that this rate can be more than 1.0 for a given message impression.
   */
  messageChatRate?:
    | number
    | undefined;
  /** The percentage of mobile clicks that go to a mobile-friendly page. */
  mobileFriendlyClicksPercentage?:
    | number
    | undefined;
  /** Total optimization score uplift of all recommendations. */
  optimizationScoreUplift?:
    | number
    | undefined;
  /**
   * URL for the optimization score page in the Google Ads web interface.
   * This metric can be selected from `customer` or `campaign`, and can be
   * segmented by `segments.recommendation_type`. For example, `SELECT
   * metrics.optimization_score_url, segments.recommendation_type FROM
   * customer` will return a URL for each unique (customer, recommendation_type)
   * combination.
   */
  optimizationScoreUrl?:
    | string
    | undefined;
  /**
   * The number of times someone clicked your site's listing in the unpaid
   * results for a particular query. See the help page at
   * https://support.google.com/google-ads/answer/3097241 for details.
   */
  organicClicks?:
    | Long
    | undefined;
  /**
   * The number of times someone clicked your site's listing in the unpaid
   * results (organic_clicks) divided by the total number of searches that
   * returned pages from your site (organic_queries). See the help page at
   * https://support.google.com/google-ads/answer/3097241 for details.
   */
  organicClicksPerQuery?:
    | number
    | undefined;
  /**
   * The number of listings for your site in the unpaid search results. See the
   * help page at https://support.google.com/google-ads/answer/3097241 for
   * details.
   */
  organicImpressions?:
    | Long
    | undefined;
  /**
   * The number of times a page from your site was listed in the unpaid search
   * results (organic_impressions) divided by the number of searches returning
   * your site's listing in the unpaid results (organic_queries). See the help
   * page at https://support.google.com/google-ads/answer/3097241 for details.
   */
  organicImpressionsPerQuery?:
    | number
    | undefined;
  /**
   * The total number of searches that returned your site's listing in the
   * unpaid results. See the help page at
   * https://support.google.com/google-ads/answer/3097241 for details.
   */
  organicQueries?:
    | Long
    | undefined;
  /**
   * Percentage of first-time sessions (from people who had never visited your
   * site before). Imported from Google Analytics.
   */
  percentNewVisitors?:
    | number
    | undefined;
  /** Number of offline phone calls. */
  phoneCalls?:
    | Long
    | undefined;
  /** Number of offline phone impressions. */
  phoneImpressions?:
    | Long
    | undefined;
  /**
   * Number of phone calls received (phone_calls) divided by the number of
   * times your phone number is shown (phone_impressions).
   */
  phoneThroughRate?:
    | number
    | undefined;
  /**
   * Your clickthrough rate (Ctr) divided by the average clickthrough rate of
   * all advertisers on the websites that show your ads. Measures how your ads
   * perform on Display Network sites compared to other ads on the same sites.
   */
  relativeCtr?:
    | number
    | undefined;
  /**
   * The percentage of the customer's Shopping or Search ad impressions that are
   * shown in the most prominent Shopping position. See
   * https://support.google.com/google-ads/answer/7501826
   * for details. Any value below 0.1 is reported as 0.0999.
   */
  searchAbsoluteTopImpressionShare?:
    | number
    | undefined;
  /**
   * The number estimating how often your ad wasn't the very first ad among the
   * top ads in the search results due to a low budget. Note: Search
   * budget lost absolute top impression share is reported in the range of 0 to
   * 0.9. Any value above 0.9 is reported as 0.9001.
   */
  searchBudgetLostAbsoluteTopImpressionShare?:
    | number
    | undefined;
  /**
   * The estimated percent of times that your ad was eligible to show on the
   * Search Network but didn't because your budget was too low. Note: Search
   * budget lost impression share is reported in the range of 0 to 0.9. Any
   * value above 0.9 is reported as 0.9001.
   */
  searchBudgetLostImpressionShare?:
    | number
    | undefined;
  /**
   * The number estimating how often your ad didn't show adjacent to the top
   * organic search results due to a low budget. Note: Search
   * budget lost top impression share is reported in the range of 0 to 0.9. Any
   * value above 0.9 is reported as 0.9001.
   */
  searchBudgetLostTopImpressionShare?:
    | number
    | undefined;
  /**
   * The number of clicks you've received on the Search Network
   * divided by the estimated number of clicks you were eligible to receive.
   * Note: Search click share is reported in the range of 0.1 to 1. Any value
   * below 0.1 is reported as 0.0999.
   */
  searchClickShare?:
    | number
    | undefined;
  /**
   * The impressions you've received divided by the estimated number of
   * impressions you were eligible to receive on the Search Network for search
   * terms that matched your keywords exactly (or were close variants of your
   * keyword), regardless of your keyword match types. Note: Search exact match
   * impression share is reported in the range of 0.1 to 1. Any value below 0.1
   * is reported as 0.0999.
   */
  searchExactMatchImpressionShare?:
    | number
    | undefined;
  /**
   * The impressions you've received on the Search Network divided
   * by the estimated number of impressions you were eligible to receive.
   * Note: Search impression share is reported in the range of 0.1 to 1. Any
   * value below 0.1 is reported as 0.0999.
   */
  searchImpressionShare?:
    | number
    | undefined;
  /**
   * The number estimating how often your ad wasn't the very first ad among the
   * top ads in the search results due to poor Ad Rank.
   * Note: Search rank lost absolute top impression share is reported in the
   * range of 0 to 0.9. Any value above 0.9 is reported as 0.9001.
   */
  searchRankLostAbsoluteTopImpressionShare?:
    | number
    | undefined;
  /**
   * The estimated percentage of impressions on the Search Network
   * that your ads didn't receive due to poor Ad Rank.
   * Note: Search rank lost impression share is reported in the range of 0 to
   * 0.9. Any value above 0.9 is reported as 0.9001.
   */
  searchRankLostImpressionShare?:
    | number
    | undefined;
  /**
   * The number estimating how often your ad didn't show adjacent to the top
   * organic search results due to poor Ad Rank.
   * Note: Search rank lost top impression share is reported in the range of 0
   * to 0.9. Any value above 0.9 is reported as 0.9001.
   */
  searchRankLostTopImpressionShare?:
    | number
    | undefined;
  /**
   * The impressions you've received among the top ads compared to the estimated
   * number of impressions you were eligible to receive among the top ads.
   * Note: Search top impression share is reported in the range of 0.1 to 1. Any
   * value below 0.1 is reported as 0.0999.
   *
   * Top ads are generally above the top organic results, although they may show
   * below the top organic results on certain queries.
   */
  searchTopImpressionShare?:
    | number
    | undefined;
  /** Search volume range for a search term insight category. */
  searchVolume?:
    | SearchVolumeRange
    | undefined;
  /**
   * A measure of how quickly your page loads after clicks on your mobile ads.
   * The score is a range from 1 to 10, 10 being the fastest.
   */
  speedScore?:
    | Long
    | undefined;
  /**
   * The average Target CPA, or unset if not available (for example, for
   * campaigns that had traffic from portfolio bidding strategies or non-tCPA).
   */
  averageTargetCpaMicros?:
    | Long
    | undefined;
  /**
   * The average Target ROAS, or unset if not available (for example, for
   * campaigns that had traffic from portfolio bidding strategies or non-tROAS).
   */
  averageTargetRoas?:
    | number
    | undefined;
  /**
   * The percent of your ad impressions that are shown adjacent to the top
   * organic search results.
   */
  topImpressionPercentage?:
    | number
    | undefined;
  /**
   * The percentage of ad clicks to Accelerated Mobile Pages (AMP) landing pages
   * that reach a valid AMP page.
   */
  validAcceleratedMobilePagesClicksPercentage?:
    | number
    | undefined;
  /** The value of all conversions divided by the number of all conversions. */
  valuePerAllConversions?:
    | number
    | undefined;
  /**
   * The value of all conversions divided by the number of all conversions. When
   * this column is selected with date, the values in date column means the
   * conversion date. Details for the by_conversion_date columns are available
   * at https://support.google.com/google-ads/answer/9549009.
   */
  valuePerAllConversionsByConversionDate?:
    | number
    | undefined;
  /**
   * The value of conversions divided by the number of conversions. This only
   * includes conversion actions which include_in_conversions_metric attribute
   * is set to true. If you use conversion-based bidding, your bid strategies
   * will optimize for these conversions.
   */
  valuePerConversion?:
    | number
    | undefined;
  /**
   * The value of conversions divided by the number of conversions. This only
   * includes conversion actions which include_in_conversions_metric attribute
   * is set to true. If you use conversion-based bidding, your bid strategies
   * will optimize for these conversions. When this column is selected with
   * date, the values in date column means the conversion date. Details for the
   * by_conversion_date columns are available at
   * https://support.google.com/google-ads/answer/9549009.
   */
  valuePerConversionsByConversionDate?:
    | number
    | undefined;
  /**
   * The value of current model attributed conversions divided by the number of
   * the conversions. This only includes conversion actions which
   * include_in_conversions_metric attribute is set to true. If you use
   * conversion-based bidding, your bid strategies will optimize for these
   * conversions.
   */
  valuePerCurrentModelAttributedConversion?:
    | number
    | undefined;
  /** Percentage of impressions where the viewer watched all of your video. */
  videoQuartileP100Rate?:
    | number
    | undefined;
  /** Percentage of impressions where the viewer watched 25% of your video. */
  videoQuartileP25Rate?:
    | number
    | undefined;
  /** Percentage of impressions where the viewer watched 50% of your video. */
  videoQuartileP50Rate?:
    | number
    | undefined;
  /** Percentage of impressions where the viewer watched 75% of your video. */
  videoQuartileP75Rate?:
    | number
    | undefined;
  /**
   * The number of views your TrueView video ad receives divided by its number
   * of impressions, including thumbnail impressions for TrueView in-display
   * ads.
   */
  videoViewRate?:
    | number
    | undefined;
  /** The number of times your video ads were viewed. */
  videoViews?:
    | Long
    | undefined;
  /**
   * The total number of view-through conversions.
   * These happen when a customer sees an image or rich media ad, then later
   * completes a conversion on your site without interacting with (for example,
   * clicking on) another ad.
   */
  viewThroughConversions?:
    | Long
    | undefined;
  /** The number of iOS Store Kit Ad Network conversions. */
  skAdNetworkInstalls: Long;
  /** The total number of iOS Store Kit Ad Network conversions. */
  skAdNetworkTotalConversions: Long;
  /**
   * Clicks from properties not owned by the publisher for which the traffic
   * the publisher has paid for or acquired through incentivized activity
   */
  publisherPurchasedClicks: Long;
  /**
   * Clicks from properties for which the traffic the publisher has not paid
   * for or acquired through incentivized activity
   */
  publisherOrganicClicks: Long;
  /**
   * Clicks from traffic which is not identified as "Publisher Purchased" or
   * "Publisher Organic"
   */
  publisherUnknownClicks: Long;
  /**
   * Number of call button clicks on any location surface after a chargeable ad
   * event (click or impression). This measure is coming from Asset based
   * location.
   */
  allConversionsFromLocationAssetClickToCall?:
    | number
    | undefined;
  /**
   * Number of driving directions clicks on any location surface after a
   * chargeable ad event (click or impression). This measure is coming
   * from Asset based location.
   */
  allConversionsFromLocationAssetDirections?:
    | number
    | undefined;
  /**
   * Number of menu link clicks on any location surface after a chargeable ad
   * event (click or impression). This measure is coming from Asset based
   * location.
   */
  allConversionsFromLocationAssetMenu?:
    | number
    | undefined;
  /**
   * Number of order clicks on any location surface after a chargeable ad event
   * (click or impression). This measure is coming from Asset based
   * location.
   */
  allConversionsFromLocationAssetOrder?:
    | number
    | undefined;
  /**
   * Number of other types of local action clicks on any location surface after
   * a chargeable ad event (click or impression). This measure is coming
   * from Asset based location.
   */
  allConversionsFromLocationAssetOtherEngagement?:
    | number
    | undefined;
  /**
   * Estimated number of visits to the store after a chargeable
   * ad event (click or impression). This measure is coming from Asset
   * based location.
   */
  allConversionsFromLocationAssetStoreVisits?:
    | number
    | undefined;
  /**
   * Number of website URL clicks on any location surface after a chargeable ad
   * event (click or impression). This measure is coming from Asset based
   * location.
   */
  allConversionsFromLocationAssetWebsite?:
    | number
    | undefined;
  /**
   * Number of impressions in which the store location was shown or the location
   * was used for targeting. This measure is coming from Asset based
   * location.
   */
  eligibleImpressionsFromLocationAssetStoreReach?:
    | Long
    | undefined;
  /**
   * Number of call button clicks on any location surface after an impression.
   * This measure is coming from Asset based location.
   */
  viewThroughConversionsFromLocationAssetClickToCall?:
    | number
    | undefined;
  /**
   * Number of driving directions clicks on any location surface after an
   * impression. This measure is coming from Asset based location.
   */
  viewThroughConversionsFromLocationAssetDirections?:
    | number
    | undefined;
  /**
   * Number of menu link clicks on any location surface after an impression.
   * This measure is coming from Asset based location.
   */
  viewThroughConversionsFromLocationAssetMenu?:
    | number
    | undefined;
  /**
   * Number of order clicks on any location surface after an impression. This
   * measure is coming from Asset based location.
   */
  viewThroughConversionsFromLocationAssetOrder?:
    | number
    | undefined;
  /**
   * Number of other types of local action clicks on any location surface after
   * an impression. This measure is coming from Asset based location.
   */
  viewThroughConversionsFromLocationAssetOtherEngagement?:
    | number
    | undefined;
  /**
   * Estimated number of visits to the store after an impression.
   * This measure is coming from Asset based location.
   */
  viewThroughConversionsFromLocationAssetStoreVisits?:
    | number
    | undefined;
  /**
   * Number of website URL clicks on any location surface after an impression.
   * This measure is coming from Asset based location.
   */
  viewThroughConversionsFromLocationAssetWebsite?:
    | number
    | undefined;
  /**
   * Orders is the total number of purchase conversions you received attributed
   * to your ads.
   * How it works: You report conversions with cart data for
   * completed purchases on your website. If a conversion is attributed to
   * previous interactions with your ads (clicks for text or Shopping ads, views
   * for video ads etc.) it's counted as an order.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat and a shirt in an order on your website. Even though they bought 2
   * products, this would count as 1 order.
   * This metric is only available if you report conversions with cart data.
   */
  orders?:
    | number
    | undefined;
  /**
   * Average order value is the average revenue you made per order attributed to
   * your ads.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. Average order value is the total revenue from your orders
   * divided by the total number of orders.
   * Example: You received 3 orders which made $10, $15 and $20 worth of
   * revenue. The average order value is $15 = ($10 + $15 + $20)/3.
   * This metric is only available if you report conversions with cart data.
   */
  averageOrderValueMicros?:
    | Long
    | undefined;
  /**
   * Average cart size is the average number of products in each order
   * attributed to your ads.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. Average cart size is the total number of products sold
   * divided by the total number of orders you received.
   * Example: You received 2 orders, the first included 3 products and the
   * second included 2. The average cart size is 2.5 products = (3+2)/2.
   * This metric is only available if you report conversions with cart data.
   */
  averageCartSize?:
    | number
    | undefined;
  /**
   * Cost of goods sold (COGS) is the total cost of the products you sold in
   * orders attributed to your ads.
   * How it works: You can add a cost of goods sold value to every product in
   * Merchant Center. If you report conversions with cart data, the products you
   * sold are matched with their cost of goods sold value and this can be used
   * to calculate the gross profit you made on each order.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat and a shirt. The hat has a cost of goods sold value of $3, the shirt
   * has a cost of goods sold value of $5. The cost of goods sold for this order
   * is $8 = $3 + $5.
   * This metric is only available if you report conversions with cart data.
   */
  costOfGoodsSoldMicros?:
    | Long
    | undefined;
  /**
   * Gross profit is the profit you made from orders attributed to your ads
   * minus the cost of goods sold (COGS).
   * How it works: Gross profit is the revenue you made from sales attributed to
   * your ads minus cost of goods sold. Gross profit calculations only include
   * products that have a cost of goods sold value in Merchant Center.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat and a shirt in an order from your website. The hat is priced $10 and
   * the shirt is priced $20. The hat has a cost of goods sold value of $3, but
   * the shirt has no cost of goods sold value. Gross profit for this order will
   * only take into account the hat, so it's $7 = $10 - $3.
   * This metric is only available if you report conversions with cart data.
   */
  grossProfitMicros?:
    | Long
    | undefined;
  /**
   * Gross profit margin is the percentage gross profit you made from orders
   * attributed to your ads, after taking out the cost of goods sold (COGS).
   * How it works: You report conversions with cart data for completed purchases
   * on your website. Gross profit margin is the gross profit you made divided
   * by your total revenue and multiplied by 100%. Gross profit margin
   * calculations only include products that have a cost of goods sold value in
   * Merchant Center.
   * Example: Someone bought a hat and a shirt in an order on your website. The
   * hat is priced $10 and has a cost of goods sold value of $3. The shirt is
   * priced $20 but has no cost of goods sold value. Gross profit margin for
   * this order will only take into account the hat because it has a cost of
   * goods sold value, so it's 70% = ($10 - $3)/$10 x 100%.
   * This metric is only available if you report conversions with cart data.
   */
  grossProfitMargin?:
    | number
    | undefined;
  /**
   * Revenue is the total amount you made from orders attributed to your ads.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. Revenue is the total value of all the orders you received
   * attributed to your ads, minus any discount.
   * Example: Someone clicked on a Shopping ad  for a hat then bought the same
   * hat and a shirt in an order from your website. The hat is priced $10 and
   * the shirt is priced $20. The entire order has a $5 discount. The revenue
   * from this order is $25 = ($10 + $20) - $5.
   * This metric is only available if you report conversions with cart data.
   */
  revenueMicros?:
    | Long
    | undefined;
  /**
   * Units sold is the total number of products sold from orders attributed to
   * your ads.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. Units sold is the total number of products sold from all
   * orders attributed to your ads.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat, a shirt and a jacket. The units sold in this order is 3.
   * This metric is only available if you report conversions with cart data.
   */
  unitsSold?:
    | number
    | undefined;
  /**
   * Cross-sell cost of goods sold (COGS) is the total cost of products sold as
   * a result of advertising a different product.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the order the customer
   * places is a sold product. If these products don't match then this is
   * considered cross-sell. Cross-sell cost of goods sold is the total cost of
   * the products sold that weren't advertised.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat and a shirt. The hat has a cost of goods sold value of $3, the shirt
   * has a cost of goods sold value of $5. The cross-sell cost of goods sold for
   * this order is $5.
   * This metric is only available if you report conversions with cart data.
   */
  crossSellCostOfGoodsSoldMicros?:
    | Long
    | undefined;
  /**
   * Cross-sell gross profit is the profit you made from products sold as a
   * result of advertising a different product, minus cost of goods sold (COGS).
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the purchase is a sold
   * product. If these products don't match then this is considered cross-sell.
   * Cross-sell gross profit is the revenue you made from cross-sell attributed
   * to your ads minus the cost of the goods sold.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat and a shirt. The shirt is priced $20 and has a cost of goods sold value
   * of $5. The cross-sell gross profit of this order is $15 = $20 - $5.
   * This metric is only available if you report conversions with cart data.
   */
  crossSellGrossProfitMicros?:
    | Long
    | undefined;
  /**
   * Cross-sell revenue is the total amount you made from products sold as a
   * result of advertising a different product.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the order the customer
   * places is a sold product. If these products don't match then this is
   * considered cross-sell. Cross-sell revenue is the total value you made from
   * cross-sell attributed to your ads.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat and a shirt. The hat is priced $10 and the shirt is priced $20. The
   * cross-sell revenue of this order is $20.
   * This metric is only available if you report conversions with cart data.
   */
  crossSellRevenueMicros?:
    | Long
    | undefined;
  /**
   * Cross-sell units sold is the total number of products sold as a result of
   * advertising a different product.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the order the customer
   * places is a sold product. If these products don't match then this is
   * considered cross-sell. Cross-sell units sold is the total number of
   * cross-sold products from all orders attributed to your ads.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat, a shirt and a jacket. The cross-sell units sold in this order is 2.
   * This metric is only available if you report conversions with cart data.
   */
  crossSellUnitsSold?:
    | number
    | undefined;
  /**
   * Lead cost of goods sold (COGS) is the total cost of products sold as a
   * result of advertising the same product.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with has an associated
   * product (see Shopping Ads) then this product is considered the advertised
   * product. Any product included in the order the customer places is a sold
   * product. If the advertised and sold products match, then the cost of these
   * goods is counted under lead cost of goods sold.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat and a shirt. The hat has a cost of goods sold value of $3, the shirt
   * has a cost of goods sold value of $5. The lead cost of goods sold for this
   * order is $3.
   * This metric is only available if you report conversions with cart data.
   */
  leadCostOfGoodsSoldMicros?:
    | Long
    | undefined;
  /**
   * Lead gross profit is the profit you made from products sold as a result of
   * advertising the same product, minus cost of goods sold (COGS).
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the order the customer
   * places is a sold product. If the advertised and sold products match, then
   * the revenue you made from these sales minus the cost of goods sold is your
   * lead gross profit.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat and a shirt. The hat is priced $10 and has a cost of goods sold value
   * of $3. The lead gross profit of this order is $7 = $10 - $3.
   * This metric is only available if you report conversions with cart data.
   */
  leadGrossProfitMicros?:
    | Long
    | undefined;
  /**
   * Lead revenue is the total amount you made from products sold as a result of
   * advertising the same product.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the order the customer
   * places is a sold product. If the advertised and sold products match, then
   * the total value you made from the sales of these products is shown under
   * lead revenue.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat and a shirt. The hat is priced $10 and the shirt is priced $20. The
   * lead revenue of this order is $10.
   * This metric is only available if you report conversions with cart data.
   */
  leadRevenueMicros?:
    | Long
    | undefined;
  /**
   * Lead units sold is the total number of products sold as a result of
   * advertising the same product.
   * How it works: You report conversions with cart data for completed purchases
   * on your website. If the ad that was interacted with before the purchase has
   * an associated product (see Shopping Ads) then this product is considered
   * the advertised product. Any product included in the order the customer
   * places is a sold product. If the advertised and sold products match, then
   * the total number of these products sold is shown under lead units sold.
   * Example: Someone clicked on a Shopping ad for a hat then bought the same
   * hat, a shirt and a jacket. The lead units sold in this order is 1.
   * This metric is only available if you report conversions with cart data.
   */
  leadUnitsSold?:
    | number
    | undefined;
  /**
   * The number of unique users who saw your ad during the requested time
   * period. This metric cannot be aggregated, and can only be requested for
   * date ranges of 92 days or less. This metric is available for following
   * campaign types - Display, Video, Discovery and App.
   */
  uniqueUsers?:
    | Long
    | undefined;
  /**
   * The average number of times a unique user saw your ad during the requested
   * time period. This metric cannot be aggregated, and can only be requested
   * for date ranges of 92 days or less. This metric is available for following
   * campaign types - Display, Video, Discovery and App.
   */
  averageImpressionFrequencyPerUser?:
    | number
    | undefined;
  /**
   * Number of linked resources in which the asset is used.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   */
  linkedEntitiesCount?:
    | Long
    | undefined;
  /**
   * A list of up to 20 sample linked resources in which the asset is used.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   */
  linkedSampleEntities: string[];
  /**
   * A list of up to 20 sample linked resources with impressions in the last 30
   * days where the asset had the AssetPerformanceLabel.BEST performance label.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   */
  sampleBestPerformanceEntities: string[];
  /**
   * A list of up to 20 sample linked resources with impressions in the last 30
   * days where the asset had the AssetPerformanceLabel.GOOD performance label.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   */
  sampleGoodPerformanceEntities: string[];
  /**
   * A list of up to 20 sample linked resources with impressions in the last 30
   * days where the asset had the AssetPerformanceLabel.LOW performance label.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   */
  sampleLowPerformanceEntities: string[];
  /**
   * A list of up to 20 sample linked resources with impressions in the last 30
   * days where the asset had the AssetPerformanceLabel.LEARNING performance
   * label.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   */
  sampleLearningPerformanceEntities: string[];
  /**
   * A list of up to 20 sample linked resources with impressions in the last 30
   * days where the assets had AssetPerformanceLabel performance label other
   * than BEST, GOOD, LOW, and LEARNING.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   */
  sampleUnratedPerformanceEntities: string[];
  /**
   * Number of total usages in which the asset is pinned.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   * This metric is only supported in Search channel.
   */
  assetPinnedTotalCount?:
    | Long
    | undefined;
  /**
   * Number of entities in which the asset is pinned to headline 1.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   * This metric is only supported in Search channel.
   */
  assetPinnedAsHeadlinePositionOneCount?:
    | Long
    | undefined;
  /**
   * Number of entities in which the asset is pinned to headline 2.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   * This metric is only supported in Search channel.
   */
  assetPinnedAsHeadlinePositionTwoCount?:
    | Long
    | undefined;
  /**
   * Number of entities in which the asset is pinned to headline 3.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   * This metric is only supported in Search channel.
   */
  assetPinnedAsHeadlinePositionThreeCount?:
    | Long
    | undefined;
  /**
   * Number of entities in which the asset is pinned to description 1.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   * This metric is only supported in Search channel.
   */
  assetPinnedAsDescriptionPositionOneCount?:
    | Long
    | undefined;
  /**
   * Number of entities in which the asset is pinned to description 2.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   * This metric is only supported in Search channel.
   */
  assetPinnedAsDescriptionPositionTwoCount?:
    | Long
    | undefined;
  /**
   * Percentage of impressions the asset received in ads with
   * AssetPerformanceLabel.BEST.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   * This metric is only supported in Search channel.
   */
  assetBestPerformanceImpressionPercentage?:
    | number
    | undefined;
  /**
   * Percentage of impressions the asset received in ads with
   * AssetPerformanceLabel.GOOD.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   * This metric is only supported in Search channel.
   */
  assetGoodPerformanceImpressionPercentage?:
    | number
    | undefined;
  /**
   * Percentage of impressions the asset received in ads with
   * AssetPerformanceLabel.LOW.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   * This metric is only supported in Search channel.
   */
  assetLowPerformanceImpressionPercentage?:
    | number
    | undefined;
  /**
   * Percentage of impressions the asset received in ads with
   * AssetPerformanceLabel.LEARNING.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   * This metric is only supported in Search channel.
   */
  assetLearningPerformanceImpressionPercentage?:
    | number
    | undefined;
  /**
   * Percentage of impressions the asset received in ads with
   * AssetPerformanceLabel other than BEST, GOOD, LOW, and LEARNING.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   * This metric is only supported in Search channel.
   */
  assetUnratedPerformanceImpressionPercentage?:
    | number
    | undefined;
  /**
   * Percentage of cost the asset received in ads with
   * AssetPerformanceLabel.BEST.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   * This metric is only supported in Performance Max channel.
   */
  assetBestPerformanceCostPercentage?:
    | number
    | undefined;
  /**
   * Percentage of cost the asset received in ads with
   * AssetPerformanceLabel.GOOD.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   * This metric is only supported in Performance Max channel.
   */
  assetGoodPerformanceCostPercentage?:
    | number
    | undefined;
  /**
   * Percentage of cost the asset received in ads with
   * AssetPerformanceLabel.LOW.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   * This metric is only supported in Performance Max channel.
   */
  assetLowPerformanceCostPercentage?:
    | number
    | undefined;
  /**
   * Percentage of cost the asset received in ads with
   * AssetPerformanceLabel.LEARNING.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   * This metric is only supported in Performance Max channel.
   */
  assetLearningPerformanceCostPercentage?:
    | number
    | undefined;
  /**
   * Percentage of cost the asset received in ads with AssetPerformanceLabel
   * other than BEST, GOOD, LOW, and LEARNING.
   * This metric can only be selected with ChannelAggregateAssetView and
   * CampaignAggregateAssetView.
   * This metric is only supported in Performance Max channel.
   */
  assetUnratedPerformanceCostPercentage?: number | undefined;
}

/**
 * Search volume range.
 * Actual search volume falls within this range.
 */
export interface SearchVolumeRange {
  /** Lower bound of search volume. */
  min?:
    | Long
    | undefined;
  /** Upper bound of search volume. */
  max?: Long | undefined;
}

function createBaseMetrics(): Metrics {
  return {
    absoluteTopImpressionPercentage: undefined,
    activeViewCpm: undefined,
    activeViewCtr: undefined,
    activeViewImpressions: undefined,
    activeViewMeasurability: undefined,
    activeViewMeasurableCostMicros: undefined,
    activeViewMeasurableImpressions: undefined,
    activeViewViewability: undefined,
    allConversionsFromInteractionsRate: undefined,
    allConversionsValue: undefined,
    allConversionsValueByConversionDate: undefined,
    allNewCustomerLifetimeValue: undefined,
    allConversions: undefined,
    allConversionsByConversionDate: undefined,
    allConversionsValuePerCost: undefined,
    allConversionsFromClickToCall: undefined,
    allConversionsFromDirections: undefined,
    allConversionsFromInteractionsValuePerInteraction: undefined,
    allConversionsFromMenu: undefined,
    allConversionsFromOrder: undefined,
    allConversionsFromOtherEngagement: undefined,
    allConversionsFromStoreVisit: undefined,
    allConversionsFromStoreWebsite: undefined,
    auctionInsightSearchAbsoluteTopImpressionPercentage: undefined,
    auctionInsightSearchImpressionShare: undefined,
    auctionInsightSearchOutrankingShare: undefined,
    auctionInsightSearchOverlapRate: undefined,
    auctionInsightSearchPositionAboveRate: undefined,
    auctionInsightSearchTopImpressionPercentage: undefined,
    averageCost: undefined,
    averageCpc: undefined,
    averageCpe: undefined,
    averageCpm: undefined,
    averageCpv: undefined,
    averagePageViews: undefined,
    averageTimeOnSite: undefined,
    benchmarkAverageMaxCpc: undefined,
    biddableAppInstallConversions: undefined,
    biddableAppPostInstallConversions: undefined,
    benchmarkCtr: undefined,
    bounceRate: undefined,
    clicks: undefined,
    combinedClicks: undefined,
    combinedClicksPerQuery: undefined,
    combinedQueries: undefined,
    contentBudgetLostImpressionShare: undefined,
    contentImpressionShare: undefined,
    conversionLastReceivedRequestDateTime: undefined,
    conversionLastConversionDate: undefined,
    contentRankLostImpressionShare: undefined,
    conversionsFromInteractionsRate: undefined,
    conversionsValue: undefined,
    conversionsValueByConversionDate: undefined,
    newCustomerLifetimeValue: undefined,
    conversionsValuePerCost: undefined,
    conversionsFromInteractionsValuePerInteraction: undefined,
    conversions: undefined,
    conversionsByConversionDate: undefined,
    costMicros: undefined,
    costPerAllConversions: undefined,
    costPerConversion: undefined,
    costPerCurrentModelAttributedConversion: undefined,
    crossDeviceConversions: undefined,
    crossDeviceConversionsValueMicros: undefined,
    ctr: undefined,
    currentModelAttributedConversions: undefined,
    currentModelAttributedConversionsFromInteractionsRate: undefined,
    currentModelAttributedConversionsFromInteractionsValuePerInteraction: undefined,
    currentModelAttributedConversionsValue: undefined,
    currentModelAttributedConversionsValuePerCost: undefined,
    engagementRate: undefined,
    engagements: undefined,
    hotelAverageLeadValueMicros: undefined,
    hotelCommissionRateMicros: undefined,
    hotelExpectedCommissionCost: undefined,
    hotelPriceDifferencePercentage: undefined,
    hotelEligibleImpressions: undefined,
    historicalCreativeQualityScore: 0,
    historicalLandingPageQualityScore: 0,
    historicalQualityScore: undefined,
    historicalSearchPredictedCtr: 0,
    gmailForwards: undefined,
    gmailSaves: undefined,
    gmailSecondaryClicks: undefined,
    impressionsFromStoreReach: undefined,
    impressions: undefined,
    interactionRate: undefined,
    interactions: undefined,
    interactionEventTypes: [],
    invalidClickRate: undefined,
    invalidClicks: undefined,
    messageChats: undefined,
    messageImpressions: undefined,
    messageChatRate: undefined,
    mobileFriendlyClicksPercentage: undefined,
    optimizationScoreUplift: undefined,
    optimizationScoreUrl: undefined,
    organicClicks: undefined,
    organicClicksPerQuery: undefined,
    organicImpressions: undefined,
    organicImpressionsPerQuery: undefined,
    organicQueries: undefined,
    percentNewVisitors: undefined,
    phoneCalls: undefined,
    phoneImpressions: undefined,
    phoneThroughRate: undefined,
    relativeCtr: undefined,
    searchAbsoluteTopImpressionShare: undefined,
    searchBudgetLostAbsoluteTopImpressionShare: undefined,
    searchBudgetLostImpressionShare: undefined,
    searchBudgetLostTopImpressionShare: undefined,
    searchClickShare: undefined,
    searchExactMatchImpressionShare: undefined,
    searchImpressionShare: undefined,
    searchRankLostAbsoluteTopImpressionShare: undefined,
    searchRankLostImpressionShare: undefined,
    searchRankLostTopImpressionShare: undefined,
    searchTopImpressionShare: undefined,
    searchVolume: undefined,
    speedScore: undefined,
    averageTargetCpaMicros: undefined,
    averageTargetRoas: undefined,
    topImpressionPercentage: undefined,
    validAcceleratedMobilePagesClicksPercentage: undefined,
    valuePerAllConversions: undefined,
    valuePerAllConversionsByConversionDate: undefined,
    valuePerConversion: undefined,
    valuePerConversionsByConversionDate: undefined,
    valuePerCurrentModelAttributedConversion: undefined,
    videoQuartileP100Rate: undefined,
    videoQuartileP25Rate: undefined,
    videoQuartileP50Rate: undefined,
    videoQuartileP75Rate: undefined,
    videoViewRate: undefined,
    videoViews: undefined,
    viewThroughConversions: undefined,
    skAdNetworkInstalls: Long.ZERO,
    skAdNetworkTotalConversions: Long.ZERO,
    publisherPurchasedClicks: Long.ZERO,
    publisherOrganicClicks: Long.ZERO,
    publisherUnknownClicks: Long.ZERO,
    allConversionsFromLocationAssetClickToCall: undefined,
    allConversionsFromLocationAssetDirections: undefined,
    allConversionsFromLocationAssetMenu: undefined,
    allConversionsFromLocationAssetOrder: undefined,
    allConversionsFromLocationAssetOtherEngagement: undefined,
    allConversionsFromLocationAssetStoreVisits: undefined,
    allConversionsFromLocationAssetWebsite: undefined,
    eligibleImpressionsFromLocationAssetStoreReach: undefined,
    viewThroughConversionsFromLocationAssetClickToCall: undefined,
    viewThroughConversionsFromLocationAssetDirections: undefined,
    viewThroughConversionsFromLocationAssetMenu: undefined,
    viewThroughConversionsFromLocationAssetOrder: undefined,
    viewThroughConversionsFromLocationAssetOtherEngagement: undefined,
    viewThroughConversionsFromLocationAssetStoreVisits: undefined,
    viewThroughConversionsFromLocationAssetWebsite: undefined,
    orders: undefined,
    averageOrderValueMicros: undefined,
    averageCartSize: undefined,
    costOfGoodsSoldMicros: undefined,
    grossProfitMicros: undefined,
    grossProfitMargin: undefined,
    revenueMicros: undefined,
    unitsSold: undefined,
    crossSellCostOfGoodsSoldMicros: undefined,
    crossSellGrossProfitMicros: undefined,
    crossSellRevenueMicros: undefined,
    crossSellUnitsSold: undefined,
    leadCostOfGoodsSoldMicros: undefined,
    leadGrossProfitMicros: undefined,
    leadRevenueMicros: undefined,
    leadUnitsSold: undefined,
    uniqueUsers: undefined,
    averageImpressionFrequencyPerUser: undefined,
    linkedEntitiesCount: undefined,
    linkedSampleEntities: [],
    sampleBestPerformanceEntities: [],
    sampleGoodPerformanceEntities: [],
    sampleLowPerformanceEntities: [],
    sampleLearningPerformanceEntities: [],
    sampleUnratedPerformanceEntities: [],
    assetPinnedTotalCount: undefined,
    assetPinnedAsHeadlinePositionOneCount: undefined,
    assetPinnedAsHeadlinePositionTwoCount: undefined,
    assetPinnedAsHeadlinePositionThreeCount: undefined,
    assetPinnedAsDescriptionPositionOneCount: undefined,
    assetPinnedAsDescriptionPositionTwoCount: undefined,
    assetBestPerformanceImpressionPercentage: undefined,
    assetGoodPerformanceImpressionPercentage: undefined,
    assetLowPerformanceImpressionPercentage: undefined,
    assetLearningPerformanceImpressionPercentage: undefined,
    assetUnratedPerformanceImpressionPercentage: undefined,
    assetBestPerformanceCostPercentage: undefined,
    assetGoodPerformanceCostPercentage: undefined,
    assetLowPerformanceCostPercentage: undefined,
    assetLearningPerformanceCostPercentage: undefined,
    assetUnratedPerformanceCostPercentage: undefined,
  };
}

export const Metrics: MessageFns<Metrics> = {
  encode(message: Metrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.absoluteTopImpressionPercentage !== undefined) {
      writer.uint32(1465).double(message.absoluteTopImpressionPercentage);
    }
    if (message.activeViewCpm !== undefined) {
      writer.uint32(1473).double(message.activeViewCpm);
    }
    if (message.activeViewCtr !== undefined) {
      writer.uint32(1481).double(message.activeViewCtr);
    }
    if (message.activeViewImpressions !== undefined) {
      writer.uint32(1488).int64(message.activeViewImpressions.toString());
    }
    if (message.activeViewMeasurability !== undefined) {
      writer.uint32(1497).double(message.activeViewMeasurability);
    }
    if (message.activeViewMeasurableCostMicros !== undefined) {
      writer.uint32(1504).int64(message.activeViewMeasurableCostMicros.toString());
    }
    if (message.activeViewMeasurableImpressions !== undefined) {
      writer.uint32(1512).int64(message.activeViewMeasurableImpressions.toString());
    }
    if (message.activeViewViewability !== undefined) {
      writer.uint32(1521).double(message.activeViewViewability);
    }
    if (message.allConversionsFromInteractionsRate !== undefined) {
      writer.uint32(1529).double(message.allConversionsFromInteractionsRate);
    }
    if (message.allConversionsValue !== undefined) {
      writer.uint32(1537).double(message.allConversionsValue);
    }
    if (message.allConversionsValueByConversionDate !== undefined) {
      writer.uint32(1921).double(message.allConversionsValueByConversionDate);
    }
    if (message.allNewCustomerLifetimeValue !== undefined) {
      writer.uint32(2353).double(message.allNewCustomerLifetimeValue);
    }
    if (message.allConversions !== undefined) {
      writer.uint32(1545).double(message.allConversions);
    }
    if (message.allConversionsByConversionDate !== undefined) {
      writer.uint32(1929).double(message.allConversionsByConversionDate);
    }
    if (message.allConversionsValuePerCost !== undefined) {
      writer.uint32(1553).double(message.allConversionsValuePerCost);
    }
    if (message.allConversionsFromClickToCall !== undefined) {
      writer.uint32(1561).double(message.allConversionsFromClickToCall);
    }
    if (message.allConversionsFromDirections !== undefined) {
      writer.uint32(1569).double(message.allConversionsFromDirections);
    }
    if (message.allConversionsFromInteractionsValuePerInteraction !== undefined) {
      writer.uint32(1577).double(message.allConversionsFromInteractionsValuePerInteraction);
    }
    if (message.allConversionsFromMenu !== undefined) {
      writer.uint32(1585).double(message.allConversionsFromMenu);
    }
    if (message.allConversionsFromOrder !== undefined) {
      writer.uint32(1593).double(message.allConversionsFromOrder);
    }
    if (message.allConversionsFromOtherEngagement !== undefined) {
      writer.uint32(1601).double(message.allConversionsFromOtherEngagement);
    }
    if (message.allConversionsFromStoreVisit !== undefined) {
      writer.uint32(1609).double(message.allConversionsFromStoreVisit);
    }
    if (message.allConversionsFromStoreWebsite !== undefined) {
      writer.uint32(1617).double(message.allConversionsFromStoreWebsite);
    }
    if (message.auctionInsightSearchAbsoluteTopImpressionPercentage !== undefined) {
      writer.uint32(2065).double(message.auctionInsightSearchAbsoluteTopImpressionPercentage);
    }
    if (message.auctionInsightSearchImpressionShare !== undefined) {
      writer.uint32(2073).double(message.auctionInsightSearchImpressionShare);
    }
    if (message.auctionInsightSearchOutrankingShare !== undefined) {
      writer.uint32(2081).double(message.auctionInsightSearchOutrankingShare);
    }
    if (message.auctionInsightSearchOverlapRate !== undefined) {
      writer.uint32(2089).double(message.auctionInsightSearchOverlapRate);
    }
    if (message.auctionInsightSearchPositionAboveRate !== undefined) {
      writer.uint32(2097).double(message.auctionInsightSearchPositionAboveRate);
    }
    if (message.auctionInsightSearchTopImpressionPercentage !== undefined) {
      writer.uint32(2105).double(message.auctionInsightSearchTopImpressionPercentage);
    }
    if (message.averageCost !== undefined) {
      writer.uint32(1625).double(message.averageCost);
    }
    if (message.averageCpc !== undefined) {
      writer.uint32(1633).double(message.averageCpc);
    }
    if (message.averageCpe !== undefined) {
      writer.uint32(1641).double(message.averageCpe);
    }
    if (message.averageCpm !== undefined) {
      writer.uint32(1649).double(message.averageCpm);
    }
    if (message.averageCpv !== undefined) {
      writer.uint32(1657).double(message.averageCpv);
    }
    if (message.averagePageViews !== undefined) {
      writer.uint32(1665).double(message.averagePageViews);
    }
    if (message.averageTimeOnSite !== undefined) {
      writer.uint32(1673).double(message.averageTimeOnSite);
    }
    if (message.benchmarkAverageMaxCpc !== undefined) {
      writer.uint32(1681).double(message.benchmarkAverageMaxCpc);
    }
    if (message.biddableAppInstallConversions !== undefined) {
      writer.uint32(2033).double(message.biddableAppInstallConversions);
    }
    if (message.biddableAppPostInstallConversions !== undefined) {
      writer.uint32(2041).double(message.biddableAppPostInstallConversions);
    }
    if (message.benchmarkCtr !== undefined) {
      writer.uint32(1689).double(message.benchmarkCtr);
    }
    if (message.bounceRate !== undefined) {
      writer.uint32(1697).double(message.bounceRate);
    }
    if (message.clicks !== undefined) {
      writer.uint32(1048).int64(message.clicks.toString());
    }
    if (message.combinedClicks !== undefined) {
      writer.uint32(1248).int64(message.combinedClicks.toString());
    }
    if (message.combinedClicksPerQuery !== undefined) {
      writer.uint32(1257).double(message.combinedClicksPerQuery);
    }
    if (message.combinedQueries !== undefined) {
      writer.uint32(1264).int64(message.combinedQueries.toString());
    }
    if (message.contentBudgetLostImpressionShare !== undefined) {
      writer.uint32(1273).double(message.contentBudgetLostImpressionShare);
    }
    if (message.contentImpressionShare !== undefined) {
      writer.uint32(1281).double(message.contentImpressionShare);
    }
    if (message.conversionLastReceivedRequestDateTime !== undefined) {
      writer.uint32(1290).string(message.conversionLastReceivedRequestDateTime);
    }
    if (message.conversionLastConversionDate !== undefined) {
      writer.uint32(1298).string(message.conversionLastConversionDate);
    }
    if (message.contentRankLostImpressionShare !== undefined) {
      writer.uint32(1305).double(message.contentRankLostImpressionShare);
    }
    if (message.conversionsFromInteractionsRate !== undefined) {
      writer.uint32(1313).double(message.conversionsFromInteractionsRate);
    }
    if (message.conversionsValue !== undefined) {
      writer.uint32(1321).double(message.conversionsValue);
    }
    if (message.conversionsValueByConversionDate !== undefined) {
      writer.uint32(1937).double(message.conversionsValueByConversionDate);
    }
    if (message.newCustomerLifetimeValue !== undefined) {
      writer.uint32(2345).double(message.newCustomerLifetimeValue);
    }
    if (message.conversionsValuePerCost !== undefined) {
      writer.uint32(1329).double(message.conversionsValuePerCost);
    }
    if (message.conversionsFromInteractionsValuePerInteraction !== undefined) {
      writer.uint32(1337).double(message.conversionsFromInteractionsValuePerInteraction);
    }
    if (message.conversions !== undefined) {
      writer.uint32(1345).double(message.conversions);
    }
    if (message.conversionsByConversionDate !== undefined) {
      writer.uint32(1945).double(message.conversionsByConversionDate);
    }
    if (message.costMicros !== undefined) {
      writer.uint32(1352).int64(message.costMicros.toString());
    }
    if (message.costPerAllConversions !== undefined) {
      writer.uint32(1361).double(message.costPerAllConversions);
    }
    if (message.costPerConversion !== undefined) {
      writer.uint32(1369).double(message.costPerConversion);
    }
    if (message.costPerCurrentModelAttributedConversion !== undefined) {
      writer.uint32(1377).double(message.costPerCurrentModelAttributedConversion);
    }
    if (message.crossDeviceConversions !== undefined) {
      writer.uint32(1385).double(message.crossDeviceConversions);
    }
    if (message.crossDeviceConversionsValueMicros !== undefined) {
      writer.uint32(2496).int64(message.crossDeviceConversionsValueMicros.toString());
    }
    if (message.ctr !== undefined) {
      writer.uint32(1393).double(message.ctr);
    }
    if (message.currentModelAttributedConversions !== undefined) {
      writer.uint32(1401).double(message.currentModelAttributedConversions);
    }
    if (message.currentModelAttributedConversionsFromInteractionsRate !== undefined) {
      writer.uint32(1409).double(message.currentModelAttributedConversionsFromInteractionsRate);
    }
    if (message.currentModelAttributedConversionsFromInteractionsValuePerInteraction !== undefined) {
      writer.uint32(1417).double(message.currentModelAttributedConversionsFromInteractionsValuePerInteraction);
    }
    if (message.currentModelAttributedConversionsValue !== undefined) {
      writer.uint32(1425).double(message.currentModelAttributedConversionsValue);
    }
    if (message.currentModelAttributedConversionsValuePerCost !== undefined) {
      writer.uint32(1433).double(message.currentModelAttributedConversionsValuePerCost);
    }
    if (message.engagementRate !== undefined) {
      writer.uint32(1441).double(message.engagementRate);
    }
    if (message.engagements !== undefined) {
      writer.uint32(1448).int64(message.engagements.toString());
    }
    if (message.hotelAverageLeadValueMicros !== undefined) {
      writer.uint32(1705).double(message.hotelAverageLeadValueMicros);
    }
    if (message.hotelCommissionRateMicros !== undefined) {
      writer.uint32(2048).int64(message.hotelCommissionRateMicros.toString());
    }
    if (message.hotelExpectedCommissionCost !== undefined) {
      writer.uint32(2057).double(message.hotelExpectedCommissionCost);
    }
    if (message.hotelPriceDifferencePercentage !== undefined) {
      writer.uint32(1713).double(message.hotelPriceDifferencePercentage);
    }
    if (message.hotelEligibleImpressions !== undefined) {
      writer.uint32(1720).int64(message.hotelEligibleImpressions.toString());
    }
    if (message.historicalCreativeQualityScore !== 0) {
      writer.uint32(640).int32(message.historicalCreativeQualityScore);
    }
    if (message.historicalLandingPageQualityScore !== 0) {
      writer.uint32(648).int32(message.historicalLandingPageQualityScore);
    }
    if (message.historicalQualityScore !== undefined) {
      writer.uint32(1728).int64(message.historicalQualityScore.toString());
    }
    if (message.historicalSearchPredictedCtr !== 0) {
      writer.uint32(664).int32(message.historicalSearchPredictedCtr);
    }
    if (message.gmailForwards !== undefined) {
      writer.uint32(1736).int64(message.gmailForwards.toString());
    }
    if (message.gmailSaves !== undefined) {
      writer.uint32(1744).int64(message.gmailSaves.toString());
    }
    if (message.gmailSecondaryClicks !== undefined) {
      writer.uint32(1752).int64(message.gmailSecondaryClicks.toString());
    }
    if (message.impressionsFromStoreReach !== undefined) {
      writer.uint32(1760).int64(message.impressionsFromStoreReach.toString());
    }
    if (message.impressions !== undefined) {
      writer.uint32(1768).int64(message.impressions.toString());
    }
    if (message.interactionRate !== undefined) {
      writer.uint32(1777).double(message.interactionRate);
    }
    if (message.interactions !== undefined) {
      writer.uint32(1784).int64(message.interactions.toString());
    }
    writer.uint32(802).fork();
    for (const v of message.interactionEventTypes) {
      writer.int32(v);
    }
    writer.join();
    if (message.invalidClickRate !== undefined) {
      writer.uint32(1793).double(message.invalidClickRate);
    }
    if (message.invalidClicks !== undefined) {
      writer.uint32(1800).int64(message.invalidClicks.toString());
    }
    if (message.messageChats !== undefined) {
      writer.uint32(1808).int64(message.messageChats.toString());
    }
    if (message.messageImpressions !== undefined) {
      writer.uint32(1816).int64(message.messageImpressions.toString());
    }
    if (message.messageChatRate !== undefined) {
      writer.uint32(1825).double(message.messageChatRate);
    }
    if (message.mobileFriendlyClicksPercentage !== undefined) {
      writer.uint32(1833).double(message.mobileFriendlyClicksPercentage);
    }
    if (message.optimizationScoreUplift !== undefined) {
      writer.uint32(1977).double(message.optimizationScoreUplift);
    }
    if (message.optimizationScoreUrl !== undefined) {
      writer.uint32(1986).string(message.optimizationScoreUrl);
    }
    if (message.organicClicks !== undefined) {
      writer.uint32(1840).int64(message.organicClicks.toString());
    }
    if (message.organicClicksPerQuery !== undefined) {
      writer.uint32(1849).double(message.organicClicksPerQuery);
    }
    if (message.organicImpressions !== undefined) {
      writer.uint32(1856).int64(message.organicImpressions.toString());
    }
    if (message.organicImpressionsPerQuery !== undefined) {
      writer.uint32(1865).double(message.organicImpressionsPerQuery);
    }
    if (message.organicQueries !== undefined) {
      writer.uint32(1872).int64(message.organicQueries.toString());
    }
    if (message.percentNewVisitors !== undefined) {
      writer.uint32(1881).double(message.percentNewVisitors);
    }
    if (message.phoneCalls !== undefined) {
      writer.uint32(1888).int64(message.phoneCalls.toString());
    }
    if (message.phoneImpressions !== undefined) {
      writer.uint32(1896).int64(message.phoneImpressions.toString());
    }
    if (message.phoneThroughRate !== undefined) {
      writer.uint32(1905).double(message.phoneThroughRate);
    }
    if (message.relativeCtr !== undefined) {
      writer.uint32(1913).double(message.relativeCtr);
    }
    if (message.searchAbsoluteTopImpressionShare !== undefined) {
      writer.uint32(1089).double(message.searchAbsoluteTopImpressionShare);
    }
    if (message.searchBudgetLostAbsoluteTopImpressionShare !== undefined) {
      writer.uint32(1097).double(message.searchBudgetLostAbsoluteTopImpressionShare);
    }
    if (message.searchBudgetLostImpressionShare !== undefined) {
      writer.uint32(1105).double(message.searchBudgetLostImpressionShare);
    }
    if (message.searchBudgetLostTopImpressionShare !== undefined) {
      writer.uint32(1113).double(message.searchBudgetLostTopImpressionShare);
    }
    if (message.searchClickShare !== undefined) {
      writer.uint32(1121).double(message.searchClickShare);
    }
    if (message.searchExactMatchImpressionShare !== undefined) {
      writer.uint32(1129).double(message.searchExactMatchImpressionShare);
    }
    if (message.searchImpressionShare !== undefined) {
      writer.uint32(1137).double(message.searchImpressionShare);
    }
    if (message.searchRankLostAbsoluteTopImpressionShare !== undefined) {
      writer.uint32(1145).double(message.searchRankLostAbsoluteTopImpressionShare);
    }
    if (message.searchRankLostImpressionShare !== undefined) {
      writer.uint32(1153).double(message.searchRankLostImpressionShare);
    }
    if (message.searchRankLostTopImpressionShare !== undefined) {
      writer.uint32(1161).double(message.searchRankLostTopImpressionShare);
    }
    if (message.searchTopImpressionShare !== undefined) {
      writer.uint32(1169).double(message.searchTopImpressionShare);
    }
    if (message.searchVolume !== undefined) {
      SearchVolumeRange.encode(message.searchVolume, writer.uint32(2362).fork()).join();
    }
    if (message.speedScore !== undefined) {
      writer.uint32(1176).int64(message.speedScore.toString());
    }
    if (message.averageTargetCpaMicros !== undefined) {
      writer.uint32(2320).int64(message.averageTargetCpaMicros.toString());
    }
    if (message.averageTargetRoas !== undefined) {
      writer.uint32(2001).double(message.averageTargetRoas);
    }
    if (message.topImpressionPercentage !== undefined) {
      writer.uint32(1185).double(message.topImpressionPercentage);
    }
    if (message.validAcceleratedMobilePagesClicksPercentage !== undefined) {
      writer.uint32(1193).double(message.validAcceleratedMobilePagesClicksPercentage);
    }
    if (message.valuePerAllConversions !== undefined) {
      writer.uint32(1201).double(message.valuePerAllConversions);
    }
    if (message.valuePerAllConversionsByConversionDate !== undefined) {
      writer.uint32(1953).double(message.valuePerAllConversionsByConversionDate);
    }
    if (message.valuePerConversion !== undefined) {
      writer.uint32(1209).double(message.valuePerConversion);
    }
    if (message.valuePerConversionsByConversionDate !== undefined) {
      writer.uint32(1961).double(message.valuePerConversionsByConversionDate);
    }
    if (message.valuePerCurrentModelAttributedConversion !== undefined) {
      writer.uint32(1217).double(message.valuePerCurrentModelAttributedConversion);
    }
    if (message.videoQuartileP100Rate !== undefined) {
      writer.uint32(1057).double(message.videoQuartileP100Rate);
    }
    if (message.videoQuartileP25Rate !== undefined) {
      writer.uint32(1065).double(message.videoQuartileP25Rate);
    }
    if (message.videoQuartileP50Rate !== undefined) {
      writer.uint32(1073).double(message.videoQuartileP50Rate);
    }
    if (message.videoQuartileP75Rate !== undefined) {
      writer.uint32(1081).double(message.videoQuartileP75Rate);
    }
    if (message.videoViewRate !== undefined) {
      writer.uint32(1225).double(message.videoViewRate);
    }
    if (message.videoViews !== undefined) {
      writer.uint32(1232).int64(message.videoViews.toString());
    }
    if (message.viewThroughConversions !== undefined) {
      writer.uint32(1240).int64(message.viewThroughConversions.toString());
    }
    if (!message.skAdNetworkInstalls.equals(Long.ZERO)) {
      writer.uint32(1968).int64(message.skAdNetworkInstalls.toString());
    }
    if (!message.skAdNetworkTotalConversions.equals(Long.ZERO)) {
      writer.uint32(2336).int64(message.skAdNetworkTotalConversions.toString());
    }
    if (!message.publisherPurchasedClicks.equals(Long.ZERO)) {
      writer.uint32(2112).int64(message.publisherPurchasedClicks.toString());
    }
    if (!message.publisherOrganicClicks.equals(Long.ZERO)) {
      writer.uint32(2120).int64(message.publisherOrganicClicks.toString());
    }
    if (!message.publisherUnknownClicks.equals(Long.ZERO)) {
      writer.uint32(2128).int64(message.publisherUnknownClicks.toString());
    }
    if (message.allConversionsFromLocationAssetClickToCall !== undefined) {
      writer.uint32(2137).double(message.allConversionsFromLocationAssetClickToCall);
    }
    if (message.allConversionsFromLocationAssetDirections !== undefined) {
      writer.uint32(2145).double(message.allConversionsFromLocationAssetDirections);
    }
    if (message.allConversionsFromLocationAssetMenu !== undefined) {
      writer.uint32(2153).double(message.allConversionsFromLocationAssetMenu);
    }
    if (message.allConversionsFromLocationAssetOrder !== undefined) {
      writer.uint32(2161).double(message.allConversionsFromLocationAssetOrder);
    }
    if (message.allConversionsFromLocationAssetOtherEngagement !== undefined) {
      writer.uint32(2169).double(message.allConversionsFromLocationAssetOtherEngagement);
    }
    if (message.allConversionsFromLocationAssetStoreVisits !== undefined) {
      writer.uint32(2177).double(message.allConversionsFromLocationAssetStoreVisits);
    }
    if (message.allConversionsFromLocationAssetWebsite !== undefined) {
      writer.uint32(2185).double(message.allConversionsFromLocationAssetWebsite);
    }
    if (message.eligibleImpressionsFromLocationAssetStoreReach !== undefined) {
      writer.uint32(2192).int64(message.eligibleImpressionsFromLocationAssetStoreReach.toString());
    }
    if (message.viewThroughConversionsFromLocationAssetClickToCall !== undefined) {
      writer.uint32(2201).double(message.viewThroughConversionsFromLocationAssetClickToCall);
    }
    if (message.viewThroughConversionsFromLocationAssetDirections !== undefined) {
      writer.uint32(2209).double(message.viewThroughConversionsFromLocationAssetDirections);
    }
    if (message.viewThroughConversionsFromLocationAssetMenu !== undefined) {
      writer.uint32(2217).double(message.viewThroughConversionsFromLocationAssetMenu);
    }
    if (message.viewThroughConversionsFromLocationAssetOrder !== undefined) {
      writer.uint32(2225).double(message.viewThroughConversionsFromLocationAssetOrder);
    }
    if (message.viewThroughConversionsFromLocationAssetOtherEngagement !== undefined) {
      writer.uint32(2233).double(message.viewThroughConversionsFromLocationAssetOtherEngagement);
    }
    if (message.viewThroughConversionsFromLocationAssetStoreVisits !== undefined) {
      writer.uint32(2241).double(message.viewThroughConversionsFromLocationAssetStoreVisits);
    }
    if (message.viewThroughConversionsFromLocationAssetWebsite !== undefined) {
      writer.uint32(2249).double(message.viewThroughConversionsFromLocationAssetWebsite);
    }
    if (message.orders !== undefined) {
      writer.uint32(2369).double(message.orders);
    }
    if (message.averageOrderValueMicros !== undefined) {
      writer.uint32(2376).int64(message.averageOrderValueMicros.toString());
    }
    if (message.averageCartSize !== undefined) {
      writer.uint32(2385).double(message.averageCartSize);
    }
    if (message.costOfGoodsSoldMicros !== undefined) {
      writer.uint32(2392).int64(message.costOfGoodsSoldMicros.toString());
    }
    if (message.grossProfitMicros !== undefined) {
      writer.uint32(2400).int64(message.grossProfitMicros.toString());
    }
    if (message.grossProfitMargin !== undefined) {
      writer.uint32(2409).double(message.grossProfitMargin);
    }
    if (message.revenueMicros !== undefined) {
      writer.uint32(2416).int64(message.revenueMicros.toString());
    }
    if (message.unitsSold !== undefined) {
      writer.uint32(2425).double(message.unitsSold);
    }
    if (message.crossSellCostOfGoodsSoldMicros !== undefined) {
      writer.uint32(2432).int64(message.crossSellCostOfGoodsSoldMicros.toString());
    }
    if (message.crossSellGrossProfitMicros !== undefined) {
      writer.uint32(2440).int64(message.crossSellGrossProfitMicros.toString());
    }
    if (message.crossSellRevenueMicros !== undefined) {
      writer.uint32(2448).int64(message.crossSellRevenueMicros.toString());
    }
    if (message.crossSellUnitsSold !== undefined) {
      writer.uint32(2457).double(message.crossSellUnitsSold);
    }
    if (message.leadCostOfGoodsSoldMicros !== undefined) {
      writer.uint32(2464).int64(message.leadCostOfGoodsSoldMicros.toString());
    }
    if (message.leadGrossProfitMicros !== undefined) {
      writer.uint32(2472).int64(message.leadGrossProfitMicros.toString());
    }
    if (message.leadRevenueMicros !== undefined) {
      writer.uint32(2480).int64(message.leadRevenueMicros.toString());
    }
    if (message.leadUnitsSold !== undefined) {
      writer.uint32(2489).double(message.leadUnitsSold);
    }
    if (message.uniqueUsers !== undefined) {
      writer.uint32(2552).int64(message.uniqueUsers.toString());
    }
    if (message.averageImpressionFrequencyPerUser !== undefined) {
      writer.uint32(2561).double(message.averageImpressionFrequencyPerUser);
    }
    if (message.linkedEntitiesCount !== undefined) {
      writer.uint32(2728).int64(message.linkedEntitiesCount.toString());
    }
    for (const v of message.linkedSampleEntities) {
      writer.uint32(2738).string(v!);
    }
    for (const v of message.sampleBestPerformanceEntities) {
      writer.uint32(2746).string(v!);
    }
    for (const v of message.sampleGoodPerformanceEntities) {
      writer.uint32(2754).string(v!);
    }
    for (const v of message.sampleLowPerformanceEntities) {
      writer.uint32(2762).string(v!);
    }
    for (const v of message.sampleLearningPerformanceEntities) {
      writer.uint32(2770).string(v!);
    }
    for (const v of message.sampleUnratedPerformanceEntities) {
      writer.uint32(2778).string(v!);
    }
    if (message.assetPinnedTotalCount !== undefined) {
      writer.uint32(2784).int64(message.assetPinnedTotalCount.toString());
    }
    if (message.assetPinnedAsHeadlinePositionOneCount !== undefined) {
      writer.uint32(2792).int64(message.assetPinnedAsHeadlinePositionOneCount.toString());
    }
    if (message.assetPinnedAsHeadlinePositionTwoCount !== undefined) {
      writer.uint32(2800).int64(message.assetPinnedAsHeadlinePositionTwoCount.toString());
    }
    if (message.assetPinnedAsHeadlinePositionThreeCount !== undefined) {
      writer.uint32(2808).int64(message.assetPinnedAsHeadlinePositionThreeCount.toString());
    }
    if (message.assetPinnedAsDescriptionPositionOneCount !== undefined) {
      writer.uint32(2816).int64(message.assetPinnedAsDescriptionPositionOneCount.toString());
    }
    if (message.assetPinnedAsDescriptionPositionTwoCount !== undefined) {
      writer.uint32(2824).int64(message.assetPinnedAsDescriptionPositionTwoCount.toString());
    }
    if (message.assetBestPerformanceImpressionPercentage !== undefined) {
      writer.uint32(2833).double(message.assetBestPerformanceImpressionPercentage);
    }
    if (message.assetGoodPerformanceImpressionPercentage !== undefined) {
      writer.uint32(2841).double(message.assetGoodPerformanceImpressionPercentage);
    }
    if (message.assetLowPerformanceImpressionPercentage !== undefined) {
      writer.uint32(2849).double(message.assetLowPerformanceImpressionPercentage);
    }
    if (message.assetLearningPerformanceImpressionPercentage !== undefined) {
      writer.uint32(2857).double(message.assetLearningPerformanceImpressionPercentage);
    }
    if (message.assetUnratedPerformanceImpressionPercentage !== undefined) {
      writer.uint32(2865).double(message.assetUnratedPerformanceImpressionPercentage);
    }
    if (message.assetBestPerformanceCostPercentage !== undefined) {
      writer.uint32(2873).double(message.assetBestPerformanceCostPercentage);
    }
    if (message.assetGoodPerformanceCostPercentage !== undefined) {
      writer.uint32(2881).double(message.assetGoodPerformanceCostPercentage);
    }
    if (message.assetLowPerformanceCostPercentage !== undefined) {
      writer.uint32(2889).double(message.assetLowPerformanceCostPercentage);
    }
    if (message.assetLearningPerformanceCostPercentage !== undefined) {
      writer.uint32(2897).double(message.assetLearningPerformanceCostPercentage);
    }
    if (message.assetUnratedPerformanceCostPercentage !== undefined) {
      writer.uint32(2905).double(message.assetUnratedPerformanceCostPercentage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Metrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 183:
          if (tag !== 1465) {
            break;
          }

          message.absoluteTopImpressionPercentage = reader.double();
          continue;
        case 184:
          if (tag !== 1473) {
            break;
          }

          message.activeViewCpm = reader.double();
          continue;
        case 185:
          if (tag !== 1481) {
            break;
          }

          message.activeViewCtr = reader.double();
          continue;
        case 186:
          if (tag !== 1488) {
            break;
          }

          message.activeViewImpressions = Long.fromString(reader.int64().toString());
          continue;
        case 187:
          if (tag !== 1497) {
            break;
          }

          message.activeViewMeasurability = reader.double();
          continue;
        case 188:
          if (tag !== 1504) {
            break;
          }

          message.activeViewMeasurableCostMicros = Long.fromString(reader.int64().toString());
          continue;
        case 189:
          if (tag !== 1512) {
            break;
          }

          message.activeViewMeasurableImpressions = Long.fromString(reader.int64().toString());
          continue;
        case 190:
          if (tag !== 1521) {
            break;
          }

          message.activeViewViewability = reader.double();
          continue;
        case 191:
          if (tag !== 1529) {
            break;
          }

          message.allConversionsFromInteractionsRate = reader.double();
          continue;
        case 192:
          if (tag !== 1537) {
            break;
          }

          message.allConversionsValue = reader.double();
          continue;
        case 240:
          if (tag !== 1921) {
            break;
          }

          message.allConversionsValueByConversionDate = reader.double();
          continue;
        case 294:
          if (tag !== 2353) {
            break;
          }

          message.allNewCustomerLifetimeValue = reader.double();
          continue;
        case 193:
          if (tag !== 1545) {
            break;
          }

          message.allConversions = reader.double();
          continue;
        case 241:
          if (tag !== 1929) {
            break;
          }

          message.allConversionsByConversionDate = reader.double();
          continue;
        case 194:
          if (tag !== 1553) {
            break;
          }

          message.allConversionsValuePerCost = reader.double();
          continue;
        case 195:
          if (tag !== 1561) {
            break;
          }

          message.allConversionsFromClickToCall = reader.double();
          continue;
        case 196:
          if (tag !== 1569) {
            break;
          }

          message.allConversionsFromDirections = reader.double();
          continue;
        case 197:
          if (tag !== 1577) {
            break;
          }

          message.allConversionsFromInteractionsValuePerInteraction = reader.double();
          continue;
        case 198:
          if (tag !== 1585) {
            break;
          }

          message.allConversionsFromMenu = reader.double();
          continue;
        case 199:
          if (tag !== 1593) {
            break;
          }

          message.allConversionsFromOrder = reader.double();
          continue;
        case 200:
          if (tag !== 1601) {
            break;
          }

          message.allConversionsFromOtherEngagement = reader.double();
          continue;
        case 201:
          if (tag !== 1609) {
            break;
          }

          message.allConversionsFromStoreVisit = reader.double();
          continue;
        case 202:
          if (tag !== 1617) {
            break;
          }

          message.allConversionsFromStoreWebsite = reader.double();
          continue;
        case 258:
          if (tag !== 2065) {
            break;
          }

          message.auctionInsightSearchAbsoluteTopImpressionPercentage = reader.double();
          continue;
        case 259:
          if (tag !== 2073) {
            break;
          }

          message.auctionInsightSearchImpressionShare = reader.double();
          continue;
        case 260:
          if (tag !== 2081) {
            break;
          }

          message.auctionInsightSearchOutrankingShare = reader.double();
          continue;
        case 261:
          if (tag !== 2089) {
            break;
          }

          message.auctionInsightSearchOverlapRate = reader.double();
          continue;
        case 262:
          if (tag !== 2097) {
            break;
          }

          message.auctionInsightSearchPositionAboveRate = reader.double();
          continue;
        case 263:
          if (tag !== 2105) {
            break;
          }

          message.auctionInsightSearchTopImpressionPercentage = reader.double();
          continue;
        case 203:
          if (tag !== 1625) {
            break;
          }

          message.averageCost = reader.double();
          continue;
        case 204:
          if (tag !== 1633) {
            break;
          }

          message.averageCpc = reader.double();
          continue;
        case 205:
          if (tag !== 1641) {
            break;
          }

          message.averageCpe = reader.double();
          continue;
        case 206:
          if (tag !== 1649) {
            break;
          }

          message.averageCpm = reader.double();
          continue;
        case 207:
          if (tag !== 1657) {
            break;
          }

          message.averageCpv = reader.double();
          continue;
        case 208:
          if (tag !== 1665) {
            break;
          }

          message.averagePageViews = reader.double();
          continue;
        case 209:
          if (tag !== 1673) {
            break;
          }

          message.averageTimeOnSite = reader.double();
          continue;
        case 210:
          if (tag !== 1681) {
            break;
          }

          message.benchmarkAverageMaxCpc = reader.double();
          continue;
        case 254:
          if (tag !== 2033) {
            break;
          }

          message.biddableAppInstallConversions = reader.double();
          continue;
        case 255:
          if (tag !== 2041) {
            break;
          }

          message.biddableAppPostInstallConversions = reader.double();
          continue;
        case 211:
          if (tag !== 1689) {
            break;
          }

          message.benchmarkCtr = reader.double();
          continue;
        case 212:
          if (tag !== 1697) {
            break;
          }

          message.bounceRate = reader.double();
          continue;
        case 131:
          if (tag !== 1048) {
            break;
          }

          message.clicks = Long.fromString(reader.int64().toString());
          continue;
        case 156:
          if (tag !== 1248) {
            break;
          }

          message.combinedClicks = Long.fromString(reader.int64().toString());
          continue;
        case 157:
          if (tag !== 1257) {
            break;
          }

          message.combinedClicksPerQuery = reader.double();
          continue;
        case 158:
          if (tag !== 1264) {
            break;
          }

          message.combinedQueries = Long.fromString(reader.int64().toString());
          continue;
        case 159:
          if (tag !== 1273) {
            break;
          }

          message.contentBudgetLostImpressionShare = reader.double();
          continue;
        case 160:
          if (tag !== 1281) {
            break;
          }

          message.contentImpressionShare = reader.double();
          continue;
        case 161:
          if (tag !== 1290) {
            break;
          }

          message.conversionLastReceivedRequestDateTime = reader.string();
          continue;
        case 162:
          if (tag !== 1298) {
            break;
          }

          message.conversionLastConversionDate = reader.string();
          continue;
        case 163:
          if (tag !== 1305) {
            break;
          }

          message.contentRankLostImpressionShare = reader.double();
          continue;
        case 164:
          if (tag !== 1313) {
            break;
          }

          message.conversionsFromInteractionsRate = reader.double();
          continue;
        case 165:
          if (tag !== 1321) {
            break;
          }

          message.conversionsValue = reader.double();
          continue;
        case 242:
          if (tag !== 1937) {
            break;
          }

          message.conversionsValueByConversionDate = reader.double();
          continue;
        case 293:
          if (tag !== 2345) {
            break;
          }

          message.newCustomerLifetimeValue = reader.double();
          continue;
        case 166:
          if (tag !== 1329) {
            break;
          }

          message.conversionsValuePerCost = reader.double();
          continue;
        case 167:
          if (tag !== 1337) {
            break;
          }

          message.conversionsFromInteractionsValuePerInteraction = reader.double();
          continue;
        case 168:
          if (tag !== 1345) {
            break;
          }

          message.conversions = reader.double();
          continue;
        case 243:
          if (tag !== 1945) {
            break;
          }

          message.conversionsByConversionDate = reader.double();
          continue;
        case 169:
          if (tag !== 1352) {
            break;
          }

          message.costMicros = Long.fromString(reader.int64().toString());
          continue;
        case 170:
          if (tag !== 1361) {
            break;
          }

          message.costPerAllConversions = reader.double();
          continue;
        case 171:
          if (tag !== 1369) {
            break;
          }

          message.costPerConversion = reader.double();
          continue;
        case 172:
          if (tag !== 1377) {
            break;
          }

          message.costPerCurrentModelAttributedConversion = reader.double();
          continue;
        case 173:
          if (tag !== 1385) {
            break;
          }

          message.crossDeviceConversions = reader.double();
          continue;
        case 312:
          if (tag !== 2496) {
            break;
          }

          message.crossDeviceConversionsValueMicros = Long.fromString(reader.int64().toString());
          continue;
        case 174:
          if (tag !== 1393) {
            break;
          }

          message.ctr = reader.double();
          continue;
        case 175:
          if (tag !== 1401) {
            break;
          }

          message.currentModelAttributedConversions = reader.double();
          continue;
        case 176:
          if (tag !== 1409) {
            break;
          }

          message.currentModelAttributedConversionsFromInteractionsRate = reader.double();
          continue;
        case 177:
          if (tag !== 1417) {
            break;
          }

          message.currentModelAttributedConversionsFromInteractionsValuePerInteraction = reader.double();
          continue;
        case 178:
          if (tag !== 1425) {
            break;
          }

          message.currentModelAttributedConversionsValue = reader.double();
          continue;
        case 179:
          if (tag !== 1433) {
            break;
          }

          message.currentModelAttributedConversionsValuePerCost = reader.double();
          continue;
        case 180:
          if (tag !== 1441) {
            break;
          }

          message.engagementRate = reader.double();
          continue;
        case 181:
          if (tag !== 1448) {
            break;
          }

          message.engagements = Long.fromString(reader.int64().toString());
          continue;
        case 213:
          if (tag !== 1705) {
            break;
          }

          message.hotelAverageLeadValueMicros = reader.double();
          continue;
        case 256:
          if (tag !== 2048) {
            break;
          }

          message.hotelCommissionRateMicros = Long.fromString(reader.int64().toString());
          continue;
        case 257:
          if (tag !== 2057) {
            break;
          }

          message.hotelExpectedCommissionCost = reader.double();
          continue;
        case 214:
          if (tag !== 1713) {
            break;
          }

          message.hotelPriceDifferencePercentage = reader.double();
          continue;
        case 215:
          if (tag !== 1720) {
            break;
          }

          message.hotelEligibleImpressions = Long.fromString(reader.int64().toString());
          continue;
        case 80:
          if (tag !== 640) {
            break;
          }

          message.historicalCreativeQualityScore = reader.int32() as any;
          continue;
        case 81:
          if (tag !== 648) {
            break;
          }

          message.historicalLandingPageQualityScore = reader.int32() as any;
          continue;
        case 216:
          if (tag !== 1728) {
            break;
          }

          message.historicalQualityScore = Long.fromString(reader.int64().toString());
          continue;
        case 83:
          if (tag !== 664) {
            break;
          }

          message.historicalSearchPredictedCtr = reader.int32() as any;
          continue;
        case 217:
          if (tag !== 1736) {
            break;
          }

          message.gmailForwards = Long.fromString(reader.int64().toString());
          continue;
        case 218:
          if (tag !== 1744) {
            break;
          }

          message.gmailSaves = Long.fromString(reader.int64().toString());
          continue;
        case 219:
          if (tag !== 1752) {
            break;
          }

          message.gmailSecondaryClicks = Long.fromString(reader.int64().toString());
          continue;
        case 220:
          if (tag !== 1760) {
            break;
          }

          message.impressionsFromStoreReach = Long.fromString(reader.int64().toString());
          continue;
        case 221:
          if (tag !== 1768) {
            break;
          }

          message.impressions = Long.fromString(reader.int64().toString());
          continue;
        case 222:
          if (tag !== 1777) {
            break;
          }

          message.interactionRate = reader.double();
          continue;
        case 223:
          if (tag !== 1784) {
            break;
          }

          message.interactions = Long.fromString(reader.int64().toString());
          continue;
        case 100:
          if (tag === 800) {
            message.interactionEventTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 802) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.interactionEventTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 224:
          if (tag !== 1793) {
            break;
          }

          message.invalidClickRate = reader.double();
          continue;
        case 225:
          if (tag !== 1800) {
            break;
          }

          message.invalidClicks = Long.fromString(reader.int64().toString());
          continue;
        case 226:
          if (tag !== 1808) {
            break;
          }

          message.messageChats = Long.fromString(reader.int64().toString());
          continue;
        case 227:
          if (tag !== 1816) {
            break;
          }

          message.messageImpressions = Long.fromString(reader.int64().toString());
          continue;
        case 228:
          if (tag !== 1825) {
            break;
          }

          message.messageChatRate = reader.double();
          continue;
        case 229:
          if (tag !== 1833) {
            break;
          }

          message.mobileFriendlyClicksPercentage = reader.double();
          continue;
        case 247:
          if (tag !== 1977) {
            break;
          }

          message.optimizationScoreUplift = reader.double();
          continue;
        case 248:
          if (tag !== 1986) {
            break;
          }

          message.optimizationScoreUrl = reader.string();
          continue;
        case 230:
          if (tag !== 1840) {
            break;
          }

          message.organicClicks = Long.fromString(reader.int64().toString());
          continue;
        case 231:
          if (tag !== 1849) {
            break;
          }

          message.organicClicksPerQuery = reader.double();
          continue;
        case 232:
          if (tag !== 1856) {
            break;
          }

          message.organicImpressions = Long.fromString(reader.int64().toString());
          continue;
        case 233:
          if (tag !== 1865) {
            break;
          }

          message.organicImpressionsPerQuery = reader.double();
          continue;
        case 234:
          if (tag !== 1872) {
            break;
          }

          message.organicQueries = Long.fromString(reader.int64().toString());
          continue;
        case 235:
          if (tag !== 1881) {
            break;
          }

          message.percentNewVisitors = reader.double();
          continue;
        case 236:
          if (tag !== 1888) {
            break;
          }

          message.phoneCalls = Long.fromString(reader.int64().toString());
          continue;
        case 237:
          if (tag !== 1896) {
            break;
          }

          message.phoneImpressions = Long.fromString(reader.int64().toString());
          continue;
        case 238:
          if (tag !== 1905) {
            break;
          }

          message.phoneThroughRate = reader.double();
          continue;
        case 239:
          if (tag !== 1913) {
            break;
          }

          message.relativeCtr = reader.double();
          continue;
        case 136:
          if (tag !== 1089) {
            break;
          }

          message.searchAbsoluteTopImpressionShare = reader.double();
          continue;
        case 137:
          if (tag !== 1097) {
            break;
          }

          message.searchBudgetLostAbsoluteTopImpressionShare = reader.double();
          continue;
        case 138:
          if (tag !== 1105) {
            break;
          }

          message.searchBudgetLostImpressionShare = reader.double();
          continue;
        case 139:
          if (tag !== 1113) {
            break;
          }

          message.searchBudgetLostTopImpressionShare = reader.double();
          continue;
        case 140:
          if (tag !== 1121) {
            break;
          }

          message.searchClickShare = reader.double();
          continue;
        case 141:
          if (tag !== 1129) {
            break;
          }

          message.searchExactMatchImpressionShare = reader.double();
          continue;
        case 142:
          if (tag !== 1137) {
            break;
          }

          message.searchImpressionShare = reader.double();
          continue;
        case 143:
          if (tag !== 1145) {
            break;
          }

          message.searchRankLostAbsoluteTopImpressionShare = reader.double();
          continue;
        case 144:
          if (tag !== 1153) {
            break;
          }

          message.searchRankLostImpressionShare = reader.double();
          continue;
        case 145:
          if (tag !== 1161) {
            break;
          }

          message.searchRankLostTopImpressionShare = reader.double();
          continue;
        case 146:
          if (tag !== 1169) {
            break;
          }

          message.searchTopImpressionShare = reader.double();
          continue;
        case 295:
          if (tag !== 2362) {
            break;
          }

          message.searchVolume = SearchVolumeRange.decode(reader, reader.uint32());
          continue;
        case 147:
          if (tag !== 1176) {
            break;
          }

          message.speedScore = Long.fromString(reader.int64().toString());
          continue;
        case 290:
          if (tag !== 2320) {
            break;
          }

          message.averageTargetCpaMicros = Long.fromString(reader.int64().toString());
          continue;
        case 250:
          if (tag !== 2001) {
            break;
          }

          message.averageTargetRoas = reader.double();
          continue;
        case 148:
          if (tag !== 1185) {
            break;
          }

          message.topImpressionPercentage = reader.double();
          continue;
        case 149:
          if (tag !== 1193) {
            break;
          }

          message.validAcceleratedMobilePagesClicksPercentage = reader.double();
          continue;
        case 150:
          if (tag !== 1201) {
            break;
          }

          message.valuePerAllConversions = reader.double();
          continue;
        case 244:
          if (tag !== 1953) {
            break;
          }

          message.valuePerAllConversionsByConversionDate = reader.double();
          continue;
        case 151:
          if (tag !== 1209) {
            break;
          }

          message.valuePerConversion = reader.double();
          continue;
        case 245:
          if (tag !== 1961) {
            break;
          }

          message.valuePerConversionsByConversionDate = reader.double();
          continue;
        case 152:
          if (tag !== 1217) {
            break;
          }

          message.valuePerCurrentModelAttributedConversion = reader.double();
          continue;
        case 132:
          if (tag !== 1057) {
            break;
          }

          message.videoQuartileP100Rate = reader.double();
          continue;
        case 133:
          if (tag !== 1065) {
            break;
          }

          message.videoQuartileP25Rate = reader.double();
          continue;
        case 134:
          if (tag !== 1073) {
            break;
          }

          message.videoQuartileP50Rate = reader.double();
          continue;
        case 135:
          if (tag !== 1081) {
            break;
          }

          message.videoQuartileP75Rate = reader.double();
          continue;
        case 153:
          if (tag !== 1225) {
            break;
          }

          message.videoViewRate = reader.double();
          continue;
        case 154:
          if (tag !== 1232) {
            break;
          }

          message.videoViews = Long.fromString(reader.int64().toString());
          continue;
        case 155:
          if (tag !== 1240) {
            break;
          }

          message.viewThroughConversions = Long.fromString(reader.int64().toString());
          continue;
        case 246:
          if (tag !== 1968) {
            break;
          }

          message.skAdNetworkInstalls = Long.fromString(reader.int64().toString());
          continue;
        case 292:
          if (tag !== 2336) {
            break;
          }

          message.skAdNetworkTotalConversions = Long.fromString(reader.int64().toString());
          continue;
        case 264:
          if (tag !== 2112) {
            break;
          }

          message.publisherPurchasedClicks = Long.fromString(reader.int64().toString());
          continue;
        case 265:
          if (tag !== 2120) {
            break;
          }

          message.publisherOrganicClicks = Long.fromString(reader.int64().toString());
          continue;
        case 266:
          if (tag !== 2128) {
            break;
          }

          message.publisherUnknownClicks = Long.fromString(reader.int64().toString());
          continue;
        case 267:
          if (tag !== 2137) {
            break;
          }

          message.allConversionsFromLocationAssetClickToCall = reader.double();
          continue;
        case 268:
          if (tag !== 2145) {
            break;
          }

          message.allConversionsFromLocationAssetDirections = reader.double();
          continue;
        case 269:
          if (tag !== 2153) {
            break;
          }

          message.allConversionsFromLocationAssetMenu = reader.double();
          continue;
        case 270:
          if (tag !== 2161) {
            break;
          }

          message.allConversionsFromLocationAssetOrder = reader.double();
          continue;
        case 271:
          if (tag !== 2169) {
            break;
          }

          message.allConversionsFromLocationAssetOtherEngagement = reader.double();
          continue;
        case 272:
          if (tag !== 2177) {
            break;
          }

          message.allConversionsFromLocationAssetStoreVisits = reader.double();
          continue;
        case 273:
          if (tag !== 2185) {
            break;
          }

          message.allConversionsFromLocationAssetWebsite = reader.double();
          continue;
        case 274:
          if (tag !== 2192) {
            break;
          }

          message.eligibleImpressionsFromLocationAssetStoreReach = Long.fromString(reader.int64().toString());
          continue;
        case 275:
          if (tag !== 2201) {
            break;
          }

          message.viewThroughConversionsFromLocationAssetClickToCall = reader.double();
          continue;
        case 276:
          if (tag !== 2209) {
            break;
          }

          message.viewThroughConversionsFromLocationAssetDirections = reader.double();
          continue;
        case 277:
          if (tag !== 2217) {
            break;
          }

          message.viewThroughConversionsFromLocationAssetMenu = reader.double();
          continue;
        case 278:
          if (tag !== 2225) {
            break;
          }

          message.viewThroughConversionsFromLocationAssetOrder = reader.double();
          continue;
        case 279:
          if (tag !== 2233) {
            break;
          }

          message.viewThroughConversionsFromLocationAssetOtherEngagement = reader.double();
          continue;
        case 280:
          if (tag !== 2241) {
            break;
          }

          message.viewThroughConversionsFromLocationAssetStoreVisits = reader.double();
          continue;
        case 281:
          if (tag !== 2249) {
            break;
          }

          message.viewThroughConversionsFromLocationAssetWebsite = reader.double();
          continue;
        case 296:
          if (tag !== 2369) {
            break;
          }

          message.orders = reader.double();
          continue;
        case 297:
          if (tag !== 2376) {
            break;
          }

          message.averageOrderValueMicros = Long.fromString(reader.int64().toString());
          continue;
        case 298:
          if (tag !== 2385) {
            break;
          }

          message.averageCartSize = reader.double();
          continue;
        case 299:
          if (tag !== 2392) {
            break;
          }

          message.costOfGoodsSoldMicros = Long.fromString(reader.int64().toString());
          continue;
        case 300:
          if (tag !== 2400) {
            break;
          }

          message.grossProfitMicros = Long.fromString(reader.int64().toString());
          continue;
        case 301:
          if (tag !== 2409) {
            break;
          }

          message.grossProfitMargin = reader.double();
          continue;
        case 302:
          if (tag !== 2416) {
            break;
          }

          message.revenueMicros = Long.fromString(reader.int64().toString());
          continue;
        case 303:
          if (tag !== 2425) {
            break;
          }

          message.unitsSold = reader.double();
          continue;
        case 304:
          if (tag !== 2432) {
            break;
          }

          message.crossSellCostOfGoodsSoldMicros = Long.fromString(reader.int64().toString());
          continue;
        case 305:
          if (tag !== 2440) {
            break;
          }

          message.crossSellGrossProfitMicros = Long.fromString(reader.int64().toString());
          continue;
        case 306:
          if (tag !== 2448) {
            break;
          }

          message.crossSellRevenueMicros = Long.fromString(reader.int64().toString());
          continue;
        case 307:
          if (tag !== 2457) {
            break;
          }

          message.crossSellUnitsSold = reader.double();
          continue;
        case 308:
          if (tag !== 2464) {
            break;
          }

          message.leadCostOfGoodsSoldMicros = Long.fromString(reader.int64().toString());
          continue;
        case 309:
          if (tag !== 2472) {
            break;
          }

          message.leadGrossProfitMicros = Long.fromString(reader.int64().toString());
          continue;
        case 310:
          if (tag !== 2480) {
            break;
          }

          message.leadRevenueMicros = Long.fromString(reader.int64().toString());
          continue;
        case 311:
          if (tag !== 2489) {
            break;
          }

          message.leadUnitsSold = reader.double();
          continue;
        case 319:
          if (tag !== 2552) {
            break;
          }

          message.uniqueUsers = Long.fromString(reader.int64().toString());
          continue;
        case 320:
          if (tag !== 2561) {
            break;
          }

          message.averageImpressionFrequencyPerUser = reader.double();
          continue;
        case 341:
          if (tag !== 2728) {
            break;
          }

          message.linkedEntitiesCount = Long.fromString(reader.int64().toString());
          continue;
        case 342:
          if (tag !== 2738) {
            break;
          }

          message.linkedSampleEntities.push(reader.string());
          continue;
        case 343:
          if (tag !== 2746) {
            break;
          }

          message.sampleBestPerformanceEntities.push(reader.string());
          continue;
        case 344:
          if (tag !== 2754) {
            break;
          }

          message.sampleGoodPerformanceEntities.push(reader.string());
          continue;
        case 345:
          if (tag !== 2762) {
            break;
          }

          message.sampleLowPerformanceEntities.push(reader.string());
          continue;
        case 346:
          if (tag !== 2770) {
            break;
          }

          message.sampleLearningPerformanceEntities.push(reader.string());
          continue;
        case 347:
          if (tag !== 2778) {
            break;
          }

          message.sampleUnratedPerformanceEntities.push(reader.string());
          continue;
        case 348:
          if (tag !== 2784) {
            break;
          }

          message.assetPinnedTotalCount = Long.fromString(reader.int64().toString());
          continue;
        case 349:
          if (tag !== 2792) {
            break;
          }

          message.assetPinnedAsHeadlinePositionOneCount = Long.fromString(reader.int64().toString());
          continue;
        case 350:
          if (tag !== 2800) {
            break;
          }

          message.assetPinnedAsHeadlinePositionTwoCount = Long.fromString(reader.int64().toString());
          continue;
        case 351:
          if (tag !== 2808) {
            break;
          }

          message.assetPinnedAsHeadlinePositionThreeCount = Long.fromString(reader.int64().toString());
          continue;
        case 352:
          if (tag !== 2816) {
            break;
          }

          message.assetPinnedAsDescriptionPositionOneCount = Long.fromString(reader.int64().toString());
          continue;
        case 353:
          if (tag !== 2824) {
            break;
          }

          message.assetPinnedAsDescriptionPositionTwoCount = Long.fromString(reader.int64().toString());
          continue;
        case 354:
          if (tag !== 2833) {
            break;
          }

          message.assetBestPerformanceImpressionPercentage = reader.double();
          continue;
        case 355:
          if (tag !== 2841) {
            break;
          }

          message.assetGoodPerformanceImpressionPercentage = reader.double();
          continue;
        case 356:
          if (tag !== 2849) {
            break;
          }

          message.assetLowPerformanceImpressionPercentage = reader.double();
          continue;
        case 357:
          if (tag !== 2857) {
            break;
          }

          message.assetLearningPerformanceImpressionPercentage = reader.double();
          continue;
        case 358:
          if (tag !== 2865) {
            break;
          }

          message.assetUnratedPerformanceImpressionPercentage = reader.double();
          continue;
        case 359:
          if (tag !== 2873) {
            break;
          }

          message.assetBestPerformanceCostPercentage = reader.double();
          continue;
        case 360:
          if (tag !== 2881) {
            break;
          }

          message.assetGoodPerformanceCostPercentage = reader.double();
          continue;
        case 361:
          if (tag !== 2889) {
            break;
          }

          message.assetLowPerformanceCostPercentage = reader.double();
          continue;
        case 362:
          if (tag !== 2897) {
            break;
          }

          message.assetLearningPerformanceCostPercentage = reader.double();
          continue;
        case 363:
          if (tag !== 2905) {
            break;
          }

          message.assetUnratedPerformanceCostPercentage = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Metrics {
    return {
      absoluteTopImpressionPercentage: isSet(object.absoluteTopImpressionPercentage)
        ? globalThis.Number(object.absoluteTopImpressionPercentage)
        : undefined,
      activeViewCpm: isSet(object.activeViewCpm) ? globalThis.Number(object.activeViewCpm) : undefined,
      activeViewCtr: isSet(object.activeViewCtr) ? globalThis.Number(object.activeViewCtr) : undefined,
      activeViewImpressions: isSet(object.activeViewImpressions)
        ? Long.fromValue(object.activeViewImpressions)
        : undefined,
      activeViewMeasurability: isSet(object.activeViewMeasurability)
        ? globalThis.Number(object.activeViewMeasurability)
        : undefined,
      activeViewMeasurableCostMicros: isSet(object.activeViewMeasurableCostMicros)
        ? Long.fromValue(object.activeViewMeasurableCostMicros)
        : undefined,
      activeViewMeasurableImpressions: isSet(object.activeViewMeasurableImpressions)
        ? Long.fromValue(object.activeViewMeasurableImpressions)
        : undefined,
      activeViewViewability: isSet(object.activeViewViewability)
        ? globalThis.Number(object.activeViewViewability)
        : undefined,
      allConversionsFromInteractionsRate: isSet(object.allConversionsFromInteractionsRate)
        ? globalThis.Number(object.allConversionsFromInteractionsRate)
        : undefined,
      allConversionsValue: isSet(object.allConversionsValue)
        ? globalThis.Number(object.allConversionsValue)
        : undefined,
      allConversionsValueByConversionDate: isSet(object.allConversionsValueByConversionDate)
        ? globalThis.Number(object.allConversionsValueByConversionDate)
        : undefined,
      allNewCustomerLifetimeValue: isSet(object.allNewCustomerLifetimeValue)
        ? globalThis.Number(object.allNewCustomerLifetimeValue)
        : undefined,
      allConversions: isSet(object.allConversions) ? globalThis.Number(object.allConversions) : undefined,
      allConversionsByConversionDate: isSet(object.allConversionsByConversionDate)
        ? globalThis.Number(object.allConversionsByConversionDate)
        : undefined,
      allConversionsValuePerCost: isSet(object.allConversionsValuePerCost)
        ? globalThis.Number(object.allConversionsValuePerCost)
        : undefined,
      allConversionsFromClickToCall: isSet(object.allConversionsFromClickToCall)
        ? globalThis.Number(object.allConversionsFromClickToCall)
        : undefined,
      allConversionsFromDirections: isSet(object.allConversionsFromDirections)
        ? globalThis.Number(object.allConversionsFromDirections)
        : undefined,
      allConversionsFromInteractionsValuePerInteraction: isSet(object.allConversionsFromInteractionsValuePerInteraction)
        ? globalThis.Number(object.allConversionsFromInteractionsValuePerInteraction)
        : undefined,
      allConversionsFromMenu: isSet(object.allConversionsFromMenu)
        ? globalThis.Number(object.allConversionsFromMenu)
        : undefined,
      allConversionsFromOrder: isSet(object.allConversionsFromOrder)
        ? globalThis.Number(object.allConversionsFromOrder)
        : undefined,
      allConversionsFromOtherEngagement: isSet(object.allConversionsFromOtherEngagement)
        ? globalThis.Number(object.allConversionsFromOtherEngagement)
        : undefined,
      allConversionsFromStoreVisit: isSet(object.allConversionsFromStoreVisit)
        ? globalThis.Number(object.allConversionsFromStoreVisit)
        : undefined,
      allConversionsFromStoreWebsite: isSet(object.allConversionsFromStoreWebsite)
        ? globalThis.Number(object.allConversionsFromStoreWebsite)
        : undefined,
      auctionInsightSearchAbsoluteTopImpressionPercentage:
        isSet(object.auctionInsightSearchAbsoluteTopImpressionPercentage)
          ? globalThis.Number(object.auctionInsightSearchAbsoluteTopImpressionPercentage)
          : undefined,
      auctionInsightSearchImpressionShare: isSet(object.auctionInsightSearchImpressionShare)
        ? globalThis.Number(object.auctionInsightSearchImpressionShare)
        : undefined,
      auctionInsightSearchOutrankingShare: isSet(object.auctionInsightSearchOutrankingShare)
        ? globalThis.Number(object.auctionInsightSearchOutrankingShare)
        : undefined,
      auctionInsightSearchOverlapRate: isSet(object.auctionInsightSearchOverlapRate)
        ? globalThis.Number(object.auctionInsightSearchOverlapRate)
        : undefined,
      auctionInsightSearchPositionAboveRate: isSet(object.auctionInsightSearchPositionAboveRate)
        ? globalThis.Number(object.auctionInsightSearchPositionAboveRate)
        : undefined,
      auctionInsightSearchTopImpressionPercentage: isSet(object.auctionInsightSearchTopImpressionPercentage)
        ? globalThis.Number(object.auctionInsightSearchTopImpressionPercentage)
        : undefined,
      averageCost: isSet(object.averageCost) ? globalThis.Number(object.averageCost) : undefined,
      averageCpc: isSet(object.averageCpc) ? globalThis.Number(object.averageCpc) : undefined,
      averageCpe: isSet(object.averageCpe) ? globalThis.Number(object.averageCpe) : undefined,
      averageCpm: isSet(object.averageCpm) ? globalThis.Number(object.averageCpm) : undefined,
      averageCpv: isSet(object.averageCpv) ? globalThis.Number(object.averageCpv) : undefined,
      averagePageViews: isSet(object.averagePageViews) ? globalThis.Number(object.averagePageViews) : undefined,
      averageTimeOnSite: isSet(object.averageTimeOnSite) ? globalThis.Number(object.averageTimeOnSite) : undefined,
      benchmarkAverageMaxCpc: isSet(object.benchmarkAverageMaxCpc)
        ? globalThis.Number(object.benchmarkAverageMaxCpc)
        : undefined,
      biddableAppInstallConversions: isSet(object.biddableAppInstallConversions)
        ? globalThis.Number(object.biddableAppInstallConversions)
        : undefined,
      biddableAppPostInstallConversions: isSet(object.biddableAppPostInstallConversions)
        ? globalThis.Number(object.biddableAppPostInstallConversions)
        : undefined,
      benchmarkCtr: isSet(object.benchmarkCtr) ? globalThis.Number(object.benchmarkCtr) : undefined,
      bounceRate: isSet(object.bounceRate) ? globalThis.Number(object.bounceRate) : undefined,
      clicks: isSet(object.clicks) ? Long.fromValue(object.clicks) : undefined,
      combinedClicks: isSet(object.combinedClicks) ? Long.fromValue(object.combinedClicks) : undefined,
      combinedClicksPerQuery: isSet(object.combinedClicksPerQuery)
        ? globalThis.Number(object.combinedClicksPerQuery)
        : undefined,
      combinedQueries: isSet(object.combinedQueries) ? Long.fromValue(object.combinedQueries) : undefined,
      contentBudgetLostImpressionShare: isSet(object.contentBudgetLostImpressionShare)
        ? globalThis.Number(object.contentBudgetLostImpressionShare)
        : undefined,
      contentImpressionShare: isSet(object.contentImpressionShare)
        ? globalThis.Number(object.contentImpressionShare)
        : undefined,
      conversionLastReceivedRequestDateTime: isSet(object.conversionLastReceivedRequestDateTime)
        ? globalThis.String(object.conversionLastReceivedRequestDateTime)
        : undefined,
      conversionLastConversionDate: isSet(object.conversionLastConversionDate)
        ? globalThis.String(object.conversionLastConversionDate)
        : undefined,
      contentRankLostImpressionShare: isSet(object.contentRankLostImpressionShare)
        ? globalThis.Number(object.contentRankLostImpressionShare)
        : undefined,
      conversionsFromInteractionsRate: isSet(object.conversionsFromInteractionsRate)
        ? globalThis.Number(object.conversionsFromInteractionsRate)
        : undefined,
      conversionsValue: isSet(object.conversionsValue) ? globalThis.Number(object.conversionsValue) : undefined,
      conversionsValueByConversionDate: isSet(object.conversionsValueByConversionDate)
        ? globalThis.Number(object.conversionsValueByConversionDate)
        : undefined,
      newCustomerLifetimeValue: isSet(object.newCustomerLifetimeValue)
        ? globalThis.Number(object.newCustomerLifetimeValue)
        : undefined,
      conversionsValuePerCost: isSet(object.conversionsValuePerCost)
        ? globalThis.Number(object.conversionsValuePerCost)
        : undefined,
      conversionsFromInteractionsValuePerInteraction: isSet(object.conversionsFromInteractionsValuePerInteraction)
        ? globalThis.Number(object.conversionsFromInteractionsValuePerInteraction)
        : undefined,
      conversions: isSet(object.conversions) ? globalThis.Number(object.conversions) : undefined,
      conversionsByConversionDate: isSet(object.conversionsByConversionDate)
        ? globalThis.Number(object.conversionsByConversionDate)
        : undefined,
      costMicros: isSet(object.costMicros) ? Long.fromValue(object.costMicros) : undefined,
      costPerAllConversions: isSet(object.costPerAllConversions)
        ? globalThis.Number(object.costPerAllConversions)
        : undefined,
      costPerConversion: isSet(object.costPerConversion) ? globalThis.Number(object.costPerConversion) : undefined,
      costPerCurrentModelAttributedConversion: isSet(object.costPerCurrentModelAttributedConversion)
        ? globalThis.Number(object.costPerCurrentModelAttributedConversion)
        : undefined,
      crossDeviceConversions: isSet(object.crossDeviceConversions)
        ? globalThis.Number(object.crossDeviceConversions)
        : undefined,
      crossDeviceConversionsValueMicros: isSet(object.crossDeviceConversionsValueMicros)
        ? Long.fromValue(object.crossDeviceConversionsValueMicros)
        : undefined,
      ctr: isSet(object.ctr) ? globalThis.Number(object.ctr) : undefined,
      currentModelAttributedConversions: isSet(object.currentModelAttributedConversions)
        ? globalThis.Number(object.currentModelAttributedConversions)
        : undefined,
      currentModelAttributedConversionsFromInteractionsRate:
        isSet(object.currentModelAttributedConversionsFromInteractionsRate)
          ? globalThis.Number(object.currentModelAttributedConversionsFromInteractionsRate)
          : undefined,
      currentModelAttributedConversionsFromInteractionsValuePerInteraction:
        isSet(object.currentModelAttributedConversionsFromInteractionsValuePerInteraction)
          ? globalThis.Number(object.currentModelAttributedConversionsFromInteractionsValuePerInteraction)
          : undefined,
      currentModelAttributedConversionsValue: isSet(object.currentModelAttributedConversionsValue)
        ? globalThis.Number(object.currentModelAttributedConversionsValue)
        : undefined,
      currentModelAttributedConversionsValuePerCost: isSet(object.currentModelAttributedConversionsValuePerCost)
        ? globalThis.Number(object.currentModelAttributedConversionsValuePerCost)
        : undefined,
      engagementRate: isSet(object.engagementRate) ? globalThis.Number(object.engagementRate) : undefined,
      engagements: isSet(object.engagements) ? Long.fromValue(object.engagements) : undefined,
      hotelAverageLeadValueMicros: isSet(object.hotelAverageLeadValueMicros)
        ? globalThis.Number(object.hotelAverageLeadValueMicros)
        : undefined,
      hotelCommissionRateMicros: isSet(object.hotelCommissionRateMicros)
        ? Long.fromValue(object.hotelCommissionRateMicros)
        : undefined,
      hotelExpectedCommissionCost: isSet(object.hotelExpectedCommissionCost)
        ? globalThis.Number(object.hotelExpectedCommissionCost)
        : undefined,
      hotelPriceDifferencePercentage: isSet(object.hotelPriceDifferencePercentage)
        ? globalThis.Number(object.hotelPriceDifferencePercentage)
        : undefined,
      hotelEligibleImpressions: isSet(object.hotelEligibleImpressions)
        ? Long.fromValue(object.hotelEligibleImpressions)
        : undefined,
      historicalCreativeQualityScore: isSet(object.historicalCreativeQualityScore)
        ? qualityScoreBucketEnum_QualityScoreBucketFromJSON(object.historicalCreativeQualityScore)
        : 0,
      historicalLandingPageQualityScore: isSet(object.historicalLandingPageQualityScore)
        ? qualityScoreBucketEnum_QualityScoreBucketFromJSON(object.historicalLandingPageQualityScore)
        : 0,
      historicalQualityScore: isSet(object.historicalQualityScore)
        ? Long.fromValue(object.historicalQualityScore)
        : undefined,
      historicalSearchPredictedCtr: isSet(object.historicalSearchPredictedCtr)
        ? qualityScoreBucketEnum_QualityScoreBucketFromJSON(object.historicalSearchPredictedCtr)
        : 0,
      gmailForwards: isSet(object.gmailForwards) ? Long.fromValue(object.gmailForwards) : undefined,
      gmailSaves: isSet(object.gmailSaves) ? Long.fromValue(object.gmailSaves) : undefined,
      gmailSecondaryClicks: isSet(object.gmailSecondaryClicks)
        ? Long.fromValue(object.gmailSecondaryClicks)
        : undefined,
      impressionsFromStoreReach: isSet(object.impressionsFromStoreReach)
        ? Long.fromValue(object.impressionsFromStoreReach)
        : undefined,
      impressions: isSet(object.impressions) ? Long.fromValue(object.impressions) : undefined,
      interactionRate: isSet(object.interactionRate) ? globalThis.Number(object.interactionRate) : undefined,
      interactions: isSet(object.interactions) ? Long.fromValue(object.interactions) : undefined,
      interactionEventTypes: globalThis.Array.isArray(object?.interactionEventTypes)
        ? object.interactionEventTypes.map((e: any) => interactionEventTypeEnum_InteractionEventTypeFromJSON(e))
        : [],
      invalidClickRate: isSet(object.invalidClickRate) ? globalThis.Number(object.invalidClickRate) : undefined,
      invalidClicks: isSet(object.invalidClicks) ? Long.fromValue(object.invalidClicks) : undefined,
      messageChats: isSet(object.messageChats) ? Long.fromValue(object.messageChats) : undefined,
      messageImpressions: isSet(object.messageImpressions) ? Long.fromValue(object.messageImpressions) : undefined,
      messageChatRate: isSet(object.messageChatRate) ? globalThis.Number(object.messageChatRate) : undefined,
      mobileFriendlyClicksPercentage: isSet(object.mobileFriendlyClicksPercentage)
        ? globalThis.Number(object.mobileFriendlyClicksPercentage)
        : undefined,
      optimizationScoreUplift: isSet(object.optimizationScoreUplift)
        ? globalThis.Number(object.optimizationScoreUplift)
        : undefined,
      optimizationScoreUrl: isSet(object.optimizationScoreUrl)
        ? globalThis.String(object.optimizationScoreUrl)
        : undefined,
      organicClicks: isSet(object.organicClicks) ? Long.fromValue(object.organicClicks) : undefined,
      organicClicksPerQuery: isSet(object.organicClicksPerQuery)
        ? globalThis.Number(object.organicClicksPerQuery)
        : undefined,
      organicImpressions: isSet(object.organicImpressions) ? Long.fromValue(object.organicImpressions) : undefined,
      organicImpressionsPerQuery: isSet(object.organicImpressionsPerQuery)
        ? globalThis.Number(object.organicImpressionsPerQuery)
        : undefined,
      organicQueries: isSet(object.organicQueries) ? Long.fromValue(object.organicQueries) : undefined,
      percentNewVisitors: isSet(object.percentNewVisitors) ? globalThis.Number(object.percentNewVisitors) : undefined,
      phoneCalls: isSet(object.phoneCalls) ? Long.fromValue(object.phoneCalls) : undefined,
      phoneImpressions: isSet(object.phoneImpressions) ? Long.fromValue(object.phoneImpressions) : undefined,
      phoneThroughRate: isSet(object.phoneThroughRate) ? globalThis.Number(object.phoneThroughRate) : undefined,
      relativeCtr: isSet(object.relativeCtr) ? globalThis.Number(object.relativeCtr) : undefined,
      searchAbsoluteTopImpressionShare: isSet(object.searchAbsoluteTopImpressionShare)
        ? globalThis.Number(object.searchAbsoluteTopImpressionShare)
        : undefined,
      searchBudgetLostAbsoluteTopImpressionShare: isSet(object.searchBudgetLostAbsoluteTopImpressionShare)
        ? globalThis.Number(object.searchBudgetLostAbsoluteTopImpressionShare)
        : undefined,
      searchBudgetLostImpressionShare: isSet(object.searchBudgetLostImpressionShare)
        ? globalThis.Number(object.searchBudgetLostImpressionShare)
        : undefined,
      searchBudgetLostTopImpressionShare: isSet(object.searchBudgetLostTopImpressionShare)
        ? globalThis.Number(object.searchBudgetLostTopImpressionShare)
        : undefined,
      searchClickShare: isSet(object.searchClickShare) ? globalThis.Number(object.searchClickShare) : undefined,
      searchExactMatchImpressionShare: isSet(object.searchExactMatchImpressionShare)
        ? globalThis.Number(object.searchExactMatchImpressionShare)
        : undefined,
      searchImpressionShare: isSet(object.searchImpressionShare)
        ? globalThis.Number(object.searchImpressionShare)
        : undefined,
      searchRankLostAbsoluteTopImpressionShare: isSet(object.searchRankLostAbsoluteTopImpressionShare)
        ? globalThis.Number(object.searchRankLostAbsoluteTopImpressionShare)
        : undefined,
      searchRankLostImpressionShare: isSet(object.searchRankLostImpressionShare)
        ? globalThis.Number(object.searchRankLostImpressionShare)
        : undefined,
      searchRankLostTopImpressionShare: isSet(object.searchRankLostTopImpressionShare)
        ? globalThis.Number(object.searchRankLostTopImpressionShare)
        : undefined,
      searchTopImpressionShare: isSet(object.searchTopImpressionShare)
        ? globalThis.Number(object.searchTopImpressionShare)
        : undefined,
      searchVolume: isSet(object.searchVolume) ? SearchVolumeRange.fromJSON(object.searchVolume) : undefined,
      speedScore: isSet(object.speedScore) ? Long.fromValue(object.speedScore) : undefined,
      averageTargetCpaMicros: isSet(object.averageTargetCpaMicros)
        ? Long.fromValue(object.averageTargetCpaMicros)
        : undefined,
      averageTargetRoas: isSet(object.averageTargetRoas) ? globalThis.Number(object.averageTargetRoas) : undefined,
      topImpressionPercentage: isSet(object.topImpressionPercentage)
        ? globalThis.Number(object.topImpressionPercentage)
        : undefined,
      validAcceleratedMobilePagesClicksPercentage: isSet(object.validAcceleratedMobilePagesClicksPercentage)
        ? globalThis.Number(object.validAcceleratedMobilePagesClicksPercentage)
        : undefined,
      valuePerAllConversions: isSet(object.valuePerAllConversions)
        ? globalThis.Number(object.valuePerAllConversions)
        : undefined,
      valuePerAllConversionsByConversionDate: isSet(object.valuePerAllConversionsByConversionDate)
        ? globalThis.Number(object.valuePerAllConversionsByConversionDate)
        : undefined,
      valuePerConversion: isSet(object.valuePerConversion) ? globalThis.Number(object.valuePerConversion) : undefined,
      valuePerConversionsByConversionDate: isSet(object.valuePerConversionsByConversionDate)
        ? globalThis.Number(object.valuePerConversionsByConversionDate)
        : undefined,
      valuePerCurrentModelAttributedConversion: isSet(object.valuePerCurrentModelAttributedConversion)
        ? globalThis.Number(object.valuePerCurrentModelAttributedConversion)
        : undefined,
      videoQuartileP100Rate: isSet(object.videoQuartileP100Rate)
        ? globalThis.Number(object.videoQuartileP100Rate)
        : undefined,
      videoQuartileP25Rate: isSet(object.videoQuartileP25Rate)
        ? globalThis.Number(object.videoQuartileP25Rate)
        : undefined,
      videoQuartileP50Rate: isSet(object.videoQuartileP50Rate)
        ? globalThis.Number(object.videoQuartileP50Rate)
        : undefined,
      videoQuartileP75Rate: isSet(object.videoQuartileP75Rate)
        ? globalThis.Number(object.videoQuartileP75Rate)
        : undefined,
      videoViewRate: isSet(object.videoViewRate) ? globalThis.Number(object.videoViewRate) : undefined,
      videoViews: isSet(object.videoViews) ? Long.fromValue(object.videoViews) : undefined,
      viewThroughConversions: isSet(object.viewThroughConversions)
        ? Long.fromValue(object.viewThroughConversions)
        : undefined,
      skAdNetworkInstalls: isSet(object.skAdNetworkInstalls) ? Long.fromValue(object.skAdNetworkInstalls) : Long.ZERO,
      skAdNetworkTotalConversions: isSet(object.skAdNetworkTotalConversions)
        ? Long.fromValue(object.skAdNetworkTotalConversions)
        : Long.ZERO,
      publisherPurchasedClicks: isSet(object.publisherPurchasedClicks)
        ? Long.fromValue(object.publisherPurchasedClicks)
        : Long.ZERO,
      publisherOrganicClicks: isSet(object.publisherOrganicClicks)
        ? Long.fromValue(object.publisherOrganicClicks)
        : Long.ZERO,
      publisherUnknownClicks: isSet(object.publisherUnknownClicks)
        ? Long.fromValue(object.publisherUnknownClicks)
        : Long.ZERO,
      allConversionsFromLocationAssetClickToCall: isSet(object.allConversionsFromLocationAssetClickToCall)
        ? globalThis.Number(object.allConversionsFromLocationAssetClickToCall)
        : undefined,
      allConversionsFromLocationAssetDirections: isSet(object.allConversionsFromLocationAssetDirections)
        ? globalThis.Number(object.allConversionsFromLocationAssetDirections)
        : undefined,
      allConversionsFromLocationAssetMenu: isSet(object.allConversionsFromLocationAssetMenu)
        ? globalThis.Number(object.allConversionsFromLocationAssetMenu)
        : undefined,
      allConversionsFromLocationAssetOrder: isSet(object.allConversionsFromLocationAssetOrder)
        ? globalThis.Number(object.allConversionsFromLocationAssetOrder)
        : undefined,
      allConversionsFromLocationAssetOtherEngagement: isSet(object.allConversionsFromLocationAssetOtherEngagement)
        ? globalThis.Number(object.allConversionsFromLocationAssetOtherEngagement)
        : undefined,
      allConversionsFromLocationAssetStoreVisits: isSet(object.allConversionsFromLocationAssetStoreVisits)
        ? globalThis.Number(object.allConversionsFromLocationAssetStoreVisits)
        : undefined,
      allConversionsFromLocationAssetWebsite: isSet(object.allConversionsFromLocationAssetWebsite)
        ? globalThis.Number(object.allConversionsFromLocationAssetWebsite)
        : undefined,
      eligibleImpressionsFromLocationAssetStoreReach: isSet(object.eligibleImpressionsFromLocationAssetStoreReach)
        ? Long.fromValue(object.eligibleImpressionsFromLocationAssetStoreReach)
        : undefined,
      viewThroughConversionsFromLocationAssetClickToCall:
        isSet(object.viewThroughConversionsFromLocationAssetClickToCall)
          ? globalThis.Number(object.viewThroughConversionsFromLocationAssetClickToCall)
          : undefined,
      viewThroughConversionsFromLocationAssetDirections: isSet(object.viewThroughConversionsFromLocationAssetDirections)
        ? globalThis.Number(object.viewThroughConversionsFromLocationAssetDirections)
        : undefined,
      viewThroughConversionsFromLocationAssetMenu: isSet(object.viewThroughConversionsFromLocationAssetMenu)
        ? globalThis.Number(object.viewThroughConversionsFromLocationAssetMenu)
        : undefined,
      viewThroughConversionsFromLocationAssetOrder: isSet(object.viewThroughConversionsFromLocationAssetOrder)
        ? globalThis.Number(object.viewThroughConversionsFromLocationAssetOrder)
        : undefined,
      viewThroughConversionsFromLocationAssetOtherEngagement:
        isSet(object.viewThroughConversionsFromLocationAssetOtherEngagement)
          ? globalThis.Number(object.viewThroughConversionsFromLocationAssetOtherEngagement)
          : undefined,
      viewThroughConversionsFromLocationAssetStoreVisits:
        isSet(object.viewThroughConversionsFromLocationAssetStoreVisits)
          ? globalThis.Number(object.viewThroughConversionsFromLocationAssetStoreVisits)
          : undefined,
      viewThroughConversionsFromLocationAssetWebsite: isSet(object.viewThroughConversionsFromLocationAssetWebsite)
        ? globalThis.Number(object.viewThroughConversionsFromLocationAssetWebsite)
        : undefined,
      orders: isSet(object.orders) ? globalThis.Number(object.orders) : undefined,
      averageOrderValueMicros: isSet(object.averageOrderValueMicros)
        ? Long.fromValue(object.averageOrderValueMicros)
        : undefined,
      averageCartSize: isSet(object.averageCartSize) ? globalThis.Number(object.averageCartSize) : undefined,
      costOfGoodsSoldMicros: isSet(object.costOfGoodsSoldMicros)
        ? Long.fromValue(object.costOfGoodsSoldMicros)
        : undefined,
      grossProfitMicros: isSet(object.grossProfitMicros) ? Long.fromValue(object.grossProfitMicros) : undefined,
      grossProfitMargin: isSet(object.grossProfitMargin) ? globalThis.Number(object.grossProfitMargin) : undefined,
      revenueMicros: isSet(object.revenueMicros) ? Long.fromValue(object.revenueMicros) : undefined,
      unitsSold: isSet(object.unitsSold) ? globalThis.Number(object.unitsSold) : undefined,
      crossSellCostOfGoodsSoldMicros: isSet(object.crossSellCostOfGoodsSoldMicros)
        ? Long.fromValue(object.crossSellCostOfGoodsSoldMicros)
        : undefined,
      crossSellGrossProfitMicros: isSet(object.crossSellGrossProfitMicros)
        ? Long.fromValue(object.crossSellGrossProfitMicros)
        : undefined,
      crossSellRevenueMicros: isSet(object.crossSellRevenueMicros)
        ? Long.fromValue(object.crossSellRevenueMicros)
        : undefined,
      crossSellUnitsSold: isSet(object.crossSellUnitsSold) ? globalThis.Number(object.crossSellUnitsSold) : undefined,
      leadCostOfGoodsSoldMicros: isSet(object.leadCostOfGoodsSoldMicros)
        ? Long.fromValue(object.leadCostOfGoodsSoldMicros)
        : undefined,
      leadGrossProfitMicros: isSet(object.leadGrossProfitMicros)
        ? Long.fromValue(object.leadGrossProfitMicros)
        : undefined,
      leadRevenueMicros: isSet(object.leadRevenueMicros) ? Long.fromValue(object.leadRevenueMicros) : undefined,
      leadUnitsSold: isSet(object.leadUnitsSold) ? globalThis.Number(object.leadUnitsSold) : undefined,
      uniqueUsers: isSet(object.uniqueUsers) ? Long.fromValue(object.uniqueUsers) : undefined,
      averageImpressionFrequencyPerUser: isSet(object.averageImpressionFrequencyPerUser)
        ? globalThis.Number(object.averageImpressionFrequencyPerUser)
        : undefined,
      linkedEntitiesCount: isSet(object.linkedEntitiesCount) ? Long.fromValue(object.linkedEntitiesCount) : undefined,
      linkedSampleEntities: globalThis.Array.isArray(object?.linkedSampleEntities)
        ? object.linkedSampleEntities.map((e: any) => globalThis.String(e))
        : [],
      sampleBestPerformanceEntities: globalThis.Array.isArray(object?.sampleBestPerformanceEntities)
        ? object.sampleBestPerformanceEntities.map((e: any) => globalThis.String(e))
        : [],
      sampleGoodPerformanceEntities: globalThis.Array.isArray(object?.sampleGoodPerformanceEntities)
        ? object.sampleGoodPerformanceEntities.map((e: any) => globalThis.String(e))
        : [],
      sampleLowPerformanceEntities: globalThis.Array.isArray(object?.sampleLowPerformanceEntities)
        ? object.sampleLowPerformanceEntities.map((e: any) => globalThis.String(e))
        : [],
      sampleLearningPerformanceEntities: globalThis.Array.isArray(object?.sampleLearningPerformanceEntities)
        ? object.sampleLearningPerformanceEntities.map((e: any) => globalThis.String(e))
        : [],
      sampleUnratedPerformanceEntities: globalThis.Array.isArray(object?.sampleUnratedPerformanceEntities)
        ? object.sampleUnratedPerformanceEntities.map((e: any) => globalThis.String(e))
        : [],
      assetPinnedTotalCount: isSet(object.assetPinnedTotalCount)
        ? Long.fromValue(object.assetPinnedTotalCount)
        : undefined,
      assetPinnedAsHeadlinePositionOneCount: isSet(object.assetPinnedAsHeadlinePositionOneCount)
        ? Long.fromValue(object.assetPinnedAsHeadlinePositionOneCount)
        : undefined,
      assetPinnedAsHeadlinePositionTwoCount: isSet(object.assetPinnedAsHeadlinePositionTwoCount)
        ? Long.fromValue(object.assetPinnedAsHeadlinePositionTwoCount)
        : undefined,
      assetPinnedAsHeadlinePositionThreeCount: isSet(object.assetPinnedAsHeadlinePositionThreeCount)
        ? Long.fromValue(object.assetPinnedAsHeadlinePositionThreeCount)
        : undefined,
      assetPinnedAsDescriptionPositionOneCount: isSet(object.assetPinnedAsDescriptionPositionOneCount)
        ? Long.fromValue(object.assetPinnedAsDescriptionPositionOneCount)
        : undefined,
      assetPinnedAsDescriptionPositionTwoCount: isSet(object.assetPinnedAsDescriptionPositionTwoCount)
        ? Long.fromValue(object.assetPinnedAsDescriptionPositionTwoCount)
        : undefined,
      assetBestPerformanceImpressionPercentage: isSet(object.assetBestPerformanceImpressionPercentage)
        ? globalThis.Number(object.assetBestPerformanceImpressionPercentage)
        : undefined,
      assetGoodPerformanceImpressionPercentage: isSet(object.assetGoodPerformanceImpressionPercentage)
        ? globalThis.Number(object.assetGoodPerformanceImpressionPercentage)
        : undefined,
      assetLowPerformanceImpressionPercentage: isSet(object.assetLowPerformanceImpressionPercentage)
        ? globalThis.Number(object.assetLowPerformanceImpressionPercentage)
        : undefined,
      assetLearningPerformanceImpressionPercentage: isSet(object.assetLearningPerformanceImpressionPercentage)
        ? globalThis.Number(object.assetLearningPerformanceImpressionPercentage)
        : undefined,
      assetUnratedPerformanceImpressionPercentage: isSet(object.assetUnratedPerformanceImpressionPercentage)
        ? globalThis.Number(object.assetUnratedPerformanceImpressionPercentage)
        : undefined,
      assetBestPerformanceCostPercentage: isSet(object.assetBestPerformanceCostPercentage)
        ? globalThis.Number(object.assetBestPerformanceCostPercentage)
        : undefined,
      assetGoodPerformanceCostPercentage: isSet(object.assetGoodPerformanceCostPercentage)
        ? globalThis.Number(object.assetGoodPerformanceCostPercentage)
        : undefined,
      assetLowPerformanceCostPercentage: isSet(object.assetLowPerformanceCostPercentage)
        ? globalThis.Number(object.assetLowPerformanceCostPercentage)
        : undefined,
      assetLearningPerformanceCostPercentage: isSet(object.assetLearningPerformanceCostPercentage)
        ? globalThis.Number(object.assetLearningPerformanceCostPercentage)
        : undefined,
      assetUnratedPerformanceCostPercentage: isSet(object.assetUnratedPerformanceCostPercentage)
        ? globalThis.Number(object.assetUnratedPerformanceCostPercentage)
        : undefined,
    };
  },

  toJSON(message: Metrics): unknown {
    const obj: any = {};
    if (message.absoluteTopImpressionPercentage !== undefined) {
      obj.absoluteTopImpressionPercentage = message.absoluteTopImpressionPercentage;
    }
    if (message.activeViewCpm !== undefined) {
      obj.activeViewCpm = message.activeViewCpm;
    }
    if (message.activeViewCtr !== undefined) {
      obj.activeViewCtr = message.activeViewCtr;
    }
    if (message.activeViewImpressions !== undefined) {
      obj.activeViewImpressions = (message.activeViewImpressions || Long.ZERO).toString();
    }
    if (message.activeViewMeasurability !== undefined) {
      obj.activeViewMeasurability = message.activeViewMeasurability;
    }
    if (message.activeViewMeasurableCostMicros !== undefined) {
      obj.activeViewMeasurableCostMicros = (message.activeViewMeasurableCostMicros || Long.ZERO).toString();
    }
    if (message.activeViewMeasurableImpressions !== undefined) {
      obj.activeViewMeasurableImpressions = (message.activeViewMeasurableImpressions || Long.ZERO).toString();
    }
    if (message.activeViewViewability !== undefined) {
      obj.activeViewViewability = message.activeViewViewability;
    }
    if (message.allConversionsFromInteractionsRate !== undefined) {
      obj.allConversionsFromInteractionsRate = message.allConversionsFromInteractionsRate;
    }
    if (message.allConversionsValue !== undefined) {
      obj.allConversionsValue = message.allConversionsValue;
    }
    if (message.allConversionsValueByConversionDate !== undefined) {
      obj.allConversionsValueByConversionDate = message.allConversionsValueByConversionDate;
    }
    if (message.allNewCustomerLifetimeValue !== undefined) {
      obj.allNewCustomerLifetimeValue = message.allNewCustomerLifetimeValue;
    }
    if (message.allConversions !== undefined) {
      obj.allConversions = message.allConversions;
    }
    if (message.allConversionsByConversionDate !== undefined) {
      obj.allConversionsByConversionDate = message.allConversionsByConversionDate;
    }
    if (message.allConversionsValuePerCost !== undefined) {
      obj.allConversionsValuePerCost = message.allConversionsValuePerCost;
    }
    if (message.allConversionsFromClickToCall !== undefined) {
      obj.allConversionsFromClickToCall = message.allConversionsFromClickToCall;
    }
    if (message.allConversionsFromDirections !== undefined) {
      obj.allConversionsFromDirections = message.allConversionsFromDirections;
    }
    if (message.allConversionsFromInteractionsValuePerInteraction !== undefined) {
      obj.allConversionsFromInteractionsValuePerInteraction = message.allConversionsFromInteractionsValuePerInteraction;
    }
    if (message.allConversionsFromMenu !== undefined) {
      obj.allConversionsFromMenu = message.allConversionsFromMenu;
    }
    if (message.allConversionsFromOrder !== undefined) {
      obj.allConversionsFromOrder = message.allConversionsFromOrder;
    }
    if (message.allConversionsFromOtherEngagement !== undefined) {
      obj.allConversionsFromOtherEngagement = message.allConversionsFromOtherEngagement;
    }
    if (message.allConversionsFromStoreVisit !== undefined) {
      obj.allConversionsFromStoreVisit = message.allConversionsFromStoreVisit;
    }
    if (message.allConversionsFromStoreWebsite !== undefined) {
      obj.allConversionsFromStoreWebsite = message.allConversionsFromStoreWebsite;
    }
    if (message.auctionInsightSearchAbsoluteTopImpressionPercentage !== undefined) {
      obj.auctionInsightSearchAbsoluteTopImpressionPercentage =
        message.auctionInsightSearchAbsoluteTopImpressionPercentage;
    }
    if (message.auctionInsightSearchImpressionShare !== undefined) {
      obj.auctionInsightSearchImpressionShare = message.auctionInsightSearchImpressionShare;
    }
    if (message.auctionInsightSearchOutrankingShare !== undefined) {
      obj.auctionInsightSearchOutrankingShare = message.auctionInsightSearchOutrankingShare;
    }
    if (message.auctionInsightSearchOverlapRate !== undefined) {
      obj.auctionInsightSearchOverlapRate = message.auctionInsightSearchOverlapRate;
    }
    if (message.auctionInsightSearchPositionAboveRate !== undefined) {
      obj.auctionInsightSearchPositionAboveRate = message.auctionInsightSearchPositionAboveRate;
    }
    if (message.auctionInsightSearchTopImpressionPercentage !== undefined) {
      obj.auctionInsightSearchTopImpressionPercentage = message.auctionInsightSearchTopImpressionPercentage;
    }
    if (message.averageCost !== undefined) {
      obj.averageCost = message.averageCost;
    }
    if (message.averageCpc !== undefined) {
      obj.averageCpc = message.averageCpc;
    }
    if (message.averageCpe !== undefined) {
      obj.averageCpe = message.averageCpe;
    }
    if (message.averageCpm !== undefined) {
      obj.averageCpm = message.averageCpm;
    }
    if (message.averageCpv !== undefined) {
      obj.averageCpv = message.averageCpv;
    }
    if (message.averagePageViews !== undefined) {
      obj.averagePageViews = message.averagePageViews;
    }
    if (message.averageTimeOnSite !== undefined) {
      obj.averageTimeOnSite = message.averageTimeOnSite;
    }
    if (message.benchmarkAverageMaxCpc !== undefined) {
      obj.benchmarkAverageMaxCpc = message.benchmarkAverageMaxCpc;
    }
    if (message.biddableAppInstallConversions !== undefined) {
      obj.biddableAppInstallConversions = message.biddableAppInstallConversions;
    }
    if (message.biddableAppPostInstallConversions !== undefined) {
      obj.biddableAppPostInstallConversions = message.biddableAppPostInstallConversions;
    }
    if (message.benchmarkCtr !== undefined) {
      obj.benchmarkCtr = message.benchmarkCtr;
    }
    if (message.bounceRate !== undefined) {
      obj.bounceRate = message.bounceRate;
    }
    if (message.clicks !== undefined) {
      obj.clicks = (message.clicks || Long.ZERO).toString();
    }
    if (message.combinedClicks !== undefined) {
      obj.combinedClicks = (message.combinedClicks || Long.ZERO).toString();
    }
    if (message.combinedClicksPerQuery !== undefined) {
      obj.combinedClicksPerQuery = message.combinedClicksPerQuery;
    }
    if (message.combinedQueries !== undefined) {
      obj.combinedQueries = (message.combinedQueries || Long.ZERO).toString();
    }
    if (message.contentBudgetLostImpressionShare !== undefined) {
      obj.contentBudgetLostImpressionShare = message.contentBudgetLostImpressionShare;
    }
    if (message.contentImpressionShare !== undefined) {
      obj.contentImpressionShare = message.contentImpressionShare;
    }
    if (message.conversionLastReceivedRequestDateTime !== undefined) {
      obj.conversionLastReceivedRequestDateTime = message.conversionLastReceivedRequestDateTime;
    }
    if (message.conversionLastConversionDate !== undefined) {
      obj.conversionLastConversionDate = message.conversionLastConversionDate;
    }
    if (message.contentRankLostImpressionShare !== undefined) {
      obj.contentRankLostImpressionShare = message.contentRankLostImpressionShare;
    }
    if (message.conversionsFromInteractionsRate !== undefined) {
      obj.conversionsFromInteractionsRate = message.conversionsFromInteractionsRate;
    }
    if (message.conversionsValue !== undefined) {
      obj.conversionsValue = message.conversionsValue;
    }
    if (message.conversionsValueByConversionDate !== undefined) {
      obj.conversionsValueByConversionDate = message.conversionsValueByConversionDate;
    }
    if (message.newCustomerLifetimeValue !== undefined) {
      obj.newCustomerLifetimeValue = message.newCustomerLifetimeValue;
    }
    if (message.conversionsValuePerCost !== undefined) {
      obj.conversionsValuePerCost = message.conversionsValuePerCost;
    }
    if (message.conversionsFromInteractionsValuePerInteraction !== undefined) {
      obj.conversionsFromInteractionsValuePerInteraction = message.conversionsFromInteractionsValuePerInteraction;
    }
    if (message.conversions !== undefined) {
      obj.conversions = message.conversions;
    }
    if (message.conversionsByConversionDate !== undefined) {
      obj.conversionsByConversionDate = message.conversionsByConversionDate;
    }
    if (message.costMicros !== undefined) {
      obj.costMicros = (message.costMicros || Long.ZERO).toString();
    }
    if (message.costPerAllConversions !== undefined) {
      obj.costPerAllConversions = message.costPerAllConversions;
    }
    if (message.costPerConversion !== undefined) {
      obj.costPerConversion = message.costPerConversion;
    }
    if (message.costPerCurrentModelAttributedConversion !== undefined) {
      obj.costPerCurrentModelAttributedConversion = message.costPerCurrentModelAttributedConversion;
    }
    if (message.crossDeviceConversions !== undefined) {
      obj.crossDeviceConversions = message.crossDeviceConversions;
    }
    if (message.crossDeviceConversionsValueMicros !== undefined) {
      obj.crossDeviceConversionsValueMicros = (message.crossDeviceConversionsValueMicros || Long.ZERO).toString();
    }
    if (message.ctr !== undefined) {
      obj.ctr = message.ctr;
    }
    if (message.currentModelAttributedConversions !== undefined) {
      obj.currentModelAttributedConversions = message.currentModelAttributedConversions;
    }
    if (message.currentModelAttributedConversionsFromInteractionsRate !== undefined) {
      obj.currentModelAttributedConversionsFromInteractionsRate =
        message.currentModelAttributedConversionsFromInteractionsRate;
    }
    if (message.currentModelAttributedConversionsFromInteractionsValuePerInteraction !== undefined) {
      obj.currentModelAttributedConversionsFromInteractionsValuePerInteraction =
        message.currentModelAttributedConversionsFromInteractionsValuePerInteraction;
    }
    if (message.currentModelAttributedConversionsValue !== undefined) {
      obj.currentModelAttributedConversionsValue = message.currentModelAttributedConversionsValue;
    }
    if (message.currentModelAttributedConversionsValuePerCost !== undefined) {
      obj.currentModelAttributedConversionsValuePerCost = message.currentModelAttributedConversionsValuePerCost;
    }
    if (message.engagementRate !== undefined) {
      obj.engagementRate = message.engagementRate;
    }
    if (message.engagements !== undefined) {
      obj.engagements = (message.engagements || Long.ZERO).toString();
    }
    if (message.hotelAverageLeadValueMicros !== undefined) {
      obj.hotelAverageLeadValueMicros = message.hotelAverageLeadValueMicros;
    }
    if (message.hotelCommissionRateMicros !== undefined) {
      obj.hotelCommissionRateMicros = (message.hotelCommissionRateMicros || Long.ZERO).toString();
    }
    if (message.hotelExpectedCommissionCost !== undefined) {
      obj.hotelExpectedCommissionCost = message.hotelExpectedCommissionCost;
    }
    if (message.hotelPriceDifferencePercentage !== undefined) {
      obj.hotelPriceDifferencePercentage = message.hotelPriceDifferencePercentage;
    }
    if (message.hotelEligibleImpressions !== undefined) {
      obj.hotelEligibleImpressions = (message.hotelEligibleImpressions || Long.ZERO).toString();
    }
    if (message.historicalCreativeQualityScore !== 0) {
      obj.historicalCreativeQualityScore = qualityScoreBucketEnum_QualityScoreBucketToJSON(
        message.historicalCreativeQualityScore,
      );
    }
    if (message.historicalLandingPageQualityScore !== 0) {
      obj.historicalLandingPageQualityScore = qualityScoreBucketEnum_QualityScoreBucketToJSON(
        message.historicalLandingPageQualityScore,
      );
    }
    if (message.historicalQualityScore !== undefined) {
      obj.historicalQualityScore = (message.historicalQualityScore || Long.ZERO).toString();
    }
    if (message.historicalSearchPredictedCtr !== 0) {
      obj.historicalSearchPredictedCtr = qualityScoreBucketEnum_QualityScoreBucketToJSON(
        message.historicalSearchPredictedCtr,
      );
    }
    if (message.gmailForwards !== undefined) {
      obj.gmailForwards = (message.gmailForwards || Long.ZERO).toString();
    }
    if (message.gmailSaves !== undefined) {
      obj.gmailSaves = (message.gmailSaves || Long.ZERO).toString();
    }
    if (message.gmailSecondaryClicks !== undefined) {
      obj.gmailSecondaryClicks = (message.gmailSecondaryClicks || Long.ZERO).toString();
    }
    if (message.impressionsFromStoreReach !== undefined) {
      obj.impressionsFromStoreReach = (message.impressionsFromStoreReach || Long.ZERO).toString();
    }
    if (message.impressions !== undefined) {
      obj.impressions = (message.impressions || Long.ZERO).toString();
    }
    if (message.interactionRate !== undefined) {
      obj.interactionRate = message.interactionRate;
    }
    if (message.interactions !== undefined) {
      obj.interactions = (message.interactions || Long.ZERO).toString();
    }
    if (message.interactionEventTypes?.length) {
      obj.interactionEventTypes = message.interactionEventTypes.map((e) =>
        interactionEventTypeEnum_InteractionEventTypeToJSON(e)
      );
    }
    if (message.invalidClickRate !== undefined) {
      obj.invalidClickRate = message.invalidClickRate;
    }
    if (message.invalidClicks !== undefined) {
      obj.invalidClicks = (message.invalidClicks || Long.ZERO).toString();
    }
    if (message.messageChats !== undefined) {
      obj.messageChats = (message.messageChats || Long.ZERO).toString();
    }
    if (message.messageImpressions !== undefined) {
      obj.messageImpressions = (message.messageImpressions || Long.ZERO).toString();
    }
    if (message.messageChatRate !== undefined) {
      obj.messageChatRate = message.messageChatRate;
    }
    if (message.mobileFriendlyClicksPercentage !== undefined) {
      obj.mobileFriendlyClicksPercentage = message.mobileFriendlyClicksPercentage;
    }
    if (message.optimizationScoreUplift !== undefined) {
      obj.optimizationScoreUplift = message.optimizationScoreUplift;
    }
    if (message.optimizationScoreUrl !== undefined) {
      obj.optimizationScoreUrl = message.optimizationScoreUrl;
    }
    if (message.organicClicks !== undefined) {
      obj.organicClicks = (message.organicClicks || Long.ZERO).toString();
    }
    if (message.organicClicksPerQuery !== undefined) {
      obj.organicClicksPerQuery = message.organicClicksPerQuery;
    }
    if (message.organicImpressions !== undefined) {
      obj.organicImpressions = (message.organicImpressions || Long.ZERO).toString();
    }
    if (message.organicImpressionsPerQuery !== undefined) {
      obj.organicImpressionsPerQuery = message.organicImpressionsPerQuery;
    }
    if (message.organicQueries !== undefined) {
      obj.organicQueries = (message.organicQueries || Long.ZERO).toString();
    }
    if (message.percentNewVisitors !== undefined) {
      obj.percentNewVisitors = message.percentNewVisitors;
    }
    if (message.phoneCalls !== undefined) {
      obj.phoneCalls = (message.phoneCalls || Long.ZERO).toString();
    }
    if (message.phoneImpressions !== undefined) {
      obj.phoneImpressions = (message.phoneImpressions || Long.ZERO).toString();
    }
    if (message.phoneThroughRate !== undefined) {
      obj.phoneThroughRate = message.phoneThroughRate;
    }
    if (message.relativeCtr !== undefined) {
      obj.relativeCtr = message.relativeCtr;
    }
    if (message.searchAbsoluteTopImpressionShare !== undefined) {
      obj.searchAbsoluteTopImpressionShare = message.searchAbsoluteTopImpressionShare;
    }
    if (message.searchBudgetLostAbsoluteTopImpressionShare !== undefined) {
      obj.searchBudgetLostAbsoluteTopImpressionShare = message.searchBudgetLostAbsoluteTopImpressionShare;
    }
    if (message.searchBudgetLostImpressionShare !== undefined) {
      obj.searchBudgetLostImpressionShare = message.searchBudgetLostImpressionShare;
    }
    if (message.searchBudgetLostTopImpressionShare !== undefined) {
      obj.searchBudgetLostTopImpressionShare = message.searchBudgetLostTopImpressionShare;
    }
    if (message.searchClickShare !== undefined) {
      obj.searchClickShare = message.searchClickShare;
    }
    if (message.searchExactMatchImpressionShare !== undefined) {
      obj.searchExactMatchImpressionShare = message.searchExactMatchImpressionShare;
    }
    if (message.searchImpressionShare !== undefined) {
      obj.searchImpressionShare = message.searchImpressionShare;
    }
    if (message.searchRankLostAbsoluteTopImpressionShare !== undefined) {
      obj.searchRankLostAbsoluteTopImpressionShare = message.searchRankLostAbsoluteTopImpressionShare;
    }
    if (message.searchRankLostImpressionShare !== undefined) {
      obj.searchRankLostImpressionShare = message.searchRankLostImpressionShare;
    }
    if (message.searchRankLostTopImpressionShare !== undefined) {
      obj.searchRankLostTopImpressionShare = message.searchRankLostTopImpressionShare;
    }
    if (message.searchTopImpressionShare !== undefined) {
      obj.searchTopImpressionShare = message.searchTopImpressionShare;
    }
    if (message.searchVolume !== undefined) {
      obj.searchVolume = SearchVolumeRange.toJSON(message.searchVolume);
    }
    if (message.speedScore !== undefined) {
      obj.speedScore = (message.speedScore || Long.ZERO).toString();
    }
    if (message.averageTargetCpaMicros !== undefined) {
      obj.averageTargetCpaMicros = (message.averageTargetCpaMicros || Long.ZERO).toString();
    }
    if (message.averageTargetRoas !== undefined) {
      obj.averageTargetRoas = message.averageTargetRoas;
    }
    if (message.topImpressionPercentage !== undefined) {
      obj.topImpressionPercentage = message.topImpressionPercentage;
    }
    if (message.validAcceleratedMobilePagesClicksPercentage !== undefined) {
      obj.validAcceleratedMobilePagesClicksPercentage = message.validAcceleratedMobilePagesClicksPercentage;
    }
    if (message.valuePerAllConversions !== undefined) {
      obj.valuePerAllConversions = message.valuePerAllConversions;
    }
    if (message.valuePerAllConversionsByConversionDate !== undefined) {
      obj.valuePerAllConversionsByConversionDate = message.valuePerAllConversionsByConversionDate;
    }
    if (message.valuePerConversion !== undefined) {
      obj.valuePerConversion = message.valuePerConversion;
    }
    if (message.valuePerConversionsByConversionDate !== undefined) {
      obj.valuePerConversionsByConversionDate = message.valuePerConversionsByConversionDate;
    }
    if (message.valuePerCurrentModelAttributedConversion !== undefined) {
      obj.valuePerCurrentModelAttributedConversion = message.valuePerCurrentModelAttributedConversion;
    }
    if (message.videoQuartileP100Rate !== undefined) {
      obj.videoQuartileP100Rate = message.videoQuartileP100Rate;
    }
    if (message.videoQuartileP25Rate !== undefined) {
      obj.videoQuartileP25Rate = message.videoQuartileP25Rate;
    }
    if (message.videoQuartileP50Rate !== undefined) {
      obj.videoQuartileP50Rate = message.videoQuartileP50Rate;
    }
    if (message.videoQuartileP75Rate !== undefined) {
      obj.videoQuartileP75Rate = message.videoQuartileP75Rate;
    }
    if (message.videoViewRate !== undefined) {
      obj.videoViewRate = message.videoViewRate;
    }
    if (message.videoViews !== undefined) {
      obj.videoViews = (message.videoViews || Long.ZERO).toString();
    }
    if (message.viewThroughConversions !== undefined) {
      obj.viewThroughConversions = (message.viewThroughConversions || Long.ZERO).toString();
    }
    if (!message.skAdNetworkInstalls.equals(Long.ZERO)) {
      obj.skAdNetworkInstalls = (message.skAdNetworkInstalls || Long.ZERO).toString();
    }
    if (!message.skAdNetworkTotalConversions.equals(Long.ZERO)) {
      obj.skAdNetworkTotalConversions = (message.skAdNetworkTotalConversions || Long.ZERO).toString();
    }
    if (!message.publisherPurchasedClicks.equals(Long.ZERO)) {
      obj.publisherPurchasedClicks = (message.publisherPurchasedClicks || Long.ZERO).toString();
    }
    if (!message.publisherOrganicClicks.equals(Long.ZERO)) {
      obj.publisherOrganicClicks = (message.publisherOrganicClicks || Long.ZERO).toString();
    }
    if (!message.publisherUnknownClicks.equals(Long.ZERO)) {
      obj.publisherUnknownClicks = (message.publisherUnknownClicks || Long.ZERO).toString();
    }
    if (message.allConversionsFromLocationAssetClickToCall !== undefined) {
      obj.allConversionsFromLocationAssetClickToCall = message.allConversionsFromLocationAssetClickToCall;
    }
    if (message.allConversionsFromLocationAssetDirections !== undefined) {
      obj.allConversionsFromLocationAssetDirections = message.allConversionsFromLocationAssetDirections;
    }
    if (message.allConversionsFromLocationAssetMenu !== undefined) {
      obj.allConversionsFromLocationAssetMenu = message.allConversionsFromLocationAssetMenu;
    }
    if (message.allConversionsFromLocationAssetOrder !== undefined) {
      obj.allConversionsFromLocationAssetOrder = message.allConversionsFromLocationAssetOrder;
    }
    if (message.allConversionsFromLocationAssetOtherEngagement !== undefined) {
      obj.allConversionsFromLocationAssetOtherEngagement = message.allConversionsFromLocationAssetOtherEngagement;
    }
    if (message.allConversionsFromLocationAssetStoreVisits !== undefined) {
      obj.allConversionsFromLocationAssetStoreVisits = message.allConversionsFromLocationAssetStoreVisits;
    }
    if (message.allConversionsFromLocationAssetWebsite !== undefined) {
      obj.allConversionsFromLocationAssetWebsite = message.allConversionsFromLocationAssetWebsite;
    }
    if (message.eligibleImpressionsFromLocationAssetStoreReach !== undefined) {
      obj.eligibleImpressionsFromLocationAssetStoreReach =
        (message.eligibleImpressionsFromLocationAssetStoreReach || Long.ZERO).toString();
    }
    if (message.viewThroughConversionsFromLocationAssetClickToCall !== undefined) {
      obj.viewThroughConversionsFromLocationAssetClickToCall =
        message.viewThroughConversionsFromLocationAssetClickToCall;
    }
    if (message.viewThroughConversionsFromLocationAssetDirections !== undefined) {
      obj.viewThroughConversionsFromLocationAssetDirections = message.viewThroughConversionsFromLocationAssetDirections;
    }
    if (message.viewThroughConversionsFromLocationAssetMenu !== undefined) {
      obj.viewThroughConversionsFromLocationAssetMenu = message.viewThroughConversionsFromLocationAssetMenu;
    }
    if (message.viewThroughConversionsFromLocationAssetOrder !== undefined) {
      obj.viewThroughConversionsFromLocationAssetOrder = message.viewThroughConversionsFromLocationAssetOrder;
    }
    if (message.viewThroughConversionsFromLocationAssetOtherEngagement !== undefined) {
      obj.viewThroughConversionsFromLocationAssetOtherEngagement =
        message.viewThroughConversionsFromLocationAssetOtherEngagement;
    }
    if (message.viewThroughConversionsFromLocationAssetStoreVisits !== undefined) {
      obj.viewThroughConversionsFromLocationAssetStoreVisits =
        message.viewThroughConversionsFromLocationAssetStoreVisits;
    }
    if (message.viewThroughConversionsFromLocationAssetWebsite !== undefined) {
      obj.viewThroughConversionsFromLocationAssetWebsite = message.viewThroughConversionsFromLocationAssetWebsite;
    }
    if (message.orders !== undefined) {
      obj.orders = message.orders;
    }
    if (message.averageOrderValueMicros !== undefined) {
      obj.averageOrderValueMicros = (message.averageOrderValueMicros || Long.ZERO).toString();
    }
    if (message.averageCartSize !== undefined) {
      obj.averageCartSize = message.averageCartSize;
    }
    if (message.costOfGoodsSoldMicros !== undefined) {
      obj.costOfGoodsSoldMicros = (message.costOfGoodsSoldMicros || Long.ZERO).toString();
    }
    if (message.grossProfitMicros !== undefined) {
      obj.grossProfitMicros = (message.grossProfitMicros || Long.ZERO).toString();
    }
    if (message.grossProfitMargin !== undefined) {
      obj.grossProfitMargin = message.grossProfitMargin;
    }
    if (message.revenueMicros !== undefined) {
      obj.revenueMicros = (message.revenueMicros || Long.ZERO).toString();
    }
    if (message.unitsSold !== undefined) {
      obj.unitsSold = message.unitsSold;
    }
    if (message.crossSellCostOfGoodsSoldMicros !== undefined) {
      obj.crossSellCostOfGoodsSoldMicros = (message.crossSellCostOfGoodsSoldMicros || Long.ZERO).toString();
    }
    if (message.crossSellGrossProfitMicros !== undefined) {
      obj.crossSellGrossProfitMicros = (message.crossSellGrossProfitMicros || Long.ZERO).toString();
    }
    if (message.crossSellRevenueMicros !== undefined) {
      obj.crossSellRevenueMicros = (message.crossSellRevenueMicros || Long.ZERO).toString();
    }
    if (message.crossSellUnitsSold !== undefined) {
      obj.crossSellUnitsSold = message.crossSellUnitsSold;
    }
    if (message.leadCostOfGoodsSoldMicros !== undefined) {
      obj.leadCostOfGoodsSoldMicros = (message.leadCostOfGoodsSoldMicros || Long.ZERO).toString();
    }
    if (message.leadGrossProfitMicros !== undefined) {
      obj.leadGrossProfitMicros = (message.leadGrossProfitMicros || Long.ZERO).toString();
    }
    if (message.leadRevenueMicros !== undefined) {
      obj.leadRevenueMicros = (message.leadRevenueMicros || Long.ZERO).toString();
    }
    if (message.leadUnitsSold !== undefined) {
      obj.leadUnitsSold = message.leadUnitsSold;
    }
    if (message.uniqueUsers !== undefined) {
      obj.uniqueUsers = (message.uniqueUsers || Long.ZERO).toString();
    }
    if (message.averageImpressionFrequencyPerUser !== undefined) {
      obj.averageImpressionFrequencyPerUser = message.averageImpressionFrequencyPerUser;
    }
    if (message.linkedEntitiesCount !== undefined) {
      obj.linkedEntitiesCount = (message.linkedEntitiesCount || Long.ZERO).toString();
    }
    if (message.linkedSampleEntities?.length) {
      obj.linkedSampleEntities = message.linkedSampleEntities;
    }
    if (message.sampleBestPerformanceEntities?.length) {
      obj.sampleBestPerformanceEntities = message.sampleBestPerformanceEntities;
    }
    if (message.sampleGoodPerformanceEntities?.length) {
      obj.sampleGoodPerformanceEntities = message.sampleGoodPerformanceEntities;
    }
    if (message.sampleLowPerformanceEntities?.length) {
      obj.sampleLowPerformanceEntities = message.sampleLowPerformanceEntities;
    }
    if (message.sampleLearningPerformanceEntities?.length) {
      obj.sampleLearningPerformanceEntities = message.sampleLearningPerformanceEntities;
    }
    if (message.sampleUnratedPerformanceEntities?.length) {
      obj.sampleUnratedPerformanceEntities = message.sampleUnratedPerformanceEntities;
    }
    if (message.assetPinnedTotalCount !== undefined) {
      obj.assetPinnedTotalCount = (message.assetPinnedTotalCount || Long.ZERO).toString();
    }
    if (message.assetPinnedAsHeadlinePositionOneCount !== undefined) {
      obj.assetPinnedAsHeadlinePositionOneCount = (message.assetPinnedAsHeadlinePositionOneCount || Long.ZERO)
        .toString();
    }
    if (message.assetPinnedAsHeadlinePositionTwoCount !== undefined) {
      obj.assetPinnedAsHeadlinePositionTwoCount = (message.assetPinnedAsHeadlinePositionTwoCount || Long.ZERO)
        .toString();
    }
    if (message.assetPinnedAsHeadlinePositionThreeCount !== undefined) {
      obj.assetPinnedAsHeadlinePositionThreeCount = (message.assetPinnedAsHeadlinePositionThreeCount || Long.ZERO)
        .toString();
    }
    if (message.assetPinnedAsDescriptionPositionOneCount !== undefined) {
      obj.assetPinnedAsDescriptionPositionOneCount = (message.assetPinnedAsDescriptionPositionOneCount || Long.ZERO)
        .toString();
    }
    if (message.assetPinnedAsDescriptionPositionTwoCount !== undefined) {
      obj.assetPinnedAsDescriptionPositionTwoCount = (message.assetPinnedAsDescriptionPositionTwoCount || Long.ZERO)
        .toString();
    }
    if (message.assetBestPerformanceImpressionPercentage !== undefined) {
      obj.assetBestPerformanceImpressionPercentage = message.assetBestPerformanceImpressionPercentage;
    }
    if (message.assetGoodPerformanceImpressionPercentage !== undefined) {
      obj.assetGoodPerformanceImpressionPercentage = message.assetGoodPerformanceImpressionPercentage;
    }
    if (message.assetLowPerformanceImpressionPercentage !== undefined) {
      obj.assetLowPerformanceImpressionPercentage = message.assetLowPerformanceImpressionPercentage;
    }
    if (message.assetLearningPerformanceImpressionPercentage !== undefined) {
      obj.assetLearningPerformanceImpressionPercentage = message.assetLearningPerformanceImpressionPercentage;
    }
    if (message.assetUnratedPerformanceImpressionPercentage !== undefined) {
      obj.assetUnratedPerformanceImpressionPercentage = message.assetUnratedPerformanceImpressionPercentage;
    }
    if (message.assetBestPerformanceCostPercentage !== undefined) {
      obj.assetBestPerformanceCostPercentage = message.assetBestPerformanceCostPercentage;
    }
    if (message.assetGoodPerformanceCostPercentage !== undefined) {
      obj.assetGoodPerformanceCostPercentage = message.assetGoodPerformanceCostPercentage;
    }
    if (message.assetLowPerformanceCostPercentage !== undefined) {
      obj.assetLowPerformanceCostPercentage = message.assetLowPerformanceCostPercentage;
    }
    if (message.assetLearningPerformanceCostPercentage !== undefined) {
      obj.assetLearningPerformanceCostPercentage = message.assetLearningPerformanceCostPercentage;
    }
    if (message.assetUnratedPerformanceCostPercentage !== undefined) {
      obj.assetUnratedPerformanceCostPercentage = message.assetUnratedPerformanceCostPercentage;
    }
    return obj;
  },

  create(base?: DeepPartial<Metrics>): Metrics {
    return Metrics.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Metrics>): Metrics {
    const message = createBaseMetrics();
    message.absoluteTopImpressionPercentage = object.absoluteTopImpressionPercentage ?? undefined;
    message.activeViewCpm = object.activeViewCpm ?? undefined;
    message.activeViewCtr = object.activeViewCtr ?? undefined;
    message.activeViewImpressions =
      (object.activeViewImpressions !== undefined && object.activeViewImpressions !== null)
        ? Long.fromValue(object.activeViewImpressions)
        : undefined;
    message.activeViewMeasurability = object.activeViewMeasurability ?? undefined;
    message.activeViewMeasurableCostMicros =
      (object.activeViewMeasurableCostMicros !== undefined && object.activeViewMeasurableCostMicros !== null)
        ? Long.fromValue(object.activeViewMeasurableCostMicros)
        : undefined;
    message.activeViewMeasurableImpressions =
      (object.activeViewMeasurableImpressions !== undefined && object.activeViewMeasurableImpressions !== null)
        ? Long.fromValue(object.activeViewMeasurableImpressions)
        : undefined;
    message.activeViewViewability = object.activeViewViewability ?? undefined;
    message.allConversionsFromInteractionsRate = object.allConversionsFromInteractionsRate ?? undefined;
    message.allConversionsValue = object.allConversionsValue ?? undefined;
    message.allConversionsValueByConversionDate = object.allConversionsValueByConversionDate ?? undefined;
    message.allNewCustomerLifetimeValue = object.allNewCustomerLifetimeValue ?? undefined;
    message.allConversions = object.allConversions ?? undefined;
    message.allConversionsByConversionDate = object.allConversionsByConversionDate ?? undefined;
    message.allConversionsValuePerCost = object.allConversionsValuePerCost ?? undefined;
    message.allConversionsFromClickToCall = object.allConversionsFromClickToCall ?? undefined;
    message.allConversionsFromDirections = object.allConversionsFromDirections ?? undefined;
    message.allConversionsFromInteractionsValuePerInteraction =
      object.allConversionsFromInteractionsValuePerInteraction ?? undefined;
    message.allConversionsFromMenu = object.allConversionsFromMenu ?? undefined;
    message.allConversionsFromOrder = object.allConversionsFromOrder ?? undefined;
    message.allConversionsFromOtherEngagement = object.allConversionsFromOtherEngagement ?? undefined;
    message.allConversionsFromStoreVisit = object.allConversionsFromStoreVisit ?? undefined;
    message.allConversionsFromStoreWebsite = object.allConversionsFromStoreWebsite ?? undefined;
    message.auctionInsightSearchAbsoluteTopImpressionPercentage =
      object.auctionInsightSearchAbsoluteTopImpressionPercentage ?? undefined;
    message.auctionInsightSearchImpressionShare = object.auctionInsightSearchImpressionShare ?? undefined;
    message.auctionInsightSearchOutrankingShare = object.auctionInsightSearchOutrankingShare ?? undefined;
    message.auctionInsightSearchOverlapRate = object.auctionInsightSearchOverlapRate ?? undefined;
    message.auctionInsightSearchPositionAboveRate = object.auctionInsightSearchPositionAboveRate ?? undefined;
    message.auctionInsightSearchTopImpressionPercentage = object.auctionInsightSearchTopImpressionPercentage ??
      undefined;
    message.averageCost = object.averageCost ?? undefined;
    message.averageCpc = object.averageCpc ?? undefined;
    message.averageCpe = object.averageCpe ?? undefined;
    message.averageCpm = object.averageCpm ?? undefined;
    message.averageCpv = object.averageCpv ?? undefined;
    message.averagePageViews = object.averagePageViews ?? undefined;
    message.averageTimeOnSite = object.averageTimeOnSite ?? undefined;
    message.benchmarkAverageMaxCpc = object.benchmarkAverageMaxCpc ?? undefined;
    message.biddableAppInstallConversions = object.biddableAppInstallConversions ?? undefined;
    message.biddableAppPostInstallConversions = object.biddableAppPostInstallConversions ?? undefined;
    message.benchmarkCtr = object.benchmarkCtr ?? undefined;
    message.bounceRate = object.bounceRate ?? undefined;
    message.clicks = (object.clicks !== undefined && object.clicks !== null)
      ? Long.fromValue(object.clicks)
      : undefined;
    message.combinedClicks = (object.combinedClicks !== undefined && object.combinedClicks !== null)
      ? Long.fromValue(object.combinedClicks)
      : undefined;
    message.combinedClicksPerQuery = object.combinedClicksPerQuery ?? undefined;
    message.combinedQueries = (object.combinedQueries !== undefined && object.combinedQueries !== null)
      ? Long.fromValue(object.combinedQueries)
      : undefined;
    message.contentBudgetLostImpressionShare = object.contentBudgetLostImpressionShare ?? undefined;
    message.contentImpressionShare = object.contentImpressionShare ?? undefined;
    message.conversionLastReceivedRequestDateTime = object.conversionLastReceivedRequestDateTime ?? undefined;
    message.conversionLastConversionDate = object.conversionLastConversionDate ?? undefined;
    message.contentRankLostImpressionShare = object.contentRankLostImpressionShare ?? undefined;
    message.conversionsFromInteractionsRate = object.conversionsFromInteractionsRate ?? undefined;
    message.conversionsValue = object.conversionsValue ?? undefined;
    message.conversionsValueByConversionDate = object.conversionsValueByConversionDate ?? undefined;
    message.newCustomerLifetimeValue = object.newCustomerLifetimeValue ?? undefined;
    message.conversionsValuePerCost = object.conversionsValuePerCost ?? undefined;
    message.conversionsFromInteractionsValuePerInteraction = object.conversionsFromInteractionsValuePerInteraction ??
      undefined;
    message.conversions = object.conversions ?? undefined;
    message.conversionsByConversionDate = object.conversionsByConversionDate ?? undefined;
    message.costMicros = (object.costMicros !== undefined && object.costMicros !== null)
      ? Long.fromValue(object.costMicros)
      : undefined;
    message.costPerAllConversions = object.costPerAllConversions ?? undefined;
    message.costPerConversion = object.costPerConversion ?? undefined;
    message.costPerCurrentModelAttributedConversion = object.costPerCurrentModelAttributedConversion ?? undefined;
    message.crossDeviceConversions = object.crossDeviceConversions ?? undefined;
    message.crossDeviceConversionsValueMicros =
      (object.crossDeviceConversionsValueMicros !== undefined && object.crossDeviceConversionsValueMicros !== null)
        ? Long.fromValue(object.crossDeviceConversionsValueMicros)
        : undefined;
    message.ctr = object.ctr ?? undefined;
    message.currentModelAttributedConversions = object.currentModelAttributedConversions ?? undefined;
    message.currentModelAttributedConversionsFromInteractionsRate =
      object.currentModelAttributedConversionsFromInteractionsRate ?? undefined;
    message.currentModelAttributedConversionsFromInteractionsValuePerInteraction =
      object.currentModelAttributedConversionsFromInteractionsValuePerInteraction ?? undefined;
    message.currentModelAttributedConversionsValue = object.currentModelAttributedConversionsValue ?? undefined;
    message.currentModelAttributedConversionsValuePerCost = object.currentModelAttributedConversionsValuePerCost ??
      undefined;
    message.engagementRate = object.engagementRate ?? undefined;
    message.engagements = (object.engagements !== undefined && object.engagements !== null)
      ? Long.fromValue(object.engagements)
      : undefined;
    message.hotelAverageLeadValueMicros = object.hotelAverageLeadValueMicros ?? undefined;
    message.hotelCommissionRateMicros =
      (object.hotelCommissionRateMicros !== undefined && object.hotelCommissionRateMicros !== null)
        ? Long.fromValue(object.hotelCommissionRateMicros)
        : undefined;
    message.hotelExpectedCommissionCost = object.hotelExpectedCommissionCost ?? undefined;
    message.hotelPriceDifferencePercentage = object.hotelPriceDifferencePercentage ?? undefined;
    message.hotelEligibleImpressions =
      (object.hotelEligibleImpressions !== undefined && object.hotelEligibleImpressions !== null)
        ? Long.fromValue(object.hotelEligibleImpressions)
        : undefined;
    message.historicalCreativeQualityScore = object.historicalCreativeQualityScore ?? 0;
    message.historicalLandingPageQualityScore = object.historicalLandingPageQualityScore ?? 0;
    message.historicalQualityScore =
      (object.historicalQualityScore !== undefined && object.historicalQualityScore !== null)
        ? Long.fromValue(object.historicalQualityScore)
        : undefined;
    message.historicalSearchPredictedCtr = object.historicalSearchPredictedCtr ?? 0;
    message.gmailForwards = (object.gmailForwards !== undefined && object.gmailForwards !== null)
      ? Long.fromValue(object.gmailForwards)
      : undefined;
    message.gmailSaves = (object.gmailSaves !== undefined && object.gmailSaves !== null)
      ? Long.fromValue(object.gmailSaves)
      : undefined;
    message.gmailSecondaryClicks = (object.gmailSecondaryClicks !== undefined && object.gmailSecondaryClicks !== null)
      ? Long.fromValue(object.gmailSecondaryClicks)
      : undefined;
    message.impressionsFromStoreReach =
      (object.impressionsFromStoreReach !== undefined && object.impressionsFromStoreReach !== null)
        ? Long.fromValue(object.impressionsFromStoreReach)
        : undefined;
    message.impressions = (object.impressions !== undefined && object.impressions !== null)
      ? Long.fromValue(object.impressions)
      : undefined;
    message.interactionRate = object.interactionRate ?? undefined;
    message.interactions = (object.interactions !== undefined && object.interactions !== null)
      ? Long.fromValue(object.interactions)
      : undefined;
    message.interactionEventTypes = object.interactionEventTypes?.map((e) => e) || [];
    message.invalidClickRate = object.invalidClickRate ?? undefined;
    message.invalidClicks = (object.invalidClicks !== undefined && object.invalidClicks !== null)
      ? Long.fromValue(object.invalidClicks)
      : undefined;
    message.messageChats = (object.messageChats !== undefined && object.messageChats !== null)
      ? Long.fromValue(object.messageChats)
      : undefined;
    message.messageImpressions = (object.messageImpressions !== undefined && object.messageImpressions !== null)
      ? Long.fromValue(object.messageImpressions)
      : undefined;
    message.messageChatRate = object.messageChatRate ?? undefined;
    message.mobileFriendlyClicksPercentage = object.mobileFriendlyClicksPercentage ?? undefined;
    message.optimizationScoreUplift = object.optimizationScoreUplift ?? undefined;
    message.optimizationScoreUrl = object.optimizationScoreUrl ?? undefined;
    message.organicClicks = (object.organicClicks !== undefined && object.organicClicks !== null)
      ? Long.fromValue(object.organicClicks)
      : undefined;
    message.organicClicksPerQuery = object.organicClicksPerQuery ?? undefined;
    message.organicImpressions = (object.organicImpressions !== undefined && object.organicImpressions !== null)
      ? Long.fromValue(object.organicImpressions)
      : undefined;
    message.organicImpressionsPerQuery = object.organicImpressionsPerQuery ?? undefined;
    message.organicQueries = (object.organicQueries !== undefined && object.organicQueries !== null)
      ? Long.fromValue(object.organicQueries)
      : undefined;
    message.percentNewVisitors = object.percentNewVisitors ?? undefined;
    message.phoneCalls = (object.phoneCalls !== undefined && object.phoneCalls !== null)
      ? Long.fromValue(object.phoneCalls)
      : undefined;
    message.phoneImpressions = (object.phoneImpressions !== undefined && object.phoneImpressions !== null)
      ? Long.fromValue(object.phoneImpressions)
      : undefined;
    message.phoneThroughRate = object.phoneThroughRate ?? undefined;
    message.relativeCtr = object.relativeCtr ?? undefined;
    message.searchAbsoluteTopImpressionShare = object.searchAbsoluteTopImpressionShare ?? undefined;
    message.searchBudgetLostAbsoluteTopImpressionShare = object.searchBudgetLostAbsoluteTopImpressionShare ?? undefined;
    message.searchBudgetLostImpressionShare = object.searchBudgetLostImpressionShare ?? undefined;
    message.searchBudgetLostTopImpressionShare = object.searchBudgetLostTopImpressionShare ?? undefined;
    message.searchClickShare = object.searchClickShare ?? undefined;
    message.searchExactMatchImpressionShare = object.searchExactMatchImpressionShare ?? undefined;
    message.searchImpressionShare = object.searchImpressionShare ?? undefined;
    message.searchRankLostAbsoluteTopImpressionShare = object.searchRankLostAbsoluteTopImpressionShare ?? undefined;
    message.searchRankLostImpressionShare = object.searchRankLostImpressionShare ?? undefined;
    message.searchRankLostTopImpressionShare = object.searchRankLostTopImpressionShare ?? undefined;
    message.searchTopImpressionShare = object.searchTopImpressionShare ?? undefined;
    message.searchVolume = (object.searchVolume !== undefined && object.searchVolume !== null)
      ? SearchVolumeRange.fromPartial(object.searchVolume)
      : undefined;
    message.speedScore = (object.speedScore !== undefined && object.speedScore !== null)
      ? Long.fromValue(object.speedScore)
      : undefined;
    message.averageTargetCpaMicros =
      (object.averageTargetCpaMicros !== undefined && object.averageTargetCpaMicros !== null)
        ? Long.fromValue(object.averageTargetCpaMicros)
        : undefined;
    message.averageTargetRoas = object.averageTargetRoas ?? undefined;
    message.topImpressionPercentage = object.topImpressionPercentage ?? undefined;
    message.validAcceleratedMobilePagesClicksPercentage = object.validAcceleratedMobilePagesClicksPercentage ??
      undefined;
    message.valuePerAllConversions = object.valuePerAllConversions ?? undefined;
    message.valuePerAllConversionsByConversionDate = object.valuePerAllConversionsByConversionDate ?? undefined;
    message.valuePerConversion = object.valuePerConversion ?? undefined;
    message.valuePerConversionsByConversionDate = object.valuePerConversionsByConversionDate ?? undefined;
    message.valuePerCurrentModelAttributedConversion = object.valuePerCurrentModelAttributedConversion ?? undefined;
    message.videoQuartileP100Rate = object.videoQuartileP100Rate ?? undefined;
    message.videoQuartileP25Rate = object.videoQuartileP25Rate ?? undefined;
    message.videoQuartileP50Rate = object.videoQuartileP50Rate ?? undefined;
    message.videoQuartileP75Rate = object.videoQuartileP75Rate ?? undefined;
    message.videoViewRate = object.videoViewRate ?? undefined;
    message.videoViews = (object.videoViews !== undefined && object.videoViews !== null)
      ? Long.fromValue(object.videoViews)
      : undefined;
    message.viewThroughConversions =
      (object.viewThroughConversions !== undefined && object.viewThroughConversions !== null)
        ? Long.fromValue(object.viewThroughConversions)
        : undefined;
    message.skAdNetworkInstalls = (object.skAdNetworkInstalls !== undefined && object.skAdNetworkInstalls !== null)
      ? Long.fromValue(object.skAdNetworkInstalls)
      : Long.ZERO;
    message.skAdNetworkTotalConversions =
      (object.skAdNetworkTotalConversions !== undefined && object.skAdNetworkTotalConversions !== null)
        ? Long.fromValue(object.skAdNetworkTotalConversions)
        : Long.ZERO;
    message.publisherPurchasedClicks =
      (object.publisherPurchasedClicks !== undefined && object.publisherPurchasedClicks !== null)
        ? Long.fromValue(object.publisherPurchasedClicks)
        : Long.ZERO;
    message.publisherOrganicClicks =
      (object.publisherOrganicClicks !== undefined && object.publisherOrganicClicks !== null)
        ? Long.fromValue(object.publisherOrganicClicks)
        : Long.ZERO;
    message.publisherUnknownClicks =
      (object.publisherUnknownClicks !== undefined && object.publisherUnknownClicks !== null)
        ? Long.fromValue(object.publisherUnknownClicks)
        : Long.ZERO;
    message.allConversionsFromLocationAssetClickToCall = object.allConversionsFromLocationAssetClickToCall ?? undefined;
    message.allConversionsFromLocationAssetDirections = object.allConversionsFromLocationAssetDirections ?? undefined;
    message.allConversionsFromLocationAssetMenu = object.allConversionsFromLocationAssetMenu ?? undefined;
    message.allConversionsFromLocationAssetOrder = object.allConversionsFromLocationAssetOrder ?? undefined;
    message.allConversionsFromLocationAssetOtherEngagement = object.allConversionsFromLocationAssetOtherEngagement ??
      undefined;
    message.allConversionsFromLocationAssetStoreVisits = object.allConversionsFromLocationAssetStoreVisits ?? undefined;
    message.allConversionsFromLocationAssetWebsite = object.allConversionsFromLocationAssetWebsite ?? undefined;
    message.eligibleImpressionsFromLocationAssetStoreReach =
      (object.eligibleImpressionsFromLocationAssetStoreReach !== undefined &&
          object.eligibleImpressionsFromLocationAssetStoreReach !== null)
        ? Long.fromValue(object.eligibleImpressionsFromLocationAssetStoreReach)
        : undefined;
    message.viewThroughConversionsFromLocationAssetClickToCall =
      object.viewThroughConversionsFromLocationAssetClickToCall ?? undefined;
    message.viewThroughConversionsFromLocationAssetDirections =
      object.viewThroughConversionsFromLocationAssetDirections ?? undefined;
    message.viewThroughConversionsFromLocationAssetMenu = object.viewThroughConversionsFromLocationAssetMenu ??
      undefined;
    message.viewThroughConversionsFromLocationAssetOrder = object.viewThroughConversionsFromLocationAssetOrder ??
      undefined;
    message.viewThroughConversionsFromLocationAssetOtherEngagement =
      object.viewThroughConversionsFromLocationAssetOtherEngagement ?? undefined;
    message.viewThroughConversionsFromLocationAssetStoreVisits =
      object.viewThroughConversionsFromLocationAssetStoreVisits ?? undefined;
    message.viewThroughConversionsFromLocationAssetWebsite = object.viewThroughConversionsFromLocationAssetWebsite ??
      undefined;
    message.orders = object.orders ?? undefined;
    message.averageOrderValueMicros =
      (object.averageOrderValueMicros !== undefined && object.averageOrderValueMicros !== null)
        ? Long.fromValue(object.averageOrderValueMicros)
        : undefined;
    message.averageCartSize = object.averageCartSize ?? undefined;
    message.costOfGoodsSoldMicros =
      (object.costOfGoodsSoldMicros !== undefined && object.costOfGoodsSoldMicros !== null)
        ? Long.fromValue(object.costOfGoodsSoldMicros)
        : undefined;
    message.grossProfitMicros = (object.grossProfitMicros !== undefined && object.grossProfitMicros !== null)
      ? Long.fromValue(object.grossProfitMicros)
      : undefined;
    message.grossProfitMargin = object.grossProfitMargin ?? undefined;
    message.revenueMicros = (object.revenueMicros !== undefined && object.revenueMicros !== null)
      ? Long.fromValue(object.revenueMicros)
      : undefined;
    message.unitsSold = object.unitsSold ?? undefined;
    message.crossSellCostOfGoodsSoldMicros =
      (object.crossSellCostOfGoodsSoldMicros !== undefined && object.crossSellCostOfGoodsSoldMicros !== null)
        ? Long.fromValue(object.crossSellCostOfGoodsSoldMicros)
        : undefined;
    message.crossSellGrossProfitMicros =
      (object.crossSellGrossProfitMicros !== undefined && object.crossSellGrossProfitMicros !== null)
        ? Long.fromValue(object.crossSellGrossProfitMicros)
        : undefined;
    message.crossSellRevenueMicros =
      (object.crossSellRevenueMicros !== undefined && object.crossSellRevenueMicros !== null)
        ? Long.fromValue(object.crossSellRevenueMicros)
        : undefined;
    message.crossSellUnitsSold = object.crossSellUnitsSold ?? undefined;
    message.leadCostOfGoodsSoldMicros =
      (object.leadCostOfGoodsSoldMicros !== undefined && object.leadCostOfGoodsSoldMicros !== null)
        ? Long.fromValue(object.leadCostOfGoodsSoldMicros)
        : undefined;
    message.leadGrossProfitMicros =
      (object.leadGrossProfitMicros !== undefined && object.leadGrossProfitMicros !== null)
        ? Long.fromValue(object.leadGrossProfitMicros)
        : undefined;
    message.leadRevenueMicros = (object.leadRevenueMicros !== undefined && object.leadRevenueMicros !== null)
      ? Long.fromValue(object.leadRevenueMicros)
      : undefined;
    message.leadUnitsSold = object.leadUnitsSold ?? undefined;
    message.uniqueUsers = (object.uniqueUsers !== undefined && object.uniqueUsers !== null)
      ? Long.fromValue(object.uniqueUsers)
      : undefined;
    message.averageImpressionFrequencyPerUser = object.averageImpressionFrequencyPerUser ?? undefined;
    message.linkedEntitiesCount = (object.linkedEntitiesCount !== undefined && object.linkedEntitiesCount !== null)
      ? Long.fromValue(object.linkedEntitiesCount)
      : undefined;
    message.linkedSampleEntities = object.linkedSampleEntities?.map((e) => e) || [];
    message.sampleBestPerformanceEntities = object.sampleBestPerformanceEntities?.map((e) => e) || [];
    message.sampleGoodPerformanceEntities = object.sampleGoodPerformanceEntities?.map((e) => e) || [];
    message.sampleLowPerformanceEntities = object.sampleLowPerformanceEntities?.map((e) => e) || [];
    message.sampleLearningPerformanceEntities = object.sampleLearningPerformanceEntities?.map((e) => e) || [];
    message.sampleUnratedPerformanceEntities = object.sampleUnratedPerformanceEntities?.map((e) => e) || [];
    message.assetPinnedTotalCount =
      (object.assetPinnedTotalCount !== undefined && object.assetPinnedTotalCount !== null)
        ? Long.fromValue(object.assetPinnedTotalCount)
        : undefined;
    message.assetPinnedAsHeadlinePositionOneCount =
      (object.assetPinnedAsHeadlinePositionOneCount !== undefined &&
          object.assetPinnedAsHeadlinePositionOneCount !== null)
        ? Long.fromValue(object.assetPinnedAsHeadlinePositionOneCount)
        : undefined;
    message.assetPinnedAsHeadlinePositionTwoCount =
      (object.assetPinnedAsHeadlinePositionTwoCount !== undefined &&
          object.assetPinnedAsHeadlinePositionTwoCount !== null)
        ? Long.fromValue(object.assetPinnedAsHeadlinePositionTwoCount)
        : undefined;
    message.assetPinnedAsHeadlinePositionThreeCount =
      (object.assetPinnedAsHeadlinePositionThreeCount !== undefined &&
          object.assetPinnedAsHeadlinePositionThreeCount !== null)
        ? Long.fromValue(object.assetPinnedAsHeadlinePositionThreeCount)
        : undefined;
    message.assetPinnedAsDescriptionPositionOneCount =
      (object.assetPinnedAsDescriptionPositionOneCount !== undefined &&
          object.assetPinnedAsDescriptionPositionOneCount !== null)
        ? Long.fromValue(object.assetPinnedAsDescriptionPositionOneCount)
        : undefined;
    message.assetPinnedAsDescriptionPositionTwoCount =
      (object.assetPinnedAsDescriptionPositionTwoCount !== undefined &&
          object.assetPinnedAsDescriptionPositionTwoCount !== null)
        ? Long.fromValue(object.assetPinnedAsDescriptionPositionTwoCount)
        : undefined;
    message.assetBestPerformanceImpressionPercentage = object.assetBestPerformanceImpressionPercentage ?? undefined;
    message.assetGoodPerformanceImpressionPercentage = object.assetGoodPerformanceImpressionPercentage ?? undefined;
    message.assetLowPerformanceImpressionPercentage = object.assetLowPerformanceImpressionPercentage ?? undefined;
    message.assetLearningPerformanceImpressionPercentage = object.assetLearningPerformanceImpressionPercentage ??
      undefined;
    message.assetUnratedPerformanceImpressionPercentage = object.assetUnratedPerformanceImpressionPercentage ??
      undefined;
    message.assetBestPerformanceCostPercentage = object.assetBestPerformanceCostPercentage ?? undefined;
    message.assetGoodPerformanceCostPercentage = object.assetGoodPerformanceCostPercentage ?? undefined;
    message.assetLowPerformanceCostPercentage = object.assetLowPerformanceCostPercentage ?? undefined;
    message.assetLearningPerformanceCostPercentage = object.assetLearningPerformanceCostPercentage ?? undefined;
    message.assetUnratedPerformanceCostPercentage = object.assetUnratedPerformanceCostPercentage ?? undefined;
    return message;
  },
};

function createBaseSearchVolumeRange(): SearchVolumeRange {
  return { min: undefined, max: undefined };
}

export const SearchVolumeRange: MessageFns<SearchVolumeRange> = {
  encode(message: SearchVolumeRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.min !== undefined) {
      writer.uint32(8).int64(message.min.toString());
    }
    if (message.max !== undefined) {
      writer.uint32(16).int64(message.max.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchVolumeRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchVolumeRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.min = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.max = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchVolumeRange {
    return {
      min: isSet(object.min) ? Long.fromValue(object.min) : undefined,
      max: isSet(object.max) ? Long.fromValue(object.max) : undefined,
    };
  },

  toJSON(message: SearchVolumeRange): unknown {
    const obj: any = {};
    if (message.min !== undefined) {
      obj.min = (message.min || Long.ZERO).toString();
    }
    if (message.max !== undefined) {
      obj.max = (message.max || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<SearchVolumeRange>): SearchVolumeRange {
    return SearchVolumeRange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchVolumeRange>): SearchVolumeRange {
    const message = createBaseSearchVolumeRange();
    message.min = (object.min !== undefined && object.min !== null) ? Long.fromValue(object.min) : undefined;
    message.max = (object.max !== undefined && object.max !== null) ? Long.fromValue(object.max) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
