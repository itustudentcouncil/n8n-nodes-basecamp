// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/offline_user_data_job_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible offline user data job errors. */
export interface OfflineUserDataJobErrorEnum {
}

/** Enum describing possible request errors. */
export enum OfflineUserDataJobErrorEnum_OfflineUserDataJobError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** INVALID_USER_LIST_ID - The user list ID provided for the job is invalid. */
  INVALID_USER_LIST_ID = 3,
  /** INVALID_USER_LIST_TYPE - Type of the user list is not applicable for the job. */
  INVALID_USER_LIST_TYPE = 4,
  /** NOT_ON_ALLOWLIST_FOR_USER_ID - Customer is not allowisted for using user ID in upload data. */
  NOT_ON_ALLOWLIST_FOR_USER_ID = 33,
  /**
   * INCOMPATIBLE_UPLOAD_KEY_TYPE - Upload data is not compatible with the upload key type of the associated
   * user list.
   */
  INCOMPATIBLE_UPLOAD_KEY_TYPE = 6,
  /** MISSING_USER_IDENTIFIER - The user identifier is missing valid data. */
  MISSING_USER_IDENTIFIER = 7,
  /** INVALID_MOBILE_ID_FORMAT - The mobile ID is malformed. */
  INVALID_MOBILE_ID_FORMAT = 8,
  /**
   * TOO_MANY_USER_IDENTIFIERS - Maximum number of user identifiers allowed per request is 100,000 and per
   * operation is 20.
   */
  TOO_MANY_USER_IDENTIFIERS = 9,
  /** NOT_ON_ALLOWLIST_FOR_STORE_SALES_DIRECT - Customer is not on the allow-list for store sales direct data. */
  NOT_ON_ALLOWLIST_FOR_STORE_SALES_DIRECT = 31,
  /** NOT_ON_ALLOWLIST_FOR_UNIFIED_STORE_SALES - Customer is not on the allow-list for unified store sales data. */
  NOT_ON_ALLOWLIST_FOR_UNIFIED_STORE_SALES = 32,
  /** INVALID_PARTNER_ID - The partner ID in store sales direct metadata is invalid. */
  INVALID_PARTNER_ID = 11,
  /** INVALID_ENCODING - The data in user identifier should not be encoded. */
  INVALID_ENCODING = 12,
  /** INVALID_COUNTRY_CODE - The country code is invalid. */
  INVALID_COUNTRY_CODE = 13,
  /**
   * INCOMPATIBLE_USER_IDENTIFIER - Incompatible user identifier when using third_party_user_id for store
   * sales direct first party data or not using third_party_user_id for store
   * sales third party data.
   */
  INCOMPATIBLE_USER_IDENTIFIER = 14,
  /** FUTURE_TRANSACTION_TIME - A transaction time in the future is not allowed. */
  FUTURE_TRANSACTION_TIME = 15,
  /**
   * INVALID_CONVERSION_ACTION - The conversion_action specified in transaction_attributes is used to
   * report conversions to a conversion action configured in Google Ads. This
   * error indicates there is no such conversion action in the account.
   */
  INVALID_CONVERSION_ACTION = 16,
  /** MOBILE_ID_NOT_SUPPORTED - Mobile ID is not supported for store sales direct data. */
  MOBILE_ID_NOT_SUPPORTED = 17,
  /**
   * INVALID_OPERATION_ORDER - When a remove-all operation is provided, it has to be the first operation
   * of the operation list.
   */
  INVALID_OPERATION_ORDER = 18,
  /**
   * CONFLICTING_OPERATION - Mixing creation and removal of offline data in the same job is not
   * allowed.
   */
  CONFLICTING_OPERATION = 19,
  /** EXTERNAL_UPDATE_ID_ALREADY_EXISTS - The external update ID already exists. */
  EXTERNAL_UPDATE_ID_ALREADY_EXISTS = 21,
  /** JOB_ALREADY_STARTED - Once the upload job is started, new operations cannot be added. */
  JOB_ALREADY_STARTED = 22,
  /** REMOVE_NOT_SUPPORTED - Remove operation is not allowed for store sales direct updates. */
  REMOVE_NOT_SUPPORTED = 23,
  /** REMOVE_ALL_NOT_SUPPORTED - Remove-all is not supported for certain offline user data job types. */
  REMOVE_ALL_NOT_SUPPORTED = 24,
  /** INVALID_SHA256_FORMAT - The SHA256 encoded value is malformed. */
  INVALID_SHA256_FORMAT = 25,
  /**
   * CUSTOM_KEY_DISABLED - The custom key specified is not enabled for the unified store sales
   * upload.
   */
  CUSTOM_KEY_DISABLED = 26,
  /** CUSTOM_KEY_NOT_PREDEFINED - The custom key specified is not predefined through the Google Ads UI. */
  CUSTOM_KEY_NOT_PREDEFINED = 27,
  /** CUSTOM_KEY_NOT_SET - The custom key specified is not set in the upload. */
  CUSTOM_KEY_NOT_SET = 29,
  /**
   * CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS - The customer has not accepted the customer data terms in the conversion
   * settings page.
   */
  CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS = 30,
  /** ATTRIBUTES_NOT_APPLICABLE_FOR_CUSTOMER_MATCH_USER_LIST - User attributes cannot be uploaded into a user list. */
  ATTRIBUTES_NOT_APPLICABLE_FOR_CUSTOMER_MATCH_USER_LIST = 34,
  /**
   * LIFETIME_VALUE_BUCKET_NOT_IN_RANGE - Lifetime bucket value must be a number from 0 to 10; 0 is only accepted
   * for remove operations
   */
  LIFETIME_VALUE_BUCKET_NOT_IN_RANGE = 35,
  /**
   * INCOMPATIBLE_USER_IDENTIFIER_FOR_ATTRIBUTES - Identifiers not supported for Customer Match attributes. User attributes
   * can only be provided with contact info (email, phone, address) user
   * identifiers.
   */
  INCOMPATIBLE_USER_IDENTIFIER_FOR_ATTRIBUTES = 36,
  /** FUTURE_TIME_NOT_ALLOWED - A time in the future is not allowed. */
  FUTURE_TIME_NOT_ALLOWED = 37,
  /** LAST_PURCHASE_TIME_LESS_THAN_ACQUISITION_TIME - Last purchase date time cannot be less than acquisition date time. */
  LAST_PURCHASE_TIME_LESS_THAN_ACQUISITION_TIME = 38,
  /**
   * CUSTOMER_IDENTIFIER_NOT_ALLOWED - Only emails are accepted as user identifiers for shopping loyalty match.
   * {-- api.dev/not-precedent: The identifier is not limited to ids, but
   * also include other user info eg. phone numbers.}
   */
  CUSTOMER_IDENTIFIER_NOT_ALLOWED = 39,
  /** INVALID_ITEM_ID - Provided item ID is invalid. */
  INVALID_ITEM_ID = 40,
  /**
   * FIRST_PURCHASE_TIME_GREATER_THAN_LAST_PURCHASE_TIME - First purchase date time cannot be greater than the last purchase date
   * time.
   */
  FIRST_PURCHASE_TIME_GREATER_THAN_LAST_PURCHASE_TIME = 42,
  /** INVALID_LIFECYCLE_STAGE - Provided lifecycle stage is invalid. */
  INVALID_LIFECYCLE_STAGE = 43,
  /** INVALID_EVENT_VALUE - The event value of the Customer Match user attribute is invalid. */
  INVALID_EVENT_VALUE = 44,
  /**
   * EVENT_ATTRIBUTE_ALL_FIELDS_ARE_REQUIRED - All the fields are not present in the EventAttribute of the Customer
   * Match.
   */
  EVENT_ATTRIBUTE_ALL_FIELDS_ARE_REQUIRED = 45,
  /**
   * OPERATION_LEVEL_CONSENT_PROVIDED - Consent was provided at the operation level for an OfflineUserDataJobType
   * that expects it at the job level. The provided operation-level consent
   * will be ignored.
   */
  OPERATION_LEVEL_CONSENT_PROVIDED = 48,
  UNRECOGNIZED = -1,
}

export function offlineUserDataJobErrorEnum_OfflineUserDataJobErrorFromJSON(
  object: any,
): OfflineUserDataJobErrorEnum_OfflineUserDataJobError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.UNKNOWN;
    case 3:
    case "INVALID_USER_LIST_ID":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_USER_LIST_ID;
    case 4:
    case "INVALID_USER_LIST_TYPE":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_USER_LIST_TYPE;
    case 33:
    case "NOT_ON_ALLOWLIST_FOR_USER_ID":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.NOT_ON_ALLOWLIST_FOR_USER_ID;
    case 6:
    case "INCOMPATIBLE_UPLOAD_KEY_TYPE":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INCOMPATIBLE_UPLOAD_KEY_TYPE;
    case 7:
    case "MISSING_USER_IDENTIFIER":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.MISSING_USER_IDENTIFIER;
    case 8:
    case "INVALID_MOBILE_ID_FORMAT":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_MOBILE_ID_FORMAT;
    case 9:
    case "TOO_MANY_USER_IDENTIFIERS":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.TOO_MANY_USER_IDENTIFIERS;
    case 31:
    case "NOT_ON_ALLOWLIST_FOR_STORE_SALES_DIRECT":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.NOT_ON_ALLOWLIST_FOR_STORE_SALES_DIRECT;
    case 32:
    case "NOT_ON_ALLOWLIST_FOR_UNIFIED_STORE_SALES":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.NOT_ON_ALLOWLIST_FOR_UNIFIED_STORE_SALES;
    case 11:
    case "INVALID_PARTNER_ID":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_PARTNER_ID;
    case 12:
    case "INVALID_ENCODING":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_ENCODING;
    case 13:
    case "INVALID_COUNTRY_CODE":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_COUNTRY_CODE;
    case 14:
    case "INCOMPATIBLE_USER_IDENTIFIER":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INCOMPATIBLE_USER_IDENTIFIER;
    case 15:
    case "FUTURE_TRANSACTION_TIME":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.FUTURE_TRANSACTION_TIME;
    case 16:
    case "INVALID_CONVERSION_ACTION":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_CONVERSION_ACTION;
    case 17:
    case "MOBILE_ID_NOT_SUPPORTED":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.MOBILE_ID_NOT_SUPPORTED;
    case 18:
    case "INVALID_OPERATION_ORDER":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_OPERATION_ORDER;
    case 19:
    case "CONFLICTING_OPERATION":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.CONFLICTING_OPERATION;
    case 21:
    case "EXTERNAL_UPDATE_ID_ALREADY_EXISTS":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.EXTERNAL_UPDATE_ID_ALREADY_EXISTS;
    case 22:
    case "JOB_ALREADY_STARTED":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.JOB_ALREADY_STARTED;
    case 23:
    case "REMOVE_NOT_SUPPORTED":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.REMOVE_NOT_SUPPORTED;
    case 24:
    case "REMOVE_ALL_NOT_SUPPORTED":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.REMOVE_ALL_NOT_SUPPORTED;
    case 25:
    case "INVALID_SHA256_FORMAT":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_SHA256_FORMAT;
    case 26:
    case "CUSTOM_KEY_DISABLED":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.CUSTOM_KEY_DISABLED;
    case 27:
    case "CUSTOM_KEY_NOT_PREDEFINED":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.CUSTOM_KEY_NOT_PREDEFINED;
    case 29:
    case "CUSTOM_KEY_NOT_SET":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.CUSTOM_KEY_NOT_SET;
    case 30:
    case "CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS;
    case 34:
    case "ATTRIBUTES_NOT_APPLICABLE_FOR_CUSTOMER_MATCH_USER_LIST":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.ATTRIBUTES_NOT_APPLICABLE_FOR_CUSTOMER_MATCH_USER_LIST;
    case 35:
    case "LIFETIME_VALUE_BUCKET_NOT_IN_RANGE":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.LIFETIME_VALUE_BUCKET_NOT_IN_RANGE;
    case 36:
    case "INCOMPATIBLE_USER_IDENTIFIER_FOR_ATTRIBUTES":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INCOMPATIBLE_USER_IDENTIFIER_FOR_ATTRIBUTES;
    case 37:
    case "FUTURE_TIME_NOT_ALLOWED":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.FUTURE_TIME_NOT_ALLOWED;
    case 38:
    case "LAST_PURCHASE_TIME_LESS_THAN_ACQUISITION_TIME":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.LAST_PURCHASE_TIME_LESS_THAN_ACQUISITION_TIME;
    case 39:
    case "CUSTOMER_IDENTIFIER_NOT_ALLOWED":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.CUSTOMER_IDENTIFIER_NOT_ALLOWED;
    case 40:
    case "INVALID_ITEM_ID":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_ITEM_ID;
    case 42:
    case "FIRST_PURCHASE_TIME_GREATER_THAN_LAST_PURCHASE_TIME":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.FIRST_PURCHASE_TIME_GREATER_THAN_LAST_PURCHASE_TIME;
    case 43:
    case "INVALID_LIFECYCLE_STAGE":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_LIFECYCLE_STAGE;
    case 44:
    case "INVALID_EVENT_VALUE":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_EVENT_VALUE;
    case 45:
    case "EVENT_ATTRIBUTE_ALL_FIELDS_ARE_REQUIRED":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.EVENT_ATTRIBUTE_ALL_FIELDS_ARE_REQUIRED;
    case 48:
    case "OPERATION_LEVEL_CONSENT_PROVIDED":
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.OPERATION_LEVEL_CONSENT_PROVIDED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OfflineUserDataJobErrorEnum_OfflineUserDataJobError.UNRECOGNIZED;
  }
}

export function offlineUserDataJobErrorEnum_OfflineUserDataJobErrorToJSON(
  object: OfflineUserDataJobErrorEnum_OfflineUserDataJobError,
): string {
  switch (object) {
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.UNSPECIFIED:
      return "UNSPECIFIED";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.UNKNOWN:
      return "UNKNOWN";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_USER_LIST_ID:
      return "INVALID_USER_LIST_ID";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_USER_LIST_TYPE:
      return "INVALID_USER_LIST_TYPE";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.NOT_ON_ALLOWLIST_FOR_USER_ID:
      return "NOT_ON_ALLOWLIST_FOR_USER_ID";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INCOMPATIBLE_UPLOAD_KEY_TYPE:
      return "INCOMPATIBLE_UPLOAD_KEY_TYPE";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.MISSING_USER_IDENTIFIER:
      return "MISSING_USER_IDENTIFIER";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_MOBILE_ID_FORMAT:
      return "INVALID_MOBILE_ID_FORMAT";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.TOO_MANY_USER_IDENTIFIERS:
      return "TOO_MANY_USER_IDENTIFIERS";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.NOT_ON_ALLOWLIST_FOR_STORE_SALES_DIRECT:
      return "NOT_ON_ALLOWLIST_FOR_STORE_SALES_DIRECT";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.NOT_ON_ALLOWLIST_FOR_UNIFIED_STORE_SALES:
      return "NOT_ON_ALLOWLIST_FOR_UNIFIED_STORE_SALES";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_PARTNER_ID:
      return "INVALID_PARTNER_ID";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_ENCODING:
      return "INVALID_ENCODING";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_COUNTRY_CODE:
      return "INVALID_COUNTRY_CODE";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INCOMPATIBLE_USER_IDENTIFIER:
      return "INCOMPATIBLE_USER_IDENTIFIER";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.FUTURE_TRANSACTION_TIME:
      return "FUTURE_TRANSACTION_TIME";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_CONVERSION_ACTION:
      return "INVALID_CONVERSION_ACTION";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.MOBILE_ID_NOT_SUPPORTED:
      return "MOBILE_ID_NOT_SUPPORTED";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_OPERATION_ORDER:
      return "INVALID_OPERATION_ORDER";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.CONFLICTING_OPERATION:
      return "CONFLICTING_OPERATION";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.EXTERNAL_UPDATE_ID_ALREADY_EXISTS:
      return "EXTERNAL_UPDATE_ID_ALREADY_EXISTS";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.JOB_ALREADY_STARTED:
      return "JOB_ALREADY_STARTED";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.REMOVE_NOT_SUPPORTED:
      return "REMOVE_NOT_SUPPORTED";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.REMOVE_ALL_NOT_SUPPORTED:
      return "REMOVE_ALL_NOT_SUPPORTED";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_SHA256_FORMAT:
      return "INVALID_SHA256_FORMAT";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.CUSTOM_KEY_DISABLED:
      return "CUSTOM_KEY_DISABLED";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.CUSTOM_KEY_NOT_PREDEFINED:
      return "CUSTOM_KEY_NOT_PREDEFINED";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.CUSTOM_KEY_NOT_SET:
      return "CUSTOM_KEY_NOT_SET";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS:
      return "CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.ATTRIBUTES_NOT_APPLICABLE_FOR_CUSTOMER_MATCH_USER_LIST:
      return "ATTRIBUTES_NOT_APPLICABLE_FOR_CUSTOMER_MATCH_USER_LIST";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.LIFETIME_VALUE_BUCKET_NOT_IN_RANGE:
      return "LIFETIME_VALUE_BUCKET_NOT_IN_RANGE";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INCOMPATIBLE_USER_IDENTIFIER_FOR_ATTRIBUTES:
      return "INCOMPATIBLE_USER_IDENTIFIER_FOR_ATTRIBUTES";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.FUTURE_TIME_NOT_ALLOWED:
      return "FUTURE_TIME_NOT_ALLOWED";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.LAST_PURCHASE_TIME_LESS_THAN_ACQUISITION_TIME:
      return "LAST_PURCHASE_TIME_LESS_THAN_ACQUISITION_TIME";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.CUSTOMER_IDENTIFIER_NOT_ALLOWED:
      return "CUSTOMER_IDENTIFIER_NOT_ALLOWED";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_ITEM_ID:
      return "INVALID_ITEM_ID";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.FIRST_PURCHASE_TIME_GREATER_THAN_LAST_PURCHASE_TIME:
      return "FIRST_PURCHASE_TIME_GREATER_THAN_LAST_PURCHASE_TIME";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_LIFECYCLE_STAGE:
      return "INVALID_LIFECYCLE_STAGE";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.INVALID_EVENT_VALUE:
      return "INVALID_EVENT_VALUE";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.EVENT_ATTRIBUTE_ALL_FIELDS_ARE_REQUIRED:
      return "EVENT_ATTRIBUTE_ALL_FIELDS_ARE_REQUIRED";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.OPERATION_LEVEL_CONSENT_PROVIDED:
      return "OPERATION_LEVEL_CONSENT_PROVIDED";
    case OfflineUserDataJobErrorEnum_OfflineUserDataJobError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseOfflineUserDataJobErrorEnum(): OfflineUserDataJobErrorEnum {
  return {};
}

export const OfflineUserDataJobErrorEnum: MessageFns<OfflineUserDataJobErrorEnum> = {
  encode(_: OfflineUserDataJobErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OfflineUserDataJobErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOfflineUserDataJobErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): OfflineUserDataJobErrorEnum {
    return {};
  },

  toJSON(_: OfflineUserDataJobErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<OfflineUserDataJobErrorEnum>): OfflineUserDataJobErrorEnum {
    return OfflineUserDataJobErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<OfflineUserDataJobErrorEnum>): OfflineUserDataJobErrorEnum {
    const message = createBaseOfflineUserDataJobErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
