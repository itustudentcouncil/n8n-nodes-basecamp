// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/keyword_theme_constant.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.resources";

/** A Smart Campaign keyword theme constant. */
export interface KeywordThemeConstant {
  /**
   * Output only. The resource name of the keyword theme constant.
   * Keyword theme constant resource names have the form:
   *
   * `keywordThemeConstants/{keyword_theme_id}~{sub_keyword_theme_id}`
   */
  resourceName: string;
  /**
   * Output only. The ISO-3166 Alpha-2 country code of the constant, eg. "US".
   * To display and query matching purpose, the keyword theme needs to be
   * localized.
   */
  countryCode?:
    | string
    | undefined;
  /**
   * Output only. The ISO-639-1 language code with 2 letters of the constant,
   * eg. "en". To display and query matching purpose, the keyword theme needs to
   * be localized.
   */
  languageCode?:
    | string
    | undefined;
  /** Output only. The display name of the keyword theme or sub keyword theme. */
  displayName?: string | undefined;
}

function createBaseKeywordThemeConstant(): KeywordThemeConstant {
  return { resourceName: "", countryCode: undefined, languageCode: undefined, displayName: undefined };
}

export const KeywordThemeConstant: MessageFns<KeywordThemeConstant> = {
  encode(message: KeywordThemeConstant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.countryCode !== undefined) {
      writer.uint32(18).string(message.countryCode);
    }
    if (message.languageCode !== undefined) {
      writer.uint32(26).string(message.languageCode);
    }
    if (message.displayName !== undefined) {
      writer.uint32(34).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeywordThemeConstant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeywordThemeConstant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeywordThemeConstant {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : undefined,
    };
  },

  toJSON(message: KeywordThemeConstant): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.countryCode !== undefined) {
      obj.countryCode = message.countryCode;
    }
    if (message.languageCode !== undefined) {
      obj.languageCode = message.languageCode;
    }
    if (message.displayName !== undefined) {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<KeywordThemeConstant>): KeywordThemeConstant {
    return KeywordThemeConstant.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KeywordThemeConstant>): KeywordThemeConstant {
    const message = createBaseKeywordThemeConstant();
    message.resourceName = object.resourceName ?? "";
    message.countryCode = object.countryCode ?? undefined;
    message.languageCode = object.languageCode ?? undefined;
    message.displayName = object.displayName ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
