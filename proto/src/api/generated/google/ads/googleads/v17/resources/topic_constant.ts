// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/topic_constant.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.resources";

/**
 * Use topics to target or exclude placements in the Google Display Network
 * based on the category into which the placement falls (for example,
 * "Pets & Animals/Pets/Dogs").
 */
export interface TopicConstant {
  /**
   * Output only. The resource name of the topic constant.
   * topic constant resource names have the form:
   *
   * `topicConstants/{topic_id}`
   */
  resourceName: string;
  /** Output only. The ID of the topic. */
  id?:
    | Long
    | undefined;
  /** Output only. Resource name of parent of the topic constant. */
  topicConstantParent?:
    | string
    | undefined;
  /**
   * Output only. The category to target or exclude. Each subsequent element in
   * the array describes a more specific sub-category. For example,
   * {"Pets & Animals", "Pets", "Dogs"} represents the
   * "Pets & Animals/Pets/Dogs" category. List of available topic categories at
   * https://developers.google.com/google-ads/api/reference/data/verticals
   */
  path: string[];
}

function createBaseTopicConstant(): TopicConstant {
  return { resourceName: "", id: undefined, topicConstantParent: undefined, path: [] };
}

export const TopicConstant: MessageFns<TopicConstant> = {
  encode(message: TopicConstant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(40).int64(message.id.toString());
    }
    if (message.topicConstantParent !== undefined) {
      writer.uint32(50).string(message.topicConstantParent);
    }
    for (const v of message.path) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TopicConstant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTopicConstant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.topicConstantParent = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.path.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TopicConstant {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      topicConstantParent: isSet(object.topicConstantParent)
        ? globalThis.String(object.topicConstantParent)
        : undefined,
      path: globalThis.Array.isArray(object?.path) ? object.path.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: TopicConstant): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.topicConstantParent !== undefined) {
      obj.topicConstantParent = message.topicConstantParent;
    }
    if (message.path?.length) {
      obj.path = message.path;
    }
    return obj;
  },

  create(base?: DeepPartial<TopicConstant>): TopicConstant {
    return TopicConstant.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TopicConstant>): TopicConstant {
    const message = createBaseTopicConstant();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.topicConstantParent = object.topicConstantParent ?? undefined;
    message.path = object.path?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
