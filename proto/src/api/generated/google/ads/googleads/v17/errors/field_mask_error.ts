// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/field_mask_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible field mask errors. */
export interface FieldMaskErrorEnum {
}

/** Enum describing possible field mask errors. */
export enum FieldMaskErrorEnum_FieldMaskError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** FIELD_MASK_MISSING - The field mask must be provided for update operations. */
  FIELD_MASK_MISSING = 5,
  /** FIELD_MASK_NOT_ALLOWED - The field mask must be empty for create and remove operations. */
  FIELD_MASK_NOT_ALLOWED = 4,
  /** FIELD_NOT_FOUND - The field mask contained an invalid field. */
  FIELD_NOT_FOUND = 2,
  /**
   * FIELD_HAS_SUBFIELDS - The field mask updated a field with subfields. Fields with subfields may
   * be cleared, but not updated. To fix this, the field mask should select
   * all the subfields of the invalid field.
   */
  FIELD_HAS_SUBFIELDS = 3,
  UNRECOGNIZED = -1,
}

export function fieldMaskErrorEnum_FieldMaskErrorFromJSON(object: any): FieldMaskErrorEnum_FieldMaskError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return FieldMaskErrorEnum_FieldMaskError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return FieldMaskErrorEnum_FieldMaskError.UNKNOWN;
    case 5:
    case "FIELD_MASK_MISSING":
      return FieldMaskErrorEnum_FieldMaskError.FIELD_MASK_MISSING;
    case 4:
    case "FIELD_MASK_NOT_ALLOWED":
      return FieldMaskErrorEnum_FieldMaskError.FIELD_MASK_NOT_ALLOWED;
    case 2:
    case "FIELD_NOT_FOUND":
      return FieldMaskErrorEnum_FieldMaskError.FIELD_NOT_FOUND;
    case 3:
    case "FIELD_HAS_SUBFIELDS":
      return FieldMaskErrorEnum_FieldMaskError.FIELD_HAS_SUBFIELDS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FieldMaskErrorEnum_FieldMaskError.UNRECOGNIZED;
  }
}

export function fieldMaskErrorEnum_FieldMaskErrorToJSON(object: FieldMaskErrorEnum_FieldMaskError): string {
  switch (object) {
    case FieldMaskErrorEnum_FieldMaskError.UNSPECIFIED:
      return "UNSPECIFIED";
    case FieldMaskErrorEnum_FieldMaskError.UNKNOWN:
      return "UNKNOWN";
    case FieldMaskErrorEnum_FieldMaskError.FIELD_MASK_MISSING:
      return "FIELD_MASK_MISSING";
    case FieldMaskErrorEnum_FieldMaskError.FIELD_MASK_NOT_ALLOWED:
      return "FIELD_MASK_NOT_ALLOWED";
    case FieldMaskErrorEnum_FieldMaskError.FIELD_NOT_FOUND:
      return "FIELD_NOT_FOUND";
    case FieldMaskErrorEnum_FieldMaskError.FIELD_HAS_SUBFIELDS:
      return "FIELD_HAS_SUBFIELDS";
    case FieldMaskErrorEnum_FieldMaskError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseFieldMaskErrorEnum(): FieldMaskErrorEnum {
  return {};
}

export const FieldMaskErrorEnum: MessageFns<FieldMaskErrorEnum> = {
  encode(_: FieldMaskErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FieldMaskErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldMaskErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FieldMaskErrorEnum {
    return {};
  },

  toJSON(_: FieldMaskErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<FieldMaskErrorEnum>): FieldMaskErrorEnum {
    return FieldMaskErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<FieldMaskErrorEnum>): FieldMaskErrorEnum {
    const message = createBaseFieldMaskErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
