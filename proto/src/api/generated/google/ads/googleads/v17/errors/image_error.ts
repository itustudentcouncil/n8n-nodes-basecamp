// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/image_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible image errors. */
export interface ImageErrorEnum {
}

/** Enum describing possible image errors. */
export enum ImageErrorEnum_ImageError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** INVALID_IMAGE - The image is not valid. */
  INVALID_IMAGE = 2,
  /** STORAGE_ERROR - The image could not be stored. */
  STORAGE_ERROR = 3,
  /** BAD_REQUEST - There was a problem with the request. */
  BAD_REQUEST = 4,
  /** UNEXPECTED_SIZE - The image is not of legal dimensions. */
  UNEXPECTED_SIZE = 5,
  /** ANIMATED_NOT_ALLOWED - Animated image are not permitted. */
  ANIMATED_NOT_ALLOWED = 6,
  /** ANIMATION_TOO_LONG - Animation is too long. */
  ANIMATION_TOO_LONG = 7,
  /** SERVER_ERROR - There was an error on the server. */
  SERVER_ERROR = 8,
  /** CMYK_JPEG_NOT_ALLOWED - Image cannot be in CMYK color format. */
  CMYK_JPEG_NOT_ALLOWED = 9,
  /** FLASH_NOT_ALLOWED - Flash images are not permitted. */
  FLASH_NOT_ALLOWED = 10,
  /** FLASH_WITHOUT_CLICKTAG - Flash images must support clickTag. */
  FLASH_WITHOUT_CLICKTAG = 11,
  /** FLASH_ERROR_AFTER_FIXING_CLICK_TAG - A flash error has occurred after fixing the click tag. */
  FLASH_ERROR_AFTER_FIXING_CLICK_TAG = 12,
  /** ANIMATED_VISUAL_EFFECT - Unacceptable visual effects. */
  ANIMATED_VISUAL_EFFECT = 13,
  /** FLASH_ERROR - There was a problem with the flash image. */
  FLASH_ERROR = 14,
  /** LAYOUT_PROBLEM - Incorrect image layout. */
  LAYOUT_PROBLEM = 15,
  /** PROBLEM_READING_IMAGE_FILE - There was a problem reading the image file. */
  PROBLEM_READING_IMAGE_FILE = 16,
  /** ERROR_STORING_IMAGE - There was an error storing the image. */
  ERROR_STORING_IMAGE = 17,
  /** ASPECT_RATIO_NOT_ALLOWED - The aspect ratio of the image is not allowed. */
  ASPECT_RATIO_NOT_ALLOWED = 18,
  /** FLASH_HAS_NETWORK_OBJECTS - Flash cannot have network objects. */
  FLASH_HAS_NETWORK_OBJECTS = 19,
  /** FLASH_HAS_NETWORK_METHODS - Flash cannot have network methods. */
  FLASH_HAS_NETWORK_METHODS = 20,
  /** FLASH_HAS_URL - Flash cannot have a Url. */
  FLASH_HAS_URL = 21,
  /** FLASH_HAS_MOUSE_TRACKING - Flash cannot use mouse tracking. */
  FLASH_HAS_MOUSE_TRACKING = 22,
  /** FLASH_HAS_RANDOM_NUM - Flash cannot have a random number. */
  FLASH_HAS_RANDOM_NUM = 23,
  /** FLASH_SELF_TARGETS - Ad click target cannot be '_self'. */
  FLASH_SELF_TARGETS = 24,
  /** FLASH_BAD_GETURL_TARGET - GetUrl method should only use '_blank'. */
  FLASH_BAD_GETURL_TARGET = 25,
  /** FLASH_VERSION_NOT_SUPPORTED - Flash version is not supported. */
  FLASH_VERSION_NOT_SUPPORTED = 26,
  /** FLASH_WITHOUT_HARD_CODED_CLICK_URL - Flash movies need to have hard coded click URL or clickTAG */
  FLASH_WITHOUT_HARD_CODED_CLICK_URL = 27,
  /** INVALID_FLASH_FILE - Uploaded flash file is corrupted. */
  INVALID_FLASH_FILE = 28,
  /**
   * FAILED_TO_FIX_CLICK_TAG_IN_FLASH - Uploaded flash file can be parsed, but the click tag can not be fixed
   * properly.
   */
  FAILED_TO_FIX_CLICK_TAG_IN_FLASH = 29,
  /** FLASH_ACCESSES_NETWORK_RESOURCES - Flash movie accesses network resources */
  FLASH_ACCESSES_NETWORK_RESOURCES = 30,
  /** FLASH_EXTERNAL_JS_CALL - Flash movie attempts to call external javascript code */
  FLASH_EXTERNAL_JS_CALL = 31,
  /** FLASH_EXTERNAL_FS_CALL - Flash movie attempts to call flash system commands */
  FLASH_EXTERNAL_FS_CALL = 32,
  /** FILE_TOO_LARGE - Image file is too large. */
  FILE_TOO_LARGE = 33,
  /** IMAGE_DATA_TOO_LARGE - Image data is too large. */
  IMAGE_DATA_TOO_LARGE = 34,
  /** IMAGE_PROCESSING_ERROR - Error while processing the image. */
  IMAGE_PROCESSING_ERROR = 35,
  /** IMAGE_TOO_SMALL - Image is too small. */
  IMAGE_TOO_SMALL = 36,
  /** INVALID_INPUT - Input was invalid. */
  INVALID_INPUT = 37,
  /** PROBLEM_READING_FILE - There was a problem reading the image file. */
  PROBLEM_READING_FILE = 38,
  /**
   * IMAGE_CONSTRAINTS_VIOLATED - Image constraints are violated, but details like ASPECT_RATIO_NOT_ALLOWED
   * can't be provided. This happens when asset spec contains more than one
   * constraint and different criteria of different constraints are violated.
   */
  IMAGE_CONSTRAINTS_VIOLATED = 39,
  /** FORMAT_NOT_ALLOWED - Image format is not allowed. */
  FORMAT_NOT_ALLOWED = 40,
  UNRECOGNIZED = -1,
}

export function imageErrorEnum_ImageErrorFromJSON(object: any): ImageErrorEnum_ImageError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return ImageErrorEnum_ImageError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return ImageErrorEnum_ImageError.UNKNOWN;
    case 2:
    case "INVALID_IMAGE":
      return ImageErrorEnum_ImageError.INVALID_IMAGE;
    case 3:
    case "STORAGE_ERROR":
      return ImageErrorEnum_ImageError.STORAGE_ERROR;
    case 4:
    case "BAD_REQUEST":
      return ImageErrorEnum_ImageError.BAD_REQUEST;
    case 5:
    case "UNEXPECTED_SIZE":
      return ImageErrorEnum_ImageError.UNEXPECTED_SIZE;
    case 6:
    case "ANIMATED_NOT_ALLOWED":
      return ImageErrorEnum_ImageError.ANIMATED_NOT_ALLOWED;
    case 7:
    case "ANIMATION_TOO_LONG":
      return ImageErrorEnum_ImageError.ANIMATION_TOO_LONG;
    case 8:
    case "SERVER_ERROR":
      return ImageErrorEnum_ImageError.SERVER_ERROR;
    case 9:
    case "CMYK_JPEG_NOT_ALLOWED":
      return ImageErrorEnum_ImageError.CMYK_JPEG_NOT_ALLOWED;
    case 10:
    case "FLASH_NOT_ALLOWED":
      return ImageErrorEnum_ImageError.FLASH_NOT_ALLOWED;
    case 11:
    case "FLASH_WITHOUT_CLICKTAG":
      return ImageErrorEnum_ImageError.FLASH_WITHOUT_CLICKTAG;
    case 12:
    case "FLASH_ERROR_AFTER_FIXING_CLICK_TAG":
      return ImageErrorEnum_ImageError.FLASH_ERROR_AFTER_FIXING_CLICK_TAG;
    case 13:
    case "ANIMATED_VISUAL_EFFECT":
      return ImageErrorEnum_ImageError.ANIMATED_VISUAL_EFFECT;
    case 14:
    case "FLASH_ERROR":
      return ImageErrorEnum_ImageError.FLASH_ERROR;
    case 15:
    case "LAYOUT_PROBLEM":
      return ImageErrorEnum_ImageError.LAYOUT_PROBLEM;
    case 16:
    case "PROBLEM_READING_IMAGE_FILE":
      return ImageErrorEnum_ImageError.PROBLEM_READING_IMAGE_FILE;
    case 17:
    case "ERROR_STORING_IMAGE":
      return ImageErrorEnum_ImageError.ERROR_STORING_IMAGE;
    case 18:
    case "ASPECT_RATIO_NOT_ALLOWED":
      return ImageErrorEnum_ImageError.ASPECT_RATIO_NOT_ALLOWED;
    case 19:
    case "FLASH_HAS_NETWORK_OBJECTS":
      return ImageErrorEnum_ImageError.FLASH_HAS_NETWORK_OBJECTS;
    case 20:
    case "FLASH_HAS_NETWORK_METHODS":
      return ImageErrorEnum_ImageError.FLASH_HAS_NETWORK_METHODS;
    case 21:
    case "FLASH_HAS_URL":
      return ImageErrorEnum_ImageError.FLASH_HAS_URL;
    case 22:
    case "FLASH_HAS_MOUSE_TRACKING":
      return ImageErrorEnum_ImageError.FLASH_HAS_MOUSE_TRACKING;
    case 23:
    case "FLASH_HAS_RANDOM_NUM":
      return ImageErrorEnum_ImageError.FLASH_HAS_RANDOM_NUM;
    case 24:
    case "FLASH_SELF_TARGETS":
      return ImageErrorEnum_ImageError.FLASH_SELF_TARGETS;
    case 25:
    case "FLASH_BAD_GETURL_TARGET":
      return ImageErrorEnum_ImageError.FLASH_BAD_GETURL_TARGET;
    case 26:
    case "FLASH_VERSION_NOT_SUPPORTED":
      return ImageErrorEnum_ImageError.FLASH_VERSION_NOT_SUPPORTED;
    case 27:
    case "FLASH_WITHOUT_HARD_CODED_CLICK_URL":
      return ImageErrorEnum_ImageError.FLASH_WITHOUT_HARD_CODED_CLICK_URL;
    case 28:
    case "INVALID_FLASH_FILE":
      return ImageErrorEnum_ImageError.INVALID_FLASH_FILE;
    case 29:
    case "FAILED_TO_FIX_CLICK_TAG_IN_FLASH":
      return ImageErrorEnum_ImageError.FAILED_TO_FIX_CLICK_TAG_IN_FLASH;
    case 30:
    case "FLASH_ACCESSES_NETWORK_RESOURCES":
      return ImageErrorEnum_ImageError.FLASH_ACCESSES_NETWORK_RESOURCES;
    case 31:
    case "FLASH_EXTERNAL_JS_CALL":
      return ImageErrorEnum_ImageError.FLASH_EXTERNAL_JS_CALL;
    case 32:
    case "FLASH_EXTERNAL_FS_CALL":
      return ImageErrorEnum_ImageError.FLASH_EXTERNAL_FS_CALL;
    case 33:
    case "FILE_TOO_LARGE":
      return ImageErrorEnum_ImageError.FILE_TOO_LARGE;
    case 34:
    case "IMAGE_DATA_TOO_LARGE":
      return ImageErrorEnum_ImageError.IMAGE_DATA_TOO_LARGE;
    case 35:
    case "IMAGE_PROCESSING_ERROR":
      return ImageErrorEnum_ImageError.IMAGE_PROCESSING_ERROR;
    case 36:
    case "IMAGE_TOO_SMALL":
      return ImageErrorEnum_ImageError.IMAGE_TOO_SMALL;
    case 37:
    case "INVALID_INPUT":
      return ImageErrorEnum_ImageError.INVALID_INPUT;
    case 38:
    case "PROBLEM_READING_FILE":
      return ImageErrorEnum_ImageError.PROBLEM_READING_FILE;
    case 39:
    case "IMAGE_CONSTRAINTS_VIOLATED":
      return ImageErrorEnum_ImageError.IMAGE_CONSTRAINTS_VIOLATED;
    case 40:
    case "FORMAT_NOT_ALLOWED":
      return ImageErrorEnum_ImageError.FORMAT_NOT_ALLOWED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ImageErrorEnum_ImageError.UNRECOGNIZED;
  }
}

export function imageErrorEnum_ImageErrorToJSON(object: ImageErrorEnum_ImageError): string {
  switch (object) {
    case ImageErrorEnum_ImageError.UNSPECIFIED:
      return "UNSPECIFIED";
    case ImageErrorEnum_ImageError.UNKNOWN:
      return "UNKNOWN";
    case ImageErrorEnum_ImageError.INVALID_IMAGE:
      return "INVALID_IMAGE";
    case ImageErrorEnum_ImageError.STORAGE_ERROR:
      return "STORAGE_ERROR";
    case ImageErrorEnum_ImageError.BAD_REQUEST:
      return "BAD_REQUEST";
    case ImageErrorEnum_ImageError.UNEXPECTED_SIZE:
      return "UNEXPECTED_SIZE";
    case ImageErrorEnum_ImageError.ANIMATED_NOT_ALLOWED:
      return "ANIMATED_NOT_ALLOWED";
    case ImageErrorEnum_ImageError.ANIMATION_TOO_LONG:
      return "ANIMATION_TOO_LONG";
    case ImageErrorEnum_ImageError.SERVER_ERROR:
      return "SERVER_ERROR";
    case ImageErrorEnum_ImageError.CMYK_JPEG_NOT_ALLOWED:
      return "CMYK_JPEG_NOT_ALLOWED";
    case ImageErrorEnum_ImageError.FLASH_NOT_ALLOWED:
      return "FLASH_NOT_ALLOWED";
    case ImageErrorEnum_ImageError.FLASH_WITHOUT_CLICKTAG:
      return "FLASH_WITHOUT_CLICKTAG";
    case ImageErrorEnum_ImageError.FLASH_ERROR_AFTER_FIXING_CLICK_TAG:
      return "FLASH_ERROR_AFTER_FIXING_CLICK_TAG";
    case ImageErrorEnum_ImageError.ANIMATED_VISUAL_EFFECT:
      return "ANIMATED_VISUAL_EFFECT";
    case ImageErrorEnum_ImageError.FLASH_ERROR:
      return "FLASH_ERROR";
    case ImageErrorEnum_ImageError.LAYOUT_PROBLEM:
      return "LAYOUT_PROBLEM";
    case ImageErrorEnum_ImageError.PROBLEM_READING_IMAGE_FILE:
      return "PROBLEM_READING_IMAGE_FILE";
    case ImageErrorEnum_ImageError.ERROR_STORING_IMAGE:
      return "ERROR_STORING_IMAGE";
    case ImageErrorEnum_ImageError.ASPECT_RATIO_NOT_ALLOWED:
      return "ASPECT_RATIO_NOT_ALLOWED";
    case ImageErrorEnum_ImageError.FLASH_HAS_NETWORK_OBJECTS:
      return "FLASH_HAS_NETWORK_OBJECTS";
    case ImageErrorEnum_ImageError.FLASH_HAS_NETWORK_METHODS:
      return "FLASH_HAS_NETWORK_METHODS";
    case ImageErrorEnum_ImageError.FLASH_HAS_URL:
      return "FLASH_HAS_URL";
    case ImageErrorEnum_ImageError.FLASH_HAS_MOUSE_TRACKING:
      return "FLASH_HAS_MOUSE_TRACKING";
    case ImageErrorEnum_ImageError.FLASH_HAS_RANDOM_NUM:
      return "FLASH_HAS_RANDOM_NUM";
    case ImageErrorEnum_ImageError.FLASH_SELF_TARGETS:
      return "FLASH_SELF_TARGETS";
    case ImageErrorEnum_ImageError.FLASH_BAD_GETURL_TARGET:
      return "FLASH_BAD_GETURL_TARGET";
    case ImageErrorEnum_ImageError.FLASH_VERSION_NOT_SUPPORTED:
      return "FLASH_VERSION_NOT_SUPPORTED";
    case ImageErrorEnum_ImageError.FLASH_WITHOUT_HARD_CODED_CLICK_URL:
      return "FLASH_WITHOUT_HARD_CODED_CLICK_URL";
    case ImageErrorEnum_ImageError.INVALID_FLASH_FILE:
      return "INVALID_FLASH_FILE";
    case ImageErrorEnum_ImageError.FAILED_TO_FIX_CLICK_TAG_IN_FLASH:
      return "FAILED_TO_FIX_CLICK_TAG_IN_FLASH";
    case ImageErrorEnum_ImageError.FLASH_ACCESSES_NETWORK_RESOURCES:
      return "FLASH_ACCESSES_NETWORK_RESOURCES";
    case ImageErrorEnum_ImageError.FLASH_EXTERNAL_JS_CALL:
      return "FLASH_EXTERNAL_JS_CALL";
    case ImageErrorEnum_ImageError.FLASH_EXTERNAL_FS_CALL:
      return "FLASH_EXTERNAL_FS_CALL";
    case ImageErrorEnum_ImageError.FILE_TOO_LARGE:
      return "FILE_TOO_LARGE";
    case ImageErrorEnum_ImageError.IMAGE_DATA_TOO_LARGE:
      return "IMAGE_DATA_TOO_LARGE";
    case ImageErrorEnum_ImageError.IMAGE_PROCESSING_ERROR:
      return "IMAGE_PROCESSING_ERROR";
    case ImageErrorEnum_ImageError.IMAGE_TOO_SMALL:
      return "IMAGE_TOO_SMALL";
    case ImageErrorEnum_ImageError.INVALID_INPUT:
      return "INVALID_INPUT";
    case ImageErrorEnum_ImageError.PROBLEM_READING_FILE:
      return "PROBLEM_READING_FILE";
    case ImageErrorEnum_ImageError.IMAGE_CONSTRAINTS_VIOLATED:
      return "IMAGE_CONSTRAINTS_VIOLATED";
    case ImageErrorEnum_ImageError.FORMAT_NOT_ALLOWED:
      return "FORMAT_NOT_ALLOWED";
    case ImageErrorEnum_ImageError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseImageErrorEnum(): ImageErrorEnum {
  return {};
}

export const ImageErrorEnum: MessageFns<ImageErrorEnum> = {
  encode(_: ImageErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ImageErrorEnum {
    return {};
  },

  toJSON(_: ImageErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ImageErrorEnum>): ImageErrorEnum {
    return ImageErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ImageErrorEnum>): ImageErrorEnum {
    const message = createBaseImageErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
