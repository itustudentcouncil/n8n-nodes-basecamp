// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/admanager/v1/goal.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.admanager.v1";

/**
 * Defines the criteria a [LineItem][google.ads.admanager.v1.LineItem] needs to
 * satisfy to meet its delivery
 *  goal.
 */
export interface Goal {
  /**
   * The type of the goal for the LineItem. It defines the period over which the
   * goal should be reached.
   */
  goalType: GoalTypeEnum_GoalType;
  /** The type of the goal unit for the LineItem. */
  unitType: UnitTypeEnum_UnitType;
  /**
   * If this is a primary goal, it represents the number or percentage of
   * impressions or clicks that will be reserved. If the line item is of type
   * [LineItemTypeEnum.LineItemType.SPONSORSHIP][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.SPONSORSHIP],
   * it represents the percentage of available impressions reserved. If the line
   * item is of type
   * [LineItemTypeEnum.LineItemType.BULK][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.BULK]
   * or
   * [LineItemTypeEnum.LineItemType.PRICE_PRIORITY][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.PRICE_PRIORITY],
   * it represents the number of remaining impressions reserved. If the line
   * item is of type
   * [LineItemTypeEnum.LineItemType.NETWORK][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.NETWORK]
   * or
   * [LineItemTypeEnum.LineItemType.HOUSE][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.HOUSE],
   * it represents the percentage of remaining impressions reserved. <p>If this
   * is an impression cap goal, it represents the number of impressions or
   * conversions that the line item will stop serving at if reached. For valid
   * line item types, see [LineItem.impressions_cap][].
   */
  units: Long;
}

/**
 * Wrapper message for
 * [GoalType][google.ads.admanager.v1.GoalTypeEnum.GoalType].
 */
export interface GoalTypeEnum {
}

/** Specifies the type of the goal for a LineItem. */
export enum GoalTypeEnum_GoalType {
  /** GOAL_TYPE_UNSPECIFIED - Default value. This value is unused. */
  GOAL_TYPE_UNSPECIFIED = 0,
  /**
   * NONE - No goal is specified for the number of ads delivered.
   * The line item [type][google.ads.admanager.v1.LineItem.line_item_type]
   * must be one of:
   *
   * * [LineItemTypeEnum.LineItemType.PRICE_PRIORITY][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.PRICE_PRIORITY]
   * * [LineItemTypeEnum.LineItemType.AD_EXCHANGE][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.AD_EXCHANGE]
   * * [LineItemTypeEnum.LineItemType.CLICK_TRACKING][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.CLICK_TRACKING]
   */
  NONE = 1,
  /**
   * LIFETIME - There is a goal on the number of ads delivered for this line item during
   * its entire lifetime.
   * The line item [type][google.ads.admanager.v1.LineItem.line_item_type]
   * must be one of:
   *
   * * [LineItemTypeEnum.LineItemType.STANDARD][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.STANDARD]
   * * [LineItemTypeEnum.LineItemType.BULK][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.BULK]
   * * [LineItemTypeEnum.LineItemType.PRICE_PRIORITY][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.PRICE_PRIORITY]
   * * [LineItemTypeEnum.LineItemType.ADSENSE][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.ADSENSE]
   * * [LineItemTypeEnum.LineItemType.AD_EXCHANGE][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.AD_EXCHANGE]
   * * [LineItemTypeEnum.LineItemType.ADMOB][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.ADMOB]
   * * [LineItemTypeEnum.LineItemType.CLICK_TRACKING][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.CLICK_TRACKING]
   */
  LIFETIME = 2,
  /**
   * DAILY - There is a daily goal on the number of ads delivered for this line item.
   * The line item [type][google.ads.admanager.v1.LineItem.line_item_type]
   * must be one of:
   *
   * * [LineItemTypeEnum.LineItemType.SPONSORSHIP][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.SPONSORSHIP]
   * * [LineItemTypeEnum.LineItemType.NETWORK][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.NETWORK]
   * * [LineItemTypeEnum.LineItemType.PRICE_PRIORITY][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.PRICE_PRIORITY]
   * * [LineItemTypeEnum.LineItemType.HOUSE][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.HOUSE]
   * * [LineItemTypeEnum.LineItemType.ADSENSE][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.ADSENSE]
   * * [LineItemTypeEnum.LineItemType.AD_EXCHANGE][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.AD_EXCHANGE]
   * * [LineItemTypeEnum.LineItemType.ADMOB][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.ADMOB]
   * * [LineItemTypeEnum.LineItemType.BUMPER][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.BUMPER]
   */
  DAILY = 3,
  UNRECOGNIZED = -1,
}

export function goalTypeEnum_GoalTypeFromJSON(object: any): GoalTypeEnum_GoalType {
  switch (object) {
    case 0:
    case "GOAL_TYPE_UNSPECIFIED":
      return GoalTypeEnum_GoalType.GOAL_TYPE_UNSPECIFIED;
    case 1:
    case "NONE":
      return GoalTypeEnum_GoalType.NONE;
    case 2:
    case "LIFETIME":
      return GoalTypeEnum_GoalType.LIFETIME;
    case 3:
    case "DAILY":
      return GoalTypeEnum_GoalType.DAILY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GoalTypeEnum_GoalType.UNRECOGNIZED;
  }
}

export function goalTypeEnum_GoalTypeToJSON(object: GoalTypeEnum_GoalType): string {
  switch (object) {
    case GoalTypeEnum_GoalType.GOAL_TYPE_UNSPECIFIED:
      return "GOAL_TYPE_UNSPECIFIED";
    case GoalTypeEnum_GoalType.NONE:
      return "NONE";
    case GoalTypeEnum_GoalType.LIFETIME:
      return "LIFETIME";
    case GoalTypeEnum_GoalType.DAILY:
      return "DAILY";
    case GoalTypeEnum_GoalType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Wrapper message for
 * [UnitType][google.ads.admanager.v1.UnitTypeEnum.UnitType].
 */
export interface UnitTypeEnum {
}

/**
 * Indicates the type of unit used for defining a reservation. The
 * [LineItem.cost_type][google.ads.admanager.v1.LineItem.cost_type] can differ
 * from the UnitType - an ad can have an impression goal, but be billed by its
 * click. Usually CostType and UnitType will refer to the same unit.
 */
export enum UnitTypeEnum_UnitType {
  /** UNIT_TYPE_UNSPECIFIED - Default value. This value is unused. */
  UNIT_TYPE_UNSPECIFIED = 0,
  /**
   * IMPRESSIONS - The number of impressions served by creatives associated with the line
   * item.
   */
  IMPRESSIONS = 1,
  /**
   * CLICKS - The number of clicks reported by creatives associated with the line item.
   * The line item [type][google.ads.admanager.v1.LineItem.line_item_type]
   * must be one of:
   *
   * * [LineItemTypeEnum.LineItemType.STANDARD][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.STANDARD]
   * * [LineItemTypeEnum.LineItemType.BULK][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.BULK]
   * * [LineItemTypeEnum.LineItemType.PRICE_PRIORITY][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.PRICE_PRIORITY]
   */
  CLICKS = 2,
  /**
   * CLICK_THROUGH_CPA_CONVERSIONS - The number of view-through Cost-Per-Action (CPA) conversions from
   * creatives associated with the line item. This is only supported as
   * secondary goal and the
   * [LineItem.cost_type][google.ads.admanager.v1.LineItem.cost_type] must be
   * [CostTypeEnum.CostType.CPA][].
   */
  CLICK_THROUGH_CPA_CONVERSIONS = 3,
  /**
   * VIEW_THROUGH_CPA_CONVERSIONS - The number of view-through Cost-Per-Action (CPA) conversions from
   * creatives associated with the line item. This is only supported as
   * secondary goal and the
   * [LineItem.cost_type][google.ads.admanager.v1.LineItem.cost_type] must be
   * [CostTypeEnum.CostType.CPA}.
   */
  VIEW_THROUGH_CPA_CONVERSIONS = 4,
  /**
   * TOTAL_CPA_CONVERSIONS - The number of total Cost-Per-Action (CPA) conversions from creatives
   * associated with the line item. This is only supported as secondary goal
   * and the [LineItem.cost_type} must be [CostTypeEnum.CostType.CPA}.
   */
  TOTAL_CPA_CONVERSIONS = 5,
  /**
   * VIEWABLE_IMPRESSIONS - The number of viewable impressions reported by creatives associated with
   * the line item. The
   * [LineItem.line_item_type][google.ads.admanager.v1.LineItem.line_item_type]
   * must be
   * [LineItemTypeEnum.LineItemType.STANDARD][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.STANDARD].
   */
  VIEWABLE_IMPRESSIONS = 6,
  /**
   * IN_TARGET_IMPRESSIONS - The number of in-target impressions reported by third party measurements.
   * The
   * [LineItem.line_item_type][google.ads.admanager.v1.LineItem.line_item_type]
   * must be
   * [LineItemTypeEnum.LineItemType.STANDARD][google.ads.admanager.v1.LineItemTypeEnum.LineItemType.STANDARD].
   */
  IN_TARGET_IMPRESSIONS = 7,
  UNRECOGNIZED = -1,
}

export function unitTypeEnum_UnitTypeFromJSON(object: any): UnitTypeEnum_UnitType {
  switch (object) {
    case 0:
    case "UNIT_TYPE_UNSPECIFIED":
      return UnitTypeEnum_UnitType.UNIT_TYPE_UNSPECIFIED;
    case 1:
    case "IMPRESSIONS":
      return UnitTypeEnum_UnitType.IMPRESSIONS;
    case 2:
    case "CLICKS":
      return UnitTypeEnum_UnitType.CLICKS;
    case 3:
    case "CLICK_THROUGH_CPA_CONVERSIONS":
      return UnitTypeEnum_UnitType.CLICK_THROUGH_CPA_CONVERSIONS;
    case 4:
    case "VIEW_THROUGH_CPA_CONVERSIONS":
      return UnitTypeEnum_UnitType.VIEW_THROUGH_CPA_CONVERSIONS;
    case 5:
    case "TOTAL_CPA_CONVERSIONS":
      return UnitTypeEnum_UnitType.TOTAL_CPA_CONVERSIONS;
    case 6:
    case "VIEWABLE_IMPRESSIONS":
      return UnitTypeEnum_UnitType.VIEWABLE_IMPRESSIONS;
    case 7:
    case "IN_TARGET_IMPRESSIONS":
      return UnitTypeEnum_UnitType.IN_TARGET_IMPRESSIONS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UnitTypeEnum_UnitType.UNRECOGNIZED;
  }
}

export function unitTypeEnum_UnitTypeToJSON(object: UnitTypeEnum_UnitType): string {
  switch (object) {
    case UnitTypeEnum_UnitType.UNIT_TYPE_UNSPECIFIED:
      return "UNIT_TYPE_UNSPECIFIED";
    case UnitTypeEnum_UnitType.IMPRESSIONS:
      return "IMPRESSIONS";
    case UnitTypeEnum_UnitType.CLICKS:
      return "CLICKS";
    case UnitTypeEnum_UnitType.CLICK_THROUGH_CPA_CONVERSIONS:
      return "CLICK_THROUGH_CPA_CONVERSIONS";
    case UnitTypeEnum_UnitType.VIEW_THROUGH_CPA_CONVERSIONS:
      return "VIEW_THROUGH_CPA_CONVERSIONS";
    case UnitTypeEnum_UnitType.TOTAL_CPA_CONVERSIONS:
      return "TOTAL_CPA_CONVERSIONS";
    case UnitTypeEnum_UnitType.VIEWABLE_IMPRESSIONS:
      return "VIEWABLE_IMPRESSIONS";
    case UnitTypeEnum_UnitType.IN_TARGET_IMPRESSIONS:
      return "IN_TARGET_IMPRESSIONS";
    case UnitTypeEnum_UnitType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseGoal(): Goal {
  return { goalType: 0, unitType: 0, units: Long.ZERO };
}

export const Goal: MessageFns<Goal> = {
  encode(message: Goal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.goalType !== 0) {
      writer.uint32(8).int32(message.goalType);
    }
    if (message.unitType !== 0) {
      writer.uint32(16).int32(message.unitType);
    }
    if (!message.units.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.units.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Goal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGoal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.goalType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.unitType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.units = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Goal {
    return {
      goalType: isSet(object.goalType) ? goalTypeEnum_GoalTypeFromJSON(object.goalType) : 0,
      unitType: isSet(object.unitType) ? unitTypeEnum_UnitTypeFromJSON(object.unitType) : 0,
      units: isSet(object.units) ? Long.fromValue(object.units) : Long.ZERO,
    };
  },

  toJSON(message: Goal): unknown {
    const obj: any = {};
    if (message.goalType !== 0) {
      obj.goalType = goalTypeEnum_GoalTypeToJSON(message.goalType);
    }
    if (message.unitType !== 0) {
      obj.unitType = unitTypeEnum_UnitTypeToJSON(message.unitType);
    }
    if (!message.units.equals(Long.ZERO)) {
      obj.units = (message.units || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Goal>): Goal {
    return Goal.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Goal>): Goal {
    const message = createBaseGoal();
    message.goalType = object.goalType ?? 0;
    message.unitType = object.unitType ?? 0;
    message.units = (object.units !== undefined && object.units !== null) ? Long.fromValue(object.units) : Long.ZERO;
    return message;
  },
};

function createBaseGoalTypeEnum(): GoalTypeEnum {
  return {};
}

export const GoalTypeEnum: MessageFns<GoalTypeEnum> = {
  encode(_: GoalTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GoalTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGoalTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GoalTypeEnum {
    return {};
  },

  toJSON(_: GoalTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GoalTypeEnum>): GoalTypeEnum {
    return GoalTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GoalTypeEnum>): GoalTypeEnum {
    const message = createBaseGoalTypeEnum();
    return message;
  },
};

function createBaseUnitTypeEnum(): UnitTypeEnum {
  return {};
}

export const UnitTypeEnum: MessageFns<UnitTypeEnum> = {
  encode(_: UnitTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnitTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnitTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UnitTypeEnum {
    return {};
  },

  toJSON(_: UnitTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UnitTypeEnum>): UnitTypeEnum {
    return UnitTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UnitTypeEnum>): UnitTypeEnum {
    const message = createBaseUnitTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
