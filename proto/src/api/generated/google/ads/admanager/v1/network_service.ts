// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/admanager/v1/network_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "google.ads.admanager.v1";

/** The Network resource. */
export interface Network {
  /**
   * Identifier. The resource name of the Network.
   * Format: networks/{network_code}
   */
  name: string;
  /** Optional. Display name for Network. */
  displayName: string;
  /** Output only. Network Code. */
  networkCode: string;
  /** Output only. Property code. */
  propertyCode: string;
  /**
   * Output only. Time zone associated with the delivery of orders and
   * reporting.
   */
  timeZone: string;
  /** Output only. Primary currency code, in ISO-4217 format. */
  currencyCode: string;
  /**
   * Optional. Currency codes that can be used as an alternative to the primary
   * currency code for trafficking Line Items.
   */
  secondaryCurrencyCodes: string[];
  /**
   * Output only. Top most [Ad Unit](google.ads.admanager.v1.AdUnit) to which
   * descendant Ad Units can be added.
   * Format: networks/{network_code}/adUnit/{ad_unit_id}
   */
  effectiveRootAdUnit: string;
  /** Output only. Whether this is a test network. */
  testNetwork: boolean;
  /** Output only. Network ID. */
  networkId: Long;
}

/** Request to get Network */
export interface GetNetworkRequest {
  /**
   * Required. Resource name of Network.
   * Format: networks/{network_code}
   */
  name: string;
}

function createBaseNetwork(): Network {
  return {
    name: "",
    displayName: "",
    networkCode: "",
    propertyCode: "",
    timeZone: "",
    currencyCode: "",
    secondaryCurrencyCodes: [],
    effectiveRootAdUnit: "",
    testNetwork: false,
    networkId: Long.ZERO,
  };
}

export const Network: MessageFns<Network> = {
  encode(message: Network, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.networkCode !== "") {
      writer.uint32(26).string(message.networkCode);
    }
    if (message.propertyCode !== "") {
      writer.uint32(34).string(message.propertyCode);
    }
    if (message.timeZone !== "") {
      writer.uint32(42).string(message.timeZone);
    }
    if (message.currencyCode !== "") {
      writer.uint32(50).string(message.currencyCode);
    }
    for (const v of message.secondaryCurrencyCodes) {
      writer.uint32(58).string(v!);
    }
    if (message.effectiveRootAdUnit !== "") {
      writer.uint32(66).string(message.effectiveRootAdUnit);
    }
    if (message.testNetwork !== false) {
      writer.uint32(80).bool(message.testNetwork);
    }
    if (!message.networkId.equals(Long.ZERO)) {
      writer.uint32(88).int64(message.networkId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Network {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetwork();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.networkCode = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.propertyCode = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.timeZone = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.secondaryCurrencyCodes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.effectiveRootAdUnit = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.testNetwork = reader.bool();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.networkId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Network {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      networkCode: isSet(object.networkCode) ? globalThis.String(object.networkCode) : "",
      propertyCode: isSet(object.propertyCode) ? globalThis.String(object.propertyCode) : "",
      timeZone: isSet(object.timeZone) ? globalThis.String(object.timeZone) : "",
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : "",
      secondaryCurrencyCodes: globalThis.Array.isArray(object?.secondaryCurrencyCodes)
        ? object.secondaryCurrencyCodes.map((e: any) => globalThis.String(e))
        : [],
      effectiveRootAdUnit: isSet(object.effectiveRootAdUnit) ? globalThis.String(object.effectiveRootAdUnit) : "",
      testNetwork: isSet(object.testNetwork) ? globalThis.Boolean(object.testNetwork) : false,
      networkId: isSet(object.networkId) ? Long.fromValue(object.networkId) : Long.ZERO,
    };
  },

  toJSON(message: Network): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.networkCode !== "") {
      obj.networkCode = message.networkCode;
    }
    if (message.propertyCode !== "") {
      obj.propertyCode = message.propertyCode;
    }
    if (message.timeZone !== "") {
      obj.timeZone = message.timeZone;
    }
    if (message.currencyCode !== "") {
      obj.currencyCode = message.currencyCode;
    }
    if (message.secondaryCurrencyCodes?.length) {
      obj.secondaryCurrencyCodes = message.secondaryCurrencyCodes;
    }
    if (message.effectiveRootAdUnit !== "") {
      obj.effectiveRootAdUnit = message.effectiveRootAdUnit;
    }
    if (message.testNetwork !== false) {
      obj.testNetwork = message.testNetwork;
    }
    if (!message.networkId.equals(Long.ZERO)) {
      obj.networkId = (message.networkId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Network>): Network {
    return Network.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Network>): Network {
    const message = createBaseNetwork();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.networkCode = object.networkCode ?? "";
    message.propertyCode = object.propertyCode ?? "";
    message.timeZone = object.timeZone ?? "";
    message.currencyCode = object.currencyCode ?? "";
    message.secondaryCurrencyCodes = object.secondaryCurrencyCodes?.map((e) => e) || [];
    message.effectiveRootAdUnit = object.effectiveRootAdUnit ?? "";
    message.testNetwork = object.testNetwork ?? false;
    message.networkId = (object.networkId !== undefined && object.networkId !== null)
      ? Long.fromValue(object.networkId)
      : Long.ZERO;
    return message;
  },
};

function createBaseGetNetworkRequest(): GetNetworkRequest {
  return { name: "" };
}

export const GetNetworkRequest: MessageFns<GetNetworkRequest> = {
  encode(message: GetNetworkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNetworkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNetworkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNetworkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetNetworkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetNetworkRequest>): GetNetworkRequest {
    return GetNetworkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetNetworkRequest>): GetNetworkRequest {
    const message = createBaseGetNetworkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** Provides methods for handling Network objects. */
export type NetworkServiceDefinition = typeof NetworkServiceDefinition;
export const NetworkServiceDefinition = {
  name: "NetworkService",
  fullName: "google.ads.admanager.v1.NetworkService",
  methods: {
    /** API to retrieve a Network object. */
    getNetwork: {
      name: "GetNetwork",
      requestType: GetNetworkRequest,
      requestStream: false,
      responseType: Network,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              23,
              18,
              21,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface NetworkServiceImplementation<CallContextExt = {}> {
  /** API to retrieve a Network object. */
  getNetwork(request: GetNetworkRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Network>>;
}

export interface NetworkServiceClient<CallOptionsExt = {}> {
  /** API to retrieve a Network object. */
  getNetwork(request: DeepPartial<GetNetworkRequest>, options?: CallOptions & CallOptionsExt): Promise<Network>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
