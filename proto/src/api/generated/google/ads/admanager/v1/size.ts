// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/admanager/v1/size.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.admanager.v1";

/** Represents the dimensions of an AdUnit, LineItem, or Creative. */
export interface Size {
  /**
   * Required. The width of the [Creative](google.ads.admanager.v1.Creative),
   * [AdUnit](google.ads.admanager.v1.AdUnit), or
   * [LineItem](google.ads.admanager.v1.LineItem).
   */
  width: number;
  /**
   * Required. The height of the [Creative](google.ads.admanager.v1.Creative),
   * [AdUnit](google.ads.admanager.v1.AdUnit), or
   * [LineItem](google.ads.admanager.v1.LineItem).
   */
  height: number;
  /**
   * Required. The SizeType of the
   * [Creative](google.ads.admanager.v1.Creative),
   * [AdUnit](google.ads.admanager.v1.AdUnit), or
   * [LineItem](google.ads.admanager.v1.LineItem).
   */
  sizeType: SizeTypeEnum_SizeType;
}

/**
 * Wrapper message for
 * [SizeType][google.ads.admanager.v1.SizeTypeEnum.SizeType].
 */
export interface SizeTypeEnum {
}

/** The different Size types for an ad. */
export enum SizeTypeEnum_SizeType {
  /** SIZE_TYPE_UNSPECIFIED - Default value. This value is unused. */
  SIZE_TYPE_UNSPECIFIED = 0,
  /** PIXEL - Dimension based size, an actual height and width in pixels. */
  PIXEL = 1,
  /**
   * ASPECT_RATIO - Size is expressed as a ratio. For example, 4:1 could be
   * met by a 100 x 25 sized image.
   */
  ASPECT_RATIO = 2,
  /**
   * INTERSTITIAL - Out-of-page (Interstitial) size that is not related to the slot it is
   * served. This must be used with 1x1 size.
   */
  INTERSTITIAL = 3,
  /**
   * IGNORED - Size is ignored. This must be used with 1x1
   * size.
   */
  IGNORED = 4,
  /**
   * NATIVE - Native size, which is a function of the how the client renders the
   * creative. This must be used with 1x1 size.
   */
  NATIVE = 5,
  /**
   * FLUID - Fluid size. Automatically sizes the ad by filling the width of the
   * enclosing column and adjusting the height as appropriate. This must be
   * used with 1x1 size.
   */
  FLUID = 6,
  /** AUDIO - Audio size. Used with audio ads. This must be used with 1x1 size. */
  AUDIO = 7,
  UNRECOGNIZED = -1,
}

export function sizeTypeEnum_SizeTypeFromJSON(object: any): SizeTypeEnum_SizeType {
  switch (object) {
    case 0:
    case "SIZE_TYPE_UNSPECIFIED":
      return SizeTypeEnum_SizeType.SIZE_TYPE_UNSPECIFIED;
    case 1:
    case "PIXEL":
      return SizeTypeEnum_SizeType.PIXEL;
    case 2:
    case "ASPECT_RATIO":
      return SizeTypeEnum_SizeType.ASPECT_RATIO;
    case 3:
    case "INTERSTITIAL":
      return SizeTypeEnum_SizeType.INTERSTITIAL;
    case 4:
    case "IGNORED":
      return SizeTypeEnum_SizeType.IGNORED;
    case 5:
    case "NATIVE":
      return SizeTypeEnum_SizeType.NATIVE;
    case 6:
    case "FLUID":
      return SizeTypeEnum_SizeType.FLUID;
    case 7:
    case "AUDIO":
      return SizeTypeEnum_SizeType.AUDIO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SizeTypeEnum_SizeType.UNRECOGNIZED;
  }
}

export function sizeTypeEnum_SizeTypeToJSON(object: SizeTypeEnum_SizeType): string {
  switch (object) {
    case SizeTypeEnum_SizeType.SIZE_TYPE_UNSPECIFIED:
      return "SIZE_TYPE_UNSPECIFIED";
    case SizeTypeEnum_SizeType.PIXEL:
      return "PIXEL";
    case SizeTypeEnum_SizeType.ASPECT_RATIO:
      return "ASPECT_RATIO";
    case SizeTypeEnum_SizeType.INTERSTITIAL:
      return "INTERSTITIAL";
    case SizeTypeEnum_SizeType.IGNORED:
      return "IGNORED";
    case SizeTypeEnum_SizeType.NATIVE:
      return "NATIVE";
    case SizeTypeEnum_SizeType.FLUID:
      return "FLUID";
    case SizeTypeEnum_SizeType.AUDIO:
      return "AUDIO";
    case SizeTypeEnum_SizeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseSize(): Size {
  return { width: 0, height: 0, sizeType: 0 };
}

export const Size: MessageFns<Size> = {
  encode(message: Size, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.width !== 0) {
      writer.uint32(8).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(16).int32(message.height);
    }
    if (message.sizeType !== 0) {
      writer.uint32(24).int32(message.sizeType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Size {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSize();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.width = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.height = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.sizeType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Size {
    return {
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      sizeType: isSet(object.sizeType) ? sizeTypeEnum_SizeTypeFromJSON(object.sizeType) : 0,
    };
  },

  toJSON(message: Size): unknown {
    const obj: any = {};
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.sizeType !== 0) {
      obj.sizeType = sizeTypeEnum_SizeTypeToJSON(message.sizeType);
    }
    return obj;
  },

  create(base?: DeepPartial<Size>): Size {
    return Size.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Size>): Size {
    const message = createBaseSize();
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.sizeType = object.sizeType ?? 0;
    return message;
  },
};

function createBaseSizeTypeEnum(): SizeTypeEnum {
  return {};
}

export const SizeTypeEnum: MessageFns<SizeTypeEnum> = {
  encode(_: SizeTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SizeTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSizeTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SizeTypeEnum {
    return {};
  },

  toJSON(_: SizeTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SizeTypeEnum>): SizeTypeEnum {
    return SizeTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SizeTypeEnum>): SizeTypeEnum {
    const message = createBaseSizeTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
