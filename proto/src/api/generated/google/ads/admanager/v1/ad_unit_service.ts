// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/admanager/v1/ad_unit_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Duration } from "../../../protobuf/duration.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  AppliedAdsenseEnabledEnum_AppliedAdsenseEnabled,
  appliedAdsenseEnabledEnum_AppliedAdsenseEnabledFromJSON,
  appliedAdsenseEnabledEnum_AppliedAdsenseEnabledToJSON,
} from "./ad_unit_enums.js";
import { AdUnitSize } from "./ad_unit_size.js";
import { AppliedLabel } from "./applied_label.js";
import { FrequencyCap } from "./frequency_cap.js";

export const protobufPackage = "google.ads.admanager.v1";

/** The AdUnit resource. */
export interface AdUnit {
  /**
   * Identifier. The resource name of the AdUnit.
   * Format: `networks/{network_code}/adUnits/{ad_unit_id}`
   */
  name: string;
  /** Output only. AdUnit ID. */
  adUnitId: Long;
  /**
   * Required. Immutable. The AdUnit's parent. Every ad unit has a parent except
   * for the root ad unit, which is created by Google. Format:
   * "networks/{network_code}/adUnits/{ad_unit_id}"
   */
  parentAdUnit: string;
  /**
   * Output only. The path to this AdUnit in the ad unit hierarchy represented
   * as a list from the root to this ad unit's parent. For root ad units, this
   * list is empty.
   */
  parentPath: AdUnitParent[];
  /**
   * Required. The display name of the ad unit. Its maximum length is 255
   * characters.
   */
  displayName: string;
  /**
   * Immutable. A string used to uniquely identify the ad unit for the purposes
   * of serving the ad. This attribute is optional and can be set during ad unit
   * creation. If it is not provided, it will be assigned by Google based off of
   * the ad unit ID.
   */
  adUnitCode: string;
  /** Output only. The status of this ad unit.  It defaults to ACTIVE. */
  status: AdUnit_Status;
  /**
   * Non-empty default. The value to use for the HTML link's target attribute.
   * This value will be interpreted as TOP if left blank.
   */
  targetWindow: TargetWindowEnum_TargetWindow;
  /**
   * Optional. The resource names of Teams directly applied to this AdUnit.
   * Format: "networks/{network_code}/teams/{team_id}"
   */
  appliedTeams: string[];
  /**
   * Output only. The resource names of all Teams that this AdUnit is on as well
   * as those inherited from parent AdUnits. Format:
   * "networks/{network_code}/teams/{team_id}"
   */
  teams: string[];
  /**
   * Optional. A description of the ad unit. The maximum length is 65,535
   * characters.
   */
  description: string;
  /**
   * Optional. If this field is set to true, then the AdUnit will not be
   * implicitly targeted when its parent is. Traffickers must explicitly
   * target such an AdUnit or else no line items will serve to it. This
   * feature is only available for Ad Manager 360 accounts.
   */
  explicitlyTargeted: boolean;
  /** Output only. This field is set to true if the ad unit has any children. */
  hasChildren: boolean;
  /** Output only. The instant this AdUnit was last modified. */
  updateTime:
    | Date
    | undefined;
  /** Optional. The sizes that can be served inside this ad unit. */
  adUnitSizes: AdUnitSize[];
  /**
   * Optional. Determines what set top box video on demand channel this ad unit
   * corresponds to in an external set top box ad campaign system.
   */
  externalSetTopBoxChannelId: string;
  /**
   * Optional. The duration after which an Ad Unit will automatically refresh.
   * This is only valid for ad units in mobile apps. If not set, the ad unit
   * will not refresh.
   */
  refreshDelay:
    | Duration
    | undefined;
  /** Optional. The ID of the CTV application that this ad unit is within. */
  ctvApplicationId: Long;
  /** Optional. The set of labels applied directly to this ad unit. */
  appliedLabels: AppliedLabel[];
  /**
   * Output only. Contains the set of labels applied directly to the ad unit as
   * well as those inherited from the parent ad units. If a label has been
   * negated, only the negated label is returned. This field is readonly and is
   * assigned by Google.
   */
  effectiveAppliedLabels: AppliedLabel[];
  /**
   * Optional. The set of label frequency caps applied directly to this ad unit.
   * There is a limit of 10 label frequency caps per ad unit.
   */
  appliedLabelFrequencyCaps: LabelFrequencyCap[];
  /**
   * Output only. The label frequency caps applied directly to the ad unit as
   * well as those inherited from parent ad units.
   */
  effectiveLabelFrequencyCaps: LabelFrequencyCap[];
  /**
   * Optional. The smart size mode for this ad unit. This attribute is optional
   * and defaults to SmartSizeMode.NONE for fixed sizes.
   */
  smartSizeMode: SmartSizeModeEnum_SmartSizeMode;
  /**
   * Optional. The value of AdSense enabled directly applied to this ad unit.
   * This attribute is optional and if not specified this ad unit will inherit
   * the value of effectiveAdsenseEnabled from its ancestors.
   */
  appliedAdsenseEnabled: AppliedAdsenseEnabledEnum_AppliedAdsenseEnabled;
  /**
   * Output only. Specifies whether or not the AdUnit is enabled for serving ads
   * from the AdSense content network. This attribute defaults to the ad unit's
   * parent or ancestor's setting if one has been set. If no ancestor of the ad
   * unit has set appliedAdsenseEnabled, the attribute is defaulted to true.
   */
  effectiveAdsenseEnabled: boolean;
}

/** The status of an AdUnit. */
export enum AdUnit_Status {
  /** STATUS_UNSPECIFIED - Default value. This value is unused. */
  STATUS_UNSPECIFIED = 0,
  /** ACTIVE - The ad unit is active, available for targeting, and serving. */
  ACTIVE = 1,
  /** INACTIVE - The ad unit will be visible in the UI, but ignored by serving. */
  INACTIVE = 2,
  /** ARCHIVED - The ad unit will be hidden in the UI and ignored by serving. */
  ARCHIVED = 3,
  UNRECOGNIZED = -1,
}

export function adUnit_StatusFromJSON(object: any): AdUnit_Status {
  switch (object) {
    case 0:
    case "STATUS_UNSPECIFIED":
      return AdUnit_Status.STATUS_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return AdUnit_Status.ACTIVE;
    case 2:
    case "INACTIVE":
      return AdUnit_Status.INACTIVE;
    case 3:
    case "ARCHIVED":
      return AdUnit_Status.ARCHIVED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AdUnit_Status.UNRECOGNIZED;
  }
}

export function adUnit_StatusToJSON(object: AdUnit_Status): string {
  switch (object) {
    case AdUnit_Status.STATUS_UNSPECIFIED:
      return "STATUS_UNSPECIFIED";
    case AdUnit_Status.ACTIVE:
      return "ACTIVE";
    case AdUnit_Status.INACTIVE:
      return "INACTIVE";
    case AdUnit_Status.ARCHIVED:
      return "ARCHIVED";
    case AdUnit_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The summary of a parent AdUnit. */
export interface AdUnitParent {
  /**
   * Output only. The parent of the current AdUnit
   * Format: `networks/{network_code}/adUnits/{ad_unit_id}`
   */
  parentAdUnit: string;
  /** Output only. The display name of the parent AdUnit. */
  displayName: string;
  /**
   * Output only. A string used to uniquely identify the ad unit for the
   * purposes of serving the ad.
   */
  adUnitCode: string;
}

/**
 * Wrapper message for
 * [TargetWindow][google.ads.admanager.v1.TargetWindowEnum.TargetWindow].
 */
export interface TargetWindowEnum {
}

/**
 * Corresponds to an HTML link's target attribute.
 * See http://www.w3.org/TR/html401/present/frames.html#adef-target
 */
export enum TargetWindowEnum_TargetWindow {
  /** TARGET_WINDOW_UNSPECIFIED - Default value. This value is unused. */
  TARGET_WINDOW_UNSPECIFIED = 0,
  /** TOP - Specifies that the link should open in the full body of the page. */
  TOP = 1,
  /** BLANK - Specifies that the link should open in a new window. */
  BLANK = 2,
  UNRECOGNIZED = -1,
}

export function targetWindowEnum_TargetWindowFromJSON(object: any): TargetWindowEnum_TargetWindow {
  switch (object) {
    case 0:
    case "TARGET_WINDOW_UNSPECIFIED":
      return TargetWindowEnum_TargetWindow.TARGET_WINDOW_UNSPECIFIED;
    case 1:
    case "TOP":
      return TargetWindowEnum_TargetWindow.TOP;
    case 2:
    case "BLANK":
      return TargetWindowEnum_TargetWindow.BLANK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TargetWindowEnum_TargetWindow.UNRECOGNIZED;
  }
}

export function targetWindowEnum_TargetWindowToJSON(object: TargetWindowEnum_TargetWindow): string {
  switch (object) {
    case TargetWindowEnum_TargetWindow.TARGET_WINDOW_UNSPECIFIED:
      return "TARGET_WINDOW_UNSPECIFIED";
    case TargetWindowEnum_TargetWindow.TOP:
      return "TOP";
    case TargetWindowEnum_TargetWindow.BLANK:
      return "BLANK";
    case TargetWindowEnum_TargetWindow.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Frequency cap using a label. */
export interface LabelFrequencyCap {
  /**
   * The label to used for frequency capping.
   * Format: "networks/{network_code}/labels/{label_id}"
   */
  label: string;
  /** The frequency cap. */
  frequencyCap: FrequencyCap | undefined;
}

/**
 * Wrapper message for
 * [SmartSizeMode][google.ads.admanager.v1.SmartSizeModeEnum.SmartSizeMode].
 */
export interface SmartSizeModeEnum {
}

/**
 * The smart size mode for this ad unit. This attribute is optional and
 * defaults to SmartSizeMode.NONE for fixed sizes.
 */
export enum SmartSizeModeEnum_SmartSizeMode {
  /** SMART_SIZE_MODE_UNSPECIFIED - Default value. This value is unused. */
  SMART_SIZE_MODE_UNSPECIFIED = 0,
  /** NONE - Fixed size mode (default). */
  NONE = 1,
  /** SMART_BANNER - The height is fixed for the request, the width is a range. */
  SMART_BANNER = 2,
  /** DYNAMIC_SIZE - Height and width are ranges. */
  DYNAMIC_SIZE = 3,
  UNRECOGNIZED = -1,
}

export function smartSizeModeEnum_SmartSizeModeFromJSON(object: any): SmartSizeModeEnum_SmartSizeMode {
  switch (object) {
    case 0:
    case "SMART_SIZE_MODE_UNSPECIFIED":
      return SmartSizeModeEnum_SmartSizeMode.SMART_SIZE_MODE_UNSPECIFIED;
    case 1:
    case "NONE":
      return SmartSizeModeEnum_SmartSizeMode.NONE;
    case 2:
    case "SMART_BANNER":
      return SmartSizeModeEnum_SmartSizeMode.SMART_BANNER;
    case 3:
    case "DYNAMIC_SIZE":
      return SmartSizeModeEnum_SmartSizeMode.DYNAMIC_SIZE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SmartSizeModeEnum_SmartSizeMode.UNRECOGNIZED;
  }
}

export function smartSizeModeEnum_SmartSizeModeToJSON(object: SmartSizeModeEnum_SmartSizeMode): string {
  switch (object) {
    case SmartSizeModeEnum_SmartSizeMode.SMART_SIZE_MODE_UNSPECIFIED:
      return "SMART_SIZE_MODE_UNSPECIFIED";
    case SmartSizeModeEnum_SmartSizeMode.NONE:
      return "NONE";
    case SmartSizeModeEnum_SmartSizeMode.SMART_BANNER:
      return "SMART_BANNER";
    case SmartSizeModeEnum_SmartSizeMode.DYNAMIC_SIZE:
      return "DYNAMIC_SIZE";
    case SmartSizeModeEnum_SmartSizeMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request object for GetAdUnit method. */
export interface GetAdUnitRequest {
  /**
   * Required. The resource name of the AdUnit.
   * Format: `networks/{network_code}/adUnits/{ad_unit_id}`
   */
  name: string;
}

/** Request object for ListAdUnits method. */
export interface ListAdUnitsRequest {
  /**
   * Required. The parent, which owns this collection of AdUnits.
   * Format: `networks/{network_code}`
   */
  parent: string;
  /**
   * Optional. The maximum number of AdUnits to return. The service may return
   * fewer than this value. If unspecified, at most 50 ad units will be
   * returned. The maximum value is 1000; values above 1000 will be coerced to
   * 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListAdUnits` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListAdUnits` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Optional. Expression to filter the response.
   * See syntax details at
   * https://developers.google.com/ad-manager/api/beta/filters
   */
  filter: string;
  /**
   * Optional. Expression to specify sorting order.
   * See syntax details at
   * https://developers.google.com/ad-manager/api/beta/filters#order
   */
  orderBy: string;
  /** Optional. Number of individual resources to skip while paginating. */
  skip: number;
}

/** Response object for ListAdUnitsRequest containing matching AdUnit resources. */
export interface ListAdUnitsResponse {
  /** The AdUnit from the specified network. */
  adUnits: AdUnit[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /**
   * Total number of AdUnits.
   * If a filter was included in the request, this reflects the total number
   * after the filtering is applied.
   *
   * `total_size` will not be calculated in the response unless it has been
   * included in a response field mask. The response field mask can be provided
   * to the method by using the URL parameter `$fields` or `fields`, or by using
   * the HTTP/gRPC header `X-Goog-FieldMask`.
   *
   * For more information, see
   * https://developers.google.com/ad-manager/api/beta/field-masks
   */
  totalSize: number;
}

function createBaseAdUnit(): AdUnit {
  return {
    name: "",
    adUnitId: Long.ZERO,
    parentAdUnit: "",
    parentPath: [],
    displayName: "",
    adUnitCode: "",
    status: 0,
    targetWindow: 0,
    appliedTeams: [],
    teams: [],
    description: "",
    explicitlyTargeted: false,
    hasChildren: false,
    updateTime: undefined,
    adUnitSizes: [],
    externalSetTopBoxChannelId: "",
    refreshDelay: undefined,
    ctvApplicationId: Long.ZERO,
    appliedLabels: [],
    effectiveAppliedLabels: [],
    appliedLabelFrequencyCaps: [],
    effectiveLabelFrequencyCaps: [],
    smartSizeMode: 0,
    appliedAdsenseEnabled: 0,
    effectiveAdsenseEnabled: false,
  };
}

export const AdUnit: MessageFns<AdUnit> = {
  encode(message: AdUnit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.adUnitId.equals(Long.ZERO)) {
      writer.uint32(120).int64(message.adUnitId.toString());
    }
    if (message.parentAdUnit !== "") {
      writer.uint32(82).string(message.parentAdUnit);
    }
    for (const v of message.parentPath) {
      AdUnitParent.encode(v!, writer.uint32(90).fork()).join();
    }
    if (message.displayName !== "") {
      writer.uint32(74).string(message.displayName);
    }
    if (message.adUnitCode !== "") {
      writer.uint32(18).string(message.adUnitCode);
    }
    if (message.status !== 0) {
      writer.uint32(104).int32(message.status);
    }
    if (message.targetWindow !== 0) {
      writer.uint32(96).int32(message.targetWindow);
    }
    for (const v of message.appliedTeams) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.teams) {
      writer.uint32(34).string(v!);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.explicitlyTargeted !== false) {
      writer.uint32(48).bool(message.explicitlyTargeted);
    }
    if (message.hasChildren !== false) {
      writer.uint32(56).bool(message.hasChildren);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(66).fork()).join();
    }
    for (const v of message.adUnitSizes) {
      AdUnitSize.encode(v!, writer.uint32(114).fork()).join();
    }
    if (message.externalSetTopBoxChannelId !== "") {
      writer.uint32(138).string(message.externalSetTopBoxChannelId);
    }
    if (message.refreshDelay !== undefined) {
      Duration.encode(message.refreshDelay, writer.uint32(154).fork()).join();
    }
    if (!message.ctvApplicationId.equals(Long.ZERO)) {
      writer.uint32(160).int64(message.ctvApplicationId.toString());
    }
    for (const v of message.appliedLabels) {
      AppliedLabel.encode(v!, writer.uint32(170).fork()).join();
    }
    for (const v of message.effectiveAppliedLabels) {
      AppliedLabel.encode(v!, writer.uint32(178).fork()).join();
    }
    for (const v of message.appliedLabelFrequencyCaps) {
      LabelFrequencyCap.encode(v!, writer.uint32(186).fork()).join();
    }
    for (const v of message.effectiveLabelFrequencyCaps) {
      LabelFrequencyCap.encode(v!, writer.uint32(194).fork()).join();
    }
    if (message.smartSizeMode !== 0) {
      writer.uint32(200).int32(message.smartSizeMode);
    }
    if (message.appliedAdsenseEnabled !== 0) {
      writer.uint32(208).int32(message.appliedAdsenseEnabled);
    }
    if (message.effectiveAdsenseEnabled !== false) {
      writer.uint32(216).bool(message.effectiveAdsenseEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdUnit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdUnit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.adUnitId = Long.fromString(reader.int64().toString());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.parentAdUnit = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.parentPath.push(AdUnitParent.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.adUnitCode = reader.string();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.targetWindow = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.appliedTeams.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.teams.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.explicitlyTargeted = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.hasChildren = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.adUnitSizes.push(AdUnitSize.decode(reader, reader.uint32()));
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.externalSetTopBoxChannelId = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.refreshDelay = Duration.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.ctvApplicationId = Long.fromString(reader.int64().toString());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.appliedLabels.push(AppliedLabel.decode(reader, reader.uint32()));
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.effectiveAppliedLabels.push(AppliedLabel.decode(reader, reader.uint32()));
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.appliedLabelFrequencyCaps.push(LabelFrequencyCap.decode(reader, reader.uint32()));
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.effectiveLabelFrequencyCaps.push(LabelFrequencyCap.decode(reader, reader.uint32()));
          continue;
        case 25:
          if (tag !== 200) {
            break;
          }

          message.smartSizeMode = reader.int32() as any;
          continue;
        case 26:
          if (tag !== 208) {
            break;
          }

          message.appliedAdsenseEnabled = reader.int32() as any;
          continue;
        case 27:
          if (tag !== 216) {
            break;
          }

          message.effectiveAdsenseEnabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdUnit {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      adUnitId: isSet(object.adUnitId) ? Long.fromValue(object.adUnitId) : Long.ZERO,
      parentAdUnit: isSet(object.parentAdUnit) ? globalThis.String(object.parentAdUnit) : "",
      parentPath: globalThis.Array.isArray(object?.parentPath)
        ? object.parentPath.map((e: any) => AdUnitParent.fromJSON(e))
        : [],
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      adUnitCode: isSet(object.adUnitCode) ? globalThis.String(object.adUnitCode) : "",
      status: isSet(object.status) ? adUnit_StatusFromJSON(object.status) : 0,
      targetWindow: isSet(object.targetWindow) ? targetWindowEnum_TargetWindowFromJSON(object.targetWindow) : 0,
      appliedTeams: globalThis.Array.isArray(object?.appliedTeams)
        ? object.appliedTeams.map((e: any) => globalThis.String(e))
        : [],
      teams: globalThis.Array.isArray(object?.teams) ? object.teams.map((e: any) => globalThis.String(e)) : [],
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      explicitlyTargeted: isSet(object.explicitlyTargeted) ? globalThis.Boolean(object.explicitlyTargeted) : false,
      hasChildren: isSet(object.hasChildren) ? globalThis.Boolean(object.hasChildren) : false,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      adUnitSizes: globalThis.Array.isArray(object?.adUnitSizes)
        ? object.adUnitSizes.map((e: any) => AdUnitSize.fromJSON(e))
        : [],
      externalSetTopBoxChannelId: isSet(object.externalSetTopBoxChannelId)
        ? globalThis.String(object.externalSetTopBoxChannelId)
        : "",
      refreshDelay: isSet(object.refreshDelay) ? Duration.fromJSON(object.refreshDelay) : undefined,
      ctvApplicationId: isSet(object.ctvApplicationId) ? Long.fromValue(object.ctvApplicationId) : Long.ZERO,
      appliedLabels: globalThis.Array.isArray(object?.appliedLabels)
        ? object.appliedLabels.map((e: any) => AppliedLabel.fromJSON(e))
        : [],
      effectiveAppliedLabels: globalThis.Array.isArray(object?.effectiveAppliedLabels)
        ? object.effectiveAppliedLabels.map((e: any) => AppliedLabel.fromJSON(e))
        : [],
      appliedLabelFrequencyCaps: globalThis.Array.isArray(object?.appliedLabelFrequencyCaps)
        ? object.appliedLabelFrequencyCaps.map((e: any) => LabelFrequencyCap.fromJSON(e))
        : [],
      effectiveLabelFrequencyCaps: globalThis.Array.isArray(object?.effectiveLabelFrequencyCaps)
        ? object.effectiveLabelFrequencyCaps.map((e: any) => LabelFrequencyCap.fromJSON(e))
        : [],
      smartSizeMode: isSet(object.smartSizeMode) ? smartSizeModeEnum_SmartSizeModeFromJSON(object.smartSizeMode) : 0,
      appliedAdsenseEnabled: isSet(object.appliedAdsenseEnabled)
        ? appliedAdsenseEnabledEnum_AppliedAdsenseEnabledFromJSON(object.appliedAdsenseEnabled)
        : 0,
      effectiveAdsenseEnabled: isSet(object.effectiveAdsenseEnabled)
        ? globalThis.Boolean(object.effectiveAdsenseEnabled)
        : false,
    };
  },

  toJSON(message: AdUnit): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.adUnitId.equals(Long.ZERO)) {
      obj.adUnitId = (message.adUnitId || Long.ZERO).toString();
    }
    if (message.parentAdUnit !== "") {
      obj.parentAdUnit = message.parentAdUnit;
    }
    if (message.parentPath?.length) {
      obj.parentPath = message.parentPath.map((e) => AdUnitParent.toJSON(e));
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.adUnitCode !== "") {
      obj.adUnitCode = message.adUnitCode;
    }
    if (message.status !== 0) {
      obj.status = adUnit_StatusToJSON(message.status);
    }
    if (message.targetWindow !== 0) {
      obj.targetWindow = targetWindowEnum_TargetWindowToJSON(message.targetWindow);
    }
    if (message.appliedTeams?.length) {
      obj.appliedTeams = message.appliedTeams;
    }
    if (message.teams?.length) {
      obj.teams = message.teams;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.explicitlyTargeted !== false) {
      obj.explicitlyTargeted = message.explicitlyTargeted;
    }
    if (message.hasChildren !== false) {
      obj.hasChildren = message.hasChildren;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.adUnitSizes?.length) {
      obj.adUnitSizes = message.adUnitSizes.map((e) => AdUnitSize.toJSON(e));
    }
    if (message.externalSetTopBoxChannelId !== "") {
      obj.externalSetTopBoxChannelId = message.externalSetTopBoxChannelId;
    }
    if (message.refreshDelay !== undefined) {
      obj.refreshDelay = Duration.toJSON(message.refreshDelay);
    }
    if (!message.ctvApplicationId.equals(Long.ZERO)) {
      obj.ctvApplicationId = (message.ctvApplicationId || Long.ZERO).toString();
    }
    if (message.appliedLabels?.length) {
      obj.appliedLabels = message.appliedLabels.map((e) => AppliedLabel.toJSON(e));
    }
    if (message.effectiveAppliedLabels?.length) {
      obj.effectiveAppliedLabels = message.effectiveAppliedLabels.map((e) => AppliedLabel.toJSON(e));
    }
    if (message.appliedLabelFrequencyCaps?.length) {
      obj.appliedLabelFrequencyCaps = message.appliedLabelFrequencyCaps.map((e) => LabelFrequencyCap.toJSON(e));
    }
    if (message.effectiveLabelFrequencyCaps?.length) {
      obj.effectiveLabelFrequencyCaps = message.effectiveLabelFrequencyCaps.map((e) => LabelFrequencyCap.toJSON(e));
    }
    if (message.smartSizeMode !== 0) {
      obj.smartSizeMode = smartSizeModeEnum_SmartSizeModeToJSON(message.smartSizeMode);
    }
    if (message.appliedAdsenseEnabled !== 0) {
      obj.appliedAdsenseEnabled = appliedAdsenseEnabledEnum_AppliedAdsenseEnabledToJSON(message.appliedAdsenseEnabled);
    }
    if (message.effectiveAdsenseEnabled !== false) {
      obj.effectiveAdsenseEnabled = message.effectiveAdsenseEnabled;
    }
    return obj;
  },

  create(base?: DeepPartial<AdUnit>): AdUnit {
    return AdUnit.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdUnit>): AdUnit {
    const message = createBaseAdUnit();
    message.name = object.name ?? "";
    message.adUnitId = (object.adUnitId !== undefined && object.adUnitId !== null)
      ? Long.fromValue(object.adUnitId)
      : Long.ZERO;
    message.parentAdUnit = object.parentAdUnit ?? "";
    message.parentPath = object.parentPath?.map((e) => AdUnitParent.fromPartial(e)) || [];
    message.displayName = object.displayName ?? "";
    message.adUnitCode = object.adUnitCode ?? "";
    message.status = object.status ?? 0;
    message.targetWindow = object.targetWindow ?? 0;
    message.appliedTeams = object.appliedTeams?.map((e) => e) || [];
    message.teams = object.teams?.map((e) => e) || [];
    message.description = object.description ?? "";
    message.explicitlyTargeted = object.explicitlyTargeted ?? false;
    message.hasChildren = object.hasChildren ?? false;
    message.updateTime = object.updateTime ?? undefined;
    message.adUnitSizes = object.adUnitSizes?.map((e) => AdUnitSize.fromPartial(e)) || [];
    message.externalSetTopBoxChannelId = object.externalSetTopBoxChannelId ?? "";
    message.refreshDelay = (object.refreshDelay !== undefined && object.refreshDelay !== null)
      ? Duration.fromPartial(object.refreshDelay)
      : undefined;
    message.ctvApplicationId = (object.ctvApplicationId !== undefined && object.ctvApplicationId !== null)
      ? Long.fromValue(object.ctvApplicationId)
      : Long.ZERO;
    message.appliedLabels = object.appliedLabels?.map((e) => AppliedLabel.fromPartial(e)) || [];
    message.effectiveAppliedLabels = object.effectiveAppliedLabels?.map((e) => AppliedLabel.fromPartial(e)) || [];
    message.appliedLabelFrequencyCaps =
      object.appliedLabelFrequencyCaps?.map((e) => LabelFrequencyCap.fromPartial(e)) || [];
    message.effectiveLabelFrequencyCaps =
      object.effectiveLabelFrequencyCaps?.map((e) => LabelFrequencyCap.fromPartial(e)) || [];
    message.smartSizeMode = object.smartSizeMode ?? 0;
    message.appliedAdsenseEnabled = object.appliedAdsenseEnabled ?? 0;
    message.effectiveAdsenseEnabled = object.effectiveAdsenseEnabled ?? false;
    return message;
  },
};

function createBaseAdUnitParent(): AdUnitParent {
  return { parentAdUnit: "", displayName: "", adUnitCode: "" };
}

export const AdUnitParent: MessageFns<AdUnitParent> = {
  encode(message: AdUnitParent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parentAdUnit !== "") {
      writer.uint32(10).string(message.parentAdUnit);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.adUnitCode !== "") {
      writer.uint32(26).string(message.adUnitCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdUnitParent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdUnitParent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parentAdUnit = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.adUnitCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdUnitParent {
    return {
      parentAdUnit: isSet(object.parentAdUnit) ? globalThis.String(object.parentAdUnit) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      adUnitCode: isSet(object.adUnitCode) ? globalThis.String(object.adUnitCode) : "",
    };
  },

  toJSON(message: AdUnitParent): unknown {
    const obj: any = {};
    if (message.parentAdUnit !== "") {
      obj.parentAdUnit = message.parentAdUnit;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.adUnitCode !== "") {
      obj.adUnitCode = message.adUnitCode;
    }
    return obj;
  },

  create(base?: DeepPartial<AdUnitParent>): AdUnitParent {
    return AdUnitParent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdUnitParent>): AdUnitParent {
    const message = createBaseAdUnitParent();
    message.parentAdUnit = object.parentAdUnit ?? "";
    message.displayName = object.displayName ?? "";
    message.adUnitCode = object.adUnitCode ?? "";
    return message;
  },
};

function createBaseTargetWindowEnum(): TargetWindowEnum {
  return {};
}

export const TargetWindowEnum: MessageFns<TargetWindowEnum> = {
  encode(_: TargetWindowEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetWindowEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetWindowEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TargetWindowEnum {
    return {};
  },

  toJSON(_: TargetWindowEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<TargetWindowEnum>): TargetWindowEnum {
    return TargetWindowEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<TargetWindowEnum>): TargetWindowEnum {
    const message = createBaseTargetWindowEnum();
    return message;
  },
};

function createBaseLabelFrequencyCap(): LabelFrequencyCap {
  return { label: "", frequencyCap: undefined };
}

export const LabelFrequencyCap: MessageFns<LabelFrequencyCap> = {
  encode(message: LabelFrequencyCap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.label !== "") {
      writer.uint32(10).string(message.label);
    }
    if (message.frequencyCap !== undefined) {
      FrequencyCap.encode(message.frequencyCap, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LabelFrequencyCap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLabelFrequencyCap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.label = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.frequencyCap = FrequencyCap.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LabelFrequencyCap {
    return {
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      frequencyCap: isSet(object.frequencyCap) ? FrequencyCap.fromJSON(object.frequencyCap) : undefined,
    };
  },

  toJSON(message: LabelFrequencyCap): unknown {
    const obj: any = {};
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.frequencyCap !== undefined) {
      obj.frequencyCap = FrequencyCap.toJSON(message.frequencyCap);
    }
    return obj;
  },

  create(base?: DeepPartial<LabelFrequencyCap>): LabelFrequencyCap {
    return LabelFrequencyCap.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LabelFrequencyCap>): LabelFrequencyCap {
    const message = createBaseLabelFrequencyCap();
    message.label = object.label ?? "";
    message.frequencyCap = (object.frequencyCap !== undefined && object.frequencyCap !== null)
      ? FrequencyCap.fromPartial(object.frequencyCap)
      : undefined;
    return message;
  },
};

function createBaseSmartSizeModeEnum(): SmartSizeModeEnum {
  return {};
}

export const SmartSizeModeEnum: MessageFns<SmartSizeModeEnum> = {
  encode(_: SmartSizeModeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmartSizeModeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmartSizeModeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SmartSizeModeEnum {
    return {};
  },

  toJSON(_: SmartSizeModeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SmartSizeModeEnum>): SmartSizeModeEnum {
    return SmartSizeModeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SmartSizeModeEnum>): SmartSizeModeEnum {
    const message = createBaseSmartSizeModeEnum();
    return message;
  },
};

function createBaseGetAdUnitRequest(): GetAdUnitRequest {
  return { name: "" };
}

export const GetAdUnitRequest: MessageFns<GetAdUnitRequest> = {
  encode(message: GetAdUnitRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAdUnitRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAdUnitRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAdUnitRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAdUnitRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAdUnitRequest>): GetAdUnitRequest {
    return GetAdUnitRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAdUnitRequest>): GetAdUnitRequest {
    const message = createBaseGetAdUnitRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAdUnitsRequest(): ListAdUnitsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "", skip: 0 };
}

export const ListAdUnitsRequest: MessageFns<ListAdUnitsRequest> = {
  encode(message: ListAdUnitsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    if (message.skip !== 0) {
      writer.uint32(48).int32(message.skip);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAdUnitsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAdUnitsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.skip = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAdUnitsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      skip: isSet(object.skip) ? globalThis.Number(object.skip) : 0,
    };
  },

  toJSON(message: ListAdUnitsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.skip !== 0) {
      obj.skip = Math.round(message.skip);
    }
    return obj;
  },

  create(base?: DeepPartial<ListAdUnitsRequest>): ListAdUnitsRequest {
    return ListAdUnitsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAdUnitsRequest>): ListAdUnitsRequest {
    const message = createBaseListAdUnitsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    message.skip = object.skip ?? 0;
    return message;
  },
};

function createBaseListAdUnitsResponse(): ListAdUnitsResponse {
  return { adUnits: [], nextPageToken: "", totalSize: 0 };
}

export const ListAdUnitsResponse: MessageFns<ListAdUnitsResponse> = {
  encode(message: ListAdUnitsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.adUnits) {
      AdUnit.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAdUnitsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAdUnitsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.adUnits.push(AdUnit.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAdUnitsResponse {
    return {
      adUnits: globalThis.Array.isArray(object?.adUnits) ? object.adUnits.map((e: any) => AdUnit.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListAdUnitsResponse): unknown {
    const obj: any = {};
    if (message.adUnits?.length) {
      obj.adUnits = message.adUnits.map((e) => AdUnit.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListAdUnitsResponse>): ListAdUnitsResponse {
    return ListAdUnitsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAdUnitsResponse>): ListAdUnitsResponse {
    const message = createBaseListAdUnitsResponse();
    message.adUnits = object.adUnits?.map((e) => AdUnit.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

/** Provides methods for handling AdUnit objects. */
export type AdUnitServiceDefinition = typeof AdUnitServiceDefinition;
export const AdUnitServiceDefinition = {
  name: "AdUnitService",
  fullName: "google.ads.admanager.v1.AdUnitService",
  methods: {
    /** API to retrieve an AdUnit object. */
    getAdUnit: {
      name: "GetAdUnit",
      requestType: GetAdUnitRequest,
      requestStream: false,
      responseType: AdUnit,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              33,
              18,
              31,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              115,
              47,
              42,
              47,
              97,
              100,
              85,
              110,
              105,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** API to retrieve a list of AdUnit objects. */
    listAdUnits: {
      name: "ListAdUnits",
      requestType: ListAdUnitsRequest,
      requestStream: false,
      responseType: ListAdUnitsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              33,
              18,
              31,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              115,
              47,
              42,
              125,
              47,
              97,
              100,
              85,
              110,
              105,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AdUnitServiceImplementation<CallContextExt = {}> {
  /** API to retrieve an AdUnit object. */
  getAdUnit(request: GetAdUnitRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AdUnit>>;
  /** API to retrieve a list of AdUnit objects. */
  listAdUnits(
    request: ListAdUnitsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAdUnitsResponse>>;
}

export interface AdUnitServiceClient<CallOptionsExt = {}> {
  /** API to retrieve an AdUnit object. */
  getAdUnit(request: DeepPartial<GetAdUnitRequest>, options?: CallOptions & CallOptionsExt): Promise<AdUnit>;
  /** API to retrieve a list of AdUnit objects. */
  listAdUnits(
    request: DeepPartial<ListAdUnitsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAdUnitsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
