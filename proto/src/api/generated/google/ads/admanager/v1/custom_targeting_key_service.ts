// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/admanager/v1/custom_targeting_key_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  CustomTargetingKeyReportableTypeEnum_CustomTargetingKeyReportableType,
  customTargetingKeyReportableTypeEnum_CustomTargetingKeyReportableTypeFromJSON,
  customTargetingKeyReportableTypeEnum_CustomTargetingKeyReportableTypeToJSON,
  CustomTargetingKeyStatusEnum_CustomTargetingKeyStatus,
  customTargetingKeyStatusEnum_CustomTargetingKeyStatusFromJSON,
  customTargetingKeyStatusEnum_CustomTargetingKeyStatusToJSON,
  CustomTargetingKeyTypeEnum_CustomTargetingKeyType,
  customTargetingKeyTypeEnum_CustomTargetingKeyTypeFromJSON,
  customTargetingKeyTypeEnum_CustomTargetingKeyTypeToJSON,
} from "./custom_targeting_key_enums.js";

export const protobufPackage = "google.ads.admanager.v1";

/** The `CustomTargetingKey` resource. */
export interface CustomTargetingKey {
  /**
   * Identifier. The resource name of the `CustomTargetingKey`.
   * Format:
   * `networks/{network_code}/customTargetingKeys/{custom_targeting_key_id}`
   */
  name: string;
  /** Output only. `CustomTargetingKey` ID. */
  customTargetingKeyId: Long;
  /**
   * Immutable. Name of the key. Keys can contain up to 10 characters each. You
   * can use alphanumeric characters and symbols other than the following:
   * ", ', =, !, +, #, *, ~, ;, ^, (, ), <, >, [, ], the white space character.
   */
  adTagName: string;
  /** Optional. Descriptive name for the `CustomTargetingKey`. */
  displayName: string;
  /**
   * Required. Indicates whether users will select from predefined values or
   * create new targeting values, while specifying targeting criteria for a line
   * item.
   */
  type: CustomTargetingKeyTypeEnum_CustomTargetingKeyType;
  /** Output only. Status of the `CustomTargetingKey`. */
  status: CustomTargetingKeyStatusEnum_CustomTargetingKeyStatus;
  /** Required. Reportable state of the `CustomTargetingKey`. */
  reportableType: CustomTargetingKeyReportableTypeEnum_CustomTargetingKeyReportableType;
}

/** Request object for `GetCustomTargetingKey` method. */
export interface GetCustomTargetingKeyRequest {
  /**
   * Required. The resource name of the CustomTargetingKey.
   * Format:
   * `networks/{network_code}/customTargetingKeys/{custom_targeting_key_id}`
   */
  name: string;
}

/** Request object for `ListCustomTargetingKeys` method. */
export interface ListCustomTargetingKeysRequest {
  /**
   * Required. The parent, which owns this collection of CustomTargetingKeys.
   * Format: `networks/{network_code}`
   */
  parent: string;
  /**
   * Optional. The maximum number of `CustomTargetingKeys` to return. The
   * service may return fewer than this value. If unspecified, at most 50
   * `CustomTargetingKeys` will be returned. The maximum value is 1000; values
   * above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListCustomTargetingKeys`
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListCustomTargetingKeys`
   * must match the call that provided the page token.
   */
  pageToken: string;
  /**
   * Optional. Expression to filter the response.
   * See syntax details at
   * https://developers.google.com/ad-manager/api/beta/filters
   */
  filter: string;
  /**
   * Optional. Expression to specify sorting order.
   * See syntax details at
   * https://developers.google.com/ad-manager/api/beta/filters#order
   */
  orderBy: string;
  /** Optional. Number of individual resources to skip while paginating. */
  skip: number;
}

/**
 * Response object for `ListCustomTargetingKeysRequest` containing matching
 * `CustomTargetingKey` objects.
 */
export interface ListCustomTargetingKeysResponse {
  /** The `CustomTargetingKey` objects from the specified network. */
  customTargetingKeys: CustomTargetingKey[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /**
   * Total number of `CustomTargetingKey` objects.
   * If a filter was included in the request, this reflects the total number
   * after the filtering is applied.
   *
   * `total_size` will not be calculated in the response unless it has been
   * included in a response field mask. The response field mask can be provided
   * to the method by using the URL parameter `$fields` or `fields`, or by using
   * the HTTP/gRPC header `X-Goog-FieldMask`.
   *
   * For more information, see
   * https://developers.google.com/ad-manager/api/beta/field-masks
   */
  totalSize: number;
}

function createBaseCustomTargetingKey(): CustomTargetingKey {
  return {
    name: "",
    customTargetingKeyId: Long.ZERO,
    adTagName: "",
    displayName: "",
    type: 0,
    status: 0,
    reportableType: 0,
  };
}

export const CustomTargetingKey: MessageFns<CustomTargetingKey> = {
  encode(message: CustomTargetingKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.customTargetingKeyId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.customTargetingKeyId.toString());
    }
    if (message.adTagName !== "") {
      writer.uint32(26).string(message.adTagName);
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    if (message.type !== 0) {
      writer.uint32(40).int32(message.type);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    if (message.reportableType !== 0) {
      writer.uint32(56).int32(message.reportableType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomTargetingKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomTargetingKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.customTargetingKeyId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.adTagName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.reportableType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomTargetingKey {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      customTargetingKeyId: isSet(object.customTargetingKeyId)
        ? Long.fromValue(object.customTargetingKeyId)
        : Long.ZERO,
      adTagName: isSet(object.adTagName) ? globalThis.String(object.adTagName) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      type: isSet(object.type) ? customTargetingKeyTypeEnum_CustomTargetingKeyTypeFromJSON(object.type) : 0,
      status: isSet(object.status) ? customTargetingKeyStatusEnum_CustomTargetingKeyStatusFromJSON(object.status) : 0,
      reportableType: isSet(object.reportableType)
        ? customTargetingKeyReportableTypeEnum_CustomTargetingKeyReportableTypeFromJSON(object.reportableType)
        : 0,
    };
  },

  toJSON(message: CustomTargetingKey): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.customTargetingKeyId.equals(Long.ZERO)) {
      obj.customTargetingKeyId = (message.customTargetingKeyId || Long.ZERO).toString();
    }
    if (message.adTagName !== "") {
      obj.adTagName = message.adTagName;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.type !== 0) {
      obj.type = customTargetingKeyTypeEnum_CustomTargetingKeyTypeToJSON(message.type);
    }
    if (message.status !== 0) {
      obj.status = customTargetingKeyStatusEnum_CustomTargetingKeyStatusToJSON(message.status);
    }
    if (message.reportableType !== 0) {
      obj.reportableType = customTargetingKeyReportableTypeEnum_CustomTargetingKeyReportableTypeToJSON(
        message.reportableType,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<CustomTargetingKey>): CustomTargetingKey {
    return CustomTargetingKey.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomTargetingKey>): CustomTargetingKey {
    const message = createBaseCustomTargetingKey();
    message.name = object.name ?? "";
    message.customTargetingKeyId = (object.customTargetingKeyId !== undefined && object.customTargetingKeyId !== null)
      ? Long.fromValue(object.customTargetingKeyId)
      : Long.ZERO;
    message.adTagName = object.adTagName ?? "";
    message.displayName = object.displayName ?? "";
    message.type = object.type ?? 0;
    message.status = object.status ?? 0;
    message.reportableType = object.reportableType ?? 0;
    return message;
  },
};

function createBaseGetCustomTargetingKeyRequest(): GetCustomTargetingKeyRequest {
  return { name: "" };
}

export const GetCustomTargetingKeyRequest: MessageFns<GetCustomTargetingKeyRequest> = {
  encode(message: GetCustomTargetingKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomTargetingKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomTargetingKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomTargetingKeyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCustomTargetingKeyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomTargetingKeyRequest>): GetCustomTargetingKeyRequest {
    return GetCustomTargetingKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomTargetingKeyRequest>): GetCustomTargetingKeyRequest {
    const message = createBaseGetCustomTargetingKeyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListCustomTargetingKeysRequest(): ListCustomTargetingKeysRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "", skip: 0 };
}

export const ListCustomTargetingKeysRequest: MessageFns<ListCustomTargetingKeysRequest> = {
  encode(message: ListCustomTargetingKeysRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    if (message.skip !== 0) {
      writer.uint32(48).int32(message.skip);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomTargetingKeysRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomTargetingKeysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.skip = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomTargetingKeysRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      skip: isSet(object.skip) ? globalThis.Number(object.skip) : 0,
    };
  },

  toJSON(message: ListCustomTargetingKeysRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.skip !== 0) {
      obj.skip = Math.round(message.skip);
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomTargetingKeysRequest>): ListCustomTargetingKeysRequest {
    return ListCustomTargetingKeysRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomTargetingKeysRequest>): ListCustomTargetingKeysRequest {
    const message = createBaseListCustomTargetingKeysRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    message.skip = object.skip ?? 0;
    return message;
  },
};

function createBaseListCustomTargetingKeysResponse(): ListCustomTargetingKeysResponse {
  return { customTargetingKeys: [], nextPageToken: "", totalSize: 0 };
}

export const ListCustomTargetingKeysResponse: MessageFns<ListCustomTargetingKeysResponse> = {
  encode(message: ListCustomTargetingKeysResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.customTargetingKeys) {
      CustomTargetingKey.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomTargetingKeysResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomTargetingKeysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customTargetingKeys.push(CustomTargetingKey.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomTargetingKeysResponse {
    return {
      customTargetingKeys: globalThis.Array.isArray(object?.customTargetingKeys)
        ? object.customTargetingKeys.map((e: any) => CustomTargetingKey.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListCustomTargetingKeysResponse): unknown {
    const obj: any = {};
    if (message.customTargetingKeys?.length) {
      obj.customTargetingKeys = message.customTargetingKeys.map((e) => CustomTargetingKey.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomTargetingKeysResponse>): ListCustomTargetingKeysResponse {
    return ListCustomTargetingKeysResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomTargetingKeysResponse>): ListCustomTargetingKeysResponse {
    const message = createBaseListCustomTargetingKeysResponse();
    message.customTargetingKeys = object.customTargetingKeys?.map((e) => CustomTargetingKey.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

/** Provides methods for handling `CustomTargetingKey` objects. */
export type CustomTargetingKeyServiceDefinition = typeof CustomTargetingKeyServiceDefinition;
export const CustomTargetingKeyServiceDefinition = {
  name: "CustomTargetingKeyService",
  fullName: "google.ads.admanager.v1.CustomTargetingKeyService",
  methods: {
    /** API to retrieve a `CustomTargetingKey` object. */
    getCustomTargetingKey: {
      name: "GetCustomTargetingKey",
      requestType: GetCustomTargetingKeyRequest,
      requestStream: false,
      responseType: CustomTargetingKey,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              84,
              97,
              114,
              103,
              101,
              116,
              105,
              110,
              103,
              75,
              101,
              121,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** API to retrieve a list of `CustomTargetingKey` objects. */
    listCustomTargetingKeys: {
      name: "ListCustomTargetingKeys",
      requestType: ListCustomTargetingKeysRequest,
      requestStream: false,
      responseType: ListCustomTargetingKeysResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              84,
              97,
              114,
              103,
              101,
              116,
              105,
              110,
              103,
              75,
              101,
              121,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CustomTargetingKeyServiceImplementation<CallContextExt = {}> {
  /** API to retrieve a `CustomTargetingKey` object. */
  getCustomTargetingKey(
    request: GetCustomTargetingKeyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomTargetingKey>>;
  /** API to retrieve a list of `CustomTargetingKey` objects. */
  listCustomTargetingKeys(
    request: ListCustomTargetingKeysRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCustomTargetingKeysResponse>>;
}

export interface CustomTargetingKeyServiceClient<CallOptionsExt = {}> {
  /** API to retrieve a `CustomTargetingKey` object. */
  getCustomTargetingKey(
    request: DeepPartial<GetCustomTargetingKeyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomTargetingKey>;
  /** API to retrieve a list of `CustomTargetingKey` objects. */
  listCustomTargetingKeys(
    request: DeepPartial<ListCustomTargetingKeysRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCustomTargetingKeysResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
