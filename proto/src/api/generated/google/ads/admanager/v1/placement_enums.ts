// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/admanager/v1/placement_enums.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.admanager.v1";

/**
 * Wrapper message for
 * [PlacementStatus][google.ads.admanager.v1.PlacementStatusEnum.PlacementStatus]
 */
export interface PlacementStatusEnum {
}

/** Status of the placement. */
export enum PlacementStatusEnum_PlacementStatus {
  /** PLACEMENT_STATUS_UNSPECIFIED - Not specified value. */
  PLACEMENT_STATUS_UNSPECIFIED = 0,
  /** ACTIVE - Stats are collected, user-visible. */
  ACTIVE = 1,
  /** INACTIVE - No stats collected, not user-visible. */
  INACTIVE = 2,
  /** ARCHIVED - No stats collected, user-visible. */
  ARCHIVED = 3,
  UNRECOGNIZED = -1,
}

export function placementStatusEnum_PlacementStatusFromJSON(object: any): PlacementStatusEnum_PlacementStatus {
  switch (object) {
    case 0:
    case "PLACEMENT_STATUS_UNSPECIFIED":
      return PlacementStatusEnum_PlacementStatus.PLACEMENT_STATUS_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return PlacementStatusEnum_PlacementStatus.ACTIVE;
    case 2:
    case "INACTIVE":
      return PlacementStatusEnum_PlacementStatus.INACTIVE;
    case 3:
    case "ARCHIVED":
      return PlacementStatusEnum_PlacementStatus.ARCHIVED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlacementStatusEnum_PlacementStatus.UNRECOGNIZED;
  }
}

export function placementStatusEnum_PlacementStatusToJSON(object: PlacementStatusEnum_PlacementStatus): string {
  switch (object) {
    case PlacementStatusEnum_PlacementStatus.PLACEMENT_STATUS_UNSPECIFIED:
      return "PLACEMENT_STATUS_UNSPECIFIED";
    case PlacementStatusEnum_PlacementStatus.ACTIVE:
      return "ACTIVE";
    case PlacementStatusEnum_PlacementStatus.INACTIVE:
      return "INACTIVE";
    case PlacementStatusEnum_PlacementStatus.ARCHIVED:
      return "ARCHIVED";
    case PlacementStatusEnum_PlacementStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBasePlacementStatusEnum(): PlacementStatusEnum {
  return {};
}

export const PlacementStatusEnum: MessageFns<PlacementStatusEnum> = {
  encode(_: PlacementStatusEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlacementStatusEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlacementStatusEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PlacementStatusEnum {
    return {};
  },

  toJSON(_: PlacementStatusEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<PlacementStatusEnum>): PlacementStatusEnum {
    return PlacementStatusEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<PlacementStatusEnum>): PlacementStatusEnum {
    const message = createBasePlacementStatusEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
