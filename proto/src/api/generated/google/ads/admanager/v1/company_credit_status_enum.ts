// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/admanager/v1/company_credit_status_enum.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.admanager.v1";

/**
 * Wrapper message for
 * [CompanyCreditStatus][google.ads.admanager.v1.CompanyCreditStatusEnum.CompanyCreditStatus]
 */
export interface CompanyCreditStatusEnum {
}

/**
 * The credit status of a company.
 *
 * Credit statuses specify the credit-worthiness of a company and affect the
 * ad serving of campaigns belonging to the company.
 *
 * In basic settings, only the
 * [ACTIVE][google.ads.admanager.v1.CompanyCreditStatusEnum.CompanyCreditStatus.ACTIVE]
 * and
 * [INACTIVE][google.ads.admanager.v1.CompanyCreditStatusEnum.CompanyCreditStatus.INACTIVE]
 * credit statuses are applicable. In advance settings, all credit statuses
 * are applicable.
 */
export enum CompanyCreditStatusEnum_CompanyCreditStatus {
  /** COMPANY_CREDIT_STATUS_UNSPECIFIED - No value specified */
  COMPANY_CREDIT_STATUS_UNSPECIFIED = 0,
  /**
   * ACTIVE - The company's credit status is active.
   *
   * Line items belonging to the company can serve.
   *
   * This credit status is the default for basic settings and is available in
   * both basic and advance settings.
   */
  ACTIVE = 1,
  /**
   * INACTIVE - The company's credit status is inactive.
   *
   * Line items belonging to the company cannot be activated. However, line
   * items that were activated before the credit status changed will remain
   * active. New orders or line items belonging to the company cannot be
   * created.
   *
   * Companies with this credit status will be hidden by default in company
   * search results.
   *
   * This credit status is available in both basic and advance settings.
   */
  INACTIVE = 2,
  /**
   * ON_HOLD - The company's credit status is on hold.
   *
   * Line items belonging to the company cannot be activated. However, line
   * items that were activated before the credit status changed will remain
   * active. New orders or line items belonging to the company can be
   * created.
   *
   * This credit status is the default in advance settings and is only
   * available in advance settings.
   */
  ON_HOLD = 3,
  /**
   * STOP - The company's credit status is stopped.
   *
   * Line items belonging to the company cannot be activated. However, line
   * items that were activated before the credit status changed will remain
   * active. New orders or line items belonging to the company cannot be
   * created.
   *
   * This credit status is only available in advance settings.
   */
  STOP = 4,
  /**
   * BLOCKED - The company's credit status is blocked.
   *
   * All active line items belonging to the company will stop serving with
   * immediate effect. Line items belonging to the company cannot be
   * activated, and new orders or line items belonging to the company cannot
   * be created.
   *
   * This credit status is only available in advance settings.
   */
  BLOCKED = 5,
  UNRECOGNIZED = -1,
}

export function companyCreditStatusEnum_CompanyCreditStatusFromJSON(
  object: any,
): CompanyCreditStatusEnum_CompanyCreditStatus {
  switch (object) {
    case 0:
    case "COMPANY_CREDIT_STATUS_UNSPECIFIED":
      return CompanyCreditStatusEnum_CompanyCreditStatus.COMPANY_CREDIT_STATUS_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return CompanyCreditStatusEnum_CompanyCreditStatus.ACTIVE;
    case 2:
    case "INACTIVE":
      return CompanyCreditStatusEnum_CompanyCreditStatus.INACTIVE;
    case 3:
    case "ON_HOLD":
      return CompanyCreditStatusEnum_CompanyCreditStatus.ON_HOLD;
    case 4:
    case "STOP":
      return CompanyCreditStatusEnum_CompanyCreditStatus.STOP;
    case 5:
    case "BLOCKED":
      return CompanyCreditStatusEnum_CompanyCreditStatus.BLOCKED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CompanyCreditStatusEnum_CompanyCreditStatus.UNRECOGNIZED;
  }
}

export function companyCreditStatusEnum_CompanyCreditStatusToJSON(
  object: CompanyCreditStatusEnum_CompanyCreditStatus,
): string {
  switch (object) {
    case CompanyCreditStatusEnum_CompanyCreditStatus.COMPANY_CREDIT_STATUS_UNSPECIFIED:
      return "COMPANY_CREDIT_STATUS_UNSPECIFIED";
    case CompanyCreditStatusEnum_CompanyCreditStatus.ACTIVE:
      return "ACTIVE";
    case CompanyCreditStatusEnum_CompanyCreditStatus.INACTIVE:
      return "INACTIVE";
    case CompanyCreditStatusEnum_CompanyCreditStatus.ON_HOLD:
      return "ON_HOLD";
    case CompanyCreditStatusEnum_CompanyCreditStatus.STOP:
      return "STOP";
    case CompanyCreditStatusEnum_CompanyCreditStatus.BLOCKED:
      return "BLOCKED";
    case CompanyCreditStatusEnum_CompanyCreditStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCompanyCreditStatusEnum(): CompanyCreditStatusEnum {
  return {};
}

export const CompanyCreditStatusEnum: MessageFns<CompanyCreditStatusEnum> = {
  encode(_: CompanyCreditStatusEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompanyCreditStatusEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompanyCreditStatusEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CompanyCreditStatusEnum {
    return {};
  },

  toJSON(_: CompanyCreditStatusEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CompanyCreditStatusEnum>): CompanyCreditStatusEnum {
    return CompanyCreditStatusEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CompanyCreditStatusEnum>): CompanyCreditStatusEnum {
    const message = createBaseCompanyCreditStatusEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
