// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/admanager/v1/admanager_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Any } from "../../../protobuf/any.js";

export const protobufPackage = "google.ads.admanager.v1";

/**
 * / AdManagerError contains all the information required for processing a
 * / particular error thrown by the AdManager API.
 * /
 * / At least one AdManagerError should be included in all error messages sent
 * to / the client.
 */
export interface AdManagerError {
  /** The unique identifying string for this error. */
  errorCode: string;
  /** A publisher appropriate explanation of this error. */
  message: string;
  /** The field path that triggered this error. */
  fieldPath: string;
  /** The value that triggered this error. */
  trigger: string;
  /** The stack trace that accompanies this error. */
  stackTrace: string;
  /** A list of messages that carry any additional error details. */
  details: Any[];
}

function createBaseAdManagerError(): AdManagerError {
  return { errorCode: "", message: "", fieldPath: "", trigger: "", stackTrace: "", details: [] };
}

export const AdManagerError: MessageFns<AdManagerError> = {
  encode(message: AdManagerError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.errorCode !== "") {
      writer.uint32(10).string(message.errorCode);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.fieldPath !== "") {
      writer.uint32(26).string(message.fieldPath);
    }
    if (message.trigger !== "") {
      writer.uint32(34).string(message.trigger);
    }
    if (message.stackTrace !== "") {
      writer.uint32(42).string(message.stackTrace);
    }
    for (const v of message.details) {
      Any.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdManagerError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdManagerError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.errorCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.fieldPath = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.trigger = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.stackTrace = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.details.push(Any.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdManagerError {
    return {
      errorCode: isSet(object.errorCode) ? globalThis.String(object.errorCode) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      fieldPath: isSet(object.fieldPath) ? globalThis.String(object.fieldPath) : "",
      trigger: isSet(object.trigger) ? globalThis.String(object.trigger) : "",
      stackTrace: isSet(object.stackTrace) ? globalThis.String(object.stackTrace) : "",
      details: globalThis.Array.isArray(object?.details) ? object.details.map((e: any) => Any.fromJSON(e)) : [],
    };
  },

  toJSON(message: AdManagerError): unknown {
    const obj: any = {};
    if (message.errorCode !== "") {
      obj.errorCode = message.errorCode;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.fieldPath !== "") {
      obj.fieldPath = message.fieldPath;
    }
    if (message.trigger !== "") {
      obj.trigger = message.trigger;
    }
    if (message.stackTrace !== "") {
      obj.stackTrace = message.stackTrace;
    }
    if (message.details?.length) {
      obj.details = message.details.map((e) => Any.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AdManagerError>): AdManagerError {
    return AdManagerError.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdManagerError>): AdManagerError {
    const message = createBaseAdManagerError();
    message.errorCode = object.errorCode ?? "";
    message.message = object.message ?? "";
    message.fieldPath = object.fieldPath ?? "";
    message.trigger = object.trigger ?? "";
    message.stackTrace = object.stackTrace ?? "";
    message.details = object.details?.map((e) => Any.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
