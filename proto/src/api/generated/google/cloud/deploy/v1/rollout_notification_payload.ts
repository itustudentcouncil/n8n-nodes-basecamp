// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/deploy/v1/rollout_notification_payload.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Type, typeFromJSON, typeToJSON } from "./log_enums.js";

export const protobufPackage = "google.cloud.deploy.v1";

/**
 * Payload proto for "clouddeploy.googleapis.com/rollout_notification"
 * Platform Log event that describes the failure to send rollout status change
 * Pub/Sub notification.
 */
export interface RolloutNotificationEvent {
  /** Debug message for when a notification fails to send. */
  message: string;
  /** Unique identifier of the `DeliveryPipeline`. */
  pipelineUid: string;
  /** Unique identifier of the `Release`. */
  releaseUid: string;
  /** The name of the `Release`. */
  release: string;
  /** Unique identifier of the `Rollout`. */
  rolloutUid: string;
  /** The name of the `Rollout`. */
  rollout: string;
  /** ID of the `Target` that the rollout is deployed to. */
  targetId: string;
  /** Type of this notification, e.g. for a Pub/Sub failure. */
  type: Type;
}

function createBaseRolloutNotificationEvent(): RolloutNotificationEvent {
  return {
    message: "",
    pipelineUid: "",
    releaseUid: "",
    release: "",
    rolloutUid: "",
    rollout: "",
    targetId: "",
    type: 0,
  };
}

export const RolloutNotificationEvent: MessageFns<RolloutNotificationEvent> = {
  encode(message: RolloutNotificationEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.pipelineUid !== "") {
      writer.uint32(18).string(message.pipelineUid);
    }
    if (message.releaseUid !== "") {
      writer.uint32(26).string(message.releaseUid);
    }
    if (message.release !== "") {
      writer.uint32(58).string(message.release);
    }
    if (message.rolloutUid !== "") {
      writer.uint32(66).string(message.rolloutUid);
    }
    if (message.rollout !== "") {
      writer.uint32(34).string(message.rollout);
    }
    if (message.targetId !== "") {
      writer.uint32(50).string(message.targetId);
    }
    if (message.type !== 0) {
      writer.uint32(40).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RolloutNotificationEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRolloutNotificationEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pipelineUid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.releaseUid = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.release = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.rolloutUid = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.rollout = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.targetId = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RolloutNotificationEvent {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      pipelineUid: isSet(object.pipelineUid) ? globalThis.String(object.pipelineUid) : "",
      releaseUid: isSet(object.releaseUid) ? globalThis.String(object.releaseUid) : "",
      release: isSet(object.release) ? globalThis.String(object.release) : "",
      rolloutUid: isSet(object.rolloutUid) ? globalThis.String(object.rolloutUid) : "",
      rollout: isSet(object.rollout) ? globalThis.String(object.rollout) : "",
      targetId: isSet(object.targetId) ? globalThis.String(object.targetId) : "",
      type: isSet(object.type) ? typeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: RolloutNotificationEvent): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.pipelineUid !== "") {
      obj.pipelineUid = message.pipelineUid;
    }
    if (message.releaseUid !== "") {
      obj.releaseUid = message.releaseUid;
    }
    if (message.release !== "") {
      obj.release = message.release;
    }
    if (message.rolloutUid !== "") {
      obj.rolloutUid = message.rolloutUid;
    }
    if (message.rollout !== "") {
      obj.rollout = message.rollout;
    }
    if (message.targetId !== "") {
      obj.targetId = message.targetId;
    }
    if (message.type !== 0) {
      obj.type = typeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<RolloutNotificationEvent>): RolloutNotificationEvent {
    return RolloutNotificationEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RolloutNotificationEvent>): RolloutNotificationEvent {
    const message = createBaseRolloutNotificationEvent();
    message.message = object.message ?? "";
    message.pipelineUid = object.pipelineUid ?? "";
    message.releaseUid = object.releaseUid ?? "";
    message.release = object.release ?? "";
    message.rolloutUid = object.rolloutUid ?? "";
    message.rollout = object.rollout ?? "";
    message.targetId = object.targetId ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
