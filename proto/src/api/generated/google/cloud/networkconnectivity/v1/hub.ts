// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/networkconnectivity/v1/hub.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.networkconnectivity.v1";

/** Supported features for a location */
export enum LocationFeature {
  /** LOCATION_FEATURE_UNSPECIFIED - No publicly supported feature in this location */
  LOCATION_FEATURE_UNSPECIFIED = 0,
  /** SITE_TO_CLOUD_SPOKES - Site-to-cloud spokes are supported in this location */
  SITE_TO_CLOUD_SPOKES = 1,
  /** SITE_TO_SITE_SPOKES - Site-to-site spokes are supported in this location */
  SITE_TO_SITE_SPOKES = 2,
  UNRECOGNIZED = -1,
}

export function locationFeatureFromJSON(object: any): LocationFeature {
  switch (object) {
    case 0:
    case "LOCATION_FEATURE_UNSPECIFIED":
      return LocationFeature.LOCATION_FEATURE_UNSPECIFIED;
    case 1:
    case "SITE_TO_CLOUD_SPOKES":
      return LocationFeature.SITE_TO_CLOUD_SPOKES;
    case 2:
    case "SITE_TO_SITE_SPOKES":
      return LocationFeature.SITE_TO_SITE_SPOKES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LocationFeature.UNRECOGNIZED;
  }
}

export function locationFeatureToJSON(object: LocationFeature): string {
  switch (object) {
    case LocationFeature.LOCATION_FEATURE_UNSPECIFIED:
      return "LOCATION_FEATURE_UNSPECIFIED";
    case LocationFeature.SITE_TO_CLOUD_SPOKES:
      return "SITE_TO_CLOUD_SPOKES";
    case LocationFeature.SITE_TO_SITE_SPOKES:
      return "SITE_TO_SITE_SPOKES";
    case LocationFeature.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The route's type */
export enum RouteType {
  /** ROUTE_TYPE_UNSPECIFIED - No route type information specified */
  ROUTE_TYPE_UNSPECIFIED = 0,
  /**
   * VPC_PRIMARY_SUBNET - The route leads to a destination within the primary address range of the
   * VPC network's subnet.
   */
  VPC_PRIMARY_SUBNET = 1,
  /**
   * VPC_SECONDARY_SUBNET - The route leads to a destination within the secondary address range of the
   * VPC network's subnet.
   */
  VPC_SECONDARY_SUBNET = 2,
  UNRECOGNIZED = -1,
}

export function routeTypeFromJSON(object: any): RouteType {
  switch (object) {
    case 0:
    case "ROUTE_TYPE_UNSPECIFIED":
      return RouteType.ROUTE_TYPE_UNSPECIFIED;
    case 1:
    case "VPC_PRIMARY_SUBNET":
      return RouteType.VPC_PRIMARY_SUBNET;
    case 2:
    case "VPC_SECONDARY_SUBNET":
      return RouteType.VPC_SECONDARY_SUBNET;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RouteType.UNRECOGNIZED;
  }
}

export function routeTypeToJSON(object: RouteType): string {
  switch (object) {
    case RouteType.ROUTE_TYPE_UNSPECIFIED:
      return "ROUTE_TYPE_UNSPECIFIED";
    case RouteType.VPC_PRIMARY_SUBNET:
      return "VPC_PRIMARY_SUBNET";
    case RouteType.VPC_SECONDARY_SUBNET:
      return "VPC_SECONDARY_SUBNET";
    case RouteType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The State enum represents the lifecycle stage of a Network Connectivity
 * Center resource.
 */
export enum State {
  /** STATE_UNSPECIFIED - No state information available */
  STATE_UNSPECIFIED = 0,
  /** CREATING - The resource's create operation is in progress. */
  CREATING = 1,
  /** ACTIVE - The resource is active */
  ACTIVE = 2,
  /** DELETING - The resource's delete operation is in progress. */
  DELETING = 3,
  /** ACCEPTING - The resource's accept operation is in progress. */
  ACCEPTING = 8,
  /** REJECTING - The resource's reject operation is in progress. */
  REJECTING = 9,
  /** UPDATING - The resource's update operation is in progress. */
  UPDATING = 6,
  /** INACTIVE - The resource is inactive. */
  INACTIVE = 7,
  /**
   * OBSOLETE - The hub associated with this spoke resource has been deleted.
   * This state applies to spoke resources only.
   */
  OBSOLETE = 10,
  UNRECOGNIZED = -1,
}

export function stateFromJSON(object: any): State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return State.CREATING;
    case 2:
    case "ACTIVE":
      return State.ACTIVE;
    case 3:
    case "DELETING":
      return State.DELETING;
    case 8:
    case "ACCEPTING":
      return State.ACCEPTING;
    case 9:
    case "REJECTING":
      return State.REJECTING;
    case 6:
    case "UPDATING":
      return State.UPDATING;
    case 7:
    case "INACTIVE":
      return State.INACTIVE;
    case 10:
    case "OBSOLETE":
      return State.OBSOLETE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return State.UNRECOGNIZED;
  }
}

export function stateToJSON(object: State): string {
  switch (object) {
    case State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case State.CREATING:
      return "CREATING";
    case State.ACTIVE:
      return "ACTIVE";
    case State.DELETING:
      return "DELETING";
    case State.ACCEPTING:
      return "ACCEPTING";
    case State.REJECTING:
      return "REJECTING";
    case State.UPDATING:
      return "UPDATING";
    case State.INACTIVE:
      return "INACTIVE";
    case State.OBSOLETE:
      return "OBSOLETE";
    case State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The SpokeType enum represents the type of spoke. The type
 * reflects the kind of resource that a spoke is associated with.
 */
export enum SpokeType {
  /** SPOKE_TYPE_UNSPECIFIED - Unspecified spoke type. */
  SPOKE_TYPE_UNSPECIFIED = 0,
  /** VPN_TUNNEL - Spokes associated with VPN tunnels. */
  VPN_TUNNEL = 1,
  /** INTERCONNECT_ATTACHMENT - Spokes associated with VLAN attachments. */
  INTERCONNECT_ATTACHMENT = 2,
  /** ROUTER_APPLIANCE - Spokes associated with router appliance instances. */
  ROUTER_APPLIANCE = 3,
  /** VPC_NETWORK - Spokes associated with VPC networks. */
  VPC_NETWORK = 4,
  UNRECOGNIZED = -1,
}

export function spokeTypeFromJSON(object: any): SpokeType {
  switch (object) {
    case 0:
    case "SPOKE_TYPE_UNSPECIFIED":
      return SpokeType.SPOKE_TYPE_UNSPECIFIED;
    case 1:
    case "VPN_TUNNEL":
      return SpokeType.VPN_TUNNEL;
    case 2:
    case "INTERCONNECT_ATTACHMENT":
      return SpokeType.INTERCONNECT_ATTACHMENT;
    case 3:
    case "ROUTER_APPLIANCE":
      return SpokeType.ROUTER_APPLIANCE;
    case 4:
    case "VPC_NETWORK":
      return SpokeType.VPC_NETWORK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SpokeType.UNRECOGNIZED;
  }
}

export function spokeTypeToJSON(object: SpokeType): string {
  switch (object) {
    case SpokeType.SPOKE_TYPE_UNSPECIFIED:
      return "SPOKE_TYPE_UNSPECIFIED";
    case SpokeType.VPN_TUNNEL:
      return "VPN_TUNNEL";
    case SpokeType.INTERCONNECT_ATTACHMENT:
      return "INTERCONNECT_ATTACHMENT";
    case SpokeType.ROUTER_APPLIANCE:
      return "ROUTER_APPLIANCE";
    case SpokeType.VPC_NETWORK:
      return "VPC_NETWORK";
    case SpokeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A Network Connectivity Center hub is a global management resource to which
 * you attach spokes. A single hub can contain spokes from multiple regions.
 * However, if any of a hub's spokes use the site-to-site data transfer feature,
 * the resources associated with those spokes must all be in the same VPC
 * network. Spokes that do not use site-to-site data transfer can be associated
 * with any VPC network in your project.
 */
export interface Hub {
  /**
   * Immutable. The name of the hub. Hub names must be unique. They use the
   * following form:
   *     `projects/{project_number}/locations/global/hubs/{hub_id}`
   */
  name: string;
  /** Output only. The time the hub was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the hub was last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional labels in key-value pair format. For more information about
   * labels, see [Requirements for
   * labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
   */
  labels: { [key: string]: string };
  /** An optional description of the hub. */
  description: string;
  /**
   * Output only. The Google-generated UUID for the hub. This value is unique
   * across all hub resources. If a hub is deleted and another with the same
   * name is created, the new hub is assigned a different unique_id.
   */
  uniqueId: string;
  /** Output only. The current lifecycle state of this hub. */
  state: State;
  /**
   * The VPC networks associated with this hub's spokes.
   *
   * This field is read-only. Network Connectivity Center automatically
   * populates it based on the set of spokes attached to the hub.
   */
  routingVpcs: RoutingVPC[];
  /**
   * Output only. The route tables that belong to this hub. They use the
   * following form:
   *    `projects/{project_number}/locations/global/hubs/{hub_id}/routeTables/{route_table_id}`
   *
   * This field is read-only. Network Connectivity Center automatically
   * populates it based on the route tables nested under the hub.
   */
  routeTables: string[];
  /**
   * Output only. A summary of the spokes associated with a hub. The
   * summary includes a count of spokes according to type
   * and according to state. If any spokes are inactive,
   * the summary also lists the reasons they are inactive,
   * including a count for each reason.
   */
  spokeSummary: SpokeSummary | undefined;
}

export interface Hub_LabelsEntry {
  key: string;
  value: string;
}

/**
 * RoutingVPC contains information about the VPC networks associated
 * with the spokes of a Network Connectivity Center hub.
 */
export interface RoutingVPC {
  /** The URI of the VPC network. */
  uri: string;
  /**
   * Output only. If true, indicates that this VPC network is currently
   * associated with spokes that use the data transfer feature (spokes where the
   * site_to_site_data_transfer field is set to true). If you create new spokes
   * that use data transfer, they must be associated with this VPC network. At
   * most, one VPC network will have this field set to true.
   */
  requiredForNewSiteToSiteDataTransferSpokes: boolean;
}

/**
 * A Network Connectivity Center spoke represents one or more network
 * connectivity resources.
 *
 * When you create a spoke, you associate it with a hub. You must also
 * identify a value for exactly one of the following fields:
 *
 * * linked_vpn_tunnels
 * * linked_interconnect_attachments
 * * linked_router_appliance_instances
 * * linked_vpc_network
 */
export interface Spoke {
  /**
   * Immutable. The name of the spoke. Spoke names must be unique. They use the
   * following form:
   *     `projects/{project_number}/locations/{region}/spokes/{spoke_id}`
   */
  name: string;
  /** Output only. The time the spoke was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the spoke was last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional labels in key-value pair format. For more information about
   * labels, see [Requirements for
   * labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
   */
  labels: { [key: string]: string };
  /** An optional description of the spoke. */
  description: string;
  /** Immutable. The name of the hub that this spoke is attached to. */
  hub: string;
  /** Optional. The name of the group that this spoke is associated with. */
  group: string;
  /** VPN tunnels that are associated with the spoke. */
  linkedVpnTunnels:
    | LinkedVpnTunnels
    | undefined;
  /** VLAN attachments that are associated with the spoke. */
  linkedInterconnectAttachments:
    | LinkedInterconnectAttachments
    | undefined;
  /** Router appliance instances that are associated with the spoke. */
  linkedRouterApplianceInstances:
    | LinkedRouterApplianceInstances
    | undefined;
  /** Optional. VPC network that is associated with the spoke. */
  linkedVpcNetwork:
    | LinkedVpcNetwork
    | undefined;
  /**
   * Output only. The Google-generated UUID for the spoke. This value is unique
   * across all spoke resources. If a spoke is deleted and another with the same
   * name is created, the new spoke is assigned a different `unique_id`.
   */
  uniqueId: string;
  /** Output only. The current lifecycle state of this spoke. */
  state: State;
  /**
   * Output only. The reasons for current state of the spoke. Only present when
   * the spoke is in the `INACTIVE` state.
   */
  reasons: Spoke_StateReason[];
  /** Output only. The type of resource associated with the spoke. */
  spokeType: SpokeType;
}

/** The reason a spoke is inactive. */
export interface Spoke_StateReason {
  /** The code associated with this reason. */
  code: Spoke_StateReason_Code;
  /** Human-readable details about this reason. */
  message: string;
  /** Additional information provided by the user in the RejectSpoke call. */
  userDetails: string;
}

/** The Code enum represents the various reasons a state can be `INACTIVE`. */
export enum Spoke_StateReason_Code {
  /** CODE_UNSPECIFIED - No information available. */
  CODE_UNSPECIFIED = 0,
  /** PENDING_REVIEW - The proposed spoke is pending review. */
  PENDING_REVIEW = 1,
  /** REJECTED - The proposed spoke has been rejected by the hub administrator. */
  REJECTED = 2,
  /** PAUSED - The spoke has been deactivated internally. */
  PAUSED = 3,
  /**
   * FAILED - Network Connectivity Center encountered errors while accepting
   * the spoke.
   */
  FAILED = 4,
  UNRECOGNIZED = -1,
}

export function spoke_StateReason_CodeFromJSON(object: any): Spoke_StateReason_Code {
  switch (object) {
    case 0:
    case "CODE_UNSPECIFIED":
      return Spoke_StateReason_Code.CODE_UNSPECIFIED;
    case 1:
    case "PENDING_REVIEW":
      return Spoke_StateReason_Code.PENDING_REVIEW;
    case 2:
    case "REJECTED":
      return Spoke_StateReason_Code.REJECTED;
    case 3:
    case "PAUSED":
      return Spoke_StateReason_Code.PAUSED;
    case 4:
    case "FAILED":
      return Spoke_StateReason_Code.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Spoke_StateReason_Code.UNRECOGNIZED;
  }
}

export function spoke_StateReason_CodeToJSON(object: Spoke_StateReason_Code): string {
  switch (object) {
    case Spoke_StateReason_Code.CODE_UNSPECIFIED:
      return "CODE_UNSPECIFIED";
    case Spoke_StateReason_Code.PENDING_REVIEW:
      return "PENDING_REVIEW";
    case Spoke_StateReason_Code.REJECTED:
      return "REJECTED";
    case Spoke_StateReason_Code.PAUSED:
      return "PAUSED";
    case Spoke_StateReason_Code.FAILED:
      return "FAILED";
    case Spoke_StateReason_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Spoke_LabelsEntry {
  key: string;
  value: string;
}

export interface RouteTable {
  /**
   * Immutable. The name of the route table. Route table names must be unique.
   * They use the following form:
   *      `projects/{project_number}/locations/global/hubs/{hub}/routeTables/{route_table_id}`
   */
  name: string;
  /** Output only. The time the route table was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the route table was last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional labels in key-value pair format. For more information about
   * labels, see [Requirements for
   * labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
   */
  labels: { [key: string]: string };
  /** An optional description of the route table. */
  description: string;
  /**
   * Output only. The Google-generated UUID for the route table. This value is
   * unique across all route table resources. If a route table is deleted and
   * another with the same name is created, the new route table is assigned
   * a different `uid`.
   */
  uid: string;
  /** Output only. The current lifecycle state of this route table. */
  state: State;
}

export interface RouteTable_LabelsEntry {
  key: string;
  value: string;
}

/**
 * A route defines a path from VM instances within a spoke to a specific
 * destination resource. Only VPC spokes have routes.
 */
export interface Route {
  /**
   * Immutable. The name of the route. Route names must be unique. Route names
   * use the following form:
   *      `projects/{project_number}/locations/global/hubs/{hub}/routeTables/{route_table_id}/routes/{route_id}`
   */
  name: string;
  /** Output only. The time the route was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the route was last updated. */
  updateTime:
    | Date
    | undefined;
  /** The destination IP address range. */
  ipCidrRange: string;
  /**
   * Output only. The route's type. Its type is determined by the properties of
   * its IP address range.
   */
  type: RouteType;
  /** Immutable. The destination VPC network for packets on this route. */
  nextHopVpcNetwork:
    | NextHopVpcNetwork
    | undefined;
  /**
   * Optional labels in key-value pair format. For more information about
   * labels, see [Requirements for
   * labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
   */
  labels: { [key: string]: string };
  /** An optional description of the route. */
  description: string;
  /**
   * Output only. The Google-generated UUID for the route. This value is unique
   * across all Network Connectivity Center route resources. If a
   * route is deleted and another with the same name is created,
   * the new route is assigned a different `uid`.
   */
  uid: string;
  /** Output only. The current lifecycle state of the route. */
  state: State;
  /**
   * Immutable. The spoke that this route leads to.
   * Example: projects/12345/locations/global/spokes/SPOKE
   */
  spoke: string;
  /**
   * Output only. The location of the route.
   * Uses the following form: "projects/{project}/locations/{location}"
   * Example: projects/1234/locations/us-central1
   */
  location: string;
}

export interface Route_LabelsEntry {
  key: string;
  value: string;
}

/** A group represents a subset of spokes attached to a hub. */
export interface Group {
  /**
   * Immutable. The name of the group. Group names must be unique. They
   * use the following form:
   *      `projects/{project_number}/locations/global/hubs/{hub}/groups/{group_id}`
   */
  name: string;
  /** Output only. The time the group was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the group was last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional. Labels in key-value pair format. For more information about
   * labels, see [Requirements for
   * labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
   */
  labels: { [key: string]: string };
  /** Optional. The description of the group. */
  description: string;
  /**
   * Output only. The Google-generated UUID for the group. This value is unique
   * across all group resources. If a group is deleted and
   * another with the same name is created, the new route table is assigned
   * a different unique_id.
   */
  uid: string;
  /** Output only. The current lifecycle state of this group. */
  state: State;
}

export interface Group_LabelsEntry {
  key: string;
  value: string;
}

/**
 * Request for
 * [HubService.ListHubs][google.cloud.networkconnectivity.v1.HubService.ListHubs]
 * method.
 */
export interface ListHubsRequest {
  /** Required. The parent resource's name. */
  parent: string;
  /** The maximum number of results per page to return. */
  pageSize: number;
  /** The page token. */
  pageToken: string;
  /** An expression that filters the list of results. */
  filter: string;
  /** Sort the results by a certain order. */
  orderBy: string;
}

/**
 * Response for
 * [HubService.ListHubs][google.cloud.networkconnectivity.v1.HubService.ListHubs]
 * method.
 */
export interface ListHubsResponse {
  /** The requested hubs. */
  hubs: Hub[];
  /**
   * The token for the next page of the response. To see more results,
   * use this value as the page_token for your next request. If this value
   * is empty, there are no more results.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/**
 * Request for
 * [HubService.GetHub][google.cloud.networkconnectivity.v1.HubService.GetHub]
 * method.
 */
export interface GetHubRequest {
  /** Required. The name of the hub resource to get. */
  name: string;
}

/**
 * Request for
 * [HubService.CreateHub][google.cloud.networkconnectivity.v1.HubService.CreateHub]
 * method.
 */
export interface CreateHubRequest {
  /** Required. The parent resource. */
  parent: string;
  /** Required. A unique identifier for the hub. */
  hubId: string;
  /** Required. The initial values for a new hub. */
  hub:
    | Hub
    | undefined;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID so
   * that if you must retry your request, the server knows to ignore the request
   * if it has already been completed. The server guarantees that a request
   * doesn't result in creation of duplicate commitments for at least 60
   * minutes.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check to see whether the original operation
   * was received. If it was, the server ignores the second request. This
   * behavior prevents clients from mistakenly creating duplicate commitments.
   *
   * The request ID must be a valid UUID, with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * Request for
 * [HubService.UpdateHub][google.cloud.networkconnectivity.v1.HubService.UpdateHub]
 * method.
 */
export interface UpdateHubRequest {
  /**
   * Optional. In the case of an update to an existing hub, field mask is used
   * to specify the fields to be overwritten. The fields specified in the
   * update_mask are relative to the resource, not the full request. A field is
   * overwritten if it is in the mask. If the user does not provide a mask, then
   * all fields are overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The state that the hub should be in after the update. */
  hub:
    | Hub
    | undefined;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID so
   * that if you must retry your request, the server knows to ignore the request
   * if it has already been completed. The server guarantees that a request
   * doesn't result in creation of duplicate commitments for at least 60
   * minutes.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check to see whether the original operation
   * was received. If it was, the server ignores the second request. This
   * behavior prevents clients from mistakenly creating duplicate commitments.
   *
   * The request ID must be a valid UUID, with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * The request for
 * [HubService.DeleteHub][google.cloud.networkconnectivity.v1.HubService.DeleteHub].
 */
export interface DeleteHubRequest {
  /** Required. The name of the hub to delete. */
  name: string;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID so
   * that if you must retry your request, the server knows to ignore the request
   * if it has already been completed. The server guarantees that a request
   * doesn't result in creation of duplicate commitments for at least 60
   * minutes.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check to see whether the original operation
   * was received. If it was, the server ignores the second request. This
   * behavior prevents clients from mistakenly creating duplicate commitments.
   *
   * The request ID must be a valid UUID, with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * The request for
 * [HubService.ListHubSpokes][google.cloud.networkconnectivity.v1.HubService.ListHubSpokes].
 */
export interface ListHubSpokesRequest {
  /** Required. The name of the hub. */
  name: string;
  /**
   * A list of locations.
   * Specify one of the following: `[global]`, a single region (for
   * example, `[us-central1]`), or a combination of
   * values (for example, `[global, us-central1, us-west1]`).
   * If the spoke_locations field is populated, the list of results
   * includes only spokes in the specified location.
   * If the spoke_locations field is not populated, the list of results
   * includes spokes in all locations.
   */
  spokeLocations: string[];
  /** The maximum number of results to return per page. */
  pageSize: number;
  /** The page token. */
  pageToken: string;
  /** An expression that filters the list of results. */
  filter: string;
  /** Sort the results by name or create_time. */
  orderBy: string;
  /**
   * The view of the spoke to return.
   * The view that you use determines which spoke fields are included in the
   * response.
   */
  view: ListHubSpokesRequest_SpokeView;
}

/** Enum that controls which spoke fields are included in the response. */
export enum ListHubSpokesRequest_SpokeView {
  /**
   * SPOKE_VIEW_UNSPECIFIED - The spoke view is unspecified. When the spoke view is unspecified, the
   * API returns the same fields as the `BASIC` view.
   */
  SPOKE_VIEW_UNSPECIFIED = 0,
  /**
   * BASIC - Includes `name`, `create_time`, `hub`, `unique_id`, `state`, `reasons`,
   * and `spoke_type`. This is the default value.
   */
  BASIC = 1,
  /**
   * DETAILED - Includes all spoke fields except `labels`.
   * You can use the `DETAILED` view only when you set the `spoke_locations`
   * field to `[global]`.
   */
  DETAILED = 2,
  UNRECOGNIZED = -1,
}

export function listHubSpokesRequest_SpokeViewFromJSON(object: any): ListHubSpokesRequest_SpokeView {
  switch (object) {
    case 0:
    case "SPOKE_VIEW_UNSPECIFIED":
      return ListHubSpokesRequest_SpokeView.SPOKE_VIEW_UNSPECIFIED;
    case 1:
    case "BASIC":
      return ListHubSpokesRequest_SpokeView.BASIC;
    case 2:
    case "DETAILED":
      return ListHubSpokesRequest_SpokeView.DETAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ListHubSpokesRequest_SpokeView.UNRECOGNIZED;
  }
}

export function listHubSpokesRequest_SpokeViewToJSON(object: ListHubSpokesRequest_SpokeView): string {
  switch (object) {
    case ListHubSpokesRequest_SpokeView.SPOKE_VIEW_UNSPECIFIED:
      return "SPOKE_VIEW_UNSPECIFIED";
    case ListHubSpokesRequest_SpokeView.BASIC:
      return "BASIC";
    case ListHubSpokesRequest_SpokeView.DETAILED:
      return "DETAILED";
    case ListHubSpokesRequest_SpokeView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The response for
 * [HubService.ListHubSpokes][google.cloud.networkconnectivity.v1.HubService.ListHubSpokes].
 */
export interface ListHubSpokesResponse {
  /**
   * The requested spokes.
   * The spoke fields can be partially populated based on the `view` field in
   * the request message.
   */
  spokes: Spoke[];
  /**
   * The token for the next page of the response. To see more results,
   * use this value as the page_token for your next request. If this value
   * is empty, there are no more results.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/**
 * The request for
 * [HubService.ListSpokes][google.cloud.networkconnectivity.v1.HubService.ListSpokes].
 */
export interface ListSpokesRequest {
  /** Required. The parent resource. */
  parent: string;
  /** The maximum number of results to return per page. */
  pageSize: number;
  /** The page token. */
  pageToken: string;
  /** An expression that filters the list of results. */
  filter: string;
  /** Sort the results by a certain order. */
  orderBy: string;
}

/**
 * The response for
 * [HubService.ListSpokes][google.cloud.networkconnectivity.v1.HubService.ListSpokes].
 */
export interface ListSpokesResponse {
  /** The requested spokes. */
  spokes: Spoke[];
  /**
   * The token for the next page of the response. To see more results,
   * use this value as the page_token for your next request. If this value
   * is empty, there are no more results.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/**
 * The request for
 * [HubService.GetSpoke][google.cloud.networkconnectivity.v1.HubService.GetSpoke].
 */
export interface GetSpokeRequest {
  /** Required. The name of the spoke resource. */
  name: string;
}

/**
 * The request for
 * [HubService.CreateSpoke][google.cloud.networkconnectivity.v1.HubService.CreateSpoke].
 */
export interface CreateSpokeRequest {
  /** Required. The parent resource. */
  parent: string;
  /** Required. Unique id for the spoke to create. */
  spokeId: string;
  /** Required. The initial values for a new spoke. */
  spoke:
    | Spoke
    | undefined;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID so
   * that if you must retry your request, the server knows to ignore the request
   * if it has already been completed. The server guarantees that a request
   * doesn't result in creation of duplicate commitments for at least 60
   * minutes.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check to see whether the original operation
   * was received. If it was, the server ignores the second request. This
   * behavior prevents clients from mistakenly creating duplicate commitments.
   *
   * The request ID must be a valid UUID, with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * Request for
 * [HubService.UpdateSpoke][google.cloud.networkconnectivity.v1.HubService.UpdateSpoke]
 * method.
 */
export interface UpdateSpokeRequest {
  /**
   * Optional. In the case of an update to an existing spoke, field mask is used
   * to specify the fields to be overwritten. The fields specified in the
   * update_mask are relative to the resource, not the full request. A field is
   * overwritten if it is in the mask. If the user does not provide a mask, then
   * all fields are overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The state that the spoke should be in after the update. */
  spoke:
    | Spoke
    | undefined;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID so
   * that if you must retry your request, the server knows to ignore the request
   * if it has already been completed. The server guarantees that a request
   * doesn't result in creation of duplicate commitments for at least 60
   * minutes.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check to see whether the original operation
   * was received. If it was, the server ignores the second request. This
   * behavior prevents clients from mistakenly creating duplicate commitments.
   *
   * The request ID must be a valid UUID, with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * The request for
 * [HubService.DeleteSpoke][google.cloud.networkconnectivity.v1.HubService.DeleteSpoke].
 */
export interface DeleteSpokeRequest {
  /** Required. The name of the spoke to delete. */
  name: string;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID so
   * that if you must retry your request, the server knows to ignore the request
   * if it has already been completed. The server guarantees that a request
   * doesn't result in creation of duplicate commitments for at least 60
   * minutes.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check to see whether the original operation
   * was received. If it was, the server ignores the second request. This
   * behavior prevents clients from mistakenly creating duplicate commitments.
   *
   * The request ID must be a valid UUID, with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * The request for
 * [HubService.AcceptHubSpoke][google.cloud.networkconnectivity.v1.HubService.AcceptHubSpoke].
 */
export interface AcceptHubSpokeRequest {
  /** Required. The name of the hub into which to accept the spoke. */
  name: string;
  /** Required. The URI of the spoke to accept into the hub. */
  spokeUri: string;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID so
   * that if you must retry your request, the server knows to ignore the request
   * if it has already been completed. The server guarantees that a request
   * doesn't result in creation of duplicate commitments for at least 60
   * minutes.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check to see whether the original operation
   * was received. If it was, the server ignores the second request. This
   * behavior prevents clients from mistakenly creating duplicate commitments.
   *
   * The request ID must be a valid UUID, with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * The response for
 * [HubService.AcceptHubSpoke][google.cloud.networkconnectivity.v1.HubService.AcceptHubSpoke].
 */
export interface AcceptHubSpokeResponse {
  /** The spoke that was operated on. */
  spoke: Spoke | undefined;
}

/**
 * The request for
 * [HubService.RejectHubSpoke][google.cloud.networkconnectivity.v1.HubService.RejectHubSpoke].
 */
export interface RejectHubSpokeRequest {
  /** Required. The name of the hub from which to reject the spoke. */
  name: string;
  /** Required. The URI of the spoke to reject from the hub. */
  spokeUri: string;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID so
   * that if you must retry your request, the server knows to ignore the request
   * if it has already been completed. The server guarantees that a request
   * doesn't result in creation of duplicate commitments for at least 60
   * minutes.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check to see whether the original operation
   * was received. If it was, the server ignores the second request. This
   * behavior prevents clients from mistakenly creating duplicate commitments.
   *
   * The request ID must be a valid UUID, with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /** Optional. Additional information provided by the hub administrator. */
  details: string;
}

/**
 * The response for
 * [HubService.RejectHubSpoke][google.cloud.networkconnectivity.v1.HubService.RejectHubSpoke].
 */
export interface RejectHubSpokeResponse {
  /** The spoke that was operated on. */
  spoke: Spoke | undefined;
}

/**
 * The request for
 * [HubService.GetRouteTable][google.cloud.networkconnectivity.v1.HubService.GetRouteTable].
 */
export interface GetRouteTableRequest {
  /** Required. The name of the route table resource. */
  name: string;
}

/**
 * The request for
 * [HubService.GetRoute][google.cloud.networkconnectivity.v1.HubService.GetRoute].
 */
export interface GetRouteRequest {
  /** Required. The name of the route resource. */
  name: string;
}

/**
 * Request for
 * [HubService.ListRoutes][google.cloud.networkconnectivity.v1.HubService.ListRoutes]
 * method.
 */
export interface ListRoutesRequest {
  /** Required. The parent resource's name. */
  parent: string;
  /** The maximum number of results to return per page. */
  pageSize: number;
  /** The page token. */
  pageToken: string;
  /** An expression that filters the list of results. */
  filter: string;
  /** Sort the results by a certain order. */
  orderBy: string;
}

/**
 * Response for
 * [HubService.ListRoutes][google.cloud.networkconnectivity.v1.HubService.ListRoutes]
 * method.
 */
export interface ListRoutesResponse {
  /** The requested routes. */
  routes: Route[];
  /**
   * The token for the next page of the response. To see more results,
   * use this value as the page_token for your next request. If this value
   * is empty, there are no more results.
   */
  nextPageToken: string;
  /** RouteTables that could not be reached. */
  unreachable: string[];
}

/**
 * Request for
 * [HubService.ListRouteTables][google.cloud.networkconnectivity.v1.HubService.ListRouteTables]
 * method.
 */
export interface ListRouteTablesRequest {
  /** Required. The parent resource's name. */
  parent: string;
  /** The maximum number of results to return per page. */
  pageSize: number;
  /** The page token. */
  pageToken: string;
  /** An expression that filters the list of results. */
  filter: string;
  /** Sort the results by a certain order. */
  orderBy: string;
}

/**
 * Response for
 * [HubService.ListRouteTables][google.cloud.networkconnectivity.v1.HubService.ListRouteTables]
 * method.
 */
export interface ListRouteTablesResponse {
  /** The requested route tables. */
  routeTables: RouteTable[];
  /**
   * The token for the next page of the response. To see more results,
   * use this value as the page_token for your next request. If this value
   * is empty, there are no more results.
   */
  nextPageToken: string;
  /** Hubs that could not be reached. */
  unreachable: string[];
}

/**
 * Request for
 * [HubService.ListGroups][google.cloud.networkconnectivity.v1.HubService.ListGroups]
 * method.
 */
export interface ListGroupsRequest {
  /** Required. The parent resource's name. */
  parent: string;
  /** The maximum number of results to return per page. */
  pageSize: number;
  /** The page token. */
  pageToken: string;
  /** An expression that filters the list of results. */
  filter: string;
  /** Sort the results by a certain order. */
  orderBy: string;
}

/**
 * Response for
 * [HubService.ListGroups][google.cloud.networkconnectivity.v1.HubService.ListGroups]
 * method.
 */
export interface ListGroupsResponse {
  /** The requested groups. */
  groups: Group[];
  /**
   * The token for the next page of the response. To see more results,
   * use this value as the page_token for your next request. If this value
   * is empty, there are no more results.
   */
  nextPageToken: string;
  /** Hubs that could not be reached. */
  unreachable: string[];
}

/**
 * A collection of Cloud VPN tunnel resources. These resources should be
 * redundant HA VPN tunnels that all advertise the same prefixes to Google
 * Cloud. Alternatively, in a passive/active configuration, all tunnels
 * should be capable of advertising the same prefixes.
 */
export interface LinkedVpnTunnels {
  /** The URIs of linked VPN tunnel resources. */
  uris: string[];
  /**
   * A value that controls whether site-to-site data transfer is enabled for
   * these resources. Data transfer is available only in [supported
   * locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
   */
  siteToSiteDataTransfer: boolean;
  /** Output only. The VPC network where these VPN tunnels are located. */
  vpcNetwork: string;
}

/**
 * A collection of VLAN attachment resources. These resources should
 * be redundant attachments that all advertise the same prefixes to Google
 * Cloud. Alternatively, in active/passive configurations, all attachments
 * should be capable of advertising the same prefixes.
 */
export interface LinkedInterconnectAttachments {
  /** The URIs of linked interconnect attachment resources */
  uris: string[];
  /**
   * A value that controls whether site-to-site data transfer is enabled for
   * these resources. Data transfer is available only in [supported
   * locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
   */
  siteToSiteDataTransfer: boolean;
  /** Output only. The VPC network where these VLAN attachments are located. */
  vpcNetwork: string;
}

/**
 * A collection of router appliance instances. If you configure multiple router
 * appliance instances to receive data from the same set of sites outside of
 * Google Cloud, we recommend that you associate those instances with the same
 * spoke.
 */
export interface LinkedRouterApplianceInstances {
  /** The list of router appliance instances. */
  instances: RouterApplianceInstance[];
  /**
   * A value that controls whether site-to-site data transfer is enabled for
   * these resources. Data transfer is available only in [supported
   * locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
   */
  siteToSiteDataTransfer: boolean;
  /**
   * Output only. The VPC network where these router appliance instances are
   * located.
   */
  vpcNetwork: string;
}

/** An existing VPC network. */
export interface LinkedVpcNetwork {
  /** Required. The URI of the VPC network resource. */
  uri: string;
  /** Optional. IP ranges encompassing the subnets to be excluded from peering. */
  excludeExportRanges: string[];
}

/**
 * A router appliance instance is a Compute Engine virtual machine (VM) instance
 * that acts as a BGP speaker. A router appliance instance is specified by the
 * URI of the VM and the internal IP address of one of the VM's network
 * interfaces.
 */
export interface RouterApplianceInstance {
  /** The URI of the VM. */
  virtualMachine: string;
  /** The IP address on the VM to use for peering. */
  ipAddress: string;
}

/** Metadata about locations */
export interface LocationMetadata {
  /** List of supported features */
  locationFeatures: LocationFeature[];
}

export interface NextHopVpcNetwork {
  /** The URI of the VPC network resource */
  uri: string;
}

/**
 * Summarizes information about the spokes associated with a hub.
 * The summary includes a count of spokes according to type
 * and according to state. If any spokes are inactive,
 * the summary also lists the reasons they are inactive,
 * including a count for each reason.
 */
export interface SpokeSummary {
  /**
   * Output only. Counts the number of spokes of each type that are
   * associated with a specific hub.
   */
  spokeTypeCounts: SpokeSummary_SpokeTypeCount[];
  /**
   * Output only. Counts the number of spokes that are in each state
   * and associated with a given hub.
   */
  spokeStateCounts: SpokeSummary_SpokeStateCount[];
  /**
   * Output only. Counts the number of spokes that are inactive for each
   * possible reason and associated with a given hub.
   */
  spokeStateReasonCounts: SpokeSummary_SpokeStateReasonCount[];
}

/**
 * The number of spokes of a given type that are associated
 * with a specific hub. The type indicates what kind of
 * resource is associated with the spoke.
 */
export interface SpokeSummary_SpokeTypeCount {
  /** Output only. The type of the spokes. */
  spokeType: SpokeType;
  /**
   * Output only. The total number of spokes of this type that are
   * associated with the hub.
   */
  count: Long;
}

/**
 * The number of spokes that are in a particular state
 * and associated with a given hub.
 */
export interface SpokeSummary_SpokeStateCount {
  /** Output only. The state of the spokes. */
  state: State;
  /**
   * Output only. The total number of spokes that are in this state
   * and associated with a given hub.
   */
  count: Long;
}

/** The number of spokes in the hub that are inactive for this reason. */
export interface SpokeSummary_SpokeStateReasonCount {
  /** Output only. The reason that a spoke is inactive. */
  stateReasonCode: Spoke_StateReason_Code;
  /**
   * Output only. The total number of spokes that are inactive for a
   * particular reason and associated with a given hub.
   */
  count: Long;
}

/**
 * The request for
 * [HubService.GetGroup][google.cloud.networkconnectivity.v1.HubService.GetGroup].
 */
export interface GetGroupRequest {
  /** Required. The name of the route table resource. */
  name: string;
}

function createBaseHub(): Hub {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    description: "",
    uniqueId: "",
    state: 0,
    routingVpcs: [],
    routeTables: [],
    spokeSummary: undefined,
  };
}

export const Hub: MessageFns<Hub> = {
  encode(message: Hub, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Hub_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.uniqueId !== "") {
      writer.uint32(66).string(message.uniqueId);
    }
    if (message.state !== 0) {
      writer.uint32(72).int32(message.state);
    }
    for (const v of message.routingVpcs) {
      RoutingVPC.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.routeTables) {
      writer.uint32(90).string(v!);
    }
    if (message.spokeSummary !== undefined) {
      SpokeSummary.encode(message.spokeSummary, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Hub {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHub();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Hub_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.uniqueId = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.routingVpcs.push(RoutingVPC.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.routeTables.push(reader.string());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.spokeSummary = SpokeSummary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Hub {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      uniqueId: isSet(object.uniqueId) ? globalThis.String(object.uniqueId) : "",
      state: isSet(object.state) ? stateFromJSON(object.state) : 0,
      routingVpcs: globalThis.Array.isArray(object?.routingVpcs)
        ? object.routingVpcs.map((e: any) => RoutingVPC.fromJSON(e))
        : [],
      routeTables: globalThis.Array.isArray(object?.routeTables)
        ? object.routeTables.map((e: any) => globalThis.String(e))
        : [],
      spokeSummary: isSet(object.spokeSummary) ? SpokeSummary.fromJSON(object.spokeSummary) : undefined,
    };
  },

  toJSON(message: Hub): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.uniqueId !== "") {
      obj.uniqueId = message.uniqueId;
    }
    if (message.state !== 0) {
      obj.state = stateToJSON(message.state);
    }
    if (message.routingVpcs?.length) {
      obj.routingVpcs = message.routingVpcs.map((e) => RoutingVPC.toJSON(e));
    }
    if (message.routeTables?.length) {
      obj.routeTables = message.routeTables;
    }
    if (message.spokeSummary !== undefined) {
      obj.spokeSummary = SpokeSummary.toJSON(message.spokeSummary);
    }
    return obj;
  },

  create(base?: DeepPartial<Hub>): Hub {
    return Hub.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Hub>): Hub {
    const message = createBaseHub();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.description = object.description ?? "";
    message.uniqueId = object.uniqueId ?? "";
    message.state = object.state ?? 0;
    message.routingVpcs = object.routingVpcs?.map((e) => RoutingVPC.fromPartial(e)) || [];
    message.routeTables = object.routeTables?.map((e) => e) || [];
    message.spokeSummary = (object.spokeSummary !== undefined && object.spokeSummary !== null)
      ? SpokeSummary.fromPartial(object.spokeSummary)
      : undefined;
    return message;
  },
};

function createBaseHub_LabelsEntry(): Hub_LabelsEntry {
  return { key: "", value: "" };
}

export const Hub_LabelsEntry: MessageFns<Hub_LabelsEntry> = {
  encode(message: Hub_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Hub_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHub_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Hub_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Hub_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Hub_LabelsEntry>): Hub_LabelsEntry {
    return Hub_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Hub_LabelsEntry>): Hub_LabelsEntry {
    const message = createBaseHub_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRoutingVPC(): RoutingVPC {
  return { uri: "", requiredForNewSiteToSiteDataTransferSpokes: false };
}

export const RoutingVPC: MessageFns<RoutingVPC> = {
  encode(message: RoutingVPC, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.requiredForNewSiteToSiteDataTransferSpokes !== false) {
      writer.uint32(16).bool(message.requiredForNewSiteToSiteDataTransferSpokes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoutingVPC {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoutingVPC();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.requiredForNewSiteToSiteDataTransferSpokes = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoutingVPC {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      requiredForNewSiteToSiteDataTransferSpokes: isSet(object.requiredForNewSiteToSiteDataTransferSpokes)
        ? globalThis.Boolean(object.requiredForNewSiteToSiteDataTransferSpokes)
        : false,
    };
  },

  toJSON(message: RoutingVPC): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.requiredForNewSiteToSiteDataTransferSpokes !== false) {
      obj.requiredForNewSiteToSiteDataTransferSpokes = message.requiredForNewSiteToSiteDataTransferSpokes;
    }
    return obj;
  },

  create(base?: DeepPartial<RoutingVPC>): RoutingVPC {
    return RoutingVPC.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RoutingVPC>): RoutingVPC {
    const message = createBaseRoutingVPC();
    message.uri = object.uri ?? "";
    message.requiredForNewSiteToSiteDataTransferSpokes = object.requiredForNewSiteToSiteDataTransferSpokes ?? false;
    return message;
  },
};

function createBaseSpoke(): Spoke {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    description: "",
    hub: "",
    group: "",
    linkedVpnTunnels: undefined,
    linkedInterconnectAttachments: undefined,
    linkedRouterApplianceInstances: undefined,
    linkedVpcNetwork: undefined,
    uniqueId: "",
    state: 0,
    reasons: [],
    spokeType: 0,
  };
}

export const Spoke: MessageFns<Spoke> = {
  encode(message: Spoke, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Spoke_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.hub !== "") {
      writer.uint32(50).string(message.hub);
    }
    if (message.group !== "") {
      writer.uint32(186).string(message.group);
    }
    if (message.linkedVpnTunnels !== undefined) {
      LinkedVpnTunnels.encode(message.linkedVpnTunnels, writer.uint32(138).fork()).join();
    }
    if (message.linkedInterconnectAttachments !== undefined) {
      LinkedInterconnectAttachments.encode(message.linkedInterconnectAttachments, writer.uint32(146).fork()).join();
    }
    if (message.linkedRouterApplianceInstances !== undefined) {
      LinkedRouterApplianceInstances.encode(message.linkedRouterApplianceInstances, writer.uint32(154).fork()).join();
    }
    if (message.linkedVpcNetwork !== undefined) {
      LinkedVpcNetwork.encode(message.linkedVpcNetwork, writer.uint32(162).fork()).join();
    }
    if (message.uniqueId !== "") {
      writer.uint32(90).string(message.uniqueId);
    }
    if (message.state !== 0) {
      writer.uint32(120).int32(message.state);
    }
    for (const v of message.reasons) {
      Spoke_StateReason.encode(v!, writer.uint32(170).fork()).join();
    }
    if (message.spokeType !== 0) {
      writer.uint32(176).int32(message.spokeType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Spoke {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpoke();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Spoke_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.hub = reader.string();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.group = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.linkedVpnTunnels = LinkedVpnTunnels.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.linkedInterconnectAttachments = LinkedInterconnectAttachments.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.linkedRouterApplianceInstances = LinkedRouterApplianceInstances.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.linkedVpcNetwork = LinkedVpcNetwork.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.uniqueId = reader.string();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.reasons.push(Spoke_StateReason.decode(reader, reader.uint32()));
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.spokeType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Spoke {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      hub: isSet(object.hub) ? globalThis.String(object.hub) : "",
      group: isSet(object.group) ? globalThis.String(object.group) : "",
      linkedVpnTunnels: isSet(object.linkedVpnTunnels) ? LinkedVpnTunnels.fromJSON(object.linkedVpnTunnels) : undefined,
      linkedInterconnectAttachments: isSet(object.linkedInterconnectAttachments)
        ? LinkedInterconnectAttachments.fromJSON(object.linkedInterconnectAttachments)
        : undefined,
      linkedRouterApplianceInstances: isSet(object.linkedRouterApplianceInstances)
        ? LinkedRouterApplianceInstances.fromJSON(object.linkedRouterApplianceInstances)
        : undefined,
      linkedVpcNetwork: isSet(object.linkedVpcNetwork) ? LinkedVpcNetwork.fromJSON(object.linkedVpcNetwork) : undefined,
      uniqueId: isSet(object.uniqueId) ? globalThis.String(object.uniqueId) : "",
      state: isSet(object.state) ? stateFromJSON(object.state) : 0,
      reasons: globalThis.Array.isArray(object?.reasons)
        ? object.reasons.map((e: any) => Spoke_StateReason.fromJSON(e))
        : [],
      spokeType: isSet(object.spokeType) ? spokeTypeFromJSON(object.spokeType) : 0,
    };
  },

  toJSON(message: Spoke): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.hub !== "") {
      obj.hub = message.hub;
    }
    if (message.group !== "") {
      obj.group = message.group;
    }
    if (message.linkedVpnTunnels !== undefined) {
      obj.linkedVpnTunnels = LinkedVpnTunnels.toJSON(message.linkedVpnTunnels);
    }
    if (message.linkedInterconnectAttachments !== undefined) {
      obj.linkedInterconnectAttachments = LinkedInterconnectAttachments.toJSON(message.linkedInterconnectAttachments);
    }
    if (message.linkedRouterApplianceInstances !== undefined) {
      obj.linkedRouterApplianceInstances = LinkedRouterApplianceInstances.toJSON(
        message.linkedRouterApplianceInstances,
      );
    }
    if (message.linkedVpcNetwork !== undefined) {
      obj.linkedVpcNetwork = LinkedVpcNetwork.toJSON(message.linkedVpcNetwork);
    }
    if (message.uniqueId !== "") {
      obj.uniqueId = message.uniqueId;
    }
    if (message.state !== 0) {
      obj.state = stateToJSON(message.state);
    }
    if (message.reasons?.length) {
      obj.reasons = message.reasons.map((e) => Spoke_StateReason.toJSON(e));
    }
    if (message.spokeType !== 0) {
      obj.spokeType = spokeTypeToJSON(message.spokeType);
    }
    return obj;
  },

  create(base?: DeepPartial<Spoke>): Spoke {
    return Spoke.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Spoke>): Spoke {
    const message = createBaseSpoke();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.description = object.description ?? "";
    message.hub = object.hub ?? "";
    message.group = object.group ?? "";
    message.linkedVpnTunnels = (object.linkedVpnTunnels !== undefined && object.linkedVpnTunnels !== null)
      ? LinkedVpnTunnels.fromPartial(object.linkedVpnTunnels)
      : undefined;
    message.linkedInterconnectAttachments =
      (object.linkedInterconnectAttachments !== undefined && object.linkedInterconnectAttachments !== null)
        ? LinkedInterconnectAttachments.fromPartial(object.linkedInterconnectAttachments)
        : undefined;
    message.linkedRouterApplianceInstances =
      (object.linkedRouterApplianceInstances !== undefined && object.linkedRouterApplianceInstances !== null)
        ? LinkedRouterApplianceInstances.fromPartial(object.linkedRouterApplianceInstances)
        : undefined;
    message.linkedVpcNetwork = (object.linkedVpcNetwork !== undefined && object.linkedVpcNetwork !== null)
      ? LinkedVpcNetwork.fromPartial(object.linkedVpcNetwork)
      : undefined;
    message.uniqueId = object.uniqueId ?? "";
    message.state = object.state ?? 0;
    message.reasons = object.reasons?.map((e) => Spoke_StateReason.fromPartial(e)) || [];
    message.spokeType = object.spokeType ?? 0;
    return message;
  },
};

function createBaseSpoke_StateReason(): Spoke_StateReason {
  return { code: 0, message: "", userDetails: "" };
}

export const Spoke_StateReason: MessageFns<Spoke_StateReason> = {
  encode(message: Spoke_StateReason, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.userDetails !== "") {
      writer.uint32(26).string(message.userDetails);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Spoke_StateReason {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpoke_StateReason();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userDetails = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Spoke_StateReason {
    return {
      code: isSet(object.code) ? spoke_StateReason_CodeFromJSON(object.code) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      userDetails: isSet(object.userDetails) ? globalThis.String(object.userDetails) : "",
    };
  },

  toJSON(message: Spoke_StateReason): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = spoke_StateReason_CodeToJSON(message.code);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.userDetails !== "") {
      obj.userDetails = message.userDetails;
    }
    return obj;
  },

  create(base?: DeepPartial<Spoke_StateReason>): Spoke_StateReason {
    return Spoke_StateReason.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Spoke_StateReason>): Spoke_StateReason {
    const message = createBaseSpoke_StateReason();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    message.userDetails = object.userDetails ?? "";
    return message;
  },
};

function createBaseSpoke_LabelsEntry(): Spoke_LabelsEntry {
  return { key: "", value: "" };
}

export const Spoke_LabelsEntry: MessageFns<Spoke_LabelsEntry> = {
  encode(message: Spoke_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Spoke_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpoke_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Spoke_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Spoke_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Spoke_LabelsEntry>): Spoke_LabelsEntry {
    return Spoke_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Spoke_LabelsEntry>): Spoke_LabelsEntry {
    const message = createBaseSpoke_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRouteTable(): RouteTable {
  return { name: "", createTime: undefined, updateTime: undefined, labels: {}, description: "", uid: "", state: 0 };
}

export const RouteTable: MessageFns<RouteTable> = {
  encode(message: RouteTable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      RouteTable_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.uid !== "") {
      writer.uint32(50).string(message.uid);
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteTable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteTable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = RouteTable_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteTable {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      state: isSet(object.state) ? stateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: RouteTable): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.state !== 0) {
      obj.state = stateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<RouteTable>): RouteTable {
    return RouteTable.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RouteTable>): RouteTable {
    const message = createBaseRouteTable();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.description = object.description ?? "";
    message.uid = object.uid ?? "";
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseRouteTable_LabelsEntry(): RouteTable_LabelsEntry {
  return { key: "", value: "" };
}

export const RouteTable_LabelsEntry: MessageFns<RouteTable_LabelsEntry> = {
  encode(message: RouteTable_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteTable_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteTable_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteTable_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: RouteTable_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<RouteTable_LabelsEntry>): RouteTable_LabelsEntry {
    return RouteTable_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RouteTable_LabelsEntry>): RouteTable_LabelsEntry {
    const message = createBaseRouteTable_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRoute(): Route {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    ipCidrRange: "",
    type: 0,
    nextHopVpcNetwork: undefined,
    labels: {},
    description: "",
    uid: "",
    state: 0,
    spoke: "",
    location: "",
  };
}

export const Route: MessageFns<Route> = {
  encode(message: Route, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(42).fork()).join();
    }
    if (message.ipCidrRange !== "") {
      writer.uint32(10).string(message.ipCidrRange);
    }
    if (message.type !== 0) {
      writer.uint32(80).int32(message.type);
    }
    if (message.nextHopVpcNetwork !== undefined) {
      NextHopVpcNetwork.encode(message.nextHopVpcNetwork, writer.uint32(18).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Route_LabelsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.description !== "") {
      writer.uint32(58).string(message.description);
    }
    if (message.uid !== "") {
      writer.uint32(66).string(message.uid);
    }
    if (message.state !== 0) {
      writer.uint32(72).int32(message.state);
    }
    if (message.spoke !== "") {
      writer.uint32(90).string(message.spoke);
    }
    if (message.location !== "") {
      writer.uint32(98).string(message.location);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Route {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ipCidrRange = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextHopVpcNetwork = NextHopVpcNetwork.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = Route_LabelsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.labels[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.spoke = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.location = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Route {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      ipCidrRange: isSet(object.ipCidrRange) ? globalThis.String(object.ipCidrRange) : "",
      type: isSet(object.type) ? routeTypeFromJSON(object.type) : 0,
      nextHopVpcNetwork: isSet(object.nextHopVpcNetwork)
        ? NextHopVpcNetwork.fromJSON(object.nextHopVpcNetwork)
        : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      state: isSet(object.state) ? stateFromJSON(object.state) : 0,
      spoke: isSet(object.spoke) ? globalThis.String(object.spoke) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
    };
  },

  toJSON(message: Route): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.ipCidrRange !== "") {
      obj.ipCidrRange = message.ipCidrRange;
    }
    if (message.type !== 0) {
      obj.type = routeTypeToJSON(message.type);
    }
    if (message.nextHopVpcNetwork !== undefined) {
      obj.nextHopVpcNetwork = NextHopVpcNetwork.toJSON(message.nextHopVpcNetwork);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.state !== 0) {
      obj.state = stateToJSON(message.state);
    }
    if (message.spoke !== "") {
      obj.spoke = message.spoke;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    return obj;
  },

  create(base?: DeepPartial<Route>): Route {
    return Route.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Route>): Route {
    const message = createBaseRoute();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.ipCidrRange = object.ipCidrRange ?? "";
    message.type = object.type ?? 0;
    message.nextHopVpcNetwork = (object.nextHopVpcNetwork !== undefined && object.nextHopVpcNetwork !== null)
      ? NextHopVpcNetwork.fromPartial(object.nextHopVpcNetwork)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.description = object.description ?? "";
    message.uid = object.uid ?? "";
    message.state = object.state ?? 0;
    message.spoke = object.spoke ?? "";
    message.location = object.location ?? "";
    return message;
  },
};

function createBaseRoute_LabelsEntry(): Route_LabelsEntry {
  return { key: "", value: "" };
}

export const Route_LabelsEntry: MessageFns<Route_LabelsEntry> = {
  encode(message: Route_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Route_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoute_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Route_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Route_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Route_LabelsEntry>): Route_LabelsEntry {
    return Route_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Route_LabelsEntry>): Route_LabelsEntry {
    const message = createBaseRoute_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGroup(): Group {
  return { name: "", createTime: undefined, updateTime: undefined, labels: {}, description: "", uid: "", state: 0 };
}

export const Group: MessageFns<Group> = {
  encode(message: Group, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Group_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.uid !== "") {
      writer.uint32(50).string(message.uid);
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Group {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Group_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Group {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      state: isSet(object.state) ? stateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Group): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.state !== 0) {
      obj.state = stateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Group>): Group {
    return Group.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Group>): Group {
    const message = createBaseGroup();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.description = object.description ?? "";
    message.uid = object.uid ?? "";
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseGroup_LabelsEntry(): Group_LabelsEntry {
  return { key: "", value: "" };
}

export const Group_LabelsEntry: MessageFns<Group_LabelsEntry> = {
  encode(message: Group_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Group_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroup_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Group_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Group_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Group_LabelsEntry>): Group_LabelsEntry {
    return Group_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Group_LabelsEntry>): Group_LabelsEntry {
    const message = createBaseGroup_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListHubsRequest(): ListHubsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListHubsRequest: MessageFns<ListHubsRequest> = {
  encode(message: ListHubsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHubsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHubsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHubsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListHubsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListHubsRequest>): ListHubsRequest {
    return ListHubsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHubsRequest>): ListHubsRequest {
    const message = createBaseListHubsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListHubsResponse(): ListHubsResponse {
  return { hubs: [], nextPageToken: "", unreachable: [] };
}

export const ListHubsResponse: MessageFns<ListHubsResponse> = {
  encode(message: ListHubsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.hubs) {
      Hub.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHubsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHubsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hubs.push(Hub.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHubsResponse {
    return {
      hubs: globalThis.Array.isArray(object?.hubs) ? object.hubs.map((e: any) => Hub.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListHubsResponse): unknown {
    const obj: any = {};
    if (message.hubs?.length) {
      obj.hubs = message.hubs.map((e) => Hub.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListHubsResponse>): ListHubsResponse {
    return ListHubsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHubsResponse>): ListHubsResponse {
    const message = createBaseListHubsResponse();
    message.hubs = object.hubs?.map((e) => Hub.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetHubRequest(): GetHubRequest {
  return { name: "" };
}

export const GetHubRequest: MessageFns<GetHubRequest> = {
  encode(message: GetHubRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHubRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHubRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHubRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetHubRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetHubRequest>): GetHubRequest {
    return GetHubRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetHubRequest>): GetHubRequest {
    const message = createBaseGetHubRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateHubRequest(): CreateHubRequest {
  return { parent: "", hubId: "", hub: undefined, requestId: "" };
}

export const CreateHubRequest: MessageFns<CreateHubRequest> = {
  encode(message: CreateHubRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.hubId !== "") {
      writer.uint32(18).string(message.hubId);
    }
    if (message.hub !== undefined) {
      Hub.encode(message.hub, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateHubRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateHubRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hubId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hub = Hub.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateHubRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      hubId: isSet(object.hubId) ? globalThis.String(object.hubId) : "",
      hub: isSet(object.hub) ? Hub.fromJSON(object.hub) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateHubRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.hubId !== "") {
      obj.hubId = message.hubId;
    }
    if (message.hub !== undefined) {
      obj.hub = Hub.toJSON(message.hub);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateHubRequest>): CreateHubRequest {
    return CreateHubRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateHubRequest>): CreateHubRequest {
    const message = createBaseCreateHubRequest();
    message.parent = object.parent ?? "";
    message.hubId = object.hubId ?? "";
    message.hub = (object.hub !== undefined && object.hub !== null) ? Hub.fromPartial(object.hub) : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateHubRequest(): UpdateHubRequest {
  return { updateMask: undefined, hub: undefined, requestId: "" };
}

export const UpdateHubRequest: MessageFns<UpdateHubRequest> = {
  encode(message: UpdateHubRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.hub !== undefined) {
      Hub.encode(message.hub, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateHubRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHubRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hub = Hub.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateHubRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      hub: isSet(object.hub) ? Hub.fromJSON(object.hub) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateHubRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.hub !== undefined) {
      obj.hub = Hub.toJSON(message.hub);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateHubRequest>): UpdateHubRequest {
    return UpdateHubRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateHubRequest>): UpdateHubRequest {
    const message = createBaseUpdateHubRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.hub = (object.hub !== undefined && object.hub !== null) ? Hub.fromPartial(object.hub) : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteHubRequest(): DeleteHubRequest {
  return { name: "", requestId: "" };
}

export const DeleteHubRequest: MessageFns<DeleteHubRequest> = {
  encode(message: DeleteHubRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteHubRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteHubRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteHubRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteHubRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteHubRequest>): DeleteHubRequest {
    return DeleteHubRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteHubRequest>): DeleteHubRequest {
    const message = createBaseDeleteHubRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseListHubSpokesRequest(): ListHubSpokesRequest {
  return { name: "", spokeLocations: [], pageSize: 0, pageToken: "", filter: "", orderBy: "", view: 0 };
}

export const ListHubSpokesRequest: MessageFns<ListHubSpokesRequest> = {
  encode(message: ListHubSpokesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.spokeLocations) {
      writer.uint32(18).string(v!);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(42).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(50).string(message.orderBy);
    }
    if (message.view !== 0) {
      writer.uint32(56).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHubSpokesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHubSpokesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.spokeLocations.push(reader.string());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHubSpokesRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      spokeLocations: globalThis.Array.isArray(object?.spokeLocations)
        ? object.spokeLocations.map((e: any) => globalThis.String(e))
        : [],
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      view: isSet(object.view) ? listHubSpokesRequest_SpokeViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: ListHubSpokesRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.spokeLocations?.length) {
      obj.spokeLocations = message.spokeLocations;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.view !== 0) {
      obj.view = listHubSpokesRequest_SpokeViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<ListHubSpokesRequest>): ListHubSpokesRequest {
    return ListHubSpokesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHubSpokesRequest>): ListHubSpokesRequest {
    const message = createBaseListHubSpokesRequest();
    message.name = object.name ?? "";
    message.spokeLocations = object.spokeLocations?.map((e) => e) || [];
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseListHubSpokesResponse(): ListHubSpokesResponse {
  return { spokes: [], nextPageToken: "", unreachable: [] };
}

export const ListHubSpokesResponse: MessageFns<ListHubSpokesResponse> = {
  encode(message: ListHubSpokesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.spokes) {
      Spoke.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHubSpokesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHubSpokesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.spokes.push(Spoke.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHubSpokesResponse {
    return {
      spokes: globalThis.Array.isArray(object?.spokes) ? object.spokes.map((e: any) => Spoke.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListHubSpokesResponse): unknown {
    const obj: any = {};
    if (message.spokes?.length) {
      obj.spokes = message.spokes.map((e) => Spoke.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListHubSpokesResponse>): ListHubSpokesResponse {
    return ListHubSpokesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHubSpokesResponse>): ListHubSpokesResponse {
    const message = createBaseListHubSpokesResponse();
    message.spokes = object.spokes?.map((e) => Spoke.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseListSpokesRequest(): ListSpokesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListSpokesRequest: MessageFns<ListSpokesRequest> = {
  encode(message: ListSpokesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSpokesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSpokesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSpokesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListSpokesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSpokesRequest>): ListSpokesRequest {
    return ListSpokesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSpokesRequest>): ListSpokesRequest {
    const message = createBaseListSpokesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListSpokesResponse(): ListSpokesResponse {
  return { spokes: [], nextPageToken: "", unreachable: [] };
}

export const ListSpokesResponse: MessageFns<ListSpokesResponse> = {
  encode(message: ListSpokesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.spokes) {
      Spoke.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSpokesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSpokesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.spokes.push(Spoke.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSpokesResponse {
    return {
      spokes: globalThis.Array.isArray(object?.spokes) ? object.spokes.map((e: any) => Spoke.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListSpokesResponse): unknown {
    const obj: any = {};
    if (message.spokes?.length) {
      obj.spokes = message.spokes.map((e) => Spoke.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSpokesResponse>): ListSpokesResponse {
    return ListSpokesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSpokesResponse>): ListSpokesResponse {
    const message = createBaseListSpokesResponse();
    message.spokes = object.spokes?.map((e) => Spoke.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetSpokeRequest(): GetSpokeRequest {
  return { name: "" };
}

export const GetSpokeRequest: MessageFns<GetSpokeRequest> = {
  encode(message: GetSpokeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSpokeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSpokeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSpokeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSpokeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSpokeRequest>): GetSpokeRequest {
    return GetSpokeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSpokeRequest>): GetSpokeRequest {
    const message = createBaseGetSpokeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateSpokeRequest(): CreateSpokeRequest {
  return { parent: "", spokeId: "", spoke: undefined, requestId: "" };
}

export const CreateSpokeRequest: MessageFns<CreateSpokeRequest> = {
  encode(message: CreateSpokeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.spokeId !== "") {
      writer.uint32(18).string(message.spokeId);
    }
    if (message.spoke !== undefined) {
      Spoke.encode(message.spoke, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSpokeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSpokeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.spokeId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.spoke = Spoke.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSpokeRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      spokeId: isSet(object.spokeId) ? globalThis.String(object.spokeId) : "",
      spoke: isSet(object.spoke) ? Spoke.fromJSON(object.spoke) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateSpokeRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.spokeId !== "") {
      obj.spokeId = message.spokeId;
    }
    if (message.spoke !== undefined) {
      obj.spoke = Spoke.toJSON(message.spoke);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSpokeRequest>): CreateSpokeRequest {
    return CreateSpokeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSpokeRequest>): CreateSpokeRequest {
    const message = createBaseCreateSpokeRequest();
    message.parent = object.parent ?? "";
    message.spokeId = object.spokeId ?? "";
    message.spoke = (object.spoke !== undefined && object.spoke !== null) ? Spoke.fromPartial(object.spoke) : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateSpokeRequest(): UpdateSpokeRequest {
  return { updateMask: undefined, spoke: undefined, requestId: "" };
}

export const UpdateSpokeRequest: MessageFns<UpdateSpokeRequest> = {
  encode(message: UpdateSpokeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.spoke !== undefined) {
      Spoke.encode(message.spoke, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSpokeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSpokeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.spoke = Spoke.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSpokeRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      spoke: isSet(object.spoke) ? Spoke.fromJSON(object.spoke) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateSpokeRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.spoke !== undefined) {
      obj.spoke = Spoke.toJSON(message.spoke);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSpokeRequest>): UpdateSpokeRequest {
    return UpdateSpokeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSpokeRequest>): UpdateSpokeRequest {
    const message = createBaseUpdateSpokeRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.spoke = (object.spoke !== undefined && object.spoke !== null) ? Spoke.fromPartial(object.spoke) : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteSpokeRequest(): DeleteSpokeRequest {
  return { name: "", requestId: "" };
}

export const DeleteSpokeRequest: MessageFns<DeleteSpokeRequest> = {
  encode(message: DeleteSpokeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSpokeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSpokeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSpokeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteSpokeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSpokeRequest>): DeleteSpokeRequest {
    return DeleteSpokeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSpokeRequest>): DeleteSpokeRequest {
    const message = createBaseDeleteSpokeRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseAcceptHubSpokeRequest(): AcceptHubSpokeRequest {
  return { name: "", spokeUri: "", requestId: "" };
}

export const AcceptHubSpokeRequest: MessageFns<AcceptHubSpokeRequest> = {
  encode(message: AcceptHubSpokeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.spokeUri !== "") {
      writer.uint32(18).string(message.spokeUri);
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AcceptHubSpokeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAcceptHubSpokeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.spokeUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AcceptHubSpokeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      spokeUri: isSet(object.spokeUri) ? globalThis.String(object.spokeUri) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: AcceptHubSpokeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.spokeUri !== "") {
      obj.spokeUri = message.spokeUri;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<AcceptHubSpokeRequest>): AcceptHubSpokeRequest {
    return AcceptHubSpokeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AcceptHubSpokeRequest>): AcceptHubSpokeRequest {
    const message = createBaseAcceptHubSpokeRequest();
    message.name = object.name ?? "";
    message.spokeUri = object.spokeUri ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseAcceptHubSpokeResponse(): AcceptHubSpokeResponse {
  return { spoke: undefined };
}

export const AcceptHubSpokeResponse: MessageFns<AcceptHubSpokeResponse> = {
  encode(message: AcceptHubSpokeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.spoke !== undefined) {
      Spoke.encode(message.spoke, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AcceptHubSpokeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAcceptHubSpokeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.spoke = Spoke.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AcceptHubSpokeResponse {
    return { spoke: isSet(object.spoke) ? Spoke.fromJSON(object.spoke) : undefined };
  },

  toJSON(message: AcceptHubSpokeResponse): unknown {
    const obj: any = {};
    if (message.spoke !== undefined) {
      obj.spoke = Spoke.toJSON(message.spoke);
    }
    return obj;
  },

  create(base?: DeepPartial<AcceptHubSpokeResponse>): AcceptHubSpokeResponse {
    return AcceptHubSpokeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AcceptHubSpokeResponse>): AcceptHubSpokeResponse {
    const message = createBaseAcceptHubSpokeResponse();
    message.spoke = (object.spoke !== undefined && object.spoke !== null) ? Spoke.fromPartial(object.spoke) : undefined;
    return message;
  },
};

function createBaseRejectHubSpokeRequest(): RejectHubSpokeRequest {
  return { name: "", spokeUri: "", requestId: "", details: "" };
}

export const RejectHubSpokeRequest: MessageFns<RejectHubSpokeRequest> = {
  encode(message: RejectHubSpokeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.spokeUri !== "") {
      writer.uint32(18).string(message.spokeUri);
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    if (message.details !== "") {
      writer.uint32(34).string(message.details);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RejectHubSpokeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRejectHubSpokeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.spokeUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.details = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RejectHubSpokeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      spokeUri: isSet(object.spokeUri) ? globalThis.String(object.spokeUri) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      details: isSet(object.details) ? globalThis.String(object.details) : "",
    };
  },

  toJSON(message: RejectHubSpokeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.spokeUri !== "") {
      obj.spokeUri = message.spokeUri;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.details !== "") {
      obj.details = message.details;
    }
    return obj;
  },

  create(base?: DeepPartial<RejectHubSpokeRequest>): RejectHubSpokeRequest {
    return RejectHubSpokeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RejectHubSpokeRequest>): RejectHubSpokeRequest {
    const message = createBaseRejectHubSpokeRequest();
    message.name = object.name ?? "";
    message.spokeUri = object.spokeUri ?? "";
    message.requestId = object.requestId ?? "";
    message.details = object.details ?? "";
    return message;
  },
};

function createBaseRejectHubSpokeResponse(): RejectHubSpokeResponse {
  return { spoke: undefined };
}

export const RejectHubSpokeResponse: MessageFns<RejectHubSpokeResponse> = {
  encode(message: RejectHubSpokeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.spoke !== undefined) {
      Spoke.encode(message.spoke, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RejectHubSpokeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRejectHubSpokeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.spoke = Spoke.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RejectHubSpokeResponse {
    return { spoke: isSet(object.spoke) ? Spoke.fromJSON(object.spoke) : undefined };
  },

  toJSON(message: RejectHubSpokeResponse): unknown {
    const obj: any = {};
    if (message.spoke !== undefined) {
      obj.spoke = Spoke.toJSON(message.spoke);
    }
    return obj;
  },

  create(base?: DeepPartial<RejectHubSpokeResponse>): RejectHubSpokeResponse {
    return RejectHubSpokeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RejectHubSpokeResponse>): RejectHubSpokeResponse {
    const message = createBaseRejectHubSpokeResponse();
    message.spoke = (object.spoke !== undefined && object.spoke !== null) ? Spoke.fromPartial(object.spoke) : undefined;
    return message;
  },
};

function createBaseGetRouteTableRequest(): GetRouteTableRequest {
  return { name: "" };
}

export const GetRouteTableRequest: MessageFns<GetRouteTableRequest> = {
  encode(message: GetRouteTableRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRouteTableRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRouteTableRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRouteTableRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRouteTableRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRouteTableRequest>): GetRouteTableRequest {
    return GetRouteTableRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRouteTableRequest>): GetRouteTableRequest {
    const message = createBaseGetRouteTableRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetRouteRequest(): GetRouteRequest {
  return { name: "" };
}

export const GetRouteRequest: MessageFns<GetRouteRequest> = {
  encode(message: GetRouteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRouteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRouteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRouteRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRouteRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRouteRequest>): GetRouteRequest {
    return GetRouteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRouteRequest>): GetRouteRequest {
    const message = createBaseGetRouteRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListRoutesRequest(): ListRoutesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListRoutesRequest: MessageFns<ListRoutesRequest> = {
  encode(message: ListRoutesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRoutesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRoutesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRoutesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListRoutesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRoutesRequest>): ListRoutesRequest {
    return ListRoutesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRoutesRequest>): ListRoutesRequest {
    const message = createBaseListRoutesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListRoutesResponse(): ListRoutesResponse {
  return { routes: [], nextPageToken: "", unreachable: [] };
}

export const ListRoutesResponse: MessageFns<ListRoutesResponse> = {
  encode(message: ListRoutesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.routes) {
      Route.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRoutesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRoutesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.routes.push(Route.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRoutesResponse {
    return {
      routes: globalThis.Array.isArray(object?.routes) ? object.routes.map((e: any) => Route.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListRoutesResponse): unknown {
    const obj: any = {};
    if (message.routes?.length) {
      obj.routes = message.routes.map((e) => Route.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRoutesResponse>): ListRoutesResponse {
    return ListRoutesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRoutesResponse>): ListRoutesResponse {
    const message = createBaseListRoutesResponse();
    message.routes = object.routes?.map((e) => Route.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseListRouteTablesRequest(): ListRouteTablesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListRouteTablesRequest: MessageFns<ListRouteTablesRequest> = {
  encode(message: ListRouteTablesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRouteTablesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRouteTablesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRouteTablesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListRouteTablesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRouteTablesRequest>): ListRouteTablesRequest {
    return ListRouteTablesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRouteTablesRequest>): ListRouteTablesRequest {
    const message = createBaseListRouteTablesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListRouteTablesResponse(): ListRouteTablesResponse {
  return { routeTables: [], nextPageToken: "", unreachable: [] };
}

export const ListRouteTablesResponse: MessageFns<ListRouteTablesResponse> = {
  encode(message: ListRouteTablesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.routeTables) {
      RouteTable.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRouteTablesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRouteTablesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.routeTables.push(RouteTable.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRouteTablesResponse {
    return {
      routeTables: globalThis.Array.isArray(object?.routeTables)
        ? object.routeTables.map((e: any) => RouteTable.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListRouteTablesResponse): unknown {
    const obj: any = {};
    if (message.routeTables?.length) {
      obj.routeTables = message.routeTables.map((e) => RouteTable.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRouteTablesResponse>): ListRouteTablesResponse {
    return ListRouteTablesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRouteTablesResponse>): ListRouteTablesResponse {
    const message = createBaseListRouteTablesResponse();
    message.routeTables = object.routeTables?.map((e) => RouteTable.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseListGroupsRequest(): ListGroupsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListGroupsRequest: MessageFns<ListGroupsRequest> = {
  encode(message: ListGroupsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGroupsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGroupsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGroupsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListGroupsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGroupsRequest>): ListGroupsRequest {
    return ListGroupsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGroupsRequest>): ListGroupsRequest {
    const message = createBaseListGroupsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListGroupsResponse(): ListGroupsResponse {
  return { groups: [], nextPageToken: "", unreachable: [] };
}

export const ListGroupsResponse: MessageFns<ListGroupsResponse> = {
  encode(message: ListGroupsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.groups) {
      Group.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGroupsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGroupsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.groups.push(Group.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGroupsResponse {
    return {
      groups: globalThis.Array.isArray(object?.groups) ? object.groups.map((e: any) => Group.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListGroupsResponse): unknown {
    const obj: any = {};
    if (message.groups?.length) {
      obj.groups = message.groups.map((e) => Group.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGroupsResponse>): ListGroupsResponse {
    return ListGroupsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGroupsResponse>): ListGroupsResponse {
    const message = createBaseListGroupsResponse();
    message.groups = object.groups?.map((e) => Group.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseLinkedVpnTunnels(): LinkedVpnTunnels {
  return { uris: [], siteToSiteDataTransfer: false, vpcNetwork: "" };
}

export const LinkedVpnTunnels: MessageFns<LinkedVpnTunnels> = {
  encode(message: LinkedVpnTunnels, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.uris) {
      writer.uint32(10).string(v!);
    }
    if (message.siteToSiteDataTransfer !== false) {
      writer.uint32(16).bool(message.siteToSiteDataTransfer);
    }
    if (message.vpcNetwork !== "") {
      writer.uint32(26).string(message.vpcNetwork);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkedVpnTunnels {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkedVpnTunnels();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uris.push(reader.string());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.siteToSiteDataTransfer = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.vpcNetwork = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkedVpnTunnels {
    return {
      uris: globalThis.Array.isArray(object?.uris) ? object.uris.map((e: any) => globalThis.String(e)) : [],
      siteToSiteDataTransfer: isSet(object.siteToSiteDataTransfer)
        ? globalThis.Boolean(object.siteToSiteDataTransfer)
        : false,
      vpcNetwork: isSet(object.vpcNetwork) ? globalThis.String(object.vpcNetwork) : "",
    };
  },

  toJSON(message: LinkedVpnTunnels): unknown {
    const obj: any = {};
    if (message.uris?.length) {
      obj.uris = message.uris;
    }
    if (message.siteToSiteDataTransfer !== false) {
      obj.siteToSiteDataTransfer = message.siteToSiteDataTransfer;
    }
    if (message.vpcNetwork !== "") {
      obj.vpcNetwork = message.vpcNetwork;
    }
    return obj;
  },

  create(base?: DeepPartial<LinkedVpnTunnels>): LinkedVpnTunnels {
    return LinkedVpnTunnels.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LinkedVpnTunnels>): LinkedVpnTunnels {
    const message = createBaseLinkedVpnTunnels();
    message.uris = object.uris?.map((e) => e) || [];
    message.siteToSiteDataTransfer = object.siteToSiteDataTransfer ?? false;
    message.vpcNetwork = object.vpcNetwork ?? "";
    return message;
  },
};

function createBaseLinkedInterconnectAttachments(): LinkedInterconnectAttachments {
  return { uris: [], siteToSiteDataTransfer: false, vpcNetwork: "" };
}

export const LinkedInterconnectAttachments: MessageFns<LinkedInterconnectAttachments> = {
  encode(message: LinkedInterconnectAttachments, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.uris) {
      writer.uint32(10).string(v!);
    }
    if (message.siteToSiteDataTransfer !== false) {
      writer.uint32(16).bool(message.siteToSiteDataTransfer);
    }
    if (message.vpcNetwork !== "") {
      writer.uint32(26).string(message.vpcNetwork);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkedInterconnectAttachments {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkedInterconnectAttachments();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uris.push(reader.string());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.siteToSiteDataTransfer = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.vpcNetwork = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkedInterconnectAttachments {
    return {
      uris: globalThis.Array.isArray(object?.uris) ? object.uris.map((e: any) => globalThis.String(e)) : [],
      siteToSiteDataTransfer: isSet(object.siteToSiteDataTransfer)
        ? globalThis.Boolean(object.siteToSiteDataTransfer)
        : false,
      vpcNetwork: isSet(object.vpcNetwork) ? globalThis.String(object.vpcNetwork) : "",
    };
  },

  toJSON(message: LinkedInterconnectAttachments): unknown {
    const obj: any = {};
    if (message.uris?.length) {
      obj.uris = message.uris;
    }
    if (message.siteToSiteDataTransfer !== false) {
      obj.siteToSiteDataTransfer = message.siteToSiteDataTransfer;
    }
    if (message.vpcNetwork !== "") {
      obj.vpcNetwork = message.vpcNetwork;
    }
    return obj;
  },

  create(base?: DeepPartial<LinkedInterconnectAttachments>): LinkedInterconnectAttachments {
    return LinkedInterconnectAttachments.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LinkedInterconnectAttachments>): LinkedInterconnectAttachments {
    const message = createBaseLinkedInterconnectAttachments();
    message.uris = object.uris?.map((e) => e) || [];
    message.siteToSiteDataTransfer = object.siteToSiteDataTransfer ?? false;
    message.vpcNetwork = object.vpcNetwork ?? "";
    return message;
  },
};

function createBaseLinkedRouterApplianceInstances(): LinkedRouterApplianceInstances {
  return { instances: [], siteToSiteDataTransfer: false, vpcNetwork: "" };
}

export const LinkedRouterApplianceInstances: MessageFns<LinkedRouterApplianceInstances> = {
  encode(message: LinkedRouterApplianceInstances, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.instances) {
      RouterApplianceInstance.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.siteToSiteDataTransfer !== false) {
      writer.uint32(16).bool(message.siteToSiteDataTransfer);
    }
    if (message.vpcNetwork !== "") {
      writer.uint32(26).string(message.vpcNetwork);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkedRouterApplianceInstances {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkedRouterApplianceInstances();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instances.push(RouterApplianceInstance.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.siteToSiteDataTransfer = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.vpcNetwork = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkedRouterApplianceInstances {
    return {
      instances: globalThis.Array.isArray(object?.instances)
        ? object.instances.map((e: any) => RouterApplianceInstance.fromJSON(e))
        : [],
      siteToSiteDataTransfer: isSet(object.siteToSiteDataTransfer)
        ? globalThis.Boolean(object.siteToSiteDataTransfer)
        : false,
      vpcNetwork: isSet(object.vpcNetwork) ? globalThis.String(object.vpcNetwork) : "",
    };
  },

  toJSON(message: LinkedRouterApplianceInstances): unknown {
    const obj: any = {};
    if (message.instances?.length) {
      obj.instances = message.instances.map((e) => RouterApplianceInstance.toJSON(e));
    }
    if (message.siteToSiteDataTransfer !== false) {
      obj.siteToSiteDataTransfer = message.siteToSiteDataTransfer;
    }
    if (message.vpcNetwork !== "") {
      obj.vpcNetwork = message.vpcNetwork;
    }
    return obj;
  },

  create(base?: DeepPartial<LinkedRouterApplianceInstances>): LinkedRouterApplianceInstances {
    return LinkedRouterApplianceInstances.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LinkedRouterApplianceInstances>): LinkedRouterApplianceInstances {
    const message = createBaseLinkedRouterApplianceInstances();
    message.instances = object.instances?.map((e) => RouterApplianceInstance.fromPartial(e)) || [];
    message.siteToSiteDataTransfer = object.siteToSiteDataTransfer ?? false;
    message.vpcNetwork = object.vpcNetwork ?? "";
    return message;
  },
};

function createBaseLinkedVpcNetwork(): LinkedVpcNetwork {
  return { uri: "", excludeExportRanges: [] };
}

export const LinkedVpcNetwork: MessageFns<LinkedVpcNetwork> = {
  encode(message: LinkedVpcNetwork, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    for (const v of message.excludeExportRanges) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkedVpcNetwork {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkedVpcNetwork();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.excludeExportRanges.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkedVpcNetwork {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      excludeExportRanges: globalThis.Array.isArray(object?.excludeExportRanges)
        ? object.excludeExportRanges.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: LinkedVpcNetwork): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.excludeExportRanges?.length) {
      obj.excludeExportRanges = message.excludeExportRanges;
    }
    return obj;
  },

  create(base?: DeepPartial<LinkedVpcNetwork>): LinkedVpcNetwork {
    return LinkedVpcNetwork.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LinkedVpcNetwork>): LinkedVpcNetwork {
    const message = createBaseLinkedVpcNetwork();
    message.uri = object.uri ?? "";
    message.excludeExportRanges = object.excludeExportRanges?.map((e) => e) || [];
    return message;
  },
};

function createBaseRouterApplianceInstance(): RouterApplianceInstance {
  return { virtualMachine: "", ipAddress: "" };
}

export const RouterApplianceInstance: MessageFns<RouterApplianceInstance> = {
  encode(message: RouterApplianceInstance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.virtualMachine !== "") {
      writer.uint32(10).string(message.virtualMachine);
    }
    if (message.ipAddress !== "") {
      writer.uint32(26).string(message.ipAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouterApplianceInstance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouterApplianceInstance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.virtualMachine = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouterApplianceInstance {
    return {
      virtualMachine: isSet(object.virtualMachine) ? globalThis.String(object.virtualMachine) : "",
      ipAddress: isSet(object.ipAddress) ? globalThis.String(object.ipAddress) : "",
    };
  },

  toJSON(message: RouterApplianceInstance): unknown {
    const obj: any = {};
    if (message.virtualMachine !== "") {
      obj.virtualMachine = message.virtualMachine;
    }
    if (message.ipAddress !== "") {
      obj.ipAddress = message.ipAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<RouterApplianceInstance>): RouterApplianceInstance {
    return RouterApplianceInstance.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RouterApplianceInstance>): RouterApplianceInstance {
    const message = createBaseRouterApplianceInstance();
    message.virtualMachine = object.virtualMachine ?? "";
    message.ipAddress = object.ipAddress ?? "";
    return message;
  },
};

function createBaseLocationMetadata(): LocationMetadata {
  return { locationFeatures: [] };
}

export const LocationMetadata: MessageFns<LocationMetadata> = {
  encode(message: LocationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.locationFeatures) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.locationFeatures.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.locationFeatures.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocationMetadata {
    return {
      locationFeatures: globalThis.Array.isArray(object?.locationFeatures)
        ? object.locationFeatures.map((e: any) => locationFeatureFromJSON(e))
        : [],
    };
  },

  toJSON(message: LocationMetadata): unknown {
    const obj: any = {};
    if (message.locationFeatures?.length) {
      obj.locationFeatures = message.locationFeatures.map((e) => locationFeatureToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<LocationMetadata>): LocationMetadata {
    return LocationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocationMetadata>): LocationMetadata {
    const message = createBaseLocationMetadata();
    message.locationFeatures = object.locationFeatures?.map((e) => e) || [];
    return message;
  },
};

function createBaseNextHopVpcNetwork(): NextHopVpcNetwork {
  return { uri: "" };
}

export const NextHopVpcNetwork: MessageFns<NextHopVpcNetwork> = {
  encode(message: NextHopVpcNetwork, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NextHopVpcNetwork {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNextHopVpcNetwork();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NextHopVpcNetwork {
    return { uri: isSet(object.uri) ? globalThis.String(object.uri) : "" };
  },

  toJSON(message: NextHopVpcNetwork): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },

  create(base?: DeepPartial<NextHopVpcNetwork>): NextHopVpcNetwork {
    return NextHopVpcNetwork.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NextHopVpcNetwork>): NextHopVpcNetwork {
    const message = createBaseNextHopVpcNetwork();
    message.uri = object.uri ?? "";
    return message;
  },
};

function createBaseSpokeSummary(): SpokeSummary {
  return { spokeTypeCounts: [], spokeStateCounts: [], spokeStateReasonCounts: [] };
}

export const SpokeSummary: MessageFns<SpokeSummary> = {
  encode(message: SpokeSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.spokeTypeCounts) {
      SpokeSummary_SpokeTypeCount.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.spokeStateCounts) {
      SpokeSummary_SpokeStateCount.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.spokeStateReasonCounts) {
      SpokeSummary_SpokeStateReasonCount.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpokeSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpokeSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.spokeTypeCounts.push(SpokeSummary_SpokeTypeCount.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.spokeStateCounts.push(SpokeSummary_SpokeStateCount.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.spokeStateReasonCounts.push(SpokeSummary_SpokeStateReasonCount.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpokeSummary {
    return {
      spokeTypeCounts: globalThis.Array.isArray(object?.spokeTypeCounts)
        ? object.spokeTypeCounts.map((e: any) => SpokeSummary_SpokeTypeCount.fromJSON(e))
        : [],
      spokeStateCounts: globalThis.Array.isArray(object?.spokeStateCounts)
        ? object.spokeStateCounts.map((e: any) => SpokeSummary_SpokeStateCount.fromJSON(e))
        : [],
      spokeStateReasonCounts: globalThis.Array.isArray(object?.spokeStateReasonCounts)
        ? object.spokeStateReasonCounts.map((e: any) => SpokeSummary_SpokeStateReasonCount.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SpokeSummary): unknown {
    const obj: any = {};
    if (message.spokeTypeCounts?.length) {
      obj.spokeTypeCounts = message.spokeTypeCounts.map((e) => SpokeSummary_SpokeTypeCount.toJSON(e));
    }
    if (message.spokeStateCounts?.length) {
      obj.spokeStateCounts = message.spokeStateCounts.map((e) => SpokeSummary_SpokeStateCount.toJSON(e));
    }
    if (message.spokeStateReasonCounts?.length) {
      obj.spokeStateReasonCounts = message.spokeStateReasonCounts.map((e) =>
        SpokeSummary_SpokeStateReasonCount.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<SpokeSummary>): SpokeSummary {
    return SpokeSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SpokeSummary>): SpokeSummary {
    const message = createBaseSpokeSummary();
    message.spokeTypeCounts = object.spokeTypeCounts?.map((e) => SpokeSummary_SpokeTypeCount.fromPartial(e)) || [];
    message.spokeStateCounts = object.spokeStateCounts?.map((e) => SpokeSummary_SpokeStateCount.fromPartial(e)) || [];
    message.spokeStateReasonCounts =
      object.spokeStateReasonCounts?.map((e) => SpokeSummary_SpokeStateReasonCount.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSpokeSummary_SpokeTypeCount(): SpokeSummary_SpokeTypeCount {
  return { spokeType: 0, count: Long.ZERO };
}

export const SpokeSummary_SpokeTypeCount: MessageFns<SpokeSummary_SpokeTypeCount> = {
  encode(message: SpokeSummary_SpokeTypeCount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.spokeType !== 0) {
      writer.uint32(8).int32(message.spokeType);
    }
    if (!message.count.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.count.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpokeSummary_SpokeTypeCount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpokeSummary_SpokeTypeCount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.spokeType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.count = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpokeSummary_SpokeTypeCount {
    return {
      spokeType: isSet(object.spokeType) ? spokeTypeFromJSON(object.spokeType) : 0,
      count: isSet(object.count) ? Long.fromValue(object.count) : Long.ZERO,
    };
  },

  toJSON(message: SpokeSummary_SpokeTypeCount): unknown {
    const obj: any = {};
    if (message.spokeType !== 0) {
      obj.spokeType = spokeTypeToJSON(message.spokeType);
    }
    if (!message.count.equals(Long.ZERO)) {
      obj.count = (message.count || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<SpokeSummary_SpokeTypeCount>): SpokeSummary_SpokeTypeCount {
    return SpokeSummary_SpokeTypeCount.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SpokeSummary_SpokeTypeCount>): SpokeSummary_SpokeTypeCount {
    const message = createBaseSpokeSummary_SpokeTypeCount();
    message.spokeType = object.spokeType ?? 0;
    message.count = (object.count !== undefined && object.count !== null) ? Long.fromValue(object.count) : Long.ZERO;
    return message;
  },
};

function createBaseSpokeSummary_SpokeStateCount(): SpokeSummary_SpokeStateCount {
  return { state: 0, count: Long.ZERO };
}

export const SpokeSummary_SpokeStateCount: MessageFns<SpokeSummary_SpokeStateCount> = {
  encode(message: SpokeSummary_SpokeStateCount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (!message.count.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.count.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpokeSummary_SpokeStateCount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpokeSummary_SpokeStateCount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.count = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpokeSummary_SpokeStateCount {
    return {
      state: isSet(object.state) ? stateFromJSON(object.state) : 0,
      count: isSet(object.count) ? Long.fromValue(object.count) : Long.ZERO,
    };
  },

  toJSON(message: SpokeSummary_SpokeStateCount): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = stateToJSON(message.state);
    }
    if (!message.count.equals(Long.ZERO)) {
      obj.count = (message.count || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<SpokeSummary_SpokeStateCount>): SpokeSummary_SpokeStateCount {
    return SpokeSummary_SpokeStateCount.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SpokeSummary_SpokeStateCount>): SpokeSummary_SpokeStateCount {
    const message = createBaseSpokeSummary_SpokeStateCount();
    message.state = object.state ?? 0;
    message.count = (object.count !== undefined && object.count !== null) ? Long.fromValue(object.count) : Long.ZERO;
    return message;
  },
};

function createBaseSpokeSummary_SpokeStateReasonCount(): SpokeSummary_SpokeStateReasonCount {
  return { stateReasonCode: 0, count: Long.ZERO };
}

export const SpokeSummary_SpokeStateReasonCount: MessageFns<SpokeSummary_SpokeStateReasonCount> = {
  encode(message: SpokeSummary_SpokeStateReasonCount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stateReasonCode !== 0) {
      writer.uint32(8).int32(message.stateReasonCode);
    }
    if (!message.count.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.count.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpokeSummary_SpokeStateReasonCount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpokeSummary_SpokeStateReasonCount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.stateReasonCode = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.count = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpokeSummary_SpokeStateReasonCount {
    return {
      stateReasonCode: isSet(object.stateReasonCode) ? spoke_StateReason_CodeFromJSON(object.stateReasonCode) : 0,
      count: isSet(object.count) ? Long.fromValue(object.count) : Long.ZERO,
    };
  },

  toJSON(message: SpokeSummary_SpokeStateReasonCount): unknown {
    const obj: any = {};
    if (message.stateReasonCode !== 0) {
      obj.stateReasonCode = spoke_StateReason_CodeToJSON(message.stateReasonCode);
    }
    if (!message.count.equals(Long.ZERO)) {
      obj.count = (message.count || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<SpokeSummary_SpokeStateReasonCount>): SpokeSummary_SpokeStateReasonCount {
    return SpokeSummary_SpokeStateReasonCount.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SpokeSummary_SpokeStateReasonCount>): SpokeSummary_SpokeStateReasonCount {
    const message = createBaseSpokeSummary_SpokeStateReasonCount();
    message.stateReasonCode = object.stateReasonCode ?? 0;
    message.count = (object.count !== undefined && object.count !== null) ? Long.fromValue(object.count) : Long.ZERO;
    return message;
  },
};

function createBaseGetGroupRequest(): GetGroupRequest {
  return { name: "" };
}

export const GetGroupRequest: MessageFns<GetGroupRequest> = {
  encode(message: GetGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGroupRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetGroupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetGroupRequest>): GetGroupRequest {
    return GetGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGroupRequest>): GetGroupRequest {
    const message = createBaseGetGroupRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * Network Connectivity Center is a hub-and-spoke abstraction for network
 * connectivity management in Google Cloud. It reduces operational complexity
 * through a simple, centralized connectivity management model.
 */
export type HubServiceDefinition = typeof HubServiceDefinition;
export const HubServiceDefinition = {
  name: "HubService",
  fullName: "google.cloud.networkconnectivity.v1.HubService",
  methods: {
    /** Lists the Network Connectivity Center hubs associated with a given project. */
    listHubs: {
      name: "ListHubs",
      requestType: ListHubsRequest,
      requestStream: false,
      responseType: ListHubsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              125,
              47,
              104,
              117,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details about a Network Connectivity Center hub. */
    getHub: {
      name: "GetHub",
      requestType: GetHubRequest,
      requestStream: false,
      responseType: Hub,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              104,
              117,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Network Connectivity Center hub in the specified project. */
    createHub: {
      name: "CreateHub",
      requestType: CreateHubRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              24,
              10,
              3,
              72,
              117,
              98,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([17, 112, 97, 114, 101, 110, 116, 44, 104, 117, 98, 44, 104, 117, 98, 95, 105, 100])],
          578365826: [
            Buffer.from([
              52,
              58,
              3,
              104,
              117,
              98,
              34,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              125,
              47,
              104,
              117,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the description and/or labels of a Network Connectivity Center
     * hub.
     */
    updateHub: {
      name: "UpdateHub",
      requestType: UpdateHubRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              24,
              10,
              3,
              72,
              117,
              98,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([15, 104, 117, 98, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              56,
              58,
              3,
              104,
              117,
              98,
              50,
              49,
              47,
              118,
              49,
              47,
              123,
              104,
              117,
              98,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              104,
              117,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a Network Connectivity Center hub. */
    deleteHub: {
      name: "DeleteHub",
      requestType: DeleteHubRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              42,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              104,
              117,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists the Network Connectivity Center spokes associated with a
     * specified hub and location. The list includes both spokes that are attached
     * to the hub and spokes that have been proposed but not yet accepted.
     */
    listHubSpokes: {
      name: "ListHubSpokes",
      requestType: ListHubSpokesRequest,
      requestStream: false,
      responseType: ListHubSpokesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              104,
              117,
              98,
              115,
              47,
              42,
              125,
              58,
              108,
              105,
              115,
              116,
              83,
              112,
              111,
              107,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists the Network Connectivity Center spokes in a specified project and
     * location.
     */
    listSpokes: {
      name: "ListSpokes",
      requestType: ListSpokesRequest,
      requestStream: false,
      responseType: ListSpokesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              44,
              18,
              42,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              112,
              111,
              107,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details about a Network Connectivity Center spoke. */
    getSpoke: {
      name: "GetSpoke",
      requestType: GetSpokeRequest,
      requestStream: false,
      responseType: Spoke,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              44,
              18,
              42,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              111,
              107,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a Network Connectivity Center spoke. */
    createSpoke: {
      name: "CreateSpoke",
      requestType: CreateSpokeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              26,
              10,
              5,
              83,
              112,
              111,
              107,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              21,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              112,
              111,
              107,
              101,
              44,
              115,
              112,
              111,
              107,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              51,
              58,
              5,
              115,
              112,
              111,
              107,
              101,
              34,
              42,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              112,
              111,
              107,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a Network Connectivity Center spoke. */
    updateSpoke: {
      name: "UpdateSpoke",
      requestType: UpdateSpokeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              26,
              10,
              5,
              83,
              112,
              111,
              107,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([17, 115, 112, 111, 107, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              57,
              58,
              5,
              115,
              112,
              111,
              107,
              101,
              50,
              48,
              47,
              118,
              49,
              47,
              123,
              115,
              112,
              111,
              107,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              111,
              107,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Rejects a Network Connectivity Center spoke from being attached to a hub.
     * If the spoke was previously in the `ACTIVE` state, it
     * transitions to the `INACTIVE` state and is no longer able to
     * connect to other spokes that are attached to the hub.
     */
    rejectHubSpoke: {
      name: "RejectHubSpoke",
      requestType: RejectHubSpokeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              43,
              10,
              22,
              82,
              101,
              106,
              101,
              99,
              116,
              72,
              117,
              98,
              83,
              112,
              111,
              107,
              101,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([14, 110, 97, 109, 101, 44, 115, 112, 111, 107, 101, 95, 117, 114, 105])],
          578365826: [
            Buffer.from([
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              104,
              117,
              98,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              106,
              101,
              99,
              116,
              83,
              112,
              111,
              107,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Accepts a proposal to attach a Network Connectivity Center spoke
     * to a hub.
     */
    acceptHubSpoke: {
      name: "AcceptHubSpoke",
      requestType: AcceptHubSpokeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              43,
              10,
              22,
              65,
              99,
              99,
              101,
              112,
              116,
              72,
              117,
              98,
              83,
              112,
              111,
              107,
              101,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([14, 110, 97, 109, 101, 44, 115, 112, 111, 107, 101, 95, 117, 114, 105])],
          578365826: [
            Buffer.from([
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              104,
              117,
              98,
              115,
              47,
              42,
              125,
              58,
              97,
              99,
              99,
              101,
              112,
              116,
              83,
              112,
              111,
              107,
              101,
            ]),
          ],
        },
      },
    },
    /** Deletes a Network Connectivity Center spoke. */
    deleteSpoke: {
      name: "DeleteSpoke",
      requestType: DeleteSpokeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              44,
              42,
              42,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              111,
              107,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets details about a Network Connectivity Center route table. */
    getRouteTable: {
      name: "GetRouteTable",
      requestType: GetRouteTableRequest,
      requestStream: false,
      responseType: RouteTable,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              104,
              117,
              98,
              115,
              47,
              42,
              47,
              114,
              111,
              117,
              116,
              101,
              84,
              97,
              98,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets details about the specified route. */
    getRoute: {
      name: "GetRoute",
      requestType: GetRouteRequest,
      requestStream: false,
      responseType: Route,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              70,
              18,
              68,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              104,
              117,
              98,
              115,
              47,
              42,
              47,
              114,
              111,
              117,
              116,
              101,
              84,
              97,
              98,
              108,
              101,
              115,
              47,
              42,
              47,
              114,
              111,
              117,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists routes in a given project. */
    listRoutes: {
      name: "ListRoutes",
      requestType: ListRoutesRequest,
      requestStream: false,
      responseType: ListRoutesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              70,
              18,
              68,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              104,
              117,
              98,
              115,
              47,
              42,
              47,
              114,
              111,
              117,
              116,
              101,
              84,
              97,
              98,
              108,
              101,
              115,
              47,
              42,
              125,
              47,
              114,
              111,
              117,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists route tables in a given project. */
    listRouteTables: {
      name: "ListRouteTables",
      requestType: ListRouteTablesRequest,
      requestStream: false,
      responseType: ListRouteTablesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              104,
              117,
              98,
              115,
              47,
              42,
              125,
              47,
              114,
              111,
              117,
              116,
              101,
              84,
              97,
              98,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details about a Network Connectivity Center group. */
    getGroup: {
      name: "GetGroup",
      requestType: GetGroupRequest,
      requestStream: false,
      responseType: Group,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              104,
              117,
              98,
              115,
              47,
              42,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists groups in a given hub. */
    listGroups: {
      name: "ListGroups",
      requestType: ListGroupsRequest,
      requestStream: false,
      responseType: ListGroupsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              104,
              117,
              98,
              115,
              47,
              42,
              125,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface HubServiceImplementation<CallContextExt = {}> {
  /** Lists the Network Connectivity Center hubs associated with a given project. */
  listHubs(request: ListHubsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListHubsResponse>>;
  /** Gets details about a Network Connectivity Center hub. */
  getHub(request: GetHubRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Hub>>;
  /** Creates a new Network Connectivity Center hub in the specified project. */
  createHub(request: CreateHubRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Updates the description and/or labels of a Network Connectivity Center
   * hub.
   */
  updateHub(request: UpdateHubRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes a Network Connectivity Center hub. */
  deleteHub(request: DeleteHubRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Lists the Network Connectivity Center spokes associated with a
   * specified hub and location. The list includes both spokes that are attached
   * to the hub and spokes that have been proposed but not yet accepted.
   */
  listHubSpokes(
    request: ListHubSpokesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListHubSpokesResponse>>;
  /**
   * Lists the Network Connectivity Center spokes in a specified project and
   * location.
   */
  listSpokes(
    request: ListSpokesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSpokesResponse>>;
  /** Gets details about a Network Connectivity Center spoke. */
  getSpoke(request: GetSpokeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Spoke>>;
  /** Creates a Network Connectivity Center spoke. */
  createSpoke(request: CreateSpokeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a Network Connectivity Center spoke. */
  updateSpoke(request: UpdateSpokeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Rejects a Network Connectivity Center spoke from being attached to a hub.
   * If the spoke was previously in the `ACTIVE` state, it
   * transitions to the `INACTIVE` state and is no longer able to
   * connect to other spokes that are attached to the hub.
   */
  rejectHubSpoke(
    request: RejectHubSpokeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Accepts a proposal to attach a Network Connectivity Center spoke
   * to a hub.
   */
  acceptHubSpoke(
    request: AcceptHubSpokeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a Network Connectivity Center spoke. */
  deleteSpoke(request: DeleteSpokeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Gets details about a Network Connectivity Center route table. */
  getRouteTable(request: GetRouteTableRequest, context: CallContext & CallContextExt): Promise<DeepPartial<RouteTable>>;
  /** Gets details about the specified route. */
  getRoute(request: GetRouteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Route>>;
  /** Lists routes in a given project. */
  listRoutes(
    request: ListRoutesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRoutesResponse>>;
  /** Lists route tables in a given project. */
  listRouteTables(
    request: ListRouteTablesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRouteTablesResponse>>;
  /** Gets details about a Network Connectivity Center group. */
  getGroup(request: GetGroupRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Group>>;
  /** Lists groups in a given hub. */
  listGroups(
    request: ListGroupsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListGroupsResponse>>;
}

export interface HubServiceClient<CallOptionsExt = {}> {
  /** Lists the Network Connectivity Center hubs associated with a given project. */
  listHubs(request: DeepPartial<ListHubsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListHubsResponse>;
  /** Gets details about a Network Connectivity Center hub. */
  getHub(request: DeepPartial<GetHubRequest>, options?: CallOptions & CallOptionsExt): Promise<Hub>;
  /** Creates a new Network Connectivity Center hub in the specified project. */
  createHub(request: DeepPartial<CreateHubRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Updates the description and/or labels of a Network Connectivity Center
   * hub.
   */
  updateHub(request: DeepPartial<UpdateHubRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes a Network Connectivity Center hub. */
  deleteHub(request: DeepPartial<DeleteHubRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Lists the Network Connectivity Center spokes associated with a
   * specified hub and location. The list includes both spokes that are attached
   * to the hub and spokes that have been proposed but not yet accepted.
   */
  listHubSpokes(
    request: DeepPartial<ListHubSpokesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListHubSpokesResponse>;
  /**
   * Lists the Network Connectivity Center spokes in a specified project and
   * location.
   */
  listSpokes(
    request: DeepPartial<ListSpokesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSpokesResponse>;
  /** Gets details about a Network Connectivity Center spoke. */
  getSpoke(request: DeepPartial<GetSpokeRequest>, options?: CallOptions & CallOptionsExt): Promise<Spoke>;
  /** Creates a Network Connectivity Center spoke. */
  createSpoke(request: DeepPartial<CreateSpokeRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Updates the parameters of a Network Connectivity Center spoke. */
  updateSpoke(request: DeepPartial<UpdateSpokeRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Rejects a Network Connectivity Center spoke from being attached to a hub.
   * If the spoke was previously in the `ACTIVE` state, it
   * transitions to the `INACTIVE` state and is no longer able to
   * connect to other spokes that are attached to the hub.
   */
  rejectHubSpoke(
    request: DeepPartial<RejectHubSpokeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Accepts a proposal to attach a Network Connectivity Center spoke
   * to a hub.
   */
  acceptHubSpoke(
    request: DeepPartial<AcceptHubSpokeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a Network Connectivity Center spoke. */
  deleteSpoke(request: DeepPartial<DeleteSpokeRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Gets details about a Network Connectivity Center route table. */
  getRouteTable(
    request: DeepPartial<GetRouteTableRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RouteTable>;
  /** Gets details about the specified route. */
  getRoute(request: DeepPartial<GetRouteRequest>, options?: CallOptions & CallOptionsExt): Promise<Route>;
  /** Lists routes in a given project. */
  listRoutes(
    request: DeepPartial<ListRoutesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRoutesResponse>;
  /** Lists route tables in a given project. */
  listRouteTables(
    request: DeepPartial<ListRouteTablesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRouteTablesResponse>;
  /** Gets details about a Network Connectivity Center group. */
  getGroup(request: DeepPartial<GetGroupRequest>, options?: CallOptions & CallOptionsExt): Promise<Group>;
  /** Lists groups in a given hub. */
  listGroups(
    request: DeepPartial<ListGroupsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListGroupsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
