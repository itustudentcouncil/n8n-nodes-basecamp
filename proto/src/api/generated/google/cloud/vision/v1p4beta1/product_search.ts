// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/vision/v1p4beta1/product_search.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { BoundingPoly } from "./geometry.js";
import { Product } from "./product_search_service.js";

export const protobufPackage = "google.cloud.vision.v1p4beta1";

/** Parameters for a product search request. */
export interface ProductSearchParams {
  /**
   * The bounding polygon around the area of interest in the image.
   * If it is not specified, system discretion will be applied.
   */
  boundingPoly:
    | BoundingPoly
    | undefined;
  /**
   * The resource name of a
   * [ProductSet][google.cloud.vision.v1p4beta1.ProductSet] to be searched for
   * similar images.
   *
   * Format is:
   * `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`.
   */
  productSet: string;
  /**
   * The list of product categories to search in. Currently, we only consider
   * the first category, and either "homegoods-v2", "apparel-v2", "toys-v2",
   * "packagedgoods-v1", or "general-v1" should be specified. The legacy
   * categories "homegoods", "apparel", and "toys" are still supported but will
   * be deprecated. For new products, please use "homegoods-v2", "apparel-v2",
   * or "toys-v2" for better product search accuracy. It is recommended to
   * migrate existing products to these categories as well.
   */
  productCategories: string[];
  /**
   * The filtering expression. This can be used to restrict search results based
   * on Product labels. We currently support an AND of OR of key-value
   * expressions, where each expression within an OR must have the same key. An
   * '=' should be used to connect the key and value.
   *
   * For example, "(color = red OR color = blue) AND brand = Google" is
   * acceptable, but "(color = red OR brand = Google)" is not acceptable.
   * "color: red" is not acceptable because it uses a ':' instead of an '='.
   */
  filter: string;
}

/** Results for a product search request. */
export interface ProductSearchResults {
  /**
   * Timestamp of the index which provided these results. Products added to the
   * product set and products removed from the product set after this time are
   * not reflected in the current results.
   */
  indexTime:
    | Date
    | undefined;
  /** List of results, one for each product match. */
  results: ProductSearchResults_Result[];
  /**
   * List of results grouped by products detected in the query image. Each entry
   * corresponds to one bounding polygon in the query image, and contains the
   * matching products specific to that region. There may be duplicate product
   * matches in the union of all the per-product results.
   */
  productGroupedResults: ProductSearchResults_GroupedResult[];
}

/** Information about a product. */
export interface ProductSearchResults_Result {
  /** The Product. */
  product:
    | Product
    | undefined;
  /**
   * A confidence level on the match, ranging from 0 (no confidence) to
   * 1 (full confidence).
   */
  score: number;
  /**
   * The resource name of the image from the product that is the closest match
   * to the query.
   */
  image: string;
}

/** Prediction for what the object in the bounding box is. */
export interface ProductSearchResults_ObjectAnnotation {
  /** Object ID that should align with EntityAnnotation mid. */
  mid: string;
  /**
   * The BCP-47 language code, such as "en-US" or "sr-Latn". For more
   * information, see
   * http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
   */
  languageCode: string;
  /** Object name, expressed in its `language_code` language. */
  name: string;
  /** Score of the result. Range [0, 1]. */
  score: number;
}

/**
 * Information about the products similar to a single product in a query
 * image.
 */
export interface ProductSearchResults_GroupedResult {
  /** The bounding polygon around the product detected in the query image. */
  boundingPoly:
    | BoundingPoly
    | undefined;
  /** List of results, one for each product match. */
  results: ProductSearchResults_Result[];
  /** List of generic predictions for the object in the bounding box. */
  objectAnnotations: ProductSearchResults_ObjectAnnotation[];
}

function createBaseProductSearchParams(): ProductSearchParams {
  return { boundingPoly: undefined, productSet: "", productCategories: [], filter: "" };
}

export const ProductSearchParams: MessageFns<ProductSearchParams> = {
  encode(message: ProductSearchParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.boundingPoly !== undefined) {
      BoundingPoly.encode(message.boundingPoly, writer.uint32(74).fork()).join();
    }
    if (message.productSet !== "") {
      writer.uint32(50).string(message.productSet);
    }
    for (const v of message.productCategories) {
      writer.uint32(58).string(v!);
    }
    if (message.filter !== "") {
      writer.uint32(66).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductSearchParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductSearchParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 9:
          if (tag !== 74) {
            break;
          }

          message.boundingPoly = BoundingPoly.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.productSet = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.productCategories.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductSearchParams {
    return {
      boundingPoly: isSet(object.boundingPoly) ? BoundingPoly.fromJSON(object.boundingPoly) : undefined,
      productSet: isSet(object.productSet) ? globalThis.String(object.productSet) : "",
      productCategories: globalThis.Array.isArray(object?.productCategories)
        ? object.productCategories.map((e: any) => globalThis.String(e))
        : [],
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ProductSearchParams): unknown {
    const obj: any = {};
    if (message.boundingPoly !== undefined) {
      obj.boundingPoly = BoundingPoly.toJSON(message.boundingPoly);
    }
    if (message.productSet !== "") {
      obj.productSet = message.productSet;
    }
    if (message.productCategories?.length) {
      obj.productCategories = message.productCategories;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ProductSearchParams>): ProductSearchParams {
    return ProductSearchParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductSearchParams>): ProductSearchParams {
    const message = createBaseProductSearchParams();
    message.boundingPoly = (object.boundingPoly !== undefined && object.boundingPoly !== null)
      ? BoundingPoly.fromPartial(object.boundingPoly)
      : undefined;
    message.productSet = object.productSet ?? "";
    message.productCategories = object.productCategories?.map((e) => e) || [];
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseProductSearchResults(): ProductSearchResults {
  return { indexTime: undefined, results: [], productGroupedResults: [] };
}

export const ProductSearchResults: MessageFns<ProductSearchResults> = {
  encode(message: ProductSearchResults, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.indexTime !== undefined) {
      Timestamp.encode(toTimestamp(message.indexTime), writer.uint32(18).fork()).join();
    }
    for (const v of message.results) {
      ProductSearchResults_Result.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.productGroupedResults) {
      ProductSearchResults_GroupedResult.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductSearchResults {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductSearchResults();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.indexTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.results.push(ProductSearchResults_Result.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.productGroupedResults.push(ProductSearchResults_GroupedResult.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductSearchResults {
    return {
      indexTime: isSet(object.indexTime) ? fromJsonTimestamp(object.indexTime) : undefined,
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => ProductSearchResults_Result.fromJSON(e))
        : [],
      productGroupedResults: globalThis.Array.isArray(object?.productGroupedResults)
        ? object.productGroupedResults.map((e: any) => ProductSearchResults_GroupedResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ProductSearchResults): unknown {
    const obj: any = {};
    if (message.indexTime !== undefined) {
      obj.indexTime = message.indexTime.toISOString();
    }
    if (message.results?.length) {
      obj.results = message.results.map((e) => ProductSearchResults_Result.toJSON(e));
    }
    if (message.productGroupedResults?.length) {
      obj.productGroupedResults = message.productGroupedResults.map((e) =>
        ProductSearchResults_GroupedResult.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<ProductSearchResults>): ProductSearchResults {
    return ProductSearchResults.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductSearchResults>): ProductSearchResults {
    const message = createBaseProductSearchResults();
    message.indexTime = object.indexTime ?? undefined;
    message.results = object.results?.map((e) => ProductSearchResults_Result.fromPartial(e)) || [];
    message.productGroupedResults =
      object.productGroupedResults?.map((e) => ProductSearchResults_GroupedResult.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProductSearchResults_Result(): ProductSearchResults_Result {
  return { product: undefined, score: 0, image: "" };
}

export const ProductSearchResults_Result: MessageFns<ProductSearchResults_Result> = {
  encode(message: ProductSearchResults_Result, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.product !== undefined) {
      Product.encode(message.product, writer.uint32(10).fork()).join();
    }
    if (message.score !== 0) {
      writer.uint32(21).float(message.score);
    }
    if (message.image !== "") {
      writer.uint32(26).string(message.image);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductSearchResults_Result {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductSearchResults_Result();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.product = Product.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.score = reader.float();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.image = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductSearchResults_Result {
    return {
      product: isSet(object.product) ? Product.fromJSON(object.product) : undefined,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      image: isSet(object.image) ? globalThis.String(object.image) : "",
    };
  },

  toJSON(message: ProductSearchResults_Result): unknown {
    const obj: any = {};
    if (message.product !== undefined) {
      obj.product = Product.toJSON(message.product);
    }
    if (message.score !== 0) {
      obj.score = message.score;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    return obj;
  },

  create(base?: DeepPartial<ProductSearchResults_Result>): ProductSearchResults_Result {
    return ProductSearchResults_Result.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductSearchResults_Result>): ProductSearchResults_Result {
    const message = createBaseProductSearchResults_Result();
    message.product = (object.product !== undefined && object.product !== null)
      ? Product.fromPartial(object.product)
      : undefined;
    message.score = object.score ?? 0;
    message.image = object.image ?? "";
    return message;
  },
};

function createBaseProductSearchResults_ObjectAnnotation(): ProductSearchResults_ObjectAnnotation {
  return { mid: "", languageCode: "", name: "", score: 0 };
}

export const ProductSearchResults_ObjectAnnotation: MessageFns<ProductSearchResults_ObjectAnnotation> = {
  encode(message: ProductSearchResults_ObjectAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mid !== "") {
      writer.uint32(10).string(message.mid);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.score !== 0) {
      writer.uint32(37).float(message.score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductSearchResults_ObjectAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductSearchResults_ObjectAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mid = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.score = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductSearchResults_ObjectAnnotation {
    return {
      mid: isSet(object.mid) ? globalThis.String(object.mid) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
    };
  },

  toJSON(message: ProductSearchResults_ObjectAnnotation): unknown {
    const obj: any = {};
    if (message.mid !== "") {
      obj.mid = message.mid;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.score !== 0) {
      obj.score = message.score;
    }
    return obj;
  },

  create(base?: DeepPartial<ProductSearchResults_ObjectAnnotation>): ProductSearchResults_ObjectAnnotation {
    return ProductSearchResults_ObjectAnnotation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductSearchResults_ObjectAnnotation>): ProductSearchResults_ObjectAnnotation {
    const message = createBaseProductSearchResults_ObjectAnnotation();
    message.mid = object.mid ?? "";
    message.languageCode = object.languageCode ?? "";
    message.name = object.name ?? "";
    message.score = object.score ?? 0;
    return message;
  },
};

function createBaseProductSearchResults_GroupedResult(): ProductSearchResults_GroupedResult {
  return { boundingPoly: undefined, results: [], objectAnnotations: [] };
}

export const ProductSearchResults_GroupedResult: MessageFns<ProductSearchResults_GroupedResult> = {
  encode(message: ProductSearchResults_GroupedResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.boundingPoly !== undefined) {
      BoundingPoly.encode(message.boundingPoly, writer.uint32(10).fork()).join();
    }
    for (const v of message.results) {
      ProductSearchResults_Result.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.objectAnnotations) {
      ProductSearchResults_ObjectAnnotation.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductSearchResults_GroupedResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductSearchResults_GroupedResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.boundingPoly = BoundingPoly.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.results.push(ProductSearchResults_Result.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.objectAnnotations.push(ProductSearchResults_ObjectAnnotation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductSearchResults_GroupedResult {
    return {
      boundingPoly: isSet(object.boundingPoly) ? BoundingPoly.fromJSON(object.boundingPoly) : undefined,
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => ProductSearchResults_Result.fromJSON(e))
        : [],
      objectAnnotations: globalThis.Array.isArray(object?.objectAnnotations)
        ? object.objectAnnotations.map((e: any) => ProductSearchResults_ObjectAnnotation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ProductSearchResults_GroupedResult): unknown {
    const obj: any = {};
    if (message.boundingPoly !== undefined) {
      obj.boundingPoly = BoundingPoly.toJSON(message.boundingPoly);
    }
    if (message.results?.length) {
      obj.results = message.results.map((e) => ProductSearchResults_Result.toJSON(e));
    }
    if (message.objectAnnotations?.length) {
      obj.objectAnnotations = message.objectAnnotations.map((e) => ProductSearchResults_ObjectAnnotation.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ProductSearchResults_GroupedResult>): ProductSearchResults_GroupedResult {
    return ProductSearchResults_GroupedResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductSearchResults_GroupedResult>): ProductSearchResults_GroupedResult {
    const message = createBaseProductSearchResults_GroupedResult();
    message.boundingPoly = (object.boundingPoly !== undefined && object.boundingPoly !== null)
      ? BoundingPoly.fromPartial(object.boundingPoly)
      : undefined;
    message.results = object.results?.map((e) => ProductSearchResults_Result.fromPartial(e)) || [];
    message.objectAnnotations =
      object.objectAnnotations?.map((e) => ProductSearchResults_ObjectAnnotation.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
