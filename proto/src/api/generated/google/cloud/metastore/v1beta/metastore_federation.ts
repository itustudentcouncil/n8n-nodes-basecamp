// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/metastore/v1beta/metastore_federation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.metastore.v1beta";

/** Represents a federation of multiple backend metastores. */
export interface Federation {
  /**
   * Immutable. The relative resource name of the federation, of the
   * form:
   * projects/{project_number}/locations/{location_id}/federations/{federation_id}`.
   */
  name: string;
  /** Output only. The time when the metastore federation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time when the metastore federation was last updated. */
  updateTime:
    | Date
    | undefined;
  /** User-defined labels for the metastore federation. */
  labels: { [key: string]: string };
  /**
   * Immutable. The Apache Hive metastore version of the federation. All backend
   * metastore versions must be compatible with the federation version.
   */
  version: string;
  /**
   * A map from `BackendMetastore` rank to `BackendMetastore`s from which the
   * federation service serves metadata at query time. The map key represents
   * the order in which `BackendMetastore`s should be evaluated to resolve
   * database names at query time and should be greater than or equal to zero. A
   * `BackendMetastore` with a lower number will be evaluated before a
   * `BackendMetastore` with a higher number.
   */
  backendMetastores: { [key: number]: BackendMetastore };
  /** Output only. The federation endpoint. */
  endpointUri: string;
  /** Output only. The current state of the federation. */
  state: Federation_State;
  /**
   * Output only. Additional information about the current state of the
   * metastore federation, if available.
   */
  stateMessage: string;
  /**
   * Output only. The globally unique resource identifier of the metastore
   * federation.
   */
  uid: string;
}

/** The current state of the federation. */
export enum Federation_State {
  /** STATE_UNSPECIFIED - The state of the metastore federation is unknown. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - The metastore federation is in the process of being created. */
  CREATING = 1,
  /** ACTIVE - The metastore federation is running and ready to serve queries. */
  ACTIVE = 2,
  /**
   * UPDATING - The metastore federation is being updated. It remains usable but cannot
   * accept additional update requests or be deleted at this time.
   */
  UPDATING = 3,
  /** DELETING - The metastore federation is undergoing deletion. It cannot be used. */
  DELETING = 4,
  /**
   * ERROR - The metastore federation has encountered an error and cannot be used. The
   * metastore federation should be deleted.
   */
  ERROR = 5,
  UNRECOGNIZED = -1,
}

export function federation_StateFromJSON(object: any): Federation_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Federation_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Federation_State.CREATING;
    case 2:
    case "ACTIVE":
      return Federation_State.ACTIVE;
    case 3:
    case "UPDATING":
      return Federation_State.UPDATING;
    case 4:
    case "DELETING":
      return Federation_State.DELETING;
    case 5:
    case "ERROR":
      return Federation_State.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Federation_State.UNRECOGNIZED;
  }
}

export function federation_StateToJSON(object: Federation_State): string {
  switch (object) {
    case Federation_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Federation_State.CREATING:
      return "CREATING";
    case Federation_State.ACTIVE:
      return "ACTIVE";
    case Federation_State.UPDATING:
      return "UPDATING";
    case Federation_State.DELETING:
      return "DELETING";
    case Federation_State.ERROR:
      return "ERROR";
    case Federation_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Federation_LabelsEntry {
  key: string;
  value: string;
}

export interface Federation_BackendMetastoresEntry {
  key: number;
  value: BackendMetastore | undefined;
}

/** Represents a backend metastore for the federation. */
export interface BackendMetastore {
  /**
   * The relative resource name of the metastore that is being federated.
   * The formats of the relative resource names for the currently supported
   * metastores are listed below:
   *
   * * BigQuery
   *     * `projects/{project_id}`
   * * Dataproc Metastore
   *     * `projects/{project_id}/locations/{location}/services/{service_id}`
   */
  name: string;
  /** The type of the backend metastore. */
  metastoreType: BackendMetastore_MetastoreType;
}

/** The type of the backend metastore. */
export enum BackendMetastore_MetastoreType {
  /** METASTORE_TYPE_UNSPECIFIED - The metastore type is not set. */
  METASTORE_TYPE_UNSPECIFIED = 0,
  /** DATAPLEX - The backend metastore is Dataplex. */
  DATAPLEX = 1,
  /** BIGQUERY - The backend metastore is BigQuery. */
  BIGQUERY = 2,
  /** DATAPROC_METASTORE - The backend metastore is Dataproc Metastore. */
  DATAPROC_METASTORE = 3,
  UNRECOGNIZED = -1,
}

export function backendMetastore_MetastoreTypeFromJSON(object: any): BackendMetastore_MetastoreType {
  switch (object) {
    case 0:
    case "METASTORE_TYPE_UNSPECIFIED":
      return BackendMetastore_MetastoreType.METASTORE_TYPE_UNSPECIFIED;
    case 1:
    case "DATAPLEX":
      return BackendMetastore_MetastoreType.DATAPLEX;
    case 2:
    case "BIGQUERY":
      return BackendMetastore_MetastoreType.BIGQUERY;
    case 3:
    case "DATAPROC_METASTORE":
      return BackendMetastore_MetastoreType.DATAPROC_METASTORE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BackendMetastore_MetastoreType.UNRECOGNIZED;
  }
}

export function backendMetastore_MetastoreTypeToJSON(object: BackendMetastore_MetastoreType): string {
  switch (object) {
    case BackendMetastore_MetastoreType.METASTORE_TYPE_UNSPECIFIED:
      return "METASTORE_TYPE_UNSPECIFIED";
    case BackendMetastore_MetastoreType.DATAPLEX:
      return "DATAPLEX";
    case BackendMetastore_MetastoreType.BIGQUERY:
      return "BIGQUERY";
    case BackendMetastore_MetastoreType.DATAPROC_METASTORE:
      return "DATAPROC_METASTORE";
    case BackendMetastore_MetastoreType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request message for ListFederations. */
export interface ListFederationsRequest {
  /**
   * Required. The relative resource name of the location of metastore
   * federations to list, in the following form:
   * `projects/{project_number}/locations/{location_id}`.
   */
  parent: string;
  /**
   * Optional. The maximum number of federations to return. The response may
   * contain less than the maximum number. If unspecified, no more than 500
   * services are returned. The maximum value is 1000; values above 1000 are
   * changed to 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous ListFederationServices
   * call. Provide this token to retrieve the subsequent page.
   *
   * To retrieve the first page, supply an empty page token.
   *
   * When paginating, other parameters provided to
   * ListFederationServices must match the call that provided the
   * page token.
   */
  pageToken: string;
  /** Optional. The filter to apply to list results. */
  filter: string;
  /**
   * Optional. Specify the ordering of results as described in [Sorting
   * Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   * If not specified, the results will be sorted in the default order.
   */
  orderBy: string;
}

/** Response message for ListFederations */
export interface ListFederationsResponse {
  /** The services in the specified location. */
  federations: Federation[];
  /**
   * A token that can be sent as `page_token` to retrieve the next page. If this
   * field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message for GetFederation. */
export interface GetFederationRequest {
  /**
   * Required. The relative resource name of the metastore federation to
   * retrieve, in the following form:
   *
   * `projects/{project_number}/locations/{location_id}/federations/{federation_id}`.
   */
  name: string;
}

/** Request message for CreateFederation. */
export interface CreateFederationRequest {
  /**
   * Required. The relative resource name of the location in which to create a
   * federation service, in the following form:
   *
   * `projects/{project_number}/locations/{location_id}`.
   */
  parent: string;
  /**
   * Required. The ID of the metastore federation, which is used as the final
   * component of the metastore federation's name.
   *
   * This value must be between 2 and 63 characters long inclusive, begin with a
   * letter, end with a letter or number, and consist of alpha-numeric
   * ASCII characters or hyphens.
   */
  federationId: string;
  /**
   * Required. The Metastore Federation to create. The `name` field is
   * ignored. The ID of the created metastore federation must be
   * provided in the request's `federation_id` field.
   */
  federation:
    | Federation
    | undefined;
  /**
   * Optional. A request ID. Specify a unique request ID to allow the server to
   * ignore the request if it has completed. The server will ignore subsequent
   * requests that provide a duplicate request ID for at least 60 minutes after
   * the first request.
   *
   * For example, if an initial request times out, followed by another request
   * with the same request ID, the server ignores the second request to prevent
   * the creation of duplicate commitments.
   *
   * The request ID must be a valid
   * [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
   * A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
   */
  requestId: string;
}

/** Request message for UpdateFederation. */
export interface UpdateFederationRequest {
  /**
   * Required. A field mask used to specify the fields to be overwritten in the
   * metastore federation resource by the update.
   * Fields specified in the `update_mask` are relative to the resource (not
   * to the full request). A field is overwritten if it is in the mask.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * Required. The metastore federation to update. The server only merges fields
   * in the service if they are specified in `update_mask`.
   *
   * The metastore federation's `name` field is used to identify the
   * metastore service to be updated.
   */
  federation:
    | Federation
    | undefined;
  /**
   * Optional. A request ID. Specify a unique request ID to allow the server to
   * ignore the request if it has completed. The server will ignore subsequent
   * requests that provide a duplicate request ID for at least 60 minutes after
   * the first request.
   *
   * For example, if an initial request times out, followed by another request
   * with the same request ID, the server ignores the second request to prevent
   * the creation of duplicate commitments.
   *
   * The request ID must be a valid
   * [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
   * A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
   */
  requestId: string;
}

/** Request message for DeleteFederation. */
export interface DeleteFederationRequest {
  /**
   * Required. The relative resource name of the metastore federation to delete,
   * in the following form:
   *
   * `projects/{project_number}/locations/{location_id}/federations/{federation_id}`.
   */
  name: string;
  /**
   * Optional. A request ID. Specify a unique request ID to allow the server to
   * ignore the request if it has completed. The server will ignore subsequent
   * requests that provide a duplicate request ID for at least 60 minutes after
   * the first request.
   *
   * For example, if an initial request times out, followed by another request
   * with the same request ID, the server ignores the second request to prevent
   * the creation of duplicate commitments.
   *
   * The request ID must be a valid
   * [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
   * A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
   */
  requestId: string;
}

function createBaseFederation(): Federation {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    version: "",
    backendMetastores: {},
    endpointUri: "",
    state: 0,
    stateMessage: "",
    uid: "",
  };
}

export const Federation: MessageFns<Federation> = {
  encode(message: Federation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Federation_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.version !== "") {
      writer.uint32(42).string(message.version);
    }
    Object.entries(message.backendMetastores).forEach(([key, value]) => {
      Federation_BackendMetastoresEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.endpointUri !== "") {
      writer.uint32(58).string(message.endpointUri);
    }
    if (message.state !== 0) {
      writer.uint32(64).int32(message.state);
    }
    if (message.stateMessage !== "") {
      writer.uint32(74).string(message.stateMessage);
    }
    if (message.uid !== "") {
      writer.uint32(82).string(message.uid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Federation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFederation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Federation_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.version = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = Federation_BackendMetastoresEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.backendMetastores[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.endpointUri = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.stateMessage = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.uid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Federation {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      backendMetastores: isObject(object.backendMetastores)
        ? Object.entries(object.backendMetastores).reduce<{ [key: number]: BackendMetastore }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = BackendMetastore.fromJSON(value);
          return acc;
        }, {})
        : {},
      endpointUri: isSet(object.endpointUri) ? globalThis.String(object.endpointUri) : "",
      state: isSet(object.state) ? federation_StateFromJSON(object.state) : 0,
      stateMessage: isSet(object.stateMessage) ? globalThis.String(object.stateMessage) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
    };
  },

  toJSON(message: Federation): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.backendMetastores) {
      const entries = Object.entries(message.backendMetastores);
      if (entries.length > 0) {
        obj.backendMetastores = {};
        entries.forEach(([k, v]) => {
          obj.backendMetastores[k] = BackendMetastore.toJSON(v);
        });
      }
    }
    if (message.endpointUri !== "") {
      obj.endpointUri = message.endpointUri;
    }
    if (message.state !== 0) {
      obj.state = federation_StateToJSON(message.state);
    }
    if (message.stateMessage !== "") {
      obj.stateMessage = message.stateMessage;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    return obj;
  },

  create(base?: DeepPartial<Federation>): Federation {
    return Federation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Federation>): Federation {
    const message = createBaseFederation();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.version = object.version ?? "";
    message.backendMetastores = Object.entries(object.backendMetastores ?? {}).reduce<
      { [key: number]: BackendMetastore }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = BackendMetastore.fromPartial(value);
      }
      return acc;
    }, {});
    message.endpointUri = object.endpointUri ?? "";
    message.state = object.state ?? 0;
    message.stateMessage = object.stateMessage ?? "";
    message.uid = object.uid ?? "";
    return message;
  },
};

function createBaseFederation_LabelsEntry(): Federation_LabelsEntry {
  return { key: "", value: "" };
}

export const Federation_LabelsEntry: MessageFns<Federation_LabelsEntry> = {
  encode(message: Federation_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Federation_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFederation_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Federation_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Federation_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Federation_LabelsEntry>): Federation_LabelsEntry {
    return Federation_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Federation_LabelsEntry>): Federation_LabelsEntry {
    const message = createBaseFederation_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseFederation_BackendMetastoresEntry(): Federation_BackendMetastoresEntry {
  return { key: 0, value: undefined };
}

export const Federation_BackendMetastoresEntry: MessageFns<Federation_BackendMetastoresEntry> = {
  encode(message: Federation_BackendMetastoresEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== undefined) {
      BackendMetastore.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Federation_BackendMetastoresEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFederation_BackendMetastoresEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = BackendMetastore.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Federation_BackendMetastoresEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? BackendMetastore.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Federation_BackendMetastoresEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = BackendMetastore.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Federation_BackendMetastoresEntry>): Federation_BackendMetastoresEntry {
    return Federation_BackendMetastoresEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Federation_BackendMetastoresEntry>): Federation_BackendMetastoresEntry {
    const message = createBaseFederation_BackendMetastoresEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? BackendMetastore.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseBackendMetastore(): BackendMetastore {
  return { name: "", metastoreType: 0 };
}

export const BackendMetastore: MessageFns<BackendMetastore> = {
  encode(message: BackendMetastore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.metastoreType !== 0) {
      writer.uint32(16).int32(message.metastoreType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackendMetastore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackendMetastore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.metastoreType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackendMetastore {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      metastoreType: isSet(object.metastoreType) ? backendMetastore_MetastoreTypeFromJSON(object.metastoreType) : 0,
    };
  },

  toJSON(message: BackendMetastore): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.metastoreType !== 0) {
      obj.metastoreType = backendMetastore_MetastoreTypeToJSON(message.metastoreType);
    }
    return obj;
  },

  create(base?: DeepPartial<BackendMetastore>): BackendMetastore {
    return BackendMetastore.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BackendMetastore>): BackendMetastore {
    const message = createBaseBackendMetastore();
    message.name = object.name ?? "";
    message.metastoreType = object.metastoreType ?? 0;
    return message;
  },
};

function createBaseListFederationsRequest(): ListFederationsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListFederationsRequest: MessageFns<ListFederationsRequest> = {
  encode(message: ListFederationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFederationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFederationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFederationsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListFederationsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFederationsRequest>): ListFederationsRequest {
    return ListFederationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFederationsRequest>): ListFederationsRequest {
    const message = createBaseListFederationsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListFederationsResponse(): ListFederationsResponse {
  return { federations: [], nextPageToken: "", unreachable: [] };
}

export const ListFederationsResponse: MessageFns<ListFederationsResponse> = {
  encode(message: ListFederationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.federations) {
      Federation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFederationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFederationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.federations.push(Federation.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFederationsResponse {
    return {
      federations: globalThis.Array.isArray(object?.federations)
        ? object.federations.map((e: any) => Federation.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListFederationsResponse): unknown {
    const obj: any = {};
    if (message.federations?.length) {
      obj.federations = message.federations.map((e) => Federation.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFederationsResponse>): ListFederationsResponse {
    return ListFederationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFederationsResponse>): ListFederationsResponse {
    const message = createBaseListFederationsResponse();
    message.federations = object.federations?.map((e) => Federation.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetFederationRequest(): GetFederationRequest {
  return { name: "" };
}

export const GetFederationRequest: MessageFns<GetFederationRequest> = {
  encode(message: GetFederationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFederationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFederationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFederationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetFederationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetFederationRequest>): GetFederationRequest {
    return GetFederationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFederationRequest>): GetFederationRequest {
    const message = createBaseGetFederationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateFederationRequest(): CreateFederationRequest {
  return { parent: "", federationId: "", federation: undefined, requestId: "" };
}

export const CreateFederationRequest: MessageFns<CreateFederationRequest> = {
  encode(message: CreateFederationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.federationId !== "") {
      writer.uint32(18).string(message.federationId);
    }
    if (message.federation !== undefined) {
      Federation.encode(message.federation, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFederationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFederationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.federationId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.federation = Federation.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFederationRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      federationId: isSet(object.federationId) ? globalThis.String(object.federationId) : "",
      federation: isSet(object.federation) ? Federation.fromJSON(object.federation) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateFederationRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.federationId !== "") {
      obj.federationId = message.federationId;
    }
    if (message.federation !== undefined) {
      obj.federation = Federation.toJSON(message.federation);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateFederationRequest>): CreateFederationRequest {
    return CreateFederationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateFederationRequest>): CreateFederationRequest {
    const message = createBaseCreateFederationRequest();
    message.parent = object.parent ?? "";
    message.federationId = object.federationId ?? "";
    message.federation = (object.federation !== undefined && object.federation !== null)
      ? Federation.fromPartial(object.federation)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateFederationRequest(): UpdateFederationRequest {
  return { updateMask: undefined, federation: undefined, requestId: "" };
}

export const UpdateFederationRequest: MessageFns<UpdateFederationRequest> = {
  encode(message: UpdateFederationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.federation !== undefined) {
      Federation.encode(message.federation, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFederationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFederationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.federation = Federation.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFederationRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      federation: isSet(object.federation) ? Federation.fromJSON(object.federation) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateFederationRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.federation !== undefined) {
      obj.federation = Federation.toJSON(message.federation);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateFederationRequest>): UpdateFederationRequest {
    return UpdateFederationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateFederationRequest>): UpdateFederationRequest {
    const message = createBaseUpdateFederationRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.federation = (object.federation !== undefined && object.federation !== null)
      ? Federation.fromPartial(object.federation)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteFederationRequest(): DeleteFederationRequest {
  return { name: "", requestId: "" };
}

export const DeleteFederationRequest: MessageFns<DeleteFederationRequest> = {
  encode(message: DeleteFederationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFederationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFederationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteFederationRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteFederationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteFederationRequest>): DeleteFederationRequest {
    return DeleteFederationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteFederationRequest>): DeleteFederationRequest {
    const message = createBaseDeleteFederationRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

/**
 * Configures and manages metastore federation services.
 * Dataproc Metastore Federation Service allows federating a collection of
 * backend metastores like BigQuery, Dataplex Lakes, and other Dataproc
 * Metastores. The Federation Service exposes a gRPC URL through which metadata
 * from the backend metastores are served at query time.
 *
 * The Dataproc Metastore Federation API defines the following resource model:
 * * The service works with a collection of Google Cloud projects.
 * * Each project has a collection of available locations.
 * * Each location has a collection of federations.
 * * Dataproc Metastore Federations are resources with names of the
 * form:
 * `projects/{project_number}/locations/{location_id}/federations/{federation_id}`.
 */
export type DataprocMetastoreFederationDefinition = typeof DataprocMetastoreFederationDefinition;
export const DataprocMetastoreFederationDefinition = {
  name: "DataprocMetastoreFederation",
  fullName: "google.cloud.metastore.v1beta.DataprocMetastoreFederation",
  methods: {
    /** Lists federations in a project and location. */
    listFederations: {
      name: "ListFederations",
      requestType: ListFederationsRequest,
      requestStream: false,
      responseType: ListFederationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              101,
              100,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets the details of a single federation. */
    getFederation: {
      name: "GetFederation",
      requestType: GetFederationRequest,
      requestStream: false,
      responseType: Federation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              100,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a metastore federation in a project and location. */
    createFederation: {
      name: "CreateFederation",
      requestType: CreateFederationRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              61,
              10,
              10,
              70,
              101,
              100,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              18,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              109,
              101,
              116,
              97,
              115,
              116,
              111,
              114,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              31,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              102,
              101,
              100,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              44,
              102,
              101,
              100,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              65,
              58,
              10,
              102,
              101,
              100,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              34,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              101,
              100,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the fields of a federation. */
    updateFederation: {
      name: "UpdateFederation",
      requestType: UpdateFederationRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              61,
              10,
              10,
              70,
              101,
              100,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              18,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              109,
              101,
              116,
              97,
              115,
              116,
              111,
              114,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              22,
              102,
              101,
              100,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              76,
              58,
              10,
              102,
              101,
              100,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              50,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              102,
              101,
              100,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              100,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single federation. */
    deleteFederation: {
      name: "DeleteFederation",
      requestType: DeleteFederationRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              72,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              109,
              101,
              116,
              97,
              115,
              116,
              111,
              114,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              42,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              100,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DataprocMetastoreFederationServiceImplementation<CallContextExt = {}> {
  /** Lists federations in a project and location. */
  listFederations(
    request: ListFederationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListFederationsResponse>>;
  /** Gets the details of a single federation. */
  getFederation(request: GetFederationRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Federation>>;
  /** Creates a metastore federation in a project and location. */
  createFederation(
    request: CreateFederationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the fields of a federation. */
  updateFederation(
    request: UpdateFederationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single federation. */
  deleteFederation(
    request: DeleteFederationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface DataprocMetastoreFederationClient<CallOptionsExt = {}> {
  /** Lists federations in a project and location. */
  listFederations(
    request: DeepPartial<ListFederationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListFederationsResponse>;
  /** Gets the details of a single federation. */
  getFederation(
    request: DeepPartial<GetFederationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Federation>;
  /** Creates a metastore federation in a project and location. */
  createFederation(
    request: DeepPartial<CreateFederationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the fields of a federation. */
  updateFederation(
    request: DeepPartial<UpdateFederationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single federation. */
  deleteFederation(
    request: DeepPartial<DeleteFederationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
