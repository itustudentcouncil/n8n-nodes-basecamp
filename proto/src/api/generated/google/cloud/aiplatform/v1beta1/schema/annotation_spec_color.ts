// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/schema/annotation_spec_color.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Color } from "../../../../type/color.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1.schema";

/**
 * An entry of mapping between color and AnnotationSpec. The mapping is used in
 * segmentation mask.
 */
export interface AnnotationSpecColor {
  /** The color of the AnnotationSpec in a segmentation mask. */
  color:
    | Color
    | undefined;
  /**
   * The display name of the AnnotationSpec represented by the color in the
   * segmentation mask.
   */
  displayName: string;
  /**
   * The ID of the AnnotationSpec represented by the color in the segmentation
   * mask.
   */
  id: string;
}

function createBaseAnnotationSpecColor(): AnnotationSpecColor {
  return { color: undefined, displayName: "", id: "" };
}

export const AnnotationSpecColor: MessageFns<AnnotationSpecColor> = {
  encode(message: AnnotationSpecColor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.color !== undefined) {
      Color.encode(message.color, writer.uint32(10).fork()).join();
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnnotationSpecColor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnnotationSpecColor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.color = Color.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnnotationSpecColor {
    return {
      color: isSet(object.color) ? Color.fromJSON(object.color) : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AnnotationSpecColor): unknown {
    const obj: any = {};
    if (message.color !== undefined) {
      obj.color = Color.toJSON(message.color);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AnnotationSpecColor>): AnnotationSpecColor {
    return AnnotationSpecColor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnnotationSpecColor>): AnnotationSpecColor {
    const message = createBaseAnnotationSpecColor();
    message.color = (object.color !== undefined && object.color !== null) ? Color.fromPartial(object.color) : undefined;
    message.displayName = object.displayName ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
