// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/api_auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/** The generic reusable api auth config. */
export interface ApiAuth {
  /** The API secret. */
  apiKeyConfig?: ApiAuth_ApiKeyConfig | undefined;
}

/** The API secret. */
export interface ApiAuth_ApiKeyConfig {
  /**
   * Required. The SecretManager secret version resource name storing API key.
   * e.g. projects/{project}/secrets/{secret}/versions/{version}
   */
  apiKeySecretVersion: string;
}

function createBaseApiAuth(): ApiAuth {
  return { apiKeyConfig: undefined };
}

export const ApiAuth: MessageFns<ApiAuth> = {
  encode(message: ApiAuth, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.apiKeyConfig !== undefined) {
      ApiAuth_ApiKeyConfig.encode(message.apiKeyConfig, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiAuth {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiAuth();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiKeyConfig = ApiAuth_ApiKeyConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiAuth {
    return {
      apiKeyConfig: isSet(object.apiKeyConfig) ? ApiAuth_ApiKeyConfig.fromJSON(object.apiKeyConfig) : undefined,
    };
  },

  toJSON(message: ApiAuth): unknown {
    const obj: any = {};
    if (message.apiKeyConfig !== undefined) {
      obj.apiKeyConfig = ApiAuth_ApiKeyConfig.toJSON(message.apiKeyConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<ApiAuth>): ApiAuth {
    return ApiAuth.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApiAuth>): ApiAuth {
    const message = createBaseApiAuth();
    message.apiKeyConfig = (object.apiKeyConfig !== undefined && object.apiKeyConfig !== null)
      ? ApiAuth_ApiKeyConfig.fromPartial(object.apiKeyConfig)
      : undefined;
    return message;
  },
};

function createBaseApiAuth_ApiKeyConfig(): ApiAuth_ApiKeyConfig {
  return { apiKeySecretVersion: "" };
}

export const ApiAuth_ApiKeyConfig: MessageFns<ApiAuth_ApiKeyConfig> = {
  encode(message: ApiAuth_ApiKeyConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.apiKeySecretVersion !== "") {
      writer.uint32(10).string(message.apiKeySecretVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiAuth_ApiKeyConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiAuth_ApiKeyConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiKeySecretVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiAuth_ApiKeyConfig {
    return {
      apiKeySecretVersion: isSet(object.apiKeySecretVersion) ? globalThis.String(object.apiKeySecretVersion) : "",
    };
  },

  toJSON(message: ApiAuth_ApiKeyConfig): unknown {
    const obj: any = {};
    if (message.apiKeySecretVersion !== "") {
      obj.apiKeySecretVersion = message.apiKeySecretVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<ApiAuth_ApiKeyConfig>): ApiAuth_ApiKeyConfig {
    return ApiAuth_ApiKeyConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApiAuth_ApiKeyConfig>): ApiAuth_ApiKeyConfig {
    const message = createBaseApiAuth_ApiKeyConfig();
    message.apiKeySecretVersion = object.apiKeySecretVersion ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
