// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/**
 * An edge describing the relationship between an Artifact and an Execution in
 * a lineage graph.
 */
export interface Event {
  /** Required. The relative resource name of the Artifact in the Event. */
  artifact: string;
  /** Output only. The relative resource name of the Execution in the Event. */
  execution: string;
  /** Output only. Time the Event occurred. */
  eventTime:
    | Date
    | undefined;
  /** Required. The type of the Event. */
  type: Event_Type;
  /**
   * The labels with user-defined metadata to annotate Events.
   *
   * Label keys and values can be no longer than 64 characters
   * (Unicode codepoints), can only contain lowercase letters, numeric
   * characters, underscores and dashes. International characters are allowed.
   * No more than 64 user labels can be associated with one Event (System
   * labels are excluded).
   *
   * See https://goo.gl/xmQnxf for more information and examples of labels.
   * System reserved label keys are prefixed with "aiplatform.googleapis.com/"
   * and are immutable.
   */
  labels: { [key: string]: string };
}

/** Describes whether an Event's Artifact is the Execution's input or output. */
export enum Event_Type {
  /** TYPE_UNSPECIFIED - Unspecified whether input or output of the Execution. */
  TYPE_UNSPECIFIED = 0,
  /** INPUT - An input of the Execution. */
  INPUT = 1,
  /** OUTPUT - An output of the Execution. */
  OUTPUT = 2,
  UNRECOGNIZED = -1,
}

export function event_TypeFromJSON(object: any): Event_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Event_Type.TYPE_UNSPECIFIED;
    case 1:
    case "INPUT":
      return Event_Type.INPUT;
    case 2:
    case "OUTPUT":
      return Event_Type.OUTPUT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Event_Type.UNRECOGNIZED;
  }
}

export function event_TypeToJSON(object: Event_Type): string {
  switch (object) {
    case Event_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Event_Type.INPUT:
      return "INPUT";
    case Event_Type.OUTPUT:
      return "OUTPUT";
    case Event_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Event_LabelsEntry {
  key: string;
  value: string;
}

function createBaseEvent(): Event {
  return { artifact: "", execution: "", eventTime: undefined, type: 0, labels: {} };
}

export const Event: MessageFns<Event> = {
  encode(message: Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.artifact !== "") {
      writer.uint32(10).string(message.artifact);
    }
    if (message.execution !== "") {
      writer.uint32(18).string(message.execution);
    }
    if (message.eventTime !== undefined) {
      Timestamp.encode(toTimestamp(message.eventTime), writer.uint32(26).fork()).join();
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Event_LabelsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.artifact = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.execution = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.eventTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = Event_LabelsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.labels[entry5.key] = entry5.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      artifact: isSet(object.artifact) ? globalThis.String(object.artifact) : "",
      execution: isSet(object.execution) ? globalThis.String(object.execution) : "",
      eventTime: isSet(object.eventTime) ? fromJsonTimestamp(object.eventTime) : undefined,
      type: isSet(object.type) ? event_TypeFromJSON(object.type) : 0,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.artifact !== "") {
      obj.artifact = message.artifact;
    }
    if (message.execution !== "") {
      obj.execution = message.execution;
    }
    if (message.eventTime !== undefined) {
      obj.eventTime = message.eventTime.toISOString();
    }
    if (message.type !== 0) {
      obj.type = event_TypeToJSON(message.type);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<Event>): Event {
    return Event.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Event>): Event {
    const message = createBaseEvent();
    message.artifact = object.artifact ?? "";
    message.execution = object.execution ?? "";
    message.eventTime = object.eventTime ?? undefined;
    message.type = object.type ?? 0;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseEvent_LabelsEntry(): Event_LabelsEntry {
  return { key: "", value: "" };
}

export const Event_LabelsEntry: MessageFns<Event_LabelsEntry> = {
  encode(message: Event_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Event_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Event_LabelsEntry>): Event_LabelsEntry {
    return Event_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Event_LabelsEntry>): Event_LabelsEntry {
    const message = createBaseEvent_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
