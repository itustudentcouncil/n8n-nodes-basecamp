// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/schema/trainingjob/definition/automl_text_extraction.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.aiplatform.v1beta1.schema.trainingjob.definition";

/** A TrainingJob that trains and uploads an AutoML Text Extraction Model. */
export interface AutoMlTextExtraction {
  /** The input parameters of this TrainingJob. */
  inputs: AutoMlTextExtractionInputs | undefined;
}

export interface AutoMlTextExtractionInputs {
}

function createBaseAutoMlTextExtraction(): AutoMlTextExtraction {
  return { inputs: undefined };
}

export const AutoMlTextExtraction: MessageFns<AutoMlTextExtraction> = {
  encode(message: AutoMlTextExtraction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inputs !== undefined) {
      AutoMlTextExtractionInputs.encode(message.inputs, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutoMlTextExtraction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoMlTextExtraction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inputs = AutoMlTextExtractionInputs.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutoMlTextExtraction {
    return { inputs: isSet(object.inputs) ? AutoMlTextExtractionInputs.fromJSON(object.inputs) : undefined };
  },

  toJSON(message: AutoMlTextExtraction): unknown {
    const obj: any = {};
    if (message.inputs !== undefined) {
      obj.inputs = AutoMlTextExtractionInputs.toJSON(message.inputs);
    }
    return obj;
  },

  create(base?: DeepPartial<AutoMlTextExtraction>): AutoMlTextExtraction {
    return AutoMlTextExtraction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutoMlTextExtraction>): AutoMlTextExtraction {
    const message = createBaseAutoMlTextExtraction();
    message.inputs = (object.inputs !== undefined && object.inputs !== null)
      ? AutoMlTextExtractionInputs.fromPartial(object.inputs)
      : undefined;
    return message;
  },
};

function createBaseAutoMlTextExtractionInputs(): AutoMlTextExtractionInputs {
  return {};
}

export const AutoMlTextExtractionInputs: MessageFns<AutoMlTextExtractionInputs> = {
  encode(_: AutoMlTextExtractionInputs, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutoMlTextExtractionInputs {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoMlTextExtractionInputs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AutoMlTextExtractionInputs {
    return {};
  },

  toJSON(_: AutoMlTextExtractionInputs): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AutoMlTextExtractionInputs>): AutoMlTextExtractionInputs {
    return AutoMlTextExtractionInputs.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AutoMlTextExtractionInputs>): AutoMlTextExtractionInputs {
    const message = createBaseAutoMlTextExtractionInputs();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
