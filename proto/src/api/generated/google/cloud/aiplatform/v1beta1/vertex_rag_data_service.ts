// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/vertex_rag_data_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Status } from "../../../rpc/status.js";
import { GenericOperationMetadata } from "./operation.js";
import { ImportRagFilesConfig, RagCorpus, RagFile, UploadRagFileConfig } from "./vertex_rag_data.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/**
 * Request message for
 * [VertexRagDataService.CreateRagCorpus][google.cloud.aiplatform.v1beta1.VertexRagDataService.CreateRagCorpus].
 */
export interface CreateRagCorpusRequest {
  /**
   * Required. The resource name of the Location to create the RagCorpus in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The RagCorpus to create. */
  ragCorpus: RagCorpus | undefined;
}

/**
 * Request message for
 * [VertexRagDataService.GetRagCorpus][google.cloud.aiplatform.v1beta1.VertexRagDataService.GetRagCorpus]
 */
export interface GetRagCorpusRequest {
  /**
   * Required. The name of the RagCorpus resource.
   * Format:
   * `projects/{project}/locations/{location}/ragCorpora/{rag_corpus}`
   */
  name: string;
}

/**
 * Request message for
 * [VertexRagDataService.ListRagCorpora][google.cloud.aiplatform.v1beta1.VertexRagDataService.ListRagCorpora].
 */
export interface ListRagCorporaRequest {
  /**
   * Required. The resource name of the Location from which to list the
   * RagCorpora. Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Optional. The standard list page size. */
  pageSize: number;
  /**
   * Optional. The standard list page token.
   * Typically obtained via
   * [ListRagCorporaResponse.next_page_token][google.cloud.aiplatform.v1beta1.ListRagCorporaResponse.next_page_token]
   * of the previous
   * [VertexRagDataService.ListRagCorpora][google.cloud.aiplatform.v1beta1.VertexRagDataService.ListRagCorpora]
   * call.
   */
  pageToken: string;
}

/**
 * Response message for
 * [VertexRagDataService.ListRagCorpora][google.cloud.aiplatform.v1beta1.VertexRagDataService.ListRagCorpora].
 */
export interface ListRagCorporaResponse {
  /** List of RagCorpora in the requested page. */
  ragCorpora: RagCorpus[];
  /**
   * A token to retrieve the next page of results.
   * Pass to
   * [ListRagCorporaRequest.page_token][google.cloud.aiplatform.v1beta1.ListRagCorporaRequest.page_token]
   * to obtain that page.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [VertexRagDataService.DeleteRagCorpus][google.cloud.aiplatform.v1beta1.VertexRagDataService.DeleteRagCorpus].
 */
export interface DeleteRagCorpusRequest {
  /**
   * Required. The name of the RagCorpus resource to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/ragCorpora/{rag_corpus}`
   */
  name: string;
  /**
   * Optional. If set to true, any RagFiles in this RagCorpus will also be
   * deleted. Otherwise, the request will only work if the RagCorpus has no
   * RagFiles.
   */
  force: boolean;
}

/**
 * Request message for
 * [VertexRagDataService.UploadRagFile][google.cloud.aiplatform.v1beta1.VertexRagDataService.UploadRagFile].
 */
export interface UploadRagFileRequest {
  /**
   * Required. The name of the RagCorpus resource into which to upload the file.
   * Format:
   * `projects/{project}/locations/{location}/ragCorpora/{rag_corpus}`
   */
  parent: string;
  /** Required. The RagFile to upload. */
  ragFile:
    | RagFile
    | undefined;
  /**
   * Required. The config for the RagFiles to be uploaded into the RagCorpus.
   * [VertexRagDataService.UploadRagFile][google.cloud.aiplatform.v1beta1.VertexRagDataService.UploadRagFile].
   */
  uploadRagFileConfig: UploadRagFileConfig | undefined;
}

/**
 * Response message for
 * [VertexRagDataService.UploadRagFile][google.cloud.aiplatform.v1beta1.VertexRagDataService.UploadRagFile].
 */
export interface UploadRagFileResponse {
  /** The RagFile that had been uploaded into the RagCorpus. */
  ragFile?:
    | RagFile
    | undefined;
  /** The error that occurred while processing the RagFile. */
  error?: Status | undefined;
}

/**
 * Request message for
 * [VertexRagDataService.ImportRagFiles][google.cloud.aiplatform.v1beta1.VertexRagDataService.ImportRagFiles].
 */
export interface ImportRagFilesRequest {
  /**
   * Required. The name of the RagCorpus resource into which to import files.
   * Format:
   * `projects/{project}/locations/{location}/ragCorpora/{rag_corpus}`
   */
  parent: string;
  /**
   * Required. The config for the RagFiles to be synced and imported into the
   * RagCorpus.
   * [VertexRagDataService.ImportRagFiles][google.cloud.aiplatform.v1beta1.VertexRagDataService.ImportRagFiles].
   */
  importRagFilesConfig: ImportRagFilesConfig | undefined;
}

/**
 * Response message for
 * [VertexRagDataService.ImportRagFiles][google.cloud.aiplatform.v1beta1.VertexRagDataService.ImportRagFiles].
 */
export interface ImportRagFilesResponse {
  /**
   * The Google Cloud Storage path into which the partial failures were
   * written.
   */
  partialFailuresGcsPath?:
    | string
    | undefined;
  /** The BigQuery table into which the partial failures were written. */
  partialFailuresBigqueryTable?:
    | string
    | undefined;
  /** The number of RagFiles that had been imported into the RagCorpus. */
  importedRagFilesCount: Long;
  /** The number of RagFiles that had failed while importing into the RagCorpus. */
  failedRagFilesCount: Long;
  /** The number of RagFiles that was skipped while importing into the RagCorpus. */
  skippedRagFilesCount: Long;
}

/**
 * Request message for
 * [VertexRagDataService.GetRagFile][google.cloud.aiplatform.v1beta1.VertexRagDataService.GetRagFile]
 */
export interface GetRagFileRequest {
  /**
   * Required. The name of the RagFile resource.
   * Format:
   * `projects/{project}/locations/{location}/ragCorpora/{rag_corpus}/ragFiles/{rag_file}`
   */
  name: string;
}

/**
 * Request message for
 * [VertexRagDataService.ListRagFiles][google.cloud.aiplatform.v1beta1.VertexRagDataService.ListRagFiles].
 */
export interface ListRagFilesRequest {
  /**
   * Required. The resource name of the RagCorpus from which to list the
   * RagFiles. Format:
   * `projects/{project}/locations/{location}/ragCorpora/{rag_corpus}`
   */
  parent: string;
  /** Optional. The standard list page size. */
  pageSize: number;
  /**
   * Optional. The standard list page token.
   * Typically obtained via
   * [ListRagFilesResponse.next_page_token][google.cloud.aiplatform.v1beta1.ListRagFilesResponse.next_page_token]
   * of the previous
   * [VertexRagDataService.ListRagFiles][google.cloud.aiplatform.v1beta1.VertexRagDataService.ListRagFiles]
   * call.
   */
  pageToken: string;
}

/**
 * Response message for
 * [VertexRagDataService.ListRagFiles][google.cloud.aiplatform.v1beta1.VertexRagDataService.ListRagFiles].
 */
export interface ListRagFilesResponse {
  /** List of RagFiles in the requested page. */
  ragFiles: RagFile[];
  /**
   * A token to retrieve the next page of results.
   * Pass to
   * [ListRagFilesRequest.page_token][google.cloud.aiplatform.v1beta1.ListRagFilesRequest.page_token]
   * to obtain that page.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [VertexRagDataService.DeleteRagFile][google.cloud.aiplatform.v1beta1.VertexRagDataService.DeleteRagFile].
 */
export interface DeleteRagFileRequest {
  /**
   * Required. The name of the RagFile resource to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/ragCorpora/{rag_corpus}/ragFiles/{rag_file}`
   */
  name: string;
}

/**
 * Runtime operation information for
 * [VertexRagDataService.CreateRagCorpus][google.cloud.aiplatform.v1beta1.VertexRagDataService.CreateRagCorpus].
 */
export interface CreateRagCorpusOperationMetadata {
  /** The operation generic information. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [VertexRagDataService.UpdateRagCorpus][google.cloud.aiplatform.v1beta1.VertexRagDataService.UpdateRagCorpus].
 */
export interface UpdateRagCorpusRequest {
  /** Required. The RagCorpus which replaces the resource on the server. */
  ragCorpus: RagCorpus | undefined;
}

/**
 * Runtime operation information for
 * [VertexRagDataService.UpdateRagCorpus][google.cloud.aiplatform.v1beta1.VertexRagDataService.UpdateRagCorpus].
 */
export interface UpdateRagCorpusOperationMetadata {
  /** The operation generic information. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Runtime operation information for
 * [VertexRagDataService.ImportRagFiles][google.cloud.aiplatform.v1beta1.VertexRagDataService.ImportRagFiles].
 */
export interface ImportRagFilesOperationMetadata {
  /** The operation generic information. */
  genericMetadata:
    | GenericOperationMetadata
    | undefined;
  /** The resource ID of RagCorpus that this operation is executed on. */
  ragCorpusId: Long;
  /** Output only. The config that was passed in the ImportRagFilesRequest. */
  importRagFilesConfig:
    | ImportRagFilesConfig
    | undefined;
  /**
   * The progress percentage of the operation. Value is in the range [0, 100].
   * This percentage is calculated as follows:
   *    progress_percentage = 100 * (successes + failures + skips) / total
   */
  progressPercentage: number;
}

function createBaseCreateRagCorpusRequest(): CreateRagCorpusRequest {
  return { parent: "", ragCorpus: undefined };
}

export const CreateRagCorpusRequest: MessageFns<CreateRagCorpusRequest> = {
  encode(message: CreateRagCorpusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.ragCorpus !== undefined) {
      RagCorpus.encode(message.ragCorpus, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRagCorpusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRagCorpusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ragCorpus = RagCorpus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRagCorpusRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      ragCorpus: isSet(object.ragCorpus) ? RagCorpus.fromJSON(object.ragCorpus) : undefined,
    };
  },

  toJSON(message: CreateRagCorpusRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.ragCorpus !== undefined) {
      obj.ragCorpus = RagCorpus.toJSON(message.ragCorpus);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRagCorpusRequest>): CreateRagCorpusRequest {
    return CreateRagCorpusRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRagCorpusRequest>): CreateRagCorpusRequest {
    const message = createBaseCreateRagCorpusRequest();
    message.parent = object.parent ?? "";
    message.ragCorpus = (object.ragCorpus !== undefined && object.ragCorpus !== null)
      ? RagCorpus.fromPartial(object.ragCorpus)
      : undefined;
    return message;
  },
};

function createBaseGetRagCorpusRequest(): GetRagCorpusRequest {
  return { name: "" };
}

export const GetRagCorpusRequest: MessageFns<GetRagCorpusRequest> = {
  encode(message: GetRagCorpusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRagCorpusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRagCorpusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRagCorpusRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRagCorpusRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRagCorpusRequest>): GetRagCorpusRequest {
    return GetRagCorpusRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRagCorpusRequest>): GetRagCorpusRequest {
    const message = createBaseGetRagCorpusRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListRagCorporaRequest(): ListRagCorporaRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListRagCorporaRequest: MessageFns<ListRagCorporaRequest> = {
  encode(message: ListRagCorporaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRagCorporaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRagCorporaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRagCorporaRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListRagCorporaRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRagCorporaRequest>): ListRagCorporaRequest {
    return ListRagCorporaRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRagCorporaRequest>): ListRagCorporaRequest {
    const message = createBaseListRagCorporaRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListRagCorporaResponse(): ListRagCorporaResponse {
  return { ragCorpora: [], nextPageToken: "" };
}

export const ListRagCorporaResponse: MessageFns<ListRagCorporaResponse> = {
  encode(message: ListRagCorporaResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.ragCorpora) {
      RagCorpus.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRagCorporaResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRagCorporaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ragCorpora.push(RagCorpus.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRagCorporaResponse {
    return {
      ragCorpora: globalThis.Array.isArray(object?.ragCorpora)
        ? object.ragCorpora.map((e: any) => RagCorpus.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListRagCorporaResponse): unknown {
    const obj: any = {};
    if (message.ragCorpora?.length) {
      obj.ragCorpora = message.ragCorpora.map((e) => RagCorpus.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRagCorporaResponse>): ListRagCorporaResponse {
    return ListRagCorporaResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRagCorporaResponse>): ListRagCorporaResponse {
    const message = createBaseListRagCorporaResponse();
    message.ragCorpora = object.ragCorpora?.map((e) => RagCorpus.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteRagCorpusRequest(): DeleteRagCorpusRequest {
  return { name: "", force: false };
}

export const DeleteRagCorpusRequest: MessageFns<DeleteRagCorpusRequest> = {
  encode(message: DeleteRagCorpusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRagCorpusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRagCorpusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRagCorpusRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteRagCorpusRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRagCorpusRequest>): DeleteRagCorpusRequest {
    return DeleteRagCorpusRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRagCorpusRequest>): DeleteRagCorpusRequest {
    const message = createBaseDeleteRagCorpusRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseUploadRagFileRequest(): UploadRagFileRequest {
  return { parent: "", ragFile: undefined, uploadRagFileConfig: undefined };
}

export const UploadRagFileRequest: MessageFns<UploadRagFileRequest> = {
  encode(message: UploadRagFileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.ragFile !== undefined) {
      RagFile.encode(message.ragFile, writer.uint32(18).fork()).join();
    }
    if (message.uploadRagFileConfig !== undefined) {
      UploadRagFileConfig.encode(message.uploadRagFileConfig, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadRagFileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadRagFileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ragFile = RagFile.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.uploadRagFileConfig = UploadRagFileConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadRagFileRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      ragFile: isSet(object.ragFile) ? RagFile.fromJSON(object.ragFile) : undefined,
      uploadRagFileConfig: isSet(object.uploadRagFileConfig)
        ? UploadRagFileConfig.fromJSON(object.uploadRagFileConfig)
        : undefined,
    };
  },

  toJSON(message: UploadRagFileRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.ragFile !== undefined) {
      obj.ragFile = RagFile.toJSON(message.ragFile);
    }
    if (message.uploadRagFileConfig !== undefined) {
      obj.uploadRagFileConfig = UploadRagFileConfig.toJSON(message.uploadRagFileConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<UploadRagFileRequest>): UploadRagFileRequest {
    return UploadRagFileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UploadRagFileRequest>): UploadRagFileRequest {
    const message = createBaseUploadRagFileRequest();
    message.parent = object.parent ?? "";
    message.ragFile = (object.ragFile !== undefined && object.ragFile !== null)
      ? RagFile.fromPartial(object.ragFile)
      : undefined;
    message.uploadRagFileConfig = (object.uploadRagFileConfig !== undefined && object.uploadRagFileConfig !== null)
      ? UploadRagFileConfig.fromPartial(object.uploadRagFileConfig)
      : undefined;
    return message;
  },
};

function createBaseUploadRagFileResponse(): UploadRagFileResponse {
  return { ragFile: undefined, error: undefined };
}

export const UploadRagFileResponse: MessageFns<UploadRagFileResponse> = {
  encode(message: UploadRagFileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ragFile !== undefined) {
      RagFile.encode(message.ragFile, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadRagFileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadRagFileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ragFile = RagFile.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadRagFileResponse {
    return {
      ragFile: isSet(object.ragFile) ? RagFile.fromJSON(object.ragFile) : undefined,
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: UploadRagFileResponse): unknown {
    const obj: any = {};
    if (message.ragFile !== undefined) {
      obj.ragFile = RagFile.toJSON(message.ragFile);
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    return obj;
  },

  create(base?: DeepPartial<UploadRagFileResponse>): UploadRagFileResponse {
    return UploadRagFileResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UploadRagFileResponse>): UploadRagFileResponse {
    const message = createBaseUploadRagFileResponse();
    message.ragFile = (object.ragFile !== undefined && object.ragFile !== null)
      ? RagFile.fromPartial(object.ragFile)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseImportRagFilesRequest(): ImportRagFilesRequest {
  return { parent: "", importRagFilesConfig: undefined };
}

export const ImportRagFilesRequest: MessageFns<ImportRagFilesRequest> = {
  encode(message: ImportRagFilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.importRagFilesConfig !== undefined) {
      ImportRagFilesConfig.encode(message.importRagFilesConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportRagFilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportRagFilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.importRagFilesConfig = ImportRagFilesConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportRagFilesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      importRagFilesConfig: isSet(object.importRagFilesConfig)
        ? ImportRagFilesConfig.fromJSON(object.importRagFilesConfig)
        : undefined,
    };
  },

  toJSON(message: ImportRagFilesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.importRagFilesConfig !== undefined) {
      obj.importRagFilesConfig = ImportRagFilesConfig.toJSON(message.importRagFilesConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<ImportRagFilesRequest>): ImportRagFilesRequest {
    return ImportRagFilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportRagFilesRequest>): ImportRagFilesRequest {
    const message = createBaseImportRagFilesRequest();
    message.parent = object.parent ?? "";
    message.importRagFilesConfig = (object.importRagFilesConfig !== undefined && object.importRagFilesConfig !== null)
      ? ImportRagFilesConfig.fromPartial(object.importRagFilesConfig)
      : undefined;
    return message;
  },
};

function createBaseImportRagFilesResponse(): ImportRagFilesResponse {
  return {
    partialFailuresGcsPath: undefined,
    partialFailuresBigqueryTable: undefined,
    importedRagFilesCount: Long.ZERO,
    failedRagFilesCount: Long.ZERO,
    skippedRagFilesCount: Long.ZERO,
  };
}

export const ImportRagFilesResponse: MessageFns<ImportRagFilesResponse> = {
  encode(message: ImportRagFilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.partialFailuresGcsPath !== undefined) {
      writer.uint32(34).string(message.partialFailuresGcsPath);
    }
    if (message.partialFailuresBigqueryTable !== undefined) {
      writer.uint32(42).string(message.partialFailuresBigqueryTable);
    }
    if (!message.importedRagFilesCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.importedRagFilesCount.toString());
    }
    if (!message.failedRagFilesCount.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.failedRagFilesCount.toString());
    }
    if (!message.skippedRagFilesCount.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.skippedRagFilesCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportRagFilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportRagFilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.partialFailuresGcsPath = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.partialFailuresBigqueryTable = reader.string();
          continue;
        case 1:
          if (tag !== 8) {
            break;
          }

          message.importedRagFilesCount = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.failedRagFilesCount = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.skippedRagFilesCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportRagFilesResponse {
    return {
      partialFailuresGcsPath: isSet(object.partialFailuresGcsPath)
        ? globalThis.String(object.partialFailuresGcsPath)
        : undefined,
      partialFailuresBigqueryTable: isSet(object.partialFailuresBigqueryTable)
        ? globalThis.String(object.partialFailuresBigqueryTable)
        : undefined,
      importedRagFilesCount: isSet(object.importedRagFilesCount)
        ? Long.fromValue(object.importedRagFilesCount)
        : Long.ZERO,
      failedRagFilesCount: isSet(object.failedRagFilesCount) ? Long.fromValue(object.failedRagFilesCount) : Long.ZERO,
      skippedRagFilesCount: isSet(object.skippedRagFilesCount)
        ? Long.fromValue(object.skippedRagFilesCount)
        : Long.ZERO,
    };
  },

  toJSON(message: ImportRagFilesResponse): unknown {
    const obj: any = {};
    if (message.partialFailuresGcsPath !== undefined) {
      obj.partialFailuresGcsPath = message.partialFailuresGcsPath;
    }
    if (message.partialFailuresBigqueryTable !== undefined) {
      obj.partialFailuresBigqueryTable = message.partialFailuresBigqueryTable;
    }
    if (!message.importedRagFilesCount.equals(Long.ZERO)) {
      obj.importedRagFilesCount = (message.importedRagFilesCount || Long.ZERO).toString();
    }
    if (!message.failedRagFilesCount.equals(Long.ZERO)) {
      obj.failedRagFilesCount = (message.failedRagFilesCount || Long.ZERO).toString();
    }
    if (!message.skippedRagFilesCount.equals(Long.ZERO)) {
      obj.skippedRagFilesCount = (message.skippedRagFilesCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<ImportRagFilesResponse>): ImportRagFilesResponse {
    return ImportRagFilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportRagFilesResponse>): ImportRagFilesResponse {
    const message = createBaseImportRagFilesResponse();
    message.partialFailuresGcsPath = object.partialFailuresGcsPath ?? undefined;
    message.partialFailuresBigqueryTable = object.partialFailuresBigqueryTable ?? undefined;
    message.importedRagFilesCount =
      (object.importedRagFilesCount !== undefined && object.importedRagFilesCount !== null)
        ? Long.fromValue(object.importedRagFilesCount)
        : Long.ZERO;
    message.failedRagFilesCount = (object.failedRagFilesCount !== undefined && object.failedRagFilesCount !== null)
      ? Long.fromValue(object.failedRagFilesCount)
      : Long.ZERO;
    message.skippedRagFilesCount = (object.skippedRagFilesCount !== undefined && object.skippedRagFilesCount !== null)
      ? Long.fromValue(object.skippedRagFilesCount)
      : Long.ZERO;
    return message;
  },
};

function createBaseGetRagFileRequest(): GetRagFileRequest {
  return { name: "" };
}

export const GetRagFileRequest: MessageFns<GetRagFileRequest> = {
  encode(message: GetRagFileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRagFileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRagFileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRagFileRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRagFileRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRagFileRequest>): GetRagFileRequest {
    return GetRagFileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRagFileRequest>): GetRagFileRequest {
    const message = createBaseGetRagFileRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListRagFilesRequest(): ListRagFilesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListRagFilesRequest: MessageFns<ListRagFilesRequest> = {
  encode(message: ListRagFilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRagFilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRagFilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRagFilesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListRagFilesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRagFilesRequest>): ListRagFilesRequest {
    return ListRagFilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRagFilesRequest>): ListRagFilesRequest {
    const message = createBaseListRagFilesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListRagFilesResponse(): ListRagFilesResponse {
  return { ragFiles: [], nextPageToken: "" };
}

export const ListRagFilesResponse: MessageFns<ListRagFilesResponse> = {
  encode(message: ListRagFilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.ragFiles) {
      RagFile.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRagFilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRagFilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ragFiles.push(RagFile.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRagFilesResponse {
    return {
      ragFiles: globalThis.Array.isArray(object?.ragFiles) ? object.ragFiles.map((e: any) => RagFile.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListRagFilesResponse): unknown {
    const obj: any = {};
    if (message.ragFiles?.length) {
      obj.ragFiles = message.ragFiles.map((e) => RagFile.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRagFilesResponse>): ListRagFilesResponse {
    return ListRagFilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRagFilesResponse>): ListRagFilesResponse {
    const message = createBaseListRagFilesResponse();
    message.ragFiles = object.ragFiles?.map((e) => RagFile.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteRagFileRequest(): DeleteRagFileRequest {
  return { name: "" };
}

export const DeleteRagFileRequest: MessageFns<DeleteRagFileRequest> = {
  encode(message: DeleteRagFileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRagFileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRagFileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRagFileRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteRagFileRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRagFileRequest>): DeleteRagFileRequest {
    return DeleteRagFileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRagFileRequest>): DeleteRagFileRequest {
    const message = createBaseDeleteRagFileRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateRagCorpusOperationMetadata(): CreateRagCorpusOperationMetadata {
  return { genericMetadata: undefined };
}

export const CreateRagCorpusOperationMetadata: MessageFns<CreateRagCorpusOperationMetadata> = {
  encode(message: CreateRagCorpusOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRagCorpusOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRagCorpusOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRagCorpusOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: CreateRagCorpusOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRagCorpusOperationMetadata>): CreateRagCorpusOperationMetadata {
    return CreateRagCorpusOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRagCorpusOperationMetadata>): CreateRagCorpusOperationMetadata {
    const message = createBaseCreateRagCorpusOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseUpdateRagCorpusRequest(): UpdateRagCorpusRequest {
  return { ragCorpus: undefined };
}

export const UpdateRagCorpusRequest: MessageFns<UpdateRagCorpusRequest> = {
  encode(message: UpdateRagCorpusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ragCorpus !== undefined) {
      RagCorpus.encode(message.ragCorpus, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRagCorpusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRagCorpusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ragCorpus = RagCorpus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRagCorpusRequest {
    return { ragCorpus: isSet(object.ragCorpus) ? RagCorpus.fromJSON(object.ragCorpus) : undefined };
  },

  toJSON(message: UpdateRagCorpusRequest): unknown {
    const obj: any = {};
    if (message.ragCorpus !== undefined) {
      obj.ragCorpus = RagCorpus.toJSON(message.ragCorpus);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateRagCorpusRequest>): UpdateRagCorpusRequest {
    return UpdateRagCorpusRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateRagCorpusRequest>): UpdateRagCorpusRequest {
    const message = createBaseUpdateRagCorpusRequest();
    message.ragCorpus = (object.ragCorpus !== undefined && object.ragCorpus !== null)
      ? RagCorpus.fromPartial(object.ragCorpus)
      : undefined;
    return message;
  },
};

function createBaseUpdateRagCorpusOperationMetadata(): UpdateRagCorpusOperationMetadata {
  return { genericMetadata: undefined };
}

export const UpdateRagCorpusOperationMetadata: MessageFns<UpdateRagCorpusOperationMetadata> = {
  encode(message: UpdateRagCorpusOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRagCorpusOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRagCorpusOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRagCorpusOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: UpdateRagCorpusOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateRagCorpusOperationMetadata>): UpdateRagCorpusOperationMetadata {
    return UpdateRagCorpusOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateRagCorpusOperationMetadata>): UpdateRagCorpusOperationMetadata {
    const message = createBaseUpdateRagCorpusOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseImportRagFilesOperationMetadata(): ImportRagFilesOperationMetadata {
  return { genericMetadata: undefined, ragCorpusId: Long.ZERO, importRagFilesConfig: undefined, progressPercentage: 0 };
}

export const ImportRagFilesOperationMetadata: MessageFns<ImportRagFilesOperationMetadata> = {
  encode(message: ImportRagFilesOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    if (!message.ragCorpusId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.ragCorpusId.toString());
    }
    if (message.importRagFilesConfig !== undefined) {
      ImportRagFilesConfig.encode(message.importRagFilesConfig, writer.uint32(26).fork()).join();
    }
    if (message.progressPercentage !== 0) {
      writer.uint32(32).int32(message.progressPercentage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportRagFilesOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportRagFilesOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.ragCorpusId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.importRagFilesConfig = ImportRagFilesConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.progressPercentage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportRagFilesOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
      ragCorpusId: isSet(object.ragCorpusId) ? Long.fromValue(object.ragCorpusId) : Long.ZERO,
      importRagFilesConfig: isSet(object.importRagFilesConfig)
        ? ImportRagFilesConfig.fromJSON(object.importRagFilesConfig)
        : undefined,
      progressPercentage: isSet(object.progressPercentage) ? globalThis.Number(object.progressPercentage) : 0,
    };
  },

  toJSON(message: ImportRagFilesOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    if (!message.ragCorpusId.equals(Long.ZERO)) {
      obj.ragCorpusId = (message.ragCorpusId || Long.ZERO).toString();
    }
    if (message.importRagFilesConfig !== undefined) {
      obj.importRagFilesConfig = ImportRagFilesConfig.toJSON(message.importRagFilesConfig);
    }
    if (message.progressPercentage !== 0) {
      obj.progressPercentage = Math.round(message.progressPercentage);
    }
    return obj;
  },

  create(base?: DeepPartial<ImportRagFilesOperationMetadata>): ImportRagFilesOperationMetadata {
    return ImportRagFilesOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportRagFilesOperationMetadata>): ImportRagFilesOperationMetadata {
    const message = createBaseImportRagFilesOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    message.ragCorpusId = (object.ragCorpusId !== undefined && object.ragCorpusId !== null)
      ? Long.fromValue(object.ragCorpusId)
      : Long.ZERO;
    message.importRagFilesConfig = (object.importRagFilesConfig !== undefined && object.importRagFilesConfig !== null)
      ? ImportRagFilesConfig.fromPartial(object.importRagFilesConfig)
      : undefined;
    message.progressPercentage = object.progressPercentage ?? 0;
    return message;
  },
};

/** A service for managing user data for RAG. */
export type VertexRagDataServiceDefinition = typeof VertexRagDataServiceDefinition;
export const VertexRagDataServiceDefinition = {
  name: "VertexRagDataService",
  fullName: "google.cloud.aiplatform.v1beta1.VertexRagDataService",
  methods: {
    /** Creates a RagCorpus. */
    createRagCorpus: {
      name: "CreateRagCorpus",
      requestType: CreateRagCorpusRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              45,
              10,
              9,
              82,
              97,
              103,
              67,
              111,
              114,
              112,
              117,
              115,
              18,
              32,
              67,
              114,
              101,
              97,
              116,
              101,
              82,
              97,
              103,
              67,
              111,
              114,
              112,
              117,
              115,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([17, 112, 97, 114, 101, 110, 116, 44, 114, 97, 103, 95, 99, 111, 114, 112, 117, 115])],
          578365826: [
            Buffer.from([
              65,
              58,
              10,
              114,
              97,
              103,
              95,
              99,
              111,
              114,
              112,
              117,
              115,
              34,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              97,
              103,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
            ]),
          ],
        },
      },
    },
    /** Updates a RagCorpus. */
    updateRagCorpus: {
      name: "UpdateRagCorpus",
      requestType: UpdateRagCorpusRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              45,
              10,
              9,
              82,
              97,
              103,
              67,
              111,
              114,
              112,
              117,
              115,
              18,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              82,
              97,
              103,
              67,
              111,
              114,
              112,
              117,
              115,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([10, 114, 97, 103, 95, 99, 111, 114, 112, 117, 115])],
          578365826: [
            Buffer.from([
              76,
              58,
              10,
              114,
              97,
              103,
              95,
              99,
              111,
              114,
              112,
              117,
              115,
              50,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              97,
              103,
              95,
              99,
              111,
              114,
              112,
              117,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              97,
              103,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a RagCorpus. */
    getRagCorpus: {
      name: "GetRagCorpus",
      requestType: GetRagCorpusRequest,
      requestStream: false,
      responseType: RagCorpus,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              97,
              103,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists RagCorpora in a Location. */
    listRagCorpora: {
      name: "ListRagCorpora",
      requestType: ListRagCorporaRequest,
      requestStream: false,
      responseType: ListRagCorporaResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              97,
              103,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
            ]),
          ],
        },
      },
    },
    /** Deletes a RagCorpus. */
    deleteRagCorpus: {
      name: "DeleteRagCorpus",
      requestType: DeleteRagCorpusRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              42,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              97,
              103,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Upload a file into a RagCorpus. */
    uploadRagFile: {
      name: "UploadRagFile",
      requestType: UploadRagFileRequest,
      requestStream: false,
      responseType: UploadRagFileResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              38,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              114,
              97,
              103,
              95,
              102,
              105,
              108,
              101,
              44,
              117,
              112,
              108,
              111,
              97,
              100,
              95,
              114,
              97,
              103,
              95,
              102,
              105,
              108,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              97,
              103,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              47,
              42,
              125,
              47,
              114,
              97,
              103,
              70,
              105,
              108,
              101,
              115,
              58,
              117,
              112,
              108,
              111,
              97,
              100,
            ]),
          ],
        },
      },
    },
    /** Import files from Google Cloud Storage or Google Drive into a RagCorpus. */
    importRagFiles: {
      name: "ImportRagFiles",
      requestType: ImportRagFilesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              57,
              10,
              22,
              73,
              109,
              112,
              111,
              114,
              116,
              82,
              97,
              103,
              70,
              105,
              108,
              101,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              31,
              73,
              109,
              112,
              111,
              114,
              116,
              82,
              97,
              103,
              70,
              105,
              108,
              101,
              115,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              30,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              105,
              109,
              112,
              111,
              114,
              116,
              95,
              114,
              97,
              103,
              95,
              102,
              105,
              108,
              101,
              115,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              97,
              103,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              47,
              42,
              125,
              47,
              114,
              97,
              103,
              70,
              105,
              108,
              101,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /** Gets a RagFile. */
    getRagFile: {
      name: "GetRagFile",
      requestType: GetRagFileRequest,
      requestStream: false,
      responseType: RagFile,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              97,
              103,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              47,
              42,
              47,
              114,
              97,
              103,
              70,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists RagFiles in a RagCorpus. */
    listRagFiles: {
      name: "ListRagFiles",
      requestType: ListRagFilesRequest,
      requestStream: false,
      responseType: ListRagFilesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              97,
              103,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              47,
              42,
              125,
              47,
              114,
              97,
              103,
              70,
              105,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a RagFile. */
    deleteRagFile: {
      name: "DeleteRagFile",
      requestType: DeleteRagFileRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              42,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              97,
              103,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              47,
              42,
              47,
              114,
              97,
              103,
              70,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface VertexRagDataServiceImplementation<CallContextExt = {}> {
  /** Creates a RagCorpus. */
  createRagCorpus(
    request: CreateRagCorpusRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates a RagCorpus. */
  updateRagCorpus(
    request: UpdateRagCorpusRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a RagCorpus. */
  getRagCorpus(request: GetRagCorpusRequest, context: CallContext & CallContextExt): Promise<DeepPartial<RagCorpus>>;
  /** Lists RagCorpora in a Location. */
  listRagCorpora(
    request: ListRagCorporaRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRagCorporaResponse>>;
  /** Deletes a RagCorpus. */
  deleteRagCorpus(
    request: DeleteRagCorpusRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Upload a file into a RagCorpus. */
  uploadRagFile(
    request: UploadRagFileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UploadRagFileResponse>>;
  /** Import files from Google Cloud Storage or Google Drive into a RagCorpus. */
  importRagFiles(
    request: ImportRagFilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a RagFile. */
  getRagFile(request: GetRagFileRequest, context: CallContext & CallContextExt): Promise<DeepPartial<RagFile>>;
  /** Lists RagFiles in a RagCorpus. */
  listRagFiles(
    request: ListRagFilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRagFilesResponse>>;
  /** Deletes a RagFile. */
  deleteRagFile(request: DeleteRagFileRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface VertexRagDataServiceClient<CallOptionsExt = {}> {
  /** Creates a RagCorpus. */
  createRagCorpus(
    request: DeepPartial<CreateRagCorpusRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates a RagCorpus. */
  updateRagCorpus(
    request: DeepPartial<UpdateRagCorpusRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a RagCorpus. */
  getRagCorpus(request: DeepPartial<GetRagCorpusRequest>, options?: CallOptions & CallOptionsExt): Promise<RagCorpus>;
  /** Lists RagCorpora in a Location. */
  listRagCorpora(
    request: DeepPartial<ListRagCorporaRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRagCorporaResponse>;
  /** Deletes a RagCorpus. */
  deleteRagCorpus(
    request: DeepPartial<DeleteRagCorpusRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Upload a file into a RagCorpus. */
  uploadRagFile(
    request: DeepPartial<UploadRagFileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UploadRagFileResponse>;
  /** Import files from Google Cloud Storage or Google Drive into a RagCorpus. */
  importRagFiles(
    request: DeepPartial<ImportRagFilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a RagFile. */
  getRagFile(request: DeepPartial<GetRagFileRequest>, options?: CallOptions & CallOptionsExt): Promise<RagFile>;
  /** Lists RagFiles in a RagCorpus. */
  listRagFiles(
    request: DeepPartial<ListRagFilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRagFilesResponse>;
  /** Deletes a RagFile. */
  deleteRagFile(request: DeepPartial<DeleteRagFileRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
