// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/schema/io_format.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct, Value } from "../../../../protobuf/struct.js";
import { Code, codeFromJSON, codeToJSON } from "../../../../rpc/code.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1.schema";

/** Represents a line of JSONL in the batch prediction output file. */
export interface PredictionResult {
  /**
   * User's input instance.
   * Struct is used here instead of Any so that JsonFormat does not append an
   * extra "@type" field when we convert the proto to JSON.
   */
  instance?:
    | { [key: string]: any }
    | undefined;
  /** Optional user-provided key from the input instance. */
  key?:
    | string
    | undefined;
  /**
   * The prediction result.
   * Value is used here instead of Any so that JsonFormat does not append an
   * extra "@type" field when we convert the proto to JSON and so we can
   * represent array of objects.
   * Do not set error if this is set.
   */
  prediction:
    | any
    | undefined;
  /**
   * The error result.
   * Do not set prediction if this is set.
   */
  error: PredictionResult_Error | undefined;
}

export interface PredictionResult_Error {
  /**
   * Error status. This will be serialized into the enum name e.g.
   * "NOT_FOUND".
   */
  status: Code;
  /** Error message with additional details. */
  message: string;
}

function createBasePredictionResult(): PredictionResult {
  return { instance: undefined, key: undefined, prediction: undefined, error: undefined };
}

export const PredictionResult: MessageFns<PredictionResult> = {
  encode(message: PredictionResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== undefined) {
      Struct.encode(Struct.wrap(message.instance), writer.uint32(10).fork()).join();
    }
    if (message.key !== undefined) {
      writer.uint32(18).string(message.key);
    }
    if (message.prediction !== undefined) {
      Value.encode(Value.wrap(message.prediction), writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      PredictionResult_Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PredictionResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePredictionResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.prediction = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.error = PredictionResult_Error.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PredictionResult {
    return {
      instance: isObject(object.instance) ? object.instance : undefined,
      key: isSet(object.key) ? globalThis.String(object.key) : undefined,
      prediction: isSet(object?.prediction) ? object.prediction : undefined,
      error: isSet(object.error) ? PredictionResult_Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: PredictionResult): unknown {
    const obj: any = {};
    if (message.instance !== undefined) {
      obj.instance = message.instance;
    }
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.prediction !== undefined) {
      obj.prediction = message.prediction;
    }
    if (message.error !== undefined) {
      obj.error = PredictionResult_Error.toJSON(message.error);
    }
    return obj;
  },

  create(base?: DeepPartial<PredictionResult>): PredictionResult {
    return PredictionResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PredictionResult>): PredictionResult {
    const message = createBasePredictionResult();
    message.instance = object.instance ?? undefined;
    message.key = object.key ?? undefined;
    message.prediction = object.prediction ?? undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? PredictionResult_Error.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBasePredictionResult_Error(): PredictionResult_Error {
  return { status: 0, message: "" };
}

export const PredictionResult_Error: MessageFns<PredictionResult_Error> = {
  encode(message: PredictionResult_Error, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PredictionResult_Error {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePredictionResult_Error();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PredictionResult_Error {
    return {
      status: isSet(object.status) ? codeFromJSON(object.status) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: PredictionResult_Error): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = codeToJSON(message.status);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<PredictionResult_Error>): PredictionResult_Error {
    return PredictionResult_Error.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PredictionResult_Error>): PredictionResult_Error {
    const message = createBasePredictionResult_Error();
    message.status = object.status ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
