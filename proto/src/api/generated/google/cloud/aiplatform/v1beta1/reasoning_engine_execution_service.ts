// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/reasoning_engine_execution_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Struct, Value } from "../../../protobuf/struct.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/** Request message for [ReasoningEngineExecutionService.Query][]. */
export interface QueryReasoningEngineRequest {
  /**
   * Required. The name of the ReasoningEngine resource to use.
   * Format:
   * `projects/{project}/locations/{location}/reasoningEngines/{reasoning_engine}`
   */
  name: string;
  /**
   * Optional. Input content provided by users in JSON object format. Examples
   * include text query, function calling parameters, media bytes, etc.
   */
  input: { [key: string]: any } | undefined;
}

/** Response message for [ReasoningEngineExecutionService.Query][] */
export interface QueryReasoningEngineResponse {
  /** Response provided by users in JSON object format. */
  output: any | undefined;
}

function createBaseQueryReasoningEngineRequest(): QueryReasoningEngineRequest {
  return { name: "", input: undefined };
}

export const QueryReasoningEngineRequest: MessageFns<QueryReasoningEngineRequest> = {
  encode(message: QueryReasoningEngineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.input !== undefined) {
      Struct.encode(Struct.wrap(message.input), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryReasoningEngineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryReasoningEngineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.input = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryReasoningEngineRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      input: isObject(object.input) ? object.input : undefined,
    };
  },

  toJSON(message: QueryReasoningEngineRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.input !== undefined) {
      obj.input = message.input;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryReasoningEngineRequest>): QueryReasoningEngineRequest {
    return QueryReasoningEngineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryReasoningEngineRequest>): QueryReasoningEngineRequest {
    const message = createBaseQueryReasoningEngineRequest();
    message.name = object.name ?? "";
    message.input = object.input ?? undefined;
    return message;
  },
};

function createBaseQueryReasoningEngineResponse(): QueryReasoningEngineResponse {
  return { output: undefined };
}

export const QueryReasoningEngineResponse: MessageFns<QueryReasoningEngineResponse> = {
  encode(message: QueryReasoningEngineResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.output !== undefined) {
      Value.encode(Value.wrap(message.output), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryReasoningEngineResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryReasoningEngineResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.output = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryReasoningEngineResponse {
    return { output: isSet(object?.output) ? object.output : undefined };
  },

  toJSON(message: QueryReasoningEngineResponse): unknown {
    const obj: any = {};
    if (message.output !== undefined) {
      obj.output = message.output;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryReasoningEngineResponse>): QueryReasoningEngineResponse {
    return QueryReasoningEngineResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryReasoningEngineResponse>): QueryReasoningEngineResponse {
    const message = createBaseQueryReasoningEngineResponse();
    message.output = object.output ?? undefined;
    return message;
  },
};

/** A service for executing queries on Reasoning Engine. */
export type ReasoningEngineExecutionServiceDefinition = typeof ReasoningEngineExecutionServiceDefinition;
export const ReasoningEngineExecutionServiceDefinition = {
  name: "ReasoningEngineExecutionService",
  fullName: "google.cloud.aiplatform.v1beta1.ReasoningEngineExecutionService",
  methods: {
    /** Queries using a reasoning engine. */
    queryReasoningEngine: {
      name: "QueryReasoningEngine",
      requestType: QueryReasoningEngineRequest,
      requestStream: false,
      responseType: QueryReasoningEngineResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              68,
              58,
              1,
              42,
              34,
              63,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              69,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              125,
              58,
              113,
              117,
              101,
              114,
              121,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ReasoningEngineExecutionServiceImplementation<CallContextExt = {}> {
  /** Queries using a reasoning engine. */
  queryReasoningEngine(
    request: QueryReasoningEngineRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<QueryReasoningEngineResponse>>;
}

export interface ReasoningEngineExecutionServiceClient<CallOptionsExt = {}> {
  /** Queries using a reasoning engine. */
  queryReasoningEngine(
    request: DeepPartial<QueryReasoningEngineRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<QueryReasoningEngineResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
