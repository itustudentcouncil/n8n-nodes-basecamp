// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/model_monitor.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { ExplanationSpec } from "./explanation.js";
import {
  ModelMonitoringInput,
  ModelMonitoringNotificationSpec,
  ModelMonitoringObjectiveSpec_TabularObjective,
  ModelMonitoringOutputSpec,
} from "./model_monitoring_spec.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/**
 * Vertex AI Model Monitoring Service serves as a central hub for the analysis
 * and visualization of data quality and performance related to models.
 * ModelMonitor stands as a top level resource for overseeing your model
 * monitoring tasks.
 */
export interface ModelMonitor {
  /** Optional default tabular model monitoring objective. */
  tabularObjective?:
    | ModelMonitoringObjectiveSpec_TabularObjective
    | undefined;
  /**
   * Immutable. Resource name of the ModelMonitor. Format:
   * `projects/{project}/locations/{location}/modelMonitors/{model_monitor}`.
   */
  name: string;
  /**
   * The display name of the ModelMonitor.
   * The name can be up to 128 characters long and can consist of any UTF-8.
   */
  displayName: string;
  /**
   * The entity that is subject to analysis.
   * Currently only models in Vertex AI Model Registry are supported. If you
   * want to analyze the model which is outside the Vertex AI, you could
   * register a model in Vertex AI Model Registry using just a display name.
   */
  modelMonitoringTarget:
    | ModelMonitor_ModelMonitoringTarget
    | undefined;
  /**
   * Optional training dataset used to train the model.
   * It can serve as a reference dataset to identify changes in production.
   */
  trainingDataset:
    | ModelMonitoringInput
    | undefined;
  /**
   * Optional default notification spec, it can be overridden in the
   * ModelMonitoringJob notification spec.
   */
  notificationSpec:
    | ModelMonitoringNotificationSpec
    | undefined;
  /**
   * Optional default monitoring metrics/logs export spec, it can be overridden
   * in the ModelMonitoringJob output spec.
   * If not specified, a default Google Cloud Storage bucket will be created
   * under your project.
   */
  outputSpec:
    | ModelMonitoringOutputSpec
    | undefined;
  /**
   * Optional model explanation spec. It is used for feature attribution
   * monitoring.
   */
  explanationSpec:
    | ExplanationSpec
    | undefined;
  /**
   * Monitoring Schema is to specify the model's features, prediction outputs
   * and ground truth properties. It is used to extract pertinent data from the
   * dataset and to process features based on their properties.
   * Make sure that the schema aligns with your dataset, if it does not, we will
   * be unable to extract data from the dataset.
   * It is required for most models, but optional for Vertex AI AutoML Tables
   * unless the schem information is not available.
   */
  modelMonitoringSchema:
    | ModelMonitoringSchema
    | undefined;
  /** Output only. Timestamp when this ModelMonitor was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Timestamp when this ModelMonitor was updated most recently. */
  updateTime:
    | Date
    | undefined;
  /** Output only. Reserved for future use. */
  satisfiesPzs: boolean;
  /** Output only. Reserved for future use. */
  satisfiesPzi: boolean;
}

/**
 * The monitoring target refers to the entity that is subject to analysis.
 * e.g. Vertex AI Model version.
 */
export interface ModelMonitor_ModelMonitoringTarget {
  /** Model in Vertex AI Model Registry. */
  vertexModel?: ModelMonitor_ModelMonitoringTarget_VertexModelSource | undefined;
}

/** Model in Vertex AI Model Registry. */
export interface ModelMonitor_ModelMonitoringTarget_VertexModelSource {
  /**
   * Model resource name. Format:
   * projects/{project}/locations/{location}/models/{model}.
   */
  model: string;
  /** Model version id. */
  modelVersionId: string;
}

/** The Model Monitoring Schema definition. */
export interface ModelMonitoringSchema {
  /**
   * Feature names of the model. Vertex AI will try to match the features from
   * your dataset as follows:
   *  * For 'csv' files, the header names are required, and we will extract the
   *    corresponding feature values when the header names align with the
   *    feature names.
   *  * For 'jsonl' files, we will extract the corresponding feature values if
   *    the key names match the feature names.
   *    Note: Nested features are not supported, so please ensure your features
   *    are flattened. Ensure the feature values are scalar or an array of
   *    scalars.
   *  * For 'bigquery' dataset, we will extract the corresponding feature values
   *    if the column names match the feature names.
   *    Note: The column type can be a scalar or an array of scalars. STRUCT or
   *    JSON types are not supported. You may use SQL queries to select or
   *    aggregate the relevant features from your original table. However,
   *    ensure that the 'schema' of the query results meets our requirements.
   *  * For the Vertex AI Endpoint Request Response Logging table or Vertex AI
   *    Batch Prediction Job results. If the
   *    [instance_type][google.cloud.aiplatform.v1beta1.ModelMonitoringSchema.instance_type]
   *    is an array, ensure that the sequence in
   *    [feature_fields][google.cloud.aiplatform.v1beta1.ModelMonitoringSchema.feature_fields]
   *    matches the order of features in the prediction instance. We will match
   *    the feature with the array in the order specified in [feature_fields].
   */
  featureFields: ModelMonitoringSchema_FieldSchema[];
  /**
   * Prediction output names of the model. The requirements are the same as the
   * [feature_fields][google.cloud.aiplatform.v1beta1.ModelMonitoringSchema.feature_fields].
   * For AutoML Tables, the prediction output name presented in schema will be:
   * `predicted_{target_column}`, the `target_column` is the one you specified
   * when you train the model.
   * For Prediction output drift analysis:
   *  * AutoML Classification, the distribution of the argmax label will be
   *    analyzed.
   *  * AutoML Regression, the distribution of the value will be analyzed.
   */
  predictionFields: ModelMonitoringSchema_FieldSchema[];
  /** Target /ground truth names of the model. */
  groundTruthFields: ModelMonitoringSchema_FieldSchema[];
}

/** Schema field definition. */
export interface ModelMonitoringSchema_FieldSchema {
  /** Field name. */
  name: string;
  /**
   * Supported data types are:
   * `float`
   * `integer`
   * `boolean`
   * `string`
   * `categorical`
   */
  dataType: string;
  /** Describes if the schema field is an array of given data type. */
  repeated: boolean;
}

function createBaseModelMonitor(): ModelMonitor {
  return {
    tabularObjective: undefined,
    name: "",
    displayName: "",
    modelMonitoringTarget: undefined,
    trainingDataset: undefined,
    notificationSpec: undefined,
    outputSpec: undefined,
    explanationSpec: undefined,
    modelMonitoringSchema: undefined,
    createTime: undefined,
    updateTime: undefined,
    satisfiesPzs: false,
    satisfiesPzi: false,
  };
}

export const ModelMonitor: MessageFns<ModelMonitor> = {
  encode(message: ModelMonitor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tabularObjective !== undefined) {
      ModelMonitoringObjectiveSpec_TabularObjective.encode(message.tabularObjective, writer.uint32(90).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.modelMonitoringTarget !== undefined) {
      ModelMonitor_ModelMonitoringTarget.encode(message.modelMonitoringTarget, writer.uint32(26).fork()).join();
    }
    if (message.trainingDataset !== undefined) {
      ModelMonitoringInput.encode(message.trainingDataset, writer.uint32(82).fork()).join();
    }
    if (message.notificationSpec !== undefined) {
      ModelMonitoringNotificationSpec.encode(message.notificationSpec, writer.uint32(98).fork()).join();
    }
    if (message.outputSpec !== undefined) {
      ModelMonitoringOutputSpec.encode(message.outputSpec, writer.uint32(106).fork()).join();
    }
    if (message.explanationSpec !== undefined) {
      ExplanationSpec.encode(message.explanationSpec, writer.uint32(130).fork()).join();
    }
    if (message.modelMonitoringSchema !== undefined) {
      ModelMonitoringSchema.encode(message.modelMonitoringSchema, writer.uint32(74).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(58).fork()).join();
    }
    if (message.satisfiesPzs !== false) {
      writer.uint32(136).bool(message.satisfiesPzs);
    }
    if (message.satisfiesPzi !== false) {
      writer.uint32(144).bool(message.satisfiesPzi);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelMonitor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelMonitor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 11:
          if (tag !== 90) {
            break;
          }

          message.tabularObjective = ModelMonitoringObjectiveSpec_TabularObjective.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.modelMonitoringTarget = ModelMonitor_ModelMonitoringTarget.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.trainingDataset = ModelMonitoringInput.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.notificationSpec = ModelMonitoringNotificationSpec.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.outputSpec = ModelMonitoringOutputSpec.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.explanationSpec = ExplanationSpec.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.modelMonitoringSchema = ModelMonitoringSchema.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.satisfiesPzs = reader.bool();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.satisfiesPzi = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelMonitor {
    return {
      tabularObjective: isSet(object.tabularObjective)
        ? ModelMonitoringObjectiveSpec_TabularObjective.fromJSON(object.tabularObjective)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      modelMonitoringTarget: isSet(object.modelMonitoringTarget)
        ? ModelMonitor_ModelMonitoringTarget.fromJSON(object.modelMonitoringTarget)
        : undefined,
      trainingDataset: isSet(object.trainingDataset)
        ? ModelMonitoringInput.fromJSON(object.trainingDataset)
        : undefined,
      notificationSpec: isSet(object.notificationSpec)
        ? ModelMonitoringNotificationSpec.fromJSON(object.notificationSpec)
        : undefined,
      outputSpec: isSet(object.outputSpec) ? ModelMonitoringOutputSpec.fromJSON(object.outputSpec) : undefined,
      explanationSpec: isSet(object.explanationSpec) ? ExplanationSpec.fromJSON(object.explanationSpec) : undefined,
      modelMonitoringSchema: isSet(object.modelMonitoringSchema)
        ? ModelMonitoringSchema.fromJSON(object.modelMonitoringSchema)
        : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      satisfiesPzs: isSet(object.satisfiesPzs) ? globalThis.Boolean(object.satisfiesPzs) : false,
      satisfiesPzi: isSet(object.satisfiesPzi) ? globalThis.Boolean(object.satisfiesPzi) : false,
    };
  },

  toJSON(message: ModelMonitor): unknown {
    const obj: any = {};
    if (message.tabularObjective !== undefined) {
      obj.tabularObjective = ModelMonitoringObjectiveSpec_TabularObjective.toJSON(message.tabularObjective);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.modelMonitoringTarget !== undefined) {
      obj.modelMonitoringTarget = ModelMonitor_ModelMonitoringTarget.toJSON(message.modelMonitoringTarget);
    }
    if (message.trainingDataset !== undefined) {
      obj.trainingDataset = ModelMonitoringInput.toJSON(message.trainingDataset);
    }
    if (message.notificationSpec !== undefined) {
      obj.notificationSpec = ModelMonitoringNotificationSpec.toJSON(message.notificationSpec);
    }
    if (message.outputSpec !== undefined) {
      obj.outputSpec = ModelMonitoringOutputSpec.toJSON(message.outputSpec);
    }
    if (message.explanationSpec !== undefined) {
      obj.explanationSpec = ExplanationSpec.toJSON(message.explanationSpec);
    }
    if (message.modelMonitoringSchema !== undefined) {
      obj.modelMonitoringSchema = ModelMonitoringSchema.toJSON(message.modelMonitoringSchema);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.satisfiesPzs !== false) {
      obj.satisfiesPzs = message.satisfiesPzs;
    }
    if (message.satisfiesPzi !== false) {
      obj.satisfiesPzi = message.satisfiesPzi;
    }
    return obj;
  },

  create(base?: DeepPartial<ModelMonitor>): ModelMonitor {
    return ModelMonitor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelMonitor>): ModelMonitor {
    const message = createBaseModelMonitor();
    message.tabularObjective = (object.tabularObjective !== undefined && object.tabularObjective !== null)
      ? ModelMonitoringObjectiveSpec_TabularObjective.fromPartial(object.tabularObjective)
      : undefined;
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.modelMonitoringTarget =
      (object.modelMonitoringTarget !== undefined && object.modelMonitoringTarget !== null)
        ? ModelMonitor_ModelMonitoringTarget.fromPartial(object.modelMonitoringTarget)
        : undefined;
    message.trainingDataset = (object.trainingDataset !== undefined && object.trainingDataset !== null)
      ? ModelMonitoringInput.fromPartial(object.trainingDataset)
      : undefined;
    message.notificationSpec = (object.notificationSpec !== undefined && object.notificationSpec !== null)
      ? ModelMonitoringNotificationSpec.fromPartial(object.notificationSpec)
      : undefined;
    message.outputSpec = (object.outputSpec !== undefined && object.outputSpec !== null)
      ? ModelMonitoringOutputSpec.fromPartial(object.outputSpec)
      : undefined;
    message.explanationSpec = (object.explanationSpec !== undefined && object.explanationSpec !== null)
      ? ExplanationSpec.fromPartial(object.explanationSpec)
      : undefined;
    message.modelMonitoringSchema =
      (object.modelMonitoringSchema !== undefined && object.modelMonitoringSchema !== null)
        ? ModelMonitoringSchema.fromPartial(object.modelMonitoringSchema)
        : undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.satisfiesPzs = object.satisfiesPzs ?? false;
    message.satisfiesPzi = object.satisfiesPzi ?? false;
    return message;
  },
};

function createBaseModelMonitor_ModelMonitoringTarget(): ModelMonitor_ModelMonitoringTarget {
  return { vertexModel: undefined };
}

export const ModelMonitor_ModelMonitoringTarget: MessageFns<ModelMonitor_ModelMonitoringTarget> = {
  encode(message: ModelMonitor_ModelMonitoringTarget, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vertexModel !== undefined) {
      ModelMonitor_ModelMonitoringTarget_VertexModelSource.encode(message.vertexModel, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelMonitor_ModelMonitoringTarget {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelMonitor_ModelMonitoringTarget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.vertexModel = ModelMonitor_ModelMonitoringTarget_VertexModelSource.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelMonitor_ModelMonitoringTarget {
    return {
      vertexModel: isSet(object.vertexModel)
        ? ModelMonitor_ModelMonitoringTarget_VertexModelSource.fromJSON(object.vertexModel)
        : undefined,
    };
  },

  toJSON(message: ModelMonitor_ModelMonitoringTarget): unknown {
    const obj: any = {};
    if (message.vertexModel !== undefined) {
      obj.vertexModel = ModelMonitor_ModelMonitoringTarget_VertexModelSource.toJSON(message.vertexModel);
    }
    return obj;
  },

  create(base?: DeepPartial<ModelMonitor_ModelMonitoringTarget>): ModelMonitor_ModelMonitoringTarget {
    return ModelMonitor_ModelMonitoringTarget.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelMonitor_ModelMonitoringTarget>): ModelMonitor_ModelMonitoringTarget {
    const message = createBaseModelMonitor_ModelMonitoringTarget();
    message.vertexModel = (object.vertexModel !== undefined && object.vertexModel !== null)
      ? ModelMonitor_ModelMonitoringTarget_VertexModelSource.fromPartial(object.vertexModel)
      : undefined;
    return message;
  },
};

function createBaseModelMonitor_ModelMonitoringTarget_VertexModelSource(): ModelMonitor_ModelMonitoringTarget_VertexModelSource {
  return { model: "", modelVersionId: "" };
}

export const ModelMonitor_ModelMonitoringTarget_VertexModelSource: MessageFns<
  ModelMonitor_ModelMonitoringTarget_VertexModelSource
> = {
  encode(
    message: ModelMonitor_ModelMonitoringTarget_VertexModelSource,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.model !== "") {
      writer.uint32(10).string(message.model);
    }
    if (message.modelVersionId !== "") {
      writer.uint32(18).string(message.modelVersionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelMonitor_ModelMonitoringTarget_VertexModelSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelMonitor_ModelMonitoringTarget_VertexModelSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.model = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.modelVersionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelMonitor_ModelMonitoringTarget_VertexModelSource {
    return {
      model: isSet(object.model) ? globalThis.String(object.model) : "",
      modelVersionId: isSet(object.modelVersionId) ? globalThis.String(object.modelVersionId) : "",
    };
  },

  toJSON(message: ModelMonitor_ModelMonitoringTarget_VertexModelSource): unknown {
    const obj: any = {};
    if (message.model !== "") {
      obj.model = message.model;
    }
    if (message.modelVersionId !== "") {
      obj.modelVersionId = message.modelVersionId;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ModelMonitor_ModelMonitoringTarget_VertexModelSource>,
  ): ModelMonitor_ModelMonitoringTarget_VertexModelSource {
    return ModelMonitor_ModelMonitoringTarget_VertexModelSource.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ModelMonitor_ModelMonitoringTarget_VertexModelSource>,
  ): ModelMonitor_ModelMonitoringTarget_VertexModelSource {
    const message = createBaseModelMonitor_ModelMonitoringTarget_VertexModelSource();
    message.model = object.model ?? "";
    message.modelVersionId = object.modelVersionId ?? "";
    return message;
  },
};

function createBaseModelMonitoringSchema(): ModelMonitoringSchema {
  return { featureFields: [], predictionFields: [], groundTruthFields: [] };
}

export const ModelMonitoringSchema: MessageFns<ModelMonitoringSchema> = {
  encode(message: ModelMonitoringSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.featureFields) {
      ModelMonitoringSchema_FieldSchema.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.predictionFields) {
      ModelMonitoringSchema_FieldSchema.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.groundTruthFields) {
      ModelMonitoringSchema_FieldSchema.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelMonitoringSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelMonitoringSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.featureFields.push(ModelMonitoringSchema_FieldSchema.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.predictionFields.push(ModelMonitoringSchema_FieldSchema.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.groundTruthFields.push(ModelMonitoringSchema_FieldSchema.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelMonitoringSchema {
    return {
      featureFields: globalThis.Array.isArray(object?.featureFields)
        ? object.featureFields.map((e: any) => ModelMonitoringSchema_FieldSchema.fromJSON(e))
        : [],
      predictionFields: globalThis.Array.isArray(object?.predictionFields)
        ? object.predictionFields.map((e: any) => ModelMonitoringSchema_FieldSchema.fromJSON(e))
        : [],
      groundTruthFields: globalThis.Array.isArray(object?.groundTruthFields)
        ? object.groundTruthFields.map((e: any) => ModelMonitoringSchema_FieldSchema.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ModelMonitoringSchema): unknown {
    const obj: any = {};
    if (message.featureFields?.length) {
      obj.featureFields = message.featureFields.map((e) => ModelMonitoringSchema_FieldSchema.toJSON(e));
    }
    if (message.predictionFields?.length) {
      obj.predictionFields = message.predictionFields.map((e) => ModelMonitoringSchema_FieldSchema.toJSON(e));
    }
    if (message.groundTruthFields?.length) {
      obj.groundTruthFields = message.groundTruthFields.map((e) => ModelMonitoringSchema_FieldSchema.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ModelMonitoringSchema>): ModelMonitoringSchema {
    return ModelMonitoringSchema.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelMonitoringSchema>): ModelMonitoringSchema {
    const message = createBaseModelMonitoringSchema();
    message.featureFields = object.featureFields?.map((e) => ModelMonitoringSchema_FieldSchema.fromPartial(e)) || [];
    message.predictionFields = object.predictionFields?.map((e) => ModelMonitoringSchema_FieldSchema.fromPartial(e)) ||
      [];
    message.groundTruthFields =
      object.groundTruthFields?.map((e) => ModelMonitoringSchema_FieldSchema.fromPartial(e)) || [];
    return message;
  },
};

function createBaseModelMonitoringSchema_FieldSchema(): ModelMonitoringSchema_FieldSchema {
  return { name: "", dataType: "", repeated: false };
}

export const ModelMonitoringSchema_FieldSchema: MessageFns<ModelMonitoringSchema_FieldSchema> = {
  encode(message: ModelMonitoringSchema_FieldSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.dataType !== "") {
      writer.uint32(18).string(message.dataType);
    }
    if (message.repeated !== false) {
      writer.uint32(24).bool(message.repeated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelMonitoringSchema_FieldSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelMonitoringSchema_FieldSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataType = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.repeated = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelMonitoringSchema_FieldSchema {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      dataType: isSet(object.dataType) ? globalThis.String(object.dataType) : "",
      repeated: isSet(object.repeated) ? globalThis.Boolean(object.repeated) : false,
    };
  },

  toJSON(message: ModelMonitoringSchema_FieldSchema): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.dataType !== "") {
      obj.dataType = message.dataType;
    }
    if (message.repeated !== false) {
      obj.repeated = message.repeated;
    }
    return obj;
  },

  create(base?: DeepPartial<ModelMonitoringSchema_FieldSchema>): ModelMonitoringSchema_FieldSchema {
    return ModelMonitoringSchema_FieldSchema.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelMonitoringSchema_FieldSchema>): ModelMonitoringSchema_FieldSchema {
    const message = createBaseModelMonitoringSchema_FieldSchema();
    message.name = object.name ?? "";
    message.dataType = object.dataType ?? "";
    message.repeated = object.repeated ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
