// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/schema/predict/prediction/image_object_detection.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ListValue } from "../../../../../../protobuf/struct.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1.schema.predict.prediction";

/** Prediction output format for Image Object Detection. */
export interface ImageObjectDetectionPredictionResult {
  /**
   * The resource IDs of the AnnotationSpecs that had been identified, ordered
   * by the confidence score descendingly.
   */
  ids: Long[];
  /**
   * The display names of the AnnotationSpecs that had been identified, order
   * matches the IDs.
   */
  displayNames: string[];
  /**
   * The Model's confidences in correctness of the predicted IDs, higher value
   * means higher confidence. Order matches the Ids.
   */
  confidences: number[];
  /**
   * Bounding boxes, i.e. the rectangles over the image, that pinpoint
   * the found AnnotationSpecs. Given in order that matches the IDs. Each
   * bounding box is an array of 4 numbers `xMin`, `xMax`, `yMin`, and
   * `yMax`, which represent the extremal coordinates of the box. They are
   * relative to the image size, and the point 0,0 is in the top left
   * of the image.
   */
  bboxes: Array<any>[];
}

function createBaseImageObjectDetectionPredictionResult(): ImageObjectDetectionPredictionResult {
  return { ids: [], displayNames: [], confidences: [], bboxes: [] };
}

export const ImageObjectDetectionPredictionResult: MessageFns<ImageObjectDetectionPredictionResult> = {
  encode(message: ImageObjectDetectionPredictionResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int64(v.toString());
    }
    writer.join();
    for (const v of message.displayNames) {
      writer.uint32(18).string(v!);
    }
    writer.uint32(26).fork();
    for (const v of message.confidences) {
      writer.float(v);
    }
    writer.join();
    for (const v of message.bboxes) {
      ListValue.encode(ListValue.wrap(v!), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageObjectDetectionPredictionResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageObjectDetectionPredictionResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.ids.push(Long.fromString(reader.int64().toString()));

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(Long.fromString(reader.int64().toString()));
            }

            continue;
          }

          break;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayNames.push(reader.string());
          continue;
        case 3:
          if (tag === 29) {
            message.confidences.push(reader.float());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.confidences.push(reader.float());
            }

            continue;
          }

          break;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.bboxes.push(ListValue.unwrap(ListValue.decode(reader, reader.uint32())));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageObjectDetectionPredictionResult {
    return {
      ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => Long.fromValue(e)) : [],
      displayNames: globalThis.Array.isArray(object?.displayNames)
        ? object.displayNames.map((e: any) => globalThis.String(e))
        : [],
      confidences: globalThis.Array.isArray(object?.confidences)
        ? object.confidences.map((e: any) => globalThis.Number(e))
        : [],
      bboxes: globalThis.Array.isArray(object?.bboxes) ? object.bboxes.map((e: any) => [...e]) : [],
    };
  },

  toJSON(message: ImageObjectDetectionPredictionResult): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids.map((e) => (e || Long.ZERO).toString());
    }
    if (message.displayNames?.length) {
      obj.displayNames = message.displayNames;
    }
    if (message.confidences?.length) {
      obj.confidences = message.confidences;
    }
    if (message.bboxes?.length) {
      obj.bboxes = message.bboxes;
    }
    return obj;
  },

  create(base?: DeepPartial<ImageObjectDetectionPredictionResult>): ImageObjectDetectionPredictionResult {
    return ImageObjectDetectionPredictionResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImageObjectDetectionPredictionResult>): ImageObjectDetectionPredictionResult {
    const message = createBaseImageObjectDetectionPredictionResult();
    message.ids = object.ids?.map((e) => Long.fromValue(e)) || [];
    message.displayNames = object.displayNames?.map((e) => e) || [];
    message.confidences = object.confidences?.map((e) => e) || [];
    message.bboxes = object.bboxes?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
