// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/endpoint_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { DeployedModel, Endpoint } from "./endpoint.js";
import { GenericOperationMetadata } from "./operation.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/**
 * Request message for
 * [EndpointService.CreateEndpoint][google.cloud.aiplatform.v1beta1.EndpointService.CreateEndpoint].
 */
export interface CreateEndpointRequest {
  /**
   * Required. The resource name of the Location to create the Endpoint in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The Endpoint to create. */
  endpoint:
    | Endpoint
    | undefined;
  /**
   * Immutable. The ID to use for endpoint, which will become the final
   * component of the endpoint resource name.
   * If not provided, Vertex AI will generate a value for this ID.
   *
   * If the first character is a letter, this value may be up to 63 characters,
   * and valid characters are `[a-z0-9-]`. The last character must be a letter
   * or number.
   *
   * If the first character is a number, this value may be up to 9 characters,
   * and valid characters are `[0-9]` with no leading zeros.
   *
   * When using HTTP/JSON, this field is populated
   * based on a query string argument, such as `?endpoint_id=12345`. This is the
   * fallback for fields that are not included in either the URI or the body.
   */
  endpointId: string;
}

/**
 * Runtime operation information for
 * [EndpointService.CreateEndpoint][google.cloud.aiplatform.v1beta1.EndpointService.CreateEndpoint].
 */
export interface CreateEndpointOperationMetadata {
  /** The operation generic information. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [EndpointService.GetEndpoint][google.cloud.aiplatform.v1beta1.EndpointService.GetEndpoint]
 */
export interface GetEndpointRequest {
  /**
   * Required. The name of the Endpoint resource.
   * Format:
   * `projects/{project}/locations/{location}/endpoints/{endpoint}`
   */
  name: string;
}

/**
 * Request message for
 * [EndpointService.ListEndpoints][google.cloud.aiplatform.v1beta1.EndpointService.ListEndpoints].
 */
export interface ListEndpointsRequest {
  /**
   * Required. The resource name of the Location from which to list the
   * Endpoints. Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. An expression for filtering the results of the request. For field
   * names both snake_case and camelCase are supported.
   *
   *   * `endpoint` supports `=` and `!=`. `endpoint` represents the Endpoint
   *     ID, i.e. the last segment of the Endpoint's
   *     [resource name][google.cloud.aiplatform.v1beta1.Endpoint.name].
   *   * `display_name` supports `=` and `!=`.
   *   * `labels` supports general map functions that is:
   *     * `labels.key=value` - key:value equality
   *     * `labels.key:*` or `labels:key` - key existence
   *     * A key including a space must be quoted. `labels."a key"`.
   *   * `base_model_name` only supports `=`.
   *
   * Some examples:
   *
   *   * `endpoint=1`
   *   * `displayName="myDisplayName"`
   *   * `labels.myKey="myValue"`
   *   * `baseModelName="text-bison"`
   */
  filter: string;
  /** Optional. The standard list page size. */
  pageSize: number;
  /**
   * Optional. The standard list page token.
   * Typically obtained via
   * [ListEndpointsResponse.next_page_token][google.cloud.aiplatform.v1beta1.ListEndpointsResponse.next_page_token]
   * of the previous
   * [EndpointService.ListEndpoints][google.cloud.aiplatform.v1beta1.EndpointService.ListEndpoints]
   * call.
   */
  pageToken: string;
  /** Optional. Mask specifying which fields to read. */
  readMask: string[] | undefined;
}

/**
 * Response message for
 * [EndpointService.ListEndpoints][google.cloud.aiplatform.v1beta1.EndpointService.ListEndpoints].
 */
export interface ListEndpointsResponse {
  /** List of Endpoints in the requested page. */
  endpoints: Endpoint[];
  /**
   * A token to retrieve the next page of results.
   * Pass to
   * [ListEndpointsRequest.page_token][google.cloud.aiplatform.v1beta1.ListEndpointsRequest.page_token]
   * to obtain that page.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [EndpointService.UpdateEndpoint][google.cloud.aiplatform.v1beta1.EndpointService.UpdateEndpoint].
 */
export interface UpdateEndpointRequest {
  /** Required. The Endpoint which replaces the resource on the server. */
  endpoint:
    | Endpoint
    | undefined;
  /**
   * Required. The update mask applies to the resource. See
   * [google.protobuf.FieldMask][google.protobuf.FieldMask].
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [EndpointService.DeleteEndpoint][google.cloud.aiplatform.v1beta1.EndpointService.DeleteEndpoint].
 */
export interface DeleteEndpointRequest {
  /**
   * Required. The name of the Endpoint resource to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/endpoints/{endpoint}`
   */
  name: string;
}

/**
 * Request message for
 * [EndpointService.DeployModel][google.cloud.aiplatform.v1beta1.EndpointService.DeployModel].
 */
export interface DeployModelRequest {
  /**
   * Required. The name of the Endpoint resource into which to deploy a Model.
   * Format:
   * `projects/{project}/locations/{location}/endpoints/{endpoint}`
   */
  endpoint: string;
  /**
   * Required. The DeployedModel to be created within the Endpoint. Note that
   * [Endpoint.traffic_split][google.cloud.aiplatform.v1beta1.Endpoint.traffic_split]
   * must be updated for the DeployedModel to start receiving traffic, either as
   * part of this call, or via
   * [EndpointService.UpdateEndpoint][google.cloud.aiplatform.v1beta1.EndpointService.UpdateEndpoint].
   */
  deployedModel:
    | DeployedModel
    | undefined;
  /**
   * A map from a DeployedModel's ID to the percentage of this Endpoint's
   * traffic that should be forwarded to that DeployedModel.
   *
   * If this field is non-empty, then the Endpoint's
   * [traffic_split][google.cloud.aiplatform.v1beta1.Endpoint.traffic_split]
   * will be overwritten with it. To refer to the ID of the just being deployed
   * Model, a "0" should be used, and the actual ID of the new DeployedModel
   * will be filled in its place by this method. The traffic percentage values
   * must add up to 100.
   *
   * If this field is empty, then the Endpoint's
   * [traffic_split][google.cloud.aiplatform.v1beta1.Endpoint.traffic_split] is
   * not updated.
   */
  trafficSplit: { [key: string]: number };
}

export interface DeployModelRequest_TrafficSplitEntry {
  key: string;
  value: number;
}

/**
 * Response message for
 * [EndpointService.DeployModel][google.cloud.aiplatform.v1beta1.EndpointService.DeployModel].
 */
export interface DeployModelResponse {
  /** The DeployedModel that had been deployed in the Endpoint. */
  deployedModel: DeployedModel | undefined;
}

/**
 * Runtime operation information for
 * [EndpointService.DeployModel][google.cloud.aiplatform.v1beta1.EndpointService.DeployModel].
 */
export interface DeployModelOperationMetadata {
  /** The operation generic information. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [EndpointService.UndeployModel][google.cloud.aiplatform.v1beta1.EndpointService.UndeployModel].
 */
export interface UndeployModelRequest {
  /**
   * Required. The name of the Endpoint resource from which to undeploy a Model.
   * Format:
   * `projects/{project}/locations/{location}/endpoints/{endpoint}`
   */
  endpoint: string;
  /** Required. The ID of the DeployedModel to be undeployed from the Endpoint. */
  deployedModelId: string;
  /**
   * If this field is provided, then the Endpoint's
   * [traffic_split][google.cloud.aiplatform.v1beta1.Endpoint.traffic_split]
   * will be overwritten with it. If last DeployedModel is being undeployed from
   * the Endpoint, the [Endpoint.traffic_split] will always end up empty when
   * this call returns. A DeployedModel will be successfully undeployed only if
   * it doesn't have any traffic assigned to it when this method executes, or if
   * this field unassigns any traffic to it.
   */
  trafficSplit: { [key: string]: number };
}

export interface UndeployModelRequest_TrafficSplitEntry {
  key: string;
  value: number;
}

/**
 * Response message for
 * [EndpointService.UndeployModel][google.cloud.aiplatform.v1beta1.EndpointService.UndeployModel].
 */
export interface UndeployModelResponse {
}

/**
 * Runtime operation information for
 * [EndpointService.UndeployModel][google.cloud.aiplatform.v1beta1.EndpointService.UndeployModel].
 */
export interface UndeployModelOperationMetadata {
  /** The operation generic information. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [EndpointService.MutateDeployedModel][google.cloud.aiplatform.v1beta1.EndpointService.MutateDeployedModel].
 */
export interface MutateDeployedModelRequest {
  /**
   * Required. The name of the Endpoint resource into which to mutate a
   * DeployedModel. Format:
   * `projects/{project}/locations/{location}/endpoints/{endpoint}`
   */
  endpoint: string;
  /**
   * Required. The DeployedModel to be mutated within the Endpoint. Only the
   * following fields can be mutated:
   *
   * * `min_replica_count` in either
   * [DedicatedResources][google.cloud.aiplatform.v1beta1.DedicatedResources] or
   * [AutomaticResources][google.cloud.aiplatform.v1beta1.AutomaticResources]
   * * `max_replica_count` in either
   * [DedicatedResources][google.cloud.aiplatform.v1beta1.DedicatedResources] or
   * [AutomaticResources][google.cloud.aiplatform.v1beta1.AutomaticResources]
   * * [autoscaling_metric_specs][google.cloud.aiplatform.v1beta1.DedicatedResources.autoscaling_metric_specs]
   * * `disable_container_logging` (v1 only)
   * * `enable_container_logging` (v1beta1 only)
   */
  deployedModel:
    | DeployedModel
    | undefined;
  /**
   * Required. The update mask applies to the resource. See
   * [google.protobuf.FieldMask][google.protobuf.FieldMask].
   */
  updateMask: string[] | undefined;
}

/**
 * Response message for
 * [EndpointService.MutateDeployedModel][google.cloud.aiplatform.v1beta1.EndpointService.MutateDeployedModel].
 */
export interface MutateDeployedModelResponse {
  /** The DeployedModel that's being mutated. */
  deployedModel: DeployedModel | undefined;
}

/**
 * Runtime operation information for
 * [EndpointService.MutateDeployedModel][google.cloud.aiplatform.v1beta1.EndpointService.MutateDeployedModel].
 */
export interface MutateDeployedModelOperationMetadata {
  /** The operation generic information. */
  genericMetadata: GenericOperationMetadata | undefined;
}

function createBaseCreateEndpointRequest(): CreateEndpointRequest {
  return { parent: "", endpoint: undefined, endpointId: "" };
}

export const CreateEndpointRequest: MessageFns<CreateEndpointRequest> = {
  encode(message: CreateEndpointRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.endpoint !== undefined) {
      Endpoint.encode(message.endpoint, writer.uint32(18).fork()).join();
    }
    if (message.endpointId !== "") {
      writer.uint32(34).string(message.endpointId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEndpointRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEndpointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endpoint = Endpoint.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.endpointId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEndpointRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      endpoint: isSet(object.endpoint) ? Endpoint.fromJSON(object.endpoint) : undefined,
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
    };
  },

  toJSON(message: CreateEndpointRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.endpoint !== undefined) {
      obj.endpoint = Endpoint.toJSON(message.endpoint);
    }
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEndpointRequest>): CreateEndpointRequest {
    return CreateEndpointRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEndpointRequest>): CreateEndpointRequest {
    const message = createBaseCreateEndpointRequest();
    message.parent = object.parent ?? "";
    message.endpoint = (object.endpoint !== undefined && object.endpoint !== null)
      ? Endpoint.fromPartial(object.endpoint)
      : undefined;
    message.endpointId = object.endpointId ?? "";
    return message;
  },
};

function createBaseCreateEndpointOperationMetadata(): CreateEndpointOperationMetadata {
  return { genericMetadata: undefined };
}

export const CreateEndpointOperationMetadata: MessageFns<CreateEndpointOperationMetadata> = {
  encode(message: CreateEndpointOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEndpointOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEndpointOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEndpointOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: CreateEndpointOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEndpointOperationMetadata>): CreateEndpointOperationMetadata {
    return CreateEndpointOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEndpointOperationMetadata>): CreateEndpointOperationMetadata {
    const message = createBaseCreateEndpointOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseGetEndpointRequest(): GetEndpointRequest {
  return { name: "" };
}

export const GetEndpointRequest: MessageFns<GetEndpointRequest> = {
  encode(message: GetEndpointRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEndpointRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEndpointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEndpointRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEndpointRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEndpointRequest>): GetEndpointRequest {
    return GetEndpointRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEndpointRequest>): GetEndpointRequest {
    const message = createBaseGetEndpointRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListEndpointsRequest(): ListEndpointsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", readMask: undefined };
}

export const ListEndpointsRequest: MessageFns<ListEndpointsRequest> = {
  encode(message: ListEndpointsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEndpointsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEndpointsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEndpointsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: ListEndpointsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<ListEndpointsRequest>): ListEndpointsRequest {
    return ListEndpointsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEndpointsRequest>): ListEndpointsRequest {
    const message = createBaseListEndpointsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListEndpointsResponse(): ListEndpointsResponse {
  return { endpoints: [], nextPageToken: "" };
}

export const ListEndpointsResponse: MessageFns<ListEndpointsResponse> = {
  encode(message: ListEndpointsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.endpoints) {
      Endpoint.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEndpointsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEndpointsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.endpoints.push(Endpoint.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEndpointsResponse {
    return {
      endpoints: globalThis.Array.isArray(object?.endpoints)
        ? object.endpoints.map((e: any) => Endpoint.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListEndpointsResponse): unknown {
    const obj: any = {};
    if (message.endpoints?.length) {
      obj.endpoints = message.endpoints.map((e) => Endpoint.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEndpointsResponse>): ListEndpointsResponse {
    return ListEndpointsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEndpointsResponse>): ListEndpointsResponse {
    const message = createBaseListEndpointsResponse();
    message.endpoints = object.endpoints?.map((e) => Endpoint.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateEndpointRequest(): UpdateEndpointRequest {
  return { endpoint: undefined, updateMask: undefined };
}

export const UpdateEndpointRequest: MessageFns<UpdateEndpointRequest> = {
  encode(message: UpdateEndpointRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpoint !== undefined) {
      Endpoint.encode(message.endpoint, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEndpointRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEndpointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.endpoint = Endpoint.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEndpointRequest {
    return {
      endpoint: isSet(object.endpoint) ? Endpoint.fromJSON(object.endpoint) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateEndpointRequest): unknown {
    const obj: any = {};
    if (message.endpoint !== undefined) {
      obj.endpoint = Endpoint.toJSON(message.endpoint);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEndpointRequest>): UpdateEndpointRequest {
    return UpdateEndpointRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEndpointRequest>): UpdateEndpointRequest {
    const message = createBaseUpdateEndpointRequest();
    message.endpoint = (object.endpoint !== undefined && object.endpoint !== null)
      ? Endpoint.fromPartial(object.endpoint)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteEndpointRequest(): DeleteEndpointRequest {
  return { name: "" };
}

export const DeleteEndpointRequest: MessageFns<DeleteEndpointRequest> = {
  encode(message: DeleteEndpointRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEndpointRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEndpointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEndpointRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteEndpointRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEndpointRequest>): DeleteEndpointRequest {
    return DeleteEndpointRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEndpointRequest>): DeleteEndpointRequest {
    const message = createBaseDeleteEndpointRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeployModelRequest(): DeployModelRequest {
  return { endpoint: "", deployedModel: undefined, trafficSplit: {} };
}

export const DeployModelRequest: MessageFns<DeployModelRequest> = {
  encode(message: DeployModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpoint !== "") {
      writer.uint32(10).string(message.endpoint);
    }
    if (message.deployedModel !== undefined) {
      DeployedModel.encode(message.deployedModel, writer.uint32(18).fork()).join();
    }
    Object.entries(message.trafficSplit).forEach(([key, value]) => {
      DeployModelRequest_TrafficSplitEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deployedModel = DeployedModel.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = DeployModelRequest_TrafficSplitEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.trafficSplit[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployModelRequest {
    return {
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      deployedModel: isSet(object.deployedModel) ? DeployedModel.fromJSON(object.deployedModel) : undefined,
      trafficSplit: isObject(object.trafficSplit)
        ? Object.entries(object.trafficSplit).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: DeployModelRequest): unknown {
    const obj: any = {};
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.deployedModel !== undefined) {
      obj.deployedModel = DeployedModel.toJSON(message.deployedModel);
    }
    if (message.trafficSplit) {
      const entries = Object.entries(message.trafficSplit);
      if (entries.length > 0) {
        obj.trafficSplit = {};
        entries.forEach(([k, v]) => {
          obj.trafficSplit[k] = Math.round(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<DeployModelRequest>): DeployModelRequest {
    return DeployModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployModelRequest>): DeployModelRequest {
    const message = createBaseDeployModelRequest();
    message.endpoint = object.endpoint ?? "";
    message.deployedModel = (object.deployedModel !== undefined && object.deployedModel !== null)
      ? DeployedModel.fromPartial(object.deployedModel)
      : undefined;
    message.trafficSplit = Object.entries(object.trafficSplit ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseDeployModelRequest_TrafficSplitEntry(): DeployModelRequest_TrafficSplitEntry {
  return { key: "", value: 0 };
}

export const DeployModelRequest_TrafficSplitEntry: MessageFns<DeployModelRequest_TrafficSplitEntry> = {
  encode(message: DeployModelRequest_TrafficSplitEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployModelRequest_TrafficSplitEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployModelRequest_TrafficSplitEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployModelRequest_TrafficSplitEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: DeployModelRequest_TrafficSplitEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<DeployModelRequest_TrafficSplitEntry>): DeployModelRequest_TrafficSplitEntry {
    return DeployModelRequest_TrafficSplitEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployModelRequest_TrafficSplitEntry>): DeployModelRequest_TrafficSplitEntry {
    const message = createBaseDeployModelRequest_TrafficSplitEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseDeployModelResponse(): DeployModelResponse {
  return { deployedModel: undefined };
}

export const DeployModelResponse: MessageFns<DeployModelResponse> = {
  encode(message: DeployModelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployedModel !== undefined) {
      DeployedModel.encode(message.deployedModel, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployModelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployModelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deployedModel = DeployedModel.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployModelResponse {
    return { deployedModel: isSet(object.deployedModel) ? DeployedModel.fromJSON(object.deployedModel) : undefined };
  },

  toJSON(message: DeployModelResponse): unknown {
    const obj: any = {};
    if (message.deployedModel !== undefined) {
      obj.deployedModel = DeployedModel.toJSON(message.deployedModel);
    }
    return obj;
  },

  create(base?: DeepPartial<DeployModelResponse>): DeployModelResponse {
    return DeployModelResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployModelResponse>): DeployModelResponse {
    const message = createBaseDeployModelResponse();
    message.deployedModel = (object.deployedModel !== undefined && object.deployedModel !== null)
      ? DeployedModel.fromPartial(object.deployedModel)
      : undefined;
    return message;
  },
};

function createBaseDeployModelOperationMetadata(): DeployModelOperationMetadata {
  return { genericMetadata: undefined };
}

export const DeployModelOperationMetadata: MessageFns<DeployModelOperationMetadata> = {
  encode(message: DeployModelOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployModelOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployModelOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployModelOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: DeployModelOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<DeployModelOperationMetadata>): DeployModelOperationMetadata {
    return DeployModelOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployModelOperationMetadata>): DeployModelOperationMetadata {
    const message = createBaseDeployModelOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseUndeployModelRequest(): UndeployModelRequest {
  return { endpoint: "", deployedModelId: "", trafficSplit: {} };
}

export const UndeployModelRequest: MessageFns<UndeployModelRequest> = {
  encode(message: UndeployModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpoint !== "") {
      writer.uint32(10).string(message.endpoint);
    }
    if (message.deployedModelId !== "") {
      writer.uint32(18).string(message.deployedModelId);
    }
    Object.entries(message.trafficSplit).forEach(([key, value]) => {
      UndeployModelRequest_TrafficSplitEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeployModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeployModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deployedModelId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = UndeployModelRequest_TrafficSplitEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.trafficSplit[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeployModelRequest {
    return {
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      deployedModelId: isSet(object.deployedModelId) ? globalThis.String(object.deployedModelId) : "",
      trafficSplit: isObject(object.trafficSplit)
        ? Object.entries(object.trafficSplit).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: UndeployModelRequest): unknown {
    const obj: any = {};
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.deployedModelId !== "") {
      obj.deployedModelId = message.deployedModelId;
    }
    if (message.trafficSplit) {
      const entries = Object.entries(message.trafficSplit);
      if (entries.length > 0) {
        obj.trafficSplit = {};
        entries.forEach(([k, v]) => {
          obj.trafficSplit[k] = Math.round(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<UndeployModelRequest>): UndeployModelRequest {
    return UndeployModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeployModelRequest>): UndeployModelRequest {
    const message = createBaseUndeployModelRequest();
    message.endpoint = object.endpoint ?? "";
    message.deployedModelId = object.deployedModelId ?? "";
    message.trafficSplit = Object.entries(object.trafficSplit ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseUndeployModelRequest_TrafficSplitEntry(): UndeployModelRequest_TrafficSplitEntry {
  return { key: "", value: 0 };
}

export const UndeployModelRequest_TrafficSplitEntry: MessageFns<UndeployModelRequest_TrafficSplitEntry> = {
  encode(message: UndeployModelRequest_TrafficSplitEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeployModelRequest_TrafficSplitEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeployModelRequest_TrafficSplitEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeployModelRequest_TrafficSplitEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: UndeployModelRequest_TrafficSplitEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<UndeployModelRequest_TrafficSplitEntry>): UndeployModelRequest_TrafficSplitEntry {
    return UndeployModelRequest_TrafficSplitEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeployModelRequest_TrafficSplitEntry>): UndeployModelRequest_TrafficSplitEntry {
    const message = createBaseUndeployModelRequest_TrafficSplitEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseUndeployModelResponse(): UndeployModelResponse {
  return {};
}

export const UndeployModelResponse: MessageFns<UndeployModelResponse> = {
  encode(_: UndeployModelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeployModelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeployModelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UndeployModelResponse {
    return {};
  },

  toJSON(_: UndeployModelResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UndeployModelResponse>): UndeployModelResponse {
    return UndeployModelResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UndeployModelResponse>): UndeployModelResponse {
    const message = createBaseUndeployModelResponse();
    return message;
  },
};

function createBaseUndeployModelOperationMetadata(): UndeployModelOperationMetadata {
  return { genericMetadata: undefined };
}

export const UndeployModelOperationMetadata: MessageFns<UndeployModelOperationMetadata> = {
  encode(message: UndeployModelOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeployModelOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeployModelOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeployModelOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: UndeployModelOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<UndeployModelOperationMetadata>): UndeployModelOperationMetadata {
    return UndeployModelOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeployModelOperationMetadata>): UndeployModelOperationMetadata {
    const message = createBaseUndeployModelOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseMutateDeployedModelRequest(): MutateDeployedModelRequest {
  return { endpoint: "", deployedModel: undefined, updateMask: undefined };
}

export const MutateDeployedModelRequest: MessageFns<MutateDeployedModelRequest> = {
  encode(message: MutateDeployedModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpoint !== "") {
      writer.uint32(10).string(message.endpoint);
    }
    if (message.deployedModel !== undefined) {
      DeployedModel.encode(message.deployedModel, writer.uint32(18).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateDeployedModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateDeployedModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deployedModel = DeployedModel.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateDeployedModelRequest {
    return {
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      deployedModel: isSet(object.deployedModel) ? DeployedModel.fromJSON(object.deployedModel) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: MutateDeployedModelRequest): unknown {
    const obj: any = {};
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.deployedModel !== undefined) {
      obj.deployedModel = DeployedModel.toJSON(message.deployedModel);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<MutateDeployedModelRequest>): MutateDeployedModelRequest {
    return MutateDeployedModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateDeployedModelRequest>): MutateDeployedModelRequest {
    const message = createBaseMutateDeployedModelRequest();
    message.endpoint = object.endpoint ?? "";
    message.deployedModel = (object.deployedModel !== undefined && object.deployedModel !== null)
      ? DeployedModel.fromPartial(object.deployedModel)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseMutateDeployedModelResponse(): MutateDeployedModelResponse {
  return { deployedModel: undefined };
}

export const MutateDeployedModelResponse: MessageFns<MutateDeployedModelResponse> = {
  encode(message: MutateDeployedModelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployedModel !== undefined) {
      DeployedModel.encode(message.deployedModel, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateDeployedModelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateDeployedModelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deployedModel = DeployedModel.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateDeployedModelResponse {
    return { deployedModel: isSet(object.deployedModel) ? DeployedModel.fromJSON(object.deployedModel) : undefined };
  },

  toJSON(message: MutateDeployedModelResponse): unknown {
    const obj: any = {};
    if (message.deployedModel !== undefined) {
      obj.deployedModel = DeployedModel.toJSON(message.deployedModel);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateDeployedModelResponse>): MutateDeployedModelResponse {
    return MutateDeployedModelResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateDeployedModelResponse>): MutateDeployedModelResponse {
    const message = createBaseMutateDeployedModelResponse();
    message.deployedModel = (object.deployedModel !== undefined && object.deployedModel !== null)
      ? DeployedModel.fromPartial(object.deployedModel)
      : undefined;
    return message;
  },
};

function createBaseMutateDeployedModelOperationMetadata(): MutateDeployedModelOperationMetadata {
  return { genericMetadata: undefined };
}

export const MutateDeployedModelOperationMetadata: MessageFns<MutateDeployedModelOperationMetadata> = {
  encode(message: MutateDeployedModelOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateDeployedModelOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateDeployedModelOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateDeployedModelOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: MutateDeployedModelOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateDeployedModelOperationMetadata>): MutateDeployedModelOperationMetadata {
    return MutateDeployedModelOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateDeployedModelOperationMetadata>): MutateDeployedModelOperationMetadata {
    const message = createBaseMutateDeployedModelOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

/** A service for managing Vertex AI's Endpoints. */
export type EndpointServiceDefinition = typeof EndpointServiceDefinition;
export const EndpointServiceDefinition = {
  name: "EndpointService",
  fullName: "google.cloud.aiplatform.v1beta1.EndpointService",
  methods: {
    /** Creates an Endpoint. */
    createEndpoint: {
      name: "CreateEndpoint",
      requestType: CreateEndpointRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              43,
              10,
              8,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              18,
              31,
              67,
              114,
              101,
              97,
              116,
              101,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 101, 110, 100, 112, 111, 105, 110, 116]),
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              44,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              8,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              34,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets an Endpoint. */
    getEndpoint: {
      name: "GetEndpoint",
      requestType: GetEndpointRequest,
      requestStream: false,
      responseType: Endpoint,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Endpoints in a Location. */
    listEndpoints: {
      name: "ListEndpoints",
      requestType: ListEndpointsRequest,
      requestStream: false,
      responseType: ListEndpointsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an Endpoint. */
    updateEndpoint: {
      name: "UpdateEndpoint",
      requestType: UpdateEndpointRequest,
      requestStream: false,
      responseType: Endpoint,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              71,
              58,
              8,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              50,
              59,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an Endpoint. */
    deleteEndpoint: {
      name: "DeleteEndpoint",
      requestType: DeleteEndpointRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              42,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deploys a Model into this Endpoint, creating a DeployedModel within it. */
    deployModel: {
      name: "DeployModel",
      requestType: DeployModelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              51,
              10,
              19,
              68,
              101,
              112,
              108,
              111,
              121,
              77,
              111,
              100,
              101,
              108,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              28,
              68,
              101,
              112,
              108,
              111,
              121,
              77,
              111,
              100,
              101,
              108,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              37,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              44,
              100,
              101,
              112,
              108,
              111,
              121,
              101,
              100,
              95,
              109,
              111,
              100,
              101,
              108,
              44,
              116,
              114,
              97,
              102,
              102,
              105,
              99,
              95,
              115,
              112,
              108,
              105,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              71,
              58,
              1,
              42,
              34,
              66,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              112,
              108,
              111,
              121,
              77,
              111,
              100,
              101,
              108,
            ]),
          ],
        },
      },
    },
    /**
     * Undeploys a Model from an Endpoint, removing a DeployedModel from it, and
     * freeing all resources it's using.
     */
    undeployModel: {
      name: "UndeployModel",
      requestType: UndeployModelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              55,
              10,
              21,
              85,
              110,
              100,
              101,
              112,
              108,
              111,
              121,
              77,
              111,
              100,
              101,
              108,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              30,
              85,
              110,
              100,
              101,
              112,
              108,
              111,
              121,
              77,
              111,
              100,
              101,
              108,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              40,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              44,
              100,
              101,
              112,
              108,
              111,
              121,
              101,
              100,
              95,
              109,
              111,
              100,
              101,
              108,
              95,
              105,
              100,
              44,
              116,
              114,
              97,
              102,
              102,
              105,
              99,
              95,
              115,
              112,
              108,
              105,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              73,
              58,
              1,
              42,
              34,
              68,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              100,
              101,
              112,
              108,
              111,
              121,
              77,
              111,
              100,
              101,
              108,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an existing deployed model. Updatable fields include
     * `min_replica_count`, `max_replica_count`, `autoscaling_metric_specs`,
     * `disable_container_logging` (v1 only), and `enable_container_logging`
     * (v1beta1 only).
     */
    mutateDeployedModel: {
      name: "MutateDeployedModel",
      requestType: MutateDeployedModelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              67,
              10,
              27,
              77,
              117,
              116,
              97,
              116,
              101,
              68,
              101,
              112,
              108,
              111,
              121,
              101,
              100,
              77,
              111,
              100,
              101,
              108,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              36,
              77,
              117,
              116,
              97,
              116,
              101,
              68,
              101,
              112,
              108,
              111,
              121,
              101,
              100,
              77,
              111,
              100,
              101,
              108,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              35,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              44,
              100,
              101,
              112,
              108,
              111,
              121,
              101,
              100,
              95,
              109,
              111,
              100,
              101,
              108,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              79,
              58,
              1,
              42,
              34,
              74,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              109,
              117,
              116,
              97,
              116,
              101,
              68,
              101,
              112,
              108,
              111,
              121,
              101,
              100,
              77,
              111,
              100,
              101,
              108,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface EndpointServiceImplementation<CallContextExt = {}> {
  /** Creates an Endpoint. */
  createEndpoint(
    request: CreateEndpointRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets an Endpoint. */
  getEndpoint(request: GetEndpointRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Endpoint>>;
  /** Lists Endpoints in a Location. */
  listEndpoints(
    request: ListEndpointsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEndpointsResponse>>;
  /** Updates an Endpoint. */
  updateEndpoint(request: UpdateEndpointRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Endpoint>>;
  /** Deletes an Endpoint. */
  deleteEndpoint(
    request: DeleteEndpointRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deploys a Model into this Endpoint, creating a DeployedModel within it. */
  deployModel(request: DeployModelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Undeploys a Model from an Endpoint, removing a DeployedModel from it, and
   * freeing all resources it's using.
   */
  undeployModel(request: UndeployModelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Updates an existing deployed model. Updatable fields include
   * `min_replica_count`, `max_replica_count`, `autoscaling_metric_specs`,
   * `disable_container_logging` (v1 only), and `enable_container_logging`
   * (v1beta1 only).
   */
  mutateDeployedModel(
    request: MutateDeployedModelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface EndpointServiceClient<CallOptionsExt = {}> {
  /** Creates an Endpoint. */
  createEndpoint(
    request: DeepPartial<CreateEndpointRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets an Endpoint. */
  getEndpoint(request: DeepPartial<GetEndpointRequest>, options?: CallOptions & CallOptionsExt): Promise<Endpoint>;
  /** Lists Endpoints in a Location. */
  listEndpoints(
    request: DeepPartial<ListEndpointsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEndpointsResponse>;
  /** Updates an Endpoint. */
  updateEndpoint(
    request: DeepPartial<UpdateEndpointRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Endpoint>;
  /** Deletes an Endpoint. */
  deleteEndpoint(
    request: DeepPartial<DeleteEndpointRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deploys a Model into this Endpoint, creating a DeployedModel within it. */
  deployModel(request: DeepPartial<DeployModelRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Undeploys a Model from an Endpoint, removing a DeployedModel from it, and
   * freeing all resources it's using.
   */
  undeployModel(request: DeepPartial<UndeployModelRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Updates an existing deployed model. Updatable fields include
   * `min_replica_count`, `max_replica_count`, `autoscaling_metric_specs`,
   * `disable_container_logging` (v1 only), and `enable_container_logging`
   * (v1beta1 only).
   */
  mutateDeployedModel(
    request: DeepPartial<MutateDeployedModelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
