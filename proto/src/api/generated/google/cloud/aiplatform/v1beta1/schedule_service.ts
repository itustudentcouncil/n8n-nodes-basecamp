// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/schedule_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Schedule } from "./schedule.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/**
 * Request message for
 * [ScheduleService.CreateSchedule][google.cloud.aiplatform.v1beta1.ScheduleService.CreateSchedule].
 */
export interface CreateScheduleRequest {
  /**
   * Required. The resource name of the Location to create the Schedule in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The Schedule to create. */
  schedule: Schedule | undefined;
}

/**
 * Request message for
 * [ScheduleService.GetSchedule][google.cloud.aiplatform.v1beta1.ScheduleService.GetSchedule].
 */
export interface GetScheduleRequest {
  /**
   * Required. The name of the Schedule resource.
   * Format:
   * `projects/{project}/locations/{location}/schedules/{schedule}`
   */
  name: string;
}

/**
 * Request message for
 * [ScheduleService.ListSchedules][google.cloud.aiplatform.v1beta1.ScheduleService.ListSchedules].
 */
export interface ListSchedulesRequest {
  /**
   * Required. The resource name of the Location to list the Schedules from.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Lists the Schedules that match the filter expression. The following
   * fields are supported:
   *
   * * `display_name`: Supports `=`, `!=` comparisons, and `:` wildcard.
   * * `state`: Supports `=` and `!=` comparisons.
   * * `request`: Supports existence of the <request_type> check.
   *       (e.g. `create_pipeline_job_request:*` --> Schedule has
   *       create_pipeline_job_request).
   * * `create_time`: Supports `=`, `!=`, `<`, `>`, `<=`, and `>=` comparisons.
   *       Values must be in RFC 3339 format.
   * * `start_time`: Supports `=`, `!=`, `<`, `>`, `<=`, and `>=` comparisons.
   *       Values must be in RFC 3339 format.
   * * `end_time`: Supports `=`, `!=`, `<`, `>`, `<=`, `>=` comparisons and `:*`
   *       existence check. Values must be in RFC 3339 format.
   * * `next_run_time`: Supports `=`, `!=`, `<`, `>`, `<=`, and `>=`
   *       comparisons. Values must be in RFC 3339 format.
   *
   * Filter expressions can be combined together using logical operators
   * (`NOT`, `AND` & `OR`).
   * The syntax to define filter expression is based on
   * https://google.aip.dev/160.
   *
   * Examples:
   *
   * * `state="ACTIVE" AND display_name:"my_schedule_*"`
   * * `NOT display_name="my_schedule"`
   * * `create_time>"2021-05-18T00:00:00Z"`
   * * `end_time>"2021-05-18T00:00:00Z" OR NOT end_time:*`
   * * `create_pipeline_job_request:*`
   */
  filter: string;
  /**
   * The standard list page size.
   * Default to 100 if not specified.
   */
  pageSize: number;
  /**
   * The standard list page token.
   * Typically obtained via
   * [ListSchedulesResponse.next_page_token][google.cloud.aiplatform.v1beta1.ListSchedulesResponse.next_page_token]
   * of the previous
   * [ScheduleService.ListSchedules][google.cloud.aiplatform.v1beta1.ScheduleService.ListSchedules]
   * call.
   */
  pageToken: string;
  /**
   * A comma-separated list of fields to order by. The default sort order is in
   * ascending order. Use "desc" after a field name for descending. You can have
   * multiple order_by fields provided.
   *
   * For example, using "create_time desc, end_time" will order results by
   * create time in descending order, and if there are multiple schedules having
   * the same create time, order them by the end time in ascending order.
   *
   * If order_by is not specified, it will order by default with create_time in
   * descending order.
   *
   * Supported fields:
   *
   *   * `create_time`
   *   * `start_time`
   *   * `end_time`
   *   * `next_run_time`
   */
  orderBy: string;
}

/**
 * Response message for
 * [ScheduleService.ListSchedules][google.cloud.aiplatform.v1beta1.ScheduleService.ListSchedules]
 */
export interface ListSchedulesResponse {
  /** List of Schedules in the requested page. */
  schedules: Schedule[];
  /**
   * A token to retrieve the next page of results.
   * Pass to
   * [ListSchedulesRequest.page_token][google.cloud.aiplatform.v1beta1.ListSchedulesRequest.page_token]
   * to obtain that page.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [ScheduleService.DeleteSchedule][google.cloud.aiplatform.v1beta1.ScheduleService.DeleteSchedule].
 */
export interface DeleteScheduleRequest {
  /**
   * Required. The name of the Schedule resource to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/schedules/{schedule}`
   */
  name: string;
}

/**
 * Request message for
 * [ScheduleService.PauseSchedule][google.cloud.aiplatform.v1beta1.ScheduleService.PauseSchedule].
 */
export interface PauseScheduleRequest {
  /**
   * Required. The name of the Schedule resource to be paused.
   * Format:
   * `projects/{project}/locations/{location}/schedules/{schedule}`
   */
  name: string;
}

/**
 * Request message for
 * [ScheduleService.ResumeSchedule][google.cloud.aiplatform.v1beta1.ScheduleService.ResumeSchedule].
 */
export interface ResumeScheduleRequest {
  /**
   * Required. The name of the Schedule resource to be resumed.
   * Format:
   * `projects/{project}/locations/{location}/schedules/{schedule}`
   */
  name: string;
  /**
   * Optional. Whether to backfill missed runs when the schedule is resumed from
   * PAUSED state. If set to true, all missed runs will be scheduled. New runs
   * will be scheduled after the backfill is complete. This will also update
   * [Schedule.catch_up][google.cloud.aiplatform.v1beta1.Schedule.catch_up]
   * field. Default to false.
   */
  catchUp: boolean;
}

/**
 * Request message for
 * [ScheduleService.UpdateSchedule][google.cloud.aiplatform.v1beta1.ScheduleService.UpdateSchedule].
 */
export interface UpdateScheduleRequest {
  /**
   * Required. The Schedule which replaces the resource on the server.
   * The following restrictions will be applied:
   *
   *   * The scheduled request type cannot be changed.
   *   * The non-empty fields cannot be unset.
   *   * The output_only fields will be ignored if specified.
   */
  schedule:
    | Schedule
    | undefined;
  /**
   * Required. The update mask applies to the resource. See
   * [google.protobuf.FieldMask][google.protobuf.FieldMask].
   */
  updateMask: string[] | undefined;
}

function createBaseCreateScheduleRequest(): CreateScheduleRequest {
  return { parent: "", schedule: undefined };
}

export const CreateScheduleRequest: MessageFns<CreateScheduleRequest> = {
  encode(message: CreateScheduleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.schedule !== undefined) {
      Schedule.encode(message.schedule, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateScheduleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateScheduleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.schedule = Schedule.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateScheduleRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      schedule: isSet(object.schedule) ? Schedule.fromJSON(object.schedule) : undefined,
    };
  },

  toJSON(message: CreateScheduleRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.schedule !== undefined) {
      obj.schedule = Schedule.toJSON(message.schedule);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateScheduleRequest>): CreateScheduleRequest {
    return CreateScheduleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateScheduleRequest>): CreateScheduleRequest {
    const message = createBaseCreateScheduleRequest();
    message.parent = object.parent ?? "";
    message.schedule = (object.schedule !== undefined && object.schedule !== null)
      ? Schedule.fromPartial(object.schedule)
      : undefined;
    return message;
  },
};

function createBaseGetScheduleRequest(): GetScheduleRequest {
  return { name: "" };
}

export const GetScheduleRequest: MessageFns<GetScheduleRequest> = {
  encode(message: GetScheduleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetScheduleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetScheduleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetScheduleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetScheduleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetScheduleRequest>): GetScheduleRequest {
    return GetScheduleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetScheduleRequest>): GetScheduleRequest {
    const message = createBaseGetScheduleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSchedulesRequest(): ListSchedulesRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", orderBy: "" };
}

export const ListSchedulesRequest: MessageFns<ListSchedulesRequest> = {
  encode(message: ListSchedulesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSchedulesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSchedulesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSchedulesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListSchedulesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSchedulesRequest>): ListSchedulesRequest {
    return ListSchedulesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSchedulesRequest>): ListSchedulesRequest {
    const message = createBaseListSchedulesRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListSchedulesResponse(): ListSchedulesResponse {
  return { schedules: [], nextPageToken: "" };
}

export const ListSchedulesResponse: MessageFns<ListSchedulesResponse> = {
  encode(message: ListSchedulesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.schedules) {
      Schedule.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSchedulesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSchedulesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.schedules.push(Schedule.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSchedulesResponse {
    return {
      schedules: globalThis.Array.isArray(object?.schedules)
        ? object.schedules.map((e: any) => Schedule.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSchedulesResponse): unknown {
    const obj: any = {};
    if (message.schedules?.length) {
      obj.schedules = message.schedules.map((e) => Schedule.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSchedulesResponse>): ListSchedulesResponse {
    return ListSchedulesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSchedulesResponse>): ListSchedulesResponse {
    const message = createBaseListSchedulesResponse();
    message.schedules = object.schedules?.map((e) => Schedule.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteScheduleRequest(): DeleteScheduleRequest {
  return { name: "" };
}

export const DeleteScheduleRequest: MessageFns<DeleteScheduleRequest> = {
  encode(message: DeleteScheduleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteScheduleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteScheduleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteScheduleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteScheduleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteScheduleRequest>): DeleteScheduleRequest {
    return DeleteScheduleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteScheduleRequest>): DeleteScheduleRequest {
    const message = createBaseDeleteScheduleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBasePauseScheduleRequest(): PauseScheduleRequest {
  return { name: "" };
}

export const PauseScheduleRequest: MessageFns<PauseScheduleRequest> = {
  encode(message: PauseScheduleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PauseScheduleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePauseScheduleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PauseScheduleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: PauseScheduleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<PauseScheduleRequest>): PauseScheduleRequest {
    return PauseScheduleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PauseScheduleRequest>): PauseScheduleRequest {
    const message = createBasePauseScheduleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseResumeScheduleRequest(): ResumeScheduleRequest {
  return { name: "", catchUp: false };
}

export const ResumeScheduleRequest: MessageFns<ResumeScheduleRequest> = {
  encode(message: ResumeScheduleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.catchUp !== false) {
      writer.uint32(16).bool(message.catchUp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeScheduleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeScheduleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.catchUp = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeScheduleRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      catchUp: isSet(object.catchUp) ? globalThis.Boolean(object.catchUp) : false,
    };
  },

  toJSON(message: ResumeScheduleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.catchUp !== false) {
      obj.catchUp = message.catchUp;
    }
    return obj;
  },

  create(base?: DeepPartial<ResumeScheduleRequest>): ResumeScheduleRequest {
    return ResumeScheduleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResumeScheduleRequest>): ResumeScheduleRequest {
    const message = createBaseResumeScheduleRequest();
    message.name = object.name ?? "";
    message.catchUp = object.catchUp ?? false;
    return message;
  },
};

function createBaseUpdateScheduleRequest(): UpdateScheduleRequest {
  return { schedule: undefined, updateMask: undefined };
}

export const UpdateScheduleRequest: MessageFns<UpdateScheduleRequest> = {
  encode(message: UpdateScheduleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schedule !== undefined) {
      Schedule.encode(message.schedule, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateScheduleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateScheduleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.schedule = Schedule.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateScheduleRequest {
    return {
      schedule: isSet(object.schedule) ? Schedule.fromJSON(object.schedule) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateScheduleRequest): unknown {
    const obj: any = {};
    if (message.schedule !== undefined) {
      obj.schedule = Schedule.toJSON(message.schedule);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateScheduleRequest>): UpdateScheduleRequest {
    return UpdateScheduleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateScheduleRequest>): UpdateScheduleRequest {
    const message = createBaseUpdateScheduleRequest();
    message.schedule = (object.schedule !== undefined && object.schedule !== null)
      ? Schedule.fromPartial(object.schedule)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

/**
 * A service for creating and managing Vertex AI's Schedule resources to
 * periodically launch shceudled runs to make API calls.
 */
export type ScheduleServiceDefinition = typeof ScheduleServiceDefinition;
export const ScheduleServiceDefinition = {
  name: "ScheduleService",
  fullName: "google.cloud.aiplatform.v1beta1.ScheduleService",
  methods: {
    /** Creates a Schedule. */
    createSchedule: {
      name: "CreateSchedule",
      requestType: CreateScheduleRequest,
      requestStream: false,
      responseType: Schedule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 115, 99, 104, 101, 100, 117, 108, 101])],
          578365826: [
            Buffer.from([
              62,
              58,
              8,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              34,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a Schedule. */
    deleteSchedule: {
      name: "DeleteSchedule",
      requestType: DeleteScheduleRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              42,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a Schedule. */
    getSchedule: {
      name: "GetSchedule",
      requestType: GetScheduleRequest,
      requestStream: false,
      responseType: Schedule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Schedules in a Location. */
    listSchedules: {
      name: "ListSchedules",
      requestType: ListSchedulesRequest,
      requestStream: false,
      responseType: ListSchedulesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Pauses a Schedule. Will mark
     * [Schedule.state][google.cloud.aiplatform.v1beta1.Schedule.state] to
     * 'PAUSED'. If the schedule is paused, no new runs will be created. Already
     * created runs will NOT be paused or canceled.
     */
    pauseSchedule: {
      name: "PauseSchedule",
      requestType: PauseScheduleRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              58,
              112,
              97,
              117,
              115,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Resumes a paused Schedule to start scheduling new runs. Will mark
     * [Schedule.state][google.cloud.aiplatform.v1beta1.Schedule.state] to
     * 'ACTIVE'. Only paused Schedule can be resumed.
     *
     * When the Schedule is resumed, new runs will be scheduled starting from the
     * next execution time after the current time based on the time_specification
     * in the Schedule. If [Schedule.catchUp][] is set up true, all
     * missed runs will be scheduled for backfill first.
     */
    resumeSchedule: {
      name: "ResumeSchedule",
      requestType: ResumeScheduleRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([4, 110, 97, 109, 101]),
            Buffer.from([13, 110, 97, 109, 101, 44, 99, 97, 116, 99, 104, 95, 117, 112]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              117,
              109,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an active or paused Schedule.
     *
     * When the Schedule is updated, new runs will be scheduled starting from the
     * updated next execution time after the update time based on the
     * time_specification in the updated Schedule. All unstarted runs before the
     * update time will be skipped while already created runs will NOT be paused
     * or canceled.
     */
    updateSchedule: {
      name: "UpdateSchedule",
      requestType: UpdateScheduleRequest,
      requestStream: false,
      responseType: Schedule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              71,
              58,
              8,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              50,
              59,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ScheduleServiceImplementation<CallContextExt = {}> {
  /** Creates a Schedule. */
  createSchedule(request: CreateScheduleRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Schedule>>;
  /** Deletes a Schedule. */
  deleteSchedule(
    request: DeleteScheduleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a Schedule. */
  getSchedule(request: GetScheduleRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Schedule>>;
  /** Lists Schedules in a Location. */
  listSchedules(
    request: ListSchedulesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSchedulesResponse>>;
  /**
   * Pauses a Schedule. Will mark
   * [Schedule.state][google.cloud.aiplatform.v1beta1.Schedule.state] to
   * 'PAUSED'. If the schedule is paused, no new runs will be created. Already
   * created runs will NOT be paused or canceled.
   */
  pauseSchedule(request: PauseScheduleRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Resumes a paused Schedule to start scheduling new runs. Will mark
   * [Schedule.state][google.cloud.aiplatform.v1beta1.Schedule.state] to
   * 'ACTIVE'. Only paused Schedule can be resumed.
   *
   * When the Schedule is resumed, new runs will be scheduled starting from the
   * next execution time after the current time based on the time_specification
   * in the Schedule. If [Schedule.catchUp][] is set up true, all
   * missed runs will be scheduled for backfill first.
   */
  resumeSchedule(request: ResumeScheduleRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Updates an active or paused Schedule.
   *
   * When the Schedule is updated, new runs will be scheduled starting from the
   * updated next execution time after the update time based on the
   * time_specification in the updated Schedule. All unstarted runs before the
   * update time will be skipped while already created runs will NOT be paused
   * or canceled.
   */
  updateSchedule(request: UpdateScheduleRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Schedule>>;
}

export interface ScheduleServiceClient<CallOptionsExt = {}> {
  /** Creates a Schedule. */
  createSchedule(
    request: DeepPartial<CreateScheduleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Schedule>;
  /** Deletes a Schedule. */
  deleteSchedule(
    request: DeepPartial<DeleteScheduleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a Schedule. */
  getSchedule(request: DeepPartial<GetScheduleRequest>, options?: CallOptions & CallOptionsExt): Promise<Schedule>;
  /** Lists Schedules in a Location. */
  listSchedules(
    request: DeepPartial<ListSchedulesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSchedulesResponse>;
  /**
   * Pauses a Schedule. Will mark
   * [Schedule.state][google.cloud.aiplatform.v1beta1.Schedule.state] to
   * 'PAUSED'. If the schedule is paused, no new runs will be created. Already
   * created runs will NOT be paused or canceled.
   */
  pauseSchedule(request: DeepPartial<PauseScheduleRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Resumes a paused Schedule to start scheduling new runs. Will mark
   * [Schedule.state][google.cloud.aiplatform.v1beta1.Schedule.state] to
   * 'ACTIVE'. Only paused Schedule can be resumed.
   *
   * When the Schedule is resumed, new runs will be scheduled starting from the
   * next execution time after the current time based on the time_specification
   * in the Schedule. If [Schedule.catchUp][] is set up true, all
   * missed runs will be scheduled for backfill first.
   */
  resumeSchedule(request: DeepPartial<ResumeScheduleRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Updates an active or paused Schedule.
   *
   * When the Schedule is updated, new runs will be scheduled starting from the
   * updated next execution time after the update time based on the
   * time_specification in the updated Schedule. All unstarted runs before the
   * update time will be skipped while already created runs will NOT be paused
   * or canceled.
   */
  updateSchedule(
    request: DeepPartial<UpdateScheduleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Schedule>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
