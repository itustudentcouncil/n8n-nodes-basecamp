// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/reasoning_engine_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { GenericOperationMetadata } from "./operation.js";
import { ReasoningEngine } from "./reasoning_engine.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/**
 * Request message for
 * [ReasoningEngineService.CreateReasoningEngine][google.cloud.aiplatform.v1beta1.ReasoningEngineService.CreateReasoningEngine].
 */
export interface CreateReasoningEngineRequest {
  /**
   * Required. The resource name of the Location to create the ReasoningEngine
   * in. Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The ReasoningEngine to create. */
  reasoningEngine: ReasoningEngine | undefined;
}

/**
 * Details of
 * [ReasoningEngineService.CreateReasoningEngine][google.cloud.aiplatform.v1beta1.ReasoningEngineService.CreateReasoningEngine]
 * operation.
 */
export interface CreateReasoningEngineOperationMetadata {
  /** The common part of the operation metadata. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [ReasoningEngineService.GetReasoningEngine][google.cloud.aiplatform.v1beta1.ReasoningEngineService.GetReasoningEngine].
 */
export interface GetReasoningEngineRequest {
  /**
   * Required. The name of the ReasoningEngine resource.
   * Format:
   * `projects/{project}/locations/{location}/reasoningEngines/{reasoning_engine}`
   */
  name: string;
}

/**
 * Request message for
 * [ReasoningEngineService.UpdateReasoningEngine][google.cloud.aiplatform.v1beta1.ReasoningEngineService.UpdateReasoningEngine].
 */
export interface UpdateReasoningEngineRequest {
  /** Required. The ReasoningEngine which replaces the resource on the server. */
  reasoningEngine:
    | ReasoningEngine
    | undefined;
  /** Required. Mask specifying which fields to update. */
  updateMask: string[] | undefined;
}

/**
 * Details of
 * [ReasoningEngineService.UpdateReasoningEngine][google.cloud.aiplatform.v1beta1.ReasoningEngineService.UpdateReasoningEngine]
 * operation.
 */
export interface UpdateReasoningEngineOperationMetadata {
  /** The common part of the operation metadata. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [ReasoningEngineService.ListReasoningEngines][google.cloud.aiplatform.v1beta1.ReasoningEngineService.ListReasoningEngines].
 */
export interface ListReasoningEnginesRequest {
  /**
   * Required. The resource name of the Location to list the ReasoningEngines
   * from. Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. The standard list filter.
   * More detail in [AIP-160](https://google.aip.dev/160).
   */
  filter: string;
  /** Optional. The standard list page size. */
  pageSize: number;
  /** Optional. The standard list page token. */
  pageToken: string;
}

/**
 * Response message for
 * [ReasoningEngineService.ListReasoningEngines][google.cloud.aiplatform.v1beta1.ReasoningEngineService.ListReasoningEngines]
 */
export interface ListReasoningEnginesResponse {
  /** List of ReasoningEngines in the requested page. */
  reasoningEngines: ReasoningEngine[];
  /**
   * A token to retrieve the next page of results.
   * Pass to
   * [ListReasoningEnginesRequest.page_token][google.cloud.aiplatform.v1beta1.ListReasoningEnginesRequest.page_token]
   * to obtain that page.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [ReasoningEngineService.DeleteReasoningEngine][google.cloud.aiplatform.v1beta1.ReasoningEngineService.DeleteReasoningEngine].
 */
export interface DeleteReasoningEngineRequest {
  /**
   * Required. The name of the ReasoningEngine resource to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/reasoningEngines/{reasoning_engine}`
   */
  name: string;
}

function createBaseCreateReasoningEngineRequest(): CreateReasoningEngineRequest {
  return { parent: "", reasoningEngine: undefined };
}

export const CreateReasoningEngineRequest: MessageFns<CreateReasoningEngineRequest> = {
  encode(message: CreateReasoningEngineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.reasoningEngine !== undefined) {
      ReasoningEngine.encode(message.reasoningEngine, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateReasoningEngineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateReasoningEngineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reasoningEngine = ReasoningEngine.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateReasoningEngineRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      reasoningEngine: isSet(object.reasoningEngine) ? ReasoningEngine.fromJSON(object.reasoningEngine) : undefined,
    };
  },

  toJSON(message: CreateReasoningEngineRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.reasoningEngine !== undefined) {
      obj.reasoningEngine = ReasoningEngine.toJSON(message.reasoningEngine);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateReasoningEngineRequest>): CreateReasoningEngineRequest {
    return CreateReasoningEngineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateReasoningEngineRequest>): CreateReasoningEngineRequest {
    const message = createBaseCreateReasoningEngineRequest();
    message.parent = object.parent ?? "";
    message.reasoningEngine = (object.reasoningEngine !== undefined && object.reasoningEngine !== null)
      ? ReasoningEngine.fromPartial(object.reasoningEngine)
      : undefined;
    return message;
  },
};

function createBaseCreateReasoningEngineOperationMetadata(): CreateReasoningEngineOperationMetadata {
  return { genericMetadata: undefined };
}

export const CreateReasoningEngineOperationMetadata: MessageFns<CreateReasoningEngineOperationMetadata> = {
  encode(message: CreateReasoningEngineOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateReasoningEngineOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateReasoningEngineOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateReasoningEngineOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: CreateReasoningEngineOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateReasoningEngineOperationMetadata>): CreateReasoningEngineOperationMetadata {
    return CreateReasoningEngineOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateReasoningEngineOperationMetadata>): CreateReasoningEngineOperationMetadata {
    const message = createBaseCreateReasoningEngineOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseGetReasoningEngineRequest(): GetReasoningEngineRequest {
  return { name: "" };
}

export const GetReasoningEngineRequest: MessageFns<GetReasoningEngineRequest> = {
  encode(message: GetReasoningEngineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReasoningEngineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReasoningEngineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReasoningEngineRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetReasoningEngineRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetReasoningEngineRequest>): GetReasoningEngineRequest {
    return GetReasoningEngineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetReasoningEngineRequest>): GetReasoningEngineRequest {
    const message = createBaseGetReasoningEngineRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateReasoningEngineRequest(): UpdateReasoningEngineRequest {
  return { reasoningEngine: undefined, updateMask: undefined };
}

export const UpdateReasoningEngineRequest: MessageFns<UpdateReasoningEngineRequest> = {
  encode(message: UpdateReasoningEngineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reasoningEngine !== undefined) {
      ReasoningEngine.encode(message.reasoningEngine, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateReasoningEngineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateReasoningEngineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reasoningEngine = ReasoningEngine.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateReasoningEngineRequest {
    return {
      reasoningEngine: isSet(object.reasoningEngine) ? ReasoningEngine.fromJSON(object.reasoningEngine) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateReasoningEngineRequest): unknown {
    const obj: any = {};
    if (message.reasoningEngine !== undefined) {
      obj.reasoningEngine = ReasoningEngine.toJSON(message.reasoningEngine);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateReasoningEngineRequest>): UpdateReasoningEngineRequest {
    return UpdateReasoningEngineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateReasoningEngineRequest>): UpdateReasoningEngineRequest {
    const message = createBaseUpdateReasoningEngineRequest();
    message.reasoningEngine = (object.reasoningEngine !== undefined && object.reasoningEngine !== null)
      ? ReasoningEngine.fromPartial(object.reasoningEngine)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseUpdateReasoningEngineOperationMetadata(): UpdateReasoningEngineOperationMetadata {
  return { genericMetadata: undefined };
}

export const UpdateReasoningEngineOperationMetadata: MessageFns<UpdateReasoningEngineOperationMetadata> = {
  encode(message: UpdateReasoningEngineOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateReasoningEngineOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateReasoningEngineOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateReasoningEngineOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: UpdateReasoningEngineOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateReasoningEngineOperationMetadata>): UpdateReasoningEngineOperationMetadata {
    return UpdateReasoningEngineOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateReasoningEngineOperationMetadata>): UpdateReasoningEngineOperationMetadata {
    const message = createBaseUpdateReasoningEngineOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseListReasoningEnginesRequest(): ListReasoningEnginesRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListReasoningEnginesRequest: MessageFns<ListReasoningEnginesRequest> = {
  encode(message: ListReasoningEnginesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListReasoningEnginesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListReasoningEnginesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListReasoningEnginesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListReasoningEnginesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListReasoningEnginesRequest>): ListReasoningEnginesRequest {
    return ListReasoningEnginesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListReasoningEnginesRequest>): ListReasoningEnginesRequest {
    const message = createBaseListReasoningEnginesRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListReasoningEnginesResponse(): ListReasoningEnginesResponse {
  return { reasoningEngines: [], nextPageToken: "" };
}

export const ListReasoningEnginesResponse: MessageFns<ListReasoningEnginesResponse> = {
  encode(message: ListReasoningEnginesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.reasoningEngines) {
      ReasoningEngine.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListReasoningEnginesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListReasoningEnginesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reasoningEngines.push(ReasoningEngine.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListReasoningEnginesResponse {
    return {
      reasoningEngines: globalThis.Array.isArray(object?.reasoningEngines)
        ? object.reasoningEngines.map((e: any) => ReasoningEngine.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListReasoningEnginesResponse): unknown {
    const obj: any = {};
    if (message.reasoningEngines?.length) {
      obj.reasoningEngines = message.reasoningEngines.map((e) => ReasoningEngine.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListReasoningEnginesResponse>): ListReasoningEnginesResponse {
    return ListReasoningEnginesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListReasoningEnginesResponse>): ListReasoningEnginesResponse {
    const message = createBaseListReasoningEnginesResponse();
    message.reasoningEngines = object.reasoningEngines?.map((e) => ReasoningEngine.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteReasoningEngineRequest(): DeleteReasoningEngineRequest {
  return { name: "" };
}

export const DeleteReasoningEngineRequest: MessageFns<DeleteReasoningEngineRequest> = {
  encode(message: DeleteReasoningEngineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteReasoningEngineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteReasoningEngineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteReasoningEngineRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteReasoningEngineRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteReasoningEngineRequest>): DeleteReasoningEngineRequest {
    return DeleteReasoningEngineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteReasoningEngineRequest>): DeleteReasoningEngineRequest {
    const message = createBaseDeleteReasoningEngineRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** A service for managing Vertex AI's Reasoning Engines. */
export type ReasoningEngineServiceDefinition = typeof ReasoningEngineServiceDefinition;
export const ReasoningEngineServiceDefinition = {
  name: "ReasoningEngineService",
  fullName: "google.cloud.aiplatform.v1beta1.ReasoningEngineService",
  methods: {
    /** Creates a reasoning engine. */
    createReasoningEngine: {
      name: "CreateReasoningEngine",
      requestType: CreateReasoningEngineRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              57,
              10,
              15,
              82,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              69,
              110,
              103,
              105,
              110,
              101,
              18,
              38,
              67,
              114,
              101,
              97,
              116,
              101,
              82,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              69,
              110,
              103,
              105,
              110,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              114,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              95,
              101,
              110,
              103,
              105,
              110,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              77,
              58,
              16,
              114,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              95,
              101,
              110,
              103,
              105,
              110,
              101,
              34,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              69,
              110,
              103,
              105,
              110,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a reasoning engine. */
    getReasoningEngine: {
      name: "GetReasoningEngine",
      requestType: GetReasoningEngineRequest,
      requestStream: false,
      responseType: ReasoningEngine,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              69,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists reasoning engines in a location. */
    listReasoningEngines: {
      name: "ListReasoningEngines",
      requestType: ListReasoningEnginesRequest,
      requestStream: false,
      responseType: ListReasoningEnginesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              69,
              110,
              103,
              105,
              110,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a reasoning engine. */
    updateReasoningEngine: {
      name: "UpdateReasoningEngine",
      requestType: UpdateReasoningEngineRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              57,
              10,
              15,
              82,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              69,
              110,
              103,
              105,
              110,
              101,
              18,
              38,
              85,
              112,
              100,
              97,
              116,
              101,
              82,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              69,
              110,
              103,
              105,
              110,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              28,
              114,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              95,
              101,
              110,
              103,
              105,
              110,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              94,
              58,
              16,
              114,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              95,
              101,
              110,
              103,
              105,
              110,
              101,
              50,
              74,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              95,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              69,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a reasoning engine. */
    deleteReasoningEngine: {
      name: "DeleteReasoningEngine",
      requestType: DeleteReasoningEngineRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              42,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              69,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ReasoningEngineServiceImplementation<CallContextExt = {}> {
  /** Creates a reasoning engine. */
  createReasoningEngine(
    request: CreateReasoningEngineRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a reasoning engine. */
  getReasoningEngine(
    request: GetReasoningEngineRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReasoningEngine>>;
  /** Lists reasoning engines in a location. */
  listReasoningEngines(
    request: ListReasoningEnginesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListReasoningEnginesResponse>>;
  /** Updates a reasoning engine. */
  updateReasoningEngine(
    request: UpdateReasoningEngineRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a reasoning engine. */
  deleteReasoningEngine(
    request: DeleteReasoningEngineRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface ReasoningEngineServiceClient<CallOptionsExt = {}> {
  /** Creates a reasoning engine. */
  createReasoningEngine(
    request: DeepPartial<CreateReasoningEngineRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a reasoning engine. */
  getReasoningEngine(
    request: DeepPartial<GetReasoningEngineRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReasoningEngine>;
  /** Lists reasoning engines in a location. */
  listReasoningEngines(
    request: DeepPartial<ListReasoningEnginesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListReasoningEnginesResponse>;
  /** Updates a reasoning engine. */
  updateReasoningEngine(
    request: DeepPartial<UpdateReasoningEngineRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a reasoning engine. */
  deleteReasoningEngine(
    request: DeepPartial<DeleteReasoningEngineRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
