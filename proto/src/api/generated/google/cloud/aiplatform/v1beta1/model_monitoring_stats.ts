// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/model_monitoring_stats.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Value } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/** Represents the collection of statistics for a metric. */
export interface ModelMonitoringStats {
  /** Generated tabular statistics. */
  tabularStats?: ModelMonitoringTabularStats | undefined;
}

/** Represents a single statistics data point. */
export interface ModelMonitoringStatsDataPoint {
  /** Statistics from current dataset. */
  currentStats:
    | ModelMonitoringStatsDataPoint_TypedValue
    | undefined;
  /** Statistics from baseline dataset. */
  baselineStats:
    | ModelMonitoringStatsDataPoint_TypedValue
    | undefined;
  /** Threshold value. */
  thresholdValue: number;
  /** Indicate if the statistics has anomaly. */
  hasAnomaly: boolean;
  /** Model monitoring job resource name. */
  modelMonitoringJob: string;
  /** Schedule resource name. */
  schedule: string;
  /** Statistics create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Algorithm used to calculated the metrics, eg: jensen_shannon_divergence,
   * l_infinity.
   */
  algorithm: string;
}

/** Typed value of the statistics. */
export interface ModelMonitoringStatsDataPoint_TypedValue {
  /** Double. */
  doubleValue?:
    | number
    | undefined;
  /** Distribution. */
  distributionValue?: ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue | undefined;
}

/** Summary statistics for a population of values. */
export interface ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue {
  /**
   * Predictive monitoring drift distribution in
   * `tensorflow.metadata.v0.DatasetFeatureStatistics` format.
   */
  distribution:
    | any
    | undefined;
  /**
   * Distribution distance deviation from the current dataset's statistics
   * to baseline dataset's statistics.
   *   * For categorical feature, the distribution distance is calculated
   *     by L-inifinity norm or Jensen–Shannon divergence.
   *   * For numerical feature, the distribution distance is calculated by
   *     Jensen–Shannon divergence.
   */
  distributionDeviation: number;
}

/**
 * A collection of data points that describes the time-varying values of a
 * tabular metric.
 */
export interface ModelMonitoringTabularStats {
  /** The stats name. */
  statsName: string;
  /**
   * One of the supported monitoring objectives:
   * `raw-feature-drift`
   * `prediction-output-drift`
   * `feature-attribution`
   */
  objectiveType: string;
  /**
   * The data points of this time series. When listing time series, points are
   * returned in reverse time order.
   */
  dataPoints: ModelMonitoringStatsDataPoint[];
}

/** Filter for searching ModelMonitoringStats. */
export interface SearchModelMonitoringStatsFilter {
  /** Tabular statistics filter. */
  tabularStatsFilter?: SearchModelMonitoringStatsFilter_TabularStatsFilter | undefined;
}

/** Tabular statistics filter. */
export interface SearchModelMonitoringStatsFilter_TabularStatsFilter {
  /** If not specified, will return all the stats_names. */
  statsName: string;
  /**
   * One of the supported monitoring objectives:
   * `raw-feature-drift`
   * `prediction-output-drift`
   * `feature-attribution`
   */
  objectiveType: string;
  /** From a particular monitoring job. */
  modelMonitoringJob: string;
  /** From a particular monitoring schedule. */
  modelMonitoringSchedule: string;
  /**
   * Specify the algorithm type used for distance calculation, eg:
   * jensen_shannon_divergence, l_infinity.
   */
  algorithm: string;
}

function createBaseModelMonitoringStats(): ModelMonitoringStats {
  return { tabularStats: undefined };
}

export const ModelMonitoringStats: MessageFns<ModelMonitoringStats> = {
  encode(message: ModelMonitoringStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tabularStats !== undefined) {
      ModelMonitoringTabularStats.encode(message.tabularStats, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelMonitoringStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelMonitoringStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tabularStats = ModelMonitoringTabularStats.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelMonitoringStats {
    return {
      tabularStats: isSet(object.tabularStats) ? ModelMonitoringTabularStats.fromJSON(object.tabularStats) : undefined,
    };
  },

  toJSON(message: ModelMonitoringStats): unknown {
    const obj: any = {};
    if (message.tabularStats !== undefined) {
      obj.tabularStats = ModelMonitoringTabularStats.toJSON(message.tabularStats);
    }
    return obj;
  },

  create(base?: DeepPartial<ModelMonitoringStats>): ModelMonitoringStats {
    return ModelMonitoringStats.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelMonitoringStats>): ModelMonitoringStats {
    const message = createBaseModelMonitoringStats();
    message.tabularStats = (object.tabularStats !== undefined && object.tabularStats !== null)
      ? ModelMonitoringTabularStats.fromPartial(object.tabularStats)
      : undefined;
    return message;
  },
};

function createBaseModelMonitoringStatsDataPoint(): ModelMonitoringStatsDataPoint {
  return {
    currentStats: undefined,
    baselineStats: undefined,
    thresholdValue: 0,
    hasAnomaly: false,
    modelMonitoringJob: "",
    schedule: "",
    createTime: undefined,
    algorithm: "",
  };
}

export const ModelMonitoringStatsDataPoint: MessageFns<ModelMonitoringStatsDataPoint> = {
  encode(message: ModelMonitoringStatsDataPoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.currentStats !== undefined) {
      ModelMonitoringStatsDataPoint_TypedValue.encode(message.currentStats, writer.uint32(10).fork()).join();
    }
    if (message.baselineStats !== undefined) {
      ModelMonitoringStatsDataPoint_TypedValue.encode(message.baselineStats, writer.uint32(18).fork()).join();
    }
    if (message.thresholdValue !== 0) {
      writer.uint32(25).double(message.thresholdValue);
    }
    if (message.hasAnomaly !== false) {
      writer.uint32(32).bool(message.hasAnomaly);
    }
    if (message.modelMonitoringJob !== "") {
      writer.uint32(42).string(message.modelMonitoringJob);
    }
    if (message.schedule !== "") {
      writer.uint32(50).string(message.schedule);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(58).fork()).join();
    }
    if (message.algorithm !== "") {
      writer.uint32(66).string(message.algorithm);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelMonitoringStatsDataPoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelMonitoringStatsDataPoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.currentStats = ModelMonitoringStatsDataPoint_TypedValue.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.baselineStats = ModelMonitoringStatsDataPoint_TypedValue.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.thresholdValue = reader.double();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.hasAnomaly = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.modelMonitoringJob = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.schedule = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.algorithm = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelMonitoringStatsDataPoint {
    return {
      currentStats: isSet(object.currentStats)
        ? ModelMonitoringStatsDataPoint_TypedValue.fromJSON(object.currentStats)
        : undefined,
      baselineStats: isSet(object.baselineStats)
        ? ModelMonitoringStatsDataPoint_TypedValue.fromJSON(object.baselineStats)
        : undefined,
      thresholdValue: isSet(object.thresholdValue) ? globalThis.Number(object.thresholdValue) : 0,
      hasAnomaly: isSet(object.hasAnomaly) ? globalThis.Boolean(object.hasAnomaly) : false,
      modelMonitoringJob: isSet(object.modelMonitoringJob) ? globalThis.String(object.modelMonitoringJob) : "",
      schedule: isSet(object.schedule) ? globalThis.String(object.schedule) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      algorithm: isSet(object.algorithm) ? globalThis.String(object.algorithm) : "",
    };
  },

  toJSON(message: ModelMonitoringStatsDataPoint): unknown {
    const obj: any = {};
    if (message.currentStats !== undefined) {
      obj.currentStats = ModelMonitoringStatsDataPoint_TypedValue.toJSON(message.currentStats);
    }
    if (message.baselineStats !== undefined) {
      obj.baselineStats = ModelMonitoringStatsDataPoint_TypedValue.toJSON(message.baselineStats);
    }
    if (message.thresholdValue !== 0) {
      obj.thresholdValue = message.thresholdValue;
    }
    if (message.hasAnomaly !== false) {
      obj.hasAnomaly = message.hasAnomaly;
    }
    if (message.modelMonitoringJob !== "") {
      obj.modelMonitoringJob = message.modelMonitoringJob;
    }
    if (message.schedule !== "") {
      obj.schedule = message.schedule;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.algorithm !== "") {
      obj.algorithm = message.algorithm;
    }
    return obj;
  },

  create(base?: DeepPartial<ModelMonitoringStatsDataPoint>): ModelMonitoringStatsDataPoint {
    return ModelMonitoringStatsDataPoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelMonitoringStatsDataPoint>): ModelMonitoringStatsDataPoint {
    const message = createBaseModelMonitoringStatsDataPoint();
    message.currentStats = (object.currentStats !== undefined && object.currentStats !== null)
      ? ModelMonitoringStatsDataPoint_TypedValue.fromPartial(object.currentStats)
      : undefined;
    message.baselineStats = (object.baselineStats !== undefined && object.baselineStats !== null)
      ? ModelMonitoringStatsDataPoint_TypedValue.fromPartial(object.baselineStats)
      : undefined;
    message.thresholdValue = object.thresholdValue ?? 0;
    message.hasAnomaly = object.hasAnomaly ?? false;
    message.modelMonitoringJob = object.modelMonitoringJob ?? "";
    message.schedule = object.schedule ?? "";
    message.createTime = object.createTime ?? undefined;
    message.algorithm = object.algorithm ?? "";
    return message;
  },
};

function createBaseModelMonitoringStatsDataPoint_TypedValue(): ModelMonitoringStatsDataPoint_TypedValue {
  return { doubleValue: undefined, distributionValue: undefined };
}

export const ModelMonitoringStatsDataPoint_TypedValue: MessageFns<ModelMonitoringStatsDataPoint_TypedValue> = {
  encode(message: ModelMonitoringStatsDataPoint_TypedValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.doubleValue !== undefined) {
      writer.uint32(9).double(message.doubleValue);
    }
    if (message.distributionValue !== undefined) {
      ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue.encode(
        message.distributionValue,
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelMonitoringStatsDataPoint_TypedValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelMonitoringStatsDataPoint_TypedValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.doubleValue = reader.double();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.distributionValue = ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelMonitoringStatsDataPoint_TypedValue {
    return {
      doubleValue: isSet(object.doubleValue) ? globalThis.Number(object.doubleValue) : undefined,
      distributionValue: isSet(object.distributionValue)
        ? ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue.fromJSON(object.distributionValue)
        : undefined,
    };
  },

  toJSON(message: ModelMonitoringStatsDataPoint_TypedValue): unknown {
    const obj: any = {};
    if (message.doubleValue !== undefined) {
      obj.doubleValue = message.doubleValue;
    }
    if (message.distributionValue !== undefined) {
      obj.distributionValue = ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue.toJSON(
        message.distributionValue,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<ModelMonitoringStatsDataPoint_TypedValue>): ModelMonitoringStatsDataPoint_TypedValue {
    return ModelMonitoringStatsDataPoint_TypedValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelMonitoringStatsDataPoint_TypedValue>): ModelMonitoringStatsDataPoint_TypedValue {
    const message = createBaseModelMonitoringStatsDataPoint_TypedValue();
    message.doubleValue = object.doubleValue ?? undefined;
    message.distributionValue = (object.distributionValue !== undefined && object.distributionValue !== null)
      ? ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue.fromPartial(object.distributionValue)
      : undefined;
    return message;
  },
};

function createBaseModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue(): ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue {
  return { distribution: undefined, distributionDeviation: 0 };
}

export const ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue: MessageFns<
  ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue
> = {
  encode(
    message: ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.distribution !== undefined) {
      Value.encode(Value.wrap(message.distribution), writer.uint32(10).fork()).join();
    }
    if (message.distributionDeviation !== 0) {
      writer.uint32(17).double(message.distributionDeviation);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.distribution = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.distributionDeviation = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue {
    return {
      distribution: isSet(object?.distribution) ? object.distribution : undefined,
      distributionDeviation: isSet(object.distributionDeviation) ? globalThis.Number(object.distributionDeviation) : 0,
    };
  },

  toJSON(message: ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue): unknown {
    const obj: any = {};
    if (message.distribution !== undefined) {
      obj.distribution = message.distribution;
    }
    if (message.distributionDeviation !== 0) {
      obj.distributionDeviation = message.distributionDeviation;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue>,
  ): ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue {
    return ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue>,
  ): ModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue {
    const message = createBaseModelMonitoringStatsDataPoint_TypedValue_DistributionDataValue();
    message.distribution = object.distribution ?? undefined;
    message.distributionDeviation = object.distributionDeviation ?? 0;
    return message;
  },
};

function createBaseModelMonitoringTabularStats(): ModelMonitoringTabularStats {
  return { statsName: "", objectiveType: "", dataPoints: [] };
}

export const ModelMonitoringTabularStats: MessageFns<ModelMonitoringTabularStats> = {
  encode(message: ModelMonitoringTabularStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.statsName !== "") {
      writer.uint32(10).string(message.statsName);
    }
    if (message.objectiveType !== "") {
      writer.uint32(18).string(message.objectiveType);
    }
    for (const v of message.dataPoints) {
      ModelMonitoringStatsDataPoint.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelMonitoringTabularStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelMonitoringTabularStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.statsName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.objectiveType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dataPoints.push(ModelMonitoringStatsDataPoint.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelMonitoringTabularStats {
    return {
      statsName: isSet(object.statsName) ? globalThis.String(object.statsName) : "",
      objectiveType: isSet(object.objectiveType) ? globalThis.String(object.objectiveType) : "",
      dataPoints: globalThis.Array.isArray(object?.dataPoints)
        ? object.dataPoints.map((e: any) => ModelMonitoringStatsDataPoint.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ModelMonitoringTabularStats): unknown {
    const obj: any = {};
    if (message.statsName !== "") {
      obj.statsName = message.statsName;
    }
    if (message.objectiveType !== "") {
      obj.objectiveType = message.objectiveType;
    }
    if (message.dataPoints?.length) {
      obj.dataPoints = message.dataPoints.map((e) => ModelMonitoringStatsDataPoint.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ModelMonitoringTabularStats>): ModelMonitoringTabularStats {
    return ModelMonitoringTabularStats.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelMonitoringTabularStats>): ModelMonitoringTabularStats {
    const message = createBaseModelMonitoringTabularStats();
    message.statsName = object.statsName ?? "";
    message.objectiveType = object.objectiveType ?? "";
    message.dataPoints = object.dataPoints?.map((e) => ModelMonitoringStatsDataPoint.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSearchModelMonitoringStatsFilter(): SearchModelMonitoringStatsFilter {
  return { tabularStatsFilter: undefined };
}

export const SearchModelMonitoringStatsFilter: MessageFns<SearchModelMonitoringStatsFilter> = {
  encode(message: SearchModelMonitoringStatsFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tabularStatsFilter !== undefined) {
      SearchModelMonitoringStatsFilter_TabularStatsFilter.encode(message.tabularStatsFilter, writer.uint32(10).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchModelMonitoringStatsFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchModelMonitoringStatsFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tabularStatsFilter = SearchModelMonitoringStatsFilter_TabularStatsFilter.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchModelMonitoringStatsFilter {
    return {
      tabularStatsFilter: isSet(object.tabularStatsFilter)
        ? SearchModelMonitoringStatsFilter_TabularStatsFilter.fromJSON(object.tabularStatsFilter)
        : undefined,
    };
  },

  toJSON(message: SearchModelMonitoringStatsFilter): unknown {
    const obj: any = {};
    if (message.tabularStatsFilter !== undefined) {
      obj.tabularStatsFilter = SearchModelMonitoringStatsFilter_TabularStatsFilter.toJSON(message.tabularStatsFilter);
    }
    return obj;
  },

  create(base?: DeepPartial<SearchModelMonitoringStatsFilter>): SearchModelMonitoringStatsFilter {
    return SearchModelMonitoringStatsFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchModelMonitoringStatsFilter>): SearchModelMonitoringStatsFilter {
    const message = createBaseSearchModelMonitoringStatsFilter();
    message.tabularStatsFilter = (object.tabularStatsFilter !== undefined && object.tabularStatsFilter !== null)
      ? SearchModelMonitoringStatsFilter_TabularStatsFilter.fromPartial(object.tabularStatsFilter)
      : undefined;
    return message;
  },
};

function createBaseSearchModelMonitoringStatsFilter_TabularStatsFilter(): SearchModelMonitoringStatsFilter_TabularStatsFilter {
  return { statsName: "", objectiveType: "", modelMonitoringJob: "", modelMonitoringSchedule: "", algorithm: "" };
}

export const SearchModelMonitoringStatsFilter_TabularStatsFilter: MessageFns<
  SearchModelMonitoringStatsFilter_TabularStatsFilter
> = {
  encode(
    message: SearchModelMonitoringStatsFilter_TabularStatsFilter,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.statsName !== "") {
      writer.uint32(10).string(message.statsName);
    }
    if (message.objectiveType !== "") {
      writer.uint32(18).string(message.objectiveType);
    }
    if (message.modelMonitoringJob !== "") {
      writer.uint32(26).string(message.modelMonitoringJob);
    }
    if (message.modelMonitoringSchedule !== "") {
      writer.uint32(34).string(message.modelMonitoringSchedule);
    }
    if (message.algorithm !== "") {
      writer.uint32(42).string(message.algorithm);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchModelMonitoringStatsFilter_TabularStatsFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchModelMonitoringStatsFilter_TabularStatsFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.statsName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.objectiveType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.modelMonitoringJob = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.modelMonitoringSchedule = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.algorithm = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchModelMonitoringStatsFilter_TabularStatsFilter {
    return {
      statsName: isSet(object.statsName) ? globalThis.String(object.statsName) : "",
      objectiveType: isSet(object.objectiveType) ? globalThis.String(object.objectiveType) : "",
      modelMonitoringJob: isSet(object.modelMonitoringJob) ? globalThis.String(object.modelMonitoringJob) : "",
      modelMonitoringSchedule: isSet(object.modelMonitoringSchedule)
        ? globalThis.String(object.modelMonitoringSchedule)
        : "",
      algorithm: isSet(object.algorithm) ? globalThis.String(object.algorithm) : "",
    };
  },

  toJSON(message: SearchModelMonitoringStatsFilter_TabularStatsFilter): unknown {
    const obj: any = {};
    if (message.statsName !== "") {
      obj.statsName = message.statsName;
    }
    if (message.objectiveType !== "") {
      obj.objectiveType = message.objectiveType;
    }
    if (message.modelMonitoringJob !== "") {
      obj.modelMonitoringJob = message.modelMonitoringJob;
    }
    if (message.modelMonitoringSchedule !== "") {
      obj.modelMonitoringSchedule = message.modelMonitoringSchedule;
    }
    if (message.algorithm !== "") {
      obj.algorithm = message.algorithm;
    }
    return obj;
  },

  create(
    base?: DeepPartial<SearchModelMonitoringStatsFilter_TabularStatsFilter>,
  ): SearchModelMonitoringStatsFilter_TabularStatsFilter {
    return SearchModelMonitoringStatsFilter_TabularStatsFilter.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SearchModelMonitoringStatsFilter_TabularStatsFilter>,
  ): SearchModelMonitoringStatsFilter_TabularStatsFilter {
    const message = createBaseSearchModelMonitoringStatsFilter_TabularStatsFilter();
    message.statsName = object.statsName ?? "";
    message.objectiveType = object.objectiveType ?? "";
    message.modelMonitoringJob = object.modelMonitoringJob ?? "";
    message.modelMonitoringSchedule = object.modelMonitoringSchedule ?? "";
    message.algorithm = object.algorithm ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
