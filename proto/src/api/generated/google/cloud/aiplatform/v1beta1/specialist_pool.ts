// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/specialist_pool.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/**
 * SpecialistPool represents customers' own workforce to work on their data
 * labeling jobs. It includes a group of specialist managers and workers.
 * Managers are responsible for managing the workers in this pool as well as
 * customers' data labeling jobs associated with this pool. Customers create
 * specialist pool as well as start data labeling jobs on Cloud, managers and
 * workers handle the jobs using CrowdCompute console.
 */
export interface SpecialistPool {
  /** Required. The resource name of the SpecialistPool. */
  name: string;
  /**
   * Required. The user-defined name of the SpecialistPool.
   * The name can be up to 128 characters long and can consist of any UTF-8
   * characters.
   * This field should be unique on project-level.
   */
  displayName: string;
  /** Output only. The number of managers in this SpecialistPool. */
  specialistManagersCount: number;
  /** The email addresses of the managers in the SpecialistPool. */
  specialistManagerEmails: string[];
  /** Output only. The resource name of the pending data labeling jobs. */
  pendingDataLabelingJobs: string[];
  /** The email addresses of workers in the SpecialistPool. */
  specialistWorkerEmails: string[];
}

function createBaseSpecialistPool(): SpecialistPool {
  return {
    name: "",
    displayName: "",
    specialistManagersCount: 0,
    specialistManagerEmails: [],
    pendingDataLabelingJobs: [],
    specialistWorkerEmails: [],
  };
}

export const SpecialistPool: MessageFns<SpecialistPool> = {
  encode(message: SpecialistPool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.specialistManagersCount !== 0) {
      writer.uint32(24).int32(message.specialistManagersCount);
    }
    for (const v of message.specialistManagerEmails) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.pendingDataLabelingJobs) {
      writer.uint32(42).string(v!);
    }
    for (const v of message.specialistWorkerEmails) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpecialistPool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpecialistPool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.specialistManagersCount = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.specialistManagerEmails.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pendingDataLabelingJobs.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.specialistWorkerEmails.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpecialistPool {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      specialistManagersCount: isSet(object.specialistManagersCount)
        ? globalThis.Number(object.specialistManagersCount)
        : 0,
      specialistManagerEmails: globalThis.Array.isArray(object?.specialistManagerEmails)
        ? object.specialistManagerEmails.map((e: any) => globalThis.String(e))
        : [],
      pendingDataLabelingJobs: globalThis.Array.isArray(object?.pendingDataLabelingJobs)
        ? object.pendingDataLabelingJobs.map((e: any) => globalThis.String(e))
        : [],
      specialistWorkerEmails: globalThis.Array.isArray(object?.specialistWorkerEmails)
        ? object.specialistWorkerEmails.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SpecialistPool): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.specialistManagersCount !== 0) {
      obj.specialistManagersCount = Math.round(message.specialistManagersCount);
    }
    if (message.specialistManagerEmails?.length) {
      obj.specialistManagerEmails = message.specialistManagerEmails;
    }
    if (message.pendingDataLabelingJobs?.length) {
      obj.pendingDataLabelingJobs = message.pendingDataLabelingJobs;
    }
    if (message.specialistWorkerEmails?.length) {
      obj.specialistWorkerEmails = message.specialistWorkerEmails;
    }
    return obj;
  },

  create(base?: DeepPartial<SpecialistPool>): SpecialistPool {
    return SpecialistPool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SpecialistPool>): SpecialistPool {
    const message = createBaseSpecialistPool();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.specialistManagersCount = object.specialistManagersCount ?? 0;
    message.specialistManagerEmails = object.specialistManagerEmails?.map((e) => e) || [];
    message.pendingDataLabelingJobs = object.pendingDataLabelingJobs?.map((e) => e) || [];
    message.specialistWorkerEmails = object.specialistWorkerEmails?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
