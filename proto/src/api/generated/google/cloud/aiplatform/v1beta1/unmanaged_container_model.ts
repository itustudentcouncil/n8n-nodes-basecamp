// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/unmanaged_container_model.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ModelContainerSpec, PredictSchemata } from "./model.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/**
 * Contains model information necessary to perform batch prediction without
 * requiring a full model import.
 */
export interface UnmanagedContainerModel {
  /**
   * The path to the directory containing the Model artifact and any of its
   * supporting files.
   */
  artifactUri: string;
  /** Contains the schemata used in Model's predictions and explanations */
  predictSchemata:
    | PredictSchemata
    | undefined;
  /**
   * Input only. The specification of the container that is to be used when
   * deploying this Model.
   */
  containerSpec: ModelContainerSpec | undefined;
}

function createBaseUnmanagedContainerModel(): UnmanagedContainerModel {
  return { artifactUri: "", predictSchemata: undefined, containerSpec: undefined };
}

export const UnmanagedContainerModel: MessageFns<UnmanagedContainerModel> = {
  encode(message: UnmanagedContainerModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.artifactUri !== "") {
      writer.uint32(10).string(message.artifactUri);
    }
    if (message.predictSchemata !== undefined) {
      PredictSchemata.encode(message.predictSchemata, writer.uint32(18).fork()).join();
    }
    if (message.containerSpec !== undefined) {
      ModelContainerSpec.encode(message.containerSpec, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnmanagedContainerModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnmanagedContainerModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.artifactUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.predictSchemata = PredictSchemata.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.containerSpec = ModelContainerSpec.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnmanagedContainerModel {
    return {
      artifactUri: isSet(object.artifactUri) ? globalThis.String(object.artifactUri) : "",
      predictSchemata: isSet(object.predictSchemata) ? PredictSchemata.fromJSON(object.predictSchemata) : undefined,
      containerSpec: isSet(object.containerSpec) ? ModelContainerSpec.fromJSON(object.containerSpec) : undefined,
    };
  },

  toJSON(message: UnmanagedContainerModel): unknown {
    const obj: any = {};
    if (message.artifactUri !== "") {
      obj.artifactUri = message.artifactUri;
    }
    if (message.predictSchemata !== undefined) {
      obj.predictSchemata = PredictSchemata.toJSON(message.predictSchemata);
    }
    if (message.containerSpec !== undefined) {
      obj.containerSpec = ModelContainerSpec.toJSON(message.containerSpec);
    }
    return obj;
  },

  create(base?: DeepPartial<UnmanagedContainerModel>): UnmanagedContainerModel {
    return UnmanagedContainerModel.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnmanagedContainerModel>): UnmanagedContainerModel {
    const message = createBaseUnmanagedContainerModel();
    message.artifactUri = object.artifactUri ?? "";
    message.predictSchemata = (object.predictSchemata !== undefined && object.predictSchemata !== null)
      ? PredictSchemata.fromPartial(object.predictSchemata)
      : undefined;
    message.containerSpec = (object.containerSpec !== undefined && object.containerSpec !== null)
      ? ModelContainerSpec.fromPartial(object.containerSpec)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
