// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/tensorboard_time_series.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/** TensorboardTimeSeries maps to times series produced in training runs */
export interface TensorboardTimeSeries {
  /** Output only. Name of the TensorboardTimeSeries. */
  name: string;
  /**
   * Required. User provided name of this TensorboardTimeSeries.
   * This value should be unique among all TensorboardTimeSeries resources
   * belonging to the same TensorboardRun resource (parent resource).
   */
  displayName: string;
  /** Description of this TensorboardTimeSeries. */
  description: string;
  /** Required. Immutable. Type of TensorboardTimeSeries value. */
  valueType: TensorboardTimeSeries_ValueType;
  /** Output only. Timestamp when this TensorboardTimeSeries was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Timestamp when this TensorboardTimeSeries was last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Used to perform a consistent read-modify-write updates. If not set, a blind
   * "overwrite" update happens.
   */
  etag: string;
  /**
   * Immutable. Name of the plugin this time series pertain to. Such as Scalar,
   * Tensor, Blob
   */
  pluginName: string;
  /** Data of the current plugin, with the size limited to 65KB. */
  pluginData: Buffer;
  /**
   * Output only. Scalar, Tensor, or Blob metadata for this
   * TensorboardTimeSeries.
   */
  metadata: TensorboardTimeSeries_Metadata | undefined;
}

/** An enum representing the value type of a TensorboardTimeSeries. */
export enum TensorboardTimeSeries_ValueType {
  /** VALUE_TYPE_UNSPECIFIED - The value type is unspecified. */
  VALUE_TYPE_UNSPECIFIED = 0,
  /**
   * SCALAR - Used for TensorboardTimeSeries that is a list of scalars.
   * E.g. accuracy of a model over epochs/time.
   */
  SCALAR = 1,
  /**
   * TENSOR - Used for TensorboardTimeSeries that is a list of tensors.
   * E.g. histograms of weights of layer in a model over epoch/time.
   */
  TENSOR = 2,
  /**
   * BLOB_SEQUENCE - Used for TensorboardTimeSeries that is a list of blob sequences.
   * E.g. set of sample images with labels over epochs/time.
   */
  BLOB_SEQUENCE = 3,
  UNRECOGNIZED = -1,
}

export function tensorboardTimeSeries_ValueTypeFromJSON(object: any): TensorboardTimeSeries_ValueType {
  switch (object) {
    case 0:
    case "VALUE_TYPE_UNSPECIFIED":
      return TensorboardTimeSeries_ValueType.VALUE_TYPE_UNSPECIFIED;
    case 1:
    case "SCALAR":
      return TensorboardTimeSeries_ValueType.SCALAR;
    case 2:
    case "TENSOR":
      return TensorboardTimeSeries_ValueType.TENSOR;
    case 3:
    case "BLOB_SEQUENCE":
      return TensorboardTimeSeries_ValueType.BLOB_SEQUENCE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TensorboardTimeSeries_ValueType.UNRECOGNIZED;
  }
}

export function tensorboardTimeSeries_ValueTypeToJSON(object: TensorboardTimeSeries_ValueType): string {
  switch (object) {
    case TensorboardTimeSeries_ValueType.VALUE_TYPE_UNSPECIFIED:
      return "VALUE_TYPE_UNSPECIFIED";
    case TensorboardTimeSeries_ValueType.SCALAR:
      return "SCALAR";
    case TensorboardTimeSeries_ValueType.TENSOR:
      return "TENSOR";
    case TensorboardTimeSeries_ValueType.BLOB_SEQUENCE:
      return "BLOB_SEQUENCE";
    case TensorboardTimeSeries_ValueType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Describes metadata for a TensorboardTimeSeries. */
export interface TensorboardTimeSeries_Metadata {
  /**
   * Output only. Max step index of all data points within a
   * TensorboardTimeSeries.
   */
  maxStep: Long;
  /**
   * Output only. Max wall clock timestamp of all data points within a
   * TensorboardTimeSeries.
   */
  maxWallTime:
    | Date
    | undefined;
  /**
   * Output only. The largest blob sequence length (number of blobs) of all
   * data points in this time series, if its ValueType is BLOB_SEQUENCE.
   */
  maxBlobSequenceLength: Long;
}

function createBaseTensorboardTimeSeries(): TensorboardTimeSeries {
  return {
    name: "",
    displayName: "",
    description: "",
    valueType: 0,
    createTime: undefined,
    updateTime: undefined,
    etag: "",
    pluginName: "",
    pluginData: Buffer.alloc(0),
    metadata: undefined,
  };
}

export const TensorboardTimeSeries: MessageFns<TensorboardTimeSeries> = {
  encode(message: TensorboardTimeSeries, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.valueType !== 0) {
      writer.uint32(32).int32(message.valueType);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(58).string(message.etag);
    }
    if (message.pluginName !== "") {
      writer.uint32(66).string(message.pluginName);
    }
    if (message.pluginData.length !== 0) {
      writer.uint32(74).bytes(message.pluginData);
    }
    if (message.metadata !== undefined) {
      TensorboardTimeSeries_Metadata.encode(message.metadata, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TensorboardTimeSeries {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTensorboardTimeSeries();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.valueType = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.pluginName = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.pluginData = Buffer.from(reader.bytes());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.metadata = TensorboardTimeSeries_Metadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TensorboardTimeSeries {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      valueType: isSet(object.valueType) ? tensorboardTimeSeries_ValueTypeFromJSON(object.valueType) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      pluginName: isSet(object.pluginName) ? globalThis.String(object.pluginName) : "",
      pluginData: isSet(object.pluginData) ? Buffer.from(bytesFromBase64(object.pluginData)) : Buffer.alloc(0),
      metadata: isSet(object.metadata) ? TensorboardTimeSeries_Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: TensorboardTimeSeries): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.valueType !== 0) {
      obj.valueType = tensorboardTimeSeries_ValueTypeToJSON(message.valueType);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.pluginName !== "") {
      obj.pluginName = message.pluginName;
    }
    if (message.pluginData.length !== 0) {
      obj.pluginData = base64FromBytes(message.pluginData);
    }
    if (message.metadata !== undefined) {
      obj.metadata = TensorboardTimeSeries_Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create(base?: DeepPartial<TensorboardTimeSeries>): TensorboardTimeSeries {
    return TensorboardTimeSeries.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TensorboardTimeSeries>): TensorboardTimeSeries {
    const message = createBaseTensorboardTimeSeries();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.valueType = object.valueType ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.etag = object.etag ?? "";
    message.pluginName = object.pluginName ?? "";
    message.pluginData = object.pluginData ?? Buffer.alloc(0);
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? TensorboardTimeSeries_Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseTensorboardTimeSeries_Metadata(): TensorboardTimeSeries_Metadata {
  return { maxStep: Long.ZERO, maxWallTime: undefined, maxBlobSequenceLength: Long.ZERO };
}

export const TensorboardTimeSeries_Metadata: MessageFns<TensorboardTimeSeries_Metadata> = {
  encode(message: TensorboardTimeSeries_Metadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.maxStep.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.maxStep.toString());
    }
    if (message.maxWallTime !== undefined) {
      Timestamp.encode(toTimestamp(message.maxWallTime), writer.uint32(18).fork()).join();
    }
    if (!message.maxBlobSequenceLength.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.maxBlobSequenceLength.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TensorboardTimeSeries_Metadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTensorboardTimeSeries_Metadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxStep = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.maxWallTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.maxBlobSequenceLength = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TensorboardTimeSeries_Metadata {
    return {
      maxStep: isSet(object.maxStep) ? Long.fromValue(object.maxStep) : Long.ZERO,
      maxWallTime: isSet(object.maxWallTime) ? fromJsonTimestamp(object.maxWallTime) : undefined,
      maxBlobSequenceLength: isSet(object.maxBlobSequenceLength)
        ? Long.fromValue(object.maxBlobSequenceLength)
        : Long.ZERO,
    };
  },

  toJSON(message: TensorboardTimeSeries_Metadata): unknown {
    const obj: any = {};
    if (!message.maxStep.equals(Long.ZERO)) {
      obj.maxStep = (message.maxStep || Long.ZERO).toString();
    }
    if (message.maxWallTime !== undefined) {
      obj.maxWallTime = message.maxWallTime.toISOString();
    }
    if (!message.maxBlobSequenceLength.equals(Long.ZERO)) {
      obj.maxBlobSequenceLength = (message.maxBlobSequenceLength || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<TensorboardTimeSeries_Metadata>): TensorboardTimeSeries_Metadata {
    return TensorboardTimeSeries_Metadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TensorboardTimeSeries_Metadata>): TensorboardTimeSeries_Metadata {
    const message = createBaseTensorboardTimeSeries_Metadata();
    message.maxStep = (object.maxStep !== undefined && object.maxStep !== null)
      ? Long.fromValue(object.maxStep)
      : Long.ZERO;
    message.maxWallTime = object.maxWallTime ?? undefined;
    message.maxBlobSequenceLength =
      (object.maxBlobSequenceLength !== undefined && object.maxBlobSequenceLength !== null)
        ? Long.fromValue(object.maxBlobSequenceLength)
        : Long.ZERO;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
