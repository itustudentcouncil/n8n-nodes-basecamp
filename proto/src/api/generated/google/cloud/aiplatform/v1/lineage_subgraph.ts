// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/lineage_subgraph.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Artifact } from "./artifact.js";
import { Event } from "./event.js";
import { Execution } from "./execution.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * A subgraph of the overall lineage graph. Event edges connect Artifact and
 * Execution nodes.
 */
export interface LineageSubgraph {
  /** The Artifact nodes in the subgraph. */
  artifacts: Artifact[];
  /** The Execution nodes in the subgraph. */
  executions: Execution[];
  /** The Event edges between Artifacts and Executions in the subgraph. */
  events: Event[];
}

function createBaseLineageSubgraph(): LineageSubgraph {
  return { artifacts: [], executions: [], events: [] };
}

export const LineageSubgraph: MessageFns<LineageSubgraph> = {
  encode(message: LineageSubgraph, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.artifacts) {
      Artifact.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.executions) {
      Execution.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LineageSubgraph {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLineageSubgraph();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.artifacts.push(Artifact.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.executions.push(Execution.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LineageSubgraph {
    return {
      artifacts: globalThis.Array.isArray(object?.artifacts)
        ? object.artifacts.map((e: any) => Artifact.fromJSON(e))
        : [],
      executions: globalThis.Array.isArray(object?.executions)
        ? object.executions.map((e: any) => Execution.fromJSON(e))
        : [],
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [],
    };
  },

  toJSON(message: LineageSubgraph): unknown {
    const obj: any = {};
    if (message.artifacts?.length) {
      obj.artifacts = message.artifacts.map((e) => Artifact.toJSON(e));
    }
    if (message.executions?.length) {
      obj.executions = message.executions.map((e) => Execution.toJSON(e));
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<LineageSubgraph>): LineageSubgraph {
    return LineageSubgraph.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LineageSubgraph>): LineageSubgraph {
    const message = createBaseLineageSubgraph();
    message.artifacts = object.artifacts?.map((e) => Artifact.fromPartial(e)) || [];
    message.executions = object.executions?.map((e) => Execution.fromPartial(e)) || [];
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
