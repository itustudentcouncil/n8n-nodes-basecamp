// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/schema/predict/prediction/tabular_regression.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.aiplatform.v1.schema.predict.prediction";

/** Prediction output format for Tabular Regression. */
export interface TabularRegressionPredictionResult {
  /** The regression value. */
  value: number;
  /** The lower bound of the prediction interval. */
  lowerBound: number;
  /** The upper bound of the prediction interval. */
  upperBound: number;
}

function createBaseTabularRegressionPredictionResult(): TabularRegressionPredictionResult {
  return { value: 0, lowerBound: 0, upperBound: 0 };
}

export const TabularRegressionPredictionResult: MessageFns<TabularRegressionPredictionResult> = {
  encode(message: TabularRegressionPredictionResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    if (message.lowerBound !== 0) {
      writer.uint32(21).float(message.lowerBound);
    }
    if (message.upperBound !== 0) {
      writer.uint32(29).float(message.upperBound);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TabularRegressionPredictionResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTabularRegressionPredictionResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.lowerBound = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.upperBound = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TabularRegressionPredictionResult {
    return {
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      lowerBound: isSet(object.lowerBound) ? globalThis.Number(object.lowerBound) : 0,
      upperBound: isSet(object.upperBound) ? globalThis.Number(object.upperBound) : 0,
    };
  },

  toJSON(message: TabularRegressionPredictionResult): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    if (message.lowerBound !== 0) {
      obj.lowerBound = message.lowerBound;
    }
    if (message.upperBound !== 0) {
      obj.upperBound = message.upperBound;
    }
    return obj;
  },

  create(base?: DeepPartial<TabularRegressionPredictionResult>): TabularRegressionPredictionResult {
    return TabularRegressionPredictionResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TabularRegressionPredictionResult>): TabularRegressionPredictionResult {
    const message = createBaseTabularRegressionPredictionResult();
    message.value = object.value ?? 0;
    message.lowerBound = object.lowerBound ?? 0;
    message.upperBound = object.upperBound ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
