// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/genai_tuning_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { GcsDestination } from "./io.js";
import { GenericOperationMetadata } from "./operation.js";
import { TunedModelRef, TuningJob } from "./tuning_job.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * Request message for
 * [GenAiTuningService.CreateTuningJob][google.cloud.aiplatform.v1.GenAiTuningService.CreateTuningJob].
 */
export interface CreateTuningJobRequest {
  /**
   * Required. The resource name of the Location to create the TuningJob in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The TuningJob to create. */
  tuningJob: TuningJob | undefined;
}

/**
 * Request message for
 * [GenAiTuningService.GetTuningJob][google.cloud.aiplatform.v1.GenAiTuningService.GetTuningJob].
 */
export interface GetTuningJobRequest {
  /**
   * Required. The name of the TuningJob resource. Format:
   * `projects/{project}/locations/{location}/tuningJobs/{tuning_job}`
   */
  name: string;
}

/**
 * Request message for
 * [GenAiTuningService.ListTuningJobs][google.cloud.aiplatform.v1.GenAiTuningService.ListTuningJobs].
 */
export interface ListTuningJobsRequest {
  /**
   * Required. The resource name of the Location to list the TuningJobs from.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Optional. The standard list filter. */
  filter: string;
  /** Optional. The standard list page size. */
  pageSize: number;
  /**
   * Optional. The standard list page token.
   * Typically obtained via [ListTuningJob.next_page_token][] of the
   * previous GenAiTuningService.ListTuningJob][] call.
   */
  pageToken: string;
}

/**
 * Response message for
 * [GenAiTuningService.ListTuningJobs][google.cloud.aiplatform.v1.GenAiTuningService.ListTuningJobs]
 */
export interface ListTuningJobsResponse {
  /** List of TuningJobs in the requested page. */
  tuningJobs: TuningJob[];
  /**
   * A token to retrieve the next page of results.
   * Pass to
   * [ListTuningJobsRequest.page_token][google.cloud.aiplatform.v1.ListTuningJobsRequest.page_token]
   * to obtain that page.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [GenAiTuningService.CancelTuningJob][google.cloud.aiplatform.v1.GenAiTuningService.CancelTuningJob].
 */
export interface CancelTuningJobRequest {
  /**
   * Required. The name of the TuningJob to cancel. Format:
   * `projects/{project}/locations/{location}/tuningJobs/{tuning_job}`
   */
  name: string;
}

/**
 * Request message for
 * [GenAiTuningService.RebaseTunedModel][google.cloud.aiplatform.v1.GenAiTuningService.RebaseTunedModel].
 */
export interface RebaseTunedModelRequest {
  /**
   * Required. The resource name of the Location into which to rebase the Model.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. TunedModel reference to retrieve the legacy model information. */
  tunedModelRef:
    | TunedModelRef
    | undefined;
  /**
   * Optional. The TuningJob to be updated. Users can use this TuningJob field
   * to overwrite tuning configs.
   */
  tuningJob:
    | TuningJob
    | undefined;
  /** Optional. The Google Cloud Storage location to write the artifacts. */
  artifactDestination:
    | GcsDestination
    | undefined;
  /**
   * Optional. By default, bison to gemini migration will always create new
   * model/endpoint, but for gemini-1.0 to gemini-1.5 migration, we default
   * deploy to the same endpoint. See details in this Section.
   */
  deployToSameEndpoint: boolean;
}

/**
 * Runtime operation information for
 * [GenAiTuningService.RebaseTunedModel][google.cloud.aiplatform.v1.GenAiTuningService.RebaseTunedModel].
 */
export interface RebaseTunedModelOperationMetadata {
  /** The common part of the operation generic information. */
  genericMetadata: GenericOperationMetadata | undefined;
}

function createBaseCreateTuningJobRequest(): CreateTuningJobRequest {
  return { parent: "", tuningJob: undefined };
}

export const CreateTuningJobRequest: MessageFns<CreateTuningJobRequest> = {
  encode(message: CreateTuningJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.tuningJob !== undefined) {
      TuningJob.encode(message.tuningJob, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTuningJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTuningJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tuningJob = TuningJob.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTuningJobRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      tuningJob: isSet(object.tuningJob) ? TuningJob.fromJSON(object.tuningJob) : undefined,
    };
  },

  toJSON(message: CreateTuningJobRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.tuningJob !== undefined) {
      obj.tuningJob = TuningJob.toJSON(message.tuningJob);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTuningJobRequest>): CreateTuningJobRequest {
    return CreateTuningJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTuningJobRequest>): CreateTuningJobRequest {
    const message = createBaseCreateTuningJobRequest();
    message.parent = object.parent ?? "";
    message.tuningJob = (object.tuningJob !== undefined && object.tuningJob !== null)
      ? TuningJob.fromPartial(object.tuningJob)
      : undefined;
    return message;
  },
};

function createBaseGetTuningJobRequest(): GetTuningJobRequest {
  return { name: "" };
}

export const GetTuningJobRequest: MessageFns<GetTuningJobRequest> = {
  encode(message: GetTuningJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTuningJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTuningJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTuningJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTuningJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTuningJobRequest>): GetTuningJobRequest {
    return GetTuningJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTuningJobRequest>): GetTuningJobRequest {
    const message = createBaseGetTuningJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListTuningJobsRequest(): ListTuningJobsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListTuningJobsRequest: MessageFns<ListTuningJobsRequest> = {
  encode(message: ListTuningJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTuningJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTuningJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTuningJobsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListTuningJobsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTuningJobsRequest>): ListTuningJobsRequest {
    return ListTuningJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTuningJobsRequest>): ListTuningJobsRequest {
    const message = createBaseListTuningJobsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListTuningJobsResponse(): ListTuningJobsResponse {
  return { tuningJobs: [], nextPageToken: "" };
}

export const ListTuningJobsResponse: MessageFns<ListTuningJobsResponse> = {
  encode(message: ListTuningJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tuningJobs) {
      TuningJob.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTuningJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTuningJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tuningJobs.push(TuningJob.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTuningJobsResponse {
    return {
      tuningJobs: globalThis.Array.isArray(object?.tuningJobs)
        ? object.tuningJobs.map((e: any) => TuningJob.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTuningJobsResponse): unknown {
    const obj: any = {};
    if (message.tuningJobs?.length) {
      obj.tuningJobs = message.tuningJobs.map((e) => TuningJob.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTuningJobsResponse>): ListTuningJobsResponse {
    return ListTuningJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTuningJobsResponse>): ListTuningJobsResponse {
    const message = createBaseListTuningJobsResponse();
    message.tuningJobs = object.tuningJobs?.map((e) => TuningJob.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCancelTuningJobRequest(): CancelTuningJobRequest {
  return { name: "" };
}

export const CancelTuningJobRequest: MessageFns<CancelTuningJobRequest> = {
  encode(message: CancelTuningJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelTuningJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelTuningJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelTuningJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CancelTuningJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<CancelTuningJobRequest>): CancelTuningJobRequest {
    return CancelTuningJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CancelTuningJobRequest>): CancelTuningJobRequest {
    const message = createBaseCancelTuningJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseRebaseTunedModelRequest(): RebaseTunedModelRequest {
  return {
    parent: "",
    tunedModelRef: undefined,
    tuningJob: undefined,
    artifactDestination: undefined,
    deployToSameEndpoint: false,
  };
}

export const RebaseTunedModelRequest: MessageFns<RebaseTunedModelRequest> = {
  encode(message: RebaseTunedModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.tunedModelRef !== undefined) {
      TunedModelRef.encode(message.tunedModelRef, writer.uint32(18).fork()).join();
    }
    if (message.tuningJob !== undefined) {
      TuningJob.encode(message.tuningJob, writer.uint32(26).fork()).join();
    }
    if (message.artifactDestination !== undefined) {
      GcsDestination.encode(message.artifactDestination, writer.uint32(34).fork()).join();
    }
    if (message.deployToSameEndpoint !== false) {
      writer.uint32(40).bool(message.deployToSameEndpoint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RebaseTunedModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRebaseTunedModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tunedModelRef = TunedModelRef.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tuningJob = TuningJob.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.artifactDestination = GcsDestination.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.deployToSameEndpoint = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RebaseTunedModelRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      tunedModelRef: isSet(object.tunedModelRef) ? TunedModelRef.fromJSON(object.tunedModelRef) : undefined,
      tuningJob: isSet(object.tuningJob) ? TuningJob.fromJSON(object.tuningJob) : undefined,
      artifactDestination: isSet(object.artifactDestination)
        ? GcsDestination.fromJSON(object.artifactDestination)
        : undefined,
      deployToSameEndpoint: isSet(object.deployToSameEndpoint)
        ? globalThis.Boolean(object.deployToSameEndpoint)
        : false,
    };
  },

  toJSON(message: RebaseTunedModelRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.tunedModelRef !== undefined) {
      obj.tunedModelRef = TunedModelRef.toJSON(message.tunedModelRef);
    }
    if (message.tuningJob !== undefined) {
      obj.tuningJob = TuningJob.toJSON(message.tuningJob);
    }
    if (message.artifactDestination !== undefined) {
      obj.artifactDestination = GcsDestination.toJSON(message.artifactDestination);
    }
    if (message.deployToSameEndpoint !== false) {
      obj.deployToSameEndpoint = message.deployToSameEndpoint;
    }
    return obj;
  },

  create(base?: DeepPartial<RebaseTunedModelRequest>): RebaseTunedModelRequest {
    return RebaseTunedModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RebaseTunedModelRequest>): RebaseTunedModelRequest {
    const message = createBaseRebaseTunedModelRequest();
    message.parent = object.parent ?? "";
    message.tunedModelRef = (object.tunedModelRef !== undefined && object.tunedModelRef !== null)
      ? TunedModelRef.fromPartial(object.tunedModelRef)
      : undefined;
    message.tuningJob = (object.tuningJob !== undefined && object.tuningJob !== null)
      ? TuningJob.fromPartial(object.tuningJob)
      : undefined;
    message.artifactDestination = (object.artifactDestination !== undefined && object.artifactDestination !== null)
      ? GcsDestination.fromPartial(object.artifactDestination)
      : undefined;
    message.deployToSameEndpoint = object.deployToSameEndpoint ?? false;
    return message;
  },
};

function createBaseRebaseTunedModelOperationMetadata(): RebaseTunedModelOperationMetadata {
  return { genericMetadata: undefined };
}

export const RebaseTunedModelOperationMetadata: MessageFns<RebaseTunedModelOperationMetadata> = {
  encode(message: RebaseTunedModelOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RebaseTunedModelOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRebaseTunedModelOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RebaseTunedModelOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: RebaseTunedModelOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<RebaseTunedModelOperationMetadata>): RebaseTunedModelOperationMetadata {
    return RebaseTunedModelOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RebaseTunedModelOperationMetadata>): RebaseTunedModelOperationMetadata {
    const message = createBaseRebaseTunedModelOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

/** A service for creating and managing GenAI Tuning Jobs. */
export type GenAiTuningServiceDefinition = typeof GenAiTuningServiceDefinition;
export const GenAiTuningServiceDefinition = {
  name: "GenAiTuningService",
  fullName: "google.cloud.aiplatform.v1.GenAiTuningService",
  methods: {
    /**
     * Creates a TuningJob. A created TuningJob right away will be attempted to
     * be run.
     */
    createTuningJob: {
      name: "CreateTuningJob",
      requestType: CreateTuningJobRequest,
      requestStream: false,
      responseType: TuningJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 112, 97, 114, 101, 110, 116, 44, 116, 117, 110, 105, 110, 103, 95, 106, 111, 98])],
          578365826: [
            Buffer.from([
              60,
              58,
              10,
              116,
              117,
              110,
              105,
              110,
              103,
              95,
              106,
              111,
              98,
              34,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              117,
              110,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a TuningJob. */
    getTuningJob: {
      name: "GetTuningJob",
      requestType: GetTuningJobRequest,
      requestStream: false,
      responseType: TuningJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              117,
              110,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists TuningJobs in a Location. */
    listTuningJobs: {
      name: "ListTuningJobs",
      requestType: ListTuningJobsRequest,
      requestStream: false,
      responseType: ListTuningJobsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              117,
              110,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Cancels a TuningJob.
     * Starts asynchronous cancellation on the TuningJob. The server makes a best
     * effort to cancel the job, but success is not guaranteed. Clients can use
     * [GenAiTuningService.GetTuningJob][google.cloud.aiplatform.v1.GenAiTuningService.GetTuningJob]
     * or other methods to check whether the cancellation succeeded or whether the
     * job completed despite cancellation. On successful cancellation, the
     * TuningJob is not deleted; instead it becomes a job with a
     * [TuningJob.error][google.cloud.aiplatform.v1.TuningJob.error] value with a
     * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
     * `Code.CANCELLED`, and
     * [TuningJob.state][google.cloud.aiplatform.v1.TuningJob.state] is set to
     * `CANCELLED`.
     */
    cancelTuningJob: {
      name: "CancelTuningJob",
      requestType: CancelTuningJobRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              117,
              110,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              99,
              97,
              110,
              99,
              101,
              108,
            ]),
          ],
        },
      },
    },
    /**
     * Rebase a TunedModel.
     * Creates a LongRunningOperation that takes a legacy Tuned GenAI model
     * Reference and creates a TuningJob based on newly available model.
     */
    rebaseTunedModel: {
      name: "RebaseTunedModel",
      requestType: RebaseTunedModelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              46,
              10,
              9,
              84,
              117,
              110,
              105,
              110,
              103,
              74,
              111,
              98,
              18,
              33,
              82,
              101,
              98,
              97,
              115,
              101,
              84,
              117,
              110,
              101,
              100,
              77,
              111,
              100,
              101,
              108,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              22,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              116,
              117,
              110,
              101,
              100,
              95,
              109,
              111,
              100,
              101,
              108,
              95,
              114,
              101,
              102,
            ]),
          ],
          578365826: [
            Buffer.from([
              68,
              58,
              1,
              42,
              34,
              63,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              117,
              110,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
              58,
              114,
              101,
              98,
              97,
              115,
              101,
              84,
              117,
              110,
              101,
              100,
              77,
              111,
              100,
              101,
              108,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface GenAiTuningServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a TuningJob. A created TuningJob right away will be attempted to
   * be run.
   */
  createTuningJob(
    request: CreateTuningJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TuningJob>>;
  /** Gets a TuningJob. */
  getTuningJob(request: GetTuningJobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<TuningJob>>;
  /** Lists TuningJobs in a Location. */
  listTuningJobs(
    request: ListTuningJobsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTuningJobsResponse>>;
  /**
   * Cancels a TuningJob.
   * Starts asynchronous cancellation on the TuningJob. The server makes a best
   * effort to cancel the job, but success is not guaranteed. Clients can use
   * [GenAiTuningService.GetTuningJob][google.cloud.aiplatform.v1.GenAiTuningService.GetTuningJob]
   * or other methods to check whether the cancellation succeeded or whether the
   * job completed despite cancellation. On successful cancellation, the
   * TuningJob is not deleted; instead it becomes a job with a
   * [TuningJob.error][google.cloud.aiplatform.v1.TuningJob.error] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`, and
   * [TuningJob.state][google.cloud.aiplatform.v1.TuningJob.state] is set to
   * `CANCELLED`.
   */
  cancelTuningJob(request: CancelTuningJobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Rebase a TunedModel.
   * Creates a LongRunningOperation that takes a legacy Tuned GenAI model
   * Reference and creates a TuningJob based on newly available model.
   */
  rebaseTunedModel(
    request: RebaseTunedModelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface GenAiTuningServiceClient<CallOptionsExt = {}> {
  /**
   * Creates a TuningJob. A created TuningJob right away will be attempted to
   * be run.
   */
  createTuningJob(
    request: DeepPartial<CreateTuningJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TuningJob>;
  /** Gets a TuningJob. */
  getTuningJob(request: DeepPartial<GetTuningJobRequest>, options?: CallOptions & CallOptionsExt): Promise<TuningJob>;
  /** Lists TuningJobs in a Location. */
  listTuningJobs(
    request: DeepPartial<ListTuningJobsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTuningJobsResponse>;
  /**
   * Cancels a TuningJob.
   * Starts asynchronous cancellation on the TuningJob. The server makes a best
   * effort to cancel the job, but success is not guaranteed. Clients can use
   * [GenAiTuningService.GetTuningJob][google.cloud.aiplatform.v1.GenAiTuningService.GetTuningJob]
   * or other methods to check whether the cancellation succeeded or whether the
   * job completed despite cancellation. On successful cancellation, the
   * TuningJob is not deleted; instead it becomes a job with a
   * [TuningJob.error][google.cloud.aiplatform.v1.TuningJob.error] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`, and
   * [TuningJob.state][google.cloud.aiplatform.v1.TuningJob.state] is set to
   * `CANCELLED`.
   */
  cancelTuningJob(request: DeepPartial<CancelTuningJobRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Rebase a TunedModel.
   * Creates a LongRunningOperation that takes a legacy Tuned GenAI model
   * Reference and creates a TuningJob based on newly available model.
   */
  rebaseTunedModel(
    request: DeepPartial<RebaseTunedModelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
