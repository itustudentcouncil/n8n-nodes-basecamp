// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/metadata_schema.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/** Instance of a general MetadataSchema. */
export interface MetadataSchema {
  /** Output only. The resource name of the MetadataSchema. */
  name: string;
  /**
   * The version of the MetadataSchema. The version's format must match
   * the following regular expression: `^[0-9]+[.][0-9]+[.][0-9]+$`, which would
   * allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
   */
  schemaVersion: string;
  /**
   * Required. The raw YAML string representation of the MetadataSchema. The
   * combination of [MetadataSchema.version] and the schema name given by
   * `title` in [MetadataSchema.schema] must be unique within a MetadataStore.
   *
   * The schema is defined as an OpenAPI 3.0.2
   * [MetadataSchema
   * Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
   */
  schema: string;
  /**
   * The type of the MetadataSchema. This is a property that identifies which
   * metadata types will use the MetadataSchema.
   */
  schemaType: MetadataSchema_MetadataSchemaType;
  /** Output only. Timestamp when this MetadataSchema was created. */
  createTime:
    | Date
    | undefined;
  /** Description of the Metadata Schema */
  description: string;
}

/** Describes the type of the MetadataSchema. */
export enum MetadataSchema_MetadataSchemaType {
  /** METADATA_SCHEMA_TYPE_UNSPECIFIED - Unspecified type for the MetadataSchema. */
  METADATA_SCHEMA_TYPE_UNSPECIFIED = 0,
  /** ARTIFACT_TYPE - A type indicating that the MetadataSchema will be used by Artifacts. */
  ARTIFACT_TYPE = 1,
  /** EXECUTION_TYPE - A typee indicating that the MetadataSchema will be used by Executions. */
  EXECUTION_TYPE = 2,
  /** CONTEXT_TYPE - A state indicating that the MetadataSchema will be used by Contexts. */
  CONTEXT_TYPE = 3,
  UNRECOGNIZED = -1,
}

export function metadataSchema_MetadataSchemaTypeFromJSON(object: any): MetadataSchema_MetadataSchemaType {
  switch (object) {
    case 0:
    case "METADATA_SCHEMA_TYPE_UNSPECIFIED":
      return MetadataSchema_MetadataSchemaType.METADATA_SCHEMA_TYPE_UNSPECIFIED;
    case 1:
    case "ARTIFACT_TYPE":
      return MetadataSchema_MetadataSchemaType.ARTIFACT_TYPE;
    case 2:
    case "EXECUTION_TYPE":
      return MetadataSchema_MetadataSchemaType.EXECUTION_TYPE;
    case 3:
    case "CONTEXT_TYPE":
      return MetadataSchema_MetadataSchemaType.CONTEXT_TYPE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MetadataSchema_MetadataSchemaType.UNRECOGNIZED;
  }
}

export function metadataSchema_MetadataSchemaTypeToJSON(object: MetadataSchema_MetadataSchemaType): string {
  switch (object) {
    case MetadataSchema_MetadataSchemaType.METADATA_SCHEMA_TYPE_UNSPECIFIED:
      return "METADATA_SCHEMA_TYPE_UNSPECIFIED";
    case MetadataSchema_MetadataSchemaType.ARTIFACT_TYPE:
      return "ARTIFACT_TYPE";
    case MetadataSchema_MetadataSchemaType.EXECUTION_TYPE:
      return "EXECUTION_TYPE";
    case MetadataSchema_MetadataSchemaType.CONTEXT_TYPE:
      return "CONTEXT_TYPE";
    case MetadataSchema_MetadataSchemaType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseMetadataSchema(): MetadataSchema {
  return { name: "", schemaVersion: "", schema: "", schemaType: 0, createTime: undefined, description: "" };
}

export const MetadataSchema: MessageFns<MetadataSchema> = {
  encode(message: MetadataSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.schemaVersion !== "") {
      writer.uint32(18).string(message.schemaVersion);
    }
    if (message.schema !== "") {
      writer.uint32(26).string(message.schema);
    }
    if (message.schemaType !== 0) {
      writer.uint32(32).int32(message.schemaType);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schema = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.schemaType = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetadataSchema {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      schemaVersion: isSet(object.schemaVersion) ? globalThis.String(object.schemaVersion) : "",
      schema: isSet(object.schema) ? globalThis.String(object.schema) : "",
      schemaType: isSet(object.schemaType) ? metadataSchema_MetadataSchemaTypeFromJSON(object.schemaType) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: MetadataSchema): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.schemaVersion !== "") {
      obj.schemaVersion = message.schemaVersion;
    }
    if (message.schema !== "") {
      obj.schema = message.schema;
    }
    if (message.schemaType !== 0) {
      obj.schemaType = metadataSchema_MetadataSchemaTypeToJSON(message.schemaType);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<MetadataSchema>): MetadataSchema {
    return MetadataSchema.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MetadataSchema>): MetadataSchema {
    const message = createBaseMetadataSchema();
    message.name = object.name ?? "";
    message.schemaVersion = object.schemaVersion ?? "";
    message.schema = object.schema ?? "";
    message.schemaType = object.schemaType ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.description = object.description ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
