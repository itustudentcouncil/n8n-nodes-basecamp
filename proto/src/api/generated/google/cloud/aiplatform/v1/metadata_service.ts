// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/metadata_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Artifact } from "./artifact.js";
import { Context } from "./context.js";
import { Event } from "./event.js";
import { Execution } from "./execution.js";
import { LineageSubgraph } from "./lineage_subgraph.js";
import { MetadataSchema } from "./metadata_schema.js";
import { MetadataStore } from "./metadata_store.js";
import { GenericOperationMetadata } from "./operation.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * Request message for
 * [MetadataService.CreateMetadataStore][google.cloud.aiplatform.v1.MetadataService.CreateMetadataStore].
 */
export interface CreateMetadataStoreRequest {
  /**
   * Required. The resource name of the Location where the MetadataStore should
   * be created.
   * Format: `projects/{project}/locations/{location}/`
   */
  parent: string;
  /** Required. The MetadataStore to create. */
  metadataStore:
    | MetadataStore
    | undefined;
  /**
   * The {metadatastore} portion of the resource name with the format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * If not provided, the MetadataStore's ID will be a UUID generated by the
   * service.
   * Must be 4-128 characters in length. Valid characters are `/[a-z][0-9]-/`.
   * Must be unique across all MetadataStores in the parent Location.
   * (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED
   * if the caller can't view the preexisting MetadataStore.)
   */
  metadataStoreId: string;
}

/**
 * Details of operations that perform
 * [MetadataService.CreateMetadataStore][google.cloud.aiplatform.v1.MetadataService.CreateMetadataStore].
 */
export interface CreateMetadataStoreOperationMetadata {
  /** Operation metadata for creating a MetadataStore. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [MetadataService.GetMetadataStore][google.cloud.aiplatform.v1.MetadataService.GetMetadataStore].
 */
export interface GetMetadataStoreRequest {
  /**
   * Required. The resource name of the MetadataStore to retrieve.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   */
  name: string;
}

/**
 * Request message for
 * [MetadataService.ListMetadataStores][google.cloud.aiplatform.v1.MetadataService.ListMetadataStores].
 */
export interface ListMetadataStoresRequest {
  /**
   * Required. The Location whose MetadataStores should be listed.
   * Format:
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * The maximum number of Metadata Stores to return. The service may return
   * fewer.
   * Must be in range 1-1000, inclusive. Defaults to 100.
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * [MetadataService.ListMetadataStores][google.cloud.aiplatform.v1.MetadataService.ListMetadataStores]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other provided parameters must match the call that
   * provided the page token. (Otherwise the request will fail with
   * INVALID_ARGUMENT error.)
   */
  pageToken: string;
}

/**
 * Response message for
 * [MetadataService.ListMetadataStores][google.cloud.aiplatform.v1.MetadataService.ListMetadataStores].
 */
export interface ListMetadataStoresResponse {
  /** The MetadataStores found for the Location. */
  metadataStores: MetadataStore[];
  /**
   * A token, which can be sent as
   * [ListMetadataStoresRequest.page_token][google.cloud.aiplatform.v1.ListMetadataStoresRequest.page_token]
   * to retrieve the next page. If this field is not populated, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [MetadataService.DeleteMetadataStore][google.cloud.aiplatform.v1.MetadataService.DeleteMetadataStore].
 */
export interface DeleteMetadataStoreRequest {
  /**
   * Required. The resource name of the MetadataStore to delete.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   */
  name: string;
  /**
   * Deprecated: Field is no longer supported.
   *
   * @deprecated
   */
  force: boolean;
}

/**
 * Details of operations that perform
 * [MetadataService.DeleteMetadataStore][google.cloud.aiplatform.v1.MetadataService.DeleteMetadataStore].
 */
export interface DeleteMetadataStoreOperationMetadata {
  /** Operation metadata for deleting a MetadataStore. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [MetadataService.CreateArtifact][google.cloud.aiplatform.v1.MetadataService.CreateArtifact].
 */
export interface CreateArtifactRequest {
  /**
   * Required. The resource name of the MetadataStore where the Artifact should
   * be created.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   */
  parent: string;
  /** Required. The Artifact to create. */
  artifact:
    | Artifact
    | undefined;
  /**
   * The {artifact} portion of the resource name with the format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`
   * If not provided, the Artifact's ID will be a UUID generated by the service.
   * Must be 4-128 characters in length. Valid characters are `/[a-z][0-9]-/`.
   * Must be unique across all Artifacts in the parent MetadataStore. (Otherwise
   * the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the
   * caller can't view the preexisting Artifact.)
   */
  artifactId: string;
}

/**
 * Request message for
 * [MetadataService.GetArtifact][google.cloud.aiplatform.v1.MetadataService.GetArtifact].
 */
export interface GetArtifactRequest {
  /**
   * Required. The resource name of the Artifact to retrieve.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`
   */
  name: string;
}

/**
 * Request message for
 * [MetadataService.ListArtifacts][google.cloud.aiplatform.v1.MetadataService.ListArtifacts].
 */
export interface ListArtifactsRequest {
  /**
   * Required. The MetadataStore whose Artifacts should be listed.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   */
  parent: string;
  /**
   * The maximum number of Artifacts to return. The service may return fewer.
   * Must be in range 1-1000, inclusive. Defaults to 100.
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * [MetadataService.ListArtifacts][google.cloud.aiplatform.v1.MetadataService.ListArtifacts]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other provided parameters must match the call that
   * provided the page token. (Otherwise the request will fail with
   * INVALID_ARGUMENT error.)
   */
  pageToken: string;
  /**
   * Filter specifying the boolean condition for the Artifacts to satisfy in
   * order to be part of the result set.
   * The syntax to define filter query is based on https://google.aip.dev/160.
   * The supported set of filters include the following:
   *
   * *   **Attribute filtering**:
   *     For example: `display_name = "test"`.
   *     Supported fields include: `name`, `display_name`, `uri`, `state`,
   *     `schema_title`, `create_time`, and `update_time`.
   *     Time fields, such as `create_time` and `update_time`, require values
   *     specified in RFC-3339 format.
   *     For example: `create_time = "2020-11-19T11:30:00-04:00"`
   * *   **Metadata field**:
   *     To filter on metadata fields use traversal operation as follows:
   *     `metadata.<field_name>.<type_value>`.
   *     For example: `metadata.field_1.number_value = 10.0`
   *     In case the field name contains special characters (such as colon), one
   *     can embed it inside double quote.
   *     For example: `metadata."field:1".number_value = 10.0`
   * *   **Context based filtering**:
   *     To filter Artifacts based on the contexts to which they belong, use the
   *     function operator with the full resource name
   *     `in_context(<context-name>)`.
   *     For example:
   *     `in_context("projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context-id>")`
   *
   * Each of the above supported filter types can be combined together using
   * logical operators (`AND` & `OR`). Maximum nested expression depth allowed
   * is 5.
   *
   * For example: `display_name = "test" AND metadata.field1.bool_value = true`.
   */
  filter: string;
  /**
   * How the list of messages is ordered. Specify the values to order by and an
   * ordering operation. The default sorting order is ascending. To specify
   * descending order for a field, users append a " desc" suffix; for example:
   * "foo desc, bar".
   * Subfields are specified with a `.` character, such as foo.bar.
   * see https://google.aip.dev/132#ordering for more details.
   */
  orderBy: string;
}

/**
 * Response message for
 * [MetadataService.ListArtifacts][google.cloud.aiplatform.v1.MetadataService.ListArtifacts].
 */
export interface ListArtifactsResponse {
  /** The Artifacts retrieved from the MetadataStore. */
  artifacts: Artifact[];
  /**
   * A token, which can be sent as
   * [ListArtifactsRequest.page_token][google.cloud.aiplatform.v1.ListArtifactsRequest.page_token]
   * to retrieve the next page.
   * If this field is not populated, there are no subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [MetadataService.UpdateArtifact][google.cloud.aiplatform.v1.MetadataService.UpdateArtifact].
 */
export interface UpdateArtifactRequest {
  /**
   * Required. The Artifact containing updates.
   * The Artifact's [Artifact.name][google.cloud.aiplatform.v1.Artifact.name]
   * field is used to identify the Artifact to be updated. Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`
   */
  artifact:
    | Artifact
    | undefined;
  /** Optional. A FieldMask indicating which fields should be updated. */
  updateMask:
    | string[]
    | undefined;
  /**
   * If set to true, and the [Artifact][google.cloud.aiplatform.v1.Artifact] is
   * not found, a new [Artifact][google.cloud.aiplatform.v1.Artifact] is
   * created.
   */
  allowMissing: boolean;
}

/**
 * Request message for
 * [MetadataService.DeleteArtifact][google.cloud.aiplatform.v1.MetadataService.DeleteArtifact].
 */
export interface DeleteArtifactRequest {
  /**
   * Required. The resource name of the Artifact to delete.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`
   */
  name: string;
  /**
   * Optional. The etag of the Artifact to delete.
   * If this is provided, it must match the server's etag. Otherwise, the
   * request will fail with a FAILED_PRECONDITION.
   */
  etag: string;
}

/**
 * Request message for
 * [MetadataService.PurgeArtifacts][google.cloud.aiplatform.v1.MetadataService.PurgeArtifacts].
 */
export interface PurgeArtifactsRequest {
  /**
   * Required. The metadata store to purge Artifacts from.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   */
  parent: string;
  /**
   * Required. A required filter matching the Artifacts to be purged.
   * E.g., `update_time <= 2020-11-19T11:30:00-04:00`.
   */
  filter: string;
  /**
   * Optional. Flag to indicate to actually perform the purge.
   * If `force` is set to false, the method will return a sample of
   * Artifact names that would be deleted.
   */
  force: boolean;
}

/**
 * Response message for
 * [MetadataService.PurgeArtifacts][google.cloud.aiplatform.v1.MetadataService.PurgeArtifacts].
 */
export interface PurgeArtifactsResponse {
  /**
   * The number of Artifacts that this request deleted (or, if `force` is false,
   * the number of Artifacts that will be deleted). This can be an estimate.
   */
  purgeCount: Long;
  /**
   * A sample of the Artifact names that will be deleted.
   * Only populated if `force` is set to false. The maximum number of samples is
   * 100 (it is possible to return fewer).
   */
  purgeSample: string[];
}

/**
 * Details of operations that perform
 * [MetadataService.PurgeArtifacts][google.cloud.aiplatform.v1.MetadataService.PurgeArtifacts].
 */
export interface PurgeArtifactsMetadata {
  /** Operation metadata for purging Artifacts. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [MetadataService.CreateContext][google.cloud.aiplatform.v1.MetadataService.CreateContext].
 */
export interface CreateContextRequest {
  /**
   * Required. The resource name of the MetadataStore where the Context should
   * be created. Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   */
  parent: string;
  /** Required. The Context to create. */
  context:
    | Context
    | undefined;
  /**
   * The {context} portion of the resource name with the format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`.
   * If not provided, the Context's ID will be a UUID generated by the service.
   * Must be 4-128 characters in length. Valid characters are `/[a-z][0-9]-/`.
   * Must be unique across all Contexts in the parent MetadataStore. (Otherwise
   * the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the
   * caller can't view the preexisting Context.)
   */
  contextId: string;
}

/**
 * Request message for
 * [MetadataService.GetContext][google.cloud.aiplatform.v1.MetadataService.GetContext].
 */
export interface GetContextRequest {
  /**
   * Required. The resource name of the Context to retrieve.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
   */
  name: string;
}

/**
 * Request message for
 * [MetadataService.ListContexts][google.cloud.aiplatform.v1.MetadataService.ListContexts]
 */
export interface ListContextsRequest {
  /**
   * Required. The MetadataStore whose Contexts should be listed.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   */
  parent: string;
  /**
   * The maximum number of Contexts to return. The service may return fewer.
   * Must be in range 1-1000, inclusive. Defaults to 100.
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * [MetadataService.ListContexts][google.cloud.aiplatform.v1.MetadataService.ListContexts]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other provided parameters must match the call that
   * provided the page token. (Otherwise the request will fail with
   * INVALID_ARGUMENT error.)
   */
  pageToken: string;
  /**
   * Filter specifying the boolean condition for the Contexts to satisfy in
   * order to be part of the result set.
   * The syntax to define filter query is based on https://google.aip.dev/160.
   * Following are the supported set of filters:
   *
   * *  **Attribute filtering**:
   *    For example: `display_name = "test"`.
   *    Supported fields include: `name`, `display_name`, `schema_title`,
   *    `create_time`, and `update_time`.
   *    Time fields, such as `create_time` and `update_time`, require values
   *    specified in RFC-3339 format.
   *    For example: `create_time = "2020-11-19T11:30:00-04:00"`.
   * *  **Metadata field**:
   *    To filter on metadata fields use traversal operation as follows:
   *    `metadata.<field_name>.<type_value>`.
   *    For example: `metadata.field_1.number_value = 10.0`.
   *    In case the field name contains special characters (such as colon), one
   *    can embed it inside double quote.
   *    For example: `metadata."field:1".number_value = 10.0`
   * *  **Parent Child filtering**:
   *    To filter Contexts based on parent-child relationship use the HAS
   *    operator as follows:
   *
   *    ```
   *    parent_contexts:
   *    "projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context_id>"
   *    child_contexts:
   *    "projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context_id>"
   *    ```
   *
   * Each of the above supported filters can be combined together using
   * logical operators (`AND` & `OR`). Maximum nested expression depth allowed
   * is 5.
   *
   * For example: `display_name = "test" AND metadata.field1.bool_value = true`.
   */
  filter: string;
  /**
   * How the list of messages is ordered. Specify the values to order by and an
   * ordering operation. The default sorting order is ascending. To specify
   * descending order for a field, users append a " desc" suffix; for example:
   * "foo desc, bar".
   * Subfields are specified with a `.` character, such as foo.bar.
   * see https://google.aip.dev/132#ordering for more details.
   */
  orderBy: string;
}

/**
 * Response message for
 * [MetadataService.ListContexts][google.cloud.aiplatform.v1.MetadataService.ListContexts].
 */
export interface ListContextsResponse {
  /** The Contexts retrieved from the MetadataStore. */
  contexts: Context[];
  /**
   * A token, which can be sent as
   * [ListContextsRequest.page_token][google.cloud.aiplatform.v1.ListContextsRequest.page_token]
   * to retrieve the next page.
   * If this field is not populated, there are no subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [MetadataService.UpdateContext][google.cloud.aiplatform.v1.MetadataService.UpdateContext].
 */
export interface UpdateContextRequest {
  /**
   * Required. The Context containing updates.
   * The Context's [Context.name][google.cloud.aiplatform.v1.Context.name] field
   * is used to identify the Context to be updated. Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
   */
  context:
    | Context
    | undefined;
  /** Optional. A FieldMask indicating which fields should be updated. */
  updateMask:
    | string[]
    | undefined;
  /**
   * If set to true, and the [Context][google.cloud.aiplatform.v1.Context] is
   * not found, a new [Context][google.cloud.aiplatform.v1.Context] is created.
   */
  allowMissing: boolean;
}

/**
 * Request message for
 * [MetadataService.DeleteContext][google.cloud.aiplatform.v1.MetadataService.DeleteContext].
 */
export interface DeleteContextRequest {
  /**
   * Required. The resource name of the Context to delete.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
   */
  name: string;
  /**
   * The force deletion semantics is still undefined.
   * Users should not use this field.
   */
  force: boolean;
  /**
   * Optional. The etag of the Context to delete.
   * If this is provided, it must match the server's etag. Otherwise, the
   * request will fail with a FAILED_PRECONDITION.
   */
  etag: string;
}

/**
 * Request message for
 * [MetadataService.PurgeContexts][google.cloud.aiplatform.v1.MetadataService.PurgeContexts].
 */
export interface PurgeContextsRequest {
  /**
   * Required. The metadata store to purge Contexts from.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   */
  parent: string;
  /**
   * Required. A required filter matching the Contexts to be purged.
   * E.g., `update_time <= 2020-11-19T11:30:00-04:00`.
   */
  filter: string;
  /**
   * Optional. Flag to indicate to actually perform the purge.
   * If `force` is set to false, the method will return a sample of
   * Context names that would be deleted.
   */
  force: boolean;
}

/**
 * Response message for
 * [MetadataService.PurgeContexts][google.cloud.aiplatform.v1.MetadataService.PurgeContexts].
 */
export interface PurgeContextsResponse {
  /**
   * The number of Contexts that this request deleted (or, if `force` is false,
   * the number of Contexts that will be deleted). This can be an estimate.
   */
  purgeCount: Long;
  /**
   * A sample of the Context names that will be deleted.
   * Only populated if `force` is set to false. The maximum number of samples is
   * 100 (it is possible to return fewer).
   */
  purgeSample: string[];
}

/**
 * Details of operations that perform
 * [MetadataService.PurgeContexts][google.cloud.aiplatform.v1.MetadataService.PurgeContexts].
 */
export interface PurgeContextsMetadata {
  /** Operation metadata for purging Contexts. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [MetadataService.AddContextArtifactsAndExecutions][google.cloud.aiplatform.v1.MetadataService.AddContextArtifactsAndExecutions].
 */
export interface AddContextArtifactsAndExecutionsRequest {
  /**
   * Required. The resource name of the Context that the Artifacts and
   * Executions belong to. Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
   */
  context: string;
  /**
   * The resource names of the Artifacts to attribute to the Context.
   *
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`
   */
  artifacts: string[];
  /**
   * The resource names of the Executions to associate with the
   * Context.
   *
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
   */
  executions: string[];
}

/**
 * Response message for
 * [MetadataService.AddContextArtifactsAndExecutions][google.cloud.aiplatform.v1.MetadataService.AddContextArtifactsAndExecutions].
 */
export interface AddContextArtifactsAndExecutionsResponse {
}

/**
 * Request message for
 * [MetadataService.AddContextChildren][google.cloud.aiplatform.v1.MetadataService.AddContextChildren].
 */
export interface AddContextChildrenRequest {
  /**
   * Required. The resource name of the parent Context.
   *
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
   */
  context: string;
  /** The resource names of the child Contexts. */
  childContexts: string[];
}

/**
 * Response message for
 * [MetadataService.AddContextChildren][google.cloud.aiplatform.v1.MetadataService.AddContextChildren].
 */
export interface AddContextChildrenResponse {
}

/**
 * Request message for
 * [MetadataService.DeleteContextChildrenRequest][].
 */
export interface RemoveContextChildrenRequest {
  /**
   * Required. The resource name of the parent Context.
   *
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
   */
  context: string;
  /** The resource names of the child Contexts. */
  childContexts: string[];
}

/**
 * Response message for
 * [MetadataService.RemoveContextChildren][google.cloud.aiplatform.v1.MetadataService.RemoveContextChildren].
 */
export interface RemoveContextChildrenResponse {
}

/**
 * Request message for
 * [MetadataService.QueryContextLineageSubgraph][google.cloud.aiplatform.v1.MetadataService.QueryContextLineageSubgraph].
 */
export interface QueryContextLineageSubgraphRequest {
  /**
   * Required. The resource name of the Context whose Artifacts and Executions
   * should be retrieved as a LineageSubgraph.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
   *
   * The request may error with FAILED_PRECONDITION if the number of Artifacts,
   * the number of Executions, or the number of Events that would be returned
   * for the Context exceeds 1000.
   */
  context: string;
}

/**
 * Request message for
 * [MetadataService.CreateExecution][google.cloud.aiplatform.v1.MetadataService.CreateExecution].
 */
export interface CreateExecutionRequest {
  /**
   * Required. The resource name of the MetadataStore where the Execution should
   * be created.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   */
  parent: string;
  /** Required. The Execution to create. */
  execution:
    | Execution
    | undefined;
  /**
   * The {execution} portion of the resource name with the format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
   * If not provided, the Execution's ID will be a UUID generated by the
   * service.
   * Must be 4-128 characters in length. Valid characters are `/[a-z][0-9]-/`.
   * Must be unique across all Executions in the parent MetadataStore.
   * (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED
   * if the caller can't view the preexisting Execution.)
   */
  executionId: string;
}

/**
 * Request message for
 * [MetadataService.GetExecution][google.cloud.aiplatform.v1.MetadataService.GetExecution].
 */
export interface GetExecutionRequest {
  /**
   * Required. The resource name of the Execution to retrieve.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
   */
  name: string;
}

/**
 * Request message for
 * [MetadataService.ListExecutions][google.cloud.aiplatform.v1.MetadataService.ListExecutions].
 */
export interface ListExecutionsRequest {
  /**
   * Required. The MetadataStore whose Executions should be listed.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   */
  parent: string;
  /**
   * The maximum number of Executions to return. The service may return fewer.
   * Must be in range 1-1000, inclusive. Defaults to 100.
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * [MetadataService.ListExecutions][google.cloud.aiplatform.v1.MetadataService.ListExecutions]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other provided parameters must match the call that
   * provided the page token. (Otherwise the request will fail with an
   * INVALID_ARGUMENT error.)
   */
  pageToken: string;
  /**
   * Filter specifying the boolean condition for the Executions to satisfy in
   * order to be part of the result set.
   * The syntax to define filter query is based on https://google.aip.dev/160.
   * Following are the supported set of filters:
   *
   * *  **Attribute filtering**:
   *    For example: `display_name = "test"`.
   *    Supported fields include: `name`, `display_name`, `state`,
   *    `schema_title`, `create_time`, and `update_time`.
   *    Time fields, such as `create_time` and `update_time`, require values
   *    specified in RFC-3339 format.
   *    For example: `create_time = "2020-11-19T11:30:00-04:00"`.
   * *  **Metadata field**:
   *    To filter on metadata fields use traversal operation as follows:
   *    `metadata.<field_name>.<type_value>`
   *    For example: `metadata.field_1.number_value = 10.0`
   *    In case the field name contains special characters (such as colon), one
   *    can embed it inside double quote.
   *    For example: `metadata."field:1".number_value = 10.0`
   * *  **Context based filtering**:
   *    To filter Executions based on the contexts to which they belong use
   *    the function operator with the full resource name:
   *    `in_context(<context-name>)`.
   *    For example:
   *    `in_context("projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context-id>")`
   *
   * Each of the above supported filters can be combined together using
   * logical operators (`AND` & `OR`). Maximum nested expression depth allowed
   * is 5.
   *
   * For example: `display_name = "test" AND metadata.field1.bool_value = true`.
   */
  filter: string;
  /**
   * How the list of messages is ordered. Specify the values to order by and an
   * ordering operation. The default sorting order is ascending. To specify
   * descending order for a field, users append a " desc" suffix; for example:
   * "foo desc, bar".
   * Subfields are specified with a `.` character, such as foo.bar.
   * see https://google.aip.dev/132#ordering for more details.
   */
  orderBy: string;
}

/**
 * Response message for
 * [MetadataService.ListExecutions][google.cloud.aiplatform.v1.MetadataService.ListExecutions].
 */
export interface ListExecutionsResponse {
  /** The Executions retrieved from the MetadataStore. */
  executions: Execution[];
  /**
   * A token, which can be sent as
   * [ListExecutionsRequest.page_token][google.cloud.aiplatform.v1.ListExecutionsRequest.page_token]
   * to retrieve the next page.
   * If this field is not populated, there are no subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [MetadataService.UpdateExecution][google.cloud.aiplatform.v1.MetadataService.UpdateExecution].
 */
export interface UpdateExecutionRequest {
  /**
   * Required. The Execution containing updates.
   * The Execution's [Execution.name][google.cloud.aiplatform.v1.Execution.name]
   * field is used to identify the Execution to be updated. Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
   */
  execution:
    | Execution
    | undefined;
  /** Optional. A FieldMask indicating which fields should be updated. */
  updateMask:
    | string[]
    | undefined;
  /**
   * If set to true, and the [Execution][google.cloud.aiplatform.v1.Execution]
   * is not found, a new [Execution][google.cloud.aiplatform.v1.Execution] is
   * created.
   */
  allowMissing: boolean;
}

/**
 * Request message for
 * [MetadataService.DeleteExecution][google.cloud.aiplatform.v1.MetadataService.DeleteExecution].
 */
export interface DeleteExecutionRequest {
  /**
   * Required. The resource name of the Execution to delete.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
   */
  name: string;
  /**
   * Optional. The etag of the Execution to delete.
   * If this is provided, it must match the server's etag. Otherwise, the
   * request will fail with a FAILED_PRECONDITION.
   */
  etag: string;
}

/**
 * Request message for
 * [MetadataService.PurgeExecutions][google.cloud.aiplatform.v1.MetadataService.PurgeExecutions].
 */
export interface PurgeExecutionsRequest {
  /**
   * Required. The metadata store to purge Executions from.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   */
  parent: string;
  /**
   * Required. A required filter matching the Executions to be purged.
   * E.g., `update_time <= 2020-11-19T11:30:00-04:00`.
   */
  filter: string;
  /**
   * Optional. Flag to indicate to actually perform the purge.
   * If `force` is set to false, the method will return a sample of
   * Execution names that would be deleted.
   */
  force: boolean;
}

/**
 * Response message for
 * [MetadataService.PurgeExecutions][google.cloud.aiplatform.v1.MetadataService.PurgeExecutions].
 */
export interface PurgeExecutionsResponse {
  /**
   * The number of Executions that this request deleted (or, if `force` is
   * false, the number of Executions that will be deleted). This can be an
   * estimate.
   */
  purgeCount: Long;
  /**
   * A sample of the Execution names that will be deleted.
   * Only populated if `force` is set to false. The maximum number of samples is
   * 100 (it is possible to return fewer).
   */
  purgeSample: string[];
}

/**
 * Details of operations that perform
 * [MetadataService.PurgeExecutions][google.cloud.aiplatform.v1.MetadataService.PurgeExecutions].
 */
export interface PurgeExecutionsMetadata {
  /** Operation metadata for purging Executions. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [MetadataService.AddExecutionEvents][google.cloud.aiplatform.v1.MetadataService.AddExecutionEvents].
 */
export interface AddExecutionEventsRequest {
  /**
   * Required. The resource name of the Execution that the Events connect
   * Artifacts with.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
   */
  execution: string;
  /** The Events to create and add. */
  events: Event[];
}

/**
 * Response message for
 * [MetadataService.AddExecutionEvents][google.cloud.aiplatform.v1.MetadataService.AddExecutionEvents].
 */
export interface AddExecutionEventsResponse {
}

/**
 * Request message for
 * [MetadataService.QueryExecutionInputsAndOutputs][google.cloud.aiplatform.v1.MetadataService.QueryExecutionInputsAndOutputs].
 */
export interface QueryExecutionInputsAndOutputsRequest {
  /**
   * Required. The resource name of the Execution whose input and output
   * Artifacts should be retrieved as a LineageSubgraph. Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
   */
  execution: string;
}

/**
 * Request message for
 * [MetadataService.CreateMetadataSchema][google.cloud.aiplatform.v1.MetadataService.CreateMetadataSchema].
 */
export interface CreateMetadataSchemaRequest {
  /**
   * Required. The resource name of the MetadataStore where the MetadataSchema
   * should be created. Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   */
  parent: string;
  /** Required. The MetadataSchema to create. */
  metadataSchema:
    | MetadataSchema
    | undefined;
  /**
   * The {metadata_schema} portion of the resource name with the format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/metadataSchemas/{metadataschema}`
   * If not provided, the MetadataStore's ID will be a UUID generated by the
   * service.
   * Must be 4-128 characters in length. Valid characters are `/[a-z][0-9]-/`.
   * Must be unique across all MetadataSchemas in the parent Location.
   * (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED
   * if the caller can't view the preexisting MetadataSchema.)
   */
  metadataSchemaId: string;
}

/**
 * Request message for
 * [MetadataService.GetMetadataSchema][google.cloud.aiplatform.v1.MetadataService.GetMetadataSchema].
 */
export interface GetMetadataSchemaRequest {
  /**
   * Required. The resource name of the MetadataSchema to retrieve.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/metadataSchemas/{metadataschema}`
   */
  name: string;
}

/**
 * Request message for
 * [MetadataService.ListMetadataSchemas][google.cloud.aiplatform.v1.MetadataService.ListMetadataSchemas].
 */
export interface ListMetadataSchemasRequest {
  /**
   * Required. The MetadataStore whose MetadataSchemas should be listed.
   * Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   */
  parent: string;
  /**
   * The maximum number of MetadataSchemas to return. The service may return
   * fewer.
   * Must be in range 1-1000, inclusive. Defaults to 100.
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * [MetadataService.ListMetadataSchemas][google.cloud.aiplatform.v1.MetadataService.ListMetadataSchemas]
   * call. Provide this to retrieve the next page.
   *
   * When paginating, all other provided parameters must match the call that
   * provided the page token. (Otherwise the request will fail with
   * INVALID_ARGUMENT error.)
   */
  pageToken: string;
  /** A query to filter available MetadataSchemas for matching results. */
  filter: string;
}

/**
 * Response message for
 * [MetadataService.ListMetadataSchemas][google.cloud.aiplatform.v1.MetadataService.ListMetadataSchemas].
 */
export interface ListMetadataSchemasResponse {
  /** The MetadataSchemas found for the MetadataStore. */
  metadataSchemas: MetadataSchema[];
  /**
   * A token, which can be sent as
   * [ListMetadataSchemasRequest.page_token][google.cloud.aiplatform.v1.ListMetadataSchemasRequest.page_token]
   * to retrieve the next page. If this field is not populated, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [MetadataService.QueryArtifactLineageSubgraph][google.cloud.aiplatform.v1.MetadataService.QueryArtifactLineageSubgraph].
 */
export interface QueryArtifactLineageSubgraphRequest {
  /**
   * Required. The resource name of the Artifact whose Lineage needs to be
   * retrieved as a LineageSubgraph. Format:
   * `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`
   *
   * The request may error with FAILED_PRECONDITION if the number of Artifacts,
   * the number of Executions, or the number of Events that would be returned
   * for the Context exceeds 1000.
   */
  artifact: string;
  /**
   * Specifies the size of the lineage graph in terms of number of hops from the
   * specified artifact.
   * Negative Value: INVALID_ARGUMENT error is returned
   * 0: Only input artifact is returned.
   * No value: Transitive closure is performed to return the complete graph.
   */
  maxHops: number;
  /**
   * Filter specifying the boolean condition for the Artifacts to satisfy in
   * order to be part of the Lineage Subgraph.
   * The syntax to define filter query is based on https://google.aip.dev/160.
   * The supported set of filters include the following:
   *
   * *  **Attribute filtering**:
   *    For example: `display_name = "test"`
   *    Supported fields include: `name`, `display_name`, `uri`, `state`,
   *    `schema_title`, `create_time`, and `update_time`.
   *    Time fields, such as `create_time` and `update_time`, require values
   *    specified in RFC-3339 format.
   *    For example: `create_time = "2020-11-19T11:30:00-04:00"`
   * *  **Metadata field**:
   *    To filter on metadata fields use traversal operation as follows:
   *    `metadata.<field_name>.<type_value>`.
   *    For example: `metadata.field_1.number_value = 10.0`
   *    In case the field name contains special characters (such as colon), one
   *    can embed it inside double quote.
   *    For example: `metadata."field:1".number_value = 10.0`
   *
   * Each of the above supported filter types can be combined together using
   * logical operators (`AND` & `OR`). Maximum nested expression depth allowed
   * is 5.
   *
   * For example: `display_name = "test" AND metadata.field1.bool_value = true`.
   */
  filter: string;
}

function createBaseCreateMetadataStoreRequest(): CreateMetadataStoreRequest {
  return { parent: "", metadataStore: undefined, metadataStoreId: "" };
}

export const CreateMetadataStoreRequest: MessageFns<CreateMetadataStoreRequest> = {
  encode(message: CreateMetadataStoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.metadataStore !== undefined) {
      MetadataStore.encode(message.metadataStore, writer.uint32(18).fork()).join();
    }
    if (message.metadataStoreId !== "") {
      writer.uint32(26).string(message.metadataStoreId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMetadataStoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMetadataStoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadataStore = MetadataStore.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadataStoreId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMetadataStoreRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      metadataStore: isSet(object.metadataStore) ? MetadataStore.fromJSON(object.metadataStore) : undefined,
      metadataStoreId: isSet(object.metadataStoreId) ? globalThis.String(object.metadataStoreId) : "",
    };
  },

  toJSON(message: CreateMetadataStoreRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.metadataStore !== undefined) {
      obj.metadataStore = MetadataStore.toJSON(message.metadataStore);
    }
    if (message.metadataStoreId !== "") {
      obj.metadataStoreId = message.metadataStoreId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateMetadataStoreRequest>): CreateMetadataStoreRequest {
    return CreateMetadataStoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateMetadataStoreRequest>): CreateMetadataStoreRequest {
    const message = createBaseCreateMetadataStoreRequest();
    message.parent = object.parent ?? "";
    message.metadataStore = (object.metadataStore !== undefined && object.metadataStore !== null)
      ? MetadataStore.fromPartial(object.metadataStore)
      : undefined;
    message.metadataStoreId = object.metadataStoreId ?? "";
    return message;
  },
};

function createBaseCreateMetadataStoreOperationMetadata(): CreateMetadataStoreOperationMetadata {
  return { genericMetadata: undefined };
}

export const CreateMetadataStoreOperationMetadata: MessageFns<CreateMetadataStoreOperationMetadata> = {
  encode(message: CreateMetadataStoreOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMetadataStoreOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMetadataStoreOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMetadataStoreOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: CreateMetadataStoreOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateMetadataStoreOperationMetadata>): CreateMetadataStoreOperationMetadata {
    return CreateMetadataStoreOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateMetadataStoreOperationMetadata>): CreateMetadataStoreOperationMetadata {
    const message = createBaseCreateMetadataStoreOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseGetMetadataStoreRequest(): GetMetadataStoreRequest {
  return { name: "" };
}

export const GetMetadataStoreRequest: MessageFns<GetMetadataStoreRequest> = {
  encode(message: GetMetadataStoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMetadataStoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMetadataStoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMetadataStoreRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetMetadataStoreRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetMetadataStoreRequest>): GetMetadataStoreRequest {
    return GetMetadataStoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMetadataStoreRequest>): GetMetadataStoreRequest {
    const message = createBaseGetMetadataStoreRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListMetadataStoresRequest(): ListMetadataStoresRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListMetadataStoresRequest: MessageFns<ListMetadataStoresRequest> = {
  encode(message: ListMetadataStoresRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMetadataStoresRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMetadataStoresRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMetadataStoresRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListMetadataStoresRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMetadataStoresRequest>): ListMetadataStoresRequest {
    return ListMetadataStoresRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMetadataStoresRequest>): ListMetadataStoresRequest {
    const message = createBaseListMetadataStoresRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListMetadataStoresResponse(): ListMetadataStoresResponse {
  return { metadataStores: [], nextPageToken: "" };
}

export const ListMetadataStoresResponse: MessageFns<ListMetadataStoresResponse> = {
  encode(message: ListMetadataStoresResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.metadataStores) {
      MetadataStore.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMetadataStoresResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMetadataStoresResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadataStores.push(MetadataStore.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMetadataStoresResponse {
    return {
      metadataStores: globalThis.Array.isArray(object?.metadataStores)
        ? object.metadataStores.map((e: any) => MetadataStore.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListMetadataStoresResponse): unknown {
    const obj: any = {};
    if (message.metadataStores?.length) {
      obj.metadataStores = message.metadataStores.map((e) => MetadataStore.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMetadataStoresResponse>): ListMetadataStoresResponse {
    return ListMetadataStoresResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMetadataStoresResponse>): ListMetadataStoresResponse {
    const message = createBaseListMetadataStoresResponse();
    message.metadataStores = object.metadataStores?.map((e) => MetadataStore.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteMetadataStoreRequest(): DeleteMetadataStoreRequest {
  return { name: "", force: false };
}

export const DeleteMetadataStoreRequest: MessageFns<DeleteMetadataStoreRequest> = {
  encode(message: DeleteMetadataStoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMetadataStoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMetadataStoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMetadataStoreRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteMetadataStoreRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteMetadataStoreRequest>): DeleteMetadataStoreRequest {
    return DeleteMetadataStoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteMetadataStoreRequest>): DeleteMetadataStoreRequest {
    const message = createBaseDeleteMetadataStoreRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseDeleteMetadataStoreOperationMetadata(): DeleteMetadataStoreOperationMetadata {
  return { genericMetadata: undefined };
}

export const DeleteMetadataStoreOperationMetadata: MessageFns<DeleteMetadataStoreOperationMetadata> = {
  encode(message: DeleteMetadataStoreOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMetadataStoreOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMetadataStoreOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMetadataStoreOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: DeleteMetadataStoreOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteMetadataStoreOperationMetadata>): DeleteMetadataStoreOperationMetadata {
    return DeleteMetadataStoreOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteMetadataStoreOperationMetadata>): DeleteMetadataStoreOperationMetadata {
    const message = createBaseDeleteMetadataStoreOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseCreateArtifactRequest(): CreateArtifactRequest {
  return { parent: "", artifact: undefined, artifactId: "" };
}

export const CreateArtifactRequest: MessageFns<CreateArtifactRequest> = {
  encode(message: CreateArtifactRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.artifact !== undefined) {
      Artifact.encode(message.artifact, writer.uint32(18).fork()).join();
    }
    if (message.artifactId !== "") {
      writer.uint32(26).string(message.artifactId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateArtifactRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateArtifactRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.artifact = Artifact.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.artifactId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateArtifactRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      artifact: isSet(object.artifact) ? Artifact.fromJSON(object.artifact) : undefined,
      artifactId: isSet(object.artifactId) ? globalThis.String(object.artifactId) : "",
    };
  },

  toJSON(message: CreateArtifactRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.artifact !== undefined) {
      obj.artifact = Artifact.toJSON(message.artifact);
    }
    if (message.artifactId !== "") {
      obj.artifactId = message.artifactId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateArtifactRequest>): CreateArtifactRequest {
    return CreateArtifactRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateArtifactRequest>): CreateArtifactRequest {
    const message = createBaseCreateArtifactRequest();
    message.parent = object.parent ?? "";
    message.artifact = (object.artifact !== undefined && object.artifact !== null)
      ? Artifact.fromPartial(object.artifact)
      : undefined;
    message.artifactId = object.artifactId ?? "";
    return message;
  },
};

function createBaseGetArtifactRequest(): GetArtifactRequest {
  return { name: "" };
}

export const GetArtifactRequest: MessageFns<GetArtifactRequest> = {
  encode(message: GetArtifactRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetArtifactRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetArtifactRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetArtifactRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetArtifactRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetArtifactRequest>): GetArtifactRequest {
    return GetArtifactRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetArtifactRequest>): GetArtifactRequest {
    const message = createBaseGetArtifactRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListArtifactsRequest(): ListArtifactsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListArtifactsRequest: MessageFns<ListArtifactsRequest> = {
  encode(message: ListArtifactsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListArtifactsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListArtifactsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListArtifactsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListArtifactsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListArtifactsRequest>): ListArtifactsRequest {
    return ListArtifactsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListArtifactsRequest>): ListArtifactsRequest {
    const message = createBaseListArtifactsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListArtifactsResponse(): ListArtifactsResponse {
  return { artifacts: [], nextPageToken: "" };
}

export const ListArtifactsResponse: MessageFns<ListArtifactsResponse> = {
  encode(message: ListArtifactsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.artifacts) {
      Artifact.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListArtifactsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListArtifactsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.artifacts.push(Artifact.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListArtifactsResponse {
    return {
      artifacts: globalThis.Array.isArray(object?.artifacts)
        ? object.artifacts.map((e: any) => Artifact.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListArtifactsResponse): unknown {
    const obj: any = {};
    if (message.artifacts?.length) {
      obj.artifacts = message.artifacts.map((e) => Artifact.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListArtifactsResponse>): ListArtifactsResponse {
    return ListArtifactsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListArtifactsResponse>): ListArtifactsResponse {
    const message = createBaseListArtifactsResponse();
    message.artifacts = object.artifacts?.map((e) => Artifact.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateArtifactRequest(): UpdateArtifactRequest {
  return { artifact: undefined, updateMask: undefined, allowMissing: false };
}

export const UpdateArtifactRequest: MessageFns<UpdateArtifactRequest> = {
  encode(message: UpdateArtifactRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.artifact !== undefined) {
      Artifact.encode(message.artifact, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateArtifactRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateArtifactRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.artifact = Artifact.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateArtifactRequest {
    return {
      artifact: isSet(object.artifact) ? Artifact.fromJSON(object.artifact) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: UpdateArtifactRequest): unknown {
    const obj: any = {};
    if (message.artifact !== undefined) {
      obj.artifact = Artifact.toJSON(message.artifact);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateArtifactRequest>): UpdateArtifactRequest {
    return UpdateArtifactRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateArtifactRequest>): UpdateArtifactRequest {
    const message = createBaseUpdateArtifactRequest();
    message.artifact = (object.artifact !== undefined && object.artifact !== null)
      ? Artifact.fromPartial(object.artifact)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseDeleteArtifactRequest(): DeleteArtifactRequest {
  return { name: "", etag: "" };
}

export const DeleteArtifactRequest: MessageFns<DeleteArtifactRequest> = {
  encode(message: DeleteArtifactRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteArtifactRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteArtifactRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteArtifactRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteArtifactRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteArtifactRequest>): DeleteArtifactRequest {
    return DeleteArtifactRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteArtifactRequest>): DeleteArtifactRequest {
    const message = createBaseDeleteArtifactRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBasePurgeArtifactsRequest(): PurgeArtifactsRequest {
  return { parent: "", filter: "", force: false };
}

export const PurgeArtifactsRequest: MessageFns<PurgeArtifactsRequest> = {
  encode(message: PurgeArtifactsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeArtifactsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeArtifactsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurgeArtifactsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: PurgeArtifactsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<PurgeArtifactsRequest>): PurgeArtifactsRequest {
    return PurgeArtifactsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PurgeArtifactsRequest>): PurgeArtifactsRequest {
    const message = createBasePurgeArtifactsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBasePurgeArtifactsResponse(): PurgeArtifactsResponse {
  return { purgeCount: Long.ZERO, purgeSample: [] };
}

export const PurgeArtifactsResponse: MessageFns<PurgeArtifactsResponse> = {
  encode(message: PurgeArtifactsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.purgeCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.purgeCount.toString());
    }
    for (const v of message.purgeSample) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeArtifactsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeArtifactsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.purgeCount = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.purgeSample.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurgeArtifactsResponse {
    return {
      purgeCount: isSet(object.purgeCount) ? Long.fromValue(object.purgeCount) : Long.ZERO,
      purgeSample: globalThis.Array.isArray(object?.purgeSample)
        ? object.purgeSample.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: PurgeArtifactsResponse): unknown {
    const obj: any = {};
    if (!message.purgeCount.equals(Long.ZERO)) {
      obj.purgeCount = (message.purgeCount || Long.ZERO).toString();
    }
    if (message.purgeSample?.length) {
      obj.purgeSample = message.purgeSample;
    }
    return obj;
  },

  create(base?: DeepPartial<PurgeArtifactsResponse>): PurgeArtifactsResponse {
    return PurgeArtifactsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PurgeArtifactsResponse>): PurgeArtifactsResponse {
    const message = createBasePurgeArtifactsResponse();
    message.purgeCount = (object.purgeCount !== undefined && object.purgeCount !== null)
      ? Long.fromValue(object.purgeCount)
      : Long.ZERO;
    message.purgeSample = object.purgeSample?.map((e) => e) || [];
    return message;
  },
};

function createBasePurgeArtifactsMetadata(): PurgeArtifactsMetadata {
  return { genericMetadata: undefined };
}

export const PurgeArtifactsMetadata: MessageFns<PurgeArtifactsMetadata> = {
  encode(message: PurgeArtifactsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeArtifactsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeArtifactsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurgeArtifactsMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: PurgeArtifactsMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<PurgeArtifactsMetadata>): PurgeArtifactsMetadata {
    return PurgeArtifactsMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PurgeArtifactsMetadata>): PurgeArtifactsMetadata {
    const message = createBasePurgeArtifactsMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseCreateContextRequest(): CreateContextRequest {
  return { parent: "", context: undefined, contextId: "" };
}

export const CreateContextRequest: MessageFns<CreateContextRequest> = {
  encode(message: CreateContextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.context !== undefined) {
      Context.encode(message.context, writer.uint32(18).fork()).join();
    }
    if (message.contextId !== "") {
      writer.uint32(26).string(message.contextId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateContextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateContextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.context = Context.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.contextId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateContextRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      context: isSet(object.context) ? Context.fromJSON(object.context) : undefined,
      contextId: isSet(object.contextId) ? globalThis.String(object.contextId) : "",
    };
  },

  toJSON(message: CreateContextRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.context !== undefined) {
      obj.context = Context.toJSON(message.context);
    }
    if (message.contextId !== "") {
      obj.contextId = message.contextId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateContextRequest>): CreateContextRequest {
    return CreateContextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateContextRequest>): CreateContextRequest {
    const message = createBaseCreateContextRequest();
    message.parent = object.parent ?? "";
    message.context = (object.context !== undefined && object.context !== null)
      ? Context.fromPartial(object.context)
      : undefined;
    message.contextId = object.contextId ?? "";
    return message;
  },
};

function createBaseGetContextRequest(): GetContextRequest {
  return { name: "" };
}

export const GetContextRequest: MessageFns<GetContextRequest> = {
  encode(message: GetContextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetContextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetContextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetContextRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetContextRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetContextRequest>): GetContextRequest {
    return GetContextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetContextRequest>): GetContextRequest {
    const message = createBaseGetContextRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListContextsRequest(): ListContextsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListContextsRequest: MessageFns<ListContextsRequest> = {
  encode(message: ListContextsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListContextsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListContextsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListContextsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListContextsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListContextsRequest>): ListContextsRequest {
    return ListContextsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListContextsRequest>): ListContextsRequest {
    const message = createBaseListContextsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListContextsResponse(): ListContextsResponse {
  return { contexts: [], nextPageToken: "" };
}

export const ListContextsResponse: MessageFns<ListContextsResponse> = {
  encode(message: ListContextsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.contexts) {
      Context.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListContextsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListContextsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contexts.push(Context.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListContextsResponse {
    return {
      contexts: globalThis.Array.isArray(object?.contexts) ? object.contexts.map((e: any) => Context.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListContextsResponse): unknown {
    const obj: any = {};
    if (message.contexts?.length) {
      obj.contexts = message.contexts.map((e) => Context.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListContextsResponse>): ListContextsResponse {
    return ListContextsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListContextsResponse>): ListContextsResponse {
    const message = createBaseListContextsResponse();
    message.contexts = object.contexts?.map((e) => Context.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateContextRequest(): UpdateContextRequest {
  return { context: undefined, updateMask: undefined, allowMissing: false };
}

export const UpdateContextRequest: MessageFns<UpdateContextRequest> = {
  encode(message: UpdateContextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      Context.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateContextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateContextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = Context.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateContextRequest {
    return {
      context: isSet(object.context) ? Context.fromJSON(object.context) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: UpdateContextRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = Context.toJSON(message.context);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateContextRequest>): UpdateContextRequest {
    return UpdateContextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateContextRequest>): UpdateContextRequest {
    const message = createBaseUpdateContextRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? Context.fromPartial(object.context)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseDeleteContextRequest(): DeleteContextRequest {
  return { name: "", force: false, etag: "" };
}

export const DeleteContextRequest: MessageFns<DeleteContextRequest> = {
  encode(message: DeleteContextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    if (message.etag !== "") {
      writer.uint32(26).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteContextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteContextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteContextRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteContextRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteContextRequest>): DeleteContextRequest {
    return DeleteContextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteContextRequest>): DeleteContextRequest {
    const message = createBaseDeleteContextRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBasePurgeContextsRequest(): PurgeContextsRequest {
  return { parent: "", filter: "", force: false };
}

export const PurgeContextsRequest: MessageFns<PurgeContextsRequest> = {
  encode(message: PurgeContextsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeContextsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeContextsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurgeContextsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: PurgeContextsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<PurgeContextsRequest>): PurgeContextsRequest {
    return PurgeContextsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PurgeContextsRequest>): PurgeContextsRequest {
    const message = createBasePurgeContextsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBasePurgeContextsResponse(): PurgeContextsResponse {
  return { purgeCount: Long.ZERO, purgeSample: [] };
}

export const PurgeContextsResponse: MessageFns<PurgeContextsResponse> = {
  encode(message: PurgeContextsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.purgeCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.purgeCount.toString());
    }
    for (const v of message.purgeSample) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeContextsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeContextsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.purgeCount = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.purgeSample.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurgeContextsResponse {
    return {
      purgeCount: isSet(object.purgeCount) ? Long.fromValue(object.purgeCount) : Long.ZERO,
      purgeSample: globalThis.Array.isArray(object?.purgeSample)
        ? object.purgeSample.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: PurgeContextsResponse): unknown {
    const obj: any = {};
    if (!message.purgeCount.equals(Long.ZERO)) {
      obj.purgeCount = (message.purgeCount || Long.ZERO).toString();
    }
    if (message.purgeSample?.length) {
      obj.purgeSample = message.purgeSample;
    }
    return obj;
  },

  create(base?: DeepPartial<PurgeContextsResponse>): PurgeContextsResponse {
    return PurgeContextsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PurgeContextsResponse>): PurgeContextsResponse {
    const message = createBasePurgeContextsResponse();
    message.purgeCount = (object.purgeCount !== undefined && object.purgeCount !== null)
      ? Long.fromValue(object.purgeCount)
      : Long.ZERO;
    message.purgeSample = object.purgeSample?.map((e) => e) || [];
    return message;
  },
};

function createBasePurgeContextsMetadata(): PurgeContextsMetadata {
  return { genericMetadata: undefined };
}

export const PurgeContextsMetadata: MessageFns<PurgeContextsMetadata> = {
  encode(message: PurgeContextsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeContextsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeContextsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurgeContextsMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: PurgeContextsMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<PurgeContextsMetadata>): PurgeContextsMetadata {
    return PurgeContextsMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PurgeContextsMetadata>): PurgeContextsMetadata {
    const message = createBasePurgeContextsMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseAddContextArtifactsAndExecutionsRequest(): AddContextArtifactsAndExecutionsRequest {
  return { context: "", artifacts: [], executions: [] };
}

export const AddContextArtifactsAndExecutionsRequest: MessageFns<AddContextArtifactsAndExecutionsRequest> = {
  encode(message: AddContextArtifactsAndExecutionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== "") {
      writer.uint32(10).string(message.context);
    }
    for (const v of message.artifacts) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.executions) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddContextArtifactsAndExecutionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddContextArtifactsAndExecutionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.artifacts.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.executions.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddContextArtifactsAndExecutionsRequest {
    return {
      context: isSet(object.context) ? globalThis.String(object.context) : "",
      artifacts: globalThis.Array.isArray(object?.artifacts)
        ? object.artifacts.map((e: any) => globalThis.String(e))
        : [],
      executions: globalThis.Array.isArray(object?.executions)
        ? object.executions.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: AddContextArtifactsAndExecutionsRequest): unknown {
    const obj: any = {};
    if (message.context !== "") {
      obj.context = message.context;
    }
    if (message.artifacts?.length) {
      obj.artifacts = message.artifacts;
    }
    if (message.executions?.length) {
      obj.executions = message.executions;
    }
    return obj;
  },

  create(base?: DeepPartial<AddContextArtifactsAndExecutionsRequest>): AddContextArtifactsAndExecutionsRequest {
    return AddContextArtifactsAndExecutionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddContextArtifactsAndExecutionsRequest>): AddContextArtifactsAndExecutionsRequest {
    const message = createBaseAddContextArtifactsAndExecutionsRequest();
    message.context = object.context ?? "";
    message.artifacts = object.artifacts?.map((e) => e) || [];
    message.executions = object.executions?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddContextArtifactsAndExecutionsResponse(): AddContextArtifactsAndExecutionsResponse {
  return {};
}

export const AddContextArtifactsAndExecutionsResponse: MessageFns<AddContextArtifactsAndExecutionsResponse> = {
  encode(_: AddContextArtifactsAndExecutionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddContextArtifactsAndExecutionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddContextArtifactsAndExecutionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AddContextArtifactsAndExecutionsResponse {
    return {};
  },

  toJSON(_: AddContextArtifactsAndExecutionsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AddContextArtifactsAndExecutionsResponse>): AddContextArtifactsAndExecutionsResponse {
    return AddContextArtifactsAndExecutionsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AddContextArtifactsAndExecutionsResponse>): AddContextArtifactsAndExecutionsResponse {
    const message = createBaseAddContextArtifactsAndExecutionsResponse();
    return message;
  },
};

function createBaseAddContextChildrenRequest(): AddContextChildrenRequest {
  return { context: "", childContexts: [] };
}

export const AddContextChildrenRequest: MessageFns<AddContextChildrenRequest> = {
  encode(message: AddContextChildrenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== "") {
      writer.uint32(10).string(message.context);
    }
    for (const v of message.childContexts) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddContextChildrenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddContextChildrenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.childContexts.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddContextChildrenRequest {
    return {
      context: isSet(object.context) ? globalThis.String(object.context) : "",
      childContexts: globalThis.Array.isArray(object?.childContexts)
        ? object.childContexts.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: AddContextChildrenRequest): unknown {
    const obj: any = {};
    if (message.context !== "") {
      obj.context = message.context;
    }
    if (message.childContexts?.length) {
      obj.childContexts = message.childContexts;
    }
    return obj;
  },

  create(base?: DeepPartial<AddContextChildrenRequest>): AddContextChildrenRequest {
    return AddContextChildrenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddContextChildrenRequest>): AddContextChildrenRequest {
    const message = createBaseAddContextChildrenRequest();
    message.context = object.context ?? "";
    message.childContexts = object.childContexts?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddContextChildrenResponse(): AddContextChildrenResponse {
  return {};
}

export const AddContextChildrenResponse: MessageFns<AddContextChildrenResponse> = {
  encode(_: AddContextChildrenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddContextChildrenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddContextChildrenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AddContextChildrenResponse {
    return {};
  },

  toJSON(_: AddContextChildrenResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AddContextChildrenResponse>): AddContextChildrenResponse {
    return AddContextChildrenResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AddContextChildrenResponse>): AddContextChildrenResponse {
    const message = createBaseAddContextChildrenResponse();
    return message;
  },
};

function createBaseRemoveContextChildrenRequest(): RemoveContextChildrenRequest {
  return { context: "", childContexts: [] };
}

export const RemoveContextChildrenRequest: MessageFns<RemoveContextChildrenRequest> = {
  encode(message: RemoveContextChildrenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== "") {
      writer.uint32(10).string(message.context);
    }
    for (const v of message.childContexts) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveContextChildrenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveContextChildrenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.childContexts.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveContextChildrenRequest {
    return {
      context: isSet(object.context) ? globalThis.String(object.context) : "",
      childContexts: globalThis.Array.isArray(object?.childContexts)
        ? object.childContexts.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: RemoveContextChildrenRequest): unknown {
    const obj: any = {};
    if (message.context !== "") {
      obj.context = message.context;
    }
    if (message.childContexts?.length) {
      obj.childContexts = message.childContexts;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveContextChildrenRequest>): RemoveContextChildrenRequest {
    return RemoveContextChildrenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveContextChildrenRequest>): RemoveContextChildrenRequest {
    const message = createBaseRemoveContextChildrenRequest();
    message.context = object.context ?? "";
    message.childContexts = object.childContexts?.map((e) => e) || [];
    return message;
  },
};

function createBaseRemoveContextChildrenResponse(): RemoveContextChildrenResponse {
  return {};
}

export const RemoveContextChildrenResponse: MessageFns<RemoveContextChildrenResponse> = {
  encode(_: RemoveContextChildrenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveContextChildrenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveContextChildrenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveContextChildrenResponse {
    return {};
  },

  toJSON(_: RemoveContextChildrenResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveContextChildrenResponse>): RemoveContextChildrenResponse {
    return RemoveContextChildrenResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveContextChildrenResponse>): RemoveContextChildrenResponse {
    const message = createBaseRemoveContextChildrenResponse();
    return message;
  },
};

function createBaseQueryContextLineageSubgraphRequest(): QueryContextLineageSubgraphRequest {
  return { context: "" };
}

export const QueryContextLineageSubgraphRequest: MessageFns<QueryContextLineageSubgraphRequest> = {
  encode(message: QueryContextLineageSubgraphRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== "") {
      writer.uint32(10).string(message.context);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryContextLineageSubgraphRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryContextLineageSubgraphRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryContextLineageSubgraphRequest {
    return { context: isSet(object.context) ? globalThis.String(object.context) : "" };
  },

  toJSON(message: QueryContextLineageSubgraphRequest): unknown {
    const obj: any = {};
    if (message.context !== "") {
      obj.context = message.context;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryContextLineageSubgraphRequest>): QueryContextLineageSubgraphRequest {
    return QueryContextLineageSubgraphRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryContextLineageSubgraphRequest>): QueryContextLineageSubgraphRequest {
    const message = createBaseQueryContextLineageSubgraphRequest();
    message.context = object.context ?? "";
    return message;
  },
};

function createBaseCreateExecutionRequest(): CreateExecutionRequest {
  return { parent: "", execution: undefined, executionId: "" };
}

export const CreateExecutionRequest: MessageFns<CreateExecutionRequest> = {
  encode(message: CreateExecutionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.execution !== undefined) {
      Execution.encode(message.execution, writer.uint32(18).fork()).join();
    }
    if (message.executionId !== "") {
      writer.uint32(26).string(message.executionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateExecutionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateExecutionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.execution = Execution.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.executionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateExecutionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      execution: isSet(object.execution) ? Execution.fromJSON(object.execution) : undefined,
      executionId: isSet(object.executionId) ? globalThis.String(object.executionId) : "",
    };
  },

  toJSON(message: CreateExecutionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.execution !== undefined) {
      obj.execution = Execution.toJSON(message.execution);
    }
    if (message.executionId !== "") {
      obj.executionId = message.executionId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateExecutionRequest>): CreateExecutionRequest {
    return CreateExecutionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateExecutionRequest>): CreateExecutionRequest {
    const message = createBaseCreateExecutionRequest();
    message.parent = object.parent ?? "";
    message.execution = (object.execution !== undefined && object.execution !== null)
      ? Execution.fromPartial(object.execution)
      : undefined;
    message.executionId = object.executionId ?? "";
    return message;
  },
};

function createBaseGetExecutionRequest(): GetExecutionRequest {
  return { name: "" };
}

export const GetExecutionRequest: MessageFns<GetExecutionRequest> = {
  encode(message: GetExecutionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetExecutionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetExecutionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetExecutionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetExecutionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetExecutionRequest>): GetExecutionRequest {
    return GetExecutionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetExecutionRequest>): GetExecutionRequest {
    const message = createBaseGetExecutionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListExecutionsRequest(): ListExecutionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListExecutionsRequest: MessageFns<ListExecutionsRequest> = {
  encode(message: ListExecutionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExecutionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExecutionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExecutionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListExecutionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExecutionsRequest>): ListExecutionsRequest {
    return ListExecutionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExecutionsRequest>): ListExecutionsRequest {
    const message = createBaseListExecutionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListExecutionsResponse(): ListExecutionsResponse {
  return { executions: [], nextPageToken: "" };
}

export const ListExecutionsResponse: MessageFns<ListExecutionsResponse> = {
  encode(message: ListExecutionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.executions) {
      Execution.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExecutionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExecutionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.executions.push(Execution.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExecutionsResponse {
    return {
      executions: globalThis.Array.isArray(object?.executions)
        ? object.executions.map((e: any) => Execution.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListExecutionsResponse): unknown {
    const obj: any = {};
    if (message.executions?.length) {
      obj.executions = message.executions.map((e) => Execution.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExecutionsResponse>): ListExecutionsResponse {
    return ListExecutionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExecutionsResponse>): ListExecutionsResponse {
    const message = createBaseListExecutionsResponse();
    message.executions = object.executions?.map((e) => Execution.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateExecutionRequest(): UpdateExecutionRequest {
  return { execution: undefined, updateMask: undefined, allowMissing: false };
}

export const UpdateExecutionRequest: MessageFns<UpdateExecutionRequest> = {
  encode(message: UpdateExecutionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.execution !== undefined) {
      Execution.encode(message.execution, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateExecutionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateExecutionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.execution = Execution.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateExecutionRequest {
    return {
      execution: isSet(object.execution) ? Execution.fromJSON(object.execution) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: UpdateExecutionRequest): unknown {
    const obj: any = {};
    if (message.execution !== undefined) {
      obj.execution = Execution.toJSON(message.execution);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateExecutionRequest>): UpdateExecutionRequest {
    return UpdateExecutionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateExecutionRequest>): UpdateExecutionRequest {
    const message = createBaseUpdateExecutionRequest();
    message.execution = (object.execution !== undefined && object.execution !== null)
      ? Execution.fromPartial(object.execution)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseDeleteExecutionRequest(): DeleteExecutionRequest {
  return { name: "", etag: "" };
}

export const DeleteExecutionRequest: MessageFns<DeleteExecutionRequest> = {
  encode(message: DeleteExecutionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteExecutionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteExecutionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteExecutionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteExecutionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteExecutionRequest>): DeleteExecutionRequest {
    return DeleteExecutionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteExecutionRequest>): DeleteExecutionRequest {
    const message = createBaseDeleteExecutionRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBasePurgeExecutionsRequest(): PurgeExecutionsRequest {
  return { parent: "", filter: "", force: false };
}

export const PurgeExecutionsRequest: MessageFns<PurgeExecutionsRequest> = {
  encode(message: PurgeExecutionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeExecutionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeExecutionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurgeExecutionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: PurgeExecutionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<PurgeExecutionsRequest>): PurgeExecutionsRequest {
    return PurgeExecutionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PurgeExecutionsRequest>): PurgeExecutionsRequest {
    const message = createBasePurgeExecutionsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBasePurgeExecutionsResponse(): PurgeExecutionsResponse {
  return { purgeCount: Long.ZERO, purgeSample: [] };
}

export const PurgeExecutionsResponse: MessageFns<PurgeExecutionsResponse> = {
  encode(message: PurgeExecutionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.purgeCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.purgeCount.toString());
    }
    for (const v of message.purgeSample) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeExecutionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeExecutionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.purgeCount = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.purgeSample.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurgeExecutionsResponse {
    return {
      purgeCount: isSet(object.purgeCount) ? Long.fromValue(object.purgeCount) : Long.ZERO,
      purgeSample: globalThis.Array.isArray(object?.purgeSample)
        ? object.purgeSample.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: PurgeExecutionsResponse): unknown {
    const obj: any = {};
    if (!message.purgeCount.equals(Long.ZERO)) {
      obj.purgeCount = (message.purgeCount || Long.ZERO).toString();
    }
    if (message.purgeSample?.length) {
      obj.purgeSample = message.purgeSample;
    }
    return obj;
  },

  create(base?: DeepPartial<PurgeExecutionsResponse>): PurgeExecutionsResponse {
    return PurgeExecutionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PurgeExecutionsResponse>): PurgeExecutionsResponse {
    const message = createBasePurgeExecutionsResponse();
    message.purgeCount = (object.purgeCount !== undefined && object.purgeCount !== null)
      ? Long.fromValue(object.purgeCount)
      : Long.ZERO;
    message.purgeSample = object.purgeSample?.map((e) => e) || [];
    return message;
  },
};

function createBasePurgeExecutionsMetadata(): PurgeExecutionsMetadata {
  return { genericMetadata: undefined };
}

export const PurgeExecutionsMetadata: MessageFns<PurgeExecutionsMetadata> = {
  encode(message: PurgeExecutionsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeExecutionsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeExecutionsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurgeExecutionsMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: PurgeExecutionsMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<PurgeExecutionsMetadata>): PurgeExecutionsMetadata {
    return PurgeExecutionsMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PurgeExecutionsMetadata>): PurgeExecutionsMetadata {
    const message = createBasePurgeExecutionsMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseAddExecutionEventsRequest(): AddExecutionEventsRequest {
  return { execution: "", events: [] };
}

export const AddExecutionEventsRequest: MessageFns<AddExecutionEventsRequest> = {
  encode(message: AddExecutionEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.execution !== "") {
      writer.uint32(10).string(message.execution);
    }
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddExecutionEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddExecutionEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.execution = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddExecutionEventsRequest {
    return {
      execution: isSet(object.execution) ? globalThis.String(object.execution) : "",
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [],
    };
  },

  toJSON(message: AddExecutionEventsRequest): unknown {
    const obj: any = {};
    if (message.execution !== "") {
      obj.execution = message.execution;
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AddExecutionEventsRequest>): AddExecutionEventsRequest {
    return AddExecutionEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddExecutionEventsRequest>): AddExecutionEventsRequest {
    const message = createBaseAddExecutionEventsRequest();
    message.execution = object.execution ?? "";
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddExecutionEventsResponse(): AddExecutionEventsResponse {
  return {};
}

export const AddExecutionEventsResponse: MessageFns<AddExecutionEventsResponse> = {
  encode(_: AddExecutionEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddExecutionEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddExecutionEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AddExecutionEventsResponse {
    return {};
  },

  toJSON(_: AddExecutionEventsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AddExecutionEventsResponse>): AddExecutionEventsResponse {
    return AddExecutionEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AddExecutionEventsResponse>): AddExecutionEventsResponse {
    const message = createBaseAddExecutionEventsResponse();
    return message;
  },
};

function createBaseQueryExecutionInputsAndOutputsRequest(): QueryExecutionInputsAndOutputsRequest {
  return { execution: "" };
}

export const QueryExecutionInputsAndOutputsRequest: MessageFns<QueryExecutionInputsAndOutputsRequest> = {
  encode(message: QueryExecutionInputsAndOutputsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.execution !== "") {
      writer.uint32(10).string(message.execution);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryExecutionInputsAndOutputsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryExecutionInputsAndOutputsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.execution = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryExecutionInputsAndOutputsRequest {
    return { execution: isSet(object.execution) ? globalThis.String(object.execution) : "" };
  },

  toJSON(message: QueryExecutionInputsAndOutputsRequest): unknown {
    const obj: any = {};
    if (message.execution !== "") {
      obj.execution = message.execution;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryExecutionInputsAndOutputsRequest>): QueryExecutionInputsAndOutputsRequest {
    return QueryExecutionInputsAndOutputsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryExecutionInputsAndOutputsRequest>): QueryExecutionInputsAndOutputsRequest {
    const message = createBaseQueryExecutionInputsAndOutputsRequest();
    message.execution = object.execution ?? "";
    return message;
  },
};

function createBaseCreateMetadataSchemaRequest(): CreateMetadataSchemaRequest {
  return { parent: "", metadataSchema: undefined, metadataSchemaId: "" };
}

export const CreateMetadataSchemaRequest: MessageFns<CreateMetadataSchemaRequest> = {
  encode(message: CreateMetadataSchemaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.metadataSchema !== undefined) {
      MetadataSchema.encode(message.metadataSchema, writer.uint32(18).fork()).join();
    }
    if (message.metadataSchemaId !== "") {
      writer.uint32(26).string(message.metadataSchemaId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMetadataSchemaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMetadataSchemaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadataSchema = MetadataSchema.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadataSchemaId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMetadataSchemaRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      metadataSchema: isSet(object.metadataSchema) ? MetadataSchema.fromJSON(object.metadataSchema) : undefined,
      metadataSchemaId: isSet(object.metadataSchemaId) ? globalThis.String(object.metadataSchemaId) : "",
    };
  },

  toJSON(message: CreateMetadataSchemaRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.metadataSchema !== undefined) {
      obj.metadataSchema = MetadataSchema.toJSON(message.metadataSchema);
    }
    if (message.metadataSchemaId !== "") {
      obj.metadataSchemaId = message.metadataSchemaId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateMetadataSchemaRequest>): CreateMetadataSchemaRequest {
    return CreateMetadataSchemaRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateMetadataSchemaRequest>): CreateMetadataSchemaRequest {
    const message = createBaseCreateMetadataSchemaRequest();
    message.parent = object.parent ?? "";
    message.metadataSchema = (object.metadataSchema !== undefined && object.metadataSchema !== null)
      ? MetadataSchema.fromPartial(object.metadataSchema)
      : undefined;
    message.metadataSchemaId = object.metadataSchemaId ?? "";
    return message;
  },
};

function createBaseGetMetadataSchemaRequest(): GetMetadataSchemaRequest {
  return { name: "" };
}

export const GetMetadataSchemaRequest: MessageFns<GetMetadataSchemaRequest> = {
  encode(message: GetMetadataSchemaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMetadataSchemaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMetadataSchemaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMetadataSchemaRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetMetadataSchemaRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetMetadataSchemaRequest>): GetMetadataSchemaRequest {
    return GetMetadataSchemaRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMetadataSchemaRequest>): GetMetadataSchemaRequest {
    const message = createBaseGetMetadataSchemaRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListMetadataSchemasRequest(): ListMetadataSchemasRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListMetadataSchemasRequest: MessageFns<ListMetadataSchemasRequest> = {
  encode(message: ListMetadataSchemasRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMetadataSchemasRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMetadataSchemasRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMetadataSchemasRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListMetadataSchemasRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMetadataSchemasRequest>): ListMetadataSchemasRequest {
    return ListMetadataSchemasRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMetadataSchemasRequest>): ListMetadataSchemasRequest {
    const message = createBaseListMetadataSchemasRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListMetadataSchemasResponse(): ListMetadataSchemasResponse {
  return { metadataSchemas: [], nextPageToken: "" };
}

export const ListMetadataSchemasResponse: MessageFns<ListMetadataSchemasResponse> = {
  encode(message: ListMetadataSchemasResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.metadataSchemas) {
      MetadataSchema.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMetadataSchemasResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMetadataSchemasResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadataSchemas.push(MetadataSchema.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMetadataSchemasResponse {
    return {
      metadataSchemas: globalThis.Array.isArray(object?.metadataSchemas)
        ? object.metadataSchemas.map((e: any) => MetadataSchema.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListMetadataSchemasResponse): unknown {
    const obj: any = {};
    if (message.metadataSchemas?.length) {
      obj.metadataSchemas = message.metadataSchemas.map((e) => MetadataSchema.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMetadataSchemasResponse>): ListMetadataSchemasResponse {
    return ListMetadataSchemasResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMetadataSchemasResponse>): ListMetadataSchemasResponse {
    const message = createBaseListMetadataSchemasResponse();
    message.metadataSchemas = object.metadataSchemas?.map((e) => MetadataSchema.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseQueryArtifactLineageSubgraphRequest(): QueryArtifactLineageSubgraphRequest {
  return { artifact: "", maxHops: 0, filter: "" };
}

export const QueryArtifactLineageSubgraphRequest: MessageFns<QueryArtifactLineageSubgraphRequest> = {
  encode(message: QueryArtifactLineageSubgraphRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.artifact !== "") {
      writer.uint32(10).string(message.artifact);
    }
    if (message.maxHops !== 0) {
      writer.uint32(16).int32(message.maxHops);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryArtifactLineageSubgraphRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryArtifactLineageSubgraphRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.artifact = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxHops = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryArtifactLineageSubgraphRequest {
    return {
      artifact: isSet(object.artifact) ? globalThis.String(object.artifact) : "",
      maxHops: isSet(object.maxHops) ? globalThis.Number(object.maxHops) : 0,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: QueryArtifactLineageSubgraphRequest): unknown {
    const obj: any = {};
    if (message.artifact !== "") {
      obj.artifact = message.artifact;
    }
    if (message.maxHops !== 0) {
      obj.maxHops = Math.round(message.maxHops);
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryArtifactLineageSubgraphRequest>): QueryArtifactLineageSubgraphRequest {
    return QueryArtifactLineageSubgraphRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryArtifactLineageSubgraphRequest>): QueryArtifactLineageSubgraphRequest {
    const message = createBaseQueryArtifactLineageSubgraphRequest();
    message.artifact = object.artifact ?? "";
    message.maxHops = object.maxHops ?? 0;
    message.filter = object.filter ?? "";
    return message;
  },
};

/** Service for reading and writing metadata entries. */
export type MetadataServiceDefinition = typeof MetadataServiceDefinition;
export const MetadataServiceDefinition = {
  name: "MetadataService",
  fullName: "google.cloud.aiplatform.v1.MetadataService",
  methods: {
    /** Initializes a MetadataStore, including allocation of resources. */
    createMetadataStore: {
      name: "CreateMetadataStore",
      requestType: CreateMetadataStoreRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              53,
              10,
              13,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              18,
              36,
              67,
              114,
              101,
              97,
              116,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              39,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              111,
              114,
              101,
              44,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              111,
              114,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              68,
              58,
              14,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              111,
              114,
              101,
              34,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves a specific MetadataStore. */
    getMetadataStore: {
      name: "GetMetadataStore",
      requestType: GetMetadataStoreRequest,
      requestStream: false,
      responseType: MetadataStore,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists MetadataStores for a Location. */
    listMetadataStores: {
      name: "ListMetadataStores",
      requestType: ListMetadataStoresRequest,
      requestStream: false,
      responseType: ListMetadataStoresResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a single MetadataStore and all its child resources (Artifacts,
     * Executions, and Contexts).
     */
    deleteMetadataStore: {
      name: "DeleteMetadataStore",
      requestType: DeleteMetadataStoreRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              61,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              36,
              68,
              101,
              108,
              101,
              116,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              42,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates an Artifact associated with a MetadataStore. */
    createArtifact: {
      name: "CreateArtifact",
      requestType: CreateArtifactRequest,
      requestStream: false,
      responseType: Artifact,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              44,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              74,
              58,
              8,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              34,
              62,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves a specific Artifact. */
    getArtifact: {
      name: "GetArtifact",
      requestType: GetArtifactRequest,
      requestStream: false,
      responseType: Artifact,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Artifacts in the MetadataStore. */
    listArtifacts: {
      name: "ListArtifacts",
      requestType: ListArtifactsRequest,
      requestStream: false,
      responseType: ListArtifactsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a stored Artifact. */
    updateArtifact: {
      name: "UpdateArtifact",
      requestType: UpdateArtifactRequest,
      requestStream: false,
      responseType: Artifact,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              83,
              58,
              8,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              50,
              71,
              47,
              118,
              49,
              47,
              123,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an Artifact. */
    deleteArtifact: {
      name: "DeleteArtifact",
      requestType: DeleteArtifactRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              42,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Purges Artifacts. */
    purgeArtifacts: {
      name: "PurgeArtifacts",
      requestType: PurgeArtifactsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              22,
              80,
              117,
              114,
              103,
              101,
              65,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              22,
              80,
              117,
              114,
              103,
              101,
              65,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              73,
              58,
              1,
              42,
              34,
              68,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              58,
              112,
              117,
              114,
              103,
              101,
            ]),
          ],
        },
      },
    },
    /** Creates a Context associated with a MetadataStore. */
    createContext: {
      name: "CreateContext",
      requestType: CreateContextRequest,
      requestStream: false,
      responseType: Context,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              44,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              72,
              58,
              7,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              34,
              61,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves a specific Context. */
    getContext: {
      name: "GetContext",
      requestType: GetContextRequest,
      requestStream: false,
      responseType: Context,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Contexts on the MetadataStore. */
    listContexts: {
      name: "ListContexts",
      requestType: ListContextsRequest,
      requestStream: false,
      responseType: ListContextsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a stored Context. */
    updateContext: {
      name: "UpdateContext",
      requestType: UpdateContextRequest,
      requestStream: false,
      responseType: Context,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 99, 111, 110, 116, 101, 120, 116, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              80,
              58,
              7,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              50,
              69,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a stored Context. */
    deleteContext: {
      name: "DeleteContext",
      requestType: DeleteContextRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              42,
              61,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Purges Contexts. */
    purgeContexts: {
      name: "PurgeContexts",
      requestType: PurgeContextsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              46,
              10,
              21,
              80,
              117,
              114,
              103,
              101,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              21,
              80,
              117,
              114,
              103,
              101,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              72,
              58,
              1,
              42,
              34,
              67,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              58,
              112,
              117,
              114,
              103,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Adds a set of Artifacts and Executions to a Context. If any of the
     * Artifacts or Executions have already been added to a Context, they are
     * simply skipped.
     */
    addContextArtifactsAndExecutions: {
      name: "AddContextArtifactsAndExecutions",
      requestType: AddContextArtifactsAndExecutionsRequest,
      requestStream: false,
      responseType: AddContextArtifactsAndExecutionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              28,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              44,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              44,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              102,
              58,
              1,
              42,
              34,
              97,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
              58,
              97,
              100,
              100,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              65,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              65,
              110,
              100,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Adds a set of Contexts as children to a parent Context. If any of the
     * child Contexts have already been added to the parent Context, they are
     * simply skipped. If this call would create a cycle or cause any Context to
     * have more than 10 parents, the request will fail with an INVALID_ARGUMENT
     * error.
     */
    addContextChildren: {
      name: "AddContextChildren",
      requestType: AddContextChildrenRequest,
      requestStream: false,
      responseType: AddContextChildrenResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              44,
              99,
              104,
              105,
              108,
              100,
              95,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              88,
              58,
              1,
              42,
              34,
              83,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
              58,
              97,
              100,
              100,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              67,
              104,
              105,
              108,
              100,
              114,
              101,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Remove a set of children contexts from a parent Context. If any of the
     * child Contexts were NOT added to the parent Context, they are
     * simply skipped.
     */
    removeContextChildren: {
      name: "RemoveContextChildren",
      requestType: RemoveContextChildrenRequest,
      requestStream: false,
      responseType: RemoveContextChildrenResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              44,
              99,
              104,
              105,
              108,
              100,
              95,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              91,
              58,
              1,
              42,
              34,
              86,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              109,
              111,
              118,
              101,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              67,
              104,
              105,
              108,
              100,
              114,
              101,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves Artifacts and Executions within the specified Context, connected
     * by Event edges and returned as a LineageSubgraph.
     */
    queryContextLineageSubgraph: {
      name: "QueryContextLineageSubgraph",
      requestType: QueryContextLineageSubgraphRequest,
      requestStream: false,
      responseType: LineageSubgraph,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([7, 99, 111, 110, 116, 101, 120, 116])],
          578365826: [
            Buffer.from([
              94,
              18,
              92,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
              58,
              113,
              117,
              101,
              114,
              121,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              76,
              105,
              110,
              101,
              97,
              103,
              101,
              83,
              117,
              98,
              103,
              114,
              97,
              112,
              104,
            ]),
          ],
        },
      },
    },
    /** Creates an Execution associated with a MetadataStore. */
    createExecution: {
      name: "CreateExecution",
      requestType: CreateExecutionRequest,
      requestStream: false,
      responseType: Execution,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              29,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              44,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              76,
              58,
              9,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              34,
              63,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves a specific Execution. */
    getExecution: {
      name: "GetExecution",
      requestType: GetExecutionRequest,
      requestStream: false,
      responseType: Execution,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Executions in the MetadataStore. */
    listExecutions: {
      name: "ListExecutions",
      requestType: ListExecutionsRequest,
      requestStream: false,
      responseType: ListExecutionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a stored Execution. */
    updateExecution: {
      name: "UpdateExecution",
      requestType: UpdateExecutionRequest,
      requestStream: false,
      responseType: Execution,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              86,
              58,
              9,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              50,
              73,
              47,
              118,
              49,
              47,
              123,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an Execution. */
    deleteExecution: {
      name: "DeleteExecution",
      requestType: DeleteExecutionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              65,
              42,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Purges Executions. */
    purgeExecutions: {
      name: "PurgeExecutions",
      requestType: PurgeExecutionsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              50,
              10,
              23,
              80,
              117,
              114,
              103,
              101,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              23,
              80,
              117,
              114,
              103,
              101,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
              58,
              112,
              117,
              114,
              103,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Adds Events to the specified Execution. An Event indicates whether an
     * Artifact was used as an input or output for an Execution. If an Event
     * already exists between the Execution and the Artifact, the Event is
     * skipped.
     */
    addExecutionEvents: {
      name: "AddExecutionEvents",
      requestType: AddExecutionEventsRequest,
      requestStream: false,
      responseType: AddExecutionEventsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 101, 120, 101, 99, 117, 116, 105, 111, 110, 44, 101, 118, 101, 110, 116, 115])],
          578365826: [
            Buffer.from([
              92,
              58,
              1,
              42,
              34,
              87,
              47,
              118,
              49,
              47,
              123,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              97,
              100,
              100,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              69,
              118,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Obtains the set of input and output Artifacts for this Execution, in the
     * form of LineageSubgraph that also contains the Execution and connecting
     * Events.
     */
    queryExecutionInputsAndOutputs: {
      name: "QueryExecutionInputsAndOutputs",
      requestType: QueryExecutionInputsAndOutputsRequest,
      requestStream: false,
      responseType: LineageSubgraph,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([9, 101, 120, 101, 99, 117, 116, 105, 111, 110])],
          578365826: [
            Buffer.from([
              101,
              18,
              99,
              47,
              118,
              49,
              47,
              123,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              113,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              73,
              110,
              112,
              117,
              116,
              115,
              65,
              110,
              100,
              79,
              117,
              116,
              112,
              117,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a MetadataSchema. */
    createMetadataSchema: {
      name: "CreateMetadataSchema",
      requestType: CreateMetadataSchemaRequest,
      requestStream: false,
      responseType: MetadataSchema,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              41,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              95,
              115,
              99,
              104,
              101,
              109,
              97,
              44,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              95,
              115,
              99,
              104,
              101,
              109,
              97,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              87,
              58,
              15,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              95,
              115,
              99,
              104,
              101,
              109,
              97,
              34,
              68,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              99,
              104,
              101,
              109,
              97,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves a specific MetadataSchema. */
    getMetadataSchema: {
      name: "GetMetadataSchema",
      requestType: GetMetadataSchemaRequest,
      requestStream: false,
      responseType: MetadataSchema,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              70,
              18,
              68,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              99,
              104,
              101,
              109,
              97,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists MetadataSchemas. */
    listMetadataSchemas: {
      name: "ListMetadataSchemas",
      requestType: ListMetadataSchemasRequest,
      requestStream: false,
      responseType: ListMetadataSchemasResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              70,
              18,
              68,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              99,
              104,
              101,
              109,
              97,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves lineage of an Artifact represented through Artifacts and
     * Executions connected by Event edges and returned as a LineageSubgraph.
     */
    queryArtifactLineageSubgraph: {
      name: "QueryArtifactLineageSubgraph",
      requestType: QueryArtifactLineageSubgraphRequest,
      requestStream: false,
      responseType: LineageSubgraph,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 97, 114, 116, 105, 102, 97, 99, 116])],
          578365826: [
            Buffer.from([
              97,
              18,
              95,
              47,
              118,
              49,
              47,
              123,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              113,
              117,
              101,
              114,
              121,
              65,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              76,
              105,
              110,
              101,
              97,
              103,
              101,
              83,
              117,
              98,
              103,
              114,
              97,
              112,
              104,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface MetadataServiceImplementation<CallContextExt = {}> {
  /** Initializes a MetadataStore, including allocation of resources. */
  createMetadataStore(
    request: CreateMetadataStoreRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Retrieves a specific MetadataStore. */
  getMetadataStore(
    request: GetMetadataStoreRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MetadataStore>>;
  /** Lists MetadataStores for a Location. */
  listMetadataStores(
    request: ListMetadataStoresRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListMetadataStoresResponse>>;
  /**
   * Deletes a single MetadataStore and all its child resources (Artifacts,
   * Executions, and Contexts).
   */
  deleteMetadataStore(
    request: DeleteMetadataStoreRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates an Artifact associated with a MetadataStore. */
  createArtifact(request: CreateArtifactRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Artifact>>;
  /** Retrieves a specific Artifact. */
  getArtifact(request: GetArtifactRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Artifact>>;
  /** Lists Artifacts in the MetadataStore. */
  listArtifacts(
    request: ListArtifactsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListArtifactsResponse>>;
  /** Updates a stored Artifact. */
  updateArtifact(request: UpdateArtifactRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Artifact>>;
  /** Deletes an Artifact. */
  deleteArtifact(
    request: DeleteArtifactRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Purges Artifacts. */
  purgeArtifacts(
    request: PurgeArtifactsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates a Context associated with a MetadataStore. */
  createContext(request: CreateContextRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Context>>;
  /** Retrieves a specific Context. */
  getContext(request: GetContextRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Context>>;
  /** Lists Contexts on the MetadataStore. */
  listContexts(
    request: ListContextsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListContextsResponse>>;
  /** Updates a stored Context. */
  updateContext(request: UpdateContextRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Context>>;
  /** Deletes a stored Context. */
  deleteContext(request: DeleteContextRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Purges Contexts. */
  purgeContexts(request: PurgeContextsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Adds a set of Artifacts and Executions to a Context. If any of the
   * Artifacts or Executions have already been added to a Context, they are
   * simply skipped.
   */
  addContextArtifactsAndExecutions(
    request: AddContextArtifactsAndExecutionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddContextArtifactsAndExecutionsResponse>>;
  /**
   * Adds a set of Contexts as children to a parent Context. If any of the
   * child Contexts have already been added to the parent Context, they are
   * simply skipped. If this call would create a cycle or cause any Context to
   * have more than 10 parents, the request will fail with an INVALID_ARGUMENT
   * error.
   */
  addContextChildren(
    request: AddContextChildrenRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddContextChildrenResponse>>;
  /**
   * Remove a set of children contexts from a parent Context. If any of the
   * child Contexts were NOT added to the parent Context, they are
   * simply skipped.
   */
  removeContextChildren(
    request: RemoveContextChildrenRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveContextChildrenResponse>>;
  /**
   * Retrieves Artifacts and Executions within the specified Context, connected
   * by Event edges and returned as a LineageSubgraph.
   */
  queryContextLineageSubgraph(
    request: QueryContextLineageSubgraphRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LineageSubgraph>>;
  /** Creates an Execution associated with a MetadataStore. */
  createExecution(
    request: CreateExecutionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Execution>>;
  /** Retrieves a specific Execution. */
  getExecution(request: GetExecutionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Execution>>;
  /** Lists Executions in the MetadataStore. */
  listExecutions(
    request: ListExecutionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListExecutionsResponse>>;
  /** Updates a stored Execution. */
  updateExecution(
    request: UpdateExecutionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Execution>>;
  /** Deletes an Execution. */
  deleteExecution(
    request: DeleteExecutionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Purges Executions. */
  purgeExecutions(
    request: PurgeExecutionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Adds Events to the specified Execution. An Event indicates whether an
   * Artifact was used as an input or output for an Execution. If an Event
   * already exists between the Execution and the Artifact, the Event is
   * skipped.
   */
  addExecutionEvents(
    request: AddExecutionEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddExecutionEventsResponse>>;
  /**
   * Obtains the set of input and output Artifacts for this Execution, in the
   * form of LineageSubgraph that also contains the Execution and connecting
   * Events.
   */
  queryExecutionInputsAndOutputs(
    request: QueryExecutionInputsAndOutputsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LineageSubgraph>>;
  /** Creates a MetadataSchema. */
  createMetadataSchema(
    request: CreateMetadataSchemaRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MetadataSchema>>;
  /** Retrieves a specific MetadataSchema. */
  getMetadataSchema(
    request: GetMetadataSchemaRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MetadataSchema>>;
  /** Lists MetadataSchemas. */
  listMetadataSchemas(
    request: ListMetadataSchemasRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListMetadataSchemasResponse>>;
  /**
   * Retrieves lineage of an Artifact represented through Artifacts and
   * Executions connected by Event edges and returned as a LineageSubgraph.
   */
  queryArtifactLineageSubgraph(
    request: QueryArtifactLineageSubgraphRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LineageSubgraph>>;
}

export interface MetadataServiceClient<CallOptionsExt = {}> {
  /** Initializes a MetadataStore, including allocation of resources. */
  createMetadataStore(
    request: DeepPartial<CreateMetadataStoreRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Retrieves a specific MetadataStore. */
  getMetadataStore(
    request: DeepPartial<GetMetadataStoreRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MetadataStore>;
  /** Lists MetadataStores for a Location. */
  listMetadataStores(
    request: DeepPartial<ListMetadataStoresRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListMetadataStoresResponse>;
  /**
   * Deletes a single MetadataStore and all its child resources (Artifacts,
   * Executions, and Contexts).
   */
  deleteMetadataStore(
    request: DeepPartial<DeleteMetadataStoreRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates an Artifact associated with a MetadataStore. */
  createArtifact(
    request: DeepPartial<CreateArtifactRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Artifact>;
  /** Retrieves a specific Artifact. */
  getArtifact(request: DeepPartial<GetArtifactRequest>, options?: CallOptions & CallOptionsExt): Promise<Artifact>;
  /** Lists Artifacts in the MetadataStore. */
  listArtifacts(
    request: DeepPartial<ListArtifactsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListArtifactsResponse>;
  /** Updates a stored Artifact. */
  updateArtifact(
    request: DeepPartial<UpdateArtifactRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Artifact>;
  /** Deletes an Artifact. */
  deleteArtifact(
    request: DeepPartial<DeleteArtifactRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Purges Artifacts. */
  purgeArtifacts(
    request: DeepPartial<PurgeArtifactsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates a Context associated with a MetadataStore. */
  createContext(request: DeepPartial<CreateContextRequest>, options?: CallOptions & CallOptionsExt): Promise<Context>;
  /** Retrieves a specific Context. */
  getContext(request: DeepPartial<GetContextRequest>, options?: CallOptions & CallOptionsExt): Promise<Context>;
  /** Lists Contexts on the MetadataStore. */
  listContexts(
    request: DeepPartial<ListContextsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListContextsResponse>;
  /** Updates a stored Context. */
  updateContext(request: DeepPartial<UpdateContextRequest>, options?: CallOptions & CallOptionsExt): Promise<Context>;
  /** Deletes a stored Context. */
  deleteContext(request: DeepPartial<DeleteContextRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Purges Contexts. */
  purgeContexts(request: DeepPartial<PurgeContextsRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Adds a set of Artifacts and Executions to a Context. If any of the
   * Artifacts or Executions have already been added to a Context, they are
   * simply skipped.
   */
  addContextArtifactsAndExecutions(
    request: DeepPartial<AddContextArtifactsAndExecutionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddContextArtifactsAndExecutionsResponse>;
  /**
   * Adds a set of Contexts as children to a parent Context. If any of the
   * child Contexts have already been added to the parent Context, they are
   * simply skipped. If this call would create a cycle or cause any Context to
   * have more than 10 parents, the request will fail with an INVALID_ARGUMENT
   * error.
   */
  addContextChildren(
    request: DeepPartial<AddContextChildrenRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddContextChildrenResponse>;
  /**
   * Remove a set of children contexts from a parent Context. If any of the
   * child Contexts were NOT added to the parent Context, they are
   * simply skipped.
   */
  removeContextChildren(
    request: DeepPartial<RemoveContextChildrenRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveContextChildrenResponse>;
  /**
   * Retrieves Artifacts and Executions within the specified Context, connected
   * by Event edges and returned as a LineageSubgraph.
   */
  queryContextLineageSubgraph(
    request: DeepPartial<QueryContextLineageSubgraphRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LineageSubgraph>;
  /** Creates an Execution associated with a MetadataStore. */
  createExecution(
    request: DeepPartial<CreateExecutionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Execution>;
  /** Retrieves a specific Execution. */
  getExecution(request: DeepPartial<GetExecutionRequest>, options?: CallOptions & CallOptionsExt): Promise<Execution>;
  /** Lists Executions in the MetadataStore. */
  listExecutions(
    request: DeepPartial<ListExecutionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListExecutionsResponse>;
  /** Updates a stored Execution. */
  updateExecution(
    request: DeepPartial<UpdateExecutionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Execution>;
  /** Deletes an Execution. */
  deleteExecution(
    request: DeepPartial<DeleteExecutionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Purges Executions. */
  purgeExecutions(
    request: DeepPartial<PurgeExecutionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Adds Events to the specified Execution. An Event indicates whether an
   * Artifact was used as an input or output for an Execution. If an Event
   * already exists between the Execution and the Artifact, the Event is
   * skipped.
   */
  addExecutionEvents(
    request: DeepPartial<AddExecutionEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddExecutionEventsResponse>;
  /**
   * Obtains the set of input and output Artifacts for this Execution, in the
   * form of LineageSubgraph that also contains the Execution and connecting
   * Events.
   */
  queryExecutionInputsAndOutputs(
    request: DeepPartial<QueryExecutionInputsAndOutputsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LineageSubgraph>;
  /** Creates a MetadataSchema. */
  createMetadataSchema(
    request: DeepPartial<CreateMetadataSchemaRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MetadataSchema>;
  /** Retrieves a specific MetadataSchema. */
  getMetadataSchema(
    request: DeepPartial<GetMetadataSchemaRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MetadataSchema>;
  /** Lists MetadataSchemas. */
  listMetadataSchemas(
    request: DeepPartial<ListMetadataSchemasRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListMetadataSchemasResponse>;
  /**
   * Retrieves lineage of an Artifact represented through Artifacts and
   * Executions connected by Event edges and returned as a LineageSubgraph.
   */
  queryArtifactLineageSubgraph(
    request: DeepPartial<QueryArtifactLineageSubgraphRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LineageSubgraph>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
