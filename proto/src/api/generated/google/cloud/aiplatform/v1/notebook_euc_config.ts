// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/notebook_euc_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.aiplatform.v1";

/** The euc configuration of NotebookRuntimeTemplate. */
export interface NotebookEucConfig {
  /**
   * Input only. Whether EUC is disabled in this NotebookRuntimeTemplate.
   * In proto3, the default value of a boolean is false. In this way, by default
   * EUC will be enabled for NotebookRuntimeTemplate.
   */
  eucDisabled: boolean;
  /**
   * Output only. Whether ActAs check is bypassed for service account attached
   * to the VM. If false, we need ActAs check for the default Compute Engine
   * Service account. When a Runtime is created, a VM is allocated using Default
   * Compute Engine Service Account. Any user requesting to use this Runtime
   * requires Service Account User (ActAs) permission over this SA. If true,
   * Runtime owner is using EUC and does not require the above permission as VM
   * no longer use default Compute Engine SA, but a P4SA.
   */
  bypassActasCheck: boolean;
}

function createBaseNotebookEucConfig(): NotebookEucConfig {
  return { eucDisabled: false, bypassActasCheck: false };
}

export const NotebookEucConfig: MessageFns<NotebookEucConfig> = {
  encode(message: NotebookEucConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eucDisabled !== false) {
      writer.uint32(8).bool(message.eucDisabled);
    }
    if (message.bypassActasCheck !== false) {
      writer.uint32(16).bool(message.bypassActasCheck);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotebookEucConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotebookEucConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.eucDisabled = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.bypassActasCheck = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotebookEucConfig {
    return {
      eucDisabled: isSet(object.eucDisabled) ? globalThis.Boolean(object.eucDisabled) : false,
      bypassActasCheck: isSet(object.bypassActasCheck) ? globalThis.Boolean(object.bypassActasCheck) : false,
    };
  },

  toJSON(message: NotebookEucConfig): unknown {
    const obj: any = {};
    if (message.eucDisabled !== false) {
      obj.eucDisabled = message.eucDisabled;
    }
    if (message.bypassActasCheck !== false) {
      obj.bypassActasCheck = message.bypassActasCheck;
    }
    return obj;
  },

  create(base?: DeepPartial<NotebookEucConfig>): NotebookEucConfig {
    return NotebookEucConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NotebookEucConfig>): NotebookEucConfig {
    const message = createBaseNotebookEucConfig();
    message.eucDisabled = object.eucDisabled ?? false;
    message.bypassActasCheck = object.bypassActasCheck ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
