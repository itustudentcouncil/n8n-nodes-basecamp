// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/model_evaluation_slice.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Value } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { BoolValue } from "../../../protobuf/wrappers.js";
import { ModelExplanation } from "./explanation.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * A collection of metrics calculated by comparing Model's predictions on a
 * slice of the test data against ground truth annotations.
 */
export interface ModelEvaluationSlice {
  /** Output only. The resource name of the ModelEvaluationSlice. */
  name: string;
  /** Output only. The slice of the test data that is used to evaluate the Model. */
  slice:
    | ModelEvaluationSlice_Slice
    | undefined;
  /**
   * Output only. Points to a YAML file stored on Google Cloud Storage
   * describing the
   * [metrics][google.cloud.aiplatform.v1.ModelEvaluationSlice.metrics] of this
   * ModelEvaluationSlice. The schema is defined as an OpenAPI 3.0.2 [Schema
   * Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject).
   */
  metricsSchemaUri: string;
  /**
   * Output only. Sliced evaluation metrics of the Model. The schema of the
   * metrics is stored in
   * [metrics_schema_uri][google.cloud.aiplatform.v1.ModelEvaluationSlice.metrics_schema_uri]
   */
  metrics:
    | any
    | undefined;
  /** Output only. Timestamp when this ModelEvaluationSlice was created. */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. Aggregated explanation metrics for the Model's prediction
   * output over the data this ModelEvaluation uses. This field is populated
   * only if the Model is evaluated with explanations, and only for tabular
   * Models.
   */
  modelExplanation: ModelExplanation | undefined;
}

/** Definition of a slice. */
export interface ModelEvaluationSlice_Slice {
  /**
   * Output only. The dimension of the slice.
   * Well-known dimensions are:
   *   * `annotationSpec`: This slice is on the test data that has either
   *     ground truth or prediction with
   *     [AnnotationSpec.display_name][google.cloud.aiplatform.v1.AnnotationSpec.display_name]
   *     equals to
   *     [value][google.cloud.aiplatform.v1.ModelEvaluationSlice.Slice.value].
   *   * `slice`: This slice is a user customized slice defined by its
   *     SliceSpec.
   */
  dimension: string;
  /** Output only. The value of the dimension in this slice. */
  value: string;
  /** Output only. Specification for how the data was sliced. */
  sliceSpec: ModelEvaluationSlice_Slice_SliceSpec | undefined;
}

/** Specification for how the data should be sliced. */
export interface ModelEvaluationSlice_Slice_SliceSpec {
  /**
   * Mapping configuration for this SliceSpec.
   * The key is the name of the feature.
   * By default, the key will be prefixed by "instance" as a dictionary
   * prefix for Vertex Batch Predictions output format.
   */
  configs: { [key: string]: ModelEvaluationSlice_Slice_SliceSpec_SliceConfig };
}

/**
 * Specification message containing the config for this SliceSpec.
 * When `kind` is selected as `value` and/or `range`, only a single slice
 * will be computed.
 * When `all_values` is present, a separate slice will be computed for
 * each possible label/value for the corresponding key in `config`.
 * Examples, with feature zip_code with values 12345, 23334, 88888 and
 * feature country with values "US", "Canada", "Mexico" in the dataset:
 *
 * Example 1:
 *
 *     {
 *       "zip_code": { "value": { "float_value": 12345.0 } }
 *     }
 *
 * A single slice for any data with zip_code 12345 in the dataset.
 *
 * Example 2:
 *
 *     {
 *       "zip_code": { "range": { "low": 12345, "high": 20000 } }
 *     }
 *
 * A single slice containing data where the zip_codes between 12345 and
 * 20000 For this example, data with the zip_code of 12345 will be in this
 * slice.
 *
 * Example 3:
 *
 *     {
 *       "zip_code": { "range": { "low": 10000, "high": 20000 } },
 *       "country": { "value": { "string_value": "US" } }
 *     }
 *
 * A single slice containing data where the zip_codes between 10000 and
 * 20000 has the country "US". For this example, data with the zip_code of
 * 12345 and country "US" will be in this slice.
 *
 * Example 4:
 *
 *     { "country": {"all_values": { "value": true } } }
 *
 * Three slices are computed, one for each unique country in the dataset.
 *
 * Example 5:
 *
 *     {
 *       "country": { "all_values": { "value": true } },
 *       "zip_code": { "value": { "float_value": 12345.0 } }
 *     }
 *
 * Three slices are computed, one for each unique country in the dataset
 * where the zip_code is also 12345. For this example, data with zip_code
 * 12345 and country "US" will be in one slice, zip_code 12345 and country
 * "Canada" in another slice, and zip_code 12345 and country "Mexico" in
 * another slice, totaling 3 slices.
 */
export interface ModelEvaluationSlice_Slice_SliceSpec_SliceConfig {
  /**
   * A unique specific value for a given feature.
   * Example: `{ "value": { "string_value": "12345" } }`
   */
  value?:
    | ModelEvaluationSlice_Slice_SliceSpec_Value
    | undefined;
  /**
   * A range of values for a numerical feature.
   * Example: `{"range":{"low":10000.0,"high":50000.0}}`
   * will capture 12345 and 23334 in the slice.
   */
  range?:
    | ModelEvaluationSlice_Slice_SliceSpec_Range
    | undefined;
  /**
   * If all_values is set to true, then all possible labels of the keyed
   * feature will have another slice computed.
   * Example: `{"all_values":{"value":true}}`
   */
  allValues?: boolean | undefined;
}

/**
 * A range of values for slice(s).
 * `low` is inclusive, `high` is exclusive.
 */
export interface ModelEvaluationSlice_Slice_SliceSpec_Range {
  /** Inclusive low value for the range. */
  low: number;
  /** Exclusive high value for the range. */
  high: number;
}

/** Single value that supports strings and floats. */
export interface ModelEvaluationSlice_Slice_SliceSpec_Value {
  /** String type. */
  stringValue?:
    | string
    | undefined;
  /** Float type. */
  floatValue?: number | undefined;
}

export interface ModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry {
  key: string;
  value: ModelEvaluationSlice_Slice_SliceSpec_SliceConfig | undefined;
}

function createBaseModelEvaluationSlice(): ModelEvaluationSlice {
  return {
    name: "",
    slice: undefined,
    metricsSchemaUri: "",
    metrics: undefined,
    createTime: undefined,
    modelExplanation: undefined,
  };
}

export const ModelEvaluationSlice: MessageFns<ModelEvaluationSlice> = {
  encode(message: ModelEvaluationSlice, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.slice !== undefined) {
      ModelEvaluationSlice_Slice.encode(message.slice, writer.uint32(18).fork()).join();
    }
    if (message.metricsSchemaUri !== "") {
      writer.uint32(26).string(message.metricsSchemaUri);
    }
    if (message.metrics !== undefined) {
      Value.encode(Value.wrap(message.metrics), writer.uint32(34).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.modelExplanation !== undefined) {
      ModelExplanation.encode(message.modelExplanation, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelEvaluationSlice {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelEvaluationSlice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.slice = ModelEvaluationSlice_Slice.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metricsSchemaUri = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.metrics = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.modelExplanation = ModelExplanation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelEvaluationSlice {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      slice: isSet(object.slice) ? ModelEvaluationSlice_Slice.fromJSON(object.slice) : undefined,
      metricsSchemaUri: isSet(object.metricsSchemaUri) ? globalThis.String(object.metricsSchemaUri) : "",
      metrics: isSet(object?.metrics) ? object.metrics : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      modelExplanation: isSet(object.modelExplanation) ? ModelExplanation.fromJSON(object.modelExplanation) : undefined,
    };
  },

  toJSON(message: ModelEvaluationSlice): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.slice !== undefined) {
      obj.slice = ModelEvaluationSlice_Slice.toJSON(message.slice);
    }
    if (message.metricsSchemaUri !== "") {
      obj.metricsSchemaUri = message.metricsSchemaUri;
    }
    if (message.metrics !== undefined) {
      obj.metrics = message.metrics;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.modelExplanation !== undefined) {
      obj.modelExplanation = ModelExplanation.toJSON(message.modelExplanation);
    }
    return obj;
  },

  create(base?: DeepPartial<ModelEvaluationSlice>): ModelEvaluationSlice {
    return ModelEvaluationSlice.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelEvaluationSlice>): ModelEvaluationSlice {
    const message = createBaseModelEvaluationSlice();
    message.name = object.name ?? "";
    message.slice = (object.slice !== undefined && object.slice !== null)
      ? ModelEvaluationSlice_Slice.fromPartial(object.slice)
      : undefined;
    message.metricsSchemaUri = object.metricsSchemaUri ?? "";
    message.metrics = object.metrics ?? undefined;
    message.createTime = object.createTime ?? undefined;
    message.modelExplanation = (object.modelExplanation !== undefined && object.modelExplanation !== null)
      ? ModelExplanation.fromPartial(object.modelExplanation)
      : undefined;
    return message;
  },
};

function createBaseModelEvaluationSlice_Slice(): ModelEvaluationSlice_Slice {
  return { dimension: "", value: "", sliceSpec: undefined };
}

export const ModelEvaluationSlice_Slice: MessageFns<ModelEvaluationSlice_Slice> = {
  encode(message: ModelEvaluationSlice_Slice, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dimension !== "") {
      writer.uint32(10).string(message.dimension);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    if (message.sliceSpec !== undefined) {
      ModelEvaluationSlice_Slice_SliceSpec.encode(message.sliceSpec, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelEvaluationSlice_Slice {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelEvaluationSlice_Slice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dimension = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sliceSpec = ModelEvaluationSlice_Slice_SliceSpec.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelEvaluationSlice_Slice {
    return {
      dimension: isSet(object.dimension) ? globalThis.String(object.dimension) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      sliceSpec: isSet(object.sliceSpec) ? ModelEvaluationSlice_Slice_SliceSpec.fromJSON(object.sliceSpec) : undefined,
    };
  },

  toJSON(message: ModelEvaluationSlice_Slice): unknown {
    const obj: any = {};
    if (message.dimension !== "") {
      obj.dimension = message.dimension;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.sliceSpec !== undefined) {
      obj.sliceSpec = ModelEvaluationSlice_Slice_SliceSpec.toJSON(message.sliceSpec);
    }
    return obj;
  },

  create(base?: DeepPartial<ModelEvaluationSlice_Slice>): ModelEvaluationSlice_Slice {
    return ModelEvaluationSlice_Slice.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelEvaluationSlice_Slice>): ModelEvaluationSlice_Slice {
    const message = createBaseModelEvaluationSlice_Slice();
    message.dimension = object.dimension ?? "";
    message.value = object.value ?? "";
    message.sliceSpec = (object.sliceSpec !== undefined && object.sliceSpec !== null)
      ? ModelEvaluationSlice_Slice_SliceSpec.fromPartial(object.sliceSpec)
      : undefined;
    return message;
  },
};

function createBaseModelEvaluationSlice_Slice_SliceSpec(): ModelEvaluationSlice_Slice_SliceSpec {
  return { configs: {} };
}

export const ModelEvaluationSlice_Slice_SliceSpec: MessageFns<ModelEvaluationSlice_Slice_SliceSpec> = {
  encode(message: ModelEvaluationSlice_Slice_SliceSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.configs).forEach(([key, value]) => {
      ModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry.encode({ key: key as any, value }, writer.uint32(10).fork())
        .join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelEvaluationSlice_Slice_SliceSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelEvaluationSlice_Slice_SliceSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = ModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.configs[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelEvaluationSlice_Slice_SliceSpec {
    return {
      configs: isObject(object.configs)
        ? Object.entries(object.configs).reduce<{ [key: string]: ModelEvaluationSlice_Slice_SliceSpec_SliceConfig }>(
          (acc, [key, value]) => {
            acc[key] = ModelEvaluationSlice_Slice_SliceSpec_SliceConfig.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: ModelEvaluationSlice_Slice_SliceSpec): unknown {
    const obj: any = {};
    if (message.configs) {
      const entries = Object.entries(message.configs);
      if (entries.length > 0) {
        obj.configs = {};
        entries.forEach(([k, v]) => {
          obj.configs[k] = ModelEvaluationSlice_Slice_SliceSpec_SliceConfig.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<ModelEvaluationSlice_Slice_SliceSpec>): ModelEvaluationSlice_Slice_SliceSpec {
    return ModelEvaluationSlice_Slice_SliceSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelEvaluationSlice_Slice_SliceSpec>): ModelEvaluationSlice_Slice_SliceSpec {
    const message = createBaseModelEvaluationSlice_Slice_SliceSpec();
    message.configs = Object.entries(object.configs ?? {}).reduce<
      { [key: string]: ModelEvaluationSlice_Slice_SliceSpec_SliceConfig }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = ModelEvaluationSlice_Slice_SliceSpec_SliceConfig.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseModelEvaluationSlice_Slice_SliceSpec_SliceConfig(): ModelEvaluationSlice_Slice_SliceSpec_SliceConfig {
  return { value: undefined, range: undefined, allValues: undefined };
}

export const ModelEvaluationSlice_Slice_SliceSpec_SliceConfig: MessageFns<
  ModelEvaluationSlice_Slice_SliceSpec_SliceConfig
> = {
  encode(
    message: ModelEvaluationSlice_Slice_SliceSpec_SliceConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.value !== undefined) {
      ModelEvaluationSlice_Slice_SliceSpec_Value.encode(message.value, writer.uint32(10).fork()).join();
    }
    if (message.range !== undefined) {
      ModelEvaluationSlice_Slice_SliceSpec_Range.encode(message.range, writer.uint32(18).fork()).join();
    }
    if (message.allValues !== undefined) {
      BoolValue.encode({ value: message.allValues! }, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelEvaluationSlice_Slice_SliceSpec_SliceConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelEvaluationSlice_Slice_SliceSpec_SliceConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = ModelEvaluationSlice_Slice_SliceSpec_Value.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.range = ModelEvaluationSlice_Slice_SliceSpec_Range.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.allValues = BoolValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelEvaluationSlice_Slice_SliceSpec_SliceConfig {
    return {
      value: isSet(object.value) ? ModelEvaluationSlice_Slice_SliceSpec_Value.fromJSON(object.value) : undefined,
      range: isSet(object.range) ? ModelEvaluationSlice_Slice_SliceSpec_Range.fromJSON(object.range) : undefined,
      allValues: isSet(object.allValues) ? Boolean(object.allValues) : undefined,
    };
  },

  toJSON(message: ModelEvaluationSlice_Slice_SliceSpec_SliceConfig): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = ModelEvaluationSlice_Slice_SliceSpec_Value.toJSON(message.value);
    }
    if (message.range !== undefined) {
      obj.range = ModelEvaluationSlice_Slice_SliceSpec_Range.toJSON(message.range);
    }
    if (message.allValues !== undefined) {
      obj.allValues = message.allValues;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ModelEvaluationSlice_Slice_SliceSpec_SliceConfig>,
  ): ModelEvaluationSlice_Slice_SliceSpec_SliceConfig {
    return ModelEvaluationSlice_Slice_SliceSpec_SliceConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ModelEvaluationSlice_Slice_SliceSpec_SliceConfig>,
  ): ModelEvaluationSlice_Slice_SliceSpec_SliceConfig {
    const message = createBaseModelEvaluationSlice_Slice_SliceSpec_SliceConfig();
    message.value = (object.value !== undefined && object.value !== null)
      ? ModelEvaluationSlice_Slice_SliceSpec_Value.fromPartial(object.value)
      : undefined;
    message.range = (object.range !== undefined && object.range !== null)
      ? ModelEvaluationSlice_Slice_SliceSpec_Range.fromPartial(object.range)
      : undefined;
    message.allValues = object.allValues ?? undefined;
    return message;
  },
};

function createBaseModelEvaluationSlice_Slice_SliceSpec_Range(): ModelEvaluationSlice_Slice_SliceSpec_Range {
  return { low: 0, high: 0 };
}

export const ModelEvaluationSlice_Slice_SliceSpec_Range: MessageFns<ModelEvaluationSlice_Slice_SliceSpec_Range> = {
  encode(message: ModelEvaluationSlice_Slice_SliceSpec_Range, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.low !== 0) {
      writer.uint32(13).float(message.low);
    }
    if (message.high !== 0) {
      writer.uint32(21).float(message.high);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelEvaluationSlice_Slice_SliceSpec_Range {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelEvaluationSlice_Slice_SliceSpec_Range();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.low = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.high = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelEvaluationSlice_Slice_SliceSpec_Range {
    return {
      low: isSet(object.low) ? globalThis.Number(object.low) : 0,
      high: isSet(object.high) ? globalThis.Number(object.high) : 0,
    };
  },

  toJSON(message: ModelEvaluationSlice_Slice_SliceSpec_Range): unknown {
    const obj: any = {};
    if (message.low !== 0) {
      obj.low = message.low;
    }
    if (message.high !== 0) {
      obj.high = message.high;
    }
    return obj;
  },

  create(base?: DeepPartial<ModelEvaluationSlice_Slice_SliceSpec_Range>): ModelEvaluationSlice_Slice_SliceSpec_Range {
    return ModelEvaluationSlice_Slice_SliceSpec_Range.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ModelEvaluationSlice_Slice_SliceSpec_Range>,
  ): ModelEvaluationSlice_Slice_SliceSpec_Range {
    const message = createBaseModelEvaluationSlice_Slice_SliceSpec_Range();
    message.low = object.low ?? 0;
    message.high = object.high ?? 0;
    return message;
  },
};

function createBaseModelEvaluationSlice_Slice_SliceSpec_Value(): ModelEvaluationSlice_Slice_SliceSpec_Value {
  return { stringValue: undefined, floatValue: undefined };
}

export const ModelEvaluationSlice_Slice_SliceSpec_Value: MessageFns<ModelEvaluationSlice_Slice_SliceSpec_Value> = {
  encode(message: ModelEvaluationSlice_Slice_SliceSpec_Value, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stringValue !== undefined) {
      writer.uint32(10).string(message.stringValue);
    }
    if (message.floatValue !== undefined) {
      writer.uint32(21).float(message.floatValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelEvaluationSlice_Slice_SliceSpec_Value {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelEvaluationSlice_Slice_SliceSpec_Value();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.floatValue = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelEvaluationSlice_Slice_SliceSpec_Value {
    return {
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : undefined,
      floatValue: isSet(object.floatValue) ? globalThis.Number(object.floatValue) : undefined,
    };
  },

  toJSON(message: ModelEvaluationSlice_Slice_SliceSpec_Value): unknown {
    const obj: any = {};
    if (message.stringValue !== undefined) {
      obj.stringValue = message.stringValue;
    }
    if (message.floatValue !== undefined) {
      obj.floatValue = message.floatValue;
    }
    return obj;
  },

  create(base?: DeepPartial<ModelEvaluationSlice_Slice_SliceSpec_Value>): ModelEvaluationSlice_Slice_SliceSpec_Value {
    return ModelEvaluationSlice_Slice_SliceSpec_Value.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ModelEvaluationSlice_Slice_SliceSpec_Value>,
  ): ModelEvaluationSlice_Slice_SliceSpec_Value {
    const message = createBaseModelEvaluationSlice_Slice_SliceSpec_Value();
    message.stringValue = object.stringValue ?? undefined;
    message.floatValue = object.floatValue ?? undefined;
    return message;
  },
};

function createBaseModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry(): ModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry {
  return { key: "", value: undefined };
}

export const ModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry: MessageFns<
  ModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry
> = {
  encode(
    message: ModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ModelEvaluationSlice_Slice_SliceSpec_SliceConfig.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = ModelEvaluationSlice_Slice_SliceSpec_SliceConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ModelEvaluationSlice_Slice_SliceSpec_SliceConfig.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ModelEvaluationSlice_Slice_SliceSpec_SliceConfig.toJSON(message.value);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry>,
  ): ModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry {
    return ModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry>,
  ): ModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry {
    const message = createBaseModelEvaluationSlice_Slice_SliceSpec_ConfigsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ModelEvaluationSlice_Slice_SliceSpec_SliceConfig.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
