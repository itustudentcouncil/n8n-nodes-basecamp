// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/reservation_affinity.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * A ReservationAffinity can be used to configure a Vertex AI resource (e.g., a
 * DeployedModel) to draw its Compute Engine resources from a Shared
 * Reservation, or exclusively from on-demand capacity.
 */
export interface ReservationAffinity {
  /** Required. Specifies the reservation affinity type. */
  reservationAffinityType: ReservationAffinity_Type;
  /**
   * Optional. Corresponds to the label key of a reservation resource. To target
   * a SPECIFIC_RESERVATION by name, use
   * `compute.googleapis.com/reservation-name` as the key and specify the name
   * of your reservation as its value.
   */
  key: string;
  /**
   * Optional. Corresponds to the label values of a reservation resource. This
   * must be the full resource name of the reservation.
   */
  values: string[];
}

/** Identifies a type of reservation affinity. */
export enum ReservationAffinity_Type {
  /** TYPE_UNSPECIFIED - Default value. This should not be used. */
  TYPE_UNSPECIFIED = 0,
  /** NO_RESERVATION - Do not consume from any reserved capacity, only use on-demand. */
  NO_RESERVATION = 1,
  /** ANY_RESERVATION - Consume any reservation available, falling back to on-demand. */
  ANY_RESERVATION = 2,
  /**
   * SPECIFIC_RESERVATION - Consume from a specific reservation. When chosen, the reservation
   * must be identified via the `key` and `values` fields.
   */
  SPECIFIC_RESERVATION = 3,
  UNRECOGNIZED = -1,
}

export function reservationAffinity_TypeFromJSON(object: any): ReservationAffinity_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return ReservationAffinity_Type.TYPE_UNSPECIFIED;
    case 1:
    case "NO_RESERVATION":
      return ReservationAffinity_Type.NO_RESERVATION;
    case 2:
    case "ANY_RESERVATION":
      return ReservationAffinity_Type.ANY_RESERVATION;
    case 3:
    case "SPECIFIC_RESERVATION":
      return ReservationAffinity_Type.SPECIFIC_RESERVATION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ReservationAffinity_Type.UNRECOGNIZED;
  }
}

export function reservationAffinity_TypeToJSON(object: ReservationAffinity_Type): string {
  switch (object) {
    case ReservationAffinity_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case ReservationAffinity_Type.NO_RESERVATION:
      return "NO_RESERVATION";
    case ReservationAffinity_Type.ANY_RESERVATION:
      return "ANY_RESERVATION";
    case ReservationAffinity_Type.SPECIFIC_RESERVATION:
      return "SPECIFIC_RESERVATION";
    case ReservationAffinity_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseReservationAffinity(): ReservationAffinity {
  return { reservationAffinityType: 0, key: "", values: [] };
}

export const ReservationAffinity: MessageFns<ReservationAffinity> = {
  encode(message: ReservationAffinity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reservationAffinityType !== 0) {
      writer.uint32(8).int32(message.reservationAffinityType);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    for (const v of message.values) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReservationAffinity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReservationAffinity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reservationAffinityType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.values.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReservationAffinity {
    return {
      reservationAffinityType: isSet(object.reservationAffinityType)
        ? reservationAffinity_TypeFromJSON(object.reservationAffinityType)
        : 0,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: ReservationAffinity): unknown {
    const obj: any = {};
    if (message.reservationAffinityType !== 0) {
      obj.reservationAffinityType = reservationAffinity_TypeToJSON(message.reservationAffinityType);
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create(base?: DeepPartial<ReservationAffinity>): ReservationAffinity {
    return ReservationAffinity.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReservationAffinity>): ReservationAffinity {
    const message = createBaseReservationAffinity();
    message.reservationAffinityType = object.reservationAffinityType ?? 0;
    message.key = object.key ?? "";
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
