// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/index_endpoint_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { DeployedIndex, IndexEndpoint } from "./index_endpoint.js";
import { GenericOperationMetadata } from "./operation.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * Request message for
 * [IndexEndpointService.CreateIndexEndpoint][google.cloud.aiplatform.v1.IndexEndpointService.CreateIndexEndpoint].
 */
export interface CreateIndexEndpointRequest {
  /**
   * Required. The resource name of the Location to create the IndexEndpoint in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The IndexEndpoint to create. */
  indexEndpoint: IndexEndpoint | undefined;
}

/**
 * Runtime operation information for
 * [IndexEndpointService.CreateIndexEndpoint][google.cloud.aiplatform.v1.IndexEndpointService.CreateIndexEndpoint].
 */
export interface CreateIndexEndpointOperationMetadata {
  /** The operation generic information. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [IndexEndpointService.GetIndexEndpoint][google.cloud.aiplatform.v1.IndexEndpointService.GetIndexEndpoint]
 */
export interface GetIndexEndpointRequest {
  /**
   * Required. The name of the IndexEndpoint resource.
   * Format:
   * `projects/{project}/locations/{location}/indexEndpoints/{index_endpoint}`
   */
  name: string;
}

/**
 * Request message for
 * [IndexEndpointService.ListIndexEndpoints][google.cloud.aiplatform.v1.IndexEndpointService.ListIndexEndpoints].
 */
export interface ListIndexEndpointsRequest {
  /**
   * Required. The resource name of the Location from which to list the
   * IndexEndpoints. Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. An expression for filtering the results of the request. For field
   * names both snake_case and camelCase are supported.
   *
   *   * `index_endpoint` supports = and !=. `index_endpoint` represents the
   *      IndexEndpoint ID, ie. the last segment of the IndexEndpoint's
   *      [resourcename][google.cloud.aiplatform.v1.IndexEndpoint.name].
   *   * `display_name` supports =, != and regex()
   *             (uses [re2](https://github.com/google/re2/wiki/Syntax) syntax)
   *   * `labels` supports general map functions that is:
   *             `labels.key=value` - key:value equality
   *             `labels.key:* or labels:key - key existence
   *              A key including a space must be quoted. `labels."a key"`.
   *
   * Some examples:
   *   * `index_endpoint="1"`
   *   * `display_name="myDisplayName"`
   *   * `regex(display_name, "^A") -> The display name starts with an A.
   *   * `labels.myKey="myValue"`
   */
  filter: string;
  /** Optional. The standard list page size. */
  pageSize: number;
  /**
   * Optional. The standard list page token.
   * Typically obtained via
   * [ListIndexEndpointsResponse.next_page_token][google.cloud.aiplatform.v1.ListIndexEndpointsResponse.next_page_token]
   * of the previous
   * [IndexEndpointService.ListIndexEndpoints][google.cloud.aiplatform.v1.IndexEndpointService.ListIndexEndpoints]
   * call.
   */
  pageToken: string;
  /** Optional. Mask specifying which fields to read. */
  readMask: string[] | undefined;
}

/**
 * Response message for
 * [IndexEndpointService.ListIndexEndpoints][google.cloud.aiplatform.v1.IndexEndpointService.ListIndexEndpoints].
 */
export interface ListIndexEndpointsResponse {
  /** List of IndexEndpoints in the requested page. */
  indexEndpoints: IndexEndpoint[];
  /**
   * A token to retrieve next page of results.
   * Pass to
   * [ListIndexEndpointsRequest.page_token][google.cloud.aiplatform.v1.ListIndexEndpointsRequest.page_token]
   * to obtain that page.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [IndexEndpointService.UpdateIndexEndpoint][google.cloud.aiplatform.v1.IndexEndpointService.UpdateIndexEndpoint].
 */
export interface UpdateIndexEndpointRequest {
  /** Required. The IndexEndpoint which replaces the resource on the server. */
  indexEndpoint:
    | IndexEndpoint
    | undefined;
  /**
   * Required. The update mask applies to the resource. See
   * [google.protobuf.FieldMask][google.protobuf.FieldMask].
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [IndexEndpointService.DeleteIndexEndpoint][google.cloud.aiplatform.v1.IndexEndpointService.DeleteIndexEndpoint].
 */
export interface DeleteIndexEndpointRequest {
  /**
   * Required. The name of the IndexEndpoint resource to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/indexEndpoints/{index_endpoint}`
   */
  name: string;
}

/**
 * Request message for
 * [IndexEndpointService.DeployIndex][google.cloud.aiplatform.v1.IndexEndpointService.DeployIndex].
 */
export interface DeployIndexRequest {
  /**
   * Required. The name of the IndexEndpoint resource into which to deploy an
   * Index. Format:
   * `projects/{project}/locations/{location}/indexEndpoints/{index_endpoint}`
   */
  indexEndpoint: string;
  /** Required. The DeployedIndex to be created within the IndexEndpoint. */
  deployedIndex: DeployedIndex | undefined;
}

/**
 * Response message for
 * [IndexEndpointService.DeployIndex][google.cloud.aiplatform.v1.IndexEndpointService.DeployIndex].
 */
export interface DeployIndexResponse {
  /** The DeployedIndex that had been deployed in the IndexEndpoint. */
  deployedIndex: DeployedIndex | undefined;
}

/**
 * Runtime operation information for
 * [IndexEndpointService.DeployIndex][google.cloud.aiplatform.v1.IndexEndpointService.DeployIndex].
 */
export interface DeployIndexOperationMetadata {
  /** The operation generic information. */
  genericMetadata:
    | GenericOperationMetadata
    | undefined;
  /** The unique index id specified by user */
  deployedIndexId: string;
}

/**
 * Request message for
 * [IndexEndpointService.UndeployIndex][google.cloud.aiplatform.v1.IndexEndpointService.UndeployIndex].
 */
export interface UndeployIndexRequest {
  /**
   * Required. The name of the IndexEndpoint resource from which to undeploy an
   * Index. Format:
   * `projects/{project}/locations/{location}/indexEndpoints/{index_endpoint}`
   */
  indexEndpoint: string;
  /**
   * Required. The ID of the DeployedIndex to be undeployed from the
   * IndexEndpoint.
   */
  deployedIndexId: string;
}

/**
 * Response message for
 * [IndexEndpointService.UndeployIndex][google.cloud.aiplatform.v1.IndexEndpointService.UndeployIndex].
 */
export interface UndeployIndexResponse {
}

/**
 * Runtime operation information for
 * [IndexEndpointService.UndeployIndex][google.cloud.aiplatform.v1.IndexEndpointService.UndeployIndex].
 */
export interface UndeployIndexOperationMetadata {
  /** The operation generic information. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [IndexEndpointService.MutateDeployedIndex][google.cloud.aiplatform.v1.IndexEndpointService.MutateDeployedIndex].
 */
export interface MutateDeployedIndexRequest {
  /**
   * Required. The name of the IndexEndpoint resource into which to deploy an
   * Index. Format:
   * `projects/{project}/locations/{location}/indexEndpoints/{index_endpoint}`
   */
  indexEndpoint: string;
  /**
   * Required. The DeployedIndex to be updated within the IndexEndpoint.
   * Currently, the updatable fields are [DeployedIndex][automatic_resources]
   * and [DeployedIndex][dedicated_resources]
   */
  deployedIndex: DeployedIndex | undefined;
}

/**
 * Response message for
 * [IndexEndpointService.MutateDeployedIndex][google.cloud.aiplatform.v1.IndexEndpointService.MutateDeployedIndex].
 */
export interface MutateDeployedIndexResponse {
  /** The DeployedIndex that had been updated in the IndexEndpoint. */
  deployedIndex: DeployedIndex | undefined;
}

/**
 * Runtime operation information for
 * [IndexEndpointService.MutateDeployedIndex][google.cloud.aiplatform.v1.IndexEndpointService.MutateDeployedIndex].
 */
export interface MutateDeployedIndexOperationMetadata {
  /** The operation generic information. */
  genericMetadata:
    | GenericOperationMetadata
    | undefined;
  /** The unique index id specified by user */
  deployedIndexId: string;
}

function createBaseCreateIndexEndpointRequest(): CreateIndexEndpointRequest {
  return { parent: "", indexEndpoint: undefined };
}

export const CreateIndexEndpointRequest: MessageFns<CreateIndexEndpointRequest> = {
  encode(message: CreateIndexEndpointRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.indexEndpoint !== undefined) {
      IndexEndpoint.encode(message.indexEndpoint, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateIndexEndpointRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateIndexEndpointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.indexEndpoint = IndexEndpoint.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateIndexEndpointRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      indexEndpoint: isSet(object.indexEndpoint) ? IndexEndpoint.fromJSON(object.indexEndpoint) : undefined,
    };
  },

  toJSON(message: CreateIndexEndpointRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.indexEndpoint !== undefined) {
      obj.indexEndpoint = IndexEndpoint.toJSON(message.indexEndpoint);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateIndexEndpointRequest>): CreateIndexEndpointRequest {
    return CreateIndexEndpointRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateIndexEndpointRequest>): CreateIndexEndpointRequest {
    const message = createBaseCreateIndexEndpointRequest();
    message.parent = object.parent ?? "";
    message.indexEndpoint = (object.indexEndpoint !== undefined && object.indexEndpoint !== null)
      ? IndexEndpoint.fromPartial(object.indexEndpoint)
      : undefined;
    return message;
  },
};

function createBaseCreateIndexEndpointOperationMetadata(): CreateIndexEndpointOperationMetadata {
  return { genericMetadata: undefined };
}

export const CreateIndexEndpointOperationMetadata: MessageFns<CreateIndexEndpointOperationMetadata> = {
  encode(message: CreateIndexEndpointOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateIndexEndpointOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateIndexEndpointOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateIndexEndpointOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: CreateIndexEndpointOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateIndexEndpointOperationMetadata>): CreateIndexEndpointOperationMetadata {
    return CreateIndexEndpointOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateIndexEndpointOperationMetadata>): CreateIndexEndpointOperationMetadata {
    const message = createBaseCreateIndexEndpointOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseGetIndexEndpointRequest(): GetIndexEndpointRequest {
  return { name: "" };
}

export const GetIndexEndpointRequest: MessageFns<GetIndexEndpointRequest> = {
  encode(message: GetIndexEndpointRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIndexEndpointRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIndexEndpointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIndexEndpointRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetIndexEndpointRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetIndexEndpointRequest>): GetIndexEndpointRequest {
    return GetIndexEndpointRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIndexEndpointRequest>): GetIndexEndpointRequest {
    const message = createBaseGetIndexEndpointRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListIndexEndpointsRequest(): ListIndexEndpointsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", readMask: undefined };
}

export const ListIndexEndpointsRequest: MessageFns<ListIndexEndpointsRequest> = {
  encode(message: ListIndexEndpointsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListIndexEndpointsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIndexEndpointsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIndexEndpointsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: ListIndexEndpointsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<ListIndexEndpointsRequest>): ListIndexEndpointsRequest {
    return ListIndexEndpointsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListIndexEndpointsRequest>): ListIndexEndpointsRequest {
    const message = createBaseListIndexEndpointsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListIndexEndpointsResponse(): ListIndexEndpointsResponse {
  return { indexEndpoints: [], nextPageToken: "" };
}

export const ListIndexEndpointsResponse: MessageFns<ListIndexEndpointsResponse> = {
  encode(message: ListIndexEndpointsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.indexEndpoints) {
      IndexEndpoint.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListIndexEndpointsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIndexEndpointsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.indexEndpoints.push(IndexEndpoint.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIndexEndpointsResponse {
    return {
      indexEndpoints: globalThis.Array.isArray(object?.indexEndpoints)
        ? object.indexEndpoints.map((e: any) => IndexEndpoint.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListIndexEndpointsResponse): unknown {
    const obj: any = {};
    if (message.indexEndpoints?.length) {
      obj.indexEndpoints = message.indexEndpoints.map((e) => IndexEndpoint.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListIndexEndpointsResponse>): ListIndexEndpointsResponse {
    return ListIndexEndpointsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListIndexEndpointsResponse>): ListIndexEndpointsResponse {
    const message = createBaseListIndexEndpointsResponse();
    message.indexEndpoints = object.indexEndpoints?.map((e) => IndexEndpoint.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateIndexEndpointRequest(): UpdateIndexEndpointRequest {
  return { indexEndpoint: undefined, updateMask: undefined };
}

export const UpdateIndexEndpointRequest: MessageFns<UpdateIndexEndpointRequest> = {
  encode(message: UpdateIndexEndpointRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.indexEndpoint !== undefined) {
      IndexEndpoint.encode(message.indexEndpoint, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIndexEndpointRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIndexEndpointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.indexEndpoint = IndexEndpoint.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIndexEndpointRequest {
    return {
      indexEndpoint: isSet(object.indexEndpoint) ? IndexEndpoint.fromJSON(object.indexEndpoint) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateIndexEndpointRequest): unknown {
    const obj: any = {};
    if (message.indexEndpoint !== undefined) {
      obj.indexEndpoint = IndexEndpoint.toJSON(message.indexEndpoint);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateIndexEndpointRequest>): UpdateIndexEndpointRequest {
    return UpdateIndexEndpointRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateIndexEndpointRequest>): UpdateIndexEndpointRequest {
    const message = createBaseUpdateIndexEndpointRequest();
    message.indexEndpoint = (object.indexEndpoint !== undefined && object.indexEndpoint !== null)
      ? IndexEndpoint.fromPartial(object.indexEndpoint)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteIndexEndpointRequest(): DeleteIndexEndpointRequest {
  return { name: "" };
}

export const DeleteIndexEndpointRequest: MessageFns<DeleteIndexEndpointRequest> = {
  encode(message: DeleteIndexEndpointRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteIndexEndpointRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteIndexEndpointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteIndexEndpointRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteIndexEndpointRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteIndexEndpointRequest>): DeleteIndexEndpointRequest {
    return DeleteIndexEndpointRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteIndexEndpointRequest>): DeleteIndexEndpointRequest {
    const message = createBaseDeleteIndexEndpointRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeployIndexRequest(): DeployIndexRequest {
  return { indexEndpoint: "", deployedIndex: undefined };
}

export const DeployIndexRequest: MessageFns<DeployIndexRequest> = {
  encode(message: DeployIndexRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.indexEndpoint !== "") {
      writer.uint32(10).string(message.indexEndpoint);
    }
    if (message.deployedIndex !== undefined) {
      DeployedIndex.encode(message.deployedIndex, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployIndexRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployIndexRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.indexEndpoint = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deployedIndex = DeployedIndex.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployIndexRequest {
    return {
      indexEndpoint: isSet(object.indexEndpoint) ? globalThis.String(object.indexEndpoint) : "",
      deployedIndex: isSet(object.deployedIndex) ? DeployedIndex.fromJSON(object.deployedIndex) : undefined,
    };
  },

  toJSON(message: DeployIndexRequest): unknown {
    const obj: any = {};
    if (message.indexEndpoint !== "") {
      obj.indexEndpoint = message.indexEndpoint;
    }
    if (message.deployedIndex !== undefined) {
      obj.deployedIndex = DeployedIndex.toJSON(message.deployedIndex);
    }
    return obj;
  },

  create(base?: DeepPartial<DeployIndexRequest>): DeployIndexRequest {
    return DeployIndexRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployIndexRequest>): DeployIndexRequest {
    const message = createBaseDeployIndexRequest();
    message.indexEndpoint = object.indexEndpoint ?? "";
    message.deployedIndex = (object.deployedIndex !== undefined && object.deployedIndex !== null)
      ? DeployedIndex.fromPartial(object.deployedIndex)
      : undefined;
    return message;
  },
};

function createBaseDeployIndexResponse(): DeployIndexResponse {
  return { deployedIndex: undefined };
}

export const DeployIndexResponse: MessageFns<DeployIndexResponse> = {
  encode(message: DeployIndexResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployedIndex !== undefined) {
      DeployedIndex.encode(message.deployedIndex, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployIndexResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployIndexResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deployedIndex = DeployedIndex.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployIndexResponse {
    return { deployedIndex: isSet(object.deployedIndex) ? DeployedIndex.fromJSON(object.deployedIndex) : undefined };
  },

  toJSON(message: DeployIndexResponse): unknown {
    const obj: any = {};
    if (message.deployedIndex !== undefined) {
      obj.deployedIndex = DeployedIndex.toJSON(message.deployedIndex);
    }
    return obj;
  },

  create(base?: DeepPartial<DeployIndexResponse>): DeployIndexResponse {
    return DeployIndexResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployIndexResponse>): DeployIndexResponse {
    const message = createBaseDeployIndexResponse();
    message.deployedIndex = (object.deployedIndex !== undefined && object.deployedIndex !== null)
      ? DeployedIndex.fromPartial(object.deployedIndex)
      : undefined;
    return message;
  },
};

function createBaseDeployIndexOperationMetadata(): DeployIndexOperationMetadata {
  return { genericMetadata: undefined, deployedIndexId: "" };
}

export const DeployIndexOperationMetadata: MessageFns<DeployIndexOperationMetadata> = {
  encode(message: DeployIndexOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    if (message.deployedIndexId !== "") {
      writer.uint32(18).string(message.deployedIndexId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployIndexOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployIndexOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deployedIndexId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployIndexOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
      deployedIndexId: isSet(object.deployedIndexId) ? globalThis.String(object.deployedIndexId) : "",
    };
  },

  toJSON(message: DeployIndexOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    if (message.deployedIndexId !== "") {
      obj.deployedIndexId = message.deployedIndexId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeployIndexOperationMetadata>): DeployIndexOperationMetadata {
    return DeployIndexOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployIndexOperationMetadata>): DeployIndexOperationMetadata {
    const message = createBaseDeployIndexOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    message.deployedIndexId = object.deployedIndexId ?? "";
    return message;
  },
};

function createBaseUndeployIndexRequest(): UndeployIndexRequest {
  return { indexEndpoint: "", deployedIndexId: "" };
}

export const UndeployIndexRequest: MessageFns<UndeployIndexRequest> = {
  encode(message: UndeployIndexRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.indexEndpoint !== "") {
      writer.uint32(10).string(message.indexEndpoint);
    }
    if (message.deployedIndexId !== "") {
      writer.uint32(18).string(message.deployedIndexId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeployIndexRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeployIndexRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.indexEndpoint = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deployedIndexId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeployIndexRequest {
    return {
      indexEndpoint: isSet(object.indexEndpoint) ? globalThis.String(object.indexEndpoint) : "",
      deployedIndexId: isSet(object.deployedIndexId) ? globalThis.String(object.deployedIndexId) : "",
    };
  },

  toJSON(message: UndeployIndexRequest): unknown {
    const obj: any = {};
    if (message.indexEndpoint !== "") {
      obj.indexEndpoint = message.indexEndpoint;
    }
    if (message.deployedIndexId !== "") {
      obj.deployedIndexId = message.deployedIndexId;
    }
    return obj;
  },

  create(base?: DeepPartial<UndeployIndexRequest>): UndeployIndexRequest {
    return UndeployIndexRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeployIndexRequest>): UndeployIndexRequest {
    const message = createBaseUndeployIndexRequest();
    message.indexEndpoint = object.indexEndpoint ?? "";
    message.deployedIndexId = object.deployedIndexId ?? "";
    return message;
  },
};

function createBaseUndeployIndexResponse(): UndeployIndexResponse {
  return {};
}

export const UndeployIndexResponse: MessageFns<UndeployIndexResponse> = {
  encode(_: UndeployIndexResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeployIndexResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeployIndexResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UndeployIndexResponse {
    return {};
  },

  toJSON(_: UndeployIndexResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UndeployIndexResponse>): UndeployIndexResponse {
    return UndeployIndexResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UndeployIndexResponse>): UndeployIndexResponse {
    const message = createBaseUndeployIndexResponse();
    return message;
  },
};

function createBaseUndeployIndexOperationMetadata(): UndeployIndexOperationMetadata {
  return { genericMetadata: undefined };
}

export const UndeployIndexOperationMetadata: MessageFns<UndeployIndexOperationMetadata> = {
  encode(message: UndeployIndexOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeployIndexOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeployIndexOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeployIndexOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: UndeployIndexOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<UndeployIndexOperationMetadata>): UndeployIndexOperationMetadata {
    return UndeployIndexOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeployIndexOperationMetadata>): UndeployIndexOperationMetadata {
    const message = createBaseUndeployIndexOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseMutateDeployedIndexRequest(): MutateDeployedIndexRequest {
  return { indexEndpoint: "", deployedIndex: undefined };
}

export const MutateDeployedIndexRequest: MessageFns<MutateDeployedIndexRequest> = {
  encode(message: MutateDeployedIndexRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.indexEndpoint !== "") {
      writer.uint32(10).string(message.indexEndpoint);
    }
    if (message.deployedIndex !== undefined) {
      DeployedIndex.encode(message.deployedIndex, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateDeployedIndexRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateDeployedIndexRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.indexEndpoint = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deployedIndex = DeployedIndex.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateDeployedIndexRequest {
    return {
      indexEndpoint: isSet(object.indexEndpoint) ? globalThis.String(object.indexEndpoint) : "",
      deployedIndex: isSet(object.deployedIndex) ? DeployedIndex.fromJSON(object.deployedIndex) : undefined,
    };
  },

  toJSON(message: MutateDeployedIndexRequest): unknown {
    const obj: any = {};
    if (message.indexEndpoint !== "") {
      obj.indexEndpoint = message.indexEndpoint;
    }
    if (message.deployedIndex !== undefined) {
      obj.deployedIndex = DeployedIndex.toJSON(message.deployedIndex);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateDeployedIndexRequest>): MutateDeployedIndexRequest {
    return MutateDeployedIndexRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateDeployedIndexRequest>): MutateDeployedIndexRequest {
    const message = createBaseMutateDeployedIndexRequest();
    message.indexEndpoint = object.indexEndpoint ?? "";
    message.deployedIndex = (object.deployedIndex !== undefined && object.deployedIndex !== null)
      ? DeployedIndex.fromPartial(object.deployedIndex)
      : undefined;
    return message;
  },
};

function createBaseMutateDeployedIndexResponse(): MutateDeployedIndexResponse {
  return { deployedIndex: undefined };
}

export const MutateDeployedIndexResponse: MessageFns<MutateDeployedIndexResponse> = {
  encode(message: MutateDeployedIndexResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployedIndex !== undefined) {
      DeployedIndex.encode(message.deployedIndex, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateDeployedIndexResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateDeployedIndexResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deployedIndex = DeployedIndex.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateDeployedIndexResponse {
    return { deployedIndex: isSet(object.deployedIndex) ? DeployedIndex.fromJSON(object.deployedIndex) : undefined };
  },

  toJSON(message: MutateDeployedIndexResponse): unknown {
    const obj: any = {};
    if (message.deployedIndex !== undefined) {
      obj.deployedIndex = DeployedIndex.toJSON(message.deployedIndex);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateDeployedIndexResponse>): MutateDeployedIndexResponse {
    return MutateDeployedIndexResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateDeployedIndexResponse>): MutateDeployedIndexResponse {
    const message = createBaseMutateDeployedIndexResponse();
    message.deployedIndex = (object.deployedIndex !== undefined && object.deployedIndex !== null)
      ? DeployedIndex.fromPartial(object.deployedIndex)
      : undefined;
    return message;
  },
};

function createBaseMutateDeployedIndexOperationMetadata(): MutateDeployedIndexOperationMetadata {
  return { genericMetadata: undefined, deployedIndexId: "" };
}

export const MutateDeployedIndexOperationMetadata: MessageFns<MutateDeployedIndexOperationMetadata> = {
  encode(message: MutateDeployedIndexOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    if (message.deployedIndexId !== "") {
      writer.uint32(18).string(message.deployedIndexId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateDeployedIndexOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateDeployedIndexOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deployedIndexId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateDeployedIndexOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
      deployedIndexId: isSet(object.deployedIndexId) ? globalThis.String(object.deployedIndexId) : "",
    };
  },

  toJSON(message: MutateDeployedIndexOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    if (message.deployedIndexId !== "") {
      obj.deployedIndexId = message.deployedIndexId;
    }
    return obj;
  },

  create(base?: DeepPartial<MutateDeployedIndexOperationMetadata>): MutateDeployedIndexOperationMetadata {
    return MutateDeployedIndexOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateDeployedIndexOperationMetadata>): MutateDeployedIndexOperationMetadata {
    const message = createBaseMutateDeployedIndexOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    message.deployedIndexId = object.deployedIndexId ?? "";
    return message;
  },
};

/** A service for managing Vertex AI's IndexEndpoints. */
export type IndexEndpointServiceDefinition = typeof IndexEndpointServiceDefinition;
export const IndexEndpointServiceDefinition = {
  name: "IndexEndpointService",
  fullName: "google.cloud.aiplatform.v1.IndexEndpointService",
  methods: {
    /** Creates an IndexEndpoint. */
    createIndexEndpoint: {
      name: "CreateIndexEndpoint",
      requestType: CreateIndexEndpointRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              53,
              10,
              13,
              73,
              110,
              100,
              101,
              120,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              18,
              36,
              67,
              114,
              101,
              97,
              116,
              101,
              73,
              110,
              100,
              101,
              120,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              21,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              105,
              110,
              100,
              101,
              120,
              95,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              68,
              58,
              14,
              105,
              110,
              100,
              101,
              120,
              95,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              34,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              100,
              101,
              120,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets an IndexEndpoint. */
    getIndexEndpoint: {
      name: "GetIndexEndpoint",
      requestType: GetIndexEndpointRequest,
      requestStream: false,
      responseType: IndexEndpoint,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              100,
              101,
              120,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists IndexEndpoints in a Location. */
    listIndexEndpoints: {
      name: "ListIndexEndpoints",
      requestType: ListIndexEndpointsRequest,
      requestStream: false,
      responseType: ListIndexEndpointsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              100,
              101,
              120,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an IndexEndpoint. */
    updateIndexEndpoint: {
      name: "UpdateIndexEndpoint",
      requestType: UpdateIndexEndpointRequest,
      requestStream: false,
      responseType: IndexEndpoint,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              26,
              105,
              110,
              100,
              101,
              120,
              95,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              83,
              58,
              14,
              105,
              110,
              100,
              101,
              120,
              95,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              50,
              65,
              47,
              118,
              49,
              47,
              123,
              105,
              110,
              100,
              101,
              120,
              95,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              100,
              101,
              120,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an IndexEndpoint. */
    deleteIndexEndpoint: {
      name: "DeleteIndexEndpoint",
      requestType: DeleteIndexEndpointRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              42,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              100,
              101,
              120,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deploys an Index into this IndexEndpoint, creating a DeployedIndex within
     * it.
     * Only non-empty Indexes can be deployed.
     */
    deployIndex: {
      name: "DeployIndex",
      requestType: DeployIndexRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              51,
              10,
              19,
              68,
              101,
              112,
              108,
              111,
              121,
              73,
              110,
              100,
              101,
              120,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              28,
              68,
              101,
              112,
              108,
              111,
              121,
              73,
              110,
              100,
              101,
              120,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              29,
              105,
              110,
              100,
              101,
              120,
              95,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              44,
              100,
              101,
              112,
              108,
              111,
              121,
              101,
              100,
              95,
              105,
              110,
              100,
              101,
              120,
            ]),
          ],
          578365826: [
            Buffer.from([
              77,
              58,
              1,
              42,
              34,
              72,
              47,
              118,
              49,
              47,
              123,
              105,
              110,
              100,
              101,
              120,
              95,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              100,
              101,
              120,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              112,
              108,
              111,
              121,
              73,
              110,
              100,
              101,
              120,
            ]),
          ],
        },
      },
    },
    /**
     * Undeploys an Index from an IndexEndpoint, removing a DeployedIndex from it,
     * and freeing all resources it's using.
     */
    undeployIndex: {
      name: "UndeployIndex",
      requestType: UndeployIndexRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              55,
              10,
              21,
              85,
              110,
              100,
              101,
              112,
              108,
              111,
              121,
              73,
              110,
              100,
              101,
              120,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              30,
              85,
              110,
              100,
              101,
              112,
              108,
              111,
              121,
              73,
              110,
              100,
              101,
              120,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              32,
              105,
              110,
              100,
              101,
              120,
              95,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              44,
              100,
              101,
              112,
              108,
              111,
              121,
              101,
              100,
              95,
              105,
              110,
              100,
              101,
              120,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              79,
              58,
              1,
              42,
              34,
              74,
              47,
              118,
              49,
              47,
              123,
              105,
              110,
              100,
              101,
              120,
              95,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              100,
              101,
              120,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              100,
              101,
              112,
              108,
              111,
              121,
              73,
              110,
              100,
              101,
              120,
            ]),
          ],
        },
      },
    },
    /** Update an existing DeployedIndex under an IndexEndpoint. */
    mutateDeployedIndex: {
      name: "MutateDeployedIndex",
      requestType: MutateDeployedIndexRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              67,
              10,
              27,
              77,
              117,
              116,
              97,
              116,
              101,
              68,
              101,
              112,
              108,
              111,
              121,
              101,
              100,
              73,
              110,
              100,
              101,
              120,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              36,
              77,
              117,
              116,
              97,
              116,
              101,
              68,
              101,
              112,
              108,
              111,
              121,
              101,
              100,
              73,
              110,
              100,
              101,
              120,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              29,
              105,
              110,
              100,
              101,
              120,
              95,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              44,
              100,
              101,
              112,
              108,
              111,
              121,
              101,
              100,
              95,
              105,
              110,
              100,
              101,
              120,
            ]),
          ],
          578365826: [
            Buffer.from([
              98,
              58,
              14,
              100,
              101,
              112,
              108,
              111,
              121,
              101,
              100,
              95,
              105,
              110,
              100,
              101,
              120,
              34,
              80,
              47,
              118,
              49,
              47,
              123,
              105,
              110,
              100,
              101,
              120,
              95,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              100,
              101,
              120,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              109,
              117,
              116,
              97,
              116,
              101,
              68,
              101,
              112,
              108,
              111,
              121,
              101,
              100,
              73,
              110,
              100,
              101,
              120,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface IndexEndpointServiceImplementation<CallContextExt = {}> {
  /** Creates an IndexEndpoint. */
  createIndexEndpoint(
    request: CreateIndexEndpointRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets an IndexEndpoint. */
  getIndexEndpoint(
    request: GetIndexEndpointRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<IndexEndpoint>>;
  /** Lists IndexEndpoints in a Location. */
  listIndexEndpoints(
    request: ListIndexEndpointsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListIndexEndpointsResponse>>;
  /** Updates an IndexEndpoint. */
  updateIndexEndpoint(
    request: UpdateIndexEndpointRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<IndexEndpoint>>;
  /** Deletes an IndexEndpoint. */
  deleteIndexEndpoint(
    request: DeleteIndexEndpointRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deploys an Index into this IndexEndpoint, creating a DeployedIndex within
   * it.
   * Only non-empty Indexes can be deployed.
   */
  deployIndex(request: DeployIndexRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Undeploys an Index from an IndexEndpoint, removing a DeployedIndex from it,
   * and freeing all resources it's using.
   */
  undeployIndex(request: UndeployIndexRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Update an existing DeployedIndex under an IndexEndpoint. */
  mutateDeployedIndex(
    request: MutateDeployedIndexRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface IndexEndpointServiceClient<CallOptionsExt = {}> {
  /** Creates an IndexEndpoint. */
  createIndexEndpoint(
    request: DeepPartial<CreateIndexEndpointRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets an IndexEndpoint. */
  getIndexEndpoint(
    request: DeepPartial<GetIndexEndpointRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<IndexEndpoint>;
  /** Lists IndexEndpoints in a Location. */
  listIndexEndpoints(
    request: DeepPartial<ListIndexEndpointsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListIndexEndpointsResponse>;
  /** Updates an IndexEndpoint. */
  updateIndexEndpoint(
    request: DeepPartial<UpdateIndexEndpointRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<IndexEndpoint>;
  /** Deletes an IndexEndpoint. */
  deleteIndexEndpoint(
    request: DeepPartial<DeleteIndexEndpointRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deploys an Index into this IndexEndpoint, creating a DeployedIndex within
   * it.
   * Only non-empty Indexes can be deployed.
   */
  deployIndex(request: DeepPartial<DeployIndexRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Undeploys an Index from an IndexEndpoint, removing a DeployedIndex from it,
   * and freeing all resources it's using.
   */
  undeployIndex(request: DeepPartial<UndeployIndexRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Update an existing DeployedIndex under an IndexEndpoint. */
  mutateDeployedIndex(
    request: DeepPartial<MutateDeployedIndexRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
