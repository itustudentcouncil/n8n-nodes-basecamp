// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.aiplatform.v1";

/** A list of boolean values. */
export interface BoolArray {
  /** A list of bool values. */
  values: boolean[];
}

/** A list of double values. */
export interface DoubleArray {
  /** A list of double values. */
  values: number[];
}

/** A list of int64 values. */
export interface Int64Array {
  /** A list of int64 values. */
  values: Long[];
}

/** A list of string values. */
export interface StringArray {
  /** A list of string values. */
  values: string[];
}

/** A tensor value type. */
export interface Tensor {
  /** The data type of tensor. */
  dtype: Tensor_DataType;
  /** Shape of the tensor. */
  shape: Long[];
  /**
   * Type specific representations that make it easy to create tensor protos in
   * all languages.  Only the representation corresponding to "dtype" can
   * be set.  The values hold the flattened representation of the tensor in
   * row major order.
   *
   * [BOOL][google.aiplatform.master.Tensor.DataType.BOOL]
   */
  boolVal: boolean[];
  /** [STRING][google.aiplatform.master.Tensor.DataType.STRING] */
  stringVal: string[];
  /** [STRING][google.aiplatform.master.Tensor.DataType.STRING] */
  bytesVal: Buffer[];
  /** [FLOAT][google.aiplatform.master.Tensor.DataType.FLOAT] */
  floatVal: number[];
  /** [DOUBLE][google.aiplatform.master.Tensor.DataType.DOUBLE] */
  doubleVal: number[];
  /**
   * [INT_8][google.aiplatform.master.Tensor.DataType.INT8]
   * [INT_16][google.aiplatform.master.Tensor.DataType.INT16]
   * [INT_32][google.aiplatform.master.Tensor.DataType.INT32]
   */
  intVal: number[];
  /** [INT64][google.aiplatform.master.Tensor.DataType.INT64] */
  int64Val: Long[];
  /**
   * [UINT8][google.aiplatform.master.Tensor.DataType.UINT8]
   * [UINT16][google.aiplatform.master.Tensor.DataType.UINT16]
   * [UINT32][google.aiplatform.master.Tensor.DataType.UINT32]
   */
  uintVal: number[];
  /** [UINT64][google.aiplatform.master.Tensor.DataType.UINT64] */
  uint64Val: Long[];
  /** A list of tensor values. */
  listVal: Tensor[];
  /** A map of string to tensor. */
  structVal: { [key: string]: Tensor };
  /** Serialized raw tensor content. */
  tensorVal: Buffer;
}

/** Data type of the tensor. */
export enum Tensor_DataType {
  /**
   * DATA_TYPE_UNSPECIFIED - Not a legal value for DataType. Used to indicate a DataType field has not
   * been set.
   */
  DATA_TYPE_UNSPECIFIED = 0,
  /**
   * BOOL - Data types that all computation devices are expected to be
   * capable to support.
   */
  BOOL = 1,
  STRING = 2,
  FLOAT = 3,
  DOUBLE = 4,
  INT8 = 5,
  INT16 = 6,
  INT32 = 7,
  INT64 = 8,
  UINT8 = 9,
  UINT16 = 10,
  UINT32 = 11,
  UINT64 = 12,
  UNRECOGNIZED = -1,
}

export function tensor_DataTypeFromJSON(object: any): Tensor_DataType {
  switch (object) {
    case 0:
    case "DATA_TYPE_UNSPECIFIED":
      return Tensor_DataType.DATA_TYPE_UNSPECIFIED;
    case 1:
    case "BOOL":
      return Tensor_DataType.BOOL;
    case 2:
    case "STRING":
      return Tensor_DataType.STRING;
    case 3:
    case "FLOAT":
      return Tensor_DataType.FLOAT;
    case 4:
    case "DOUBLE":
      return Tensor_DataType.DOUBLE;
    case 5:
    case "INT8":
      return Tensor_DataType.INT8;
    case 6:
    case "INT16":
      return Tensor_DataType.INT16;
    case 7:
    case "INT32":
      return Tensor_DataType.INT32;
    case 8:
    case "INT64":
      return Tensor_DataType.INT64;
    case 9:
    case "UINT8":
      return Tensor_DataType.UINT8;
    case 10:
    case "UINT16":
      return Tensor_DataType.UINT16;
    case 11:
    case "UINT32":
      return Tensor_DataType.UINT32;
    case 12:
    case "UINT64":
      return Tensor_DataType.UINT64;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Tensor_DataType.UNRECOGNIZED;
  }
}

export function tensor_DataTypeToJSON(object: Tensor_DataType): string {
  switch (object) {
    case Tensor_DataType.DATA_TYPE_UNSPECIFIED:
      return "DATA_TYPE_UNSPECIFIED";
    case Tensor_DataType.BOOL:
      return "BOOL";
    case Tensor_DataType.STRING:
      return "STRING";
    case Tensor_DataType.FLOAT:
      return "FLOAT";
    case Tensor_DataType.DOUBLE:
      return "DOUBLE";
    case Tensor_DataType.INT8:
      return "INT8";
    case Tensor_DataType.INT16:
      return "INT16";
    case Tensor_DataType.INT32:
      return "INT32";
    case Tensor_DataType.INT64:
      return "INT64";
    case Tensor_DataType.UINT8:
      return "UINT8";
    case Tensor_DataType.UINT16:
      return "UINT16";
    case Tensor_DataType.UINT32:
      return "UINT32";
    case Tensor_DataType.UINT64:
      return "UINT64";
    case Tensor_DataType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Tensor_StructValEntry {
  key: string;
  value: Tensor | undefined;
}

function createBaseBoolArray(): BoolArray {
  return { values: [] };
}

export const BoolArray: MessageFns<BoolArray> = {
  encode(message: BoolArray, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.values) {
      writer.bool(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BoolArray {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBoolArray();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.values.push(reader.bool());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.values.push(reader.bool());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BoolArray {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.Boolean(e)) : [],
    };
  },

  toJSON(message: BoolArray): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create(base?: DeepPartial<BoolArray>): BoolArray {
    return BoolArray.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BoolArray>): BoolArray {
    const message = createBaseBoolArray();
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseDoubleArray(): DoubleArray {
  return { values: [] };
}

export const DoubleArray: MessageFns<DoubleArray> = {
  encode(message: DoubleArray, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.values) {
      writer.double(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DoubleArray {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDoubleArray();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 9) {
            message.values.push(reader.double());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.values.push(reader.double());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DoubleArray {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: DoubleArray): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create(base?: DeepPartial<DoubleArray>): DoubleArray {
    return DoubleArray.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DoubleArray>): DoubleArray {
    const message = createBaseDoubleArray();
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseInt64Array(): Int64Array {
  return { values: [] };
}

export const Int64Array: MessageFns<Int64Array> = {
  encode(message: Int64Array, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.values) {
      writer.int64(v.toString());
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Int64Array {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInt64Array();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.values.push(Long.fromString(reader.int64().toString()));

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.values.push(Long.fromString(reader.int64().toString()));
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Int64Array {
    return { values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => Long.fromValue(e)) : [] };
  },

  toJSON(message: Int64Array): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values.map((e) => (e || Long.ZERO).toString());
    }
    return obj;
  },

  create(base?: DeepPartial<Int64Array>): Int64Array {
    return Int64Array.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Int64Array>): Int64Array {
    const message = createBaseInt64Array();
    message.values = object.values?.map((e) => Long.fromValue(e)) || [];
    return message;
  },
};

function createBaseStringArray(): StringArray {
  return { values: [] };
}

export const StringArray: MessageFns<StringArray> = {
  encode(message: StringArray, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StringArray {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStringArray();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.values.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StringArray {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: StringArray): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create(base?: DeepPartial<StringArray>): StringArray {
    return StringArray.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StringArray>): StringArray {
    const message = createBaseStringArray();
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseTensor(): Tensor {
  return {
    dtype: 0,
    shape: [],
    boolVal: [],
    stringVal: [],
    bytesVal: [],
    floatVal: [],
    doubleVal: [],
    intVal: [],
    int64Val: [],
    uintVal: [],
    uint64Val: [],
    listVal: [],
    structVal: {},
    tensorVal: Buffer.alloc(0),
  };
}

export const Tensor: MessageFns<Tensor> = {
  encode(message: Tensor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dtype !== 0) {
      writer.uint32(8).int32(message.dtype);
    }
    writer.uint32(18).fork();
    for (const v of message.shape) {
      writer.int64(v.toString());
    }
    writer.join();
    writer.uint32(26).fork();
    for (const v of message.boolVal) {
      writer.bool(v);
    }
    writer.join();
    for (const v of message.stringVal) {
      writer.uint32(114).string(v!);
    }
    for (const v of message.bytesVal) {
      writer.uint32(122).bytes(v!);
    }
    writer.uint32(42).fork();
    for (const v of message.floatVal) {
      writer.float(v);
    }
    writer.join();
    writer.uint32(50).fork();
    for (const v of message.doubleVal) {
      writer.double(v);
    }
    writer.join();
    writer.uint32(58).fork();
    for (const v of message.intVal) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(66).fork();
    for (const v of message.int64Val) {
      writer.int64(v.toString());
    }
    writer.join();
    writer.uint32(74).fork();
    for (const v of message.uintVal) {
      writer.uint32(v);
    }
    writer.join();
    writer.uint32(82).fork();
    for (const v of message.uint64Val) {
      writer.uint64(v.toString());
    }
    writer.join();
    for (const v of message.listVal) {
      Tensor.encode(v!, writer.uint32(90).fork()).join();
    }
    Object.entries(message.structVal).forEach(([key, value]) => {
      Tensor_StructValEntry.encode({ key: key as any, value }, writer.uint32(98).fork()).join();
    });
    if (message.tensorVal.length !== 0) {
      writer.uint32(106).bytes(message.tensorVal);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tensor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTensor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.dtype = reader.int32() as any;
          continue;
        case 2:
          if (tag === 16) {
            message.shape.push(Long.fromString(reader.int64().toString()));

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.shape.push(Long.fromString(reader.int64().toString()));
            }

            continue;
          }

          break;
        case 3:
          if (tag === 24) {
            message.boolVal.push(reader.bool());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.boolVal.push(reader.bool());
            }

            continue;
          }

          break;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.stringVal.push(reader.string());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.bytesVal.push(Buffer.from(reader.bytes()));
          continue;
        case 5:
          if (tag === 45) {
            message.floatVal.push(reader.float());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.floatVal.push(reader.float());
            }

            continue;
          }

          break;
        case 6:
          if (tag === 49) {
            message.doubleVal.push(reader.double());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.doubleVal.push(reader.double());
            }

            continue;
          }

          break;
        case 7:
          if (tag === 56) {
            message.intVal.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.intVal.push(reader.int32());
            }

            continue;
          }

          break;
        case 8:
          if (tag === 64) {
            message.int64Val.push(Long.fromString(reader.int64().toString()));

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.int64Val.push(Long.fromString(reader.int64().toString()));
            }

            continue;
          }

          break;
        case 9:
          if (tag === 72) {
            message.uintVal.push(reader.uint32());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.uintVal.push(reader.uint32());
            }

            continue;
          }

          break;
        case 10:
          if (tag === 80) {
            message.uint64Val.push(Long.fromString(reader.uint64().toString(), true));

            continue;
          }

          if (tag === 82) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.uint64Val.push(Long.fromString(reader.uint64().toString(), true));
            }

            continue;
          }

          break;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.listVal.push(Tensor.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          const entry12 = Tensor_StructValEntry.decode(reader, reader.uint32());
          if (entry12.value !== undefined) {
            message.structVal[entry12.key] = entry12.value;
          }
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.tensorVal = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tensor {
    return {
      dtype: isSet(object.dtype) ? tensor_DataTypeFromJSON(object.dtype) : 0,
      shape: globalThis.Array.isArray(object?.shape) ? object.shape.map((e: any) => Long.fromValue(e)) : [],
      boolVal: globalThis.Array.isArray(object?.boolVal) ? object.boolVal.map((e: any) => globalThis.Boolean(e)) : [],
      stringVal: globalThis.Array.isArray(object?.stringVal)
        ? object.stringVal.map((e: any) => globalThis.String(e))
        : [],
      bytesVal: globalThis.Array.isArray(object?.bytesVal)
        ? object.bytesVal.map((e: any) => Buffer.from(bytesFromBase64(e)))
        : [],
      floatVal: globalThis.Array.isArray(object?.floatVal) ? object.floatVal.map((e: any) => globalThis.Number(e)) : [],
      doubleVal: globalThis.Array.isArray(object?.doubleVal)
        ? object.doubleVal.map((e: any) => globalThis.Number(e))
        : [],
      intVal: globalThis.Array.isArray(object?.intVal) ? object.intVal.map((e: any) => globalThis.Number(e)) : [],
      int64Val: globalThis.Array.isArray(object?.int64Val) ? object.int64Val.map((e: any) => Long.fromValue(e)) : [],
      uintVal: globalThis.Array.isArray(object?.uintVal) ? object.uintVal.map((e: any) => globalThis.Number(e)) : [],
      uint64Val: globalThis.Array.isArray(object?.uint64Val) ? object.uint64Val.map((e: any) => Long.fromValue(e)) : [],
      listVal: globalThis.Array.isArray(object?.listVal) ? object.listVal.map((e: any) => Tensor.fromJSON(e)) : [],
      structVal: isObject(object.structVal)
        ? Object.entries(object.structVal).reduce<{ [key: string]: Tensor }>((acc, [key, value]) => {
          acc[key] = Tensor.fromJSON(value);
          return acc;
        }, {})
        : {},
      tensorVal: isSet(object.tensorVal) ? Buffer.from(bytesFromBase64(object.tensorVal)) : Buffer.alloc(0),
    };
  },

  toJSON(message: Tensor): unknown {
    const obj: any = {};
    if (message.dtype !== 0) {
      obj.dtype = tensor_DataTypeToJSON(message.dtype);
    }
    if (message.shape?.length) {
      obj.shape = message.shape.map((e) => (e || Long.ZERO).toString());
    }
    if (message.boolVal?.length) {
      obj.boolVal = message.boolVal;
    }
    if (message.stringVal?.length) {
      obj.stringVal = message.stringVal;
    }
    if (message.bytesVal?.length) {
      obj.bytesVal = message.bytesVal.map((e) => base64FromBytes(e));
    }
    if (message.floatVal?.length) {
      obj.floatVal = message.floatVal;
    }
    if (message.doubleVal?.length) {
      obj.doubleVal = message.doubleVal;
    }
    if (message.intVal?.length) {
      obj.intVal = message.intVal.map((e) => Math.round(e));
    }
    if (message.int64Val?.length) {
      obj.int64Val = message.int64Val.map((e) => (e || Long.ZERO).toString());
    }
    if (message.uintVal?.length) {
      obj.uintVal = message.uintVal.map((e) => Math.round(e));
    }
    if (message.uint64Val?.length) {
      obj.uint64Val = message.uint64Val.map((e) => (e || Long.UZERO).toString());
    }
    if (message.listVal?.length) {
      obj.listVal = message.listVal.map((e) => Tensor.toJSON(e));
    }
    if (message.structVal) {
      const entries = Object.entries(message.structVal);
      if (entries.length > 0) {
        obj.structVal = {};
        entries.forEach(([k, v]) => {
          obj.structVal[k] = Tensor.toJSON(v);
        });
      }
    }
    if (message.tensorVal.length !== 0) {
      obj.tensorVal = base64FromBytes(message.tensorVal);
    }
    return obj;
  },

  create(base?: DeepPartial<Tensor>): Tensor {
    return Tensor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Tensor>): Tensor {
    const message = createBaseTensor();
    message.dtype = object.dtype ?? 0;
    message.shape = object.shape?.map((e) => Long.fromValue(e)) || [];
    message.boolVal = object.boolVal?.map((e) => e) || [];
    message.stringVal = object.stringVal?.map((e) => e) || [];
    message.bytesVal = object.bytesVal?.map((e) => e) || [];
    message.floatVal = object.floatVal?.map((e) => e) || [];
    message.doubleVal = object.doubleVal?.map((e) => e) || [];
    message.intVal = object.intVal?.map((e) => e) || [];
    message.int64Val = object.int64Val?.map((e) => Long.fromValue(e)) || [];
    message.uintVal = object.uintVal?.map((e) => e) || [];
    message.uint64Val = object.uint64Val?.map((e) => Long.fromValue(e)) || [];
    message.listVal = object.listVal?.map((e) => Tensor.fromPartial(e)) || [];
    message.structVal = Object.entries(object.structVal ?? {}).reduce<{ [key: string]: Tensor }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = Tensor.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.tensorVal = object.tensorVal ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseTensor_StructValEntry(): Tensor_StructValEntry {
  return { key: "", value: undefined };
}

export const Tensor_StructValEntry: MessageFns<Tensor_StructValEntry> = {
  encode(message: Tensor_StructValEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Tensor.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tensor_StructValEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTensor_StructValEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Tensor.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tensor_StructValEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Tensor.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Tensor_StructValEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Tensor.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Tensor_StructValEntry>): Tensor_StructValEntry {
    return Tensor_StructValEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Tensor_StructValEntry>): Tensor_StructValEntry {
    const message = createBaseTensor_StructValEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Tensor.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
