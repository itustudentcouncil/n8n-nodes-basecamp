// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/recommender/v1beta1/insight_type_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.recommender.v1beta1";

/** Configuration for an InsightType. */
export interface InsightTypeConfig {
  /**
   * Name of insight type config.
   * Eg,
   * projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config
   */
  name: string;
  /**
   * InsightTypeGenerationConfig which configures the generation of
   * insights for this insight type.
   */
  insightTypeGenerationConfig:
    | InsightTypeGenerationConfig
    | undefined;
  /**
   * Fingerprint of the InsightTypeConfig. Provides optimistic locking when
   * updating.
   */
  etag: string;
  /** Last time when the config was updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. Immutable. The revision ID of the config.
   * A new revision is committed whenever the config is changed in any way.
   * The format is an 8-character hexadecimal string.
   */
  revisionId: string;
  /**
   * Allows clients to store small amounts of arbitrary data. Annotations must
   * follow the Kubernetes syntax.
   * The total size of all keys and values combined is limited to 256k.
   * Key can have 2 segments: prefix (optional) and name (required),
   * separated by a slash (/).
   * Prefix must be a DNS subdomain.
   * Name must be 63 characters or less, begin and end with alphanumerics,
   * with dashes (-), underscores (_), dots (.), and alphanumerics between.
   */
  annotations: { [key: string]: string };
  /**
   * A user-settable field to provide a human-readable name to be used in user
   * interfaces.
   */
  displayName: string;
}

export interface InsightTypeConfig_AnnotationsEntry {
  key: string;
  value: string;
}

/**
 * A configuration to customize the generation of insights.
 * Eg, customizing the lookback period considered when generating a
 * insight.
 */
export interface InsightTypeGenerationConfig {
  /**
   * Parameters for this InsightTypeGenerationConfig. These configs can be used
   * by or are applied to all subtypes.
   */
  params: { [key: string]: any } | undefined;
}

function createBaseInsightTypeConfig(): InsightTypeConfig {
  return {
    name: "",
    insightTypeGenerationConfig: undefined,
    etag: "",
    updateTime: undefined,
    revisionId: "",
    annotations: {},
    displayName: "",
  };
}

export const InsightTypeConfig: MessageFns<InsightTypeConfig> = {
  encode(message: InsightTypeConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.insightTypeGenerationConfig !== undefined) {
      InsightTypeGenerationConfig.encode(message.insightTypeGenerationConfig, writer.uint32(18).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(26).string(message.etag);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.revisionId !== "") {
      writer.uint32(42).string(message.revisionId);
    }
    Object.entries(message.annotations).forEach(([key, value]) => {
      InsightTypeConfig_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.displayName !== "") {
      writer.uint32(58).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsightTypeConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsightTypeConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.insightTypeGenerationConfig = InsightTypeGenerationConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.revisionId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = InsightTypeConfig_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.annotations[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsightTypeConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      insightTypeGenerationConfig: isSet(object.insightTypeGenerationConfig)
        ? InsightTypeGenerationConfig.fromJSON(object.insightTypeGenerationConfig)
        : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      revisionId: isSet(object.revisionId) ? globalThis.String(object.revisionId) : "",
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: InsightTypeConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.insightTypeGenerationConfig !== undefined) {
      obj.insightTypeGenerationConfig = InsightTypeGenerationConfig.toJSON(message.insightTypeGenerationConfig);
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.revisionId !== "") {
      obj.revisionId = message.revisionId;
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<InsightTypeConfig>): InsightTypeConfig {
    return InsightTypeConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsightTypeConfig>): InsightTypeConfig {
    const message = createBaseInsightTypeConfig();
    message.name = object.name ?? "";
    message.insightTypeGenerationConfig =
      (object.insightTypeGenerationConfig !== undefined && object.insightTypeGenerationConfig !== null)
        ? InsightTypeGenerationConfig.fromPartial(object.insightTypeGenerationConfig)
        : undefined;
    message.etag = object.etag ?? "";
    message.updateTime = object.updateTime ?? undefined;
    message.revisionId = object.revisionId ?? "";
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseInsightTypeConfig_AnnotationsEntry(): InsightTypeConfig_AnnotationsEntry {
  return { key: "", value: "" };
}

export const InsightTypeConfig_AnnotationsEntry: MessageFns<InsightTypeConfig_AnnotationsEntry> = {
  encode(message: InsightTypeConfig_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsightTypeConfig_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsightTypeConfig_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsightTypeConfig_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: InsightTypeConfig_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<InsightTypeConfig_AnnotationsEntry>): InsightTypeConfig_AnnotationsEntry {
    return InsightTypeConfig_AnnotationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsightTypeConfig_AnnotationsEntry>): InsightTypeConfig_AnnotationsEntry {
    const message = createBaseInsightTypeConfig_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseInsightTypeGenerationConfig(): InsightTypeGenerationConfig {
  return { params: undefined };
}

export const InsightTypeGenerationConfig: MessageFns<InsightTypeGenerationConfig> = {
  encode(message: InsightTypeGenerationConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Struct.encode(Struct.wrap(message.params), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsightTypeGenerationConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsightTypeGenerationConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsightTypeGenerationConfig {
    return { params: isObject(object.params) ? object.params : undefined };
  },

  toJSON(message: InsightTypeGenerationConfig): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = message.params;
    }
    return obj;
  },

  create(base?: DeepPartial<InsightTypeGenerationConfig>): InsightTypeGenerationConfig {
    return InsightTypeGenerationConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsightTypeGenerationConfig>): InsightTypeGenerationConfig {
    const message = createBaseInsightTypeGenerationConfig();
    message.params = object.params ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
