// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/paymentgateway/issuerswitch/v1/participants.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { AccountReference } from "./common_fields.js";

export const protobufPackage = "google.cloud.paymentgateway.issuerswitch.v1";

/**
 * Request for the
 * [FetchParticipant][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.FetchParticipant]
 * method.
 */
export interface FetchParticipantRequest {
  /**
   * Required. The parent resource for the participants. The format is
   * `projects/{project}`.
   */
  parent: string;
  /** Required. The account details of the issuer participant. */
  accountReference: AccountReference | undefined;
}

/**
 * A customer of the bank who participates in transactions processed by the
 * issuer switch.
 */
export interface IssuerParticipant {
  /**
   * Required. The account details of the issuer participant. Only the
   * account_number and ifsc fields will be used.
   */
  accountReference:
    | AccountReference
    | undefined;
  /** Output only. The mobile number of the participant. */
  mobileNumber: string;
  /** Output only. The current state of the participant. */
  state: IssuerParticipant_State;
  /** Optional. Additional metadata about the participant. */
  metadata:
    | IssuerParticipant_Metadata
    | undefined;
  /** Output only. The current count of consecutive incorrect MPIN attempts. */
  mpinFailureCount: number;
  /**
   * Output only. The time when participant's MPIN got locked due to too many
   * incorrect attempts.
   */
  mpinLockedTime:
    | Date
    | undefined;
  /** Output only. The time when the participant's account was onboarded to PGIS. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time when the participant was last updated. */
  updateTime: Date | undefined;
}

/** The state of the participant. */
export enum IssuerParticipant_State {
  /** STATE_UNSPECIFIED - Unspecified state. */
  STATE_UNSPECIFIED = 0,
  /**
   * INACTIVE - The participant is inactive for all UPI transactions. The issuer switch
   * will return the `AM` error to the UPI payments orchestrator for any
   * operation involving MPIN verification for the participant. They need to
   * register with UPI again and provide a new MPIN.
   */
  INACTIVE = 1,
  /** ACTIVE - The participant is active for all UPI transactions. */
  ACTIVE = 2,
  /**
   * MPIN_LOCKED - The participants MPIN has been locked because they have exceeded the
   * threshold for maximum number of incorrect MPIN verification attempts. No
   * UPI transactions will be permitted until the participant's MPIN has been
   * reset.
   */
  MPIN_LOCKED = 3,
  /**
   * MOBILE_NUMBER_CHANGED - The participants mobile number has been changed in the issuer bank. Any
   * transaction involving MPIN verification of the participant will return a
   * `B1` error to the UPI payments orchestrator. The user will be forced to
   * re-register with their changed mobile number.
   */
  MOBILE_NUMBER_CHANGED = 4,
  /** NEW_REGISTRATION_INITIATED - The participant is registering for UPI transactions for the first time. */
  NEW_REGISTRATION_INITIATED = 5,
  /**
   * RE_REGISTRATION_INITIATED - The participant had already registered for UPI transactions but is now
   * registering again or resetting their MPIN.
   */
  RE_REGISTRATION_INITIATED = 6,
  UNRECOGNIZED = -1,
}

export function issuerParticipant_StateFromJSON(object: any): IssuerParticipant_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return IssuerParticipant_State.STATE_UNSPECIFIED;
    case 1:
    case "INACTIVE":
      return IssuerParticipant_State.INACTIVE;
    case 2:
    case "ACTIVE":
      return IssuerParticipant_State.ACTIVE;
    case 3:
    case "MPIN_LOCKED":
      return IssuerParticipant_State.MPIN_LOCKED;
    case 4:
    case "MOBILE_NUMBER_CHANGED":
      return IssuerParticipant_State.MOBILE_NUMBER_CHANGED;
    case 5:
    case "NEW_REGISTRATION_INITIATED":
      return IssuerParticipant_State.NEW_REGISTRATION_INITIATED;
    case 6:
    case "RE_REGISTRATION_INITIATED":
      return IssuerParticipant_State.RE_REGISTRATION_INITIATED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IssuerParticipant_State.UNRECOGNIZED;
  }
}

export function issuerParticipant_StateToJSON(object: IssuerParticipant_State): string {
  switch (object) {
    case IssuerParticipant_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case IssuerParticipant_State.INACTIVE:
      return "INACTIVE";
    case IssuerParticipant_State.ACTIVE:
      return "ACTIVE";
    case IssuerParticipant_State.MPIN_LOCKED:
      return "MPIN_LOCKED";
    case IssuerParticipant_State.MOBILE_NUMBER_CHANGED:
      return "MOBILE_NUMBER_CHANGED";
    case IssuerParticipant_State.NEW_REGISTRATION_INITIATED:
      return "NEW_REGISTRATION_INITIATED";
    case IssuerParticipant_State.RE_REGISTRATION_INITIATED:
      return "RE_REGISTRATION_INITIATED";
    case IssuerParticipant_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The metadata of the participant. */
export interface IssuerParticipant_Metadata {
  /**
   * Optional. Additional metadata about a particular participant as key-value
   * pairs. These values are returned by the bank adapter/card adapter in
   * response to the SearchAccounts/InitiateRegistration APIs.
   */
  values: { [key: string]: string };
}

export interface IssuerParticipant_Metadata_ValuesEntry {
  key: string;
  value: string;
}

/**
 * Request for the
 * [UpdateIssuerParticipant][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.UpdateIssuerParticipant]
 * method.
 */
export interface UpdateIssuerParticipantRequest {
  /**
   * Required. The parent resource for the participants. The format is
   * `projects/{project}`.
   */
  parent: string;
  /** Required. The participant to update. */
  issuerParticipant:
    | IssuerParticipant
    | undefined;
  /** Required. The list of fields to update. */
  updateMask: string[] | undefined;
}

/**
 * Request for the
 * [ActivateParticipant][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.ActivateParticipant],
 * [DeactivateParticipant][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.DeactivateParticipant]
 * and
 * [MobileNumberUpdated][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.MobileNumberChanged]
 * methods.
 */
export interface ParticipantStateChangeRequest {
  /**
   * Required. The parent resource for the participant. The format is
   * `projects/{project}`.
   */
  parent: string;
  /** Optional. The account details of the issuer participant. */
  accountReference?:
    | AccountReference
    | undefined;
  /** Optional. The mobile number of the issuer participant. */
  mobileNumber?: string | undefined;
}

/**
 * Response for the
 * [ActivateParticipant][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.ActivateParticipant],
 * [DeactivateParticipant][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.DeactivateParticipant]
 * and
 * [MobileNumberChanged][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.MobileNumberChanged]
 * methods.
 */
export interface IssuerParticipants {
  /** Output only. The list of updated participants. */
  participants: IssuerParticipant[];
}

function createBaseFetchParticipantRequest(): FetchParticipantRequest {
  return { parent: "", accountReference: undefined };
}

export const FetchParticipantRequest: MessageFns<FetchParticipantRequest> = {
  encode(message: FetchParticipantRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.accountReference !== undefined) {
      AccountReference.encode(message.accountReference, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchParticipantRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchParticipantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accountReference = AccountReference.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchParticipantRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      accountReference: isSet(object.accountReference) ? AccountReference.fromJSON(object.accountReference) : undefined,
    };
  },

  toJSON(message: FetchParticipantRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.accountReference !== undefined) {
      obj.accountReference = AccountReference.toJSON(message.accountReference);
    }
    return obj;
  },

  create(base?: DeepPartial<FetchParticipantRequest>): FetchParticipantRequest {
    return FetchParticipantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchParticipantRequest>): FetchParticipantRequest {
    const message = createBaseFetchParticipantRequest();
    message.parent = object.parent ?? "";
    message.accountReference = (object.accountReference !== undefined && object.accountReference !== null)
      ? AccountReference.fromPartial(object.accountReference)
      : undefined;
    return message;
  },
};

function createBaseIssuerParticipant(): IssuerParticipant {
  return {
    accountReference: undefined,
    mobileNumber: "",
    state: 0,
    metadata: undefined,
    mpinFailureCount: 0,
    mpinLockedTime: undefined,
    createTime: undefined,
    updateTime: undefined,
  };
}

export const IssuerParticipant: MessageFns<IssuerParticipant> = {
  encode(message: IssuerParticipant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountReference !== undefined) {
      AccountReference.encode(message.accountReference, writer.uint32(10).fork()).join();
    }
    if (message.mobileNumber !== "") {
      writer.uint32(18).string(message.mobileNumber);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.metadata !== undefined) {
      IssuerParticipant_Metadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    if (message.mpinFailureCount !== 0) {
      writer.uint32(40).int32(message.mpinFailureCount);
    }
    if (message.mpinLockedTime !== undefined) {
      Timestamp.encode(toTimestamp(message.mpinLockedTime), writer.uint32(50).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(58).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IssuerParticipant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIssuerParticipant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountReference = AccountReference.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.mobileNumber = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.metadata = IssuerParticipant_Metadata.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.mpinFailureCount = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.mpinLockedTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IssuerParticipant {
    return {
      accountReference: isSet(object.accountReference) ? AccountReference.fromJSON(object.accountReference) : undefined,
      mobileNumber: isSet(object.mobileNumber) ? globalThis.String(object.mobileNumber) : "",
      state: isSet(object.state) ? issuerParticipant_StateFromJSON(object.state) : 0,
      metadata: isSet(object.metadata) ? IssuerParticipant_Metadata.fromJSON(object.metadata) : undefined,
      mpinFailureCount: isSet(object.mpinFailureCount) ? globalThis.Number(object.mpinFailureCount) : 0,
      mpinLockedTime: isSet(object.mpinLockedTime) ? fromJsonTimestamp(object.mpinLockedTime) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: IssuerParticipant): unknown {
    const obj: any = {};
    if (message.accountReference !== undefined) {
      obj.accountReference = AccountReference.toJSON(message.accountReference);
    }
    if (message.mobileNumber !== "") {
      obj.mobileNumber = message.mobileNumber;
    }
    if (message.state !== 0) {
      obj.state = issuerParticipant_StateToJSON(message.state);
    }
    if (message.metadata !== undefined) {
      obj.metadata = IssuerParticipant_Metadata.toJSON(message.metadata);
    }
    if (message.mpinFailureCount !== 0) {
      obj.mpinFailureCount = Math.round(message.mpinFailureCount);
    }
    if (message.mpinLockedTime !== undefined) {
      obj.mpinLockedTime = message.mpinLockedTime.toISOString();
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<IssuerParticipant>): IssuerParticipant {
    return IssuerParticipant.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IssuerParticipant>): IssuerParticipant {
    const message = createBaseIssuerParticipant();
    message.accountReference = (object.accountReference !== undefined && object.accountReference !== null)
      ? AccountReference.fromPartial(object.accountReference)
      : undefined;
    message.mobileNumber = object.mobileNumber ?? "";
    message.state = object.state ?? 0;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? IssuerParticipant_Metadata.fromPartial(object.metadata)
      : undefined;
    message.mpinFailureCount = object.mpinFailureCount ?? 0;
    message.mpinLockedTime = object.mpinLockedTime ?? undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseIssuerParticipant_Metadata(): IssuerParticipant_Metadata {
  return { values: {} };
}

export const IssuerParticipant_Metadata: MessageFns<IssuerParticipant_Metadata> = {
  encode(message: IssuerParticipant_Metadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.values).forEach(([key, value]) => {
      IssuerParticipant_Metadata_ValuesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IssuerParticipant_Metadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIssuerParticipant_Metadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = IssuerParticipant_Metadata_ValuesEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.values[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IssuerParticipant_Metadata {
    return {
      values: isObject(object.values)
        ? Object.entries(object.values).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: IssuerParticipant_Metadata): unknown {
    const obj: any = {};
    if (message.values) {
      const entries = Object.entries(message.values);
      if (entries.length > 0) {
        obj.values = {};
        entries.forEach(([k, v]) => {
          obj.values[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<IssuerParticipant_Metadata>): IssuerParticipant_Metadata {
    return IssuerParticipant_Metadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IssuerParticipant_Metadata>): IssuerParticipant_Metadata {
    const message = createBaseIssuerParticipant_Metadata();
    message.values = Object.entries(object.values ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseIssuerParticipant_Metadata_ValuesEntry(): IssuerParticipant_Metadata_ValuesEntry {
  return { key: "", value: "" };
}

export const IssuerParticipant_Metadata_ValuesEntry: MessageFns<IssuerParticipant_Metadata_ValuesEntry> = {
  encode(message: IssuerParticipant_Metadata_ValuesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IssuerParticipant_Metadata_ValuesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIssuerParticipant_Metadata_ValuesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IssuerParticipant_Metadata_ValuesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: IssuerParticipant_Metadata_ValuesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<IssuerParticipant_Metadata_ValuesEntry>): IssuerParticipant_Metadata_ValuesEntry {
    return IssuerParticipant_Metadata_ValuesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IssuerParticipant_Metadata_ValuesEntry>): IssuerParticipant_Metadata_ValuesEntry {
    const message = createBaseIssuerParticipant_Metadata_ValuesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseUpdateIssuerParticipantRequest(): UpdateIssuerParticipantRequest {
  return { parent: "", issuerParticipant: undefined, updateMask: undefined };
}

export const UpdateIssuerParticipantRequest: MessageFns<UpdateIssuerParticipantRequest> = {
  encode(message: UpdateIssuerParticipantRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.issuerParticipant !== undefined) {
      IssuerParticipant.encode(message.issuerParticipant, writer.uint32(18).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIssuerParticipantRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIssuerParticipantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuerParticipant = IssuerParticipant.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIssuerParticipantRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      issuerParticipant: isSet(object.issuerParticipant)
        ? IssuerParticipant.fromJSON(object.issuerParticipant)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateIssuerParticipantRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.issuerParticipant !== undefined) {
      obj.issuerParticipant = IssuerParticipant.toJSON(message.issuerParticipant);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateIssuerParticipantRequest>): UpdateIssuerParticipantRequest {
    return UpdateIssuerParticipantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateIssuerParticipantRequest>): UpdateIssuerParticipantRequest {
    const message = createBaseUpdateIssuerParticipantRequest();
    message.parent = object.parent ?? "";
    message.issuerParticipant = (object.issuerParticipant !== undefined && object.issuerParticipant !== null)
      ? IssuerParticipant.fromPartial(object.issuerParticipant)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseParticipantStateChangeRequest(): ParticipantStateChangeRequest {
  return { parent: "", accountReference: undefined, mobileNumber: undefined };
}

export const ParticipantStateChangeRequest: MessageFns<ParticipantStateChangeRequest> = {
  encode(message: ParticipantStateChangeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.accountReference !== undefined) {
      AccountReference.encode(message.accountReference, writer.uint32(18).fork()).join();
    }
    if (message.mobileNumber !== undefined) {
      writer.uint32(26).string(message.mobileNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParticipantStateChangeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParticipantStateChangeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accountReference = AccountReference.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.mobileNumber = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParticipantStateChangeRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      accountReference: isSet(object.accountReference) ? AccountReference.fromJSON(object.accountReference) : undefined,
      mobileNumber: isSet(object.mobileNumber) ? globalThis.String(object.mobileNumber) : undefined,
    };
  },

  toJSON(message: ParticipantStateChangeRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.accountReference !== undefined) {
      obj.accountReference = AccountReference.toJSON(message.accountReference);
    }
    if (message.mobileNumber !== undefined) {
      obj.mobileNumber = message.mobileNumber;
    }
    return obj;
  },

  create(base?: DeepPartial<ParticipantStateChangeRequest>): ParticipantStateChangeRequest {
    return ParticipantStateChangeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ParticipantStateChangeRequest>): ParticipantStateChangeRequest {
    const message = createBaseParticipantStateChangeRequest();
    message.parent = object.parent ?? "";
    message.accountReference = (object.accountReference !== undefined && object.accountReference !== null)
      ? AccountReference.fromPartial(object.accountReference)
      : undefined;
    message.mobileNumber = object.mobileNumber ?? undefined;
    return message;
  },
};

function createBaseIssuerParticipants(): IssuerParticipants {
  return { participants: [] };
}

export const IssuerParticipants: MessageFns<IssuerParticipants> = {
  encode(message: IssuerParticipants, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.participants) {
      IssuerParticipant.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IssuerParticipants {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIssuerParticipants();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.participants.push(IssuerParticipant.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IssuerParticipants {
    return {
      participants: globalThis.Array.isArray(object?.participants)
        ? object.participants.map((e: any) => IssuerParticipant.fromJSON(e))
        : [],
    };
  },

  toJSON(message: IssuerParticipants): unknown {
    const obj: any = {};
    if (message.participants?.length) {
      obj.participants = message.participants.map((e) => IssuerParticipant.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<IssuerParticipants>): IssuerParticipants {
    return IssuerParticipants.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IssuerParticipants>): IssuerParticipants {
    const message = createBaseIssuerParticipants();
    message.participants = object.participants?.map((e) => IssuerParticipant.fromPartial(e)) || [];
    return message;
  },
};

/**
 * A service that allows for the management of participants in the issuer
 * switch.
 */
export type IssuerSwitchParticipantsDefinition = typeof IssuerSwitchParticipantsDefinition;
export const IssuerSwitchParticipantsDefinition = {
  name: "IssuerSwitchParticipants",
  fullName: "google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants",
  methods: {
    /**
     * Fetch the issuer switch participant. This method can be used to retrieve
     * all details of a participant in the issuer switch.
     *
     * In UPI, the participant is identified by their account's IFSC and their
     * account number.
     */
    fetchParticipant: {
      name: "FetchParticipant",
      requestType: FetchParticipantRequest,
      requestStream: false,
      responseType: IssuerParticipant,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              53,
              58,
              1,
              42,
              34,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              105,
              115,
              115,
              117,
              101,
              114,
              80,
              97,
              114,
              116,
              105,
              99,
              105,
              112,
              97,
              110,
              116,
              115,
              58,
              102,
              101,
              116,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /**
     * Update the issuer switch participant. Currently, this API only allows for
     * the
     * [metadata][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.metadata]
     * field to be updated.
     *
     * The `number` of key-value pairs in the `metadata` field, the length of each
     * `key` and the length of each `value` should be within the thresholds
     * defined for them in the issuer switch configuration. Any violation of these
     * thresholds will cause this API to return an error. The default values for
     * these thresholds are:
     *
     * * `Maximum number` of key-value pairs - `5`
     * * `Maximum length` of a key - `100`
     * * `Maximum length` of a value - `500`
     *
     * **Note** that this method replaces any existing `metadata` field value in
     * the participant with the new value. Specifically, it does not do a merge.
     * If key-value pairs are to be added/removed from the metadata, then
     * callers must follow the following steps:
     *
     * 1. Invoke the
     *   [FetchParticipant][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.FetchParticipant]
     *    API to get the current value of the `metadata` field.
     * 1. Update the `metadata` map to add/remove key-value pairs from it.
     * 1. Update the `metadata` in the issuer switch using this method.
     */
    updateIssuerParticipant: {
      name: "UpdateIssuerParticipant",
      requestType: UpdateIssuerParticipantRequest,
      requestStream: false,
      responseType: IssuerParticipant,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              37,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              105,
              115,
              115,
              117,
              101,
              114,
              95,
              112,
              97,
              114,
              116,
              105,
              99,
              105,
              112,
              97,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              71,
              58,
              18,
              105,
              115,
              115,
              117,
              101,
              114,
              95,
              112,
              97,
              114,
              116,
              105,
              99,
              105,
              112,
              97,
              110,
              116,
              34,
              49,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              105,
              115,
              115,
              117,
              101,
              114,
              80,
              97,
              114,
              116,
              105,
              99,
              105,
              112,
              97,
              110,
              116,
              115,
              58,
              117,
              112,
              100,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Activate the issuer switch participant for UPI transactions. This API
     * sets the state of the participant to
     * [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE].
     * A participant in the `ACTIVE` state can perform all UPI operations
     * normally.
     *
     * The behavior of this API varies based on the current state of the
     * participant.
     *
     * *   Current state is
     *     [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE]
     *     : This API will make no change to the participant's state and returns a
     *     successful response.
     * *    Current state is
     *     [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE]
     *     : If an _MPIN_ has already been provisioned for the participant, then
     *     this API will change the state of the participant to `ACTIVE`. Else,
     *     this API will return an error.
     * *   Current state is
     *     [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED]
     *     : The state cannot be changed to `ACTIVE`. This API will return an
     *     error.
     * *   Current state is
     *     [NEW_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.NEW_REGISTRATION_INITIATED]
     *     : The state cannot be changed to `ACTIVE`. This API will return an
     *     error.
     * *   Current state is
     *     [RE_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.RE_REGISTRATION_INITIATED]
     *     : The state cannot be changed to `ACTIVE`. This API will return an
     *     error.
     */
    activateParticipant: {
      name: "ActivateParticipant",
      requestType: ParticipantStateChangeRequest,
      requestStream: false,
      responseType: IssuerParticipants,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              105,
              115,
              115,
              117,
              101,
              114,
              80,
              97,
              114,
              116,
              105,
              99,
              105,
              112,
              97,
              110,
              116,
              115,
              58,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Deactivate the issuer switch participant for UPI transactions. This API
     * sets the state of the participant to
     * [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE].
     * An `INACTIVE` participant cannot perform any UPI operation which involves
     * MPIN verification.
     *
     * The behavior of this API varies based on the current state of the
     * participant.
     *
     * *   Current state is
     *     [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE]
     *     : The state will change to `INACTIVE`. The user will be forced to
     *     re-register with UPI and reset their MPIN  to perform any UPI
     *     operations.
     * *   Current state is
     *     [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE]
     *     : This API will make no change to the participant's state and returns a
     *     successful response.
     * *   Current state is
     *     [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED]
     *     : The state cannot be changed to `INACTIVE`. This API will return an
     *     error.
     * *   Current state is
     *     [NEW_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.NEW_REGISTRATION_INITIATED]
     *     : The state cannot be changed to `INACTIVE`. This API will return an
     *     error.
     * *   Current state is
     *     [RE_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.RE_REGISTRATION_INITIATED]
     *     : The state cannot be changed to `INACTIVE`. This API will return an
     *     error.
     */
    deactivateParticipant: {
      name: "DeactivateParticipant",
      requestType: ParticipantStateChangeRequest,
      requestStream: false,
      responseType: IssuerParticipants,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              105,
              115,
              115,
              117,
              101,
              114,
              80,
              97,
              114,
              116,
              105,
              99,
              105,
              112,
              97,
              110,
              116,
              115,
              58,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Mark the state of the issuer switch participant as _mobile number changed_
     * to prevent UPI transactions by the user. This API sets the state of the
     * participant to
     * [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED].
     *
     * Any UPI operation for a participant in the `MOBILE_NUMBER_CHANGED` state
     * will cause the issuer switch to return a `B1` error to the UPI payments
     * orchestrator which would force the user to re-register with UPI.
     *
     * The behavior of this API varies based on the current state of the
     * participant.
     *
     * *   Current state is
     *     [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE]
     *     : The state will change to `MOBILE_NUMBER_CHANGED`. Any operation
     *     involving MPIN verification of the participant will return a `B1` error
     *     to the UPI payments orchestrator. The user will be forced to
     *     re-register with their changed mobile number.
     * *   Current state is
     *     [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE]
     *     : The state will change to `MOBILE_NUMBER_CHANGED`. Any operation
     *     involving MPIN verification of the participant will return a `B1` error
     *     to the UPI payments orchestrator. The user will be forced to
     *     re-register with their changed mobile number.
     * *   Current state is
     *     [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED]
     *     : This API will make no change to the participant's state and returns a
     *     successful response.
     * *   Current state is
     *     [NEW_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.NEW_REGISTRATION_INITIATED]
     *     : The state cannot be changed to `MOBILE_NUMBER_CHANGED`. This API will
     *     return an error.
     * *   Current state is
     *     [RE_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.RE_REGISTRATION_INITIATED]
     *     : The state will change to `MOBILE_NUMBER_CHANGED`. Any operation
     *     involving MPIN verification of the participant will return a `B1` error
     *     to the UPI payments orchestrator. The user will be forced to
     *     re-register with their changed mobile number.
     */
    mobileNumberChanged: {
      name: "MobileNumberChanged",
      requestType: ParticipantStateChangeRequest,
      requestStream: false,
      responseType: IssuerParticipants,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              67,
              58,
              1,
              42,
              34,
              62,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              105,
              115,
              115,
              117,
              101,
              114,
              80,
              97,
              114,
              116,
              105,
              99,
              105,
              112,
              97,
              110,
              116,
              115,
              58,
              109,
              111,
              98,
              105,
              108,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              67,
              104,
              97,
              110,
              103,
              101,
              100,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface IssuerSwitchParticipantsServiceImplementation<CallContextExt = {}> {
  /**
   * Fetch the issuer switch participant. This method can be used to retrieve
   * all details of a participant in the issuer switch.
   *
   * In UPI, the participant is identified by their account's IFSC and their
   * account number.
   */
  fetchParticipant(
    request: FetchParticipantRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<IssuerParticipant>>;
  /**
   * Update the issuer switch participant. Currently, this API only allows for
   * the
   * [metadata][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.metadata]
   * field to be updated.
   *
   * The `number` of key-value pairs in the `metadata` field, the length of each
   * `key` and the length of each `value` should be within the thresholds
   * defined for them in the issuer switch configuration. Any violation of these
   * thresholds will cause this API to return an error. The default values for
   * these thresholds are:
   *
   * * `Maximum number` of key-value pairs - `5`
   * * `Maximum length` of a key - `100`
   * * `Maximum length` of a value - `500`
   *
   * **Note** that this method replaces any existing `metadata` field value in
   * the participant with the new value. Specifically, it does not do a merge.
   * If key-value pairs are to be added/removed from the metadata, then
   * callers must follow the following steps:
   *
   * 1. Invoke the
   *   [FetchParticipant][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.FetchParticipant]
   *    API to get the current value of the `metadata` field.
   * 1. Update the `metadata` map to add/remove key-value pairs from it.
   * 1. Update the `metadata` in the issuer switch using this method.
   */
  updateIssuerParticipant(
    request: UpdateIssuerParticipantRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<IssuerParticipant>>;
  /**
   * Activate the issuer switch participant for UPI transactions. This API
   * sets the state of the participant to
   * [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE].
   * A participant in the `ACTIVE` state can perform all UPI operations
   * normally.
   *
   * The behavior of this API varies based on the current state of the
   * participant.
   *
   * *   Current state is
   *     [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE]
   *     : This API will make no change to the participant's state and returns a
   *     successful response.
   * *    Current state is
   *     [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE]
   *     : If an _MPIN_ has already been provisioned for the participant, then
   *     this API will change the state of the participant to `ACTIVE`. Else,
   *     this API will return an error.
   * *   Current state is
   *     [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED]
   *     : The state cannot be changed to `ACTIVE`. This API will return an
   *     error.
   * *   Current state is
   *     [NEW_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.NEW_REGISTRATION_INITIATED]
   *     : The state cannot be changed to `ACTIVE`. This API will return an
   *     error.
   * *   Current state is
   *     [RE_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.RE_REGISTRATION_INITIATED]
   *     : The state cannot be changed to `ACTIVE`. This API will return an
   *     error.
   */
  activateParticipant(
    request: ParticipantStateChangeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<IssuerParticipants>>;
  /**
   * Deactivate the issuer switch participant for UPI transactions. This API
   * sets the state of the participant to
   * [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE].
   * An `INACTIVE` participant cannot perform any UPI operation which involves
   * MPIN verification.
   *
   * The behavior of this API varies based on the current state of the
   * participant.
   *
   * *   Current state is
   *     [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE]
   *     : The state will change to `INACTIVE`. The user will be forced to
   *     re-register with UPI and reset their MPIN  to perform any UPI
   *     operations.
   * *   Current state is
   *     [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE]
   *     : This API will make no change to the participant's state and returns a
   *     successful response.
   * *   Current state is
   *     [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED]
   *     : The state cannot be changed to `INACTIVE`. This API will return an
   *     error.
   * *   Current state is
   *     [NEW_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.NEW_REGISTRATION_INITIATED]
   *     : The state cannot be changed to `INACTIVE`. This API will return an
   *     error.
   * *   Current state is
   *     [RE_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.RE_REGISTRATION_INITIATED]
   *     : The state cannot be changed to `INACTIVE`. This API will return an
   *     error.
   */
  deactivateParticipant(
    request: ParticipantStateChangeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<IssuerParticipants>>;
  /**
   * Mark the state of the issuer switch participant as _mobile number changed_
   * to prevent UPI transactions by the user. This API sets the state of the
   * participant to
   * [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED].
   *
   * Any UPI operation for a participant in the `MOBILE_NUMBER_CHANGED` state
   * will cause the issuer switch to return a `B1` error to the UPI payments
   * orchestrator which would force the user to re-register with UPI.
   *
   * The behavior of this API varies based on the current state of the
   * participant.
   *
   * *   Current state is
   *     [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE]
   *     : The state will change to `MOBILE_NUMBER_CHANGED`. Any operation
   *     involving MPIN verification of the participant will return a `B1` error
   *     to the UPI payments orchestrator. The user will be forced to
   *     re-register with their changed mobile number.
   * *   Current state is
   *     [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE]
   *     : The state will change to `MOBILE_NUMBER_CHANGED`. Any operation
   *     involving MPIN verification of the participant will return a `B1` error
   *     to the UPI payments orchestrator. The user will be forced to
   *     re-register with their changed mobile number.
   * *   Current state is
   *     [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED]
   *     : This API will make no change to the participant's state and returns a
   *     successful response.
   * *   Current state is
   *     [NEW_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.NEW_REGISTRATION_INITIATED]
   *     : The state cannot be changed to `MOBILE_NUMBER_CHANGED`. This API will
   *     return an error.
   * *   Current state is
   *     [RE_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.RE_REGISTRATION_INITIATED]
   *     : The state will change to `MOBILE_NUMBER_CHANGED`. Any operation
   *     involving MPIN verification of the participant will return a `B1` error
   *     to the UPI payments orchestrator. The user will be forced to
   *     re-register with their changed mobile number.
   */
  mobileNumberChanged(
    request: ParticipantStateChangeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<IssuerParticipants>>;
}

export interface IssuerSwitchParticipantsClient<CallOptionsExt = {}> {
  /**
   * Fetch the issuer switch participant. This method can be used to retrieve
   * all details of a participant in the issuer switch.
   *
   * In UPI, the participant is identified by their account's IFSC and their
   * account number.
   */
  fetchParticipant(
    request: DeepPartial<FetchParticipantRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<IssuerParticipant>;
  /**
   * Update the issuer switch participant. Currently, this API only allows for
   * the
   * [metadata][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.metadata]
   * field to be updated.
   *
   * The `number` of key-value pairs in the `metadata` field, the length of each
   * `key` and the length of each `value` should be within the thresholds
   * defined for them in the issuer switch configuration. Any violation of these
   * thresholds will cause this API to return an error. The default values for
   * these thresholds are:
   *
   * * `Maximum number` of key-value pairs - `5`
   * * `Maximum length` of a key - `100`
   * * `Maximum length` of a value - `500`
   *
   * **Note** that this method replaces any existing `metadata` field value in
   * the participant with the new value. Specifically, it does not do a merge.
   * If key-value pairs are to be added/removed from the metadata, then
   * callers must follow the following steps:
   *
   * 1. Invoke the
   *   [FetchParticipant][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.FetchParticipant]
   *    API to get the current value of the `metadata` field.
   * 1. Update the `metadata` map to add/remove key-value pairs from it.
   * 1. Update the `metadata` in the issuer switch using this method.
   */
  updateIssuerParticipant(
    request: DeepPartial<UpdateIssuerParticipantRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<IssuerParticipant>;
  /**
   * Activate the issuer switch participant for UPI transactions. This API
   * sets the state of the participant to
   * [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE].
   * A participant in the `ACTIVE` state can perform all UPI operations
   * normally.
   *
   * The behavior of this API varies based on the current state of the
   * participant.
   *
   * *   Current state is
   *     [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE]
   *     : This API will make no change to the participant's state and returns a
   *     successful response.
   * *    Current state is
   *     [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE]
   *     : If an _MPIN_ has already been provisioned for the participant, then
   *     this API will change the state of the participant to `ACTIVE`. Else,
   *     this API will return an error.
   * *   Current state is
   *     [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED]
   *     : The state cannot be changed to `ACTIVE`. This API will return an
   *     error.
   * *   Current state is
   *     [NEW_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.NEW_REGISTRATION_INITIATED]
   *     : The state cannot be changed to `ACTIVE`. This API will return an
   *     error.
   * *   Current state is
   *     [RE_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.RE_REGISTRATION_INITIATED]
   *     : The state cannot be changed to `ACTIVE`. This API will return an
   *     error.
   */
  activateParticipant(
    request: DeepPartial<ParticipantStateChangeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<IssuerParticipants>;
  /**
   * Deactivate the issuer switch participant for UPI transactions. This API
   * sets the state of the participant to
   * [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE].
   * An `INACTIVE` participant cannot perform any UPI operation which involves
   * MPIN verification.
   *
   * The behavior of this API varies based on the current state of the
   * participant.
   *
   * *   Current state is
   *     [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE]
   *     : The state will change to `INACTIVE`. The user will be forced to
   *     re-register with UPI and reset their MPIN  to perform any UPI
   *     operations.
   * *   Current state is
   *     [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE]
   *     : This API will make no change to the participant's state and returns a
   *     successful response.
   * *   Current state is
   *     [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED]
   *     : The state cannot be changed to `INACTIVE`. This API will return an
   *     error.
   * *   Current state is
   *     [NEW_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.NEW_REGISTRATION_INITIATED]
   *     : The state cannot be changed to `INACTIVE`. This API will return an
   *     error.
   * *   Current state is
   *     [RE_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.RE_REGISTRATION_INITIATED]
   *     : The state cannot be changed to `INACTIVE`. This API will return an
   *     error.
   */
  deactivateParticipant(
    request: DeepPartial<ParticipantStateChangeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<IssuerParticipants>;
  /**
   * Mark the state of the issuer switch participant as _mobile number changed_
   * to prevent UPI transactions by the user. This API sets the state of the
   * participant to
   * [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED].
   *
   * Any UPI operation for a participant in the `MOBILE_NUMBER_CHANGED` state
   * will cause the issuer switch to return a `B1` error to the UPI payments
   * orchestrator which would force the user to re-register with UPI.
   *
   * The behavior of this API varies based on the current state of the
   * participant.
   *
   * *   Current state is
   *     [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE]
   *     : The state will change to `MOBILE_NUMBER_CHANGED`. Any operation
   *     involving MPIN verification of the participant will return a `B1` error
   *     to the UPI payments orchestrator. The user will be forced to
   *     re-register with their changed mobile number.
   * *   Current state is
   *     [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE]
   *     : The state will change to `MOBILE_NUMBER_CHANGED`. Any operation
   *     involving MPIN verification of the participant will return a `B1` error
   *     to the UPI payments orchestrator. The user will be forced to
   *     re-register with their changed mobile number.
   * *   Current state is
   *     [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED]
   *     : This API will make no change to the participant's state and returns a
   *     successful response.
   * *   Current state is
   *     [NEW_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.NEW_REGISTRATION_INITIATED]
   *     : The state cannot be changed to `MOBILE_NUMBER_CHANGED`. This API will
   *     return an error.
   * *   Current state is
   *     [RE_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.RE_REGISTRATION_INITIATED]
   *     : The state will change to `MOBILE_NUMBER_CHANGED`. Any operation
   *     involving MPIN verification of the participant will return a `B1` error
   *     to the UPI payments orchestrator. The user will be forced to
   *     re-register with their changed mobile number.
   */
  mobileNumberChanged(
    request: DeepPartial<ParticipantStateChangeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<IssuerParticipants>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
