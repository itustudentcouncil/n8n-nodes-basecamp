// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/paymentgateway/issuerswitch/v1/resolutions.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { Money } from "../../../../type/money.js";
import { Participant } from "./common_fields.js";

export const protobufPackage = "google.cloud.paymentgateway.issuerswitch.v1";

/** The subtype of the complaint or dispute. */
export enum TransactionSubType {
  /** TRANSACTION_SUB_TYPE_UNSPECIFIED - Unspecified transaction subtype. */
  TRANSACTION_SUB_TYPE_UNSPECIFIED = 0,
  /** TRANSACTION_SUB_TYPE_BENEFICIARY - Beneficiary transaction subtype. */
  TRANSACTION_SUB_TYPE_BENEFICIARY = 1,
  /** TRANSACTION_SUB_TYPE_REMITTER - Remitter transaction subtype. */
  TRANSACTION_SUB_TYPE_REMITTER = 2,
  UNRECOGNIZED = -1,
}

export function transactionSubTypeFromJSON(object: any): TransactionSubType {
  switch (object) {
    case 0:
    case "TRANSACTION_SUB_TYPE_UNSPECIFIED":
      return TransactionSubType.TRANSACTION_SUB_TYPE_UNSPECIFIED;
    case 1:
    case "TRANSACTION_SUB_TYPE_BENEFICIARY":
      return TransactionSubType.TRANSACTION_SUB_TYPE_BENEFICIARY;
    case 2:
    case "TRANSACTION_SUB_TYPE_REMITTER":
      return TransactionSubType.TRANSACTION_SUB_TYPE_REMITTER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TransactionSubType.UNRECOGNIZED;
  }
}

export function transactionSubTypeToJSON(object: TransactionSubType): string {
  switch (object) {
    case TransactionSubType.TRANSACTION_SUB_TYPE_UNSPECIFIED:
      return "TRANSACTION_SUB_TYPE_UNSPECIFIED";
    case TransactionSubType.TRANSACTION_SUB_TYPE_BENEFICIARY:
      return "TRANSACTION_SUB_TYPE_BENEFICIARY";
    case TransactionSubType.TRANSACTION_SUB_TYPE_REMITTER:
      return "TRANSACTION_SUB_TYPE_REMITTER";
    case TransactionSubType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A complaint processed by the issuer switch. */
export interface Complaint {
  /**
   * The name of the complaint. This uniquely identifies the complaint.
   * Format of name is
   * projects/{project_id}/complaints/{complaint_id}.
   */
  name: string;
  /**
   * The reason for raising the complaint. This maps adjustment flag
   * and reason code for the complaint to `reqAdjFlag` and `reqAdjCode` in
   * complaint request respectively while raising a complaint.
   */
  raiseComplaintAdjustment:
    | RaiseComplaintAdjustment
    | undefined;
  /** Required. Details required for raising / resolving a complaint. */
  details:
    | CaseDetails
    | undefined;
  /** Output only. Response to the raised / resolved complaint. */
  response:
    | CaseResponse
    | undefined;
  /**
   * The reason for resolving the complaint. It provides adjustment values while
   * resolving and for already resolved complaints. This maps adjustment flag
   * and reason code for the complaint to `reqAdjFlag` and `reqAdjCode` in
   * complaint request respectively when a complete resolution is done via
   * Resolve Complaint API otherwise maps to `respAdjFlag` and `respAdjCode` in
   * complaint response respectively when a complaint request from UPI is
   * directly resolved by issuer switch.
   */
  resolveComplaintAdjustment: ResolveComplaintAdjustment | undefined;
}

/** Request for the `CreateComplaint` method. */
export interface CreateComplaintRequest {
  /**
   * Required. The parent resource for the complaint. The format is
   * `projects/{project}`.
   */
  parent: string;
  /** Required. The complaint to be raised. */
  complaint: Complaint | undefined;
}

/** Request for the `ResolveComplaint` method. */
export interface ResolveComplaintRequest {
  /** Required. The complaint to be resolved. */
  complaint: Complaint | undefined;
}

/** A dispute processed by the issuer switch. */
export interface Dispute {
  /**
   * The name of the dispute. This uniquely identifies the dispute.
   * Format of name is
   * projects/{project_id}/disputes/{dispute_id}.
   */
  name: string;
  /**
   * The reason for raising the dispute. This maps adjustment flag
   * and reason code for the dispute to `reqAdjFlag` and `reqAdjCode` in
   * complaint request respectively while raising a dispute.
   */
  raiseDisputeAdjustment:
    | RaiseDisputeAdjustment
    | undefined;
  /** Required. Details required for raising/resolving dispute. */
  details:
    | CaseDetails
    | undefined;
  /** Output only. Response to the raised/resolved dispute. */
  response:
    | CaseResponse
    | undefined;
  /**
   * The reason for resolving the dispute. It provides adjustment values while
   * resolving and for already resolved disputes. This maps adjustment flag
   * and reason code for the dispute to `reqAdjFlag` and `reqAdjCode` in
   * dispute request respectively while resolving a dispute.
   */
  resolveDisputeAdjustment: ResolveDisputeAdjustment | undefined;
}

/** Request for the `CreateDispute` method. */
export interface CreateDisputeRequest {
  /**
   * Required. The parent resource for the dispute. The format is
   * `projects/{project}`.
   */
  parent: string;
  /** Required. The dispute to be raised. */
  dispute: Dispute | undefined;
}

/** Request for the `ResolveDispute` method. */
export interface ResolveDisputeRequest {
  /** Required. The dispute to be resolved. */
  dispute: Dispute | undefined;
}

/** Details of original transaction. */
export interface OriginalTransaction {
  /**
   * Required. Uniquely identifies the original transaction. This maps to the
   * `Txn.Id` value of the original transaction in India's UPI system.
   */
  transactionId: string;
  /** Required. Retrieval Reference Number (RRN) of the original transaction. */
  retrievalReferenceNumber: string;
  /** Timestamp of the original transaction request. */
  requestTime: Date | undefined;
}

/** Details of the complaint or dispute. */
export interface CaseDetails {
  /** Required. Details of original transaction. */
  originalTransaction:
    | OriginalTransaction
    | undefined;
  /** Required. Initiator of the complaint / dispute. */
  transactionSubType: TransactionSubType;
  /**
   * Required. The adjustment amount in URCS for the complaint / dispute. This
   * maps to `reqAdjAmount` in complaint request.
   */
  amount:
    | Money
    | undefined;
  /**
   * The original response code which has been updated in the complaint
   * Response. This should map to settlement response code currently available
   * in URCS system.
   */
  originalSettlementResponseCode: string;
  /**
   * Required. Set to true if the complaint / dispute belongs to current
   * settlement cycle, false otherwise.
   */
  currentCycle: boolean;
}

/** Response to the complaint or dispute. */
export interface CaseResponse {
  /**
   * Complaint Reference Number(CRN) sent by UPI as a reference against the
   * generated complaint / dispute.
   */
  complaintReferenceNumber: string;
  /**
   * The adjustment amount of the response. This maps to `adjAmt` in
   * complaint response.
   */
  amount:
    | Money
    | undefined;
  /**
   * The adjustment flag in response to the complaint. This maps adjustment flag
   * in URCS for the complaint transaction to `Resp.Ref.adjFlag` in complaint
   * response.
   */
  adjustmentFlag: string;
  /**
   * The adjustment code in response to the complaint. This maps reason code in
   * URCS for the complaint transaction to `Resp.Ref.adjCode` in complaint
   * response.
   */
  adjustmentCode: string;
  /**
   * It defines the Adjustment Reference ID which has been updated in the
   * complaint response. This maps to `adjRefID` in complaint response.
   */
  adjustmentReferenceId: string;
  /** Adjustment Remarks. This maps to `adjRemarks` in complaint response. */
  adjustmentRemarks: string;
  /**
   * The Approval Reference Number. This maps to `approvalNum` in complaint
   * response.
   */
  approvalNumber: string;
  /**
   * Process Status of the transaction. This maps to `procStatus` in complaint
   * response.
   */
  processStatus: string;
  /**
   * The adjustment timestamp when bank performs the adjustment for the received
   * complaint request. This maps to `adjTs` in complaint response.
   */
  adjustmentTime:
    | Date
    | undefined;
  /** The payer in the original financial transaction. */
  payer?:
    | Participant
    | undefined;
  /** The payee in the original financial transaction. */
  payee?:
    | Participant
    | undefined;
  /** The result of the transaction. */
  result: CaseResponse_Result;
}

/**
 * The status of the complaint or dispute transaction. This maps to `result`
 * in complaint transaction response.
 */
export enum CaseResponse_Result {
  /** RESULT_UNSPECIFIED - Unspecified status. */
  RESULT_UNSPECIFIED = 0,
  /** SUCCESS - The transaction has successfully completed. */
  SUCCESS = 1,
  /** FAILURE - The transaction has failed. */
  FAILURE = 2,
  UNRECOGNIZED = -1,
}

export function caseResponse_ResultFromJSON(object: any): CaseResponse_Result {
  switch (object) {
    case 0:
    case "RESULT_UNSPECIFIED":
      return CaseResponse_Result.RESULT_UNSPECIFIED;
    case 1:
    case "SUCCESS":
      return CaseResponse_Result.SUCCESS;
    case 2:
    case "FAILURE":
      return CaseResponse_Result.FAILURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CaseResponse_Result.UNRECOGNIZED;
  }
}

export function caseResponse_ResultToJSON(object: CaseResponse_Result): string {
  switch (object) {
    case CaseResponse_Result.RESULT_UNSPECIFIED:
      return "RESULT_UNSPECIFIED";
    case CaseResponse_Result.SUCCESS:
      return "SUCCESS";
    case CaseResponse_Result.FAILURE:
      return "FAILURE";
    case CaseResponse_Result.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The adjusment flag and reason code for raising complaint. */
export interface RaiseComplaintAdjustment {
  /**
   * Required. The adjustment flag in URCS for the complaint transaction. This
   * maps to `reqAdjFlag` in complaint request and `respAdjFlag` in complaint
   * response.
   */
  adjustmentFlag: RaiseComplaintAdjustment_AdjustmentFlag;
  /**
   * Required. The adjustment code in URCS for the complaint transaction. This
   * maps to `reqAdjCode` in complaint request.
   */
  adjustmentCode: RaiseComplaintAdjustment_ReasonCode;
}

/** The adjusment flag for raising complaint. */
export enum RaiseComplaintAdjustment_AdjustmentFlag {
  /** ADJUSTMENT_FLAG_UNSPECIFIED - Unspecified adjustment flag. */
  ADJUSTMENT_FLAG_UNSPECIFIED = 0,
  /**
   * RAISE - Complaint Raise. This flag maps to the `PBRB` adjustment flag as defined
   * in NPCI's `UDIR` specification.
   */
  RAISE = 1,
  UNRECOGNIZED = -1,
}

export function raiseComplaintAdjustment_AdjustmentFlagFromJSON(object: any): RaiseComplaintAdjustment_AdjustmentFlag {
  switch (object) {
    case 0:
    case "ADJUSTMENT_FLAG_UNSPECIFIED":
      return RaiseComplaintAdjustment_AdjustmentFlag.ADJUSTMENT_FLAG_UNSPECIFIED;
    case 1:
    case "RAISE":
      return RaiseComplaintAdjustment_AdjustmentFlag.RAISE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RaiseComplaintAdjustment_AdjustmentFlag.UNRECOGNIZED;
  }
}

export function raiseComplaintAdjustment_AdjustmentFlagToJSON(object: RaiseComplaintAdjustment_AdjustmentFlag): string {
  switch (object) {
    case RaiseComplaintAdjustment_AdjustmentFlag.ADJUSTMENT_FLAG_UNSPECIFIED:
      return "ADJUSTMENT_FLAG_UNSPECIFIED";
    case RaiseComplaintAdjustment_AdjustmentFlag.RAISE:
      return "RAISE";
    case RaiseComplaintAdjustment_AdjustmentFlag.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The reason for raising complaint. */
export enum RaiseComplaintAdjustment_ReasonCode {
  /** REASON_CODE_UNSPECIFIED - Unspecified reason code. */
  REASON_CODE_UNSPECIFIED = 0,
  /**
   * CUSTOMER_ACCOUNT_NOT_REVERSED - Customer account has not yet reversed for a declined pay transaction.
   * This reason code maps to the `U005` reason code as defined in NPCI's
   * `UDIR` specification.
   */
  CUSTOMER_ACCOUNT_NOT_REVERSED = 1,
  /**
   * GOODS_SERVICES_NOT_PROVIDED - Goods / services are not provided for approved transaction.
   * This reason code maps to the `U008` reason code as defined in NPCI's
   * `UDIR` specification.
   */
  GOODS_SERVICES_NOT_PROVIDED = 2,
  /**
   * CUSTOMER_ACCOUNT_NOT_CREDITED_BACK - Customer account not credited back for declined transaction. This
   * reason code maps to the `U009` reason code as defined in NPCI's `UDIR`
   * specification.
   */
  CUSTOMER_ACCOUNT_NOT_CREDITED_BACK = 3,
  /**
   * BENEFICIARY_ACCOUNT_NOT_CREDITED - Beneficiary account is not credited for successful pay transaction. This
   * reason code maps to the `U010` reason code as defined in NPCI's `UDIR`
   * specification.
   */
  BENEFICIARY_ACCOUNT_NOT_CREDITED = 4,
  /**
   * GOODS_SERVICES_CREDIT_NOT_PROCESSED - Credit not processed for cancelled or returned goods and services.
   * This reason code maps to the `U021` reason code as defined in NPCI's
   * `UDIR` specification.
   */
  GOODS_SERVICES_CREDIT_NOT_PROCESSED = 5,
  /**
   * MERCHANT_NOT_RECEIVED_CONFIRMATION - Account debited but transaction confirmation not received at merchant
   * location. This reason code maps to the `U022` reason code as defined in
   * NPCI's `UDIR` specification.
   */
  MERCHANT_NOT_RECEIVED_CONFIRMATION = 6,
  /**
   * PAID_BY_ALTERNATE_MEANS - Paid by alternate means / Duplicate payment. This reason code maps to the
   * `U023` reason code as defined in NPCI's `UDIR` specification.
   */
  PAID_BY_ALTERNATE_MEANS = 7,
  UNRECOGNIZED = -1,
}

export function raiseComplaintAdjustment_ReasonCodeFromJSON(object: any): RaiseComplaintAdjustment_ReasonCode {
  switch (object) {
    case 0:
    case "REASON_CODE_UNSPECIFIED":
      return RaiseComplaintAdjustment_ReasonCode.REASON_CODE_UNSPECIFIED;
    case 1:
    case "CUSTOMER_ACCOUNT_NOT_REVERSED":
      return RaiseComplaintAdjustment_ReasonCode.CUSTOMER_ACCOUNT_NOT_REVERSED;
    case 2:
    case "GOODS_SERVICES_NOT_PROVIDED":
      return RaiseComplaintAdjustment_ReasonCode.GOODS_SERVICES_NOT_PROVIDED;
    case 3:
    case "CUSTOMER_ACCOUNT_NOT_CREDITED_BACK":
      return RaiseComplaintAdjustment_ReasonCode.CUSTOMER_ACCOUNT_NOT_CREDITED_BACK;
    case 4:
    case "BENEFICIARY_ACCOUNT_NOT_CREDITED":
      return RaiseComplaintAdjustment_ReasonCode.BENEFICIARY_ACCOUNT_NOT_CREDITED;
    case 5:
    case "GOODS_SERVICES_CREDIT_NOT_PROCESSED":
      return RaiseComplaintAdjustment_ReasonCode.GOODS_SERVICES_CREDIT_NOT_PROCESSED;
    case 6:
    case "MERCHANT_NOT_RECEIVED_CONFIRMATION":
      return RaiseComplaintAdjustment_ReasonCode.MERCHANT_NOT_RECEIVED_CONFIRMATION;
    case 7:
    case "PAID_BY_ALTERNATE_MEANS":
      return RaiseComplaintAdjustment_ReasonCode.PAID_BY_ALTERNATE_MEANS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RaiseComplaintAdjustment_ReasonCode.UNRECOGNIZED;
  }
}

export function raiseComplaintAdjustment_ReasonCodeToJSON(object: RaiseComplaintAdjustment_ReasonCode): string {
  switch (object) {
    case RaiseComplaintAdjustment_ReasonCode.REASON_CODE_UNSPECIFIED:
      return "REASON_CODE_UNSPECIFIED";
    case RaiseComplaintAdjustment_ReasonCode.CUSTOMER_ACCOUNT_NOT_REVERSED:
      return "CUSTOMER_ACCOUNT_NOT_REVERSED";
    case RaiseComplaintAdjustment_ReasonCode.GOODS_SERVICES_NOT_PROVIDED:
      return "GOODS_SERVICES_NOT_PROVIDED";
    case RaiseComplaintAdjustment_ReasonCode.CUSTOMER_ACCOUNT_NOT_CREDITED_BACK:
      return "CUSTOMER_ACCOUNT_NOT_CREDITED_BACK";
    case RaiseComplaintAdjustment_ReasonCode.BENEFICIARY_ACCOUNT_NOT_CREDITED:
      return "BENEFICIARY_ACCOUNT_NOT_CREDITED";
    case RaiseComplaintAdjustment_ReasonCode.GOODS_SERVICES_CREDIT_NOT_PROCESSED:
      return "GOODS_SERVICES_CREDIT_NOT_PROCESSED";
    case RaiseComplaintAdjustment_ReasonCode.MERCHANT_NOT_RECEIVED_CONFIRMATION:
      return "MERCHANT_NOT_RECEIVED_CONFIRMATION";
    case RaiseComplaintAdjustment_ReasonCode.PAID_BY_ALTERNATE_MEANS:
      return "PAID_BY_ALTERNATE_MEANS";
    case RaiseComplaintAdjustment_ReasonCode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The adjusment flag and reason code for resolving the complaint. */
export interface ResolveComplaintAdjustment {
  /**
   * Required. The adjustment flag in URCS for the complaint transaction. This
   * maps to `reqAdjFlag` in complaint request and `respAdjFlag` in complaint
   * response.
   */
  adjustmentFlag: ResolveComplaintAdjustment_AdjustmentFlag;
  /**
   * Required. The adjustment code in URCS for the complaint transaction. This
   * maps to `reqAdjCode` in complaint request.
   */
  adjustmentCode: ResolveComplaintAdjustment_ReasonCode;
}

/** The adjusment flag for resolving the complaint. */
export enum ResolveComplaintAdjustment_AdjustmentFlag {
  /** ADJUSTMENT_FLAG_UNSPECIFIED - Unspecified adjustment flag. */
  ADJUSTMENT_FLAG_UNSPECIFIED = 0,
  /**
   * DEBIT_REVERSAL_CONFIRMATION - Debit Reversal Confirmation. This flag maps to the `DRC` adjustment flag
   * as defined in NPCI's `UDIR` specification.
   */
  DEBIT_REVERSAL_CONFIRMATION = 1,
  /**
   * RETURN - Return. This flag maps to the `RET` adjustment flag as defined in NPCI's
   * `UDIR` specification.
   */
  RETURN = 2,
  /**
   * REFUND_REVERSAL_CONFIRMATION - Refund Reversal Confirmation. This flag maps to the `RRC` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   */
  REFUND_REVERSAL_CONFIRMATION = 3,
  /**
   * TRANSACTION_CREDIT_CONFIRMATION - Transaction Credit Confirmation. This flag maps to the `TCC` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   */
  TRANSACTION_CREDIT_CONFIRMATION = 4,
  UNRECOGNIZED = -1,
}

export function resolveComplaintAdjustment_AdjustmentFlagFromJSON(
  object: any,
): ResolveComplaintAdjustment_AdjustmentFlag {
  switch (object) {
    case 0:
    case "ADJUSTMENT_FLAG_UNSPECIFIED":
      return ResolveComplaintAdjustment_AdjustmentFlag.ADJUSTMENT_FLAG_UNSPECIFIED;
    case 1:
    case "DEBIT_REVERSAL_CONFIRMATION":
      return ResolveComplaintAdjustment_AdjustmentFlag.DEBIT_REVERSAL_CONFIRMATION;
    case 2:
    case "RETURN":
      return ResolveComplaintAdjustment_AdjustmentFlag.RETURN;
    case 3:
    case "REFUND_REVERSAL_CONFIRMATION":
      return ResolveComplaintAdjustment_AdjustmentFlag.REFUND_REVERSAL_CONFIRMATION;
    case 4:
    case "TRANSACTION_CREDIT_CONFIRMATION":
      return ResolveComplaintAdjustment_AdjustmentFlag.TRANSACTION_CREDIT_CONFIRMATION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResolveComplaintAdjustment_AdjustmentFlag.UNRECOGNIZED;
  }
}

export function resolveComplaintAdjustment_AdjustmentFlagToJSON(
  object: ResolveComplaintAdjustment_AdjustmentFlag,
): string {
  switch (object) {
    case ResolveComplaintAdjustment_AdjustmentFlag.ADJUSTMENT_FLAG_UNSPECIFIED:
      return "ADJUSTMENT_FLAG_UNSPECIFIED";
    case ResolveComplaintAdjustment_AdjustmentFlag.DEBIT_REVERSAL_CONFIRMATION:
      return "DEBIT_REVERSAL_CONFIRMATION";
    case ResolveComplaintAdjustment_AdjustmentFlag.RETURN:
      return "RETURN";
    case ResolveComplaintAdjustment_AdjustmentFlag.REFUND_REVERSAL_CONFIRMATION:
      return "REFUND_REVERSAL_CONFIRMATION";
    case ResolveComplaintAdjustment_AdjustmentFlag.TRANSACTION_CREDIT_CONFIRMATION:
      return "TRANSACTION_CREDIT_CONFIRMATION";
    case ResolveComplaintAdjustment_AdjustmentFlag.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The complaint resolution reason code. */
export enum ResolveComplaintAdjustment_ReasonCode {
  /** REASON_CODE_UNSPECIFIED - Unspecified reason code. */
  REASON_CODE_UNSPECIFIED = 0,
  /**
   * COMPLAINT_RESOLVED_ONLINE - Customer account has been reversed online for DRC dispute or beneficiary
   * account has been credited online for TCC dispute. This reason code maps
   * to the `102` reason code as defined in NPCI's `UDIR` specification.
   */
  COMPLAINT_RESOLVED_ONLINE = 1,
  /**
   * COMPLAINT_RESOLVED_NOW_OR_MANUALLY - Customer account has been reversed now or manually post reconciliation
   * for DRC dispute or beneficiary account has been credited now or manually
   * post reconciliation for TCC dispute. This reason code maps to the `103`
   * reason code as defined in NPCI's `UDIR` specification.
   */
  COMPLAINT_RESOLVED_NOW_OR_MANUALLY = 2,
  /**
   * ORIGINAL_TRANSACTION_NOT_DONE - Online decline response failed. This reason code maps to the
   * `104` reason code as defined in NPCI's `UDIR` specification.
   */
  ORIGINAL_TRANSACTION_NOT_DONE = 3,
  /**
   * RET_ACCOUNT_CLOSED - Account closed. This reason code maps to the `114` reason code for
   * RET dispute as defined in NPCI's `UDIR` specification.
   */
  RET_ACCOUNT_CLOSED = 4,
  /**
   * RET_ACCOUNT_DOES_NOT_EXIST - Account does not exist. This reason code maps to the `115` reason code
   * for RET dispute as defined in NPCI's `UDIR` specification.
   */
  RET_ACCOUNT_DOES_NOT_EXIST = 5,
  /**
   * RET_PARTY_INSTRUCTIONS - Party instructions. This reason code maps to the `116` reason code for
   * RET dispute as defined in NPCI's `UDIR` specification.
   */
  RET_PARTY_INSTRUCTIONS = 6,
  /**
   * RET_NRI_ACCOUNT - NRI account. This reason code maps to the `117` reason code for RET
   * dispute as defined in NPCI's `UDIR` specification.
   */
  RET_NRI_ACCOUNT = 7,
  /**
   * RET_CREDIT_FREEZED - Credit freezed. This reason code maps to the `118` reason code for RET
   * dispute as defined in NPCI's `UDIR` specification.
   */
  RET_CREDIT_FREEZED = 8,
  /**
   * RET_INVALID_BENEFICIARY_DETAILS - Invalid beneficiary details. This reason code maps to the `119` reason
   * code for RET dispute as defined in NPCI's `UDIR` specification.
   */
  RET_INVALID_BENEFICIARY_DETAILS = 9,
  /**
   * RET_ANY_OTHER_REASON - Any other reason. This reason code maps to the `120` reason code for RET
   * dispute as defined in NPCI's `UDIR` specification.
   */
  RET_ANY_OTHER_REASON = 10,
  /**
   * RET_BENEFICIARY_CANNOT_CREDIT - Beneficiary bank unable to credit their customer account.
   * This reason code maps to the `1094` reason code for RET dispute as
   * defined in NPCI's `UDIR` specification.
   */
  RET_BENEFICIARY_CANNOT_CREDIT = 11,
  /**
   * RET_MERCHANT_NOT_RECEIVED_CONFIRMATION - Account debited but transaction confirmation not received at merchant
   * location. This reason code maps to the `1065` reason code for Credit
   * adjustment and RET dispute as defined in NPCI's `UDIR` specification.
   */
  RET_MERCHANT_NOT_RECEIVED_CONFIRMATION = 12,
  /**
   * RRC_CUSTOMER_ACCOUNT_CREDITED - Customer account has been credited. This reason code maps to the `501`
   * reason code for Refund reversal confirmation dispute as defined in NPCI's
   * `UDIR` specification.
   */
  RRC_CUSTOMER_ACCOUNT_CREDITED = 13,
  UNRECOGNIZED = -1,
}

export function resolveComplaintAdjustment_ReasonCodeFromJSON(object: any): ResolveComplaintAdjustment_ReasonCode {
  switch (object) {
    case 0:
    case "REASON_CODE_UNSPECIFIED":
      return ResolveComplaintAdjustment_ReasonCode.REASON_CODE_UNSPECIFIED;
    case 1:
    case "COMPLAINT_RESOLVED_ONLINE":
      return ResolveComplaintAdjustment_ReasonCode.COMPLAINT_RESOLVED_ONLINE;
    case 2:
    case "COMPLAINT_RESOLVED_NOW_OR_MANUALLY":
      return ResolveComplaintAdjustment_ReasonCode.COMPLAINT_RESOLVED_NOW_OR_MANUALLY;
    case 3:
    case "ORIGINAL_TRANSACTION_NOT_DONE":
      return ResolveComplaintAdjustment_ReasonCode.ORIGINAL_TRANSACTION_NOT_DONE;
    case 4:
    case "RET_ACCOUNT_CLOSED":
      return ResolveComplaintAdjustment_ReasonCode.RET_ACCOUNT_CLOSED;
    case 5:
    case "RET_ACCOUNT_DOES_NOT_EXIST":
      return ResolveComplaintAdjustment_ReasonCode.RET_ACCOUNT_DOES_NOT_EXIST;
    case 6:
    case "RET_PARTY_INSTRUCTIONS":
      return ResolveComplaintAdjustment_ReasonCode.RET_PARTY_INSTRUCTIONS;
    case 7:
    case "RET_NRI_ACCOUNT":
      return ResolveComplaintAdjustment_ReasonCode.RET_NRI_ACCOUNT;
    case 8:
    case "RET_CREDIT_FREEZED":
      return ResolveComplaintAdjustment_ReasonCode.RET_CREDIT_FREEZED;
    case 9:
    case "RET_INVALID_BENEFICIARY_DETAILS":
      return ResolveComplaintAdjustment_ReasonCode.RET_INVALID_BENEFICIARY_DETAILS;
    case 10:
    case "RET_ANY_OTHER_REASON":
      return ResolveComplaintAdjustment_ReasonCode.RET_ANY_OTHER_REASON;
    case 11:
    case "RET_BENEFICIARY_CANNOT_CREDIT":
      return ResolveComplaintAdjustment_ReasonCode.RET_BENEFICIARY_CANNOT_CREDIT;
    case 12:
    case "RET_MERCHANT_NOT_RECEIVED_CONFIRMATION":
      return ResolveComplaintAdjustment_ReasonCode.RET_MERCHANT_NOT_RECEIVED_CONFIRMATION;
    case 13:
    case "RRC_CUSTOMER_ACCOUNT_CREDITED":
      return ResolveComplaintAdjustment_ReasonCode.RRC_CUSTOMER_ACCOUNT_CREDITED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResolveComplaintAdjustment_ReasonCode.UNRECOGNIZED;
  }
}

export function resolveComplaintAdjustment_ReasonCodeToJSON(object: ResolveComplaintAdjustment_ReasonCode): string {
  switch (object) {
    case ResolveComplaintAdjustment_ReasonCode.REASON_CODE_UNSPECIFIED:
      return "REASON_CODE_UNSPECIFIED";
    case ResolveComplaintAdjustment_ReasonCode.COMPLAINT_RESOLVED_ONLINE:
      return "COMPLAINT_RESOLVED_ONLINE";
    case ResolveComplaintAdjustment_ReasonCode.COMPLAINT_RESOLVED_NOW_OR_MANUALLY:
      return "COMPLAINT_RESOLVED_NOW_OR_MANUALLY";
    case ResolveComplaintAdjustment_ReasonCode.ORIGINAL_TRANSACTION_NOT_DONE:
      return "ORIGINAL_TRANSACTION_NOT_DONE";
    case ResolveComplaintAdjustment_ReasonCode.RET_ACCOUNT_CLOSED:
      return "RET_ACCOUNT_CLOSED";
    case ResolveComplaintAdjustment_ReasonCode.RET_ACCOUNT_DOES_NOT_EXIST:
      return "RET_ACCOUNT_DOES_NOT_EXIST";
    case ResolveComplaintAdjustment_ReasonCode.RET_PARTY_INSTRUCTIONS:
      return "RET_PARTY_INSTRUCTIONS";
    case ResolveComplaintAdjustment_ReasonCode.RET_NRI_ACCOUNT:
      return "RET_NRI_ACCOUNT";
    case ResolveComplaintAdjustment_ReasonCode.RET_CREDIT_FREEZED:
      return "RET_CREDIT_FREEZED";
    case ResolveComplaintAdjustment_ReasonCode.RET_INVALID_BENEFICIARY_DETAILS:
      return "RET_INVALID_BENEFICIARY_DETAILS";
    case ResolveComplaintAdjustment_ReasonCode.RET_ANY_OTHER_REASON:
      return "RET_ANY_OTHER_REASON";
    case ResolveComplaintAdjustment_ReasonCode.RET_BENEFICIARY_CANNOT_CREDIT:
      return "RET_BENEFICIARY_CANNOT_CREDIT";
    case ResolveComplaintAdjustment_ReasonCode.RET_MERCHANT_NOT_RECEIVED_CONFIRMATION:
      return "RET_MERCHANT_NOT_RECEIVED_CONFIRMATION";
    case ResolveComplaintAdjustment_ReasonCode.RRC_CUSTOMER_ACCOUNT_CREDITED:
      return "RRC_CUSTOMER_ACCOUNT_CREDITED";
    case ResolveComplaintAdjustment_ReasonCode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The adjusment flag and reason code for raising dispute. */
export interface RaiseDisputeAdjustment {
  /**
   * Required. The adjustment flag in URCS for the complaint transaction. This
   * maps to `reqAdjFlag` in dispute request and `respAdjFlag` in dispute
   * response.
   */
  adjustmentFlag: RaiseDisputeAdjustment_AdjustmentFlag;
  /**
   * Required. The adjustment code in URCS for the complaint transaction. This
   * maps to `reqAdjCode` in dispute request.
   */
  adjustmentCode: RaiseDisputeAdjustment_ReasonCode;
}

/** The adjusment flag for raising dispute. */
export enum RaiseDisputeAdjustment_AdjustmentFlag {
  /** ADJUSTMENT_FLAG_UNSPECIFIED - Unspecified adjustment flag. */
  ADJUSTMENT_FLAG_UNSPECIFIED = 0,
  /**
   * CHARGEBACK_RAISE - Chargeback Raise. This flag maps to the `B` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   */
  CHARGEBACK_RAISE = 1,
  /**
   * FRAUD_CHARGEBACK_RAISE - Fraud Chargeback Raise. This flag maps to the `FC` adjustment flag
   * as defined in NPCI's `UDIR` specification.
   */
  FRAUD_CHARGEBACK_RAISE = 2,
  /**
   * WRONG_CREDIT_CHARGEBACK_RAISE - Wrong Credit Chargeback Raise. This flag maps to the `WC` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   */
  WRONG_CREDIT_CHARGEBACK_RAISE = 3,
  /**
   * DEFERRED_CHARGEBACK_RAISE - Deferred Chargeback Raise. This flag maps to the `FB` adjustment flag
   * as defined in NPCI's `UDIR` specification.
   */
  DEFERRED_CHARGEBACK_RAISE = 4,
  /**
   * PRE_ARBITRATION_RAISE - Pre-Arbitration Raise. This flag maps to the `P` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   */
  PRE_ARBITRATION_RAISE = 5,
  /**
   * DEFERRED_PRE_ARBITRATION_RAISE - Deferred Pre-Arbitration Raise. This flag maps to the `FP` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   */
  DEFERRED_PRE_ARBITRATION_RAISE = 6,
  /**
   * ARBITRATION_RAISE - Arbitration Raise. This flag maps to the `AR` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   */
  ARBITRATION_RAISE = 7,
  /**
   * DEFERRED_ARBITRATION_RAISE - Deferred Arbitration Raise. This flag maps to the `FAR` adjustment flag
   * as defined in NPCI's `UDIR` specification.
   */
  DEFERRED_ARBITRATION_RAISE = 8,
  UNRECOGNIZED = -1,
}

export function raiseDisputeAdjustment_AdjustmentFlagFromJSON(object: any): RaiseDisputeAdjustment_AdjustmentFlag {
  switch (object) {
    case 0:
    case "ADJUSTMENT_FLAG_UNSPECIFIED":
      return RaiseDisputeAdjustment_AdjustmentFlag.ADJUSTMENT_FLAG_UNSPECIFIED;
    case 1:
    case "CHARGEBACK_RAISE":
      return RaiseDisputeAdjustment_AdjustmentFlag.CHARGEBACK_RAISE;
    case 2:
    case "FRAUD_CHARGEBACK_RAISE":
      return RaiseDisputeAdjustment_AdjustmentFlag.FRAUD_CHARGEBACK_RAISE;
    case 3:
    case "WRONG_CREDIT_CHARGEBACK_RAISE":
      return RaiseDisputeAdjustment_AdjustmentFlag.WRONG_CREDIT_CHARGEBACK_RAISE;
    case 4:
    case "DEFERRED_CHARGEBACK_RAISE":
      return RaiseDisputeAdjustment_AdjustmentFlag.DEFERRED_CHARGEBACK_RAISE;
    case 5:
    case "PRE_ARBITRATION_RAISE":
      return RaiseDisputeAdjustment_AdjustmentFlag.PRE_ARBITRATION_RAISE;
    case 6:
    case "DEFERRED_PRE_ARBITRATION_RAISE":
      return RaiseDisputeAdjustment_AdjustmentFlag.DEFERRED_PRE_ARBITRATION_RAISE;
    case 7:
    case "ARBITRATION_RAISE":
      return RaiseDisputeAdjustment_AdjustmentFlag.ARBITRATION_RAISE;
    case 8:
    case "DEFERRED_ARBITRATION_RAISE":
      return RaiseDisputeAdjustment_AdjustmentFlag.DEFERRED_ARBITRATION_RAISE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RaiseDisputeAdjustment_AdjustmentFlag.UNRECOGNIZED;
  }
}

export function raiseDisputeAdjustment_AdjustmentFlagToJSON(object: RaiseDisputeAdjustment_AdjustmentFlag): string {
  switch (object) {
    case RaiseDisputeAdjustment_AdjustmentFlag.ADJUSTMENT_FLAG_UNSPECIFIED:
      return "ADJUSTMENT_FLAG_UNSPECIFIED";
    case RaiseDisputeAdjustment_AdjustmentFlag.CHARGEBACK_RAISE:
      return "CHARGEBACK_RAISE";
    case RaiseDisputeAdjustment_AdjustmentFlag.FRAUD_CHARGEBACK_RAISE:
      return "FRAUD_CHARGEBACK_RAISE";
    case RaiseDisputeAdjustment_AdjustmentFlag.WRONG_CREDIT_CHARGEBACK_RAISE:
      return "WRONG_CREDIT_CHARGEBACK_RAISE";
    case RaiseDisputeAdjustment_AdjustmentFlag.DEFERRED_CHARGEBACK_RAISE:
      return "DEFERRED_CHARGEBACK_RAISE";
    case RaiseDisputeAdjustment_AdjustmentFlag.PRE_ARBITRATION_RAISE:
      return "PRE_ARBITRATION_RAISE";
    case RaiseDisputeAdjustment_AdjustmentFlag.DEFERRED_PRE_ARBITRATION_RAISE:
      return "DEFERRED_PRE_ARBITRATION_RAISE";
    case RaiseDisputeAdjustment_AdjustmentFlag.ARBITRATION_RAISE:
      return "ARBITRATION_RAISE";
    case RaiseDisputeAdjustment_AdjustmentFlag.DEFERRED_ARBITRATION_RAISE:
      return "DEFERRED_ARBITRATION_RAISE";
    case RaiseDisputeAdjustment_AdjustmentFlag.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The reason for raising dispute. */
export enum RaiseDisputeAdjustment_ReasonCode {
  /** REASON_CODE_UNSPECIFIED - Unspecified reason code. */
  REASON_CODE_UNSPECIFIED = 0,
  /**
   * CHARGEBACK_RAISE_REMITTER_DEBITED_BENEFICIARY_NOT_CREDITED - Remitter account is debited but beneficiary account is not credited.
   * This reason code maps to the `108` reason code as defined in
   * NPCI's `UDIR` specification.
   */
  CHARGEBACK_RAISE_REMITTER_DEBITED_BENEFICIARY_NOT_CREDITED = 1,
  /**
   * PRE_ARBITRATION_RAISE_BENEFICIARY_NOT_CREDITED - Remitter bank customer still disputes that beneficiary account is not
   * credited. This reason code maps to the `109` reason code as defined in
   * NPCI's `UDIR` specification.
   */
  PRE_ARBITRATION_RAISE_BENEFICIARY_NOT_CREDITED = 2,
  /**
   * DEFERRED_CHARGEBACK_RAISE_BENEFICIARY_NOT_CREDITED - TCC has been raised but customer still complaining that beneficiary
   * account is not credited. This reason code maps to the `121` reason code
   * as defined in NPCI's `UDIR` specification.
   */
  DEFERRED_CHARGEBACK_RAISE_BENEFICIARY_NOT_CREDITED = 3,
  /**
   * DEFERRED_PRE_ARBITRATION_RAISE_BENEFICIARY_NOT_CREDITED - Customer is still complaining for not crediting the beneficiary
   * customer account. This reason code maps to the `124` reason code as
   * defined in NPCI's `UDIR` specification.
   */
  DEFERRED_PRE_ARBITRATION_RAISE_BENEFICIARY_NOT_CREDITED = 4,
  /**
   * DEFERRED_ARBITRATION_RAISE_DEFERRED_CHARGEBACK_PRE_ARBITRATION_REJECTED - Customer is complaining even after raising Deferred Chargeback and
   * Pre-Arbitration on Deferred Chargeback where both have been rejected by
   * beneficiary bank. This reason code maps to the `127` reason code as
   * defined in NPCI's `UDIR` specification.
   */
  DEFERRED_ARBITRATION_RAISE_DEFERRED_CHARGEBACK_PRE_ARBITRATION_REJECTED = 5,
  /**
   * CHARGEBACK_ON_FRAUD - Chargeback on fraudulent transaction. This reason code maps to the `128`
   * reason code as defined in NPCI's `UDIR` specification.
   */
  CHARGEBACK_ON_FRAUD = 6,
  /**
   * GOODS_SERVICES_CREDIT_NOT_PROCESSED - Credit not processed for cancelled or returned goods and services. This
   * reason code maps to the `1061` reason code as defined in NPCI's `UDIR`
   * specification.
   */
  GOODS_SERVICES_CREDIT_NOT_PROCESSED = 7,
  /**
   * GOODS_SERVICES_DEFECTIVE - Goods and services not as described / defective. This reason code maps to
   * the `1062` reason code as defined in NPCI's `UDIR` specification.
   */
  GOODS_SERVICES_DEFECTIVE = 8,
  /**
   * PAID_BY_ALTERNATE_MEANS - Paid by alternate means. This reason code maps to the `1063` reason code
   * as defined in NPCI's `UDIR` specification.
   */
  PAID_BY_ALTERNATE_MEANS = 9,
  /**
   * GOODS_SERVICES_NOT_RECEIVED - Goods or services not provided / not received. This reason code maps to
   * the `1064` reason code as defined in NPCI's `UDIR` specification.
   */
  GOODS_SERVICES_NOT_RECEIVED = 10,
  /**
   * MERCHANT_NOT_RECEIVED_CONFIRMATION - Account debited but transaction confirmation not received at merchant
   * location. This reason code maps to the `1065` reason code for chargeback
   * raise and deferred chargeback raise as defined in NPCI's `UDIR`
   * specification.
   */
  MERCHANT_NOT_RECEIVED_CONFIRMATION = 11,
  /**
   * TRANSACTION_NOT_STEELED - Transaction not steeled within the specified timeframes. This reason code
   * maps to the `1081` reason code as defined in NPCI's `UDIR` specification.
   */
  TRANSACTION_NOT_STEELED = 12,
  /**
   * DUPLICATE_TRANSACTION - Duplicate / Multiple transaction. This reason code maps to the `1084`
   * reason code as defined in NPCI's `UDIR` specification.
   */
  DUPLICATE_TRANSACTION = 13,
  /**
   * CHARGEBACK_CARD_HOLDER_CHARGED_MORE - Card holder was charged more than the transaction amount.
   * This reason code maps to the `1085` reason code for Chargeback raise
   * dispute as defined in NPCI's `UDIR` specification.
   */
  CHARGEBACK_CARD_HOLDER_CHARGED_MORE = 14,
  /**
   * CUSTOMER_CLAIMING_GOODS_SERVICES_NOT_DELIVERED - Customer is still claiming that services are not delivered. This reason
   * code maps to the `1097` reason code as defined in NPCI's `UDIR`
   * specification.
   */
  CUSTOMER_CLAIMING_GOODS_SERVICES_NOT_DELIVERED = 15,
  /**
   * PARTIES_DENIED - Both the parties denied to agree. This reason code maps to the `1100`
   * reason code as defined in NPCI's `UDIR` specification.
   */
  PARTIES_DENIED = 16,
  /**
   * FUNDS_TRANSFERRED_TO_UNINTENDED_BENEFICIARY - Customer transferred funds to the unintended beneficiary account. This
   * reason code maps to the `WC1` reason code as defined in NPCI's `UDIR`
   * specification.
   */
  FUNDS_TRANSFERRED_TO_UNINTENDED_BENEFICIARY = 17,
  UNRECOGNIZED = -1,
}

export function raiseDisputeAdjustment_ReasonCodeFromJSON(object: any): RaiseDisputeAdjustment_ReasonCode {
  switch (object) {
    case 0:
    case "REASON_CODE_UNSPECIFIED":
      return RaiseDisputeAdjustment_ReasonCode.REASON_CODE_UNSPECIFIED;
    case 1:
    case "CHARGEBACK_RAISE_REMITTER_DEBITED_BENEFICIARY_NOT_CREDITED":
      return RaiseDisputeAdjustment_ReasonCode.CHARGEBACK_RAISE_REMITTER_DEBITED_BENEFICIARY_NOT_CREDITED;
    case 2:
    case "PRE_ARBITRATION_RAISE_BENEFICIARY_NOT_CREDITED":
      return RaiseDisputeAdjustment_ReasonCode.PRE_ARBITRATION_RAISE_BENEFICIARY_NOT_CREDITED;
    case 3:
    case "DEFERRED_CHARGEBACK_RAISE_BENEFICIARY_NOT_CREDITED":
      return RaiseDisputeAdjustment_ReasonCode.DEFERRED_CHARGEBACK_RAISE_BENEFICIARY_NOT_CREDITED;
    case 4:
    case "DEFERRED_PRE_ARBITRATION_RAISE_BENEFICIARY_NOT_CREDITED":
      return RaiseDisputeAdjustment_ReasonCode.DEFERRED_PRE_ARBITRATION_RAISE_BENEFICIARY_NOT_CREDITED;
    case 5:
    case "DEFERRED_ARBITRATION_RAISE_DEFERRED_CHARGEBACK_PRE_ARBITRATION_REJECTED":
      return RaiseDisputeAdjustment_ReasonCode.DEFERRED_ARBITRATION_RAISE_DEFERRED_CHARGEBACK_PRE_ARBITRATION_REJECTED;
    case 6:
    case "CHARGEBACK_ON_FRAUD":
      return RaiseDisputeAdjustment_ReasonCode.CHARGEBACK_ON_FRAUD;
    case 7:
    case "GOODS_SERVICES_CREDIT_NOT_PROCESSED":
      return RaiseDisputeAdjustment_ReasonCode.GOODS_SERVICES_CREDIT_NOT_PROCESSED;
    case 8:
    case "GOODS_SERVICES_DEFECTIVE":
      return RaiseDisputeAdjustment_ReasonCode.GOODS_SERVICES_DEFECTIVE;
    case 9:
    case "PAID_BY_ALTERNATE_MEANS":
      return RaiseDisputeAdjustment_ReasonCode.PAID_BY_ALTERNATE_MEANS;
    case 10:
    case "GOODS_SERVICES_NOT_RECEIVED":
      return RaiseDisputeAdjustment_ReasonCode.GOODS_SERVICES_NOT_RECEIVED;
    case 11:
    case "MERCHANT_NOT_RECEIVED_CONFIRMATION":
      return RaiseDisputeAdjustment_ReasonCode.MERCHANT_NOT_RECEIVED_CONFIRMATION;
    case 12:
    case "TRANSACTION_NOT_STEELED":
      return RaiseDisputeAdjustment_ReasonCode.TRANSACTION_NOT_STEELED;
    case 13:
    case "DUPLICATE_TRANSACTION":
      return RaiseDisputeAdjustment_ReasonCode.DUPLICATE_TRANSACTION;
    case 14:
    case "CHARGEBACK_CARD_HOLDER_CHARGED_MORE":
      return RaiseDisputeAdjustment_ReasonCode.CHARGEBACK_CARD_HOLDER_CHARGED_MORE;
    case 15:
    case "CUSTOMER_CLAIMING_GOODS_SERVICES_NOT_DELIVERED":
      return RaiseDisputeAdjustment_ReasonCode.CUSTOMER_CLAIMING_GOODS_SERVICES_NOT_DELIVERED;
    case 16:
    case "PARTIES_DENIED":
      return RaiseDisputeAdjustment_ReasonCode.PARTIES_DENIED;
    case 17:
    case "FUNDS_TRANSFERRED_TO_UNINTENDED_BENEFICIARY":
      return RaiseDisputeAdjustment_ReasonCode.FUNDS_TRANSFERRED_TO_UNINTENDED_BENEFICIARY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RaiseDisputeAdjustment_ReasonCode.UNRECOGNIZED;
  }
}

export function raiseDisputeAdjustment_ReasonCodeToJSON(object: RaiseDisputeAdjustment_ReasonCode): string {
  switch (object) {
    case RaiseDisputeAdjustment_ReasonCode.REASON_CODE_UNSPECIFIED:
      return "REASON_CODE_UNSPECIFIED";
    case RaiseDisputeAdjustment_ReasonCode.CHARGEBACK_RAISE_REMITTER_DEBITED_BENEFICIARY_NOT_CREDITED:
      return "CHARGEBACK_RAISE_REMITTER_DEBITED_BENEFICIARY_NOT_CREDITED";
    case RaiseDisputeAdjustment_ReasonCode.PRE_ARBITRATION_RAISE_BENEFICIARY_NOT_CREDITED:
      return "PRE_ARBITRATION_RAISE_BENEFICIARY_NOT_CREDITED";
    case RaiseDisputeAdjustment_ReasonCode.DEFERRED_CHARGEBACK_RAISE_BENEFICIARY_NOT_CREDITED:
      return "DEFERRED_CHARGEBACK_RAISE_BENEFICIARY_NOT_CREDITED";
    case RaiseDisputeAdjustment_ReasonCode.DEFERRED_PRE_ARBITRATION_RAISE_BENEFICIARY_NOT_CREDITED:
      return "DEFERRED_PRE_ARBITRATION_RAISE_BENEFICIARY_NOT_CREDITED";
    case RaiseDisputeAdjustment_ReasonCode.DEFERRED_ARBITRATION_RAISE_DEFERRED_CHARGEBACK_PRE_ARBITRATION_REJECTED:
      return "DEFERRED_ARBITRATION_RAISE_DEFERRED_CHARGEBACK_PRE_ARBITRATION_REJECTED";
    case RaiseDisputeAdjustment_ReasonCode.CHARGEBACK_ON_FRAUD:
      return "CHARGEBACK_ON_FRAUD";
    case RaiseDisputeAdjustment_ReasonCode.GOODS_SERVICES_CREDIT_NOT_PROCESSED:
      return "GOODS_SERVICES_CREDIT_NOT_PROCESSED";
    case RaiseDisputeAdjustment_ReasonCode.GOODS_SERVICES_DEFECTIVE:
      return "GOODS_SERVICES_DEFECTIVE";
    case RaiseDisputeAdjustment_ReasonCode.PAID_BY_ALTERNATE_MEANS:
      return "PAID_BY_ALTERNATE_MEANS";
    case RaiseDisputeAdjustment_ReasonCode.GOODS_SERVICES_NOT_RECEIVED:
      return "GOODS_SERVICES_NOT_RECEIVED";
    case RaiseDisputeAdjustment_ReasonCode.MERCHANT_NOT_RECEIVED_CONFIRMATION:
      return "MERCHANT_NOT_RECEIVED_CONFIRMATION";
    case RaiseDisputeAdjustment_ReasonCode.TRANSACTION_NOT_STEELED:
      return "TRANSACTION_NOT_STEELED";
    case RaiseDisputeAdjustment_ReasonCode.DUPLICATE_TRANSACTION:
      return "DUPLICATE_TRANSACTION";
    case RaiseDisputeAdjustment_ReasonCode.CHARGEBACK_CARD_HOLDER_CHARGED_MORE:
      return "CHARGEBACK_CARD_HOLDER_CHARGED_MORE";
    case RaiseDisputeAdjustment_ReasonCode.CUSTOMER_CLAIMING_GOODS_SERVICES_NOT_DELIVERED:
      return "CUSTOMER_CLAIMING_GOODS_SERVICES_NOT_DELIVERED";
    case RaiseDisputeAdjustment_ReasonCode.PARTIES_DENIED:
      return "PARTIES_DENIED";
    case RaiseDisputeAdjustment_ReasonCode.FUNDS_TRANSFERRED_TO_UNINTENDED_BENEFICIARY:
      return "FUNDS_TRANSFERRED_TO_UNINTENDED_BENEFICIARY";
    case RaiseDisputeAdjustment_ReasonCode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The adjusment flag and reason code for resolving the dispute. */
export interface ResolveDisputeAdjustment {
  /**
   * Required. The adjustment flag in URCS for the complaint transaction. This
   * maps to `reqAdjFlag` in dispute request and `respAdjFlag` in dispute
   * response.
   */
  adjustmentFlag: ResolveDisputeAdjustment_AdjustmentFlag;
  /**
   * Required. The adjustment code in URCS for the complaint transaction. This
   * maps to `reqAdjCode` in dispute request.
   */
  adjustmentCode: ResolveDisputeAdjustment_ReasonCode;
}

/** The adjusment flag for resolving the dispute. */
export enum ResolveDisputeAdjustment_AdjustmentFlag {
  /** ADJUSTMENT_FLAG_UNSPECIFIED - Unspecified adjustment flag. */
  ADJUSTMENT_FLAG_UNSPECIFIED = 0,
  /**
   * RE_PRESENTMENT_RAISE - Re-presentment Raise. This flag maps to the `R` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   */
  RE_PRESENTMENT_RAISE = 1,
  /**
   * DEFERRED_RE_PRESENTMENT_RAISE - Deferred Re-presentment Raise. This flag maps to the `FR` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   */
  DEFERRED_RE_PRESENTMENT_RAISE = 2,
  /**
   * CHARGEBACK_ACCEPTANCE - Chargeback Acceptance. This flag maps to the `A` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   */
  CHARGEBACK_ACCEPTANCE = 3,
  /**
   * DEFERRED_CHARGEBACK_ACCEPTANCE - Deferred Chargeback Acceptance. This flag maps to the `FA` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   */
  DEFERRED_CHARGEBACK_ACCEPTANCE = 4,
  /**
   * PRE_ARBITRATION_ACCEPTANCE - Pre-Arbitration Acceptance. This flag maps to the `AP` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   */
  PRE_ARBITRATION_ACCEPTANCE = 5,
  /**
   * DEFERRED_PRE_ARBITRATION_ACCEPTANCE - Deferred Pre-Arbitration Acceptance. This flag maps to the `FAP`
   * adjustment flag as defined in NPCI's `UDIR` specification.
   */
  DEFERRED_PRE_ARBITRATION_ACCEPTANCE = 6,
  /**
   * PRE_ARBITRATION_DECLINED - Pre-Arbitration Declined. This flag maps to the `PR` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   */
  PRE_ARBITRATION_DECLINED = 7,
  /**
   * DEFERRED_PRE_ARBITRATION_DECLINED - Deferred Pre-Arbitration Declined. This flag maps to the `FPR` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   */
  DEFERRED_PRE_ARBITRATION_DECLINED = 8,
  /**
   * ARBITRATION_ACCEPTANCE - Arbitration Acceptance. This flag maps to the `ACA` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   */
  ARBITRATION_ACCEPTANCE = 9,
  /**
   * ARBITRATION_CONTINUATION - Arbitration Continuation. This flag maps to the `ACC` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   */
  ARBITRATION_CONTINUATION = 10,
  /**
   * ARBITRATION_WITHDRAWN - Arbitration Withdrawn. This flag maps to the `ACW` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   */
  ARBITRATION_WITHDRAWN = 11,
  /**
   * ARBITRATION_VERDICT - Arbitration Verdict. This flag maps to the `ACV` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   */
  ARBITRATION_VERDICT = 12,
  /**
   * CREDIT_ADJUSTMENT - Credit Adjustment. This flag maps to the `C` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   */
  CREDIT_ADJUSTMENT = 13,
  /**
   * FRAUD_CHARGEBACK_REPRESENTMENT - Fraud Chargeback Representment. This flag maps to the `FCR` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   */
  FRAUD_CHARGEBACK_REPRESENTMENT = 14,
  /**
   * FRAUD_CHARGEBACK_ACCEPT - Fraud Chargeback Accept. This flag maps to the `FCA` adjustment flag
   * as defined in NPCI's `UDIR` specification.
   */
  FRAUD_CHARGEBACK_ACCEPT = 15,
  /**
   * WRONG_CREDIT_REPRESENTMENT - Wrong Credit Representment. This flag maps to the `WR` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   */
  WRONG_CREDIT_REPRESENTMENT = 16,
  /**
   * WRONG_CREDIT_CHARGEBACK_ACCEPTANCE - Wrong Credit Chargeback Acceptance. This flag maps to the `WA` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   */
  WRONG_CREDIT_CHARGEBACK_ACCEPTANCE = 17,
  /**
   * MANUAL_ADJUSTMENT - Manual Adjustment. This flag maps to the `MA` adjustment flag as defined
   * in NPCI's `UDIR` specification.
   */
  MANUAL_ADJUSTMENT = 18,
  UNRECOGNIZED = -1,
}

export function resolveDisputeAdjustment_AdjustmentFlagFromJSON(object: any): ResolveDisputeAdjustment_AdjustmentFlag {
  switch (object) {
    case 0:
    case "ADJUSTMENT_FLAG_UNSPECIFIED":
      return ResolveDisputeAdjustment_AdjustmentFlag.ADJUSTMENT_FLAG_UNSPECIFIED;
    case 1:
    case "RE_PRESENTMENT_RAISE":
      return ResolveDisputeAdjustment_AdjustmentFlag.RE_PRESENTMENT_RAISE;
    case 2:
    case "DEFERRED_RE_PRESENTMENT_RAISE":
      return ResolveDisputeAdjustment_AdjustmentFlag.DEFERRED_RE_PRESENTMENT_RAISE;
    case 3:
    case "CHARGEBACK_ACCEPTANCE":
      return ResolveDisputeAdjustment_AdjustmentFlag.CHARGEBACK_ACCEPTANCE;
    case 4:
    case "DEFERRED_CHARGEBACK_ACCEPTANCE":
      return ResolveDisputeAdjustment_AdjustmentFlag.DEFERRED_CHARGEBACK_ACCEPTANCE;
    case 5:
    case "PRE_ARBITRATION_ACCEPTANCE":
      return ResolveDisputeAdjustment_AdjustmentFlag.PRE_ARBITRATION_ACCEPTANCE;
    case 6:
    case "DEFERRED_PRE_ARBITRATION_ACCEPTANCE":
      return ResolveDisputeAdjustment_AdjustmentFlag.DEFERRED_PRE_ARBITRATION_ACCEPTANCE;
    case 7:
    case "PRE_ARBITRATION_DECLINED":
      return ResolveDisputeAdjustment_AdjustmentFlag.PRE_ARBITRATION_DECLINED;
    case 8:
    case "DEFERRED_PRE_ARBITRATION_DECLINED":
      return ResolveDisputeAdjustment_AdjustmentFlag.DEFERRED_PRE_ARBITRATION_DECLINED;
    case 9:
    case "ARBITRATION_ACCEPTANCE":
      return ResolveDisputeAdjustment_AdjustmentFlag.ARBITRATION_ACCEPTANCE;
    case 10:
    case "ARBITRATION_CONTINUATION":
      return ResolveDisputeAdjustment_AdjustmentFlag.ARBITRATION_CONTINUATION;
    case 11:
    case "ARBITRATION_WITHDRAWN":
      return ResolveDisputeAdjustment_AdjustmentFlag.ARBITRATION_WITHDRAWN;
    case 12:
    case "ARBITRATION_VERDICT":
      return ResolveDisputeAdjustment_AdjustmentFlag.ARBITRATION_VERDICT;
    case 13:
    case "CREDIT_ADJUSTMENT":
      return ResolveDisputeAdjustment_AdjustmentFlag.CREDIT_ADJUSTMENT;
    case 14:
    case "FRAUD_CHARGEBACK_REPRESENTMENT":
      return ResolveDisputeAdjustment_AdjustmentFlag.FRAUD_CHARGEBACK_REPRESENTMENT;
    case 15:
    case "FRAUD_CHARGEBACK_ACCEPT":
      return ResolveDisputeAdjustment_AdjustmentFlag.FRAUD_CHARGEBACK_ACCEPT;
    case 16:
    case "WRONG_CREDIT_REPRESENTMENT":
      return ResolveDisputeAdjustment_AdjustmentFlag.WRONG_CREDIT_REPRESENTMENT;
    case 17:
    case "WRONG_CREDIT_CHARGEBACK_ACCEPTANCE":
      return ResolveDisputeAdjustment_AdjustmentFlag.WRONG_CREDIT_CHARGEBACK_ACCEPTANCE;
    case 18:
    case "MANUAL_ADJUSTMENT":
      return ResolveDisputeAdjustment_AdjustmentFlag.MANUAL_ADJUSTMENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResolveDisputeAdjustment_AdjustmentFlag.UNRECOGNIZED;
  }
}

export function resolveDisputeAdjustment_AdjustmentFlagToJSON(object: ResolveDisputeAdjustment_AdjustmentFlag): string {
  switch (object) {
    case ResolveDisputeAdjustment_AdjustmentFlag.ADJUSTMENT_FLAG_UNSPECIFIED:
      return "ADJUSTMENT_FLAG_UNSPECIFIED";
    case ResolveDisputeAdjustment_AdjustmentFlag.RE_PRESENTMENT_RAISE:
      return "RE_PRESENTMENT_RAISE";
    case ResolveDisputeAdjustment_AdjustmentFlag.DEFERRED_RE_PRESENTMENT_RAISE:
      return "DEFERRED_RE_PRESENTMENT_RAISE";
    case ResolveDisputeAdjustment_AdjustmentFlag.CHARGEBACK_ACCEPTANCE:
      return "CHARGEBACK_ACCEPTANCE";
    case ResolveDisputeAdjustment_AdjustmentFlag.DEFERRED_CHARGEBACK_ACCEPTANCE:
      return "DEFERRED_CHARGEBACK_ACCEPTANCE";
    case ResolveDisputeAdjustment_AdjustmentFlag.PRE_ARBITRATION_ACCEPTANCE:
      return "PRE_ARBITRATION_ACCEPTANCE";
    case ResolveDisputeAdjustment_AdjustmentFlag.DEFERRED_PRE_ARBITRATION_ACCEPTANCE:
      return "DEFERRED_PRE_ARBITRATION_ACCEPTANCE";
    case ResolveDisputeAdjustment_AdjustmentFlag.PRE_ARBITRATION_DECLINED:
      return "PRE_ARBITRATION_DECLINED";
    case ResolveDisputeAdjustment_AdjustmentFlag.DEFERRED_PRE_ARBITRATION_DECLINED:
      return "DEFERRED_PRE_ARBITRATION_DECLINED";
    case ResolveDisputeAdjustment_AdjustmentFlag.ARBITRATION_ACCEPTANCE:
      return "ARBITRATION_ACCEPTANCE";
    case ResolveDisputeAdjustment_AdjustmentFlag.ARBITRATION_CONTINUATION:
      return "ARBITRATION_CONTINUATION";
    case ResolveDisputeAdjustment_AdjustmentFlag.ARBITRATION_WITHDRAWN:
      return "ARBITRATION_WITHDRAWN";
    case ResolveDisputeAdjustment_AdjustmentFlag.ARBITRATION_VERDICT:
      return "ARBITRATION_VERDICT";
    case ResolveDisputeAdjustment_AdjustmentFlag.CREDIT_ADJUSTMENT:
      return "CREDIT_ADJUSTMENT";
    case ResolveDisputeAdjustment_AdjustmentFlag.FRAUD_CHARGEBACK_REPRESENTMENT:
      return "FRAUD_CHARGEBACK_REPRESENTMENT";
    case ResolveDisputeAdjustment_AdjustmentFlag.FRAUD_CHARGEBACK_ACCEPT:
      return "FRAUD_CHARGEBACK_ACCEPT";
    case ResolveDisputeAdjustment_AdjustmentFlag.WRONG_CREDIT_REPRESENTMENT:
      return "WRONG_CREDIT_REPRESENTMENT";
    case ResolveDisputeAdjustment_AdjustmentFlag.WRONG_CREDIT_CHARGEBACK_ACCEPTANCE:
      return "WRONG_CREDIT_CHARGEBACK_ACCEPTANCE";
    case ResolveDisputeAdjustment_AdjustmentFlag.MANUAL_ADJUSTMENT:
      return "MANUAL_ADJUSTMENT";
    case ResolveDisputeAdjustment_AdjustmentFlag.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The dispute resolution reason code. */
export enum ResolveDisputeAdjustment_ReasonCode {
  /** REASON_CODE_UNSPECIFIED - Unspecified reason code. */
  REASON_CODE_UNSPECIFIED = 0,
  /**
   * CHARGEBACK_BENEFICIARY_CANNOT_CREDIT_OR_PRE_ARBITRATION_DUPLICATE_PROCESS - Beneficiary bank unable to credit their customer account for Chargeback
   * Acceptance dispute or duplicate processing for Pre Arbitration Acceptance
   * dispute. This reason code maps to the `111` reason code as defined in
   * NPCI's `UDIR` specification.
   */
  CHARGEBACK_BENEFICIARY_CANNOT_CREDIT_OR_PRE_ARBITRATION_DUPLICATE_PROCESS = 1,
  /**
   * PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_ONLINE - Beneficiary account has been credited online. This reason code maps to
   * the `112` reason code for Pre-arbitration declined dispute as defined in
   * NPCI's `UDIR` specification.
   */
  PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_ONLINE = 3,
  /**
   * PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_MANUALLY - Beneficiary account has been credited manually post reconciliation. This
   * reason code maps to the `113` reason code for Pre-arbitration declined
   * dispute as defined in NPCI's `UDIR` specification.
   */
  PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_MANUALLY = 4,
  /**
   * DEFERRED_CHARGEBACK_ACCEPTANCE_ACCOUNT_NOT_CREDITED_TCC_RAISED - Customer account is not credited, TCC raised inadvertently. This reason
   * code maps to the `122` reason code as defined in NPCI's `UDIR`
   * specification.
   */
  DEFERRED_CHARGEBACK_ACCEPTANCE_ACCOUNT_NOT_CREDITED_TCC_RAISED = 5,
  /**
   * DEFERRED_RE_PRESENTMENT_RAISE_ACCOUNT_CREDITED_TCC_RAISED - Customer account is credited successfully and TCC raised accordingly.
   * This reason code maps to the `123` reason code as defined in NPCI's
   * `UDIR` specification.
   */
  DEFERRED_RE_PRESENTMENT_RAISE_ACCOUNT_CREDITED_TCC_RAISED = 6,
  /**
   * DEFERRED_PRE_ARBITRATION_ACCEPTANCE_ACCOUNT_NOT_CREDITED - Customer account is not credited, TCC and Re-Presentment raised
   * inadvertently. This reason code maps to the `125` reason code as defined
   * in NPCI's `UDIR` specification.
   */
  DEFERRED_PRE_ARBITRATION_ACCEPTANCE_ACCOUNT_NOT_CREDITED = 7,
  /**
   * DEFERRED_PRE_ARBITRATION_DECLINED_ACCOUNT_CREDITED - Customer account is credited successfully and TCC and Re-Presentment
   * raised accordingly. This reason code maps to the `126` reason code as
   * defined in NPCI's `UDIR` specification.
   */
  DEFERRED_PRE_ARBITRATION_DECLINED_ACCOUNT_CREDITED = 8,
  /**
   * FRAUD_CHARGEBACK_ACCEPT_AMOUNT_RECOVERED_FROM_FRAUDULENT_ACCOUNT - Amount has been recovered successfully from the fraudulent customer
   * account. This reason code maps to the `129` reason code as defined
   * in NPCI's `UDIR` specification.
   */
  FRAUD_CHARGEBACK_ACCEPT_AMOUNT_RECOVERED_FROM_FRAUDULENT_ACCOUNT = 9,
  /**
   * FRAUD_CHARGEBACK_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE - Lien marked however, customer account is not having sufficient balance to
   * debit. This reason code maps to the `130` reason code for
   * Fraud chargeback representment dispute as defined in NPCI's `UDIR`
   * specification.
   */
  FRAUD_CHARGEBACK_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE = 10,
  /**
   * FRAUD_CHARGEBACK_REPRESENTMENT_FIR_NOT_PROVIDED - FIR Copy not provided for the disputed transaction. This reason code maps
   * to the `131` reason code as defined in NPCI's `UDIR` specification.
   */
  FRAUD_CHARGEBACK_REPRESENTMENT_FIR_NOT_PROVIDED = 11,
  /**
   * FRAUD_CHARGEBACK_REPRESENTMENT_REASON_OTHERS - Other reason for Fraud chargeback representment dispute. This reason code
   * maps to the `132` reason code as defined in NPCI's `UDIR` specification.
   */
  FRAUD_CHARGEBACK_REPRESENTMENT_REASON_OTHERS = 12,
  /**
   * RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_ONLINE - Beneficiary account credited online. This reason code maps to the `208`
   * reason code for Re-presentment raise dispute as defined in NPCI's `UDIR`
   * specification.
   */
  RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_ONLINE = 13,
  /**
   * RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_MANUALLY - Beneficiary account credited manually post reconciliation. This reason
   * code maps to the `209` reason code for Re-presentment raise dispute as
   * defined in NPCI's `UDIR` specification.
   */
  RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_MANUALLY = 14,
  /**
   * CREDIT_ADJUSTMENT_GOODS_SERVICES_CREDIT_NOT_PROCESSED - Credit not processed for cancelled or returned goods and services. This
   * reason code maps to the `1061` reason code as defined in NPCI's `UDIR`
   * specification.
   */
  CREDIT_ADJUSTMENT_GOODS_SERVICES_CREDIT_NOT_PROCESSED = 15,
  /**
   * CREDIT_ADJUSTMENT_GOODS_SERVICES_DEFECTIVE - Goods and Services not as described / defective. This reason code maps to
   * the `1062` reason code as defined in NPCI's `UDIR` specification.
   */
  CREDIT_ADJUSTMENT_GOODS_SERVICES_DEFECTIVE = 16,
  /**
   * CREDIT_ADJUSTMENT_PAID_BY_ALTERNATE_MEANS - Paid by alternate means. This reason code maps to the `1063` reason code
   * as defined in NPCI's `UDIR` specification.
   */
  CREDIT_ADJUSTMENT_PAID_BY_ALTERNATE_MEANS = 17,
  /**
   * CREDIT_ADJUSTMENT_GOODS_SERVICES_NOT_RECEIVED - Goods or Services Not Provided / Not Received. This reason code maps to
   * the `1064` reason code as defined in NPCI's `UDIR` specification.
   */
  CREDIT_ADJUSTMENT_GOODS_SERVICES_NOT_RECEIVED = 18,
  /**
   * CREDIT_ADJUSTMENT_MERCHANT_NOT_RECEIVED_CONFIRMATION - Account debited but transaction confirmation not received at merchant
   * location. This reason code maps to the `1065` reason code for Credit
   * adjustment as defined in NPCI's `UDIR` specification.
   */
  CREDIT_ADJUSTMENT_MERCHANT_NOT_RECEIVED_CONFIRMATION = 19,
  /**
   * CREDIT_ADJUSTMENT_DUPLICATE_TRANSACTION - Duplicate /Multiple Transaction. This reason code maps to the `1084`
   * reason code as defined in NPCI's `UDIR` specification.
   */
  CREDIT_ADJUSTMENT_DUPLICATE_TRANSACTION = 20,
  /**
   * CREDIT_ADJUSTMENT_REASON_OTHERS - Other reason for Credit adjustment. This reason code maps to the `1090`
   * reason code as defined in NPCI's `UDIR` specification.
   */
  CREDIT_ADJUSTMENT_REASON_OTHERS = 21,
  /**
   * CREDIT_ADJUSTMENT_NON_MATCHING_ACCOUNT_NUMBER - Non Matching account number. This reason code maps to the `1091`
   * reason code as defined in NPCI's `UDIR` specification.
   */
  CREDIT_ADJUSTMENT_NON_MATCHING_ACCOUNT_NUMBER = 22,
  /**
   * CREDIT_ADJUSTMENT_CARD_HOLDER_CHARGED_MORE - Card holder was charged more than the transaction amount.
   * This reason code maps to the `1092` reason code as defined in NPCI's
   * `UDIR` specification.
   */
  CREDIT_ADJUSTMENT_CARD_HOLDER_CHARGED_MORE = 23,
  /**
   * CREDIT_ADJUSTMENT_CREDIT_NOT_PROCESSED - Credit not Processed. This reason code maps to the `1093` reason code as
   * defined in NPCI's `UDIR` specification.
   */
  CREDIT_ADJUSTMENT_CREDIT_NOT_PROCESSED = 24,
  /**
   * CREDIT_ADJUSTMENT_BENEFICIARY_CANNOT_CREDIT - Beneficiary bank unable to credit their customer account. This reason
   * code maps to the `1094` reason code for Credit Adjustment dispute as
   * defined in NPCI's `UDIR` specification.
   */
  CREDIT_ADJUSTMENT_BENEFICIARY_CANNOT_CREDIT = 25,
  /**
   * CHARGEBACK_ACCEPTANCE_MERCHANT_CANNOT_PROVIDE_SERVICE - Merchant was unable to provide the service. This reason code maps to the
   * `1095` reason code as defined in NPCI's `UDIR` specification.
   */
  CHARGEBACK_ACCEPTANCE_MERCHANT_CANNOT_PROVIDE_SERVICE = 26,
  /**
   * RE_PRESENTMENT_RAISE_GOODS_SERVICES_PROVIDED - Services/Goods provided see the supporting document. This reason code
   * maps to the `1096` reason code as defined in NPCI's `UDIR` specification.
   */
  RE_PRESENTMENT_RAISE_GOODS_SERVICES_PROVIDED = 27,
  /**
   * PRE_ARBITRATION_DECLINED_SERVICES_PROVIDED_LATER - Services provided later see supporting documents. This reason code maps
   * to the `1098` reason code as defined in NPCI's `UDIR` specification.
   */
  PRE_ARBITRATION_DECLINED_SERVICES_PROVIDED_LATER = 28,
  /**
   * PRE_ARBITRATION_ACCEPTANCE_SERVICES_NOT_PROVIDED_BY_MERCHANT - Services not provided by the merchant. This reason code maps to the
   * `1099` reason code as defined in NPCI's `UDIR` specification.
   */
  PRE_ARBITRATION_ACCEPTANCE_SERVICES_NOT_PROVIDED_BY_MERCHANT = 29,
  /**
   * ARBITRATION_ACCEPTANCE_ILLEGIBLE_FULFILMENT - Illegible Fulfilment. This reason code maps to the `1101` reason code for
   * arbitration acceptance dispute as defined in NPCI's `UDIR` specification.
   */
  ARBITRATION_ACCEPTANCE_ILLEGIBLE_FULFILMENT = 30,
  /**
   * ARBITRATION_CONTINUATION_CUSTOMER_STILL_NOT_RECEIVED_SERVICE - Customer has still not received the service. This reason code maps to the
   * `1102` reason code as defined in NPCI's `UDIR` specification.
   */
  ARBITRATION_CONTINUATION_CUSTOMER_STILL_NOT_RECEIVED_SERVICE = 31,
  /**
   * ARBITRATION_WITHDRAWN_CUSTOMER_RECEIVED_SERVICE_LATER - Customer has received the service later. This reason code maps to the
   * `1103` reason code as defined in NPCI's `UDIR` specification.
   */
  ARBITRATION_WITHDRAWN_CUSTOMER_RECEIVED_SERVICE_LATER = 32,
  /**
   * ARBITRATION_VERDICT_PANEL_VERDICT - Panel will give the verdict. This reason code maps to the `1104` reason
   * code as defined in NPCI's `UDIR` specification.
   */
  ARBITRATION_VERDICT_PANEL_VERDICT = 33,
  /**
   * MANUAL_ADJUSTMENT_REASON - Manual adjustment. This reason code maps to the `2001` reason code as
   * defined in NPCI's `UDIR` specification.
   */
  MANUAL_ADJUSTMENT_REASON = 34,
  /**
   * ATTRIBUTING_CUSTOMER - Attributing to the Customer. This reason code maps to the `AC` reason
   * code as defined in NPCI's `UDIR` specification.
   */
  ATTRIBUTING_CUSTOMER = 35,
  /**
   * ATTRIBUTING_TECHNICAL_ISSUE - Attributing to the Technical issue at bank/aggregator/merchant. This
   * reason code maps to the `AT` reason code as defined in NPCI's `UDIR`
   * specification.
   */
  ATTRIBUTING_TECHNICAL_ISSUE = 36,
  /**
   * WRONG_CREDIT_CHARGEBACK_ACCEPTANCE_AMOUNT_RECOVERED - Amount has been recovered successfully from the unintended customer
   * account. This reason code maps to the `WC2` reason code as defined in
   * NPCI's `UDIR` specification.
   */
  WRONG_CREDIT_CHARGEBACK_ACCEPTANCE_AMOUNT_RECOVERED = 37,
  /**
   * WRONG_CREDIT_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE - Lien marked however customer account is not having sufficient balance to
   * debit the customer account. This reason code maps to the `WC3` reason
   * code for Wrong credit representment dispute as defined in NPCI's `UDIR`
   * specification.
   */
  WRONG_CREDIT_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE = 38,
  /**
   * WRONG_CREDIT_REPRESENTMENT_CUSTOMER_INACCESSIBLE - Customer is not accessible for obtaining debit confirmation. This reason
   * code maps to the `WC4` reason code as defined in NPCI's `UDIR`
   * specification.
   */
  WRONG_CREDIT_REPRESENTMENT_CUSTOMER_INACCESSIBLE = 39,
  /**
   * WRONG_CREDIT_REPRESENTMENT_REASON_OTHERS - Other reason for Wrong credit representment. This reason code maps to the
   * `WC5` reason code as defined in NPCI's `UDIR` specification.
   */
  WRONG_CREDIT_REPRESENTMENT_REASON_OTHERS = 40,
  UNRECOGNIZED = -1,
}

export function resolveDisputeAdjustment_ReasonCodeFromJSON(object: any): ResolveDisputeAdjustment_ReasonCode {
  switch (object) {
    case 0:
    case "REASON_CODE_UNSPECIFIED":
      return ResolveDisputeAdjustment_ReasonCode.REASON_CODE_UNSPECIFIED;
    case 1:
    case "CHARGEBACK_BENEFICIARY_CANNOT_CREDIT_OR_PRE_ARBITRATION_DUPLICATE_PROCESS":
      return ResolveDisputeAdjustment_ReasonCode
        .CHARGEBACK_BENEFICIARY_CANNOT_CREDIT_OR_PRE_ARBITRATION_DUPLICATE_PROCESS;
    case 3:
    case "PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_ONLINE":
      return ResolveDisputeAdjustment_ReasonCode.PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_ONLINE;
    case 4:
    case "PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_MANUALLY":
      return ResolveDisputeAdjustment_ReasonCode.PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_MANUALLY;
    case 5:
    case "DEFERRED_CHARGEBACK_ACCEPTANCE_ACCOUNT_NOT_CREDITED_TCC_RAISED":
      return ResolveDisputeAdjustment_ReasonCode.DEFERRED_CHARGEBACK_ACCEPTANCE_ACCOUNT_NOT_CREDITED_TCC_RAISED;
    case 6:
    case "DEFERRED_RE_PRESENTMENT_RAISE_ACCOUNT_CREDITED_TCC_RAISED":
      return ResolveDisputeAdjustment_ReasonCode.DEFERRED_RE_PRESENTMENT_RAISE_ACCOUNT_CREDITED_TCC_RAISED;
    case 7:
    case "DEFERRED_PRE_ARBITRATION_ACCEPTANCE_ACCOUNT_NOT_CREDITED":
      return ResolveDisputeAdjustment_ReasonCode.DEFERRED_PRE_ARBITRATION_ACCEPTANCE_ACCOUNT_NOT_CREDITED;
    case 8:
    case "DEFERRED_PRE_ARBITRATION_DECLINED_ACCOUNT_CREDITED":
      return ResolveDisputeAdjustment_ReasonCode.DEFERRED_PRE_ARBITRATION_DECLINED_ACCOUNT_CREDITED;
    case 9:
    case "FRAUD_CHARGEBACK_ACCEPT_AMOUNT_RECOVERED_FROM_FRAUDULENT_ACCOUNT":
      return ResolveDisputeAdjustment_ReasonCode.FRAUD_CHARGEBACK_ACCEPT_AMOUNT_RECOVERED_FROM_FRAUDULENT_ACCOUNT;
    case 10:
    case "FRAUD_CHARGEBACK_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE":
      return ResolveDisputeAdjustment_ReasonCode.FRAUD_CHARGEBACK_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE;
    case 11:
    case "FRAUD_CHARGEBACK_REPRESENTMENT_FIR_NOT_PROVIDED":
      return ResolveDisputeAdjustment_ReasonCode.FRAUD_CHARGEBACK_REPRESENTMENT_FIR_NOT_PROVIDED;
    case 12:
    case "FRAUD_CHARGEBACK_REPRESENTMENT_REASON_OTHERS":
      return ResolveDisputeAdjustment_ReasonCode.FRAUD_CHARGEBACK_REPRESENTMENT_REASON_OTHERS;
    case 13:
    case "RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_ONLINE":
      return ResolveDisputeAdjustment_ReasonCode.RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_ONLINE;
    case 14:
    case "RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_MANUALLY":
      return ResolveDisputeAdjustment_ReasonCode.RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_MANUALLY;
    case 15:
    case "CREDIT_ADJUSTMENT_GOODS_SERVICES_CREDIT_NOT_PROCESSED":
      return ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_GOODS_SERVICES_CREDIT_NOT_PROCESSED;
    case 16:
    case "CREDIT_ADJUSTMENT_GOODS_SERVICES_DEFECTIVE":
      return ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_GOODS_SERVICES_DEFECTIVE;
    case 17:
    case "CREDIT_ADJUSTMENT_PAID_BY_ALTERNATE_MEANS":
      return ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_PAID_BY_ALTERNATE_MEANS;
    case 18:
    case "CREDIT_ADJUSTMENT_GOODS_SERVICES_NOT_RECEIVED":
      return ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_GOODS_SERVICES_NOT_RECEIVED;
    case 19:
    case "CREDIT_ADJUSTMENT_MERCHANT_NOT_RECEIVED_CONFIRMATION":
      return ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_MERCHANT_NOT_RECEIVED_CONFIRMATION;
    case 20:
    case "CREDIT_ADJUSTMENT_DUPLICATE_TRANSACTION":
      return ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_DUPLICATE_TRANSACTION;
    case 21:
    case "CREDIT_ADJUSTMENT_REASON_OTHERS":
      return ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_REASON_OTHERS;
    case 22:
    case "CREDIT_ADJUSTMENT_NON_MATCHING_ACCOUNT_NUMBER":
      return ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_NON_MATCHING_ACCOUNT_NUMBER;
    case 23:
    case "CREDIT_ADJUSTMENT_CARD_HOLDER_CHARGED_MORE":
      return ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_CARD_HOLDER_CHARGED_MORE;
    case 24:
    case "CREDIT_ADJUSTMENT_CREDIT_NOT_PROCESSED":
      return ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_CREDIT_NOT_PROCESSED;
    case 25:
    case "CREDIT_ADJUSTMENT_BENEFICIARY_CANNOT_CREDIT":
      return ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_BENEFICIARY_CANNOT_CREDIT;
    case 26:
    case "CHARGEBACK_ACCEPTANCE_MERCHANT_CANNOT_PROVIDE_SERVICE":
      return ResolveDisputeAdjustment_ReasonCode.CHARGEBACK_ACCEPTANCE_MERCHANT_CANNOT_PROVIDE_SERVICE;
    case 27:
    case "RE_PRESENTMENT_RAISE_GOODS_SERVICES_PROVIDED":
      return ResolveDisputeAdjustment_ReasonCode.RE_PRESENTMENT_RAISE_GOODS_SERVICES_PROVIDED;
    case 28:
    case "PRE_ARBITRATION_DECLINED_SERVICES_PROVIDED_LATER":
      return ResolveDisputeAdjustment_ReasonCode.PRE_ARBITRATION_DECLINED_SERVICES_PROVIDED_LATER;
    case 29:
    case "PRE_ARBITRATION_ACCEPTANCE_SERVICES_NOT_PROVIDED_BY_MERCHANT":
      return ResolveDisputeAdjustment_ReasonCode.PRE_ARBITRATION_ACCEPTANCE_SERVICES_NOT_PROVIDED_BY_MERCHANT;
    case 30:
    case "ARBITRATION_ACCEPTANCE_ILLEGIBLE_FULFILMENT":
      return ResolveDisputeAdjustment_ReasonCode.ARBITRATION_ACCEPTANCE_ILLEGIBLE_FULFILMENT;
    case 31:
    case "ARBITRATION_CONTINUATION_CUSTOMER_STILL_NOT_RECEIVED_SERVICE":
      return ResolveDisputeAdjustment_ReasonCode.ARBITRATION_CONTINUATION_CUSTOMER_STILL_NOT_RECEIVED_SERVICE;
    case 32:
    case "ARBITRATION_WITHDRAWN_CUSTOMER_RECEIVED_SERVICE_LATER":
      return ResolveDisputeAdjustment_ReasonCode.ARBITRATION_WITHDRAWN_CUSTOMER_RECEIVED_SERVICE_LATER;
    case 33:
    case "ARBITRATION_VERDICT_PANEL_VERDICT":
      return ResolveDisputeAdjustment_ReasonCode.ARBITRATION_VERDICT_PANEL_VERDICT;
    case 34:
    case "MANUAL_ADJUSTMENT_REASON":
      return ResolveDisputeAdjustment_ReasonCode.MANUAL_ADJUSTMENT_REASON;
    case 35:
    case "ATTRIBUTING_CUSTOMER":
      return ResolveDisputeAdjustment_ReasonCode.ATTRIBUTING_CUSTOMER;
    case 36:
    case "ATTRIBUTING_TECHNICAL_ISSUE":
      return ResolveDisputeAdjustment_ReasonCode.ATTRIBUTING_TECHNICAL_ISSUE;
    case 37:
    case "WRONG_CREDIT_CHARGEBACK_ACCEPTANCE_AMOUNT_RECOVERED":
      return ResolveDisputeAdjustment_ReasonCode.WRONG_CREDIT_CHARGEBACK_ACCEPTANCE_AMOUNT_RECOVERED;
    case 38:
    case "WRONG_CREDIT_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE":
      return ResolveDisputeAdjustment_ReasonCode.WRONG_CREDIT_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE;
    case 39:
    case "WRONG_CREDIT_REPRESENTMENT_CUSTOMER_INACCESSIBLE":
      return ResolveDisputeAdjustment_ReasonCode.WRONG_CREDIT_REPRESENTMENT_CUSTOMER_INACCESSIBLE;
    case 40:
    case "WRONG_CREDIT_REPRESENTMENT_REASON_OTHERS":
      return ResolveDisputeAdjustment_ReasonCode.WRONG_CREDIT_REPRESENTMENT_REASON_OTHERS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResolveDisputeAdjustment_ReasonCode.UNRECOGNIZED;
  }
}

export function resolveDisputeAdjustment_ReasonCodeToJSON(object: ResolveDisputeAdjustment_ReasonCode): string {
  switch (object) {
    case ResolveDisputeAdjustment_ReasonCode.REASON_CODE_UNSPECIFIED:
      return "REASON_CODE_UNSPECIFIED";
    case ResolveDisputeAdjustment_ReasonCode.CHARGEBACK_BENEFICIARY_CANNOT_CREDIT_OR_PRE_ARBITRATION_DUPLICATE_PROCESS:
      return "CHARGEBACK_BENEFICIARY_CANNOT_CREDIT_OR_PRE_ARBITRATION_DUPLICATE_PROCESS";
    case ResolveDisputeAdjustment_ReasonCode.PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_ONLINE:
      return "PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_ONLINE";
    case ResolveDisputeAdjustment_ReasonCode.PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_MANUALLY:
      return "PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_MANUALLY";
    case ResolveDisputeAdjustment_ReasonCode.DEFERRED_CHARGEBACK_ACCEPTANCE_ACCOUNT_NOT_CREDITED_TCC_RAISED:
      return "DEFERRED_CHARGEBACK_ACCEPTANCE_ACCOUNT_NOT_CREDITED_TCC_RAISED";
    case ResolveDisputeAdjustment_ReasonCode.DEFERRED_RE_PRESENTMENT_RAISE_ACCOUNT_CREDITED_TCC_RAISED:
      return "DEFERRED_RE_PRESENTMENT_RAISE_ACCOUNT_CREDITED_TCC_RAISED";
    case ResolveDisputeAdjustment_ReasonCode.DEFERRED_PRE_ARBITRATION_ACCEPTANCE_ACCOUNT_NOT_CREDITED:
      return "DEFERRED_PRE_ARBITRATION_ACCEPTANCE_ACCOUNT_NOT_CREDITED";
    case ResolveDisputeAdjustment_ReasonCode.DEFERRED_PRE_ARBITRATION_DECLINED_ACCOUNT_CREDITED:
      return "DEFERRED_PRE_ARBITRATION_DECLINED_ACCOUNT_CREDITED";
    case ResolveDisputeAdjustment_ReasonCode.FRAUD_CHARGEBACK_ACCEPT_AMOUNT_RECOVERED_FROM_FRAUDULENT_ACCOUNT:
      return "FRAUD_CHARGEBACK_ACCEPT_AMOUNT_RECOVERED_FROM_FRAUDULENT_ACCOUNT";
    case ResolveDisputeAdjustment_ReasonCode.FRAUD_CHARGEBACK_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE:
      return "FRAUD_CHARGEBACK_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE";
    case ResolveDisputeAdjustment_ReasonCode.FRAUD_CHARGEBACK_REPRESENTMENT_FIR_NOT_PROVIDED:
      return "FRAUD_CHARGEBACK_REPRESENTMENT_FIR_NOT_PROVIDED";
    case ResolveDisputeAdjustment_ReasonCode.FRAUD_CHARGEBACK_REPRESENTMENT_REASON_OTHERS:
      return "FRAUD_CHARGEBACK_REPRESENTMENT_REASON_OTHERS";
    case ResolveDisputeAdjustment_ReasonCode.RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_ONLINE:
      return "RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_ONLINE";
    case ResolveDisputeAdjustment_ReasonCode.RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_MANUALLY:
      return "RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_MANUALLY";
    case ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_GOODS_SERVICES_CREDIT_NOT_PROCESSED:
      return "CREDIT_ADJUSTMENT_GOODS_SERVICES_CREDIT_NOT_PROCESSED";
    case ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_GOODS_SERVICES_DEFECTIVE:
      return "CREDIT_ADJUSTMENT_GOODS_SERVICES_DEFECTIVE";
    case ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_PAID_BY_ALTERNATE_MEANS:
      return "CREDIT_ADJUSTMENT_PAID_BY_ALTERNATE_MEANS";
    case ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_GOODS_SERVICES_NOT_RECEIVED:
      return "CREDIT_ADJUSTMENT_GOODS_SERVICES_NOT_RECEIVED";
    case ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_MERCHANT_NOT_RECEIVED_CONFIRMATION:
      return "CREDIT_ADJUSTMENT_MERCHANT_NOT_RECEIVED_CONFIRMATION";
    case ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_DUPLICATE_TRANSACTION:
      return "CREDIT_ADJUSTMENT_DUPLICATE_TRANSACTION";
    case ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_REASON_OTHERS:
      return "CREDIT_ADJUSTMENT_REASON_OTHERS";
    case ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_NON_MATCHING_ACCOUNT_NUMBER:
      return "CREDIT_ADJUSTMENT_NON_MATCHING_ACCOUNT_NUMBER";
    case ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_CARD_HOLDER_CHARGED_MORE:
      return "CREDIT_ADJUSTMENT_CARD_HOLDER_CHARGED_MORE";
    case ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_CREDIT_NOT_PROCESSED:
      return "CREDIT_ADJUSTMENT_CREDIT_NOT_PROCESSED";
    case ResolveDisputeAdjustment_ReasonCode.CREDIT_ADJUSTMENT_BENEFICIARY_CANNOT_CREDIT:
      return "CREDIT_ADJUSTMENT_BENEFICIARY_CANNOT_CREDIT";
    case ResolveDisputeAdjustment_ReasonCode.CHARGEBACK_ACCEPTANCE_MERCHANT_CANNOT_PROVIDE_SERVICE:
      return "CHARGEBACK_ACCEPTANCE_MERCHANT_CANNOT_PROVIDE_SERVICE";
    case ResolveDisputeAdjustment_ReasonCode.RE_PRESENTMENT_RAISE_GOODS_SERVICES_PROVIDED:
      return "RE_PRESENTMENT_RAISE_GOODS_SERVICES_PROVIDED";
    case ResolveDisputeAdjustment_ReasonCode.PRE_ARBITRATION_DECLINED_SERVICES_PROVIDED_LATER:
      return "PRE_ARBITRATION_DECLINED_SERVICES_PROVIDED_LATER";
    case ResolveDisputeAdjustment_ReasonCode.PRE_ARBITRATION_ACCEPTANCE_SERVICES_NOT_PROVIDED_BY_MERCHANT:
      return "PRE_ARBITRATION_ACCEPTANCE_SERVICES_NOT_PROVIDED_BY_MERCHANT";
    case ResolveDisputeAdjustment_ReasonCode.ARBITRATION_ACCEPTANCE_ILLEGIBLE_FULFILMENT:
      return "ARBITRATION_ACCEPTANCE_ILLEGIBLE_FULFILMENT";
    case ResolveDisputeAdjustment_ReasonCode.ARBITRATION_CONTINUATION_CUSTOMER_STILL_NOT_RECEIVED_SERVICE:
      return "ARBITRATION_CONTINUATION_CUSTOMER_STILL_NOT_RECEIVED_SERVICE";
    case ResolveDisputeAdjustment_ReasonCode.ARBITRATION_WITHDRAWN_CUSTOMER_RECEIVED_SERVICE_LATER:
      return "ARBITRATION_WITHDRAWN_CUSTOMER_RECEIVED_SERVICE_LATER";
    case ResolveDisputeAdjustment_ReasonCode.ARBITRATION_VERDICT_PANEL_VERDICT:
      return "ARBITRATION_VERDICT_PANEL_VERDICT";
    case ResolveDisputeAdjustment_ReasonCode.MANUAL_ADJUSTMENT_REASON:
      return "MANUAL_ADJUSTMENT_REASON";
    case ResolveDisputeAdjustment_ReasonCode.ATTRIBUTING_CUSTOMER:
      return "ATTRIBUTING_CUSTOMER";
    case ResolveDisputeAdjustment_ReasonCode.ATTRIBUTING_TECHNICAL_ISSUE:
      return "ATTRIBUTING_TECHNICAL_ISSUE";
    case ResolveDisputeAdjustment_ReasonCode.WRONG_CREDIT_CHARGEBACK_ACCEPTANCE_AMOUNT_RECOVERED:
      return "WRONG_CREDIT_CHARGEBACK_ACCEPTANCE_AMOUNT_RECOVERED";
    case ResolveDisputeAdjustment_ReasonCode.WRONG_CREDIT_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE:
      return "WRONG_CREDIT_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE";
    case ResolveDisputeAdjustment_ReasonCode.WRONG_CREDIT_REPRESENTMENT_CUSTOMER_INACCESSIBLE:
      return "WRONG_CREDIT_REPRESENTMENT_CUSTOMER_INACCESSIBLE";
    case ResolveDisputeAdjustment_ReasonCode.WRONG_CREDIT_REPRESENTMENT_REASON_OTHERS:
      return "WRONG_CREDIT_REPRESENTMENT_REASON_OTHERS";
    case ResolveDisputeAdjustment_ReasonCode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Metadata for CreateComplaint. */
export interface CreateComplaintMetadata {
}

/** Metadata for ResolveComplaint. */
export interface ResolveComplaintMetadata {
}

/** Metadata for CreateDispute. */
export interface CreateDisputeMetadata {
}

/** Metadata for ResolveDispute. */
export interface ResolveDisputeMetadata {
}

function createBaseComplaint(): Complaint {
  return {
    name: "",
    raiseComplaintAdjustment: undefined,
    details: undefined,
    response: undefined,
    resolveComplaintAdjustment: undefined,
  };
}

export const Complaint: MessageFns<Complaint> = {
  encode(message: Complaint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.raiseComplaintAdjustment !== undefined) {
      RaiseComplaintAdjustment.encode(message.raiseComplaintAdjustment, writer.uint32(18).fork()).join();
    }
    if (message.details !== undefined) {
      CaseDetails.encode(message.details, writer.uint32(34).fork()).join();
    }
    if (message.response !== undefined) {
      CaseResponse.encode(message.response, writer.uint32(42).fork()).join();
    }
    if (message.resolveComplaintAdjustment !== undefined) {
      ResolveComplaintAdjustment.encode(message.resolveComplaintAdjustment, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Complaint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComplaint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.raiseComplaintAdjustment = RaiseComplaintAdjustment.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.details = CaseDetails.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.response = CaseResponse.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.resolveComplaintAdjustment = ResolveComplaintAdjustment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Complaint {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      raiseComplaintAdjustment: isSet(object.raiseComplaintAdjustment)
        ? RaiseComplaintAdjustment.fromJSON(object.raiseComplaintAdjustment)
        : undefined,
      details: isSet(object.details) ? CaseDetails.fromJSON(object.details) : undefined,
      response: isSet(object.response) ? CaseResponse.fromJSON(object.response) : undefined,
      resolveComplaintAdjustment: isSet(object.resolveComplaintAdjustment)
        ? ResolveComplaintAdjustment.fromJSON(object.resolveComplaintAdjustment)
        : undefined,
    };
  },

  toJSON(message: Complaint): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.raiseComplaintAdjustment !== undefined) {
      obj.raiseComplaintAdjustment = RaiseComplaintAdjustment.toJSON(message.raiseComplaintAdjustment);
    }
    if (message.details !== undefined) {
      obj.details = CaseDetails.toJSON(message.details);
    }
    if (message.response !== undefined) {
      obj.response = CaseResponse.toJSON(message.response);
    }
    if (message.resolveComplaintAdjustment !== undefined) {
      obj.resolveComplaintAdjustment = ResolveComplaintAdjustment.toJSON(message.resolveComplaintAdjustment);
    }
    return obj;
  },

  create(base?: DeepPartial<Complaint>): Complaint {
    return Complaint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Complaint>): Complaint {
    const message = createBaseComplaint();
    message.name = object.name ?? "";
    message.raiseComplaintAdjustment =
      (object.raiseComplaintAdjustment !== undefined && object.raiseComplaintAdjustment !== null)
        ? RaiseComplaintAdjustment.fromPartial(object.raiseComplaintAdjustment)
        : undefined;
    message.details = (object.details !== undefined && object.details !== null)
      ? CaseDetails.fromPartial(object.details)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? CaseResponse.fromPartial(object.response)
      : undefined;
    message.resolveComplaintAdjustment =
      (object.resolveComplaintAdjustment !== undefined && object.resolveComplaintAdjustment !== null)
        ? ResolveComplaintAdjustment.fromPartial(object.resolveComplaintAdjustment)
        : undefined;
    return message;
  },
};

function createBaseCreateComplaintRequest(): CreateComplaintRequest {
  return { parent: "", complaint: undefined };
}

export const CreateComplaintRequest: MessageFns<CreateComplaintRequest> = {
  encode(message: CreateComplaintRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.complaint !== undefined) {
      Complaint.encode(message.complaint, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateComplaintRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateComplaintRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.complaint = Complaint.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateComplaintRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      complaint: isSet(object.complaint) ? Complaint.fromJSON(object.complaint) : undefined,
    };
  },

  toJSON(message: CreateComplaintRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.complaint !== undefined) {
      obj.complaint = Complaint.toJSON(message.complaint);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateComplaintRequest>): CreateComplaintRequest {
    return CreateComplaintRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateComplaintRequest>): CreateComplaintRequest {
    const message = createBaseCreateComplaintRequest();
    message.parent = object.parent ?? "";
    message.complaint = (object.complaint !== undefined && object.complaint !== null)
      ? Complaint.fromPartial(object.complaint)
      : undefined;
    return message;
  },
};

function createBaseResolveComplaintRequest(): ResolveComplaintRequest {
  return { complaint: undefined };
}

export const ResolveComplaintRequest: MessageFns<ResolveComplaintRequest> = {
  encode(message: ResolveComplaintRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.complaint !== undefined) {
      Complaint.encode(message.complaint, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveComplaintRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveComplaintRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.complaint = Complaint.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolveComplaintRequest {
    return { complaint: isSet(object.complaint) ? Complaint.fromJSON(object.complaint) : undefined };
  },

  toJSON(message: ResolveComplaintRequest): unknown {
    const obj: any = {};
    if (message.complaint !== undefined) {
      obj.complaint = Complaint.toJSON(message.complaint);
    }
    return obj;
  },

  create(base?: DeepPartial<ResolveComplaintRequest>): ResolveComplaintRequest {
    return ResolveComplaintRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResolveComplaintRequest>): ResolveComplaintRequest {
    const message = createBaseResolveComplaintRequest();
    message.complaint = (object.complaint !== undefined && object.complaint !== null)
      ? Complaint.fromPartial(object.complaint)
      : undefined;
    return message;
  },
};

function createBaseDispute(): Dispute {
  return {
    name: "",
    raiseDisputeAdjustment: undefined,
    details: undefined,
    response: undefined,
    resolveDisputeAdjustment: undefined,
  };
}

export const Dispute: MessageFns<Dispute> = {
  encode(message: Dispute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.raiseDisputeAdjustment !== undefined) {
      RaiseDisputeAdjustment.encode(message.raiseDisputeAdjustment, writer.uint32(18).fork()).join();
    }
    if (message.details !== undefined) {
      CaseDetails.encode(message.details, writer.uint32(34).fork()).join();
    }
    if (message.response !== undefined) {
      CaseResponse.encode(message.response, writer.uint32(42).fork()).join();
    }
    if (message.resolveDisputeAdjustment !== undefined) {
      ResolveDisputeAdjustment.encode(message.resolveDisputeAdjustment, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Dispute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDispute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.raiseDisputeAdjustment = RaiseDisputeAdjustment.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.details = CaseDetails.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.response = CaseResponse.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.resolveDisputeAdjustment = ResolveDisputeAdjustment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Dispute {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      raiseDisputeAdjustment: isSet(object.raiseDisputeAdjustment)
        ? RaiseDisputeAdjustment.fromJSON(object.raiseDisputeAdjustment)
        : undefined,
      details: isSet(object.details) ? CaseDetails.fromJSON(object.details) : undefined,
      response: isSet(object.response) ? CaseResponse.fromJSON(object.response) : undefined,
      resolveDisputeAdjustment: isSet(object.resolveDisputeAdjustment)
        ? ResolveDisputeAdjustment.fromJSON(object.resolveDisputeAdjustment)
        : undefined,
    };
  },

  toJSON(message: Dispute): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.raiseDisputeAdjustment !== undefined) {
      obj.raiseDisputeAdjustment = RaiseDisputeAdjustment.toJSON(message.raiseDisputeAdjustment);
    }
    if (message.details !== undefined) {
      obj.details = CaseDetails.toJSON(message.details);
    }
    if (message.response !== undefined) {
      obj.response = CaseResponse.toJSON(message.response);
    }
    if (message.resolveDisputeAdjustment !== undefined) {
      obj.resolveDisputeAdjustment = ResolveDisputeAdjustment.toJSON(message.resolveDisputeAdjustment);
    }
    return obj;
  },

  create(base?: DeepPartial<Dispute>): Dispute {
    return Dispute.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Dispute>): Dispute {
    const message = createBaseDispute();
    message.name = object.name ?? "";
    message.raiseDisputeAdjustment =
      (object.raiseDisputeAdjustment !== undefined && object.raiseDisputeAdjustment !== null)
        ? RaiseDisputeAdjustment.fromPartial(object.raiseDisputeAdjustment)
        : undefined;
    message.details = (object.details !== undefined && object.details !== null)
      ? CaseDetails.fromPartial(object.details)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? CaseResponse.fromPartial(object.response)
      : undefined;
    message.resolveDisputeAdjustment =
      (object.resolveDisputeAdjustment !== undefined && object.resolveDisputeAdjustment !== null)
        ? ResolveDisputeAdjustment.fromPartial(object.resolveDisputeAdjustment)
        : undefined;
    return message;
  },
};

function createBaseCreateDisputeRequest(): CreateDisputeRequest {
  return { parent: "", dispute: undefined };
}

export const CreateDisputeRequest: MessageFns<CreateDisputeRequest> = {
  encode(message: CreateDisputeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.dispute !== undefined) {
      Dispute.encode(message.dispute, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDisputeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDisputeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dispute = Dispute.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDisputeRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dispute: isSet(object.dispute) ? Dispute.fromJSON(object.dispute) : undefined,
    };
  },

  toJSON(message: CreateDisputeRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dispute !== undefined) {
      obj.dispute = Dispute.toJSON(message.dispute);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDisputeRequest>): CreateDisputeRequest {
    return CreateDisputeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDisputeRequest>): CreateDisputeRequest {
    const message = createBaseCreateDisputeRequest();
    message.parent = object.parent ?? "";
    message.dispute = (object.dispute !== undefined && object.dispute !== null)
      ? Dispute.fromPartial(object.dispute)
      : undefined;
    return message;
  },
};

function createBaseResolveDisputeRequest(): ResolveDisputeRequest {
  return { dispute: undefined };
}

export const ResolveDisputeRequest: MessageFns<ResolveDisputeRequest> = {
  encode(message: ResolveDisputeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dispute !== undefined) {
      Dispute.encode(message.dispute, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveDisputeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveDisputeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dispute = Dispute.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolveDisputeRequest {
    return { dispute: isSet(object.dispute) ? Dispute.fromJSON(object.dispute) : undefined };
  },

  toJSON(message: ResolveDisputeRequest): unknown {
    const obj: any = {};
    if (message.dispute !== undefined) {
      obj.dispute = Dispute.toJSON(message.dispute);
    }
    return obj;
  },

  create(base?: DeepPartial<ResolveDisputeRequest>): ResolveDisputeRequest {
    return ResolveDisputeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResolveDisputeRequest>): ResolveDisputeRequest {
    const message = createBaseResolveDisputeRequest();
    message.dispute = (object.dispute !== undefined && object.dispute !== null)
      ? Dispute.fromPartial(object.dispute)
      : undefined;
    return message;
  },
};

function createBaseOriginalTransaction(): OriginalTransaction {
  return { transactionId: "", retrievalReferenceNumber: "", requestTime: undefined };
}

export const OriginalTransaction: MessageFns<OriginalTransaction> = {
  encode(message: OriginalTransaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transactionId !== "") {
      writer.uint32(10).string(message.transactionId);
    }
    if (message.retrievalReferenceNumber !== "") {
      writer.uint32(18).string(message.retrievalReferenceNumber);
    }
    if (message.requestTime !== undefined) {
      Timestamp.encode(toTimestamp(message.requestTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OriginalTransaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOriginalTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transactionId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.retrievalReferenceNumber = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OriginalTransaction {
    return {
      transactionId: isSet(object.transactionId) ? globalThis.String(object.transactionId) : "",
      retrievalReferenceNumber: isSet(object.retrievalReferenceNumber)
        ? globalThis.String(object.retrievalReferenceNumber)
        : "",
      requestTime: isSet(object.requestTime) ? fromJsonTimestamp(object.requestTime) : undefined,
    };
  },

  toJSON(message: OriginalTransaction): unknown {
    const obj: any = {};
    if (message.transactionId !== "") {
      obj.transactionId = message.transactionId;
    }
    if (message.retrievalReferenceNumber !== "") {
      obj.retrievalReferenceNumber = message.retrievalReferenceNumber;
    }
    if (message.requestTime !== undefined) {
      obj.requestTime = message.requestTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<OriginalTransaction>): OriginalTransaction {
    return OriginalTransaction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OriginalTransaction>): OriginalTransaction {
    const message = createBaseOriginalTransaction();
    message.transactionId = object.transactionId ?? "";
    message.retrievalReferenceNumber = object.retrievalReferenceNumber ?? "";
    message.requestTime = object.requestTime ?? undefined;
    return message;
  },
};

function createBaseCaseDetails(): CaseDetails {
  return {
    originalTransaction: undefined,
    transactionSubType: 0,
    amount: undefined,
    originalSettlementResponseCode: "",
    currentCycle: false,
  };
}

export const CaseDetails: MessageFns<CaseDetails> = {
  encode(message: CaseDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.originalTransaction !== undefined) {
      OriginalTransaction.encode(message.originalTransaction, writer.uint32(10).fork()).join();
    }
    if (message.transactionSubType !== 0) {
      writer.uint32(16).int32(message.transactionSubType);
    }
    if (message.amount !== undefined) {
      Money.encode(message.amount, writer.uint32(26).fork()).join();
    }
    if (message.originalSettlementResponseCode !== "") {
      writer.uint32(34).string(message.originalSettlementResponseCode);
    }
    if (message.currentCycle !== false) {
      writer.uint32(40).bool(message.currentCycle);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CaseDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCaseDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.originalTransaction = OriginalTransaction.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.transactionSubType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.amount = Money.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.originalSettlementResponseCode = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.currentCycle = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CaseDetails {
    return {
      originalTransaction: isSet(object.originalTransaction)
        ? OriginalTransaction.fromJSON(object.originalTransaction)
        : undefined,
      transactionSubType: isSet(object.transactionSubType) ? transactionSubTypeFromJSON(object.transactionSubType) : 0,
      amount: isSet(object.amount) ? Money.fromJSON(object.amount) : undefined,
      originalSettlementResponseCode: isSet(object.originalSettlementResponseCode)
        ? globalThis.String(object.originalSettlementResponseCode)
        : "",
      currentCycle: isSet(object.currentCycle) ? globalThis.Boolean(object.currentCycle) : false,
    };
  },

  toJSON(message: CaseDetails): unknown {
    const obj: any = {};
    if (message.originalTransaction !== undefined) {
      obj.originalTransaction = OriginalTransaction.toJSON(message.originalTransaction);
    }
    if (message.transactionSubType !== 0) {
      obj.transactionSubType = transactionSubTypeToJSON(message.transactionSubType);
    }
    if (message.amount !== undefined) {
      obj.amount = Money.toJSON(message.amount);
    }
    if (message.originalSettlementResponseCode !== "") {
      obj.originalSettlementResponseCode = message.originalSettlementResponseCode;
    }
    if (message.currentCycle !== false) {
      obj.currentCycle = message.currentCycle;
    }
    return obj;
  },

  create(base?: DeepPartial<CaseDetails>): CaseDetails {
    return CaseDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CaseDetails>): CaseDetails {
    const message = createBaseCaseDetails();
    message.originalTransaction = (object.originalTransaction !== undefined && object.originalTransaction !== null)
      ? OriginalTransaction.fromPartial(object.originalTransaction)
      : undefined;
    message.transactionSubType = object.transactionSubType ?? 0;
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Money.fromPartial(object.amount)
      : undefined;
    message.originalSettlementResponseCode = object.originalSettlementResponseCode ?? "";
    message.currentCycle = object.currentCycle ?? false;
    return message;
  },
};

function createBaseCaseResponse(): CaseResponse {
  return {
    complaintReferenceNumber: "",
    amount: undefined,
    adjustmentFlag: "",
    adjustmentCode: "",
    adjustmentReferenceId: "",
    adjustmentRemarks: "",
    approvalNumber: "",
    processStatus: "",
    adjustmentTime: undefined,
    payer: undefined,
    payee: undefined,
    result: 0,
  };
}

export const CaseResponse: MessageFns<CaseResponse> = {
  encode(message: CaseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.complaintReferenceNumber !== "") {
      writer.uint32(10).string(message.complaintReferenceNumber);
    }
    if (message.amount !== undefined) {
      Money.encode(message.amount, writer.uint32(18).fork()).join();
    }
    if (message.adjustmentFlag !== "") {
      writer.uint32(26).string(message.adjustmentFlag);
    }
    if (message.adjustmentCode !== "") {
      writer.uint32(34).string(message.adjustmentCode);
    }
    if (message.adjustmentReferenceId !== "") {
      writer.uint32(42).string(message.adjustmentReferenceId);
    }
    if (message.adjustmentRemarks !== "") {
      writer.uint32(50).string(message.adjustmentRemarks);
    }
    if (message.approvalNumber !== "") {
      writer.uint32(58).string(message.approvalNumber);
    }
    if (message.processStatus !== "") {
      writer.uint32(66).string(message.processStatus);
    }
    if (message.adjustmentTime !== undefined) {
      Timestamp.encode(toTimestamp(message.adjustmentTime), writer.uint32(74).fork()).join();
    }
    if (message.payer !== undefined) {
      Participant.encode(message.payer, writer.uint32(82).fork()).join();
    }
    if (message.payee !== undefined) {
      Participant.encode(message.payee, writer.uint32(90).fork()).join();
    }
    if (message.result !== 0) {
      writer.uint32(96).int32(message.result);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CaseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.complaintReferenceNumber = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.amount = Money.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.adjustmentFlag = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.adjustmentCode = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.adjustmentReferenceId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.adjustmentRemarks = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.approvalNumber = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.processStatus = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.adjustmentTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.payer = Participant.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.payee = Participant.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.result = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CaseResponse {
    return {
      complaintReferenceNumber: isSet(object.complaintReferenceNumber)
        ? globalThis.String(object.complaintReferenceNumber)
        : "",
      amount: isSet(object.amount) ? Money.fromJSON(object.amount) : undefined,
      adjustmentFlag: isSet(object.adjustmentFlag) ? globalThis.String(object.adjustmentFlag) : "",
      adjustmentCode: isSet(object.adjustmentCode) ? globalThis.String(object.adjustmentCode) : "",
      adjustmentReferenceId: isSet(object.adjustmentReferenceId) ? globalThis.String(object.adjustmentReferenceId) : "",
      adjustmentRemarks: isSet(object.adjustmentRemarks) ? globalThis.String(object.adjustmentRemarks) : "",
      approvalNumber: isSet(object.approvalNumber) ? globalThis.String(object.approvalNumber) : "",
      processStatus: isSet(object.processStatus) ? globalThis.String(object.processStatus) : "",
      adjustmentTime: isSet(object.adjustmentTime) ? fromJsonTimestamp(object.adjustmentTime) : undefined,
      payer: isSet(object.payer) ? Participant.fromJSON(object.payer) : undefined,
      payee: isSet(object.payee) ? Participant.fromJSON(object.payee) : undefined,
      result: isSet(object.result) ? caseResponse_ResultFromJSON(object.result) : 0,
    };
  },

  toJSON(message: CaseResponse): unknown {
    const obj: any = {};
    if (message.complaintReferenceNumber !== "") {
      obj.complaintReferenceNumber = message.complaintReferenceNumber;
    }
    if (message.amount !== undefined) {
      obj.amount = Money.toJSON(message.amount);
    }
    if (message.adjustmentFlag !== "") {
      obj.adjustmentFlag = message.adjustmentFlag;
    }
    if (message.adjustmentCode !== "") {
      obj.adjustmentCode = message.adjustmentCode;
    }
    if (message.adjustmentReferenceId !== "") {
      obj.adjustmentReferenceId = message.adjustmentReferenceId;
    }
    if (message.adjustmentRemarks !== "") {
      obj.adjustmentRemarks = message.adjustmentRemarks;
    }
    if (message.approvalNumber !== "") {
      obj.approvalNumber = message.approvalNumber;
    }
    if (message.processStatus !== "") {
      obj.processStatus = message.processStatus;
    }
    if (message.adjustmentTime !== undefined) {
      obj.adjustmentTime = message.adjustmentTime.toISOString();
    }
    if (message.payer !== undefined) {
      obj.payer = Participant.toJSON(message.payer);
    }
    if (message.payee !== undefined) {
      obj.payee = Participant.toJSON(message.payee);
    }
    if (message.result !== 0) {
      obj.result = caseResponse_ResultToJSON(message.result);
    }
    return obj;
  },

  create(base?: DeepPartial<CaseResponse>): CaseResponse {
    return CaseResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CaseResponse>): CaseResponse {
    const message = createBaseCaseResponse();
    message.complaintReferenceNumber = object.complaintReferenceNumber ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Money.fromPartial(object.amount)
      : undefined;
    message.adjustmentFlag = object.adjustmentFlag ?? "";
    message.adjustmentCode = object.adjustmentCode ?? "";
    message.adjustmentReferenceId = object.adjustmentReferenceId ?? "";
    message.adjustmentRemarks = object.adjustmentRemarks ?? "";
    message.approvalNumber = object.approvalNumber ?? "";
    message.processStatus = object.processStatus ?? "";
    message.adjustmentTime = object.adjustmentTime ?? undefined;
    message.payer = (object.payer !== undefined && object.payer !== null)
      ? Participant.fromPartial(object.payer)
      : undefined;
    message.payee = (object.payee !== undefined && object.payee !== null)
      ? Participant.fromPartial(object.payee)
      : undefined;
    message.result = object.result ?? 0;
    return message;
  },
};

function createBaseRaiseComplaintAdjustment(): RaiseComplaintAdjustment {
  return { adjustmentFlag: 0, adjustmentCode: 0 };
}

export const RaiseComplaintAdjustment: MessageFns<RaiseComplaintAdjustment> = {
  encode(message: RaiseComplaintAdjustment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.adjustmentFlag !== 0) {
      writer.uint32(8).int32(message.adjustmentFlag);
    }
    if (message.adjustmentCode !== 0) {
      writer.uint32(16).int32(message.adjustmentCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RaiseComplaintAdjustment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRaiseComplaintAdjustment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.adjustmentFlag = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.adjustmentCode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RaiseComplaintAdjustment {
    return {
      adjustmentFlag: isSet(object.adjustmentFlag)
        ? raiseComplaintAdjustment_AdjustmentFlagFromJSON(object.adjustmentFlag)
        : 0,
      adjustmentCode: isSet(object.adjustmentCode)
        ? raiseComplaintAdjustment_ReasonCodeFromJSON(object.adjustmentCode)
        : 0,
    };
  },

  toJSON(message: RaiseComplaintAdjustment): unknown {
    const obj: any = {};
    if (message.adjustmentFlag !== 0) {
      obj.adjustmentFlag = raiseComplaintAdjustment_AdjustmentFlagToJSON(message.adjustmentFlag);
    }
    if (message.adjustmentCode !== 0) {
      obj.adjustmentCode = raiseComplaintAdjustment_ReasonCodeToJSON(message.adjustmentCode);
    }
    return obj;
  },

  create(base?: DeepPartial<RaiseComplaintAdjustment>): RaiseComplaintAdjustment {
    return RaiseComplaintAdjustment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RaiseComplaintAdjustment>): RaiseComplaintAdjustment {
    const message = createBaseRaiseComplaintAdjustment();
    message.adjustmentFlag = object.adjustmentFlag ?? 0;
    message.adjustmentCode = object.adjustmentCode ?? 0;
    return message;
  },
};

function createBaseResolveComplaintAdjustment(): ResolveComplaintAdjustment {
  return { adjustmentFlag: 0, adjustmentCode: 0 };
}

export const ResolveComplaintAdjustment: MessageFns<ResolveComplaintAdjustment> = {
  encode(message: ResolveComplaintAdjustment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.adjustmentFlag !== 0) {
      writer.uint32(8).int32(message.adjustmentFlag);
    }
    if (message.adjustmentCode !== 0) {
      writer.uint32(16).int32(message.adjustmentCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveComplaintAdjustment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveComplaintAdjustment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.adjustmentFlag = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.adjustmentCode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolveComplaintAdjustment {
    return {
      adjustmentFlag: isSet(object.adjustmentFlag)
        ? resolveComplaintAdjustment_AdjustmentFlagFromJSON(object.adjustmentFlag)
        : 0,
      adjustmentCode: isSet(object.adjustmentCode)
        ? resolveComplaintAdjustment_ReasonCodeFromJSON(object.adjustmentCode)
        : 0,
    };
  },

  toJSON(message: ResolveComplaintAdjustment): unknown {
    const obj: any = {};
    if (message.adjustmentFlag !== 0) {
      obj.adjustmentFlag = resolveComplaintAdjustment_AdjustmentFlagToJSON(message.adjustmentFlag);
    }
    if (message.adjustmentCode !== 0) {
      obj.adjustmentCode = resolveComplaintAdjustment_ReasonCodeToJSON(message.adjustmentCode);
    }
    return obj;
  },

  create(base?: DeepPartial<ResolveComplaintAdjustment>): ResolveComplaintAdjustment {
    return ResolveComplaintAdjustment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResolveComplaintAdjustment>): ResolveComplaintAdjustment {
    const message = createBaseResolveComplaintAdjustment();
    message.adjustmentFlag = object.adjustmentFlag ?? 0;
    message.adjustmentCode = object.adjustmentCode ?? 0;
    return message;
  },
};

function createBaseRaiseDisputeAdjustment(): RaiseDisputeAdjustment {
  return { adjustmentFlag: 0, adjustmentCode: 0 };
}

export const RaiseDisputeAdjustment: MessageFns<RaiseDisputeAdjustment> = {
  encode(message: RaiseDisputeAdjustment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.adjustmentFlag !== 0) {
      writer.uint32(8).int32(message.adjustmentFlag);
    }
    if (message.adjustmentCode !== 0) {
      writer.uint32(16).int32(message.adjustmentCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RaiseDisputeAdjustment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRaiseDisputeAdjustment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.adjustmentFlag = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.adjustmentCode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RaiseDisputeAdjustment {
    return {
      adjustmentFlag: isSet(object.adjustmentFlag)
        ? raiseDisputeAdjustment_AdjustmentFlagFromJSON(object.adjustmentFlag)
        : 0,
      adjustmentCode: isSet(object.adjustmentCode)
        ? raiseDisputeAdjustment_ReasonCodeFromJSON(object.adjustmentCode)
        : 0,
    };
  },

  toJSON(message: RaiseDisputeAdjustment): unknown {
    const obj: any = {};
    if (message.adjustmentFlag !== 0) {
      obj.adjustmentFlag = raiseDisputeAdjustment_AdjustmentFlagToJSON(message.adjustmentFlag);
    }
    if (message.adjustmentCode !== 0) {
      obj.adjustmentCode = raiseDisputeAdjustment_ReasonCodeToJSON(message.adjustmentCode);
    }
    return obj;
  },

  create(base?: DeepPartial<RaiseDisputeAdjustment>): RaiseDisputeAdjustment {
    return RaiseDisputeAdjustment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RaiseDisputeAdjustment>): RaiseDisputeAdjustment {
    const message = createBaseRaiseDisputeAdjustment();
    message.adjustmentFlag = object.adjustmentFlag ?? 0;
    message.adjustmentCode = object.adjustmentCode ?? 0;
    return message;
  },
};

function createBaseResolveDisputeAdjustment(): ResolveDisputeAdjustment {
  return { adjustmentFlag: 0, adjustmentCode: 0 };
}

export const ResolveDisputeAdjustment: MessageFns<ResolveDisputeAdjustment> = {
  encode(message: ResolveDisputeAdjustment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.adjustmentFlag !== 0) {
      writer.uint32(8).int32(message.adjustmentFlag);
    }
    if (message.adjustmentCode !== 0) {
      writer.uint32(16).int32(message.adjustmentCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveDisputeAdjustment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveDisputeAdjustment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.adjustmentFlag = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.adjustmentCode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolveDisputeAdjustment {
    return {
      adjustmentFlag: isSet(object.adjustmentFlag)
        ? resolveDisputeAdjustment_AdjustmentFlagFromJSON(object.adjustmentFlag)
        : 0,
      adjustmentCode: isSet(object.adjustmentCode)
        ? resolveDisputeAdjustment_ReasonCodeFromJSON(object.adjustmentCode)
        : 0,
    };
  },

  toJSON(message: ResolveDisputeAdjustment): unknown {
    const obj: any = {};
    if (message.adjustmentFlag !== 0) {
      obj.adjustmentFlag = resolveDisputeAdjustment_AdjustmentFlagToJSON(message.adjustmentFlag);
    }
    if (message.adjustmentCode !== 0) {
      obj.adjustmentCode = resolveDisputeAdjustment_ReasonCodeToJSON(message.adjustmentCode);
    }
    return obj;
  },

  create(base?: DeepPartial<ResolveDisputeAdjustment>): ResolveDisputeAdjustment {
    return ResolveDisputeAdjustment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResolveDisputeAdjustment>): ResolveDisputeAdjustment {
    const message = createBaseResolveDisputeAdjustment();
    message.adjustmentFlag = object.adjustmentFlag ?? 0;
    message.adjustmentCode = object.adjustmentCode ?? 0;
    return message;
  },
};

function createBaseCreateComplaintMetadata(): CreateComplaintMetadata {
  return {};
}

export const CreateComplaintMetadata: MessageFns<CreateComplaintMetadata> = {
  encode(_: CreateComplaintMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateComplaintMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateComplaintMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateComplaintMetadata {
    return {};
  },

  toJSON(_: CreateComplaintMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CreateComplaintMetadata>): CreateComplaintMetadata {
    return CreateComplaintMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CreateComplaintMetadata>): CreateComplaintMetadata {
    const message = createBaseCreateComplaintMetadata();
    return message;
  },
};

function createBaseResolveComplaintMetadata(): ResolveComplaintMetadata {
  return {};
}

export const ResolveComplaintMetadata: MessageFns<ResolveComplaintMetadata> = {
  encode(_: ResolveComplaintMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveComplaintMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveComplaintMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ResolveComplaintMetadata {
    return {};
  },

  toJSON(_: ResolveComplaintMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ResolveComplaintMetadata>): ResolveComplaintMetadata {
    return ResolveComplaintMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ResolveComplaintMetadata>): ResolveComplaintMetadata {
    const message = createBaseResolveComplaintMetadata();
    return message;
  },
};

function createBaseCreateDisputeMetadata(): CreateDisputeMetadata {
  return {};
}

export const CreateDisputeMetadata: MessageFns<CreateDisputeMetadata> = {
  encode(_: CreateDisputeMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDisputeMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDisputeMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateDisputeMetadata {
    return {};
  },

  toJSON(_: CreateDisputeMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CreateDisputeMetadata>): CreateDisputeMetadata {
    return CreateDisputeMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CreateDisputeMetadata>): CreateDisputeMetadata {
    const message = createBaseCreateDisputeMetadata();
    return message;
  },
};

function createBaseResolveDisputeMetadata(): ResolveDisputeMetadata {
  return {};
}

export const ResolveDisputeMetadata: MessageFns<ResolveDisputeMetadata> = {
  encode(_: ResolveDisputeMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveDisputeMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveDisputeMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ResolveDisputeMetadata {
    return {};
  },

  toJSON(_: ResolveDisputeMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ResolveDisputeMetadata>): ResolveDisputeMetadata {
    return ResolveDisputeMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ResolveDisputeMetadata>): ResolveDisputeMetadata {
    const message = createBaseResolveDisputeMetadata();
    return message;
  },
};

/** Creates and resolves UPI complaints and disputes. */
export type IssuerSwitchResolutionsDefinition = typeof IssuerSwitchResolutionsDefinition;
export const IssuerSwitchResolutionsDefinition = {
  name: "IssuerSwitchResolutions",
  fullName: "google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchResolutions",
  methods: {
    /**
     * Create a complaint. The returned `Operation` type has
     * the following method-specific fields:
     *
     * - `metadata`:
     * [CreateComplaintMetadata][google.cloud.paymentgateway.issuerswitch.v1.CreateComplaintMetadata]
     * - `response`:
     * [Complaint][google.cloud.paymentgateway.issuerswitch.v1.Complaint]
     */
    createComplaint: {
      name: "CreateComplaint",
      requestType: CreateComplaintRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              36,
              10,
              9,
              67,
              111,
              109,
              112,
              108,
              97,
              105,
              110,
              116,
              18,
              23,
              67,
              114,
              101,
              97,
              116,
              101,
              67,
              111,
              109,
              112,
              108,
              97,
              105,
              110,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([16, 112, 97, 114, 101, 110, 116, 44, 99, 111, 109, 112, 108, 97, 105, 110, 116])],
          578365826: [
            Buffer.from([
              47,
              58,
              9,
              99,
              111,
              109,
              112,
              108,
              97,
              105,
              110,
              116,
              34,
              34,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              109,
              112,
              108,
              97,
              105,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Resolve a complaint. The returned `Operation` type has
     * the following method-specific fields:
     *
     * - `metadata`:
     * [ResolveComplaintMetadata][google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintMetadata]
     * - `response`:
     * [Complaint][google.cloud.paymentgateway.issuerswitch.v1.Complaint]
     */
    resolveComplaint: {
      name: "ResolveComplaint",
      requestType: ResolveComplaintRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              37,
              10,
              9,
              67,
              111,
              109,
              112,
              108,
              97,
              105,
              110,
              116,
              18,
              24,
              82,
              101,
              115,
              111,
              108,
              118,
              101,
              67,
              111,
              109,
              112,
              108,
              97,
              105,
              110,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([9, 99, 111, 109, 112, 108, 97, 105, 110, 116])],
          578365826: [
            Buffer.from([
              65,
              58,
              9,
              99,
              111,
              109,
              112,
              108,
              97,
              105,
              110,
              116,
              34,
              52,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              109,
              112,
              108,
              97,
              105,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              108,
              97,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              111,
              108,
              118,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Create a dispute. The returned `Operation` type has
     * the following method-specific fields:
     *
     * - `metadata`:
     * [CreateDisputeMetadata][google.cloud.paymentgateway.issuerswitch.v1.CreateDisputeMetadata]
     * - `response`:
     * [Dispute][google.cloud.paymentgateway.issuerswitch.v1.Dispute]
     */
    createDispute: {
      name: "CreateDispute",
      requestType: CreateDisputeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              7,
              68,
              105,
              115,
              112,
              117,
              116,
              101,
              18,
              21,
              67,
              114,
              101,
              97,
              116,
              101,
              68,
              105,
              115,
              112,
              117,
              116,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 100, 105, 115, 112, 117, 116, 101])],
          578365826: [
            Buffer.from([
              43,
              58,
              7,
              100,
              105,
              115,
              112,
              117,
              116,
              101,
              34,
              32,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              100,
              105,
              115,
              112,
              117,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Resolve a dispute. The returned `Operation` type has
     * the following method-specific fields:
     *
     * - `metadata`:
     * [ResolveDisputeMetadata][google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeMetadata]
     * - `response`:
     * [Dispute][google.cloud.paymentgateway.issuerswitch.v1.Dispute]
     */
    resolveDispute: {
      name: "ResolveDispute",
      requestType: ResolveDisputeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              33,
              10,
              7,
              68,
              105,
              115,
              112,
              117,
              116,
              101,
              18,
              22,
              82,
              101,
              115,
              111,
              108,
              118,
              101,
              68,
              105,
              115,
              112,
              117,
              116,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([7, 100, 105, 115, 112, 117, 116, 101])],
          578365826: [
            Buffer.from([
              59,
              58,
              7,
              100,
              105,
              115,
              112,
              117,
              116,
              101,
              34,
              48,
              47,
              118,
              49,
              47,
              123,
              100,
              105,
              115,
              112,
              117,
              116,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              105,
              115,
              112,
              117,
              116,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              111,
              108,
              118,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface IssuerSwitchResolutionsServiceImplementation<CallContextExt = {}> {
  /**
   * Create a complaint. The returned `Operation` type has
   * the following method-specific fields:
   *
   * - `metadata`:
   * [CreateComplaintMetadata][google.cloud.paymentgateway.issuerswitch.v1.CreateComplaintMetadata]
   * - `response`:
   * [Complaint][google.cloud.paymentgateway.issuerswitch.v1.Complaint]
   */
  createComplaint(
    request: CreateComplaintRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Resolve a complaint. The returned `Operation` type has
   * the following method-specific fields:
   *
   * - `metadata`:
   * [ResolveComplaintMetadata][google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintMetadata]
   * - `response`:
   * [Complaint][google.cloud.paymentgateway.issuerswitch.v1.Complaint]
   */
  resolveComplaint(
    request: ResolveComplaintRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Create a dispute. The returned `Operation` type has
   * the following method-specific fields:
   *
   * - `metadata`:
   * [CreateDisputeMetadata][google.cloud.paymentgateway.issuerswitch.v1.CreateDisputeMetadata]
   * - `response`:
   * [Dispute][google.cloud.paymentgateway.issuerswitch.v1.Dispute]
   */
  createDispute(request: CreateDisputeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Resolve a dispute. The returned `Operation` type has
   * the following method-specific fields:
   *
   * - `metadata`:
   * [ResolveDisputeMetadata][google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeMetadata]
   * - `response`:
   * [Dispute][google.cloud.paymentgateway.issuerswitch.v1.Dispute]
   */
  resolveDispute(
    request: ResolveDisputeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface IssuerSwitchResolutionsClient<CallOptionsExt = {}> {
  /**
   * Create a complaint. The returned `Operation` type has
   * the following method-specific fields:
   *
   * - `metadata`:
   * [CreateComplaintMetadata][google.cloud.paymentgateway.issuerswitch.v1.CreateComplaintMetadata]
   * - `response`:
   * [Complaint][google.cloud.paymentgateway.issuerswitch.v1.Complaint]
   */
  createComplaint(
    request: DeepPartial<CreateComplaintRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Resolve a complaint. The returned `Operation` type has
   * the following method-specific fields:
   *
   * - `metadata`:
   * [ResolveComplaintMetadata][google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintMetadata]
   * - `response`:
   * [Complaint][google.cloud.paymentgateway.issuerswitch.v1.Complaint]
   */
  resolveComplaint(
    request: DeepPartial<ResolveComplaintRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Create a dispute. The returned `Operation` type has
   * the following method-specific fields:
   *
   * - `metadata`:
   * [CreateDisputeMetadata][google.cloud.paymentgateway.issuerswitch.v1.CreateDisputeMetadata]
   * - `response`:
   * [Dispute][google.cloud.paymentgateway.issuerswitch.v1.Dispute]
   */
  createDispute(request: DeepPartial<CreateDisputeRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Resolve a dispute. The returned `Operation` type has
   * the following method-specific fields:
   *
   * - `metadata`:
   * [ResolveDisputeMetadata][google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeMetadata]
   * - `response`:
   * [Dispute][google.cloud.paymentgateway.issuerswitch.v1.Dispute]
   */
  resolveDispute(
    request: DeepPartial<ResolveDisputeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
