// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/video/stitcher/v1/stitch_details.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../../protobuf/duration.js";
import { Value } from "../../../../protobuf/struct.js";

export const protobufPackage = "google.cloud.video.stitcher.v1";

/**
 * Information related to the interstitial of a VOD session. This resource is
 * only available for VOD sessions that do not implement Google Ad Manager ad
 * insertion.
 */
export interface VodStitchDetail {
  /**
   * The name of the stitch detail in the specified VOD session, in the form of
   * `projects/{project}/locations/{location}/vodSessions/{vod_session_id}/vodStitchDetails/{id}`.
   */
  name: string;
  /** A list of ad processing details for the fetched ad playlist. */
  adStitchDetails: AdStitchDetail[];
}

/** Metadata for a stitched ad. */
export interface AdStitchDetail {
  /** Required. The ad break ID of the processed ad. */
  adBreakId: string;
  /** Required. The ad ID of the processed ad. */
  adId: string;
  /** Required. The time offset of the processed ad. */
  adTimeOffset:
    | Duration
    | undefined;
  /** Optional. Indicates the reason why the ad has been skipped. */
  skipReason: string;
  /** Optional. The metadata of the chosen media file for the ad. */
  media: { [key: string]: any | undefined };
}

export interface AdStitchDetail_MediaEntry {
  key: string;
  value: any | undefined;
}

function createBaseVodStitchDetail(): VodStitchDetail {
  return { name: "", adStitchDetails: [] };
}

export const VodStitchDetail: MessageFns<VodStitchDetail> = {
  encode(message: VodStitchDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.adStitchDetails) {
      AdStitchDetail.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VodStitchDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVodStitchDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.adStitchDetails.push(AdStitchDetail.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VodStitchDetail {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      adStitchDetails: globalThis.Array.isArray(object?.adStitchDetails)
        ? object.adStitchDetails.map((e: any) => AdStitchDetail.fromJSON(e))
        : [],
    };
  },

  toJSON(message: VodStitchDetail): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.adStitchDetails?.length) {
      obj.adStitchDetails = message.adStitchDetails.map((e) => AdStitchDetail.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<VodStitchDetail>): VodStitchDetail {
    return VodStitchDetail.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VodStitchDetail>): VodStitchDetail {
    const message = createBaseVodStitchDetail();
    message.name = object.name ?? "";
    message.adStitchDetails = object.adStitchDetails?.map((e) => AdStitchDetail.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAdStitchDetail(): AdStitchDetail {
  return { adBreakId: "", adId: "", adTimeOffset: undefined, skipReason: "", media: {} };
}

export const AdStitchDetail: MessageFns<AdStitchDetail> = {
  encode(message: AdStitchDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.adBreakId !== "") {
      writer.uint32(10).string(message.adBreakId);
    }
    if (message.adId !== "") {
      writer.uint32(18).string(message.adId);
    }
    if (message.adTimeOffset !== undefined) {
      Duration.encode(message.adTimeOffset, writer.uint32(26).fork()).join();
    }
    if (message.skipReason !== "") {
      writer.uint32(34).string(message.skipReason);
    }
    Object.entries(message.media).forEach(([key, value]) => {
      if (value !== undefined) {
        AdStitchDetail_MediaEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
      }
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdStitchDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdStitchDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.adBreakId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.adId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.adTimeOffset = Duration.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.skipReason = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = AdStitchDetail_MediaEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.media[entry5.key] = entry5.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdStitchDetail {
    return {
      adBreakId: isSet(object.adBreakId) ? globalThis.String(object.adBreakId) : "",
      adId: isSet(object.adId) ? globalThis.String(object.adId) : "",
      adTimeOffset: isSet(object.adTimeOffset) ? Duration.fromJSON(object.adTimeOffset) : undefined,
      skipReason: isSet(object.skipReason) ? globalThis.String(object.skipReason) : "",
      media: isObject(object.media)
        ? Object.entries(object.media).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: AdStitchDetail): unknown {
    const obj: any = {};
    if (message.adBreakId !== "") {
      obj.adBreakId = message.adBreakId;
    }
    if (message.adId !== "") {
      obj.adId = message.adId;
    }
    if (message.adTimeOffset !== undefined) {
      obj.adTimeOffset = Duration.toJSON(message.adTimeOffset);
    }
    if (message.skipReason !== "") {
      obj.skipReason = message.skipReason;
    }
    if (message.media) {
      const entries = Object.entries(message.media);
      if (entries.length > 0) {
        obj.media = {};
        entries.forEach(([k, v]) => {
          obj.media[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<AdStitchDetail>): AdStitchDetail {
    return AdStitchDetail.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdStitchDetail>): AdStitchDetail {
    const message = createBaseAdStitchDetail();
    message.adBreakId = object.adBreakId ?? "";
    message.adId = object.adId ?? "";
    message.adTimeOffset = (object.adTimeOffset !== undefined && object.adTimeOffset !== null)
      ? Duration.fromPartial(object.adTimeOffset)
      : undefined;
    message.skipReason = object.skipReason ?? "";
    message.media = Object.entries(object.media ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseAdStitchDetail_MediaEntry(): AdStitchDetail_MediaEntry {
  return { key: "", value: undefined };
}

export const AdStitchDetail_MediaEntry: MessageFns<AdStitchDetail_MediaEntry> = {
  encode(message: AdStitchDetail_MediaEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdStitchDetail_MediaEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdStitchDetail_MediaEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdStitchDetail_MediaEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: AdStitchDetail_MediaEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<AdStitchDetail_MediaEntry>): AdStitchDetail_MediaEntry {
    return AdStitchDetail_MediaEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdStitchDetail_MediaEntry>): AdStitchDetail_MediaEntry {
    const message = createBaseAdStitchDetail_MediaEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
