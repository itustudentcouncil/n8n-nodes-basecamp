// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/video/stitcher/v1/slates.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.video.stitcher.v1";

/** Slate object */
export interface Slate {
  /**
   * Output only. The name of the slate, in the form of
   * `projects/{project_number}/locations/{location}/slates/{id}`.
   */
  name: string;
  /**
   * The URI to fetch the source content for the slate. This URI must return an
   * MP4 video with at least one audio track.
   */
  uri: string;
  /** gam_slate has all the GAM-related attributes of slates. */
  gamSlate: Slate_GamSlate | undefined;
}

/**
 * GamSlate object has Google Ad Manager (GAM) related properties for the
 * slate.
 */
export interface Slate_GamSlate {
  /** Required. Ad Manager network code to associate with the live config. */
  networkCode: string;
  /** Output only. The identifier generated for the slate by GAM. */
  gamSlateId: Long;
}

function createBaseSlate(): Slate {
  return { name: "", uri: "", gamSlate: undefined };
}

export const Slate: MessageFns<Slate> = {
  encode(message: Slate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uri !== "") {
      writer.uint32(18).string(message.uri);
    }
    if (message.gamSlate !== undefined) {
      Slate_GamSlate.encode(message.gamSlate, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Slate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSlate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gamSlate = Slate_GamSlate.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Slate {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      gamSlate: isSet(object.gamSlate) ? Slate_GamSlate.fromJSON(object.gamSlate) : undefined,
    };
  },

  toJSON(message: Slate): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.gamSlate !== undefined) {
      obj.gamSlate = Slate_GamSlate.toJSON(message.gamSlate);
    }
    return obj;
  },

  create(base?: DeepPartial<Slate>): Slate {
    return Slate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Slate>): Slate {
    const message = createBaseSlate();
    message.name = object.name ?? "";
    message.uri = object.uri ?? "";
    message.gamSlate = (object.gamSlate !== undefined && object.gamSlate !== null)
      ? Slate_GamSlate.fromPartial(object.gamSlate)
      : undefined;
    return message;
  },
};

function createBaseSlate_GamSlate(): Slate_GamSlate {
  return { networkCode: "", gamSlateId: Long.ZERO };
}

export const Slate_GamSlate: MessageFns<Slate_GamSlate> = {
  encode(message: Slate_GamSlate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.networkCode !== "") {
      writer.uint32(10).string(message.networkCode);
    }
    if (!message.gamSlateId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.gamSlateId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Slate_GamSlate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSlate_GamSlate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.networkCode = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.gamSlateId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Slate_GamSlate {
    return {
      networkCode: isSet(object.networkCode) ? globalThis.String(object.networkCode) : "",
      gamSlateId: isSet(object.gamSlateId) ? Long.fromValue(object.gamSlateId) : Long.ZERO,
    };
  },

  toJSON(message: Slate_GamSlate): unknown {
    const obj: any = {};
    if (message.networkCode !== "") {
      obj.networkCode = message.networkCode;
    }
    if (!message.gamSlateId.equals(Long.ZERO)) {
      obj.gamSlateId = (message.gamSlateId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Slate_GamSlate>): Slate_GamSlate {
    return Slate_GamSlate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Slate_GamSlate>): Slate_GamSlate {
    const message = createBaseSlate_GamSlate();
    message.networkCode = object.networkCode ?? "";
    message.gamSlateId = (object.gamSlateId !== undefined && object.gamSlateId !== null)
      ? Long.fromValue(object.gamSlateId)
      : Long.ZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
