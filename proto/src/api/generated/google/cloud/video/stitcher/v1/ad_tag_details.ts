// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/video/stitcher/v1/ad_tag_details.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../../protobuf/duration.js";
import { Struct } from "../../../../protobuf/struct.js";

export const protobufPackage = "google.cloud.video.stitcher.v1";

/**
 * Information related to the details for one ad tag. This resource is only
 * available for live sessions that do not implement Google Ad Manager ad
 * insertion.
 */
export interface LiveAdTagDetail {
  /**
   * The resource name in the form of
   * `projects/{project}/locations/{location}/liveSessions/{live_session}/liveAdTagDetails/{id}`.
   */
  name: string;
  /** A list of ad requests. */
  adRequests: AdRequest[];
}

/**
 * Information related to the details for one ad tag. This resource is only
 * available for VOD sessions that do not implement Google Ad Manager ad
 * insertion.
 */
export interface VodAdTagDetail {
  /**
   * The name of the ad tag detail for the specified VOD session, in the form of
   * `projects/{project}/locations/{location}/vodSessions/{vod_session_id}/vodAdTagDetails/{id}`.
   */
  name: string;
  /** A list of ad requests for one ad tag. */
  adRequests: AdRequest[];
}

/** Details of an ad request to an ad server. */
export interface AdRequest {
  /** The ad tag URI processed with integrated macros. */
  uri: string;
  /** The request metadata used to make the ad request. */
  requestMetadata:
    | RequestMetadata
    | undefined;
  /** The response metadata received from the ad request. */
  responseMetadata: ResponseMetadata | undefined;
}

/** Metadata for an ad request. */
export interface RequestMetadata {
  /** The HTTP headers of the ad request. */
  headers: { [key: string]: any } | undefined;
}

/** Metadata for the response of an ad request. */
export interface ResponseMetadata {
  /** Error message received when making the ad request. */
  error: string;
  /** Headers from the response. */
  headers:
    | { [key: string]: any }
    | undefined;
  /** Status code for the response. */
  statusCode: string;
  /** Size in bytes of the response. */
  sizeBytes: number;
  /** Total time elapsed for the response. */
  duration:
    | Duration
    | undefined;
  /** The body of the response. */
  body: string;
}

function createBaseLiveAdTagDetail(): LiveAdTagDetail {
  return { name: "", adRequests: [] };
}

export const LiveAdTagDetail: MessageFns<LiveAdTagDetail> = {
  encode(message: LiveAdTagDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.adRequests) {
      AdRequest.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiveAdTagDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveAdTagDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.adRequests.push(AdRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiveAdTagDetail {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      adRequests: globalThis.Array.isArray(object?.adRequests)
        ? object.adRequests.map((e: any) => AdRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: LiveAdTagDetail): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.adRequests?.length) {
      obj.adRequests = message.adRequests.map((e) => AdRequest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<LiveAdTagDetail>): LiveAdTagDetail {
    return LiveAdTagDetail.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LiveAdTagDetail>): LiveAdTagDetail {
    const message = createBaseLiveAdTagDetail();
    message.name = object.name ?? "";
    message.adRequests = object.adRequests?.map((e) => AdRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseVodAdTagDetail(): VodAdTagDetail {
  return { name: "", adRequests: [] };
}

export const VodAdTagDetail: MessageFns<VodAdTagDetail> = {
  encode(message: VodAdTagDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.adRequests) {
      AdRequest.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VodAdTagDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVodAdTagDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.adRequests.push(AdRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VodAdTagDetail {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      adRequests: globalThis.Array.isArray(object?.adRequests)
        ? object.adRequests.map((e: any) => AdRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: VodAdTagDetail): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.adRequests?.length) {
      obj.adRequests = message.adRequests.map((e) => AdRequest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<VodAdTagDetail>): VodAdTagDetail {
    return VodAdTagDetail.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VodAdTagDetail>): VodAdTagDetail {
    const message = createBaseVodAdTagDetail();
    message.name = object.name ?? "";
    message.adRequests = object.adRequests?.map((e) => AdRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAdRequest(): AdRequest {
  return { uri: "", requestMetadata: undefined, responseMetadata: undefined };
}

export const AdRequest: MessageFns<AdRequest> = {
  encode(message: AdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.requestMetadata !== undefined) {
      RequestMetadata.encode(message.requestMetadata, writer.uint32(18).fork()).join();
    }
    if (message.responseMetadata !== undefined) {
      ResponseMetadata.encode(message.responseMetadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestMetadata = RequestMetadata.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.responseMetadata = ResponseMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdRequest {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      requestMetadata: isSet(object.requestMetadata) ? RequestMetadata.fromJSON(object.requestMetadata) : undefined,
      responseMetadata: isSet(object.responseMetadata) ? ResponseMetadata.fromJSON(object.responseMetadata) : undefined,
    };
  },

  toJSON(message: AdRequest): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.requestMetadata !== undefined) {
      obj.requestMetadata = RequestMetadata.toJSON(message.requestMetadata);
    }
    if (message.responseMetadata !== undefined) {
      obj.responseMetadata = ResponseMetadata.toJSON(message.responseMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<AdRequest>): AdRequest {
    return AdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdRequest>): AdRequest {
    const message = createBaseAdRequest();
    message.uri = object.uri ?? "";
    message.requestMetadata = (object.requestMetadata !== undefined && object.requestMetadata !== null)
      ? RequestMetadata.fromPartial(object.requestMetadata)
      : undefined;
    message.responseMetadata = (object.responseMetadata !== undefined && object.responseMetadata !== null)
      ? ResponseMetadata.fromPartial(object.responseMetadata)
      : undefined;
    return message;
  },
};

function createBaseRequestMetadata(): RequestMetadata {
  return { headers: undefined };
}

export const RequestMetadata: MessageFns<RequestMetadata> = {
  encode(message: RequestMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.headers !== undefined) {
      Struct.encode(Struct.wrap(message.headers), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.headers = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestMetadata {
    return { headers: isObject(object.headers) ? object.headers : undefined };
  },

  toJSON(message: RequestMetadata): unknown {
    const obj: any = {};
    if (message.headers !== undefined) {
      obj.headers = message.headers;
    }
    return obj;
  },

  create(base?: DeepPartial<RequestMetadata>): RequestMetadata {
    return RequestMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RequestMetadata>): RequestMetadata {
    const message = createBaseRequestMetadata();
    message.headers = object.headers ?? undefined;
    return message;
  },
};

function createBaseResponseMetadata(): ResponseMetadata {
  return { error: "", headers: undefined, statusCode: "", sizeBytes: 0, duration: undefined, body: "" };
}

export const ResponseMetadata: MessageFns<ResponseMetadata> = {
  encode(message: ResponseMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    if (message.headers !== undefined) {
      Struct.encode(Struct.wrap(message.headers), writer.uint32(18).fork()).join();
    }
    if (message.statusCode !== "") {
      writer.uint32(26).string(message.statusCode);
    }
    if (message.sizeBytes !== 0) {
      writer.uint32(32).int32(message.sizeBytes);
    }
    if (message.duration !== undefined) {
      Duration.encode(message.duration, writer.uint32(42).fork()).join();
    }
    if (message.body !== "") {
      writer.uint32(50).string(message.body);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.headers = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.statusCode = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.sizeBytes = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.duration = Duration.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.body = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseMetadata {
    return {
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      headers: isObject(object.headers) ? object.headers : undefined,
      statusCode: isSet(object.statusCode) ? globalThis.String(object.statusCode) : "",
      sizeBytes: isSet(object.sizeBytes) ? globalThis.Number(object.sizeBytes) : 0,
      duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
      body: isSet(object.body) ? globalThis.String(object.body) : "",
    };
  },

  toJSON(message: ResponseMetadata): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.headers !== undefined) {
      obj.headers = message.headers;
    }
    if (message.statusCode !== "") {
      obj.statusCode = message.statusCode;
    }
    if (message.sizeBytes !== 0) {
      obj.sizeBytes = Math.round(message.sizeBytes);
    }
    if (message.duration !== undefined) {
      obj.duration = Duration.toJSON(message.duration);
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseMetadata>): ResponseMetadata {
    return ResponseMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseMetadata>): ResponseMetadata {
    const message = createBaseResponseMetadata();
    message.error = object.error ?? "";
    message.headers = object.headers ?? undefined;
    message.statusCode = object.statusCode ?? "";
    message.sizeBytes = object.sizeBytes ?? 0;
    message.duration = (object.duration !== undefined && object.duration !== null)
      ? Duration.fromPartial(object.duration)
      : undefined;
    message.body = object.body ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
