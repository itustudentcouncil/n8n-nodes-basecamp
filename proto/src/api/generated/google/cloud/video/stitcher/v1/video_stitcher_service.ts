// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/video/stitcher/v1/video_stitcher_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { LiveAdTagDetail, VodAdTagDetail } from "./ad_tag_details.js";
import { CdnKey } from "./cdn_keys.js";
import { LiveConfig } from "./live_configs.js";
import { LiveSession, VodSession } from "./sessions.js";
import { Slate } from "./slates.js";
import { VodStitchDetail } from "./stitch_details.js";
import { VodConfig } from "./vod_configs.js";

export const protobufPackage = "google.cloud.video.stitcher.v1";

/** Request message for VideoStitcherService.createCdnKey. */
export interface CreateCdnKeyRequest {
  /**
   * Required. The project in which the CDN key should be created, in the form
   * of `projects/{project_number}/locations/{location}`.
   */
  parent: string;
  /** Required. The CDN key resource to create. */
  cdnKey:
    | CdnKey
    | undefined;
  /**
   * Required. The ID to use for the CDN key, which will become the final
   * component of the CDN key's resource name.
   *
   * This value should conform to RFC-1034, which restricts to
   * lower-case letters, numbers, and hyphen, with the first character a
   * letter, the last a letter or a number, and a 63 character maximum.
   */
  cdnKeyId: string;
}

/** Request message for VideoStitcherService.listCdnKeys. */
export interface ListCdnKeysRequest {
  /**
   * Required. The project that contains the list of CDN keys, in the form of
   * `projects/{project_number}/locations/{location}`.
   */
  parent: string;
  /**
   * Requested page size. Server may return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** A token identifying a page of results the server should return. */
  pageToken: string;
  /** Filtering results */
  filter: string;
  /** Hint for how to order the results */
  orderBy: string;
}

/** Response message for VideoStitcher.ListCdnKeys. */
export interface ListCdnKeysResponse {
  /** List of CDN keys. */
  cdnKeys: CdnKey[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message for VideoStitcherService.getCdnKey. */
export interface GetCdnKeyRequest {
  /**
   * Required. The name of the CDN key to be retrieved, in the form of
   * `projects/{project}/locations/{location}/cdnKeys/{id}`.
   */
  name: string;
}

/** Request message for VideoStitcherService.deleteCdnKey. */
export interface DeleteCdnKeyRequest {
  /**
   * Required. The name of the CDN key to be deleted, in the form of
   * `projects/{project_number}/locations/{location}/cdnKeys/{id}`.
   */
  name: string;
}

/** Request message for VideoStitcherService.updateCdnKey. */
export interface UpdateCdnKeyRequest {
  /** Required. The CDN key resource which replaces the resource on the server. */
  cdnKey:
    | CdnKey
    | undefined;
  /**
   * Required. The update mask applies to the resource.
   * For the `FieldMask` definition, see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   */
  updateMask: string[] | undefined;
}

/** Request message for VideoStitcherService.createVodSession */
export interface CreateVodSessionRequest {
  /**
   * Required. The project and location in which the VOD session should be
   * created, in the form of `projects/{project_number}/locations/{location}`.
   */
  parent: string;
  /** Required. Parameters for creating a session. */
  vodSession: VodSession | undefined;
}

/** Request message for VideoStitcherService.getVodSession */
export interface GetVodSessionRequest {
  /**
   * Required. The name of the VOD session to be retrieved, in the form of
   * `projects/{project_number}/locations/{location}/vodSessions/{id}`.
   */
  name: string;
}

/** Request message for VideoStitcherService.listVodStitchDetails. */
export interface ListVodStitchDetailsRequest {
  /**
   * Required. The VOD session where the stitch details belong to, in the form
   * of `projects/{project}/locations/{location}/vodSessions/{id}`.
   */
  parent: string;
  /** The maximum number of items to return. */
  pageSize: number;
  /** The next_page_token value returned from a previous List request, if any. */
  pageToken: string;
}

/** Response message for VideoStitcherService.listVodStitchDetails. */
export interface ListVodStitchDetailsResponse {
  /** A List of stitch Details. */
  vodStitchDetails: VodStitchDetail[];
  /** The pagination token. */
  nextPageToken: string;
}

/** Request message for VideoStitcherService.getVodStitchDetail. */
export interface GetVodStitchDetailRequest {
  /**
   * Required. The name of the stitch detail in the specified VOD session, in
   * the form of
   * `projects/{project}/locations/{location}/vodSessions/{vod_session_id}/vodStitchDetails/{id}`.
   */
  name: string;
}

/** Request message for VideoStitcherService.listVodAdTagDetails. */
export interface ListVodAdTagDetailsRequest {
  /**
   * Required. The VOD session which the ad tag details belong to, in the form
   * of `projects/{project}/locations/{location}/vodSessions/{vod_session_id}`.
   */
  parent: string;
  /** The maximum number of items to return. */
  pageSize: number;
  /** The next_page_token value returned from a previous List request, if any. */
  pageToken: string;
}

/** Response message for VideoStitcherService.listVodAdTagDetails. */
export interface ListVodAdTagDetailsResponse {
  /** A List of ad tag details. */
  vodAdTagDetails: VodAdTagDetail[];
  /** The pagination token. */
  nextPageToken: string;
}

/** Request message for VideoStitcherService.getVodAdTagDetail */
export interface GetVodAdTagDetailRequest {
  /**
   * Required. The name of the ad tag detail for the specified VOD session, in
   * the form of
   * `projects/{project}/locations/{location}/vodSessions/{vod_session_id}/vodAdTagDetails/{vod_ad_tag_detail}`.
   */
  name: string;
}

/** Request message for VideoStitcherService.listLiveAdTagDetails. */
export interface ListLiveAdTagDetailsRequest {
  /**
   * Required. The resource parent in the form of
   * `projects/{project}/locations/{location}/liveSessions/{live_session}`.
   */
  parent: string;
  /** The maximum number of items to return. */
  pageSize: number;
  /** The pagination token returned from a previous List request. */
  pageToken: string;
}

/** Response message for VideoStitcherService.listLiveAdTagDetails. */
export interface ListLiveAdTagDetailsResponse {
  /** A list of live session ad tag details. */
  liveAdTagDetails: LiveAdTagDetail[];
  /** The pagination token. */
  nextPageToken: string;
}

/** Request message for VideoStitcherService.getLiveAdTagDetail */
export interface GetLiveAdTagDetailRequest {
  /**
   * Required. The resource name in the form of
   * `projects/{project}/locations/{location}/liveSessions/{live_session}/liveAdTagDetails/{live_ad_tag_detail}`.
   */
  name: string;
}

/** Request message for VideoStitcherService.createSlate. */
export interface CreateSlateRequest {
  /**
   * Required. The project in which the slate should be created, in the form of
   * `projects/{project_number}/locations/{location}`.
   */
  parent: string;
  /**
   * Required. The unique identifier for the slate.
   * This value should conform to RFC-1034, which restricts to
   * lower-case letters, numbers, and hyphen, with the first character a
   * letter, the last a letter or a number, and a 63 character maximum.
   */
  slateId: string;
  /** Required. The slate to create. */
  slate:
    | Slate
    | undefined;
  /**
   * A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   */
  requestId: string;
}

/** Request message for VideoStitcherService.getSlate. */
export interface GetSlateRequest {
  /**
   * Required. The name of the slate to be retrieved, of the slate, in the form
   * of `projects/{project_number}/locations/{location}/slates/{id}`.
   */
  name: string;
}

/** Request message for VideoStitcherService.listSlates. */
export interface ListSlatesRequest {
  /**
   * Required. The project to list slates, in the form of
   * `projects/{project_number}/locations/{location}`.
   */
  parent: string;
  /**
   * Requested page size. Server may return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** A token identifying a page of results the server should return. */
  pageToken: string;
  /** Filtering results */
  filter: string;
  /** Hint for how to order the results */
  orderBy: string;
}

/** Response message for VideoStitcherService.listSlates. */
export interface ListSlatesResponse {
  /** The list of slates */
  slates: Slate[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message for VideoStitcherService.updateSlate. */
export interface UpdateSlateRequest {
  /** Required. The resource with updated fields. */
  slate:
    | Slate
    | undefined;
  /** Required. The update mask which specifies fields which should be updated. */
  updateMask: string[] | undefined;
}

/** Request message for VideoStitcherService.deleteSlate. */
export interface DeleteSlateRequest {
  /**
   * Required. The name of the slate to be deleted, in the form of
   * `projects/{project_number}/locations/{location}/slates/{id}`.
   */
  name: string;
}

/** Request message for VideoStitcherService.createLiveSession. */
export interface CreateLiveSessionRequest {
  /**
   * Required. The project and location in which the live session should be
   * created, in the form of `projects/{project_number}/locations/{location}`.
   */
  parent: string;
  /** Required. Parameters for creating a live session. */
  liveSession: LiveSession | undefined;
}

/** Request message for VideoStitcherService.getSession. */
export interface GetLiveSessionRequest {
  /**
   * Required. The name of the live session, in the form of
   * `projects/{project_number}/locations/{location}/liveSessions/{id}`.
   */
  name: string;
}

/** Request message for VideoStitcherService.createLiveConfig */
export interface CreateLiveConfigRequest {
  /**
   * Required. The project in which the live config should be created, in
   * the form of `projects/{project_number}/locations/{location}`.
   */
  parent: string;
  /** Required. The unique identifier ID to use for the live config. */
  liveConfigId: string;
  /** Required. The live config resource to create. */
  liveConfig:
    | LiveConfig
    | undefined;
  /**
   * A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   */
  requestId: string;
}

/** Request message for VideoStitcherService.listLiveConfig. */
export interface ListLiveConfigsRequest {
  /**
   * Required. The project that contains the list of live configs, in the
   * form of `projects/{project_number}/locations/{location}`.
   */
  parent: string;
  /** The maximum number of items to return. */
  pageSize: number;
  /** The next_page_token value returned from a previous List request, if any. */
  pageToken: string;
  /**
   * Optional. The filter to apply to list results (see
   * [Filtering](https://google.aip.dev/160)).
   */
  filter: string;
  /**
   * Optional. Specifies the ordering of results following
   * [Cloud API
   * syntax](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   */
  orderBy: string;
}

/** Response message for VideoStitcher.ListLiveConfig. */
export interface ListLiveConfigsResponse {
  /** List of live configs. */
  liveConfigs: LiveConfig[];
  /** The pagination token. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message for VideoStitcherService.getLiveConfig. */
export interface GetLiveConfigRequest {
  /**
   * Required. The name of the live config to be retrieved, in the form
   * of
   * `projects/{project_number}/locations/{location}/liveConfigs/{id}`.
   */
  name: string;
}

/** Request message for VideoStitcherService.deleteLiveConfig. */
export interface DeleteLiveConfigRequest {
  /**
   * Required. The name of the live config to be deleted, in the form of
   * `projects/{project_number}/locations/{location}/liveConfigs/{id}`.
   */
  name: string;
}

/** Request message for VideoStitcherService.updateLiveConfig. */
export interface UpdateLiveConfigRequest {
  /**
   * Required. The LiveConfig resource which replaces the resource on the
   * server.
   */
  liveConfig:
    | LiveConfig
    | undefined;
  /**
   * Required. The update mask applies to the resource.
   * For the `FieldMask` definition, see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   */
  updateMask: string[] | undefined;
}

/** Request message for VideoStitcherService.createVodConfig */
export interface CreateVodConfigRequest {
  /**
   * Required. The project in which the VOD config should be created, in
   * the form of `projects/{project_number}/locations/{location}`.
   */
  parent: string;
  /** Required. The unique identifier ID to use for the VOD config. */
  vodConfigId: string;
  /** Required. The VOD config resource to create. */
  vodConfig:
    | VodConfig
    | undefined;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   */
  requestId: string;
}

/** Request message for VideoStitcherService.listVodConfig. */
export interface ListVodConfigsRequest {
  /**
   * Required. The project that contains the list of VOD configs, in the
   * form of `projects/{project_number}/locations/{location}`.
   */
  parent: string;
  /** Optional. The maximum number of items to return. */
  pageSize: number;
  /**
   * Optional. The next_page_token value returned from a previous List request,
   * if any.
   */
  pageToken: string;
  /**
   * Optional. The filter to apply to list results (see
   * [Filtering](https://google.aip.dev/160)).
   */
  filter: string;
  /**
   * Optional. Specifies the ordering of results following
   * [Cloud API
   * syntax](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   */
  orderBy: string;
}

/** Response message for VideoStitcher.ListVodConfig. */
export interface ListVodConfigsResponse {
  /** List of VOD configs. */
  vodConfigs: VodConfig[];
  /** The pagination token. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message for VideoStitcherService.getVodConfig. */
export interface GetVodConfigRequest {
  /**
   * Required. The name of the VOD config to be retrieved, in the form
   * of `projects/{project_number}/locations/{location}/vodConfigs/{id}`.
   */
  name: string;
}

/** Request message for VideoStitcherService.deleteVodConfig. */
export interface DeleteVodConfigRequest {
  /**
   * Required. The name of the VOD config to be deleted, in the form of
   * `projects/{project_number}/locations/{location}/vodConfigs/{id}`.
   */
  name: string;
}

/** Request message for VideoStitcherService.updateVodConfig. */
export interface UpdateVodConfigRequest {
  /**
   * Required. The VOD config resource which replaces the resource on the
   * server.
   */
  vodConfig:
    | VodConfig
    | undefined;
  /**
   * Required. The update mask applies to the resource.
   * For the `FieldMask` definition, see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   */
  updateMask: string[] | undefined;
}

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Server-defined resource path for the target of the operation. */
  target: string;
  /** Name of the verb executed by the operation. */
  verb: string;
}

function createBaseCreateCdnKeyRequest(): CreateCdnKeyRequest {
  return { parent: "", cdnKey: undefined, cdnKeyId: "" };
}

export const CreateCdnKeyRequest: MessageFns<CreateCdnKeyRequest> = {
  encode(message: CreateCdnKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.cdnKey !== undefined) {
      CdnKey.encode(message.cdnKey, writer.uint32(18).fork()).join();
    }
    if (message.cdnKeyId !== "") {
      writer.uint32(26).string(message.cdnKeyId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCdnKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCdnKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cdnKey = CdnKey.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.cdnKeyId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCdnKeyRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      cdnKey: isSet(object.cdnKey) ? CdnKey.fromJSON(object.cdnKey) : undefined,
      cdnKeyId: isSet(object.cdnKeyId) ? globalThis.String(object.cdnKeyId) : "",
    };
  },

  toJSON(message: CreateCdnKeyRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.cdnKey !== undefined) {
      obj.cdnKey = CdnKey.toJSON(message.cdnKey);
    }
    if (message.cdnKeyId !== "") {
      obj.cdnKeyId = message.cdnKeyId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCdnKeyRequest>): CreateCdnKeyRequest {
    return CreateCdnKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCdnKeyRequest>): CreateCdnKeyRequest {
    const message = createBaseCreateCdnKeyRequest();
    message.parent = object.parent ?? "";
    message.cdnKey = (object.cdnKey !== undefined && object.cdnKey !== null)
      ? CdnKey.fromPartial(object.cdnKey)
      : undefined;
    message.cdnKeyId = object.cdnKeyId ?? "";
    return message;
  },
};

function createBaseListCdnKeysRequest(): ListCdnKeysRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListCdnKeysRequest: MessageFns<ListCdnKeysRequest> = {
  encode(message: ListCdnKeysRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCdnKeysRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCdnKeysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCdnKeysRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListCdnKeysRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCdnKeysRequest>): ListCdnKeysRequest {
    return ListCdnKeysRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCdnKeysRequest>): ListCdnKeysRequest {
    const message = createBaseListCdnKeysRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListCdnKeysResponse(): ListCdnKeysResponse {
  return { cdnKeys: [], nextPageToken: "", unreachable: [] };
}

export const ListCdnKeysResponse: MessageFns<ListCdnKeysResponse> = {
  encode(message: ListCdnKeysResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.cdnKeys) {
      CdnKey.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCdnKeysResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCdnKeysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cdnKeys.push(CdnKey.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCdnKeysResponse {
    return {
      cdnKeys: globalThis.Array.isArray(object?.cdnKeys) ? object.cdnKeys.map((e: any) => CdnKey.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListCdnKeysResponse): unknown {
    const obj: any = {};
    if (message.cdnKeys?.length) {
      obj.cdnKeys = message.cdnKeys.map((e) => CdnKey.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCdnKeysResponse>): ListCdnKeysResponse {
    return ListCdnKeysResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCdnKeysResponse>): ListCdnKeysResponse {
    const message = createBaseListCdnKeysResponse();
    message.cdnKeys = object.cdnKeys?.map((e) => CdnKey.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetCdnKeyRequest(): GetCdnKeyRequest {
  return { name: "" };
}

export const GetCdnKeyRequest: MessageFns<GetCdnKeyRequest> = {
  encode(message: GetCdnKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCdnKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCdnKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCdnKeyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCdnKeyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCdnKeyRequest>): GetCdnKeyRequest {
    return GetCdnKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCdnKeyRequest>): GetCdnKeyRequest {
    const message = createBaseGetCdnKeyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteCdnKeyRequest(): DeleteCdnKeyRequest {
  return { name: "" };
}

export const DeleteCdnKeyRequest: MessageFns<DeleteCdnKeyRequest> = {
  encode(message: DeleteCdnKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCdnKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCdnKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCdnKeyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteCdnKeyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteCdnKeyRequest>): DeleteCdnKeyRequest {
    return DeleteCdnKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCdnKeyRequest>): DeleteCdnKeyRequest {
    const message = createBaseDeleteCdnKeyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateCdnKeyRequest(): UpdateCdnKeyRequest {
  return { cdnKey: undefined, updateMask: undefined };
}

export const UpdateCdnKeyRequest: MessageFns<UpdateCdnKeyRequest> = {
  encode(message: UpdateCdnKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cdnKey !== undefined) {
      CdnKey.encode(message.cdnKey, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCdnKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCdnKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cdnKey = CdnKey.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCdnKeyRequest {
    return {
      cdnKey: isSet(object.cdnKey) ? CdnKey.fromJSON(object.cdnKey) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateCdnKeyRequest): unknown {
    const obj: any = {};
    if (message.cdnKey !== undefined) {
      obj.cdnKey = CdnKey.toJSON(message.cdnKey);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCdnKeyRequest>): UpdateCdnKeyRequest {
    return UpdateCdnKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCdnKeyRequest>): UpdateCdnKeyRequest {
    const message = createBaseUpdateCdnKeyRequest();
    message.cdnKey = (object.cdnKey !== undefined && object.cdnKey !== null)
      ? CdnKey.fromPartial(object.cdnKey)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseCreateVodSessionRequest(): CreateVodSessionRequest {
  return { parent: "", vodSession: undefined };
}

export const CreateVodSessionRequest: MessageFns<CreateVodSessionRequest> = {
  encode(message: CreateVodSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.vodSession !== undefined) {
      VodSession.encode(message.vodSession, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateVodSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateVodSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vodSession = VodSession.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateVodSessionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      vodSession: isSet(object.vodSession) ? VodSession.fromJSON(object.vodSession) : undefined,
    };
  },

  toJSON(message: CreateVodSessionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.vodSession !== undefined) {
      obj.vodSession = VodSession.toJSON(message.vodSession);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateVodSessionRequest>): CreateVodSessionRequest {
    return CreateVodSessionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateVodSessionRequest>): CreateVodSessionRequest {
    const message = createBaseCreateVodSessionRequest();
    message.parent = object.parent ?? "";
    message.vodSession = (object.vodSession !== undefined && object.vodSession !== null)
      ? VodSession.fromPartial(object.vodSession)
      : undefined;
    return message;
  },
};

function createBaseGetVodSessionRequest(): GetVodSessionRequest {
  return { name: "" };
}

export const GetVodSessionRequest: MessageFns<GetVodSessionRequest> = {
  encode(message: GetVodSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVodSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVodSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVodSessionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetVodSessionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetVodSessionRequest>): GetVodSessionRequest {
    return GetVodSessionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetVodSessionRequest>): GetVodSessionRequest {
    const message = createBaseGetVodSessionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListVodStitchDetailsRequest(): ListVodStitchDetailsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListVodStitchDetailsRequest: MessageFns<ListVodStitchDetailsRequest> = {
  encode(message: ListVodStitchDetailsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVodStitchDetailsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVodStitchDetailsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVodStitchDetailsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListVodStitchDetailsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVodStitchDetailsRequest>): ListVodStitchDetailsRequest {
    return ListVodStitchDetailsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVodStitchDetailsRequest>): ListVodStitchDetailsRequest {
    const message = createBaseListVodStitchDetailsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListVodStitchDetailsResponse(): ListVodStitchDetailsResponse {
  return { vodStitchDetails: [], nextPageToken: "" };
}

export const ListVodStitchDetailsResponse: MessageFns<ListVodStitchDetailsResponse> = {
  encode(message: ListVodStitchDetailsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.vodStitchDetails) {
      VodStitchDetail.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVodStitchDetailsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVodStitchDetailsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.vodStitchDetails.push(VodStitchDetail.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVodStitchDetailsResponse {
    return {
      vodStitchDetails: globalThis.Array.isArray(object?.vodStitchDetails)
        ? object.vodStitchDetails.map((e: any) => VodStitchDetail.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListVodStitchDetailsResponse): unknown {
    const obj: any = {};
    if (message.vodStitchDetails?.length) {
      obj.vodStitchDetails = message.vodStitchDetails.map((e) => VodStitchDetail.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVodStitchDetailsResponse>): ListVodStitchDetailsResponse {
    return ListVodStitchDetailsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVodStitchDetailsResponse>): ListVodStitchDetailsResponse {
    const message = createBaseListVodStitchDetailsResponse();
    message.vodStitchDetails = object.vodStitchDetails?.map((e) => VodStitchDetail.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetVodStitchDetailRequest(): GetVodStitchDetailRequest {
  return { name: "" };
}

export const GetVodStitchDetailRequest: MessageFns<GetVodStitchDetailRequest> = {
  encode(message: GetVodStitchDetailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVodStitchDetailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVodStitchDetailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVodStitchDetailRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetVodStitchDetailRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetVodStitchDetailRequest>): GetVodStitchDetailRequest {
    return GetVodStitchDetailRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetVodStitchDetailRequest>): GetVodStitchDetailRequest {
    const message = createBaseGetVodStitchDetailRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListVodAdTagDetailsRequest(): ListVodAdTagDetailsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListVodAdTagDetailsRequest: MessageFns<ListVodAdTagDetailsRequest> = {
  encode(message: ListVodAdTagDetailsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVodAdTagDetailsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVodAdTagDetailsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVodAdTagDetailsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListVodAdTagDetailsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVodAdTagDetailsRequest>): ListVodAdTagDetailsRequest {
    return ListVodAdTagDetailsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVodAdTagDetailsRequest>): ListVodAdTagDetailsRequest {
    const message = createBaseListVodAdTagDetailsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListVodAdTagDetailsResponse(): ListVodAdTagDetailsResponse {
  return { vodAdTagDetails: [], nextPageToken: "" };
}

export const ListVodAdTagDetailsResponse: MessageFns<ListVodAdTagDetailsResponse> = {
  encode(message: ListVodAdTagDetailsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.vodAdTagDetails) {
      VodAdTagDetail.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVodAdTagDetailsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVodAdTagDetailsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.vodAdTagDetails.push(VodAdTagDetail.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVodAdTagDetailsResponse {
    return {
      vodAdTagDetails: globalThis.Array.isArray(object?.vodAdTagDetails)
        ? object.vodAdTagDetails.map((e: any) => VodAdTagDetail.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListVodAdTagDetailsResponse): unknown {
    const obj: any = {};
    if (message.vodAdTagDetails?.length) {
      obj.vodAdTagDetails = message.vodAdTagDetails.map((e) => VodAdTagDetail.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVodAdTagDetailsResponse>): ListVodAdTagDetailsResponse {
    return ListVodAdTagDetailsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVodAdTagDetailsResponse>): ListVodAdTagDetailsResponse {
    const message = createBaseListVodAdTagDetailsResponse();
    message.vodAdTagDetails = object.vodAdTagDetails?.map((e) => VodAdTagDetail.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetVodAdTagDetailRequest(): GetVodAdTagDetailRequest {
  return { name: "" };
}

export const GetVodAdTagDetailRequest: MessageFns<GetVodAdTagDetailRequest> = {
  encode(message: GetVodAdTagDetailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVodAdTagDetailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVodAdTagDetailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVodAdTagDetailRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetVodAdTagDetailRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetVodAdTagDetailRequest>): GetVodAdTagDetailRequest {
    return GetVodAdTagDetailRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetVodAdTagDetailRequest>): GetVodAdTagDetailRequest {
    const message = createBaseGetVodAdTagDetailRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListLiveAdTagDetailsRequest(): ListLiveAdTagDetailsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListLiveAdTagDetailsRequest: MessageFns<ListLiveAdTagDetailsRequest> = {
  encode(message: ListLiveAdTagDetailsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLiveAdTagDetailsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLiveAdTagDetailsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLiveAdTagDetailsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListLiveAdTagDetailsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLiveAdTagDetailsRequest>): ListLiveAdTagDetailsRequest {
    return ListLiveAdTagDetailsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLiveAdTagDetailsRequest>): ListLiveAdTagDetailsRequest {
    const message = createBaseListLiveAdTagDetailsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListLiveAdTagDetailsResponse(): ListLiveAdTagDetailsResponse {
  return { liveAdTagDetails: [], nextPageToken: "" };
}

export const ListLiveAdTagDetailsResponse: MessageFns<ListLiveAdTagDetailsResponse> = {
  encode(message: ListLiveAdTagDetailsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.liveAdTagDetails) {
      LiveAdTagDetail.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLiveAdTagDetailsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLiveAdTagDetailsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.liveAdTagDetails.push(LiveAdTagDetail.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLiveAdTagDetailsResponse {
    return {
      liveAdTagDetails: globalThis.Array.isArray(object?.liveAdTagDetails)
        ? object.liveAdTagDetails.map((e: any) => LiveAdTagDetail.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListLiveAdTagDetailsResponse): unknown {
    const obj: any = {};
    if (message.liveAdTagDetails?.length) {
      obj.liveAdTagDetails = message.liveAdTagDetails.map((e) => LiveAdTagDetail.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLiveAdTagDetailsResponse>): ListLiveAdTagDetailsResponse {
    return ListLiveAdTagDetailsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLiveAdTagDetailsResponse>): ListLiveAdTagDetailsResponse {
    const message = createBaseListLiveAdTagDetailsResponse();
    message.liveAdTagDetails = object.liveAdTagDetails?.map((e) => LiveAdTagDetail.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetLiveAdTagDetailRequest(): GetLiveAdTagDetailRequest {
  return { name: "" };
}

export const GetLiveAdTagDetailRequest: MessageFns<GetLiveAdTagDetailRequest> = {
  encode(message: GetLiveAdTagDetailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLiveAdTagDetailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLiveAdTagDetailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLiveAdTagDetailRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetLiveAdTagDetailRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetLiveAdTagDetailRequest>): GetLiveAdTagDetailRequest {
    return GetLiveAdTagDetailRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLiveAdTagDetailRequest>): GetLiveAdTagDetailRequest {
    const message = createBaseGetLiveAdTagDetailRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateSlateRequest(): CreateSlateRequest {
  return { parent: "", slateId: "", slate: undefined, requestId: "" };
}

export const CreateSlateRequest: MessageFns<CreateSlateRequest> = {
  encode(message: CreateSlateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.slateId !== "") {
      writer.uint32(18).string(message.slateId);
    }
    if (message.slate !== undefined) {
      Slate.encode(message.slate, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSlateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSlateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.slateId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.slate = Slate.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSlateRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      slateId: isSet(object.slateId) ? globalThis.String(object.slateId) : "",
      slate: isSet(object.slate) ? Slate.fromJSON(object.slate) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateSlateRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.slateId !== "") {
      obj.slateId = message.slateId;
    }
    if (message.slate !== undefined) {
      obj.slate = Slate.toJSON(message.slate);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSlateRequest>): CreateSlateRequest {
    return CreateSlateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSlateRequest>): CreateSlateRequest {
    const message = createBaseCreateSlateRequest();
    message.parent = object.parent ?? "";
    message.slateId = object.slateId ?? "";
    message.slate = (object.slate !== undefined && object.slate !== null) ? Slate.fromPartial(object.slate) : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseGetSlateRequest(): GetSlateRequest {
  return { name: "" };
}

export const GetSlateRequest: MessageFns<GetSlateRequest> = {
  encode(message: GetSlateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSlateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSlateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSlateRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSlateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSlateRequest>): GetSlateRequest {
    return GetSlateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSlateRequest>): GetSlateRequest {
    const message = createBaseGetSlateRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSlatesRequest(): ListSlatesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListSlatesRequest: MessageFns<ListSlatesRequest> = {
  encode(message: ListSlatesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSlatesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSlatesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSlatesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListSlatesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSlatesRequest>): ListSlatesRequest {
    return ListSlatesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSlatesRequest>): ListSlatesRequest {
    const message = createBaseListSlatesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListSlatesResponse(): ListSlatesResponse {
  return { slates: [], nextPageToken: "", unreachable: [] };
}

export const ListSlatesResponse: MessageFns<ListSlatesResponse> = {
  encode(message: ListSlatesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.slates) {
      Slate.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSlatesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSlatesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.slates.push(Slate.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSlatesResponse {
    return {
      slates: globalThis.Array.isArray(object?.slates) ? object.slates.map((e: any) => Slate.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListSlatesResponse): unknown {
    const obj: any = {};
    if (message.slates?.length) {
      obj.slates = message.slates.map((e) => Slate.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSlatesResponse>): ListSlatesResponse {
    return ListSlatesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSlatesResponse>): ListSlatesResponse {
    const message = createBaseListSlatesResponse();
    message.slates = object.slates?.map((e) => Slate.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateSlateRequest(): UpdateSlateRequest {
  return { slate: undefined, updateMask: undefined };
}

export const UpdateSlateRequest: MessageFns<UpdateSlateRequest> = {
  encode(message: UpdateSlateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.slate !== undefined) {
      Slate.encode(message.slate, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSlateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSlateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.slate = Slate.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSlateRequest {
    return {
      slate: isSet(object.slate) ? Slate.fromJSON(object.slate) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSlateRequest): unknown {
    const obj: any = {};
    if (message.slate !== undefined) {
      obj.slate = Slate.toJSON(message.slate);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSlateRequest>): UpdateSlateRequest {
    return UpdateSlateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSlateRequest>): UpdateSlateRequest {
    const message = createBaseUpdateSlateRequest();
    message.slate = (object.slate !== undefined && object.slate !== null) ? Slate.fromPartial(object.slate) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteSlateRequest(): DeleteSlateRequest {
  return { name: "" };
}

export const DeleteSlateRequest: MessageFns<DeleteSlateRequest> = {
  encode(message: DeleteSlateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSlateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSlateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSlateRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteSlateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSlateRequest>): DeleteSlateRequest {
    return DeleteSlateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSlateRequest>): DeleteSlateRequest {
    const message = createBaseDeleteSlateRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateLiveSessionRequest(): CreateLiveSessionRequest {
  return { parent: "", liveSession: undefined };
}

export const CreateLiveSessionRequest: MessageFns<CreateLiveSessionRequest> = {
  encode(message: CreateLiveSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.liveSession !== undefined) {
      LiveSession.encode(message.liveSession, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateLiveSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateLiveSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.liveSession = LiveSession.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateLiveSessionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      liveSession: isSet(object.liveSession) ? LiveSession.fromJSON(object.liveSession) : undefined,
    };
  },

  toJSON(message: CreateLiveSessionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.liveSession !== undefined) {
      obj.liveSession = LiveSession.toJSON(message.liveSession);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateLiveSessionRequest>): CreateLiveSessionRequest {
    return CreateLiveSessionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateLiveSessionRequest>): CreateLiveSessionRequest {
    const message = createBaseCreateLiveSessionRequest();
    message.parent = object.parent ?? "";
    message.liveSession = (object.liveSession !== undefined && object.liveSession !== null)
      ? LiveSession.fromPartial(object.liveSession)
      : undefined;
    return message;
  },
};

function createBaseGetLiveSessionRequest(): GetLiveSessionRequest {
  return { name: "" };
}

export const GetLiveSessionRequest: MessageFns<GetLiveSessionRequest> = {
  encode(message: GetLiveSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLiveSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLiveSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLiveSessionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetLiveSessionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetLiveSessionRequest>): GetLiveSessionRequest {
    return GetLiveSessionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLiveSessionRequest>): GetLiveSessionRequest {
    const message = createBaseGetLiveSessionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateLiveConfigRequest(): CreateLiveConfigRequest {
  return { parent: "", liveConfigId: "", liveConfig: undefined, requestId: "" };
}

export const CreateLiveConfigRequest: MessageFns<CreateLiveConfigRequest> = {
  encode(message: CreateLiveConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.liveConfigId !== "") {
      writer.uint32(18).string(message.liveConfigId);
    }
    if (message.liveConfig !== undefined) {
      LiveConfig.encode(message.liveConfig, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateLiveConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateLiveConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.liveConfigId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.liveConfig = LiveConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateLiveConfigRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      liveConfigId: isSet(object.liveConfigId) ? globalThis.String(object.liveConfigId) : "",
      liveConfig: isSet(object.liveConfig) ? LiveConfig.fromJSON(object.liveConfig) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateLiveConfigRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.liveConfigId !== "") {
      obj.liveConfigId = message.liveConfigId;
    }
    if (message.liveConfig !== undefined) {
      obj.liveConfig = LiveConfig.toJSON(message.liveConfig);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateLiveConfigRequest>): CreateLiveConfigRequest {
    return CreateLiveConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateLiveConfigRequest>): CreateLiveConfigRequest {
    const message = createBaseCreateLiveConfigRequest();
    message.parent = object.parent ?? "";
    message.liveConfigId = object.liveConfigId ?? "";
    message.liveConfig = (object.liveConfig !== undefined && object.liveConfig !== null)
      ? LiveConfig.fromPartial(object.liveConfig)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseListLiveConfigsRequest(): ListLiveConfigsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListLiveConfigsRequest: MessageFns<ListLiveConfigsRequest> = {
  encode(message: ListLiveConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLiveConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLiveConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLiveConfigsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListLiveConfigsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLiveConfigsRequest>): ListLiveConfigsRequest {
    return ListLiveConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLiveConfigsRequest>): ListLiveConfigsRequest {
    const message = createBaseListLiveConfigsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListLiveConfigsResponse(): ListLiveConfigsResponse {
  return { liveConfigs: [], nextPageToken: "", unreachable: [] };
}

export const ListLiveConfigsResponse: MessageFns<ListLiveConfigsResponse> = {
  encode(message: ListLiveConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.liveConfigs) {
      LiveConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLiveConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLiveConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.liveConfigs.push(LiveConfig.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLiveConfigsResponse {
    return {
      liveConfigs: globalThis.Array.isArray(object?.liveConfigs)
        ? object.liveConfigs.map((e: any) => LiveConfig.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListLiveConfigsResponse): unknown {
    const obj: any = {};
    if (message.liveConfigs?.length) {
      obj.liveConfigs = message.liveConfigs.map((e) => LiveConfig.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLiveConfigsResponse>): ListLiveConfigsResponse {
    return ListLiveConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLiveConfigsResponse>): ListLiveConfigsResponse {
    const message = createBaseListLiveConfigsResponse();
    message.liveConfigs = object.liveConfigs?.map((e) => LiveConfig.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetLiveConfigRequest(): GetLiveConfigRequest {
  return { name: "" };
}

export const GetLiveConfigRequest: MessageFns<GetLiveConfigRequest> = {
  encode(message: GetLiveConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLiveConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLiveConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLiveConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetLiveConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetLiveConfigRequest>): GetLiveConfigRequest {
    return GetLiveConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLiveConfigRequest>): GetLiveConfigRequest {
    const message = createBaseGetLiveConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteLiveConfigRequest(): DeleteLiveConfigRequest {
  return { name: "" };
}

export const DeleteLiveConfigRequest: MessageFns<DeleteLiveConfigRequest> = {
  encode(message: DeleteLiveConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteLiveConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteLiveConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteLiveConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteLiveConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteLiveConfigRequest>): DeleteLiveConfigRequest {
    return DeleteLiveConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteLiveConfigRequest>): DeleteLiveConfigRequest {
    const message = createBaseDeleteLiveConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateLiveConfigRequest(): UpdateLiveConfigRequest {
  return { liveConfig: undefined, updateMask: undefined };
}

export const UpdateLiveConfigRequest: MessageFns<UpdateLiveConfigRequest> = {
  encode(message: UpdateLiveConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.liveConfig !== undefined) {
      LiveConfig.encode(message.liveConfig, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLiveConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLiveConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.liveConfig = LiveConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLiveConfigRequest {
    return {
      liveConfig: isSet(object.liveConfig) ? LiveConfig.fromJSON(object.liveConfig) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateLiveConfigRequest): unknown {
    const obj: any = {};
    if (message.liveConfig !== undefined) {
      obj.liveConfig = LiveConfig.toJSON(message.liveConfig);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLiveConfigRequest>): UpdateLiveConfigRequest {
    return UpdateLiveConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLiveConfigRequest>): UpdateLiveConfigRequest {
    const message = createBaseUpdateLiveConfigRequest();
    message.liveConfig = (object.liveConfig !== undefined && object.liveConfig !== null)
      ? LiveConfig.fromPartial(object.liveConfig)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseCreateVodConfigRequest(): CreateVodConfigRequest {
  return { parent: "", vodConfigId: "", vodConfig: undefined, requestId: "" };
}

export const CreateVodConfigRequest: MessageFns<CreateVodConfigRequest> = {
  encode(message: CreateVodConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.vodConfigId !== "") {
      writer.uint32(18).string(message.vodConfigId);
    }
    if (message.vodConfig !== undefined) {
      VodConfig.encode(message.vodConfig, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateVodConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateVodConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vodConfigId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.vodConfig = VodConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateVodConfigRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      vodConfigId: isSet(object.vodConfigId) ? globalThis.String(object.vodConfigId) : "",
      vodConfig: isSet(object.vodConfig) ? VodConfig.fromJSON(object.vodConfig) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateVodConfigRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.vodConfigId !== "") {
      obj.vodConfigId = message.vodConfigId;
    }
    if (message.vodConfig !== undefined) {
      obj.vodConfig = VodConfig.toJSON(message.vodConfig);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateVodConfigRequest>): CreateVodConfigRequest {
    return CreateVodConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateVodConfigRequest>): CreateVodConfigRequest {
    const message = createBaseCreateVodConfigRequest();
    message.parent = object.parent ?? "";
    message.vodConfigId = object.vodConfigId ?? "";
    message.vodConfig = (object.vodConfig !== undefined && object.vodConfig !== null)
      ? VodConfig.fromPartial(object.vodConfig)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseListVodConfigsRequest(): ListVodConfigsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListVodConfigsRequest: MessageFns<ListVodConfigsRequest> = {
  encode(message: ListVodConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVodConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVodConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVodConfigsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListVodConfigsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVodConfigsRequest>): ListVodConfigsRequest {
    return ListVodConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVodConfigsRequest>): ListVodConfigsRequest {
    const message = createBaseListVodConfigsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListVodConfigsResponse(): ListVodConfigsResponse {
  return { vodConfigs: [], nextPageToken: "", unreachable: [] };
}

export const ListVodConfigsResponse: MessageFns<ListVodConfigsResponse> = {
  encode(message: ListVodConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.vodConfigs) {
      VodConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVodConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVodConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.vodConfigs.push(VodConfig.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVodConfigsResponse {
    return {
      vodConfigs: globalThis.Array.isArray(object?.vodConfigs)
        ? object.vodConfigs.map((e: any) => VodConfig.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListVodConfigsResponse): unknown {
    const obj: any = {};
    if (message.vodConfigs?.length) {
      obj.vodConfigs = message.vodConfigs.map((e) => VodConfig.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVodConfigsResponse>): ListVodConfigsResponse {
    return ListVodConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVodConfigsResponse>): ListVodConfigsResponse {
    const message = createBaseListVodConfigsResponse();
    message.vodConfigs = object.vodConfigs?.map((e) => VodConfig.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetVodConfigRequest(): GetVodConfigRequest {
  return { name: "" };
}

export const GetVodConfigRequest: MessageFns<GetVodConfigRequest> = {
  encode(message: GetVodConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVodConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVodConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVodConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetVodConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetVodConfigRequest>): GetVodConfigRequest {
    return GetVodConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetVodConfigRequest>): GetVodConfigRequest {
    const message = createBaseGetVodConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteVodConfigRequest(): DeleteVodConfigRequest {
  return { name: "" };
}

export const DeleteVodConfigRequest: MessageFns<DeleteVodConfigRequest> = {
  encode(message: DeleteVodConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteVodConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteVodConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteVodConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteVodConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteVodConfigRequest>): DeleteVodConfigRequest {
    return DeleteVodConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteVodConfigRequest>): DeleteVodConfigRequest {
    const message = createBaseDeleteVodConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateVodConfigRequest(): UpdateVodConfigRequest {
  return { vodConfig: undefined, updateMask: undefined };
}

export const UpdateVodConfigRequest: MessageFns<UpdateVodConfigRequest> = {
  encode(message: UpdateVodConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vodConfig !== undefined) {
      VodConfig.encode(message.vodConfig, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateVodConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateVodConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.vodConfig = VodConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateVodConfigRequest {
    return {
      vodConfig: isSet(object.vodConfig) ? VodConfig.fromJSON(object.vodConfig) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateVodConfigRequest): unknown {
    const obj: any = {};
    if (message.vodConfig !== undefined) {
      obj.vodConfig = VodConfig.toJSON(message.vodConfig);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateVodConfigRequest>): UpdateVodConfigRequest {
    return UpdateVodConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateVodConfigRequest>): UpdateVodConfigRequest {
    const message = createBaseUpdateVodConfigRequest();
    message.vodConfig = (object.vodConfig !== undefined && object.vodConfig !== null)
      ? VodConfig.fromPartial(object.vodConfig)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return { createTime: undefined, endTime: undefined, target: "", verb: "" };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    return message;
  },
};

/**
 * Video-On-Demand content stitching API allows you to insert ads
 * into (VoD) video on demand files. You will be able to render custom
 * scrubber bars with highlighted ads, enforce ad policies, allow
 * seamless playback and tracking on native players and monetize
 * content with any standard VMAP compliant ad server.
 */
export type VideoStitcherServiceDefinition = typeof VideoStitcherServiceDefinition;
export const VideoStitcherServiceDefinition = {
  name: "VideoStitcherService",
  fullName: "google.cloud.video.stitcher.v1.VideoStitcherService",
  methods: {
    /** Creates a new CDN key. */
    createCdnKey: {
      name: "CreateCdnKey",
      requestType: CreateCdnKeyRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              89,
              10,
              37,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              67,
              100,
              110,
              75,
              101,
              121,
              18,
              48,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              100,
              110,
              95,
              107,
              101,
              121,
              44,
              99,
              100,
              110,
              95,
              107,
              101,
              121,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              54,
              58,
              7,
              99,
              100,
              110,
              95,
              107,
              101,
              121,
              34,
              43,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              100,
              110,
              75,
              101,
              121,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists all CDN keys in the specified project and location. */
    listCdnKeys: {
      name: "ListCdnKeys",
      requestType: ListCdnKeysRequest,
      requestStream: false,
      responseType: ListCdnKeysResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              100,
              110,
              75,
              101,
              121,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns the specified CDN key. */
    getCdnKey: {
      name: "GetCdnKey",
      requestType: GetCdnKeyRequest,
      requestStream: false,
      responseType: CdnKey,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              100,
              110,
              75,
              101,
              121,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes the specified CDN key. */
    deleteCdnKey: {
      name: "DeleteCdnKey",
      requestType: DeleteCdnKeyRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              73,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              48,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              45,
              42,
              43,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              100,
              110,
              75,
              101,
              121,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified CDN key. Only update fields specified
     * in the call method body.
     */
    updateCdnKey: {
      name: "UpdateCdnKey",
      requestType: UpdateCdnKeyRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              89,
              10,
              37,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              67,
              100,
              110,
              75,
              101,
              121,
              18,
              48,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([19, 99, 100, 110, 95, 107, 101, 121, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              7,
              99,
              100,
              110,
              95,
              107,
              101,
              121,
              50,
              51,
              47,
              118,
              49,
              47,
              123,
              99,
              100,
              110,
              95,
              107,
              101,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              100,
              110,
              75,
              101,
              121,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a client side playback VOD session and returns the full
     * tracking and playback metadata of the session.
     */
    createVodSession: {
      name: "CreateVodSession",
      requestType: CreateVodSessionRequest,
      requestStream: false,
      responseType: VodSession,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([18, 112, 97, 114, 101, 110, 116, 44, 118, 111, 100, 95, 115, 101, 115, 115, 105, 111, 110]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              11,
              118,
              111,
              100,
              95,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              34,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              118,
              111,
              100,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the full tracking, playback metadata, and relevant ad-ops
     * logs for the specified VOD session.
     */
    getVodSession: {
      name: "GetVodSession",
      requestType: GetVodSessionRequest,
      requestStream: false,
      responseType: VodSession,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              111,
              100,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns a list of detailed stitching information of the specified VOD
     * session.
     */
    listVodStitchDetails: {
      name: "ListVodStitchDetails",
      requestType: ListVodStitchDetailsRequest,
      requestStream: false,
      responseType: ListVodStitchDetailsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              68,
              18,
              66,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              111,
              100,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              118,
              111,
              100,
              83,
              116,
              105,
              116,
              99,
              104,
              68,
              101,
              116,
              97,
              105,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns the specified stitching information for the specified VOD session. */
    getVodStitchDetail: {
      name: "GetVodStitchDetail",
      requestType: GetVodStitchDetailRequest,
      requestStream: false,
      responseType: VodStitchDetail,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              68,
              18,
              66,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              111,
              100,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              111,
              100,
              83,
              116,
              105,
              116,
              99,
              104,
              68,
              101,
              116,
              97,
              105,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Return the list of ad tag details for the specified VOD session. */
    listVodAdTagDetails: {
      name: "ListVodAdTagDetails",
      requestType: ListVodAdTagDetailsRequest,
      requestStream: false,
      responseType: ListVodAdTagDetailsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              67,
              18,
              65,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              111,
              100,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              118,
              111,
              100,
              65,
              100,
              84,
              97,
              103,
              68,
              101,
              116,
              97,
              105,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns the specified ad tag detail for the specified VOD session. */
    getVodAdTagDetail: {
      name: "GetVodAdTagDetail",
      requestType: GetVodAdTagDetailRequest,
      requestStream: false,
      responseType: VodAdTagDetail,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              67,
              18,
              65,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              111,
              100,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              111,
              100,
              65,
              100,
              84,
              97,
              103,
              68,
              101,
              116,
              97,
              105,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Return the list of ad tag details for the specified live session. */
    listLiveAdTagDetails: {
      name: "ListLiveAdTagDetails",
      requestType: ListLiveAdTagDetailsRequest,
      requestStream: false,
      responseType: ListLiveAdTagDetailsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              69,
              18,
              67,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              105,
              118,
              101,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              118,
              101,
              65,
              100,
              84,
              97,
              103,
              68,
              101,
              116,
              97,
              105,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns the specified ad tag detail for the specified live session. */
    getLiveAdTagDetail: {
      name: "GetLiveAdTagDetail",
      requestType: GetLiveAdTagDetailRequest,
      requestStream: false,
      responseType: LiveAdTagDetail,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              69,
              18,
              67,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              105,
              118,
              101,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              105,
              118,
              101,
              65,
              100,
              84,
              97,
              103,
              68,
              101,
              116,
              97,
              105,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a slate. */
    createSlate: {
      name: "CreateSlate",
      requestType: CreateSlateRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              88,
              10,
              36,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              83,
              108,
              97,
              116,
              101,
              18,
              48,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              21,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              108,
              97,
              116,
              101,
              44,
              115,
              108,
              97,
              116,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              51,
              58,
              5,
              115,
              108,
              97,
              116,
              101,
              34,
              42,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              108,
              97,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists all slates in the specified project and location. */
    listSlates: {
      name: "ListSlates",
      requestType: ListSlatesRequest,
      requestStream: false,
      responseType: ListSlatesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              44,
              18,
              42,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              108,
              97,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns the specified slate. */
    getSlate: {
      name: "GetSlate",
      requestType: GetSlateRequest,
      requestStream: false,
      responseType: Slate,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              44,
              18,
              42,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates the specified slate. */
    updateSlate: {
      name: "UpdateSlate",
      requestType: UpdateSlateRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              88,
              10,
              36,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              83,
              108,
              97,
              116,
              101,
              18,
              48,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([17, 115, 108, 97, 116, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              57,
              58,
              5,
              115,
              108,
              97,
              116,
              101,
              50,
              48,
              47,
              118,
              49,
              47,
              123,
              115,
              108,
              97,
              116,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes the specified slate. */
    deleteSlate: {
      name: "DeleteSlate",
      requestType: DeleteSlateRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              73,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              48,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              44,
              42,
              42,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new live session. */
    createLiveSession: {
      name: "CreateLiveSession",
      requestType: CreateLiveSessionRequest,
      requestStream: false,
      responseType: LiveSession,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              19,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              108,
              105,
              118,
              101,
              95,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              64,
              58,
              12,
              108,
              105,
              118,
              101,
              95,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              34,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              118,
              101,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns the details for the specified live session. */
    getLiveSession: {
      name: "GetLiveSession",
      requestType: GetLiveSessionRequest,
      requestStream: false,
      responseType: LiveSession,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              105,
              118,
              101,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Registers the live config with the provided unique ID in
     * the specified region.
     */
    createLiveConfig: {
      name: "CreateLiveConfig",
      requestType: CreateLiveConfigRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              93,
              10,
              41,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              76,
              105,
              118,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              18,
              48,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              33,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              108,
              105,
              118,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              108,
              105,
              118,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              11,
              108,
              105,
              118,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              118,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all live configs managed by the Video Stitcher that
     * belong to the specified project and region.
     */
    listLiveConfigs: {
      name: "ListLiveConfigs",
      requestType: ListLiveConfigsRequest,
      requestStream: false,
      responseType: ListLiveConfigsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              118,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the specified live config managed by the Video
     * Stitcher service.
     */
    getLiveConfig: {
      name: "GetLiveConfig",
      requestType: GetLiveConfigRequest,
      requestStream: false,
      responseType: LiveConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              105,
              118,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes the specified live config. */
    deleteLiveConfig: {
      name: "DeleteLiveConfig",
      requestType: DeleteLiveConfigRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              73,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              48,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              42,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              105,
              118,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified LiveConfig. Only update fields specified
     * in the call method body.
     */
    updateLiveConfig: {
      name: "UpdateLiveConfig",
      requestType: UpdateLiveConfigRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              93,
              10,
              41,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              76,
              105,
              118,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              18,
              48,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              108,
              105,
              118,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              74,
              58,
              11,
              108,
              105,
              118,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              59,
              47,
              118,
              49,
              47,
              123,
              108,
              105,
              118,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              105,
              118,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Registers the VOD config with the provided unique ID in
     * the specified region.
     */
    createVodConfig: {
      name: "CreateVodConfig",
      requestType: CreateVodConfigRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              92,
              10,
              40,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              86,
              111,
              100,
              67,
              111,
              110,
              102,
              105,
              103,
              18,
              48,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              31,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              118,
              111,
              100,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              118,
              111,
              100,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              60,
              58,
              10,
              118,
              111,
              100,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              118,
              111,
              100,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all VOD configs managed by the Video Stitcher API that
     * belong to the specified project and region.
     */
    listVodConfigs: {
      name: "ListVodConfigs",
      requestType: ListVodConfigsRequest,
      requestStream: false,
      responseType: ListVodConfigsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              118,
              111,
              100,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the specified VOD config managed by the Video
     * Stitcher API service.
     */
    getVodConfig: {
      name: "GetVodConfig",
      requestType: GetVodConfigRequest,
      requestStream: false,
      responseType: VodConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              111,
              100,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes the specified VOD config. */
    deleteVodConfig: {
      name: "DeleteVodConfig",
      requestType: DeleteVodConfigRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              73,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              48,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              42,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              111,
              100,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified VOD config. Only update fields specified
     * in the call method body.
     */
    updateVodConfig: {
      name: "UpdateVodConfig",
      requestType: UpdateVodConfigRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              92,
              10,
              40,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              86,
              111,
              100,
              67,
              111,
              110,
              102,
              105,
              103,
              18,
              48,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              118,
              105,
              100,
              101,
              111,
              46,
              115,
              116,
              105,
              116,
              99,
              104,
              101,
              114,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              22,
              118,
              111,
              100,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              71,
              58,
              10,
              118,
              111,
              100,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              57,
              47,
              118,
              49,
              47,
              123,
              118,
              111,
              100,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              111,
              100,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface VideoStitcherServiceImplementation<CallContextExt = {}> {
  /** Creates a new CDN key. */
  createCdnKey(request: CreateCdnKeyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Lists all CDN keys in the specified project and location. */
  listCdnKeys(
    request: ListCdnKeysRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCdnKeysResponse>>;
  /** Returns the specified CDN key. */
  getCdnKey(request: GetCdnKeyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<CdnKey>>;
  /** Deletes the specified CDN key. */
  deleteCdnKey(request: DeleteCdnKeyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Updates the specified CDN key. Only update fields specified
   * in the call method body.
   */
  updateCdnKey(request: UpdateCdnKeyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Creates a client side playback VOD session and returns the full
   * tracking and playback metadata of the session.
   */
  createVodSession(
    request: CreateVodSessionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<VodSession>>;
  /**
   * Returns the full tracking, playback metadata, and relevant ad-ops
   * logs for the specified VOD session.
   */
  getVodSession(request: GetVodSessionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<VodSession>>;
  /**
   * Returns a list of detailed stitching information of the specified VOD
   * session.
   */
  listVodStitchDetails(
    request: ListVodStitchDetailsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListVodStitchDetailsResponse>>;
  /** Returns the specified stitching information for the specified VOD session. */
  getVodStitchDetail(
    request: GetVodStitchDetailRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<VodStitchDetail>>;
  /** Return the list of ad tag details for the specified VOD session. */
  listVodAdTagDetails(
    request: ListVodAdTagDetailsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListVodAdTagDetailsResponse>>;
  /** Returns the specified ad tag detail for the specified VOD session. */
  getVodAdTagDetail(
    request: GetVodAdTagDetailRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<VodAdTagDetail>>;
  /** Return the list of ad tag details for the specified live session. */
  listLiveAdTagDetails(
    request: ListLiveAdTagDetailsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListLiveAdTagDetailsResponse>>;
  /** Returns the specified ad tag detail for the specified live session. */
  getLiveAdTagDetail(
    request: GetLiveAdTagDetailRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LiveAdTagDetail>>;
  /** Creates a slate. */
  createSlate(request: CreateSlateRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Lists all slates in the specified project and location. */
  listSlates(
    request: ListSlatesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSlatesResponse>>;
  /** Returns the specified slate. */
  getSlate(request: GetSlateRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Slate>>;
  /** Updates the specified slate. */
  updateSlate(request: UpdateSlateRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes the specified slate. */
  deleteSlate(request: DeleteSlateRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Creates a new live session. */
  createLiveSession(
    request: CreateLiveSessionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LiveSession>>;
  /** Returns the details for the specified live session. */
  getLiveSession(
    request: GetLiveSessionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LiveSession>>;
  /**
   * Registers the live config with the provided unique ID in
   * the specified region.
   */
  createLiveConfig(
    request: CreateLiveConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Lists all live configs managed by the Video Stitcher that
   * belong to the specified project and region.
   */
  listLiveConfigs(
    request: ListLiveConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListLiveConfigsResponse>>;
  /**
   * Returns the specified live config managed by the Video
   * Stitcher service.
   */
  getLiveConfig(request: GetLiveConfigRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LiveConfig>>;
  /** Deletes the specified live config. */
  deleteLiveConfig(
    request: DeleteLiveConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates the specified LiveConfig. Only update fields specified
   * in the call method body.
   */
  updateLiveConfig(
    request: UpdateLiveConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Registers the VOD config with the provided unique ID in
   * the specified region.
   */
  createVodConfig(
    request: CreateVodConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Lists all VOD configs managed by the Video Stitcher API that
   * belong to the specified project and region.
   */
  listVodConfigs(
    request: ListVodConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListVodConfigsResponse>>;
  /**
   * Returns the specified VOD config managed by the Video
   * Stitcher API service.
   */
  getVodConfig(request: GetVodConfigRequest, context: CallContext & CallContextExt): Promise<DeepPartial<VodConfig>>;
  /** Deletes the specified VOD config. */
  deleteVodConfig(
    request: DeleteVodConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates the specified VOD config. Only update fields specified
   * in the call method body.
   */
  updateVodConfig(
    request: UpdateVodConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface VideoStitcherServiceClient<CallOptionsExt = {}> {
  /** Creates a new CDN key. */
  createCdnKey(request: DeepPartial<CreateCdnKeyRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Lists all CDN keys in the specified project and location. */
  listCdnKeys(
    request: DeepPartial<ListCdnKeysRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCdnKeysResponse>;
  /** Returns the specified CDN key. */
  getCdnKey(request: DeepPartial<GetCdnKeyRequest>, options?: CallOptions & CallOptionsExt): Promise<CdnKey>;
  /** Deletes the specified CDN key. */
  deleteCdnKey(request: DeepPartial<DeleteCdnKeyRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Updates the specified CDN key. Only update fields specified
   * in the call method body.
   */
  updateCdnKey(request: DeepPartial<UpdateCdnKeyRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Creates a client side playback VOD session and returns the full
   * tracking and playback metadata of the session.
   */
  createVodSession(
    request: DeepPartial<CreateVodSessionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<VodSession>;
  /**
   * Returns the full tracking, playback metadata, and relevant ad-ops
   * logs for the specified VOD session.
   */
  getVodSession(
    request: DeepPartial<GetVodSessionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<VodSession>;
  /**
   * Returns a list of detailed stitching information of the specified VOD
   * session.
   */
  listVodStitchDetails(
    request: DeepPartial<ListVodStitchDetailsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListVodStitchDetailsResponse>;
  /** Returns the specified stitching information for the specified VOD session. */
  getVodStitchDetail(
    request: DeepPartial<GetVodStitchDetailRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<VodStitchDetail>;
  /** Return the list of ad tag details for the specified VOD session. */
  listVodAdTagDetails(
    request: DeepPartial<ListVodAdTagDetailsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListVodAdTagDetailsResponse>;
  /** Returns the specified ad tag detail for the specified VOD session. */
  getVodAdTagDetail(
    request: DeepPartial<GetVodAdTagDetailRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<VodAdTagDetail>;
  /** Return the list of ad tag details for the specified live session. */
  listLiveAdTagDetails(
    request: DeepPartial<ListLiveAdTagDetailsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListLiveAdTagDetailsResponse>;
  /** Returns the specified ad tag detail for the specified live session. */
  getLiveAdTagDetail(
    request: DeepPartial<GetLiveAdTagDetailRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LiveAdTagDetail>;
  /** Creates a slate. */
  createSlate(request: DeepPartial<CreateSlateRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Lists all slates in the specified project and location. */
  listSlates(
    request: DeepPartial<ListSlatesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSlatesResponse>;
  /** Returns the specified slate. */
  getSlate(request: DeepPartial<GetSlateRequest>, options?: CallOptions & CallOptionsExt): Promise<Slate>;
  /** Updates the specified slate. */
  updateSlate(request: DeepPartial<UpdateSlateRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes the specified slate. */
  deleteSlate(request: DeepPartial<DeleteSlateRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Creates a new live session. */
  createLiveSession(
    request: DeepPartial<CreateLiveSessionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LiveSession>;
  /** Returns the details for the specified live session. */
  getLiveSession(
    request: DeepPartial<GetLiveSessionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LiveSession>;
  /**
   * Registers the live config with the provided unique ID in
   * the specified region.
   */
  createLiveConfig(
    request: DeepPartial<CreateLiveConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Lists all live configs managed by the Video Stitcher that
   * belong to the specified project and region.
   */
  listLiveConfigs(
    request: DeepPartial<ListLiveConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListLiveConfigsResponse>;
  /**
   * Returns the specified live config managed by the Video
   * Stitcher service.
   */
  getLiveConfig(
    request: DeepPartial<GetLiveConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LiveConfig>;
  /** Deletes the specified live config. */
  deleteLiveConfig(
    request: DeepPartial<DeleteLiveConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates the specified LiveConfig. Only update fields specified
   * in the call method body.
   */
  updateLiveConfig(
    request: DeepPartial<UpdateLiveConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Registers the VOD config with the provided unique ID in
   * the specified region.
   */
  createVodConfig(
    request: DeepPartial<CreateVodConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Lists all VOD configs managed by the Video Stitcher API that
   * belong to the specified project and region.
   */
  listVodConfigs(
    request: DeepPartial<ListVodConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListVodConfigsResponse>;
  /**
   * Returns the specified VOD config managed by the Video
   * Stitcher API service.
   */
  getVodConfig(request: DeepPartial<GetVodConfigRequest>, options?: CallOptions & CallOptionsExt): Promise<VodConfig>;
  /** Deletes the specified VOD config. */
  deleteVodConfig(
    request: DeepPartial<DeleteVodConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates the specified VOD config. Only update fields specified
   * in the call method body.
   */
  updateVodConfig(
    request: DeepPartial<UpdateVodConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
