// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v1p1beta1/notification_message.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Finding } from "./finding.js";
import { Resource } from "./resource.js";

export const protobufPackage = "google.cloud.securitycenter.v1p1beta1";

/** Security Command Center's Notification */
export interface NotificationMessage {
  /** Name of the notification config that generated current notification. */
  notificationConfigName: string;
  /**
   * If it's a Finding based notification config, this field will be
   * populated.
   */
  finding?:
    | Finding
    | undefined;
  /** The Cloud resource tied to the notification. */
  resource: Resource | undefined;
}

function createBaseNotificationMessage(): NotificationMessage {
  return { notificationConfigName: "", finding: undefined, resource: undefined };
}

export const NotificationMessage: MessageFns<NotificationMessage> = {
  encode(message: NotificationMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notificationConfigName !== "") {
      writer.uint32(10).string(message.notificationConfigName);
    }
    if (message.finding !== undefined) {
      Finding.encode(message.finding, writer.uint32(18).fork()).join();
    }
    if (message.resource !== undefined) {
      Resource.encode(message.resource, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotificationMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.notificationConfigName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.finding = Finding.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resource = Resource.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationMessage {
    return {
      notificationConfigName: isSet(object.notificationConfigName)
        ? globalThis.String(object.notificationConfigName)
        : "",
      finding: isSet(object.finding) ? Finding.fromJSON(object.finding) : undefined,
      resource: isSet(object.resource) ? Resource.fromJSON(object.resource) : undefined,
    };
  },

  toJSON(message: NotificationMessage): unknown {
    const obj: any = {};
    if (message.notificationConfigName !== "") {
      obj.notificationConfigName = message.notificationConfigName;
    }
    if (message.finding !== undefined) {
      obj.finding = Finding.toJSON(message.finding);
    }
    if (message.resource !== undefined) {
      obj.resource = Resource.toJSON(message.resource);
    }
    return obj;
  },

  create(base?: DeepPartial<NotificationMessage>): NotificationMessage {
    return NotificationMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NotificationMessage>): NotificationMessage {
    const message = createBaseNotificationMessage();
    message.notificationConfigName = object.notificationConfigName ?? "";
    message.finding = (object.finding !== undefined && object.finding !== null)
      ? Finding.fromPartial(object.finding)
      : undefined;
    message.resource = (object.resource !== undefined && object.resource !== null)
      ? Resource.fromPartial(object.resource)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
