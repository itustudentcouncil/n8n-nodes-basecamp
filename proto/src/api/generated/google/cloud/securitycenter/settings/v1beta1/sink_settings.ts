// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/settings/v1beta1/sink_settings.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.securitycenter.settings.v1beta1";

/** Sink Settings for Security Command Center */
export interface SinkSettings {
  /**
   * The resource name of the project to send logs to. This project must be
   * part of the same organization where the Security Center API is
   * enabled. The format is `projects/{project}`. If it is empty, we do
   * not output logs. If a project ID is provided it will be normalized to a
   * project number.
   */
  loggingSinkProject: string;
}

function createBaseSinkSettings(): SinkSettings {
  return { loggingSinkProject: "" };
}

export const SinkSettings: MessageFns<SinkSettings> = {
  encode(message: SinkSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.loggingSinkProject !== "") {
      writer.uint32(10).string(message.loggingSinkProject);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SinkSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSinkSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.loggingSinkProject = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SinkSettings {
    return { loggingSinkProject: isSet(object.loggingSinkProject) ? globalThis.String(object.loggingSinkProject) : "" };
  },

  toJSON(message: SinkSettings): unknown {
    const obj: any = {};
    if (message.loggingSinkProject !== "") {
      obj.loggingSinkProject = message.loggingSinkProject;
    }
    return obj;
  },

  create(base?: DeepPartial<SinkSettings>): SinkSettings {
    return SinkSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SinkSettings>): SinkSettings {
    const message = createBaseSinkSettings();
    message.loggingSinkProject = object.loggingSinkProject ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
