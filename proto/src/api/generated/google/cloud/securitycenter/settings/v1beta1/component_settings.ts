// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/settings/v1beta1/component_settings.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.securitycenter.settings.v1beta1";

/** Valid states for a component */
export enum ComponentEnablementState {
  /** COMPONENT_ENABLEMENT_STATE_UNSPECIFIED - No state specified, equivalent of INHERIT */
  COMPONENT_ENABLEMENT_STATE_UNSPECIFIED = 0,
  /** DISABLE - Disable the component */
  DISABLE = 1,
  /** ENABLE - Enable the component */
  ENABLE = 2,
  /** INHERIT - Inherit the state from resources parent folder or organization. */
  INHERIT = 3,
  UNRECOGNIZED = -1,
}

export function componentEnablementStateFromJSON(object: any): ComponentEnablementState {
  switch (object) {
    case 0:
    case "COMPONENT_ENABLEMENT_STATE_UNSPECIFIED":
      return ComponentEnablementState.COMPONENT_ENABLEMENT_STATE_UNSPECIFIED;
    case 1:
    case "DISABLE":
      return ComponentEnablementState.DISABLE;
    case 2:
    case "ENABLE":
      return ComponentEnablementState.ENABLE;
    case 3:
    case "INHERIT":
      return ComponentEnablementState.INHERIT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ComponentEnablementState.UNRECOGNIZED;
  }
}

export function componentEnablementStateToJSON(object: ComponentEnablementState): string {
  switch (object) {
    case ComponentEnablementState.COMPONENT_ENABLEMENT_STATE_UNSPECIFIED:
      return "COMPONENT_ENABLEMENT_STATE_UNSPECIFIED";
    case ComponentEnablementState.DISABLE:
      return "DISABLE";
    case ComponentEnablementState.ENABLE:
      return "ENABLE";
    case ComponentEnablementState.INHERIT:
      return "INHERIT";
    case ComponentEnablementState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Component Settings for Security Command Center */
export interface ComponentSettings {
  /**
   * The relative resource name of the component settings.
   * Formats:
   *  * `organizations/{organization}/components/{component}/settings`
   *  * `folders/{folder}/components/{component}/settings`
   *  * `projects/{project}/components/{component}/settings`
   *  * `projects/{project}/locations/{location}/clusters/{cluster}/components/{component}/settings`
   *  * `projects/{project}/regions/{region}/clusters/{cluster}/components/{component}/settings`
   *  * `projects/{project}/zones/{zone}/clusters/{cluster}/components/{component}/settings`
   */
  name: string;
  /**
   * ENABLE to enable component, DISABLE to disable and INHERIT to inherit
   * setting from ancestors.
   */
  state: ComponentEnablementState;
  /**
   * Output only. The service account to be used for security center component.
   * The component must have permission to "act as" the service account.
   */
  projectServiceAccount: string;
  /**
   * Settings for detectors.  Not all detectors must have settings present at
   * each and every level in the hierarchy.  If it is not present the setting
   * will be inherited from its ancestors folders, organizations or the
   * defaults.
   */
  detectorSettings: { [key: string]: ComponentSettings_DetectorSettings };
  /**
   * Output only. An fingerprint used for optimistic concurrency. If none is provided
   * on updates then the existing metadata will be blindly overwritten.
   */
  etag: string;
  /** Output only. The time these settings were last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Container Threate Detection specific settings
   * For component, expect CONTAINER_THREAT_DETECTION
   */
  containerThreatDetectionSettings?:
    | ContainerThreatDetectionSettings
    | undefined;
  /**
   * Event Threat Detection specific settings
   * For component, expect EVENT_THREAT_DETECTION
   */
  eventThreatDetectionSettings?:
    | EventThreatDetectionSettings
    | undefined;
  /**
   * Security Health Analytics specific settings
   * For component, expect SECURITY_HEALTH_ANALYTICS
   */
  securityHealthAnalyticsSettings?:
    | SecurityHealthAnalyticsSettings
    | undefined;
  /**
   * Web Security Scanner specific settings
   * For component, expect WEB_SECURITY_SCANNER
   */
  webSecurityScannerSettings?: WebSecurityScanner | undefined;
}

/** Settings for each detector. */
export interface ComponentSettings_DetectorSettings {
  /**
   * ENABLE to enable component, DISABLE to disable and INHERIT to inherit
   * setting from ancestors.
   */
  state: ComponentEnablementState;
}

export interface ComponentSettings_DetectorSettingsEntry {
  key: string;
  value: ComponentSettings_DetectorSettings | undefined;
}

/** User specified settings for Web Security Scanner */
export interface WebSecurityScanner {
}

/** User specified settings for KTD */
export interface ContainerThreatDetectionSettings {
}

/** User specified settings for ETD */
export interface EventThreatDetectionSettings {
}

/** User specified settings for Security Health Analytics */
export interface SecurityHealthAnalyticsSettings {
  /** Settings for "NON_ORG_IAM_MEMBER" scanner. */
  nonOrgIamMemberSettings:
    | SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings
    | undefined;
  /** Settings for "ADMIN_SERVICE_ACCOUNT" scanner. */
  adminServiceAccountSettings: SecurityHealthAnalyticsSettings_AdminServiceAccountSettings | undefined;
}

/** Settings for "NON_ORG_IAM_MEMBER" scanner. */
export interface SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings {
  /**
   * User emails ending in the provided identities are allowed to have IAM
   * permissions on a project or the organization. Otherwise a finding will
   * be created.
   * A valid identity can be:
   *   *  a domain that starts with "@", e.g. "@yourdomain.com".
   *   *  a fully specified email address that does not start with "@", e.g.
   *   "abc@gmail.com"
   * Regular expressions are not supported.
   * Service accounts are not examined by the scanner and will be omitted if
   * added to the list.
   * If not specified, only Gmail accounts will be considered as non-approved.
   */
  approvedIdentities: string[];
}

/** Settings for "ADMIN_SERVICE_ACCOUNT" scanner. */
export interface SecurityHealthAnalyticsSettings_AdminServiceAccountSettings {
  /**
   * User-created service accounts ending in the provided identities are
   * allowed to have Admin, Owner or Editor roles granted to them. Otherwise
   * a finding will be created.
   * A valid identity can be:
   *   *  a partilly specified service account that starts with "@", e.g.
   *   "@myproject.iam.gserviceaccount.com". This approves all the service
   *   accounts suffixed with the specified identity.
   *   *  a fully specified service account that does not start with "@", e.g.
   *   "myadmin@myproject.iam.gserviceaccount.com".
   * Google-created service accounts are all approved.
   */
  approvedIdentities: string[];
}

function createBaseComponentSettings(): ComponentSettings {
  return {
    name: "",
    state: 0,
    projectServiceAccount: "",
    detectorSettings: {},
    etag: "",
    updateTime: undefined,
    containerThreatDetectionSettings: undefined,
    eventThreatDetectionSettings: undefined,
    securityHealthAnalyticsSettings: undefined,
    webSecurityScannerSettings: undefined,
  };
}

export const ComponentSettings: MessageFns<ComponentSettings> = {
  encode(message: ComponentSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.projectServiceAccount !== "") {
      writer.uint32(26).string(message.projectServiceAccount);
    }
    Object.entries(message.detectorSettings).forEach(([key, value]) => {
      ComponentSettings_DetectorSettingsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.etag !== "") {
      writer.uint32(42).string(message.etag);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    if (message.containerThreatDetectionSettings !== undefined) {
      ContainerThreatDetectionSettings.encode(message.containerThreatDetectionSettings, writer.uint32(330).fork())
        .join();
    }
    if (message.eventThreatDetectionSettings !== undefined) {
      EventThreatDetectionSettings.encode(message.eventThreatDetectionSettings, writer.uint32(338).fork()).join();
    }
    if (message.securityHealthAnalyticsSettings !== undefined) {
      SecurityHealthAnalyticsSettings.encode(message.securityHealthAnalyticsSettings, writer.uint32(354).fork()).join();
    }
    if (message.webSecurityScannerSettings !== undefined) {
      WebSecurityScanner.encode(message.webSecurityScannerSettings, writer.uint32(322).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ComponentSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComponentSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.projectServiceAccount = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = ComponentSettings_DetectorSettingsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.detectorSettings[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 41:
          if (tag !== 330) {
            break;
          }

          message.containerThreatDetectionSettings = ContainerThreatDetectionSettings.decode(reader, reader.uint32());
          continue;
        case 42:
          if (tag !== 338) {
            break;
          }

          message.eventThreatDetectionSettings = EventThreatDetectionSettings.decode(reader, reader.uint32());
          continue;
        case 44:
          if (tag !== 354) {
            break;
          }

          message.securityHealthAnalyticsSettings = SecurityHealthAnalyticsSettings.decode(reader, reader.uint32());
          continue;
        case 40:
          if (tag !== 322) {
            break;
          }

          message.webSecurityScannerSettings = WebSecurityScanner.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ComponentSettings {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      state: isSet(object.state) ? componentEnablementStateFromJSON(object.state) : 0,
      projectServiceAccount: isSet(object.projectServiceAccount) ? globalThis.String(object.projectServiceAccount) : "",
      detectorSettings: isObject(object.detectorSettings)
        ? Object.entries(object.detectorSettings).reduce<{ [key: string]: ComponentSettings_DetectorSettings }>(
          (acc, [key, value]) => {
            acc[key] = ComponentSettings_DetectorSettings.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      containerThreatDetectionSettings: isSet(object.containerThreatDetectionSettings)
        ? ContainerThreatDetectionSettings.fromJSON(object.containerThreatDetectionSettings)
        : undefined,
      eventThreatDetectionSettings: isSet(object.eventThreatDetectionSettings)
        ? EventThreatDetectionSettings.fromJSON(object.eventThreatDetectionSettings)
        : undefined,
      securityHealthAnalyticsSettings: isSet(object.securityHealthAnalyticsSettings)
        ? SecurityHealthAnalyticsSettings.fromJSON(object.securityHealthAnalyticsSettings)
        : undefined,
      webSecurityScannerSettings: isSet(object.webSecurityScannerSettings)
        ? WebSecurityScanner.fromJSON(object.webSecurityScannerSettings)
        : undefined,
    };
  },

  toJSON(message: ComponentSettings): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.state !== 0) {
      obj.state = componentEnablementStateToJSON(message.state);
    }
    if (message.projectServiceAccount !== "") {
      obj.projectServiceAccount = message.projectServiceAccount;
    }
    if (message.detectorSettings) {
      const entries = Object.entries(message.detectorSettings);
      if (entries.length > 0) {
        obj.detectorSettings = {};
        entries.forEach(([k, v]) => {
          obj.detectorSettings[k] = ComponentSettings_DetectorSettings.toJSON(v);
        });
      }
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.containerThreatDetectionSettings !== undefined) {
      obj.containerThreatDetectionSettings = ContainerThreatDetectionSettings.toJSON(
        message.containerThreatDetectionSettings,
      );
    }
    if (message.eventThreatDetectionSettings !== undefined) {
      obj.eventThreatDetectionSettings = EventThreatDetectionSettings.toJSON(message.eventThreatDetectionSettings);
    }
    if (message.securityHealthAnalyticsSettings !== undefined) {
      obj.securityHealthAnalyticsSettings = SecurityHealthAnalyticsSettings.toJSON(
        message.securityHealthAnalyticsSettings,
      );
    }
    if (message.webSecurityScannerSettings !== undefined) {
      obj.webSecurityScannerSettings = WebSecurityScanner.toJSON(message.webSecurityScannerSettings);
    }
    return obj;
  },

  create(base?: DeepPartial<ComponentSettings>): ComponentSettings {
    return ComponentSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ComponentSettings>): ComponentSettings {
    const message = createBaseComponentSettings();
    message.name = object.name ?? "";
    message.state = object.state ?? 0;
    message.projectServiceAccount = object.projectServiceAccount ?? "";
    message.detectorSettings = Object.entries(object.detectorSettings ?? {}).reduce<
      { [key: string]: ComponentSettings_DetectorSettings }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = ComponentSettings_DetectorSettings.fromPartial(value);
      }
      return acc;
    }, {});
    message.etag = object.etag ?? "";
    message.updateTime = object.updateTime ?? undefined;
    message.containerThreatDetectionSettings =
      (object.containerThreatDetectionSettings !== undefined && object.containerThreatDetectionSettings !== null)
        ? ContainerThreatDetectionSettings.fromPartial(object.containerThreatDetectionSettings)
        : undefined;
    message.eventThreatDetectionSettings =
      (object.eventThreatDetectionSettings !== undefined && object.eventThreatDetectionSettings !== null)
        ? EventThreatDetectionSettings.fromPartial(object.eventThreatDetectionSettings)
        : undefined;
    message.securityHealthAnalyticsSettings =
      (object.securityHealthAnalyticsSettings !== undefined && object.securityHealthAnalyticsSettings !== null)
        ? SecurityHealthAnalyticsSettings.fromPartial(object.securityHealthAnalyticsSettings)
        : undefined;
    message.webSecurityScannerSettings =
      (object.webSecurityScannerSettings !== undefined && object.webSecurityScannerSettings !== null)
        ? WebSecurityScanner.fromPartial(object.webSecurityScannerSettings)
        : undefined;
    return message;
  },
};

function createBaseComponentSettings_DetectorSettings(): ComponentSettings_DetectorSettings {
  return { state: 0 };
}

export const ComponentSettings_DetectorSettings: MessageFns<ComponentSettings_DetectorSettings> = {
  encode(message: ComponentSettings_DetectorSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ComponentSettings_DetectorSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComponentSettings_DetectorSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ComponentSettings_DetectorSettings {
    return { state: isSet(object.state) ? componentEnablementStateFromJSON(object.state) : 0 };
  },

  toJSON(message: ComponentSettings_DetectorSettings): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = componentEnablementStateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<ComponentSettings_DetectorSettings>): ComponentSettings_DetectorSettings {
    return ComponentSettings_DetectorSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ComponentSettings_DetectorSettings>): ComponentSettings_DetectorSettings {
    const message = createBaseComponentSettings_DetectorSettings();
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseComponentSettings_DetectorSettingsEntry(): ComponentSettings_DetectorSettingsEntry {
  return { key: "", value: undefined };
}

export const ComponentSettings_DetectorSettingsEntry: MessageFns<ComponentSettings_DetectorSettingsEntry> = {
  encode(message: ComponentSettings_DetectorSettingsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ComponentSettings_DetectorSettings.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ComponentSettings_DetectorSettingsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComponentSettings_DetectorSettingsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = ComponentSettings_DetectorSettings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ComponentSettings_DetectorSettingsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ComponentSettings_DetectorSettings.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ComponentSettings_DetectorSettingsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ComponentSettings_DetectorSettings.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<ComponentSettings_DetectorSettingsEntry>): ComponentSettings_DetectorSettingsEntry {
    return ComponentSettings_DetectorSettingsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ComponentSettings_DetectorSettingsEntry>): ComponentSettings_DetectorSettingsEntry {
    const message = createBaseComponentSettings_DetectorSettingsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ComponentSettings_DetectorSettings.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseWebSecurityScanner(): WebSecurityScanner {
  return {};
}

export const WebSecurityScanner: MessageFns<WebSecurityScanner> = {
  encode(_: WebSecurityScanner, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebSecurityScanner {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebSecurityScanner();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): WebSecurityScanner {
    return {};
  },

  toJSON(_: WebSecurityScanner): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<WebSecurityScanner>): WebSecurityScanner {
    return WebSecurityScanner.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<WebSecurityScanner>): WebSecurityScanner {
    const message = createBaseWebSecurityScanner();
    return message;
  },
};

function createBaseContainerThreatDetectionSettings(): ContainerThreatDetectionSettings {
  return {};
}

export const ContainerThreatDetectionSettings: MessageFns<ContainerThreatDetectionSettings> = {
  encode(_: ContainerThreatDetectionSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContainerThreatDetectionSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContainerThreatDetectionSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ContainerThreatDetectionSettings {
    return {};
  },

  toJSON(_: ContainerThreatDetectionSettings): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ContainerThreatDetectionSettings>): ContainerThreatDetectionSettings {
    return ContainerThreatDetectionSettings.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ContainerThreatDetectionSettings>): ContainerThreatDetectionSettings {
    const message = createBaseContainerThreatDetectionSettings();
    return message;
  },
};

function createBaseEventThreatDetectionSettings(): EventThreatDetectionSettings {
  return {};
}

export const EventThreatDetectionSettings: MessageFns<EventThreatDetectionSettings> = {
  encode(_: EventThreatDetectionSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventThreatDetectionSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventThreatDetectionSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EventThreatDetectionSettings {
    return {};
  },

  toJSON(_: EventThreatDetectionSettings): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<EventThreatDetectionSettings>): EventThreatDetectionSettings {
    return EventThreatDetectionSettings.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<EventThreatDetectionSettings>): EventThreatDetectionSettings {
    const message = createBaseEventThreatDetectionSettings();
    return message;
  },
};

function createBaseSecurityHealthAnalyticsSettings(): SecurityHealthAnalyticsSettings {
  return { nonOrgIamMemberSettings: undefined, adminServiceAccountSettings: undefined };
}

export const SecurityHealthAnalyticsSettings: MessageFns<SecurityHealthAnalyticsSettings> = {
  encode(message: SecurityHealthAnalyticsSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nonOrgIamMemberSettings !== undefined) {
      SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings.encode(
        message.nonOrgIamMemberSettings,
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.adminServiceAccountSettings !== undefined) {
      SecurityHealthAnalyticsSettings_AdminServiceAccountSettings.encode(
        message.adminServiceAccountSettings,
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityHealthAnalyticsSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityHealthAnalyticsSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nonOrgIamMemberSettings = SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.adminServiceAccountSettings = SecurityHealthAnalyticsSettings_AdminServiceAccountSettings.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityHealthAnalyticsSettings {
    return {
      nonOrgIamMemberSettings: isSet(object.nonOrgIamMemberSettings)
        ? SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings.fromJSON(object.nonOrgIamMemberSettings)
        : undefined,
      adminServiceAccountSettings: isSet(object.adminServiceAccountSettings)
        ? SecurityHealthAnalyticsSettings_AdminServiceAccountSettings.fromJSON(object.adminServiceAccountSettings)
        : undefined,
    };
  },

  toJSON(message: SecurityHealthAnalyticsSettings): unknown {
    const obj: any = {};
    if (message.nonOrgIamMemberSettings !== undefined) {
      obj.nonOrgIamMemberSettings = SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings.toJSON(
        message.nonOrgIamMemberSettings,
      );
    }
    if (message.adminServiceAccountSettings !== undefined) {
      obj.adminServiceAccountSettings = SecurityHealthAnalyticsSettings_AdminServiceAccountSettings.toJSON(
        message.adminServiceAccountSettings,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<SecurityHealthAnalyticsSettings>): SecurityHealthAnalyticsSettings {
    return SecurityHealthAnalyticsSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecurityHealthAnalyticsSettings>): SecurityHealthAnalyticsSettings {
    const message = createBaseSecurityHealthAnalyticsSettings();
    message.nonOrgIamMemberSettings =
      (object.nonOrgIamMemberSettings !== undefined && object.nonOrgIamMemberSettings !== null)
        ? SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings.fromPartial(object.nonOrgIamMemberSettings)
        : undefined;
    message.adminServiceAccountSettings =
      (object.adminServiceAccountSettings !== undefined && object.adminServiceAccountSettings !== null)
        ? SecurityHealthAnalyticsSettings_AdminServiceAccountSettings.fromPartial(object.adminServiceAccountSettings)
        : undefined;
    return message;
  },
};

function createBaseSecurityHealthAnalyticsSettings_NonOrgIamMemberSettings(): SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings {
  return { approvedIdentities: [] };
}

export const SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings: MessageFns<
  SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings
> = {
  encode(
    message: SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.approvedIdentities) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityHealthAnalyticsSettings_NonOrgIamMemberSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.approvedIdentities.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings {
    return {
      approvedIdentities: globalThis.Array.isArray(object?.approvedIdentities)
        ? object.approvedIdentities.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings): unknown {
    const obj: any = {};
    if (message.approvedIdentities?.length) {
      obj.approvedIdentities = message.approvedIdentities;
    }
    return obj;
  },

  create(
    base?: DeepPartial<SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings>,
  ): SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings {
    return SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings>,
  ): SecurityHealthAnalyticsSettings_NonOrgIamMemberSettings {
    const message = createBaseSecurityHealthAnalyticsSettings_NonOrgIamMemberSettings();
    message.approvedIdentities = object.approvedIdentities?.map((e) => e) || [];
    return message;
  },
};

function createBaseSecurityHealthAnalyticsSettings_AdminServiceAccountSettings(): SecurityHealthAnalyticsSettings_AdminServiceAccountSettings {
  return { approvedIdentities: [] };
}

export const SecurityHealthAnalyticsSettings_AdminServiceAccountSettings: MessageFns<
  SecurityHealthAnalyticsSettings_AdminServiceAccountSettings
> = {
  encode(
    message: SecurityHealthAnalyticsSettings_AdminServiceAccountSettings,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.approvedIdentities) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): SecurityHealthAnalyticsSettings_AdminServiceAccountSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityHealthAnalyticsSettings_AdminServiceAccountSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.approvedIdentities.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityHealthAnalyticsSettings_AdminServiceAccountSettings {
    return {
      approvedIdentities: globalThis.Array.isArray(object?.approvedIdentities)
        ? object.approvedIdentities.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SecurityHealthAnalyticsSettings_AdminServiceAccountSettings): unknown {
    const obj: any = {};
    if (message.approvedIdentities?.length) {
      obj.approvedIdentities = message.approvedIdentities;
    }
    return obj;
  },

  create(
    base?: DeepPartial<SecurityHealthAnalyticsSettings_AdminServiceAccountSettings>,
  ): SecurityHealthAnalyticsSettings_AdminServiceAccountSettings {
    return SecurityHealthAnalyticsSettings_AdminServiceAccountSettings.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SecurityHealthAnalyticsSettings_AdminServiceAccountSettings>,
  ): SecurityHealthAnalyticsSettings_AdminServiceAccountSettings {
    const message = createBaseSecurityHealthAnalyticsSettings_AdminServiceAccountSettings();
    message.approvedIdentities = object.approvedIdentities?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
