// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/settings/v1beta1/detector.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { BillingTier, billingTierFromJSON, billingTierToJSON } from "./billing_settings.js";

export const protobufPackage = "google.cloud.securitycenter.settings.v1beta1";

/**
 * Detector is a set of detectors or scanners act as individual checks done
 * within a component e.g. bad IP, bad domains, IAM anomaly, cryptomining, open
 * firewall, etc. Detector is independent of Organization, meaning each detector
 * must be defined for a given Security Center component under a specified
 * billing tier. Organizations can configure the list of detectors based on
 * their subscribed billing tier.
 *
 * Defines a detector, its billing tier and any applicable labels.
 */
export interface Detector {
  /** Output only. Detector Identifier */
  detector: string;
  /**
   * Output only. Component that supports detector type.  Multiple components may support the
   * same detector.
   */
  component: string;
  /**
   * Output only. The billing tier may be different for a detector of the same name in
   * another component.
   */
  billingTier: BillingTier;
  /**
   * Output only. Google curated detector labels. These are alphanumeric tags that are not
   * necessarily human readable. Labels can be used to group detectors together
   * in the future. An example might be tagging all detectors “PCI” that help
   * with PCI compliance.
   */
  detectorLabels: string[];
}

function createBaseDetector(): Detector {
  return { detector: "", component: "", billingTier: 0, detectorLabels: [] };
}

export const Detector: MessageFns<Detector> = {
  encode(message: Detector, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.detector !== "") {
      writer.uint32(10).string(message.detector);
    }
    if (message.component !== "") {
      writer.uint32(18).string(message.component);
    }
    if (message.billingTier !== 0) {
      writer.uint32(24).int32(message.billingTier);
    }
    for (const v of message.detectorLabels) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Detector {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetector();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.detector = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.component = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.billingTier = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.detectorLabels.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Detector {
    return {
      detector: isSet(object.detector) ? globalThis.String(object.detector) : "",
      component: isSet(object.component) ? globalThis.String(object.component) : "",
      billingTier: isSet(object.billingTier) ? billingTierFromJSON(object.billingTier) : 0,
      detectorLabels: globalThis.Array.isArray(object?.detectorLabels)
        ? object.detectorLabels.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Detector): unknown {
    const obj: any = {};
    if (message.detector !== "") {
      obj.detector = message.detector;
    }
    if (message.component !== "") {
      obj.component = message.component;
    }
    if (message.billingTier !== 0) {
      obj.billingTier = billingTierToJSON(message.billingTier);
    }
    if (message.detectorLabels?.length) {
      obj.detectorLabels = message.detectorLabels;
    }
    return obj;
  },

  create(base?: DeepPartial<Detector>): Detector {
    return Detector.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Detector>): Detector {
    const message = createBaseDetector();
    message.detector = object.detector ?? "";
    message.component = object.component ?? "";
    message.billingTier = object.billingTier ?? 0;
    message.detectorLabels = object.detectorLabels?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
