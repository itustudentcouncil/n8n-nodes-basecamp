// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v1beta1/asset.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Value } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { SecurityMarks } from "./security_marks.js";

export const protobufPackage = "google.cloud.securitycenter.v1beta1";

/**
 * Security Command Center representation of a Google Cloud
 * resource.
 *
 * The Asset is a Security Command Center resource that captures information
 * about a single Google Cloud resource. All modifications to an Asset are only
 * within the context of Security Command Center and don't affect the referenced
 * Google Cloud resource.
 */
export interface Asset {
  /**
   * The relative resource name of this asset. See:
   * https://cloud.google.com/apis/design/resource_names#relative_resource_name
   * Example:
   * "organizations/{organization_id}/assets/{asset_id}".
   */
  name: string;
  /**
   * Security Command Center managed properties. These properties are managed by
   * Security Command Center and cannot be modified by the user.
   */
  securityCenterProperties:
    | Asset_SecurityCenterProperties
    | undefined;
  /**
   * Resource managed properties. These properties are managed and defined by
   * the Google Cloud resource and cannot be modified by the user.
   */
  resourceProperties: { [key: string]: any | undefined };
  /**
   * User specified security marks. These marks are entirely managed by the user
   * and come from the SecurityMarks resource that belongs to the asset.
   */
  securityMarks:
    | SecurityMarks
    | undefined;
  /** The time at which the asset was created in Security Command Center. */
  createTime:
    | Date
    | undefined;
  /**
   * The time at which the asset was last updated, added, or deleted in Security
   * Command Center.
   */
  updateTime: Date | undefined;
}

/**
 * Security Command Center managed properties. These properties are managed by
 * Security Command Center and cannot be modified by the user.
 */
export interface Asset_SecurityCenterProperties {
  /**
   * Immutable. The full resource name of the Google Cloud resource this asset
   * represents. This field is immutable after create time. See:
   * https://cloud.google.com/apis/design/resource_names#full_resource_name
   */
  resourceName: string;
  /**
   * The type of the Google Cloud resource. Examples include: APPLICATION,
   * PROJECT, and ORGANIZATION. This is a case insensitive field defined by
   * Security Command Center and/or the producer of the resource and is
   * immutable after create time.
   */
  resourceType: string;
  /**
   * The full resource name of the immediate parent of the resource. See:
   * https://cloud.google.com/apis/design/resource_names#full_resource_name
   */
  resourceParent: string;
  /**
   * The full resource name of the project the resource belongs to. See:
   * https://cloud.google.com/apis/design/resource_names#full_resource_name
   */
  resourceProject: string;
  /** Owners of the Google Cloud resource. */
  resourceOwners: string[];
}

export interface Asset_ResourcePropertiesEntry {
  key: string;
  value: any | undefined;
}

function createBaseAsset(): Asset {
  return {
    name: "",
    securityCenterProperties: undefined,
    resourceProperties: {},
    securityMarks: undefined,
    createTime: undefined,
    updateTime: undefined,
  };
}

export const Asset: MessageFns<Asset> = {
  encode(message: Asset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.securityCenterProperties !== undefined) {
      Asset_SecurityCenterProperties.encode(message.securityCenterProperties, writer.uint32(18).fork()).join();
    }
    Object.entries(message.resourceProperties).forEach(([key, value]) => {
      if (value !== undefined) {
        Asset_ResourcePropertiesEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
      }
    });
    if (message.securityMarks !== undefined) {
      SecurityMarks.encode(message.securityMarks, writer.uint32(66).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(74).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Asset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.securityCenterProperties = Asset_SecurityCenterProperties.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = Asset_ResourcePropertiesEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.resourceProperties[entry7.key] = entry7.value;
          }
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.securityMarks = SecurityMarks.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Asset {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      securityCenterProperties: isSet(object.securityCenterProperties)
        ? Asset_SecurityCenterProperties.fromJSON(object.securityCenterProperties)
        : undefined,
      resourceProperties: isObject(object.resourceProperties)
        ? Object.entries(object.resourceProperties).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
      securityMarks: isSet(object.securityMarks) ? SecurityMarks.fromJSON(object.securityMarks) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: Asset): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.securityCenterProperties !== undefined) {
      obj.securityCenterProperties = Asset_SecurityCenterProperties.toJSON(message.securityCenterProperties);
    }
    if (message.resourceProperties) {
      const entries = Object.entries(message.resourceProperties);
      if (entries.length > 0) {
        obj.resourceProperties = {};
        entries.forEach(([k, v]) => {
          obj.resourceProperties[k] = v;
        });
      }
    }
    if (message.securityMarks !== undefined) {
      obj.securityMarks = SecurityMarks.toJSON(message.securityMarks);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Asset>): Asset {
    return Asset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Asset>): Asset {
    const message = createBaseAsset();
    message.name = object.name ?? "";
    message.securityCenterProperties =
      (object.securityCenterProperties !== undefined && object.securityCenterProperties !== null)
        ? Asset_SecurityCenterProperties.fromPartial(object.securityCenterProperties)
        : undefined;
    message.resourceProperties = Object.entries(object.resourceProperties ?? {}).reduce<
      { [key: string]: any | undefined }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = value;
      }
      return acc;
    }, {});
    message.securityMarks = (object.securityMarks !== undefined && object.securityMarks !== null)
      ? SecurityMarks.fromPartial(object.securityMarks)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseAsset_SecurityCenterProperties(): Asset_SecurityCenterProperties {
  return { resourceName: "", resourceType: "", resourceParent: "", resourceProject: "", resourceOwners: [] };
}

export const Asset_SecurityCenterProperties: MessageFns<Asset_SecurityCenterProperties> = {
  encode(message: Asset_SecurityCenterProperties, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.resourceType !== "") {
      writer.uint32(18).string(message.resourceType);
    }
    if (message.resourceParent !== "") {
      writer.uint32(26).string(message.resourceParent);
    }
    if (message.resourceProject !== "") {
      writer.uint32(34).string(message.resourceProject);
    }
    for (const v of message.resourceOwners) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Asset_SecurityCenterProperties {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAsset_SecurityCenterProperties();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resourceType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resourceParent = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.resourceProject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.resourceOwners.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Asset_SecurityCenterProperties {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      resourceType: isSet(object.resourceType) ? globalThis.String(object.resourceType) : "",
      resourceParent: isSet(object.resourceParent) ? globalThis.String(object.resourceParent) : "",
      resourceProject: isSet(object.resourceProject) ? globalThis.String(object.resourceProject) : "",
      resourceOwners: globalThis.Array.isArray(object?.resourceOwners)
        ? object.resourceOwners.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Asset_SecurityCenterProperties): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.resourceType !== "") {
      obj.resourceType = message.resourceType;
    }
    if (message.resourceParent !== "") {
      obj.resourceParent = message.resourceParent;
    }
    if (message.resourceProject !== "") {
      obj.resourceProject = message.resourceProject;
    }
    if (message.resourceOwners?.length) {
      obj.resourceOwners = message.resourceOwners;
    }
    return obj;
  },

  create(base?: DeepPartial<Asset_SecurityCenterProperties>): Asset_SecurityCenterProperties {
    return Asset_SecurityCenterProperties.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Asset_SecurityCenterProperties>): Asset_SecurityCenterProperties {
    const message = createBaseAsset_SecurityCenterProperties();
    message.resourceName = object.resourceName ?? "";
    message.resourceType = object.resourceType ?? "";
    message.resourceParent = object.resourceParent ?? "";
    message.resourceProject = object.resourceProject ?? "";
    message.resourceOwners = object.resourceOwners?.map((e) => e) || [];
    return message;
  },
};

function createBaseAsset_ResourcePropertiesEntry(): Asset_ResourcePropertiesEntry {
  return { key: "", value: undefined };
}

export const Asset_ResourcePropertiesEntry: MessageFns<Asset_ResourcePropertiesEntry> = {
  encode(message: Asset_ResourcePropertiesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Asset_ResourcePropertiesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAsset_ResourcePropertiesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Asset_ResourcePropertiesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: Asset_ResourcePropertiesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Asset_ResourcePropertiesEntry>): Asset_ResourcePropertiesEntry {
    return Asset_ResourcePropertiesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Asset_ResourcePropertiesEntry>): Asset_ResourcePropertiesEntry {
    const message = createBaseAsset_ResourcePropertiesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
