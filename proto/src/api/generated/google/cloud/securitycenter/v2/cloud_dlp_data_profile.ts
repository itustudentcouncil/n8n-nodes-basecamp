// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v2/cloud_dlp_data_profile.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.securitycenter.v2";

/**
 * The [data profile](https://cloud.google.com/dlp/docs/data-profiles)
 * associated with the finding.
 */
export interface CloudDlpDataProfile {
  /**
   * Name of the data profile, for example,
   * `projects/123/locations/europe/tableProfiles/8383929`.
   */
  dataProfile: string;
  /** The resource hierarchy level at which the data profile was generated. */
  parentType: CloudDlpDataProfile_ParentType;
}

/** Parents for configurations that produce data profile findings. */
export enum CloudDlpDataProfile_ParentType {
  /** PARENT_TYPE_UNSPECIFIED - Unspecified parent type. */
  PARENT_TYPE_UNSPECIFIED = 0,
  /** ORGANIZATION - Organization-level configurations. */
  ORGANIZATION = 1,
  /** PROJECT - Project-level configurations. */
  PROJECT = 2,
  UNRECOGNIZED = -1,
}

export function cloudDlpDataProfile_ParentTypeFromJSON(object: any): CloudDlpDataProfile_ParentType {
  switch (object) {
    case 0:
    case "PARENT_TYPE_UNSPECIFIED":
      return CloudDlpDataProfile_ParentType.PARENT_TYPE_UNSPECIFIED;
    case 1:
    case "ORGANIZATION":
      return CloudDlpDataProfile_ParentType.ORGANIZATION;
    case 2:
    case "PROJECT":
      return CloudDlpDataProfile_ParentType.PROJECT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CloudDlpDataProfile_ParentType.UNRECOGNIZED;
  }
}

export function cloudDlpDataProfile_ParentTypeToJSON(object: CloudDlpDataProfile_ParentType): string {
  switch (object) {
    case CloudDlpDataProfile_ParentType.PARENT_TYPE_UNSPECIFIED:
      return "PARENT_TYPE_UNSPECIFIED";
    case CloudDlpDataProfile_ParentType.ORGANIZATION:
      return "ORGANIZATION";
    case CloudDlpDataProfile_ParentType.PROJECT:
      return "PROJECT";
    case CloudDlpDataProfile_ParentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCloudDlpDataProfile(): CloudDlpDataProfile {
  return { dataProfile: "", parentType: 0 };
}

export const CloudDlpDataProfile: MessageFns<CloudDlpDataProfile> = {
  encode(message: CloudDlpDataProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataProfile !== "") {
      writer.uint32(10).string(message.dataProfile);
    }
    if (message.parentType !== 0) {
      writer.uint32(16).int32(message.parentType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloudDlpDataProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloudDlpDataProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataProfile = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.parentType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloudDlpDataProfile {
    return {
      dataProfile: isSet(object.dataProfile) ? globalThis.String(object.dataProfile) : "",
      parentType: isSet(object.parentType) ? cloudDlpDataProfile_ParentTypeFromJSON(object.parentType) : 0,
    };
  },

  toJSON(message: CloudDlpDataProfile): unknown {
    const obj: any = {};
    if (message.dataProfile !== "") {
      obj.dataProfile = message.dataProfile;
    }
    if (message.parentType !== 0) {
      obj.parentType = cloudDlpDataProfile_ParentTypeToJSON(message.parentType);
    }
    return obj;
  },

  create(base?: DeepPartial<CloudDlpDataProfile>): CloudDlpDataProfile {
    return CloudDlpDataProfile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CloudDlpDataProfile>): CloudDlpDataProfile {
    const message = createBaseCloudDlpDataProfile();
    message.dataProfile = object.dataProfile ?? "";
    message.parentType = object.parentType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
