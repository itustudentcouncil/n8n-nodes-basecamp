// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v2/notebook.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.securitycenter.v2";

/**
 * Represents a Jupyter notebook IPYNB file, such as a [Colab Enterprise
 * notebook](https://cloud.google.com/colab/docs/introduction) file, that is
 * associated with a finding.
 */
export interface Notebook {
  /** The name of the notebook. */
  name: string;
  /** The source notebook service, for example, "Colab Enterprise". */
  service: string;
  /** The user ID of the latest author to modify the notebook. */
  lastAuthor: string;
  /** The most recent time the notebook was updated. */
  notebookUpdateTime: Date | undefined;
}

function createBaseNotebook(): Notebook {
  return { name: "", service: "", lastAuthor: "", notebookUpdateTime: undefined };
}

export const Notebook: MessageFns<Notebook> = {
  encode(message: Notebook, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.service !== "") {
      writer.uint32(18).string(message.service);
    }
    if (message.lastAuthor !== "") {
      writer.uint32(26).string(message.lastAuthor);
    }
    if (message.notebookUpdateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.notebookUpdateTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Notebook {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotebook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.service = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.lastAuthor = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.notebookUpdateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Notebook {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      service: isSet(object.service) ? globalThis.String(object.service) : "",
      lastAuthor: isSet(object.lastAuthor) ? globalThis.String(object.lastAuthor) : "",
      notebookUpdateTime: isSet(object.notebookUpdateTime) ? fromJsonTimestamp(object.notebookUpdateTime) : undefined,
    };
  },

  toJSON(message: Notebook): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.service !== "") {
      obj.service = message.service;
    }
    if (message.lastAuthor !== "") {
      obj.lastAuthor = message.lastAuthor;
    }
    if (message.notebookUpdateTime !== undefined) {
      obj.notebookUpdateTime = message.notebookUpdateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Notebook>): Notebook {
    return Notebook.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Notebook>): Notebook {
    const message = createBaseNotebook();
    message.name = object.name ?? "";
    message.service = object.service ?? "";
    message.lastAuthor = object.lastAuthor ?? "";
    message.notebookUpdateTime = object.notebookUpdateTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
