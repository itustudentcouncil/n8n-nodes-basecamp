// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v2/attack_exposure.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.securitycenter.v2";

/** An attack exposure contains the results of an attack path simulation run. */
export interface AttackExposure {
  /**
   * A number between 0 (inclusive) and infinity that represents how important
   * this finding is to remediate. The higher the score, the more important it
   * is to remediate.
   */
  score: number;
  /** The most recent time the attack exposure was updated on this finding. */
  latestCalculationTime:
    | Date
    | undefined;
  /**
   * The resource name of the attack path simulation result that contains the
   * details regarding this attack exposure score.
   * Example: `organizations/123/simulations/456/attackExposureResults/789`
   */
  attackExposureResult: string;
  /**
   * Output only. What state this AttackExposure is in. This captures whether or
   * not an attack exposure has been calculated or not.
   */
  state: AttackExposure_State;
  /**
   * The number of high value resources that are exposed as a result of this
   * finding.
   */
  exposedHighValueResourcesCount: number;
  /**
   * The number of medium value resources that are exposed as a result of this
   * finding.
   */
  exposedMediumValueResourcesCount: number;
  /**
   * The number of high value resources that are exposed as a result of this
   * finding.
   */
  exposedLowValueResourcesCount: number;
}

/** This enum defines the various states an AttackExposure can be in. */
export enum AttackExposure_State {
  /** STATE_UNSPECIFIED - The state is not specified. */
  STATE_UNSPECIFIED = 0,
  /** CALCULATED - The attack exposure has been calculated. */
  CALCULATED = 1,
  /** NOT_CALCULATED - The attack exposure has not been calculated. */
  NOT_CALCULATED = 2,
  UNRECOGNIZED = -1,
}

export function attackExposure_StateFromJSON(object: any): AttackExposure_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return AttackExposure_State.STATE_UNSPECIFIED;
    case 1:
    case "CALCULATED":
      return AttackExposure_State.CALCULATED;
    case 2:
    case "NOT_CALCULATED":
      return AttackExposure_State.NOT_CALCULATED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AttackExposure_State.UNRECOGNIZED;
  }
}

export function attackExposure_StateToJSON(object: AttackExposure_State): string {
  switch (object) {
    case AttackExposure_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case AttackExposure_State.CALCULATED:
      return "CALCULATED";
    case AttackExposure_State.NOT_CALCULATED:
      return "NOT_CALCULATED";
    case AttackExposure_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAttackExposure(): AttackExposure {
  return {
    score: 0,
    latestCalculationTime: undefined,
    attackExposureResult: "",
    state: 0,
    exposedHighValueResourcesCount: 0,
    exposedMediumValueResourcesCount: 0,
    exposedLowValueResourcesCount: 0,
  };
}

export const AttackExposure: MessageFns<AttackExposure> = {
  encode(message: AttackExposure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.score !== 0) {
      writer.uint32(9).double(message.score);
    }
    if (message.latestCalculationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.latestCalculationTime), writer.uint32(18).fork()).join();
    }
    if (message.attackExposureResult !== "") {
      writer.uint32(26).string(message.attackExposureResult);
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.exposedHighValueResourcesCount !== 0) {
      writer.uint32(40).int32(message.exposedHighValueResourcesCount);
    }
    if (message.exposedMediumValueResourcesCount !== 0) {
      writer.uint32(48).int32(message.exposedMediumValueResourcesCount);
    }
    if (message.exposedLowValueResourcesCount !== 0) {
      writer.uint32(56).int32(message.exposedLowValueResourcesCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttackExposure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttackExposure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.score = reader.double();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.latestCalculationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.attackExposureResult = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.exposedHighValueResourcesCount = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.exposedMediumValueResourcesCount = reader.int32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.exposedLowValueResourcesCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttackExposure {
    return {
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      latestCalculationTime: isSet(object.latestCalculationTime)
        ? fromJsonTimestamp(object.latestCalculationTime)
        : undefined,
      attackExposureResult: isSet(object.attackExposureResult) ? globalThis.String(object.attackExposureResult) : "",
      state: isSet(object.state) ? attackExposure_StateFromJSON(object.state) : 0,
      exposedHighValueResourcesCount: isSet(object.exposedHighValueResourcesCount)
        ? globalThis.Number(object.exposedHighValueResourcesCount)
        : 0,
      exposedMediumValueResourcesCount: isSet(object.exposedMediumValueResourcesCount)
        ? globalThis.Number(object.exposedMediumValueResourcesCount)
        : 0,
      exposedLowValueResourcesCount: isSet(object.exposedLowValueResourcesCount)
        ? globalThis.Number(object.exposedLowValueResourcesCount)
        : 0,
    };
  },

  toJSON(message: AttackExposure): unknown {
    const obj: any = {};
    if (message.score !== 0) {
      obj.score = message.score;
    }
    if (message.latestCalculationTime !== undefined) {
      obj.latestCalculationTime = message.latestCalculationTime.toISOString();
    }
    if (message.attackExposureResult !== "") {
      obj.attackExposureResult = message.attackExposureResult;
    }
    if (message.state !== 0) {
      obj.state = attackExposure_StateToJSON(message.state);
    }
    if (message.exposedHighValueResourcesCount !== 0) {
      obj.exposedHighValueResourcesCount = Math.round(message.exposedHighValueResourcesCount);
    }
    if (message.exposedMediumValueResourcesCount !== 0) {
      obj.exposedMediumValueResourcesCount = Math.round(message.exposedMediumValueResourcesCount);
    }
    if (message.exposedLowValueResourcesCount !== 0) {
      obj.exposedLowValueResourcesCount = Math.round(message.exposedLowValueResourcesCount);
    }
    return obj;
  },

  create(base?: DeepPartial<AttackExposure>): AttackExposure {
    return AttackExposure.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttackExposure>): AttackExposure {
    const message = createBaseAttackExposure();
    message.score = object.score ?? 0;
    message.latestCalculationTime = object.latestCalculationTime ?? undefined;
    message.attackExposureResult = object.attackExposureResult ?? "";
    message.state = object.state ?? 0;
    message.exposedHighValueResourcesCount = object.exposedHighValueResourcesCount ?? 0;
    message.exposedMediumValueResourcesCount = object.exposedMediumValueResourcesCount ?? 0;
    message.exposedLowValueResourcesCount = object.exposedLowValueResourcesCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
