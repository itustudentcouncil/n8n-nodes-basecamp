// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v2/securitycenter_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Value } from "../../../protobuf/struct.js";
import { AttackPath } from "./attack_path.js";
import { BigQueryExport } from "./bigquery_export.js";
import { ExternalSystem } from "./external_system.js";
import {
  Finding,
  Finding_Mute,
  finding_MuteFromJSON,
  finding_MuteToJSON,
  Finding_State,
  finding_StateFromJSON,
  finding_StateToJSON,
} from "./finding.js";
import { MuteConfig } from "./mute_config.js";
import { NotificationConfig } from "./notification_config.js";
import {
  AwsMetadata,
  AzureMetadata,
  CloudProvider,
  cloudProviderFromJSON,
  cloudProviderToJSON,
  GcpMetadata,
  ResourcePath,
} from "./resource.js";
import { ResourceValueConfig } from "./resource_value_config.js";
import { SecurityMarks } from "./security_marks.js";
import { Simulation } from "./simulation.js";
import { Source } from "./source.js";
import { ValuedResource } from "./valued_resource.js";

export const protobufPackage = "google.cloud.securitycenter.v2";

/** Request message to create multiple resource value configs */
export interface BatchCreateResourceValueConfigsRequest {
  /**
   * Required. Resource name of the new ResourceValueConfig's parent.
   * The parent field in the CreateResourceValueConfigRequest
   * messages must either be empty or match this field.
   */
  parent: string;
  /** Required. The resource value configs to be created. */
  requests: CreateResourceValueConfigRequest[];
}

/** Response message for BatchCreateResourceValueConfigs */
export interface BatchCreateResourceValueConfigsResponse {
  /** The resource value configs created */
  resourceValueConfigs: ResourceValueConfig[];
}

/**
 * Request message for bulk findings update.
 *
 * Note:
 * 1. If multiple bulk update requests match the same resource, the order in
 * which they get executed is not defined.
 * 2. Once a bulk operation is started, there is no way to stop it.
 */
export interface BulkMuteFindingsRequest {
  /**
   * Required. The parent, at which bulk action needs to be applied. If no
   * location is specified, findings are updated in global. The following list
   * shows some examples:
   *
   * + `organizations/[organization_id]`
   * + `organizations/[organization_id]/locations/[location_id]`
   * + `folders/[folder_id]`
   * + `folders/[folder_id]/locations/[location_id]`
   * + `projects/[project_id]`
   * + `projects/[project_id]/locations/[location_id]`
   */
  parent: string;
  /**
   * Expression that identifies findings that should be updated.
   * The expression is a list of zero or more restrictions combined
   * via logical operators `AND` and `OR`. Parentheses are supported, and `OR`
   * has higher precedence than `AND`.
   *
   * Restrictions have the form `<field> <operator> <value>` and may have a
   * `-` character in front of them to indicate negation. The fields map to
   * those defined in the corresponding resource.
   *
   * The supported operators are:
   *
   * * `=` for all value types.
   * * `>`, `<`, `>=`, `<=` for integer values.
   * * `:`, meaning substring matching, for strings.
   *
   * The supported value types are:
   *
   * * string literals in quotes.
   * * integer literals without quotes.
   * * boolean literals `true` and `false` without quotes.
   */
  filter: string;
  /**
   * Optional. All findings matching the given filter will have their mute state
   * set to this value. The default value is `MUTED`. Setting this to
   * `UNDEFINED` will clear the mute state on all matching findings.
   */
  muteState: BulkMuteFindingsRequest_MuteState;
}

/** The mute state. */
export enum BulkMuteFindingsRequest_MuteState {
  /** MUTE_STATE_UNSPECIFIED - Unused. */
  MUTE_STATE_UNSPECIFIED = 0,
  /** MUTED - Matching findings will be muted (default). */
  MUTED = 1,
  /** UNDEFINED - Matching findings will have their mute state cleared. */
  UNDEFINED = 2,
  UNRECOGNIZED = -1,
}

export function bulkMuteFindingsRequest_MuteStateFromJSON(object: any): BulkMuteFindingsRequest_MuteState {
  switch (object) {
    case 0:
    case "MUTE_STATE_UNSPECIFIED":
      return BulkMuteFindingsRequest_MuteState.MUTE_STATE_UNSPECIFIED;
    case 1:
    case "MUTED":
      return BulkMuteFindingsRequest_MuteState.MUTED;
    case 2:
    case "UNDEFINED":
      return BulkMuteFindingsRequest_MuteState.UNDEFINED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BulkMuteFindingsRequest_MuteState.UNRECOGNIZED;
  }
}

export function bulkMuteFindingsRequest_MuteStateToJSON(object: BulkMuteFindingsRequest_MuteState): string {
  switch (object) {
    case BulkMuteFindingsRequest_MuteState.MUTE_STATE_UNSPECIFIED:
      return "MUTE_STATE_UNSPECIFIED";
    case BulkMuteFindingsRequest_MuteState.MUTED:
      return "MUTED";
    case BulkMuteFindingsRequest_MuteState.UNDEFINED:
      return "UNDEFINED";
    case BulkMuteFindingsRequest_MuteState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The response to a BulkMute request. Contains the LRO information. */
export interface BulkMuteFindingsResponse {
}

/** Request message for creating a BigQuery export. */
export interface CreateBigQueryExportRequest {
  /**
   * Required. The name of the parent resource of the new BigQuery export. Its
   * format is `organizations/[organization_id]/locations/[location_id]`,
   * `folders/[folder_id]/locations/[location_id]`, or
   * `projects/[project_id]/locations/[location_id]`.
   */
  parent: string;
  /** Required. The BigQuery export being created. */
  bigQueryExport:
    | BigQueryExport
    | undefined;
  /**
   * Required. Unique identifier provided by the client within the parent scope.
   * It must consist of only lowercase letters, numbers, and hyphens, must start
   * with a letter, must end with either a letter or a number, and must be 63
   * characters or less.
   */
  bigQueryExportId: string;
}

/** Request message for creating a finding. */
export interface CreateFindingRequest {
  /**
   * Required. Resource name of the new finding's parent. The following list
   * shows some examples of the format:
   * +
   * `organizations/[organization_id]/sources/[source_id]`
   * +
   * `organizations/[organization_id]/sources/[source_id]/locations/[location_id]`
   */
  parent: string;
  /**
   * Required. Unique identifier provided by the client within the parent scope.
   * It must be alphanumeric and less than or equal to 32 characters and
   * greater than 0 characters in length.
   */
  findingId: string;
  /**
   * Required. The Finding being created. The name and security_marks will be
   * ignored as they are both output only fields on this resource.
   */
  finding: Finding | undefined;
}

/** Request message for creating a mute config. */
export interface CreateMuteConfigRequest {
  /**
   * Required. Resource name of the new mute configs's parent. Its format is
   * `organizations/[organization_id]/locations/[location_id]`,
   * `folders/[folder_id]/locations/[location_id]`, or
   * `projects/[project_id]/locations/[location_id]`.
   */
  parent: string;
  /** Required. The mute config being created. */
  muteConfig:
    | MuteConfig
    | undefined;
  /**
   * Required. Unique identifier provided by the client within the parent scope.
   * It must consist of only lowercase letters, numbers, and hyphens, must start
   * with a letter, must end with either a letter or a number, and must be 63
   * characters or less.
   */
  muteConfigId: string;
}

/** Request message for creating a notification config. */
export interface CreateNotificationConfigRequest {
  /**
   * Required. Resource name of the new notification config's parent. Its format
   * is `organizations/[organization_id]/locations/[location_id]`,
   * `folders/[folder_id]/locations/[location_id]`, or
   * `projects/[project_id]/locations/[location_id]`.
   */
  parent: string;
  /**
   * Required.
   * Unique identifier provided by the client within the parent scope.
   * It must be between 1 and 128 characters and contain alphanumeric
   * characters, underscores, or hyphens only.
   */
  configId: string;
  /**
   * Required. The notification config being created. The name and the service
   * account will be ignored as they are both output only fields on this
   * resource.
   */
  notificationConfig: NotificationConfig | undefined;
}

/** Request message to create single resource value config */
export interface CreateResourceValueConfigRequest {
  /** Required. Resource name of the new ResourceValueConfig's parent. */
  parent: string;
  /** Required. The resource value config being created. */
  resourceValueConfig: ResourceValueConfig | undefined;
}

/** Request message for creating a source. */
export interface CreateSourceRequest {
  /**
   * Required. Resource name of the new source's parent. Its format should be
   * `organizations/[organization_id]`.
   */
  parent: string;
  /**
   * Required. The Source being created, only the display_name and description
   * will be used. All other fields will be ignored.
   */
  source: Source | undefined;
}

/** Request message for deleting a BigQuery export. */
export interface DeleteBigQueryExportRequest {
  /**
   * Required. The name of the BigQuery export to delete. The following list
   * shows some examples of the format:
   *
   * +
   * `organizations/{organization}/locations/{location}/bigQueryExports/{export_id}`
   * + `folders/{folder}/locations/{location}/bigQueryExports/{export_id}`
   * + `projects/{project}/locations/{location}/bigQueryExports/{export_id}`
   */
  name: string;
}

/**
 * Request message for deleting a mute config. If no location is specified,
 * default is global.
 */
export interface DeleteMuteConfigRequest {
  /**
   * Required. Name of the mute config to delete. The following list shows some
   * examples of the format:
   *
   * + `organizations/{organization}/muteConfigs/{config_id}`
   * +
   * `organizations/{organization}/locations/{location}/muteConfigs/{config_id}`
   * + `folders/{folder}/muteConfigs/{config_id}`
   * + `folders/{folder}/locations/{location}/muteConfigs/{config_id}`
   * + `projects/{project}/muteConfigs/{config_id}`
   * + `projects/{project}/locations/{location}/muteConfigs/{config_id}`
   */
  name: string;
}

/** Request message for deleting a notification config. */
export interface DeleteNotificationConfigRequest {
  /**
   * Required. Name of the notification config to delete. The following list
   * shows some examples of the format:
   *
   * +
   * `organizations/[organization_id]/locations/[location_id]/notificationConfigs/[config_id]`
   * +
   * `folders/[folder_id]/locations/[location_id]notificationConfigs/[config_id]`
   * +
   * `projects/[project_id]/locations/[location_id]notificationConfigs/[config_id]`
   */
  name: string;
}

/** Request message to delete resource value config */
export interface DeleteResourceValueConfigRequest {
  /** Required. Name of the ResourceValueConfig to delete */
  name: string;
}

/** Request message for retrieving a BigQuery export. */
export interface GetBigQueryExportRequest {
  /**
   * Required. Name of the BigQuery export to retrieve. The following list shows
   * some examples of the format:
   *
   * +
   * `organizations/{organization}/locations/{location}/bigQueryExports/{export_id}`
   * + `folders/{folder}/locations/{location}/bigQueryExports/{export_id}`
   * + `projects/{project}locations/{location}//bigQueryExports/{export_id}`
   */
  name: string;
}

/**
 * Request message for retrieving a mute config. If no location is specified,
 * default is global.
 */
export interface GetMuteConfigRequest {
  /**
   * Required. Name of the mute config to retrieve. The following list shows
   * some examples of the format:
   *
   * + `organizations/{organization}/muteConfigs/{config_id}`
   * +
   * `organizations/{organization}/locations/{location}/muteConfigs/{config_id}`
   * + `folders/{folder}/muteConfigs/{config_id}`
   * + `folders/{folder}/locations/{location}/muteConfigs/{config_id}`
   * + `projects/{project}/muteConfigs/{config_id}`
   * + `projects/{project}/locations/{location}/muteConfigs/{config_id}`
   */
  name: string;
}

/** Request message for getting a notification config. */
export interface GetNotificationConfigRequest {
  /**
   * Required. Name of the notification config to get. The following list shows
   * some examples of the format:
   *
   * +
   * `organizations/[organization_id]/locations/[location_id]/notificationConfigs/[config_id]`
   * +
   * `folders/[folder_id]/locations/[location_id]/notificationConfigs/[config_id]`
   * +
   * `projects/[project_id]/locations/[location_id]/notificationConfigs/[config_id]`
   */
  name: string;
}

/** Request message to get resource value config */
export interface GetResourceValueConfigRequest {
  /**
   * Required. Name of the resource value config to retrieve. Its format is
   * organizations/{organization}/resourceValueConfigs/{config_id}.
   */
  name: string;
}

/** Request message for getting a source. */
export interface GetSourceRequest {
  /**
   * Required. Relative resource name of the source. Its format is
   * `organizations/[organization_id]/source/[source_id]`.
   */
  name: string;
}

/** Request message for grouping by findings. */
export interface GroupFindingsRequest {
  /**
   * Required. Name of the source to groupBy. If no location is specified,
   * finding is assumed to be in global.
   *  The following list shows some examples:
   *
   * + `organizations/[organization_id]/sources/[source_id]`
   * +
   * `organizations/[organization_id]/sources/[source_id]/locations/[location_id]`
   * + `folders/[folder_id]/sources/[source_id]`
   * + `folders/[folder_id]/sources/[source_id]/locations/[location_id]`
   * + `projects/[project_id]/sources/[source_id]`
   * + `projects/[project_id]/sources/[source_id]/locations/[location_id]`
   *
   * To groupBy across all sources provide a source_id of `-`. The following
   * list shows some examples:
   *
   * + `organizations/{organization_id}/sources/-`
   * + `organizations/{organization_id}/sources/-/locations/[location_id]`
   * + `folders/{folder_id}/sources/-`
   * + `folders/{folder_id}/sources/-/locations/[location_id]`
   * + `projects/{project_id}/sources/-`
   * + `projects/{project_id}/sources/-/locations/[location_id]`
   */
  parent: string;
  /**
   * Expression that defines the filter to apply across findings.
   * The expression is a list of one or more restrictions combined via logical
   * operators `AND` and `OR`.
   * Parentheses are supported, and `OR` has higher precedence than `AND`.
   *
   * Restrictions have the form `<field> <operator> <value>` and may have a `-`
   * character in front of them to indicate negation. Examples include:
   *
   *  * name
   *  * security_marks.marks.marka
   *
   * The supported operators are:
   *
   * * `=` for all value types.
   * * `>`, `<`, `>=`, `<=` for integer values.
   * * `:`, meaning substring matching, for strings.
   *
   * The supported value types are:
   *
   * * string literals in quotes.
   * * integer literals without quotes.
   * * boolean literals `true` and `false` without quotes.
   *
   * The following field and operator combinations are supported:
   *
   * * name: `=`
   * * parent: `=`, `:`
   * * resource_name: `=`, `:`
   * * state: `=`, `:`
   * * category: `=`, `:`
   * * external_uri: `=`, `:`
   * * event_time: `=`, `>`, `<`, `>=`, `<=`
   *
   *   Usage: This should be milliseconds since epoch or an RFC3339 string.
   *   Examples:
   *     `event_time = "2019-06-10T16:07:18-07:00"`
   *     `event_time = 1560208038000`
   *
   * * severity: `=`, `:`
   * * security_marks.marks: `=`, `:`
   * * resource:
   *   * resource.name: `=`, `:`
   *   * resource.parent_name: `=`, `:`
   *   * resource.parent_display_name: `=`, `:`
   *   * resource.project_name: `=`, `:`
   *   * resource.project_display_name: `=`, `:`
   *   * resource.type: `=`, `:`
   */
  filter: string;
  /**
   * Required. Expression that defines what assets fields to use for grouping.
   * The string value should follow SQL syntax: comma separated list of fields.
   * For example: "parent,resource_name".
   */
  groupBy: string;
  /**
   * The value returned by the last `GroupFindingsResponse`; indicates
   * that this is a continuation of a prior `GroupFindings` call, and
   * that the system should return the next page of data.
   */
  pageToken: string;
  /**
   * The maximum number of results to return in a single response. Default is
   * 10, minimum is 1, maximum is 1000.
   */
  pageSize: number;
}

/** Response message for group by findings. */
export interface GroupFindingsResponse {
  /**
   * Group results. There exists an element for each existing unique
   * combination of property/values. The element contains a count for the number
   * of times those specific property/values appear.
   */
  groupByResults: GroupResult[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results.
   */
  nextPageToken: string;
  /** The total number of results matching the query. */
  totalSize: number;
}

/** Result containing the properties and count of a groupBy request. */
export interface GroupResult {
  /** Properties matching the groupBy fields in the request. */
  properties: { [key: string]: any | undefined };
  /** Total count of resources for the given properties. */
  count: Long;
}

export interface GroupResult_PropertiesEntry {
  key: string;
  value: any | undefined;
}

/**
 * Request message for listing the attack paths for a given simulation or valued
 * resource.
 */
export interface ListAttackPathsRequest {
  /**
   * Required. Name of parent to list attack paths.
   *
   * Valid formats:
   * `organizations/{organization}`,
   * `organizations/{organization}/simulations/{simulation}`
   * `organizations/{organization}/simulations/{simulation}/attackExposureResults/{attack_exposure_result_v2}`
   * `organizations/{organization}/simulations/{simulation}/valuedResources/{valued_resource}`
   */
  parent: string;
  /**
   * The filter expression that filters the attack path in the response.
   * Supported fields:
   *
   *   * `valued_resources` supports =
   */
  filter: string;
  /**
   * The value returned by the last `ListAttackPathsResponse`; indicates
   * that this is a continuation of a prior `ListAttackPaths` call, and
   * that the system should return the next page of data.
   */
  pageToken: string;
  /**
   * The maximum number of results to return in a single response. Default is
   * 10, minimum is 1, maximum is 1000.
   */
  pageSize: number;
}

/**
 * Response message for listing the attack paths for a given simulation or
 * valued resource.
 */
export interface ListAttackPathsResponse {
  /** The attack paths that the attack path simulation identified. */
  attackPaths: AttackPath[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results.
   */
  nextPageToken: string;
}

/**
 * Request message for getting simulation.
 * Simulation name can include "latest" to retrieve the latest simulation
 * For example, "organizations/123/simulations/latest"
 */
export interface GetSimulationRequest {
  /**
   * Required. The organization name or simulation name of this simulation
   *
   * Valid format:
   * `organizations/{organization}/simulations/latest`
   * `organizations/{organization}/simulations/{simulation}`
   */
  name: string;
}

/** Request message for getting a valued resource. */
export interface GetValuedResourceRequest {
  /**
   * Required. The name of this valued resource
   *
   * Valid format:
   * `organizations/{organization}/simulations/{simulation}/valuedResources/{valued_resource}`
   */
  name: string;
}

/**
 * Request message for listing BigQuery exports at a given scope e.g.
 * organization, folder or project.
 */
export interface ListBigQueryExportsRequest {
  /**
   * Required. The parent, which owns the collection of BigQuery exports. Its
   * format is `organizations/[organization_id]/locations/[location_id]`,
   * `folders/[folder_id]/locations/[location_id]`, or
   * `projects/[project_id]/locations/[location_id]`.
   */
  parent: string;
  /**
   * The maximum number of configs to return. The service may return fewer than
   * this value.
   * If unspecified, at most 10 configs will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListBigQueryExports` call.
   * Provide this to retrieve the subsequent page.
   * When paginating, all other parameters provided to `ListBigQueryExports`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for listing BigQuery exports. */
export interface ListBigQueryExportsResponse {
  /** The BigQuery exports from the specified parent. */
  bigQueryExports: BigQueryExport[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for listing findings. */
export interface ListFindingsRequest {
  /**
   * Required. Name of the source the findings belong to. If no location is
   * specified, the default is global. The following list shows some examples:
   *
   * + `organizations/[organization_id]/sources/[source_id]`
   * +
   * `organizations/[organization_id]/sources/[source_id]/locations/[location_id]`
   * + `folders/[folder_id]/sources/[source_id]`
   * + `folders/[folder_id]/sources/[source_id]/locations/[location_id]`
   * + `projects/[project_id]/sources/[source_id]`
   * + `projects/[project_id]/sources/[source_id]/locations/[location_id]`
   *
   * To list across all sources provide a source_id of `-`. The following
   * list shows some examples:
   *
   * + `organizations/{organization_id}/sources/-`
   * + `organizations/{organization_id}/sources/-/locations/{location_id}`
   * + `folders/{folder_id}/sources/-`
   * + `folders/{folder_id}/sources/-locations/{location_id}`
   * + `projects/{projects_id}/sources/-`
   * + `projects/{projects_id}/sources/-/locations/{location_id}`
   */
  parent: string;
  /**
   * Expression that defines the filter to apply across findings.
   * The expression is a list of one or more restrictions combined via logical
   * operators `AND` and `OR`.
   * Parentheses are supported, and `OR` has higher precedence than `AND`.
   *
   * Restrictions have the form `<field> <operator> <value>` and may have a `-`
   * character in front of them to indicate negation. Examples include:
   *
   *  * name
   *  * security_marks.marks.marka
   *
   * The supported operators are:
   *
   * * `=` for all value types.
   * * `>`, `<`, `>=`, `<=` for integer values.
   * * `:`, meaning substring matching, for strings.
   *
   * The supported value types are:
   *
   * * string literals in quotes.
   * * integer literals without quotes.
   * * boolean literals `true` and `false` without quotes.
   *
   * The following field and operator combinations are supported:
   *
   * * name: `=`
   * * parent: `=`, `:`
   * * resource_name: `=`, `:`
   * * state: `=`, `:`
   * * category: `=`, `:`
   * * external_uri: `=`, `:`
   * * event_time: `=`, `>`, `<`, `>=`, `<=`
   *
   *   Usage: This should be milliseconds since epoch or an RFC3339 string.
   *   Examples:
   *     `event_time = "2019-06-10T16:07:18-07:00"`
   *     `event_time = 1560208038000`
   *
   * * severity: `=`, `:`
   * * security_marks.marks: `=`, `:`
   * * resource:
   *   * resource.name: `=`, `:`
   *   * resource.parent_name: `=`, `:`
   *   * resource.parent_display_name: `=`, `:`
   *   * resource.project_name: `=`, `:`
   *   * resource.project_display_name: `=`, `:`
   *   * resource.type: `=`, `:`
   *   * resource.folders.resource_folder: `=`, `:`
   *   * resource.display_name: `=`, `:`
   */
  filter: string;
  /**
   * Expression that defines what fields and order to use for sorting. The
   * string value should follow SQL syntax: comma separated list of fields. For
   * example: "name,parent". The default sorting order
   * is ascending. To specify descending order for a field, a suffix " desc"
   * should be appended to the field name. For example: "name
   * desc,parent". Redundant space characters in the
   * syntax are insignificant. "name desc,parent" and "
   * name     desc  ,   parent  " are equivalent.
   *
   * The following fields are supported:
   * name
   * parent
   * state
   * category
   * resource_name
   * event_time
   * security_marks.marks
   */
  orderBy: string;
  /**
   * A field mask to specify the Finding fields to be listed in the response.
   * An empty field mask will list all fields.
   */
  fieldMask:
    | string[]
    | undefined;
  /**
   * The value returned by the last `ListFindingsResponse`; indicates
   * that this is a continuation of a prior `ListFindings` call, and
   * that the system should return the next page of data.
   */
  pageToken: string;
  /**
   * The maximum number of results to return in a single response. Default is
   * 10, minimum is 1, maximum is 1000.
   */
  pageSize: number;
}

/** Response message for listing findings. */
export interface ListFindingsResponse {
  /** Findings matching the list request. */
  listFindingsResults: ListFindingsResponse_ListFindingsResult[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results.
   */
  nextPageToken: string;
  /** The total number of findings matching the query. */
  totalSize: number;
}

/** Result containing the Finding. */
export interface ListFindingsResponse_ListFindingsResult {
  /** Finding matching the search request. */
  finding:
    | Finding
    | undefined;
  /** Output only. Resource that is associated with this finding. */
  resource: ListFindingsResponse_ListFindingsResult_Resource | undefined;
}

/**
 * Information related to the Google Cloud resource that is
 * associated with this finding.
 */
export interface ListFindingsResponse_ListFindingsResult_Resource {
  /**
   * The full resource name of the resource. See:
   * https://cloud.google.com/apis/design/resource_names#full_resource_name
   */
  name: string;
  /** The human readable name of the resource. */
  displayName: string;
  /** The full resource type of the resource. */
  type: string;
  /** Indicates which cloud provider the finding is from. */
  cloudProvider: CloudProvider;
  /** The service or resource provider associated with the resource. */
  service: string;
  /** The region or location of the service (if applicable). */
  location: string;
  /** The GCP metadata associated with the finding. */
  gcpMetadata?:
    | GcpMetadata
    | undefined;
  /** The AWS metadata associated with the finding. */
  awsMetadata?:
    | AwsMetadata
    | undefined;
  /** The Azure metadata associated with the finding. */
  azureMetadata?:
    | AzureMetadata
    | undefined;
  /** Provides the path to the resource within the resource hierarchy. */
  resourcePath:
    | ResourcePath
    | undefined;
  /**
   * A string representation of the resource path.
   * For Google Cloud, it has the format of
   * `organizations/{organization_id}/folders/{folder_id}/folders/{folder_id}/projects/{project_id}`
   * where there can be any number of folders.
   * For AWS, it has the format of
   * `org/{organization_id}/ou/{organizational_unit_id}/ou/{organizational_unit_id}/account/{account_id}`
   * where there can be any number of organizational units.
   * For Azure, it has the format of
   * `mg/{management_group_id}/mg/{management_group_id}/subscription/{subscription_id}/rg/{resource_group_name}`
   * where there can be any number of management groups.
   */
  resourcePathString: string;
}

/**
 * Request message for listing  mute configs at a given scope e.g. organization,
 * folder or project. If no location is specified, default is
 * global.
 */
export interface ListMuteConfigsRequest {
  /**
   * Required. The parent, which owns the collection of mute configs. Its format
   * is `organizations/[organization_id]", "folders/[folder_id]`,
   * `projects/[project_id]`,
   * `organizations/[organization_id]/locations/[location_id]`,
   * `folders/[folder_id]/locations/[location_id]`,
   * `projects/[project_id]/locations/[location_id]`.
   */
  parent: string;
  /**
   * The maximum number of configs to return. The service may return fewer than
   * this value.
   * If unspecified, at most 10 configs will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListMuteConfigs` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListMuteConfigs` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for listing mute configs. */
export interface ListMuteConfigsResponse {
  /** The mute configs from the specified parent. */
  muteConfigs: MuteConfig[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for listing notification configs. */
export interface ListNotificationConfigsRequest {
  /**
   * Required. The name of the parent in which to list the notification
   * configurations. Its format is
   * "organizations/[organization_id]/locations/[location_id]",
   * "folders/[folder_id]/locations/[location_id]", or
   * "projects/[project_id]/locations/[location_id]".
   */
  parent: string;
  /**
   * The value returned by the last `ListNotificationConfigsResponse`; indicates
   * that this is a continuation of a prior `ListNotificationConfigs` call, and
   * that the system should return the next page of data.
   */
  pageToken: string;
  /**
   * The maximum number of results to return in a single response. Default is
   * 10, minimum is 1, maximum is 1000.
   */
  pageSize: number;
}

/** Response message for listing notification configs. */
export interface ListNotificationConfigsResponse {
  /** Notification configs belonging to the requested parent. */
  notificationConfigs: NotificationConfig[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results.
   */
  nextPageToken: string;
}

/** Request message to list resource value configs of a parent */
export interface ListResourceValueConfigsRequest {
  /**
   * Required. The parent, which owns the collection of resource value configs.
   * Its format is
   * `organizations/[organization_id]`
   */
  parent: string;
  /**
   * The maximum number of configs to return. The service may return fewer than
   * this value.
   * If unspecified, at most 10 configs will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListResourceValueConfigs` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * `ListResourceValueConfigs` must match the call that provided the
   * page token.
   *
   * page_size can be specified, and the new page_size will be used.
   */
  pageToken: string;
}

/** Response message to list resource value configs */
export interface ListResourceValueConfigsResponse {
  /** The resource value configs from the specified parent. */
  resourceValueConfigs: ResourceValueConfig[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is empty, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for listing sources. */
export interface ListSourcesRequest {
  /**
   * Required. Resource name of the parent of sources to list. Its format should
   * be `organizations/[organization_id]`, `folders/[folder_id]`, or
   * `projects/[project_id]`.
   */
  parent: string;
  /**
   * The value returned by the last `ListSourcesResponse`; indicates
   * that this is a continuation of a prior `ListSources` call, and
   * that the system should return the next page of data.
   */
  pageToken: string;
  /**
   * The maximum number of results to return in a single response. Default is
   * 10, minimum is 1, maximum is 1000.
   */
  pageSize: number;
}

/** Response message for listing sources. */
export interface ListSourcesResponse {
  /** Sources belonging to the requested parent. */
  sources: Source[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results.
   */
  nextPageToken: string;
}

/** Request message for listing the valued resources for a given simulation. */
export interface ListValuedResourcesRequest {
  /**
   * Required. Name of parent to list exposed resources.
   *
   * Valid formats:
   * `organizations/{organization}`,
   * `organizations/{organization}/simulations/{simulation}`
   * `organizations/{organization}/simulations/{simulation}/attackExposureResults/{attack_exposure_result_v2}`
   */
  parent: string;
  /**
   * The filter expression that filters the valued resources in the response.
   * Supported fields:
   *
   *   * `resource_value` supports =
   *   * `resource_type` supports =
   */
  filter: string;
  /**
   * The value returned by the last `ListValuedResourcesResponse`; indicates
   * that this is a continuation of a prior `ListValuedResources` call, and
   * that the system should return the next page of data.
   */
  pageToken: string;
  /**
   * The maximum number of results to return in a single response. Default is
   * 10, minimum is 1, maximum is 1000.
   */
  pageSize: number;
  /**
   * Optional. The fields by which to order the valued resources response.
   *
   * Supported fields:
   *
   *   * `exposed_score`
   *
   *   * `resource_value`
   *
   *   * `resource_type`
   *
   * Values should be a comma separated list of fields. For example:
   * `exposed_score,resource_value`.
   *
   * The default sorting order is descending. To specify ascending or descending
   * order for a field, append a " ASC" or a " DESC" suffix, respectively; for
   * example: `exposed_score DESC`.
   */
  orderBy: string;
}

/** Response message for listing the valued resources for a given simulation. */
export interface ListValuedResourcesResponse {
  /** The valued resources that the attack path simulation identified. */
  valuedResources: ValuedResource[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results.
   */
  nextPageToken: string;
  /** The estimated total number of results matching the query. */
  totalSize: number;
}

/** Request message for updating a finding's state. */
export interface SetFindingStateRequest {
  /**
   * Required. The [relative resource
   * name](https://cloud.google.com/apis/design/resource_names#relative_resource_name)
   * of the finding. If no location is specified, finding is assumed to be in
   * global. The following list shows some examples:
   *
   * +
   * `organizations/{organization_id}/sources/{source_id}/findings/{finding_id}`
   * +
   * `organizations/{organization_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
   * + `folders/{folder_id}/sources/{source_id}/findings/{finding_id}`
   * +
   * `folders/{folder_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
   * + `projects/{project_id}/sources/{source_id}/findings/{finding_id}`
   * +
   * `projects/{project_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
   */
  name: string;
  /** Required. The desired State of the finding. */
  state: Finding_State;
}

/** Request message for updating a finding's mute status. */
export interface SetMuteRequest {
  /**
   * Required. The [relative resource
   * name](https://cloud.google.com/apis/design/resource_names#relative_resource_name)
   * of the finding. If no location is specified, finding is assumed to be in
   * global. The following list shows some examples:
   *
   * +
   * `organizations/{organization_id}/sources/{source_id}/findings/{finding_id}`
   * +
   * `organizations/{organization_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
   * + `folders/{folder_id}/sources/{source_id}/findings/{finding_id}`
   * +
   * `folders/{folder_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
   * + `projects/{project_id}/sources/{source_id}/findings/{finding_id}`
   * +
   * `projects/{project_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
   */
  name: string;
  /** Required. The desired state of the Mute. */
  mute: Finding_Mute;
}

/** Request message for updating a BigQuery export. */
export interface UpdateBigQueryExportRequest {
  /** Required. The BigQuery export being updated. */
  bigQueryExport:
    | BigQueryExport
    | undefined;
  /**
   * The list of fields to be updated.
   * If empty all mutable fields will be updated.
   */
  updateMask: string[] | undefined;
}

/** Request message for updating a ExternalSystem resource. */
export interface UpdateExternalSystemRequest {
  /** Required. The external system resource to update. */
  externalSystem:
    | ExternalSystem
    | undefined;
  /**
   * The FieldMask to use when updating the external system resource.
   *
   * If empty all mutable fields will be updated.
   */
  updateMask: string[] | undefined;
}

/** Request message for updating or creating a finding. */
export interface UpdateFindingRequest {
  /**
   * Required. The finding resource to update or create if it does not already
   * exist. parent, security_marks, and update_time will be ignored.
   *
   * In the case of creation, the finding id portion of the name must be
   * alphanumeric and less than or equal to 32 characters and greater than 0
   * characters in length.
   */
  finding:
    | Finding
    | undefined;
  /**
   * The FieldMask to use when updating the finding resource. This field should
   * not be specified when creating a finding.
   *
   * When updating a finding, an empty mask is treated as updating all mutable
   * fields and replacing source_properties.  Individual source_properties can
   * be added/updated by using "source_properties.<property key>" in the field
   * mask.
   */
  updateMask: string[] | undefined;
}

/** Request message for updating a mute config. */
export interface UpdateMuteConfigRequest {
  /** Required. The mute config being updated. */
  muteConfig:
    | MuteConfig
    | undefined;
  /**
   * The list of fields to be updated.
   * If empty all mutable fields will be updated.
   */
  updateMask: string[] | undefined;
}

/** Request message for updating a notification config. */
export interface UpdateNotificationConfigRequest {
  /** Required. The notification config to update. */
  notificationConfig:
    | NotificationConfig
    | undefined;
  /**
   * The FieldMask to use when updating the notification config.
   *
   * If empty all mutable fields will be updated.
   */
  updateMask: string[] | undefined;
}

/** Request message to update resource value config */
export interface UpdateResourceValueConfigRequest {
  /** Required. The resource value config being updated. */
  resourceValueConfig:
    | ResourceValueConfig
    | undefined;
  /**
   * The list of fields to be updated.
   * If empty all mutable fields will be updated.
   *
   * To update nested fields, include the top level field in the mask
   * For example, to update gcp_metadata.resource_type, include the
   * "gcp_metadata" field mask
   */
  updateMask: string[] | undefined;
}

/** Request message for updating a SecurityMarks resource. */
export interface UpdateSecurityMarksRequest {
  /** Required. The security marks resource to update. */
  securityMarks:
    | SecurityMarks
    | undefined;
  /**
   * The FieldMask to use when updating the security marks resource.
   *
   * The field mask must not contain duplicate fields.
   * If empty or set to "marks", all marks will be replaced.  Individual
   * marks can be updated using "marks.<mark_key>".
   */
  updateMask: string[] | undefined;
}

/** Request message for updating a source. */
export interface UpdateSourceRequest {
  /** Required. The source resource to update. */
  source:
    | Source
    | undefined;
  /**
   * The FieldMask to use when updating the source resource.
   *
   * If empty all mutable fields will be updated.
   */
  updateMask: string[] | undefined;
}

function createBaseBatchCreateResourceValueConfigsRequest(): BatchCreateResourceValueConfigsRequest {
  return { parent: "", requests: [] };
}

export const BatchCreateResourceValueConfigsRequest: MessageFns<BatchCreateResourceValueConfigsRequest> = {
  encode(message: BatchCreateResourceValueConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.requests) {
      CreateResourceValueConfigRequest.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateResourceValueConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateResourceValueConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requests.push(CreateResourceValueConfigRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateResourceValueConfigsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => CreateResourceValueConfigRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateResourceValueConfigsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => CreateResourceValueConfigRequest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateResourceValueConfigsRequest>): BatchCreateResourceValueConfigsRequest {
    return BatchCreateResourceValueConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateResourceValueConfigsRequest>): BatchCreateResourceValueConfigsRequest {
    const message = createBaseBatchCreateResourceValueConfigsRequest();
    message.parent = object.parent ?? "";
    message.requests = object.requests?.map((e) => CreateResourceValueConfigRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBatchCreateResourceValueConfigsResponse(): BatchCreateResourceValueConfigsResponse {
  return { resourceValueConfigs: [] };
}

export const BatchCreateResourceValueConfigsResponse: MessageFns<BatchCreateResourceValueConfigsResponse> = {
  encode(message: BatchCreateResourceValueConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resourceValueConfigs) {
      ResourceValueConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateResourceValueConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateResourceValueConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceValueConfigs.push(ResourceValueConfig.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateResourceValueConfigsResponse {
    return {
      resourceValueConfigs: globalThis.Array.isArray(object?.resourceValueConfigs)
        ? object.resourceValueConfigs.map((e: any) => ResourceValueConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateResourceValueConfigsResponse): unknown {
    const obj: any = {};
    if (message.resourceValueConfigs?.length) {
      obj.resourceValueConfigs = message.resourceValueConfigs.map((e) => ResourceValueConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateResourceValueConfigsResponse>): BatchCreateResourceValueConfigsResponse {
    return BatchCreateResourceValueConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateResourceValueConfigsResponse>): BatchCreateResourceValueConfigsResponse {
    const message = createBaseBatchCreateResourceValueConfigsResponse();
    message.resourceValueConfigs = object.resourceValueConfigs?.map((e) => ResourceValueConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBulkMuteFindingsRequest(): BulkMuteFindingsRequest {
  return { parent: "", filter: "", muteState: 0 };
}

export const BulkMuteFindingsRequest: MessageFns<BulkMuteFindingsRequest> = {
  encode(message: BulkMuteFindingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.muteState !== 0) {
      writer.uint32(24).int32(message.muteState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BulkMuteFindingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkMuteFindingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.muteState = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkMuteFindingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      muteState: isSet(object.muteState) ? bulkMuteFindingsRequest_MuteStateFromJSON(object.muteState) : 0,
    };
  },

  toJSON(message: BulkMuteFindingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.muteState !== 0) {
      obj.muteState = bulkMuteFindingsRequest_MuteStateToJSON(message.muteState);
    }
    return obj;
  },

  create(base?: DeepPartial<BulkMuteFindingsRequest>): BulkMuteFindingsRequest {
    return BulkMuteFindingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkMuteFindingsRequest>): BulkMuteFindingsRequest {
    const message = createBaseBulkMuteFindingsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.muteState = object.muteState ?? 0;
    return message;
  },
};

function createBaseBulkMuteFindingsResponse(): BulkMuteFindingsResponse {
  return {};
}

export const BulkMuteFindingsResponse: MessageFns<BulkMuteFindingsResponse> = {
  encode(_: BulkMuteFindingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BulkMuteFindingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkMuteFindingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): BulkMuteFindingsResponse {
    return {};
  },

  toJSON(_: BulkMuteFindingsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<BulkMuteFindingsResponse>): BulkMuteFindingsResponse {
    return BulkMuteFindingsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<BulkMuteFindingsResponse>): BulkMuteFindingsResponse {
    const message = createBaseBulkMuteFindingsResponse();
    return message;
  },
};

function createBaseCreateBigQueryExportRequest(): CreateBigQueryExportRequest {
  return { parent: "", bigQueryExport: undefined, bigQueryExportId: "" };
}

export const CreateBigQueryExportRequest: MessageFns<CreateBigQueryExportRequest> = {
  encode(message: CreateBigQueryExportRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.bigQueryExport !== undefined) {
      BigQueryExport.encode(message.bigQueryExport, writer.uint32(18).fork()).join();
    }
    if (message.bigQueryExportId !== "") {
      writer.uint32(26).string(message.bigQueryExportId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBigQueryExportRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBigQueryExportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.bigQueryExport = BigQueryExport.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.bigQueryExportId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBigQueryExportRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      bigQueryExport: isSet(object.bigQueryExport) ? BigQueryExport.fromJSON(object.bigQueryExport) : undefined,
      bigQueryExportId: isSet(object.bigQueryExportId) ? globalThis.String(object.bigQueryExportId) : "",
    };
  },

  toJSON(message: CreateBigQueryExportRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.bigQueryExport !== undefined) {
      obj.bigQueryExport = BigQueryExport.toJSON(message.bigQueryExport);
    }
    if (message.bigQueryExportId !== "") {
      obj.bigQueryExportId = message.bigQueryExportId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateBigQueryExportRequest>): CreateBigQueryExportRequest {
    return CreateBigQueryExportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateBigQueryExportRequest>): CreateBigQueryExportRequest {
    const message = createBaseCreateBigQueryExportRequest();
    message.parent = object.parent ?? "";
    message.bigQueryExport = (object.bigQueryExport !== undefined && object.bigQueryExport !== null)
      ? BigQueryExport.fromPartial(object.bigQueryExport)
      : undefined;
    message.bigQueryExportId = object.bigQueryExportId ?? "";
    return message;
  },
};

function createBaseCreateFindingRequest(): CreateFindingRequest {
  return { parent: "", findingId: "", finding: undefined };
}

export const CreateFindingRequest: MessageFns<CreateFindingRequest> = {
  encode(message: CreateFindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.findingId !== "") {
      writer.uint32(18).string(message.findingId);
    }
    if (message.finding !== undefined) {
      Finding.encode(message.finding, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.findingId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.finding = Finding.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFindingRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      findingId: isSet(object.findingId) ? globalThis.String(object.findingId) : "",
      finding: isSet(object.finding) ? Finding.fromJSON(object.finding) : undefined,
    };
  },

  toJSON(message: CreateFindingRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.findingId !== "") {
      obj.findingId = message.findingId;
    }
    if (message.finding !== undefined) {
      obj.finding = Finding.toJSON(message.finding);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateFindingRequest>): CreateFindingRequest {
    return CreateFindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateFindingRequest>): CreateFindingRequest {
    const message = createBaseCreateFindingRequest();
    message.parent = object.parent ?? "";
    message.findingId = object.findingId ?? "";
    message.finding = (object.finding !== undefined && object.finding !== null)
      ? Finding.fromPartial(object.finding)
      : undefined;
    return message;
  },
};

function createBaseCreateMuteConfigRequest(): CreateMuteConfigRequest {
  return { parent: "", muteConfig: undefined, muteConfigId: "" };
}

export const CreateMuteConfigRequest: MessageFns<CreateMuteConfigRequest> = {
  encode(message: CreateMuteConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.muteConfig !== undefined) {
      MuteConfig.encode(message.muteConfig, writer.uint32(18).fork()).join();
    }
    if (message.muteConfigId !== "") {
      writer.uint32(26).string(message.muteConfigId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMuteConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMuteConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.muteConfig = MuteConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.muteConfigId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMuteConfigRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      muteConfig: isSet(object.muteConfig) ? MuteConfig.fromJSON(object.muteConfig) : undefined,
      muteConfigId: isSet(object.muteConfigId) ? globalThis.String(object.muteConfigId) : "",
    };
  },

  toJSON(message: CreateMuteConfigRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.muteConfig !== undefined) {
      obj.muteConfig = MuteConfig.toJSON(message.muteConfig);
    }
    if (message.muteConfigId !== "") {
      obj.muteConfigId = message.muteConfigId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateMuteConfigRequest>): CreateMuteConfigRequest {
    return CreateMuteConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateMuteConfigRequest>): CreateMuteConfigRequest {
    const message = createBaseCreateMuteConfigRequest();
    message.parent = object.parent ?? "";
    message.muteConfig = (object.muteConfig !== undefined && object.muteConfig !== null)
      ? MuteConfig.fromPartial(object.muteConfig)
      : undefined;
    message.muteConfigId = object.muteConfigId ?? "";
    return message;
  },
};

function createBaseCreateNotificationConfigRequest(): CreateNotificationConfigRequest {
  return { parent: "", configId: "", notificationConfig: undefined };
}

export const CreateNotificationConfigRequest: MessageFns<CreateNotificationConfigRequest> = {
  encode(message: CreateNotificationConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.configId !== "") {
      writer.uint32(18).string(message.configId);
    }
    if (message.notificationConfig !== undefined) {
      NotificationConfig.encode(message.notificationConfig, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateNotificationConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateNotificationConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.configId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.notificationConfig = NotificationConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateNotificationConfigRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      configId: isSet(object.configId) ? globalThis.String(object.configId) : "",
      notificationConfig: isSet(object.notificationConfig)
        ? NotificationConfig.fromJSON(object.notificationConfig)
        : undefined,
    };
  },

  toJSON(message: CreateNotificationConfigRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.configId !== "") {
      obj.configId = message.configId;
    }
    if (message.notificationConfig !== undefined) {
      obj.notificationConfig = NotificationConfig.toJSON(message.notificationConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateNotificationConfigRequest>): CreateNotificationConfigRequest {
    return CreateNotificationConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateNotificationConfigRequest>): CreateNotificationConfigRequest {
    const message = createBaseCreateNotificationConfigRequest();
    message.parent = object.parent ?? "";
    message.configId = object.configId ?? "";
    message.notificationConfig = (object.notificationConfig !== undefined && object.notificationConfig !== null)
      ? NotificationConfig.fromPartial(object.notificationConfig)
      : undefined;
    return message;
  },
};

function createBaseCreateResourceValueConfigRequest(): CreateResourceValueConfigRequest {
  return { parent: "", resourceValueConfig: undefined };
}

export const CreateResourceValueConfigRequest: MessageFns<CreateResourceValueConfigRequest> = {
  encode(message: CreateResourceValueConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.resourceValueConfig !== undefined) {
      ResourceValueConfig.encode(message.resourceValueConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateResourceValueConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateResourceValueConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resourceValueConfig = ResourceValueConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateResourceValueConfigRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      resourceValueConfig: isSet(object.resourceValueConfig)
        ? ResourceValueConfig.fromJSON(object.resourceValueConfig)
        : undefined,
    };
  },

  toJSON(message: CreateResourceValueConfigRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.resourceValueConfig !== undefined) {
      obj.resourceValueConfig = ResourceValueConfig.toJSON(message.resourceValueConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateResourceValueConfigRequest>): CreateResourceValueConfigRequest {
    return CreateResourceValueConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateResourceValueConfigRequest>): CreateResourceValueConfigRequest {
    const message = createBaseCreateResourceValueConfigRequest();
    message.parent = object.parent ?? "";
    message.resourceValueConfig = (object.resourceValueConfig !== undefined && object.resourceValueConfig !== null)
      ? ResourceValueConfig.fromPartial(object.resourceValueConfig)
      : undefined;
    return message;
  },
};

function createBaseCreateSourceRequest(): CreateSourceRequest {
  return { parent: "", source: undefined };
}

export const CreateSourceRequest: MessageFns<CreateSourceRequest> = {
  encode(message: CreateSourceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.source !== undefined) {
      Source.encode(message.source, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSourceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSourceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.source = Source.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSourceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      source: isSet(object.source) ? Source.fromJSON(object.source) : undefined,
    };
  },

  toJSON(message: CreateSourceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.source !== undefined) {
      obj.source = Source.toJSON(message.source);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSourceRequest>): CreateSourceRequest {
    return CreateSourceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSourceRequest>): CreateSourceRequest {
    const message = createBaseCreateSourceRequest();
    message.parent = object.parent ?? "";
    message.source = (object.source !== undefined && object.source !== null)
      ? Source.fromPartial(object.source)
      : undefined;
    return message;
  },
};

function createBaseDeleteBigQueryExportRequest(): DeleteBigQueryExportRequest {
  return { name: "" };
}

export const DeleteBigQueryExportRequest: MessageFns<DeleteBigQueryExportRequest> = {
  encode(message: DeleteBigQueryExportRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBigQueryExportRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBigQueryExportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBigQueryExportRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteBigQueryExportRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteBigQueryExportRequest>): DeleteBigQueryExportRequest {
    return DeleteBigQueryExportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteBigQueryExportRequest>): DeleteBigQueryExportRequest {
    const message = createBaseDeleteBigQueryExportRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteMuteConfigRequest(): DeleteMuteConfigRequest {
  return { name: "" };
}

export const DeleteMuteConfigRequest: MessageFns<DeleteMuteConfigRequest> = {
  encode(message: DeleteMuteConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMuteConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMuteConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMuteConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteMuteConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteMuteConfigRequest>): DeleteMuteConfigRequest {
    return DeleteMuteConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteMuteConfigRequest>): DeleteMuteConfigRequest {
    const message = createBaseDeleteMuteConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteNotificationConfigRequest(): DeleteNotificationConfigRequest {
  return { name: "" };
}

export const DeleteNotificationConfigRequest: MessageFns<DeleteNotificationConfigRequest> = {
  encode(message: DeleteNotificationConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteNotificationConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteNotificationConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteNotificationConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteNotificationConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteNotificationConfigRequest>): DeleteNotificationConfigRequest {
    return DeleteNotificationConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteNotificationConfigRequest>): DeleteNotificationConfigRequest {
    const message = createBaseDeleteNotificationConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteResourceValueConfigRequest(): DeleteResourceValueConfigRequest {
  return { name: "" };
}

export const DeleteResourceValueConfigRequest: MessageFns<DeleteResourceValueConfigRequest> = {
  encode(message: DeleteResourceValueConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteResourceValueConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteResourceValueConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteResourceValueConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteResourceValueConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteResourceValueConfigRequest>): DeleteResourceValueConfigRequest {
    return DeleteResourceValueConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteResourceValueConfigRequest>): DeleteResourceValueConfigRequest {
    const message = createBaseDeleteResourceValueConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetBigQueryExportRequest(): GetBigQueryExportRequest {
  return { name: "" };
}

export const GetBigQueryExportRequest: MessageFns<GetBigQueryExportRequest> = {
  encode(message: GetBigQueryExportRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBigQueryExportRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBigQueryExportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBigQueryExportRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetBigQueryExportRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetBigQueryExportRequest>): GetBigQueryExportRequest {
    return GetBigQueryExportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetBigQueryExportRequest>): GetBigQueryExportRequest {
    const message = createBaseGetBigQueryExportRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetMuteConfigRequest(): GetMuteConfigRequest {
  return { name: "" };
}

export const GetMuteConfigRequest: MessageFns<GetMuteConfigRequest> = {
  encode(message: GetMuteConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMuteConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMuteConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMuteConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetMuteConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetMuteConfigRequest>): GetMuteConfigRequest {
    return GetMuteConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMuteConfigRequest>): GetMuteConfigRequest {
    const message = createBaseGetMuteConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetNotificationConfigRequest(): GetNotificationConfigRequest {
  return { name: "" };
}

export const GetNotificationConfigRequest: MessageFns<GetNotificationConfigRequest> = {
  encode(message: GetNotificationConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNotificationConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNotificationConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNotificationConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetNotificationConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetNotificationConfigRequest>): GetNotificationConfigRequest {
    return GetNotificationConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetNotificationConfigRequest>): GetNotificationConfigRequest {
    const message = createBaseGetNotificationConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetResourceValueConfigRequest(): GetResourceValueConfigRequest {
  return { name: "" };
}

export const GetResourceValueConfigRequest: MessageFns<GetResourceValueConfigRequest> = {
  encode(message: GetResourceValueConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetResourceValueConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetResourceValueConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetResourceValueConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetResourceValueConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetResourceValueConfigRequest>): GetResourceValueConfigRequest {
    return GetResourceValueConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetResourceValueConfigRequest>): GetResourceValueConfigRequest {
    const message = createBaseGetResourceValueConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetSourceRequest(): GetSourceRequest {
  return { name: "" };
}

export const GetSourceRequest: MessageFns<GetSourceRequest> = {
  encode(message: GetSourceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSourceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSourceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSourceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSourceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSourceRequest>): GetSourceRequest {
    return GetSourceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSourceRequest>): GetSourceRequest {
    const message = createBaseGetSourceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGroupFindingsRequest(): GroupFindingsRequest {
  return { parent: "", filter: "", groupBy: "", pageToken: "", pageSize: 0 };
}

export const GroupFindingsRequest: MessageFns<GroupFindingsRequest> = {
  encode(message: GroupFindingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.groupBy !== "") {
      writer.uint32(26).string(message.groupBy);
    }
    if (message.pageToken !== "") {
      writer.uint32(58).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(64).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupFindingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupFindingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.groupBy = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupFindingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      groupBy: isSet(object.groupBy) ? globalThis.String(object.groupBy) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: GroupFindingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.groupBy !== "") {
      obj.groupBy = message.groupBy;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<GroupFindingsRequest>): GroupFindingsRequest {
    return GroupFindingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GroupFindingsRequest>): GroupFindingsRequest {
    const message = createBaseGroupFindingsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.groupBy = object.groupBy ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseGroupFindingsResponse(): GroupFindingsResponse {
  return { groupByResults: [], nextPageToken: "", totalSize: 0 };
}

export const GroupFindingsResponse: MessageFns<GroupFindingsResponse> = {
  encode(message: GroupFindingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.groupByResults) {
      GroupResult.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(26).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(32).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupFindingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupFindingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.groupByResults.push(GroupResult.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupFindingsResponse {
    return {
      groupByResults: globalThis.Array.isArray(object?.groupByResults)
        ? object.groupByResults.map((e: any) => GroupResult.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: GroupFindingsResponse): unknown {
    const obj: any = {};
    if (message.groupByResults?.length) {
      obj.groupByResults = message.groupByResults.map((e) => GroupResult.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create(base?: DeepPartial<GroupFindingsResponse>): GroupFindingsResponse {
    return GroupFindingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GroupFindingsResponse>): GroupFindingsResponse {
    const message = createBaseGroupFindingsResponse();
    message.groupByResults = object.groupByResults?.map((e) => GroupResult.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

function createBaseGroupResult(): GroupResult {
  return { properties: {}, count: Long.ZERO };
}

export const GroupResult: MessageFns<GroupResult> = {
  encode(message: GroupResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.properties).forEach(([key, value]) => {
      if (value !== undefined) {
        GroupResult_PropertiesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
      }
    });
    if (!message.count.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.count.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = GroupResult_PropertiesEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.properties[entry1.key] = entry1.value;
          }
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.count = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupResult {
    return {
      properties: isObject(object.properties)
        ? Object.entries(object.properties).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
      count: isSet(object.count) ? Long.fromValue(object.count) : Long.ZERO,
    };
  },

  toJSON(message: GroupResult): unknown {
    const obj: any = {};
    if (message.properties) {
      const entries = Object.entries(message.properties);
      if (entries.length > 0) {
        obj.properties = {};
        entries.forEach(([k, v]) => {
          obj.properties[k] = v;
        });
      }
    }
    if (!message.count.equals(Long.ZERO)) {
      obj.count = (message.count || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<GroupResult>): GroupResult {
    return GroupResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GroupResult>): GroupResult {
    const message = createBaseGroupResult();
    message.properties = Object.entries(object.properties ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    message.count = (object.count !== undefined && object.count !== null) ? Long.fromValue(object.count) : Long.ZERO;
    return message;
  },
};

function createBaseGroupResult_PropertiesEntry(): GroupResult_PropertiesEntry {
  return { key: "", value: undefined };
}

export const GroupResult_PropertiesEntry: MessageFns<GroupResult_PropertiesEntry> = {
  encode(message: GroupResult_PropertiesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupResult_PropertiesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupResult_PropertiesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupResult_PropertiesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: GroupResult_PropertiesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<GroupResult_PropertiesEntry>): GroupResult_PropertiesEntry {
    return GroupResult_PropertiesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GroupResult_PropertiesEntry>): GroupResult_PropertiesEntry {
    const message = createBaseGroupResult_PropertiesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseListAttackPathsRequest(): ListAttackPathsRequest {
  return { parent: "", filter: "", pageToken: "", pageSize: 0 };
}

export const ListAttackPathsRequest: MessageFns<ListAttackPathsRequest> = {
  encode(message: ListAttackPathsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAttackPathsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAttackPathsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAttackPathsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListAttackPathsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListAttackPathsRequest>): ListAttackPathsRequest {
    return ListAttackPathsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAttackPathsRequest>): ListAttackPathsRequest {
    const message = createBaseListAttackPathsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListAttackPathsResponse(): ListAttackPathsResponse {
  return { attackPaths: [], nextPageToken: "" };
}

export const ListAttackPathsResponse: MessageFns<ListAttackPathsResponse> = {
  encode(message: ListAttackPathsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.attackPaths) {
      AttackPath.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAttackPathsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAttackPathsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attackPaths.push(AttackPath.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAttackPathsResponse {
    return {
      attackPaths: globalThis.Array.isArray(object?.attackPaths)
        ? object.attackPaths.map((e: any) => AttackPath.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAttackPathsResponse): unknown {
    const obj: any = {};
    if (message.attackPaths?.length) {
      obj.attackPaths = message.attackPaths.map((e) => AttackPath.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAttackPathsResponse>): ListAttackPathsResponse {
    return ListAttackPathsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAttackPathsResponse>): ListAttackPathsResponse {
    const message = createBaseListAttackPathsResponse();
    message.attackPaths = object.attackPaths?.map((e) => AttackPath.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetSimulationRequest(): GetSimulationRequest {
  return { name: "" };
}

export const GetSimulationRequest: MessageFns<GetSimulationRequest> = {
  encode(message: GetSimulationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSimulationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSimulationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSimulationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSimulationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSimulationRequest>): GetSimulationRequest {
    return GetSimulationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSimulationRequest>): GetSimulationRequest {
    const message = createBaseGetSimulationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetValuedResourceRequest(): GetValuedResourceRequest {
  return { name: "" };
}

export const GetValuedResourceRequest: MessageFns<GetValuedResourceRequest> = {
  encode(message: GetValuedResourceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetValuedResourceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetValuedResourceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetValuedResourceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetValuedResourceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetValuedResourceRequest>): GetValuedResourceRequest {
    return GetValuedResourceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetValuedResourceRequest>): GetValuedResourceRequest {
    const message = createBaseGetValuedResourceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListBigQueryExportsRequest(): ListBigQueryExportsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListBigQueryExportsRequest: MessageFns<ListBigQueryExportsRequest> = {
  encode(message: ListBigQueryExportsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBigQueryExportsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBigQueryExportsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBigQueryExportsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListBigQueryExportsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBigQueryExportsRequest>): ListBigQueryExportsRequest {
    return ListBigQueryExportsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBigQueryExportsRequest>): ListBigQueryExportsRequest {
    const message = createBaseListBigQueryExportsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListBigQueryExportsResponse(): ListBigQueryExportsResponse {
  return { bigQueryExports: [], nextPageToken: "" };
}

export const ListBigQueryExportsResponse: MessageFns<ListBigQueryExportsResponse> = {
  encode(message: ListBigQueryExportsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.bigQueryExports) {
      BigQueryExport.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBigQueryExportsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBigQueryExportsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bigQueryExports.push(BigQueryExport.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBigQueryExportsResponse {
    return {
      bigQueryExports: globalThis.Array.isArray(object?.bigQueryExports)
        ? object.bigQueryExports.map((e: any) => BigQueryExport.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListBigQueryExportsResponse): unknown {
    const obj: any = {};
    if (message.bigQueryExports?.length) {
      obj.bigQueryExports = message.bigQueryExports.map((e) => BigQueryExport.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBigQueryExportsResponse>): ListBigQueryExportsResponse {
    return ListBigQueryExportsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBigQueryExportsResponse>): ListBigQueryExportsResponse {
    const message = createBaseListBigQueryExportsResponse();
    message.bigQueryExports = object.bigQueryExports?.map((e) => BigQueryExport.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListFindingsRequest(): ListFindingsRequest {
  return { parent: "", filter: "", orderBy: "", fieldMask: undefined, pageToken: "", pageSize: 0 };
}

export const ListFindingsRequest: MessageFns<ListFindingsRequest> = {
  encode(message: ListFindingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(26).string(message.orderBy);
    }
    if (message.fieldMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.fieldMask), writer.uint32(58).fork()).join();
    }
    if (message.pageToken !== "") {
      writer.uint32(66).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(72).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFindingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFindingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.fieldMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFindingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      fieldMask: isSet(object.fieldMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.fieldMask)) : undefined,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListFindingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.fieldMask !== undefined) {
      obj.fieldMask = FieldMask.toJSON(FieldMask.wrap(message.fieldMask));
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListFindingsRequest>): ListFindingsRequest {
    return ListFindingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFindingsRequest>): ListFindingsRequest {
    const message = createBaseListFindingsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    message.fieldMask = object.fieldMask ?? undefined;
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListFindingsResponse(): ListFindingsResponse {
  return { listFindingsResults: [], nextPageToken: "", totalSize: 0 };
}

export const ListFindingsResponse: MessageFns<ListFindingsResponse> = {
  encode(message: ListFindingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.listFindingsResults) {
      ListFindingsResponse_ListFindingsResult.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(26).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(32).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFindingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFindingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listFindingsResults.push(ListFindingsResponse_ListFindingsResult.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFindingsResponse {
    return {
      listFindingsResults: globalThis.Array.isArray(object?.listFindingsResults)
        ? object.listFindingsResults.map((e: any) => ListFindingsResponse_ListFindingsResult.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListFindingsResponse): unknown {
    const obj: any = {};
    if (message.listFindingsResults?.length) {
      obj.listFindingsResults = message.listFindingsResults.map((e) =>
        ListFindingsResponse_ListFindingsResult.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListFindingsResponse>): ListFindingsResponse {
    return ListFindingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFindingsResponse>): ListFindingsResponse {
    const message = createBaseListFindingsResponse();
    message.listFindingsResults =
      object.listFindingsResults?.map((e) => ListFindingsResponse_ListFindingsResult.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

function createBaseListFindingsResponse_ListFindingsResult(): ListFindingsResponse_ListFindingsResult {
  return { finding: undefined, resource: undefined };
}

export const ListFindingsResponse_ListFindingsResult: MessageFns<ListFindingsResponse_ListFindingsResult> = {
  encode(message: ListFindingsResponse_ListFindingsResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.finding !== undefined) {
      Finding.encode(message.finding, writer.uint32(10).fork()).join();
    }
    if (message.resource !== undefined) {
      ListFindingsResponse_ListFindingsResult_Resource.encode(message.resource, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFindingsResponse_ListFindingsResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFindingsResponse_ListFindingsResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.finding = Finding.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resource = ListFindingsResponse_ListFindingsResult_Resource.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFindingsResponse_ListFindingsResult {
    return {
      finding: isSet(object.finding) ? Finding.fromJSON(object.finding) : undefined,
      resource: isSet(object.resource)
        ? ListFindingsResponse_ListFindingsResult_Resource.fromJSON(object.resource)
        : undefined,
    };
  },

  toJSON(message: ListFindingsResponse_ListFindingsResult): unknown {
    const obj: any = {};
    if (message.finding !== undefined) {
      obj.finding = Finding.toJSON(message.finding);
    }
    if (message.resource !== undefined) {
      obj.resource = ListFindingsResponse_ListFindingsResult_Resource.toJSON(message.resource);
    }
    return obj;
  },

  create(base?: DeepPartial<ListFindingsResponse_ListFindingsResult>): ListFindingsResponse_ListFindingsResult {
    return ListFindingsResponse_ListFindingsResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFindingsResponse_ListFindingsResult>): ListFindingsResponse_ListFindingsResult {
    const message = createBaseListFindingsResponse_ListFindingsResult();
    message.finding = (object.finding !== undefined && object.finding !== null)
      ? Finding.fromPartial(object.finding)
      : undefined;
    message.resource = (object.resource !== undefined && object.resource !== null)
      ? ListFindingsResponse_ListFindingsResult_Resource.fromPartial(object.resource)
      : undefined;
    return message;
  },
};

function createBaseListFindingsResponse_ListFindingsResult_Resource(): ListFindingsResponse_ListFindingsResult_Resource {
  return {
    name: "",
    displayName: "",
    type: "",
    cloudProvider: 0,
    service: "",
    location: "",
    gcpMetadata: undefined,
    awsMetadata: undefined,
    azureMetadata: undefined,
    resourcePath: undefined,
    resourcePathString: "",
  };
}

export const ListFindingsResponse_ListFindingsResult_Resource: MessageFns<
  ListFindingsResponse_ListFindingsResult_Resource
> = {
  encode(
    message: ListFindingsResponse_ListFindingsResult_Resource,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.cloudProvider !== 0) {
      writer.uint32(32).int32(message.cloudProvider);
    }
    if (message.service !== "") {
      writer.uint32(42).string(message.service);
    }
    if (message.location !== "") {
      writer.uint32(50).string(message.location);
    }
    if (message.gcpMetadata !== undefined) {
      GcpMetadata.encode(message.gcpMetadata, writer.uint32(58).fork()).join();
    }
    if (message.awsMetadata !== undefined) {
      AwsMetadata.encode(message.awsMetadata, writer.uint32(66).fork()).join();
    }
    if (message.azureMetadata !== undefined) {
      AzureMetadata.encode(message.azureMetadata, writer.uint32(74).fork()).join();
    }
    if (message.resourcePath !== undefined) {
      ResourcePath.encode(message.resourcePath, writer.uint32(82).fork()).join();
    }
    if (message.resourcePathString !== "") {
      writer.uint32(90).string(message.resourcePathString);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFindingsResponse_ListFindingsResult_Resource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFindingsResponse_ListFindingsResult_Resource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.cloudProvider = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.service = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.location = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.gcpMetadata = GcpMetadata.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.awsMetadata = AwsMetadata.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.azureMetadata = AzureMetadata.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.resourcePath = ResourcePath.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.resourcePathString = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFindingsResponse_ListFindingsResult_Resource {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      cloudProvider: isSet(object.cloudProvider) ? cloudProviderFromJSON(object.cloudProvider) : 0,
      service: isSet(object.service) ? globalThis.String(object.service) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      gcpMetadata: isSet(object.gcpMetadata) ? GcpMetadata.fromJSON(object.gcpMetadata) : undefined,
      awsMetadata: isSet(object.awsMetadata) ? AwsMetadata.fromJSON(object.awsMetadata) : undefined,
      azureMetadata: isSet(object.azureMetadata) ? AzureMetadata.fromJSON(object.azureMetadata) : undefined,
      resourcePath: isSet(object.resourcePath) ? ResourcePath.fromJSON(object.resourcePath) : undefined,
      resourcePathString: isSet(object.resourcePathString) ? globalThis.String(object.resourcePathString) : "",
    };
  },

  toJSON(message: ListFindingsResponse_ListFindingsResult_Resource): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.cloudProvider !== 0) {
      obj.cloudProvider = cloudProviderToJSON(message.cloudProvider);
    }
    if (message.service !== "") {
      obj.service = message.service;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.gcpMetadata !== undefined) {
      obj.gcpMetadata = GcpMetadata.toJSON(message.gcpMetadata);
    }
    if (message.awsMetadata !== undefined) {
      obj.awsMetadata = AwsMetadata.toJSON(message.awsMetadata);
    }
    if (message.azureMetadata !== undefined) {
      obj.azureMetadata = AzureMetadata.toJSON(message.azureMetadata);
    }
    if (message.resourcePath !== undefined) {
      obj.resourcePath = ResourcePath.toJSON(message.resourcePath);
    }
    if (message.resourcePathString !== "") {
      obj.resourcePathString = message.resourcePathString;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListFindingsResponse_ListFindingsResult_Resource>,
  ): ListFindingsResponse_ListFindingsResult_Resource {
    return ListFindingsResponse_ListFindingsResult_Resource.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListFindingsResponse_ListFindingsResult_Resource>,
  ): ListFindingsResponse_ListFindingsResult_Resource {
    const message = createBaseListFindingsResponse_ListFindingsResult_Resource();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.type = object.type ?? "";
    message.cloudProvider = object.cloudProvider ?? 0;
    message.service = object.service ?? "";
    message.location = object.location ?? "";
    message.gcpMetadata = (object.gcpMetadata !== undefined && object.gcpMetadata !== null)
      ? GcpMetadata.fromPartial(object.gcpMetadata)
      : undefined;
    message.awsMetadata = (object.awsMetadata !== undefined && object.awsMetadata !== null)
      ? AwsMetadata.fromPartial(object.awsMetadata)
      : undefined;
    message.azureMetadata = (object.azureMetadata !== undefined && object.azureMetadata !== null)
      ? AzureMetadata.fromPartial(object.azureMetadata)
      : undefined;
    message.resourcePath = (object.resourcePath !== undefined && object.resourcePath !== null)
      ? ResourcePath.fromPartial(object.resourcePath)
      : undefined;
    message.resourcePathString = object.resourcePathString ?? "";
    return message;
  },
};

function createBaseListMuteConfigsRequest(): ListMuteConfigsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListMuteConfigsRequest: MessageFns<ListMuteConfigsRequest> = {
  encode(message: ListMuteConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMuteConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMuteConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMuteConfigsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListMuteConfigsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMuteConfigsRequest>): ListMuteConfigsRequest {
    return ListMuteConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMuteConfigsRequest>): ListMuteConfigsRequest {
    const message = createBaseListMuteConfigsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListMuteConfigsResponse(): ListMuteConfigsResponse {
  return { muteConfigs: [], nextPageToken: "" };
}

export const ListMuteConfigsResponse: MessageFns<ListMuteConfigsResponse> = {
  encode(message: ListMuteConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.muteConfigs) {
      MuteConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMuteConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMuteConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.muteConfigs.push(MuteConfig.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMuteConfigsResponse {
    return {
      muteConfigs: globalThis.Array.isArray(object?.muteConfigs)
        ? object.muteConfigs.map((e: any) => MuteConfig.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListMuteConfigsResponse): unknown {
    const obj: any = {};
    if (message.muteConfigs?.length) {
      obj.muteConfigs = message.muteConfigs.map((e) => MuteConfig.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMuteConfigsResponse>): ListMuteConfigsResponse {
    return ListMuteConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMuteConfigsResponse>): ListMuteConfigsResponse {
    const message = createBaseListMuteConfigsResponse();
    message.muteConfigs = object.muteConfigs?.map((e) => MuteConfig.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListNotificationConfigsRequest(): ListNotificationConfigsRequest {
  return { parent: "", pageToken: "", pageSize: 0 };
}

export const ListNotificationConfigsRequest: MessageFns<ListNotificationConfigsRequest> = {
  encode(message: ListNotificationConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNotificationConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNotificationConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNotificationConfigsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListNotificationConfigsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListNotificationConfigsRequest>): ListNotificationConfigsRequest {
    return ListNotificationConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNotificationConfigsRequest>): ListNotificationConfigsRequest {
    const message = createBaseListNotificationConfigsRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListNotificationConfigsResponse(): ListNotificationConfigsResponse {
  return { notificationConfigs: [], nextPageToken: "" };
}

export const ListNotificationConfigsResponse: MessageFns<ListNotificationConfigsResponse> = {
  encode(message: ListNotificationConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.notificationConfigs) {
      NotificationConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNotificationConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNotificationConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.notificationConfigs.push(NotificationConfig.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNotificationConfigsResponse {
    return {
      notificationConfigs: globalThis.Array.isArray(object?.notificationConfigs)
        ? object.notificationConfigs.map((e: any) => NotificationConfig.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListNotificationConfigsResponse): unknown {
    const obj: any = {};
    if (message.notificationConfigs?.length) {
      obj.notificationConfigs = message.notificationConfigs.map((e) => NotificationConfig.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNotificationConfigsResponse>): ListNotificationConfigsResponse {
    return ListNotificationConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNotificationConfigsResponse>): ListNotificationConfigsResponse {
    const message = createBaseListNotificationConfigsResponse();
    message.notificationConfigs = object.notificationConfigs?.map((e) => NotificationConfig.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListResourceValueConfigsRequest(): ListResourceValueConfigsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListResourceValueConfigsRequest: MessageFns<ListResourceValueConfigsRequest> = {
  encode(message: ListResourceValueConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListResourceValueConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListResourceValueConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListResourceValueConfigsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListResourceValueConfigsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListResourceValueConfigsRequest>): ListResourceValueConfigsRequest {
    return ListResourceValueConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListResourceValueConfigsRequest>): ListResourceValueConfigsRequest {
    const message = createBaseListResourceValueConfigsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListResourceValueConfigsResponse(): ListResourceValueConfigsResponse {
  return { resourceValueConfigs: [], nextPageToken: "" };
}

export const ListResourceValueConfigsResponse: MessageFns<ListResourceValueConfigsResponse> = {
  encode(message: ListResourceValueConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resourceValueConfigs) {
      ResourceValueConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListResourceValueConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListResourceValueConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceValueConfigs.push(ResourceValueConfig.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListResourceValueConfigsResponse {
    return {
      resourceValueConfigs: globalThis.Array.isArray(object?.resourceValueConfigs)
        ? object.resourceValueConfigs.map((e: any) => ResourceValueConfig.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListResourceValueConfigsResponse): unknown {
    const obj: any = {};
    if (message.resourceValueConfigs?.length) {
      obj.resourceValueConfigs = message.resourceValueConfigs.map((e) => ResourceValueConfig.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListResourceValueConfigsResponse>): ListResourceValueConfigsResponse {
    return ListResourceValueConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListResourceValueConfigsResponse>): ListResourceValueConfigsResponse {
    const message = createBaseListResourceValueConfigsResponse();
    message.resourceValueConfigs = object.resourceValueConfigs?.map((e) => ResourceValueConfig.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListSourcesRequest(): ListSourcesRequest {
  return { parent: "", pageToken: "", pageSize: 0 };
}

export const ListSourcesRequest: MessageFns<ListSourcesRequest> = {
  encode(message: ListSourcesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(56).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSourcesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSourcesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSourcesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListSourcesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListSourcesRequest>): ListSourcesRequest {
    return ListSourcesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSourcesRequest>): ListSourcesRequest {
    const message = createBaseListSourcesRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListSourcesResponse(): ListSourcesResponse {
  return { sources: [], nextPageToken: "" };
}

export const ListSourcesResponse: MessageFns<ListSourcesResponse> = {
  encode(message: ListSourcesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sources) {
      Source.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSourcesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSourcesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sources.push(Source.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSourcesResponse {
    return {
      sources: globalThis.Array.isArray(object?.sources) ? object.sources.map((e: any) => Source.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSourcesResponse): unknown {
    const obj: any = {};
    if (message.sources?.length) {
      obj.sources = message.sources.map((e) => Source.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSourcesResponse>): ListSourcesResponse {
    return ListSourcesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSourcesResponse>): ListSourcesResponse {
    const message = createBaseListSourcesResponse();
    message.sources = object.sources?.map((e) => Source.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListValuedResourcesRequest(): ListValuedResourcesRequest {
  return { parent: "", filter: "", pageToken: "", pageSize: 0, orderBy: "" };
}

export const ListValuedResourcesRequest: MessageFns<ListValuedResourcesRequest> = {
  encode(message: ListValuedResourcesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListValuedResourcesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListValuedResourcesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListValuedResourcesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListValuedResourcesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListValuedResourcesRequest>): ListValuedResourcesRequest {
    return ListValuedResourcesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListValuedResourcesRequest>): ListValuedResourcesRequest {
    const message = createBaseListValuedResourcesRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListValuedResourcesResponse(): ListValuedResourcesResponse {
  return { valuedResources: [], nextPageToken: "", totalSize: 0 };
}

export const ListValuedResourcesResponse: MessageFns<ListValuedResourcesResponse> = {
  encode(message: ListValuedResourcesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.valuedResources) {
      ValuedResource.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListValuedResourcesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListValuedResourcesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.valuedResources.push(ValuedResource.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListValuedResourcesResponse {
    return {
      valuedResources: globalThis.Array.isArray(object?.valuedResources)
        ? object.valuedResources.map((e: any) => ValuedResource.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListValuedResourcesResponse): unknown {
    const obj: any = {};
    if (message.valuedResources?.length) {
      obj.valuedResources = message.valuedResources.map((e) => ValuedResource.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListValuedResourcesResponse>): ListValuedResourcesResponse {
    return ListValuedResourcesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListValuedResourcesResponse>): ListValuedResourcesResponse {
    const message = createBaseListValuedResourcesResponse();
    message.valuedResources = object.valuedResources?.map((e) => ValuedResource.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

function createBaseSetFindingStateRequest(): SetFindingStateRequest {
  return { name: "", state: 0 };
}

export const SetFindingStateRequest: MessageFns<SetFindingStateRequest> = {
  encode(message: SetFindingStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetFindingStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetFindingStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetFindingStateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      state: isSet(object.state) ? finding_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: SetFindingStateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.state !== 0) {
      obj.state = finding_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<SetFindingStateRequest>): SetFindingStateRequest {
    return SetFindingStateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetFindingStateRequest>): SetFindingStateRequest {
    const message = createBaseSetFindingStateRequest();
    message.name = object.name ?? "";
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseSetMuteRequest(): SetMuteRequest {
  return { name: "", mute: 0 };
}

export const SetMuteRequest: MessageFns<SetMuteRequest> = {
  encode(message: SetMuteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.mute !== 0) {
      writer.uint32(16).int32(message.mute);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetMuteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetMuteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.mute = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetMuteRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      mute: isSet(object.mute) ? finding_MuteFromJSON(object.mute) : 0,
    };
  },

  toJSON(message: SetMuteRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.mute !== 0) {
      obj.mute = finding_MuteToJSON(message.mute);
    }
    return obj;
  },

  create(base?: DeepPartial<SetMuteRequest>): SetMuteRequest {
    return SetMuteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetMuteRequest>): SetMuteRequest {
    const message = createBaseSetMuteRequest();
    message.name = object.name ?? "";
    message.mute = object.mute ?? 0;
    return message;
  },
};

function createBaseUpdateBigQueryExportRequest(): UpdateBigQueryExportRequest {
  return { bigQueryExport: undefined, updateMask: undefined };
}

export const UpdateBigQueryExportRequest: MessageFns<UpdateBigQueryExportRequest> = {
  encode(message: UpdateBigQueryExportRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bigQueryExport !== undefined) {
      BigQueryExport.encode(message.bigQueryExport, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBigQueryExportRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBigQueryExportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bigQueryExport = BigQueryExport.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBigQueryExportRequest {
    return {
      bigQueryExport: isSet(object.bigQueryExport) ? BigQueryExport.fromJSON(object.bigQueryExport) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateBigQueryExportRequest): unknown {
    const obj: any = {};
    if (message.bigQueryExport !== undefined) {
      obj.bigQueryExport = BigQueryExport.toJSON(message.bigQueryExport);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateBigQueryExportRequest>): UpdateBigQueryExportRequest {
    return UpdateBigQueryExportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBigQueryExportRequest>): UpdateBigQueryExportRequest {
    const message = createBaseUpdateBigQueryExportRequest();
    message.bigQueryExport = (object.bigQueryExport !== undefined && object.bigQueryExport !== null)
      ? BigQueryExport.fromPartial(object.bigQueryExport)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseUpdateExternalSystemRequest(): UpdateExternalSystemRequest {
  return { externalSystem: undefined, updateMask: undefined };
}

export const UpdateExternalSystemRequest: MessageFns<UpdateExternalSystemRequest> = {
  encode(message: UpdateExternalSystemRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.externalSystem !== undefined) {
      ExternalSystem.encode(message.externalSystem, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateExternalSystemRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateExternalSystemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.externalSystem = ExternalSystem.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateExternalSystemRequest {
    return {
      externalSystem: isSet(object.externalSystem) ? ExternalSystem.fromJSON(object.externalSystem) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateExternalSystemRequest): unknown {
    const obj: any = {};
    if (message.externalSystem !== undefined) {
      obj.externalSystem = ExternalSystem.toJSON(message.externalSystem);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateExternalSystemRequest>): UpdateExternalSystemRequest {
    return UpdateExternalSystemRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateExternalSystemRequest>): UpdateExternalSystemRequest {
    const message = createBaseUpdateExternalSystemRequest();
    message.externalSystem = (object.externalSystem !== undefined && object.externalSystem !== null)
      ? ExternalSystem.fromPartial(object.externalSystem)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseUpdateFindingRequest(): UpdateFindingRequest {
  return { finding: undefined, updateMask: undefined };
}

export const UpdateFindingRequest: MessageFns<UpdateFindingRequest> = {
  encode(message: UpdateFindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.finding !== undefined) {
      Finding.encode(message.finding, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.finding = Finding.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFindingRequest {
    return {
      finding: isSet(object.finding) ? Finding.fromJSON(object.finding) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateFindingRequest): unknown {
    const obj: any = {};
    if (message.finding !== undefined) {
      obj.finding = Finding.toJSON(message.finding);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateFindingRequest>): UpdateFindingRequest {
    return UpdateFindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateFindingRequest>): UpdateFindingRequest {
    const message = createBaseUpdateFindingRequest();
    message.finding = (object.finding !== undefined && object.finding !== null)
      ? Finding.fromPartial(object.finding)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseUpdateMuteConfigRequest(): UpdateMuteConfigRequest {
  return { muteConfig: undefined, updateMask: undefined };
}

export const UpdateMuteConfigRequest: MessageFns<UpdateMuteConfigRequest> = {
  encode(message: UpdateMuteConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.muteConfig !== undefined) {
      MuteConfig.encode(message.muteConfig, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMuteConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMuteConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.muteConfig = MuteConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMuteConfigRequest {
    return {
      muteConfig: isSet(object.muteConfig) ? MuteConfig.fromJSON(object.muteConfig) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateMuteConfigRequest): unknown {
    const obj: any = {};
    if (message.muteConfig !== undefined) {
      obj.muteConfig = MuteConfig.toJSON(message.muteConfig);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateMuteConfigRequest>): UpdateMuteConfigRequest {
    return UpdateMuteConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateMuteConfigRequest>): UpdateMuteConfigRequest {
    const message = createBaseUpdateMuteConfigRequest();
    message.muteConfig = (object.muteConfig !== undefined && object.muteConfig !== null)
      ? MuteConfig.fromPartial(object.muteConfig)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseUpdateNotificationConfigRequest(): UpdateNotificationConfigRequest {
  return { notificationConfig: undefined, updateMask: undefined };
}

export const UpdateNotificationConfigRequest: MessageFns<UpdateNotificationConfigRequest> = {
  encode(message: UpdateNotificationConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notificationConfig !== undefined) {
      NotificationConfig.encode(message.notificationConfig, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateNotificationConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateNotificationConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.notificationConfig = NotificationConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateNotificationConfigRequest {
    return {
      notificationConfig: isSet(object.notificationConfig)
        ? NotificationConfig.fromJSON(object.notificationConfig)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateNotificationConfigRequest): unknown {
    const obj: any = {};
    if (message.notificationConfig !== undefined) {
      obj.notificationConfig = NotificationConfig.toJSON(message.notificationConfig);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateNotificationConfigRequest>): UpdateNotificationConfigRequest {
    return UpdateNotificationConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateNotificationConfigRequest>): UpdateNotificationConfigRequest {
    const message = createBaseUpdateNotificationConfigRequest();
    message.notificationConfig = (object.notificationConfig !== undefined && object.notificationConfig !== null)
      ? NotificationConfig.fromPartial(object.notificationConfig)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseUpdateResourceValueConfigRequest(): UpdateResourceValueConfigRequest {
  return { resourceValueConfig: undefined, updateMask: undefined };
}

export const UpdateResourceValueConfigRequest: MessageFns<UpdateResourceValueConfigRequest> = {
  encode(message: UpdateResourceValueConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceValueConfig !== undefined) {
      ResourceValueConfig.encode(message.resourceValueConfig, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateResourceValueConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateResourceValueConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceValueConfig = ResourceValueConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateResourceValueConfigRequest {
    return {
      resourceValueConfig: isSet(object.resourceValueConfig)
        ? ResourceValueConfig.fromJSON(object.resourceValueConfig)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateResourceValueConfigRequest): unknown {
    const obj: any = {};
    if (message.resourceValueConfig !== undefined) {
      obj.resourceValueConfig = ResourceValueConfig.toJSON(message.resourceValueConfig);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateResourceValueConfigRequest>): UpdateResourceValueConfigRequest {
    return UpdateResourceValueConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateResourceValueConfigRequest>): UpdateResourceValueConfigRequest {
    const message = createBaseUpdateResourceValueConfigRequest();
    message.resourceValueConfig = (object.resourceValueConfig !== undefined && object.resourceValueConfig !== null)
      ? ResourceValueConfig.fromPartial(object.resourceValueConfig)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseUpdateSecurityMarksRequest(): UpdateSecurityMarksRequest {
  return { securityMarks: undefined, updateMask: undefined };
}

export const UpdateSecurityMarksRequest: MessageFns<UpdateSecurityMarksRequest> = {
  encode(message: UpdateSecurityMarksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.securityMarks !== undefined) {
      SecurityMarks.encode(message.securityMarks, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSecurityMarksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSecurityMarksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.securityMarks = SecurityMarks.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSecurityMarksRequest {
    return {
      securityMarks: isSet(object.securityMarks) ? SecurityMarks.fromJSON(object.securityMarks) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSecurityMarksRequest): unknown {
    const obj: any = {};
    if (message.securityMarks !== undefined) {
      obj.securityMarks = SecurityMarks.toJSON(message.securityMarks);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSecurityMarksRequest>): UpdateSecurityMarksRequest {
    return UpdateSecurityMarksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSecurityMarksRequest>): UpdateSecurityMarksRequest {
    const message = createBaseUpdateSecurityMarksRequest();
    message.securityMarks = (object.securityMarks !== undefined && object.securityMarks !== null)
      ? SecurityMarks.fromPartial(object.securityMarks)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseUpdateSourceRequest(): UpdateSourceRequest {
  return { source: undefined, updateMask: undefined };
}

export const UpdateSourceRequest: MessageFns<UpdateSourceRequest> = {
  encode(message: UpdateSourceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.source !== undefined) {
      Source.encode(message.source, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSourceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSourceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.source = Source.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSourceRequest {
    return {
      source: isSet(object.source) ? Source.fromJSON(object.source) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSourceRequest): unknown {
    const obj: any = {};
    if (message.source !== undefined) {
      obj.source = Source.toJSON(message.source);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSourceRequest>): UpdateSourceRequest {
    return UpdateSourceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSourceRequest>): UpdateSourceRequest {
    const message = createBaseUpdateSourceRequest();
    message.source = (object.source !== undefined && object.source !== null)
      ? Source.fromPartial(object.source)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

/** V2 APIs for Security Center service. */
export type SecurityCenterDefinition = typeof SecurityCenterDefinition;
export const SecurityCenterDefinition = {
  name: "SecurityCenter",
  fullName: "google.cloud.securitycenter.v2.SecurityCenter",
  methods: {
    /**
     * Creates a ResourceValueConfig for an organization. Maps user's tags to
     * difference resource values for use by the attack path simulation.
     */
    batchCreateResourceValueConfigs: {
      name: "BatchCreateResourceValueConfigs",
      requestType: BatchCreateResourceValueConfigsRequest,
      requestStream: false,
      responseType: BatchCreateResourceValueConfigsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 114, 101, 113, 117, 101, 115, 116, 115])],
          578365826: [
            Buffer.from([
              146,
              1,
              58,
              1,
              42,
              90,
              78,
              58,
              1,
              42,
              34,
              73,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              86,
              97,
              108,
              117,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              67,
              114,
              101,
              97,
              116,
              101,
              34,
              61,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              86,
              97,
              108,
              117,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              67,
              114,
              101,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Kicks off an LRO to bulk mute findings for a parent based on a filter. If
     * no location is specified, findings are muted in global. The parent
     * can be either an organization, folder, or project. The findings matched by
     * the filter will be muted after the LRO is done.
     */
    bulkMuteFindings: {
      name: "BulkMuteFindings",
      requestType: BulkMuteFindingsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              80,
              10,
              55,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              99,
              101,
              110,
              116,
              101,
              114,
              46,
              118,
              50,
              46,
              66,
              117,
              108,
              107,
              77,
              117,
              116,
              101,
              70,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
            ]),
          ],
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              202,
              2,
              58,
              1,
              42,
              90,
              63,
              58,
              1,
              42,
              34,
              58,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              98,
              117,
              108,
              107,
              77,
              117,
              116,
              101,
              90,
              45,
              58,
              1,
              42,
              34,
              40,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              98,
              117,
              108,
              107,
              77,
              117,
              116,
              101,
              90,
              57,
              58,
              1,
              42,
              34,
              52,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              98,
              117,
              108,
              107,
              77,
              117,
              116,
              101,
              90,
              46,
              58,
              1,
              42,
              34,
              41,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              98,
              117,
              108,
              107,
              77,
              117,
              116,
              101,
              90,
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              98,
              117,
              108,
              107,
              77,
              117,
              116,
              101,
              34,
              46,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              98,
              117,
              108,
              107,
              77,
              117,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Creates a BigQuery export. */
    createBigQueryExport: {
      name: "CreateBigQueryExport",
      requestType: CreateBigQueryExportRequest,
      requestStream: false,
      responseType: BigQueryExport,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              43,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              98,
              105,
              103,
              95,
              113,
              117,
              101,
              114,
              121,
              95,
              101,
              120,
              112,
              111,
              114,
              116,
              44,
              98,
              105,
              103,
              95,
              113,
              117,
              101,
              114,
              121,
              95,
              101,
              120,
              112,
              111,
              114,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              221,
              1,
              58,
              16,
              98,
              105,
              103,
              95,
              113,
              117,
              101,
              114,
              121,
              95,
              101,
              120,
              112,
              111,
              114,
              116,
              90,
              70,
              58,
              16,
              98,
              105,
              103,
              95,
              113,
              117,
              101,
              114,
              121,
              95,
              101,
              120,
              112,
              111,
              114,
              116,
              34,
              50,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              112,
              111,
              114,
              116,
              115,
              90,
              71,
              58,
              16,
              98,
              105,
              103,
              95,
              113,
              117,
              101,
              114,
              121,
              95,
              101,
              120,
              112,
              111,
              114,
              116,
              34,
              51,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              112,
              111,
              114,
              116,
              115,
              34,
              56,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              112,
              111,
              114,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a finding in a location. The corresponding source must exist for
     * finding creation to succeed.
     */
    createFinding: {
      name: "CreateFinding",
      requestType: CreateFindingRequest,
      requestStream: false,
      responseType: Finding,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              44,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              130,
              1,
              58,
              7,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              90,
              58,
              58,
              7,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              34,
              47,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              34,
              59,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a mute config. */
    createMuteConfig: {
      name: "CreateMuteConfig",
      requestType: CreateMuteConfigRequest,
      requestStream: false,
      responseType: MuteConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              33,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              226,
              2,
              58,
              11,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              90,
              61,
              58,
              11,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              46,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              90,
              62,
              58,
              11,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              47,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              90,
              55,
              58,
              11,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              40,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              90,
              49,
              58,
              11,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              34,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              90,
              50,
              58,
              11,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              35,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              34,
              52,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
          578365834: [
            Buffer.from([
              139,
              1,
              18,
              43,
              10,
              6,
              112,
              97,
              114,
              101,
              110,
              116,
              18,
              33,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              18,
              48,
              10,
              6,
              112,
              97,
              114,
              101,
              110,
              116,
              18,
              38,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              18,
              42,
              10,
              6,
              112,
              97,
              114,
              101,
              110,
              116,
              18,
              32,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a notification config. */
    createNotificationConfig: {
      name: "CreateNotificationConfig",
      requestType: CreateNotificationConfigRequest,
      requestStream: false,
      responseType: NotificationConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              36,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              99,
              111,
              110,
              102,
              105,
              103,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              242,
              1,
              58,
              19,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              90,
              77,
              58,
              19,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              54,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              90,
              78,
              58,
              19,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              55,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              34,
              60,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a source. */
    createSource: {
      name: "CreateSource",
      requestType: CreateSourceRequest,
      requestStream: false,
      responseType: Source,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 115, 111, 117, 114, 99, 101])],
          578365826: [
            Buffer.from([
              46,
              58,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              36,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes an existing BigQuery export. */
    deleteBigQueryExport: {
      name: "DeleteBigQueryExport",
      requestType: DeleteBigQueryExportRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              167,
              1,
              90,
              52,
              42,
              50,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              112,
              111,
              114,
              116,
              115,
              47,
              42,
              125,
              90,
              53,
              42,
              51,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              112,
              111,
              114,
              116,
              115,
              47,
              42,
              125,
              42,
              56,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              112,
              111,
              114,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes an existing mute config. If no location is specified, default is
     * global.
     */
    deleteMuteConfig: {
      name: "DeleteMuteConfig",
      requestType: DeleteMuteConfigRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              148,
              2,
              90,
              54,
              42,
              52,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              90,
              36,
              42,
              34,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              90,
              48,
              42,
              46,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              90,
              37,
              42,
              35,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              90,
              49,
              42,
              47,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              42,
              40,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
          578365834: [
            Buffer.from([
              175,
              1,
              18,
              55,
              10,
              4,
              110,
              97,
              109,
              101,
              18,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              18,
              60,
              10,
              4,
              110,
              97,
              109,
              101,
              18,
              52,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              18,
              54,
              10,
              4,
              110,
              97,
              109,
              101,
              18,
              46,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
            ]),
          ],
        },
      },
    },
    /** Deletes a notification config. */
    deleteNotificationConfig: {
      name: "DeleteNotificationConfig",
      requestType: DeleteNotificationConfigRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              179,
              1,
              90,
              56,
              42,
              54,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              90,
              57,
              42,
              55,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              42,
              60,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a ResourceValueConfig. */
    deleteResourceValueConfig: {
      name: "DeleteResourceValueConfig",
      requestType: DeleteResourceValueConfigRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              116,
              90,
              63,
              42,
              61,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              86,
              97,
              108,
              117,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              42,
              49,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              86,
              97,
              108,
              117,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a BigQuery export. */
    getBigQueryExport: {
      name: "GetBigQueryExport",
      requestType: GetBigQueryExportRequest,
      requestStream: false,
      responseType: BigQueryExport,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              167,
              1,
              90,
              52,
              18,
              50,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              112,
              111,
              114,
              116,
              115,
              47,
              42,
              125,
              90,
              53,
              18,
              51,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              112,
              111,
              114,
              116,
              115,
              47,
              42,
              125,
              18,
              56,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              112,
              111,
              114,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Get the simulation by name or the latest simulation for the given
     * organization.
     */
    getSimulation: {
      name: "GetSimulation",
      requestType: GetSimulationRequest,
      requestStream: false,
      responseType: Simulation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              98,
              90,
              54,
              18,
              52,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              18,
              40,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Get the valued resource by name */
    getValuedResource: {
      name: "GetValuedResource",
      requestType: GetValuedResourceRequest,
      requestStream: false,
      responseType: ValuedResource,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              134,
              1,
              90,
              72,
              18,
              70,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              97,
              108,
              117,
              101,
              100,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              18,
              58,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              97,
              108,
              117,
              101,
              100,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets the access control policy on the specified Source. */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 114, 101, 115, 111, 117, 114, 99, 101])],
          578365826: [
            Buffer.from([
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              50,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Gets a mute config. If no location is specified, default is
     * global.
     */
    getMuteConfig: {
      name: "GetMuteConfig",
      requestType: GetMuteConfigRequest,
      requestStream: false,
      responseType: MuteConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              148,
              2,
              90,
              54,
              18,
              52,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              90,
              36,
              18,
              34,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              90,
              48,
              18,
              46,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              90,
              37,
              18,
              35,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              90,
              49,
              18,
              47,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              18,
              40,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
          578365834: [
            Buffer.from([
              175,
              1,
              18,
              55,
              10,
              4,
              110,
              97,
              109,
              101,
              18,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              18,
              60,
              10,
              4,
              110,
              97,
              109,
              101,
              18,
              52,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              18,
              54,
              10,
              4,
              110,
              97,
              109,
              101,
              18,
              46,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
            ]),
          ],
        },
      },
    },
    /** Gets a notification config. */
    getNotificationConfig: {
      name: "GetNotificationConfig",
      requestType: GetNotificationConfigRequest,
      requestStream: false,
      responseType: NotificationConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              179,
              1,
              90,
              56,
              18,
              54,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              90,
              57,
              18,
              55,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              18,
              60,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a ResourceValueConfig. */
    getResourceValueConfig: {
      name: "GetResourceValueConfig",
      requestType: GetResourceValueConfigRequest,
      requestStream: false,
      responseType: ResourceValueConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              116,
              90,
              63,
              18,
              61,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              86,
              97,
              108,
              117,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              18,
              49,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              86,
              97,
              108,
              117,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a source. */
    getSource: {
      name: "GetSource",
      requestType: GetSourceRequest,
      requestStream: false,
      responseType: Source,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              38,
              18,
              36,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Filters an organization or source's findings and groups them by their
     * specified properties in a location. If no location is specified, findings
     * are assumed to be in global
     *
     * To group across all sources provide a `-` as the source id.
     * The following list shows some examples:
     *
     * + `/v2/organizations/{organization_id}/sources/-/findings`
     * +
     * `/v2/organizations/{organization_id}/sources/-/locations/{location_id}/findings`
     * + `/v2/folders/{folder_id}/sources/-/findings`
     * + `/v2/folders/{folder_id}/sources/-/locations/{location_id}/findings`
     * + `/v2/projects/{project_id}/sources/-/findings`
     * + `/v2/projects/{project_id}/sources/-/locations/{location_id}/findings`
     */
    groupFindings: {
      name: "GroupFindings",
      requestType: GroupFindingsRequest,
      requestStream: false,
      responseType: GroupFindingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 103, 114, 111, 117, 112, 95, 98, 121])],
          578365826: [
            Buffer.from([
              244,
              2,
              58,
              1,
              42,
              90,
              70,
              58,
              1,
              42,
              34,
              65,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              103,
              114,
              111,
              117,
              112,
              90,
              52,
              58,
              1,
              42,
              34,
              47,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              103,
              114,
              111,
              117,
              112,
              90,
              64,
              58,
              1,
              42,
              34,
              59,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              103,
              114,
              111,
              117,
              112,
              90,
              53,
              58,
              1,
              42,
              34,
              48,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              103,
              114,
              111,
              117,
              112,
              90,
              65,
              58,
              1,
              42,
              34,
              60,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              103,
              114,
              111,
              117,
              112,
              34,
              53,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              103,
              114,
              111,
              117,
              112,
            ]),
          ],
        },
      },
    },
    /**
     * Lists the attack paths for a set of simulation results or valued resources
     * and filter.
     */
    listAttackPaths: {
      name: "ListAttackPaths",
      requestType: ListAttackPathsRequest,
      requestStream: false,
      responseType: ListAttackPathsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              140,
              3,
              90,
              74,
              18,
              72,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              97,
              108,
              117,
              101,
              100,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              116,
              116,
              97,
              99,
              107,
              80,
              97,
              116,
              104,
              115,
              90,
              86,
              18,
              84,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              97,
              108,
              117,
              101,
              100,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              116,
              116,
              97,
              99,
              107,
              80,
              97,
              116,
              104,
              115,
              90,
              80,
              18,
              78,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              97,
              99,
              107,
              69,
              120,
              112,
              111,
              115,
              117,
              114,
              101,
              82,
              101,
              115,
              117,
              108,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              116,
              116,
              97,
              99,
              107,
              80,
              97,
              116,
              104,
              115,
              90,
              92,
              18,
              90,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              97,
              99,
              107,
              69,
              120,
              112,
              111,
              115,
              117,
              114,
              101,
              82,
              101,
              115,
              117,
              108,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              116,
              116,
              97,
              99,
              107,
              80,
              97,
              116,
              104,
              115,
              18,
              54,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              116,
              116,
              97,
              99,
              107,
              80,
              97,
              116,
              104,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists BigQuery exports. Note that when requesting BigQuery exports at a
     * given level all exports under that level are also returned e.g. if
     * requesting BigQuery exports under a folder, then all BigQuery exports
     * immediately under the folder plus the ones created under the projects
     * within the folder are returned.
     */
    listBigQueryExports: {
      name: "ListBigQueryExports",
      requestType: ListBigQueryExportsRequest,
      requestStream: false,
      responseType: ListBigQueryExportsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              167,
              1,
              90,
              52,
              18,
              50,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              112,
              111,
              114,
              116,
              115,
              90,
              53,
              18,
              51,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              112,
              111,
              114,
              116,
              115,
              18,
              56,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              112,
              111,
              114,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists an organization or source's findings.
     *
     * To list across all sources for a given location provide a `-` as the source
     * id. If no location is specified, finding are assumed to be in global.
     * The following list shows some examples:
     *
     * + `/v2/organizations/{organization_id}/sources/-/findings`
     * +
     * `/v2/organizations/{organization_id}/sources/-/locations/{location_id}/findings`
     */
    listFindings: {
      name: "ListFindings",
      requestType: ListFindingsRequest,
      requestStream: false,
      responseType: ListFindingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              190,
              2,
              90,
              61,
              18,
              59,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              90,
              43,
              18,
              41,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              90,
              55,
              18,
              53,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              90,
              44,
              18,
              42,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              90,
              56,
              18,
              54,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              18,
              47,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists mute configs. If no location is specified, default is
     * global.
     */
    listMuteConfigs: {
      name: "ListMuteConfigs",
      requestType: ListMuteConfigsRequest,
      requestStream: false,
      responseType: ListMuteConfigsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              148,
              2,
              90,
              54,
              18,
              52,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              90,
              36,
              18,
              34,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              90,
              48,
              18,
              46,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              90,
              37,
              18,
              35,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              90,
              49,
              18,
              47,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              18,
              40,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
          578365834: [
            Buffer.from([
              175,
              1,
              18,
              55,
              10,
              6,
              112,
              97,
              114,
              101,
              110,
              116,
              18,
              45,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              18,
              60,
              10,
              6,
              112,
              97,
              114,
              101,
              110,
              116,
              18,
              50,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              18,
              54,
              10,
              6,
              112,
              97,
              114,
              101,
              110,
              116,
              18,
              44,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists notification configs. */
    listNotificationConfigs: {
      name: "ListNotificationConfigs",
      requestType: ListNotificationConfigsRequest,
      requestStream: false,
      responseType: ListNotificationConfigsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              179,
              1,
              90,
              56,
              18,
              54,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              90,
              57,
              18,
              55,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              18,
              60,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists all ResourceValueConfigs. */
    listResourceValueConfigs: {
      name: "ListResourceValueConfigs",
      requestType: ListResourceValueConfigsRequest,
      requestStream: false,
      responseType: ListResourceValueConfigsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              116,
              90,
              63,
              18,
              61,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              86,
              97,
              108,
              117,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              18,
              49,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              86,
              97,
              108,
              117,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists all sources belonging to an organization. */
    listSources: {
      name: "ListSources",
      requestType: ListSourcesRequest,
      requestStream: false,
      responseType: ListSourcesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              107,
              90,
              32,
              18,
              30,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              90,
              33,
              18,
              31,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              18,
              36,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists the valued resources for a set of simulation results and filter. */
    listValuedResources: {
      name: "ListValuedResources",
      requestType: ListValuedResourcesRequest,
      requestStream: false,
      responseType: ListValuedResourcesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              146,
              1,
              90,
              84,
              18,
              82,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              97,
              99,
              107,
              69,
              120,
              112,
              111,
              115,
              117,
              114,
              101,
              82,
              101,
              115,
              117,
              108,
              116,
              115,
              47,
              42,
              125,
              47,
              118,
              97,
              108,
              117,
              101,
              100,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              18,
              58,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              118,
              97,
              108,
              117,
              101,
              100,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the state of a finding. If no location is specified, finding is
     * assumed to be in global
     */
    setFindingState: {
      name: "SetFindingState",
      requestType: SetFindingStateRequest,
      requestStream: false,
      responseType: Finding,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 110, 97, 109, 101, 44, 115, 116, 97, 116, 101])],
          578365826: [
            Buffer.from([
              134,
              3,
              58,
              1,
              42,
              90,
              73,
              58,
              1,
              42,
              34,
              68,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              83,
              116,
              97,
              116,
              101,
              90,
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              83,
              116,
              97,
              116,
              101,
              90,
              67,
              58,
              1,
              42,
              34,
              62,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              83,
              116,
              97,
              116,
              101,
              90,
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              83,
              116,
              97,
              116,
              101,
              90,
              68,
              58,
              1,
              42,
              34,
              63,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              83,
              116,
              97,
              116,
              101,
              34,
              56,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              83,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Sets the access control policy on the specified Source. */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 114, 101, 115, 111, 117, 114, 99, 101, 44, 112, 111, 108, 105, 99, 121])],
          578365826: [
            Buffer.from([
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              50,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the mute state of a finding. If no location is specified, finding
     * is assumed to be in global
     */
    setMute: {
      name: "SetMute",
      requestType: SetMuteRequest,
      requestStream: false,
      responseType: Finding,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([9, 110, 97, 109, 101, 44, 109, 117, 116, 101])],
          578365826: [
            Buffer.from([
              128,
              3,
              58,
              1,
              42,
              90,
              72,
              58,
              1,
              42,
              34,
              67,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              77,
              117,
              116,
              101,
              90,
              54,
              58,
              1,
              42,
              34,
              49,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              77,
              117,
              116,
              101,
              90,
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              77,
              117,
              116,
              101,
              90,
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              77,
              117,
              116,
              101,
              90,
              67,
              58,
              1,
              42,
              34,
              62,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              77,
              117,
              116,
              101,
              34,
              55,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              77,
              117,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Returns the permissions that a caller has on the specified source. */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              64,
              58,
              1,
              42,
              34,
              59,
              47,
              118,
              50,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a BigQuery export. */
    updateBigQueryExport: {
      name: "UpdateBigQueryExport",
      requestType: UpdateBigQueryExportRequest,
      requestStream: false,
      responseType: BigQueryExport,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              28,
              98,
              105,
              103,
              95,
              113,
              117,
              101,
              114,
              121,
              95,
              101,
              120,
              112,
              111,
              114,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              144,
              2,
              58,
              16,
              98,
              105,
              103,
              95,
              113,
              117,
              101,
              114,
              121,
              95,
              101,
              120,
              112,
              111,
              114,
              116,
              90,
              87,
              58,
              16,
              98,
              105,
              103,
              95,
              113,
              117,
              101,
              114,
              121,
              95,
              101,
              120,
              112,
              111,
              114,
              116,
              50,
              67,
              47,
              118,
              50,
              47,
              123,
              98,
              105,
              103,
              95,
              113,
              117,
              101,
              114,
              121,
              95,
              101,
              120,
              112,
              111,
              114,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              112,
              111,
              114,
              116,
              115,
              47,
              42,
              125,
              90,
              88,
              58,
              16,
              98,
              105,
              103,
              95,
              113,
              117,
              101,
              114,
              121,
              95,
              101,
              120,
              112,
              111,
              114,
              116,
              50,
              68,
              47,
              118,
              50,
              47,
              123,
              98,
              105,
              103,
              95,
              113,
              117,
              101,
              114,
              121,
              95,
              101,
              120,
              112,
              111,
              114,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              112,
              111,
              114,
              116,
              115,
              47,
              42,
              125,
              50,
              73,
              47,
              118,
              50,
              47,
              123,
              98,
              105,
              103,
              95,
              113,
              117,
              101,
              114,
              121,
              95,
              101,
              120,
              112,
              111,
              114,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              112,
              111,
              114,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates external system. This is for a given finding. If no location is
     * specified, finding is assumed to be in global
     */
    updateExternalSystem: {
      name: "UpdateExternalSystem",
      requestType: UpdateExternalSystemRequest,
      requestStream: false,
      responseType: ExternalSystem,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              115,
              121,
              115,
              116,
              101,
              109,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              240,
              4,
              58,
              15,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              115,
              121,
              115,
              116,
              101,
              109,
              90,
              112,
              58,
              15,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              115,
              121,
              115,
              116,
              101,
              109,
              50,
              93,
              47,
              118,
              50,
              47,
              123,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              115,
              121,
              115,
              116,
              101,
              109,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              47,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              83,
              121,
              115,
              116,
              101,
              109,
              115,
              47,
              42,
              125,
              90,
              94,
              58,
              15,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              115,
              121,
              115,
              116,
              101,
              109,
              50,
              75,
              47,
              118,
              50,
              47,
              123,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              115,
              121,
              115,
              116,
              101,
              109,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              47,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              83,
              121,
              115,
              116,
              101,
              109,
              115,
              47,
              42,
              125,
              90,
              106,
              58,
              15,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              115,
              121,
              115,
              116,
              101,
              109,
              50,
              87,
              47,
              118,
              50,
              47,
              123,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              115,
              121,
              115,
              116,
              101,
              109,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              47,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              83,
              121,
              115,
              116,
              101,
              109,
              115,
              47,
              42,
              125,
              90,
              95,
              58,
              15,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              115,
              121,
              115,
              116,
              101,
              109,
              50,
              76,
              47,
              118,
              50,
              47,
              123,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              115,
              121,
              115,
              116,
              101,
              109,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              47,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              83,
              121,
              115,
              116,
              101,
              109,
              115,
              47,
              42,
              125,
              90,
              107,
              58,
              15,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              115,
              121,
              115,
              116,
              101,
              109,
              50,
              88,
              47,
              118,
              50,
              47,
              123,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              115,
              121,
              115,
              116,
              101,
              109,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              47,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              83,
              121,
              115,
              116,
              101,
              109,
              115,
              47,
              42,
              125,
              50,
              81,
              47,
              118,
              50,
              47,
              123,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              115,
              121,
              115,
              116,
              101,
              109,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              47,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              83,
              121,
              115,
              116,
              101,
              109,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates or updates a finding. If no location is specified, finding is
     * assumed to be in global. The corresponding source must exist for a finding
     * creation to succeed.
     */
    updateFinding: {
      name: "UpdateFinding",
      requestType: UpdateFindingRequest,
      requestStream: false,
      responseType: Finding,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              19,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              164,
              3,
              58,
              7,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              90,
              78,
              58,
              7,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              50,
              67,
              47,
              118,
              50,
              47,
              123,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              90,
              60,
              58,
              7,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              50,
              49,
              47,
              118,
              50,
              47,
              123,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              90,
              72,
              58,
              7,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              50,
              61,
              47,
              118,
              50,
              47,
              123,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              90,
              61,
              58,
              7,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              50,
              50,
              47,
              118,
              50,
              47,
              123,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              90,
              73,
              58,
              7,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              50,
              62,
              47,
              118,
              50,
              47,
              123,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              50,
              55,
              47,
              118,
              50,
              47,
              123,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a mute config. If no location is specified, default is
     * global.
     */
    updateMuteConfig: {
      name: "UpdateMuteConfig",
      requestType: UpdateMuteConfigRequest,
      requestStream: false,
      responseType: MuteConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              170,
              3,
              58,
              11,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              90,
              79,
              58,
              11,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              64,
              47,
              118,
              50,
              47,
              123,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              90,
              61,
              58,
              11,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              46,
              47,
              118,
              50,
              47,
              123,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              90,
              73,
              58,
              11,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              58,
              47,
              118,
              50,
              47,
              123,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              90,
              62,
              58,
              11,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              47,
              47,
              118,
              50,
              47,
              123,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              90,
              74,
              58,
              11,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              59,
              47,
              118,
              50,
              47,
              123,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              50,
              52,
              47,
              118,
              50,
              47,
              123,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
          578365834: [
            Buffer.from([
              211,
              1,
              18,
              67,
              10,
              16,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              18,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              18,
              72,
              10,
              16,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              18,
              52,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              18,
              66,
              10,
              16,
              109,
              117,
              116,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              18,
              46,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              109,
              117,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a notification config. The following update
     * fields are allowed: description, pubsub_topic, streaming_config.filter
     */
    updateNotificationConfig: {
      name: "UpdateNotificationConfig",
      requestType: UpdateNotificationConfigRequest,
      requestStream: false,
      responseType: NotificationConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              31,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              174,
              2,
              58,
              19,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              90,
              97,
              58,
              19,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              74,
              47,
              118,
              50,
              47,
              123,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              90,
              98,
              58,
              19,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              75,
              47,
              118,
              50,
              47,
              123,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              50,
              80,
              47,
              118,
              50,
              47,
              123,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates an existing ResourceValueConfigs with new rules. */
    updateResourceValueConfig: {
      name: "UpdateResourceValueConfig",
      requestType: UpdateResourceValueConfigRequest,
      requestStream: false,
      responseType: ResourceValueConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              33,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              118,
              97,
              108,
              117,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              206,
              1,
              58,
              21,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              118,
              97,
              108,
              117,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              90,
              108,
              58,
              21,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              118,
              97,
              108,
              117,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              83,
              47,
              118,
              50,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              118,
              97,
              108,
              117,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              86,
              97,
              108,
              117,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              50,
              71,
              47,
              118,
              50,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              118,
              97,
              108,
              117,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              86,
              97,
              108,
              117,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates security marks. For Finding Security marks, if no location is
     * specified, finding is assumed to be in global. Assets Security Marks can
     * only be accessed through global endpoint.
     */
    updateSecurityMarks: {
      name: "UpdateSecurityMarks",
      requestType: UpdateSecurityMarksRequest,
      requestStream: false,
      responseType: SecurityMarks,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              26,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              189,
              6,
              58,
              14,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              90,
              82,
              58,
              14,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              50,
              64,
              47,
              118,
              50,
              47,
              123,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              115,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              77,
              97,
              114,
              107,
              115,
              125,
              90,
              106,
              58,
              14,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              50,
              88,
              47,
              118,
              50,
              47,
              123,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              77,
              97,
              114,
              107,
              115,
              125,
              90,
              88,
              58,
              14,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              50,
              70,
              47,
              118,
              50,
              47,
              123,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              77,
              97,
              114,
              107,
              115,
              125,
              90,
              76,
              58,
              14,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              50,
              58,
              47,
              118,
              50,
              47,
              123,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              97,
              115,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              77,
              97,
              114,
              107,
              115,
              125,
              90,
              100,
              58,
              14,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              50,
              82,
              47,
              118,
              50,
              47,
              123,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              77,
              97,
              114,
              107,
              115,
              125,
              90,
              89,
              58,
              14,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              50,
              71,
              47,
              118,
              50,
              47,
              123,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              77,
              97,
              114,
              107,
              115,
              125,
              90,
              77,
              58,
              14,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              50,
              59,
              47,
              118,
              50,
              47,
              123,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              115,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              77,
              97,
              114,
              107,
              115,
              125,
              90,
              101,
              58,
              14,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              50,
              83,
              47,
              118,
              50,
              47,
              123,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              77,
              97,
              114,
              107,
              115,
              125,
              50,
              76,
              47,
              118,
              50,
              47,
              123,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              109,
              97,
              114,
              107,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              77,
              97,
              114,
              107,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a source. */
    updateSource: {
      name: "UpdateSource",
      requestType: UpdateSourceRequest,
      requestStream: false,
      responseType: Source,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([18, 115, 111, 117, 114, 99, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              53,
              58,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              50,
              43,
              47,
              118,
              50,
              47,
              123,
              115,
              111,
              117,
              114,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SecurityCenterServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a ResourceValueConfig for an organization. Maps user's tags to
   * difference resource values for use by the attack path simulation.
   */
  batchCreateResourceValueConfigs(
    request: BatchCreateResourceValueConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchCreateResourceValueConfigsResponse>>;
  /**
   * Kicks off an LRO to bulk mute findings for a parent based on a filter. If
   * no location is specified, findings are muted in global. The parent
   * can be either an organization, folder, or project. The findings matched by
   * the filter will be muted after the LRO is done.
   */
  bulkMuteFindings(
    request: BulkMuteFindingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates a BigQuery export. */
  createBigQueryExport(
    request: CreateBigQueryExportRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BigQueryExport>>;
  /**
   * Creates a finding in a location. The corresponding source must exist for
   * finding creation to succeed.
   */
  createFinding(request: CreateFindingRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Finding>>;
  /** Creates a mute config. */
  createMuteConfig(
    request: CreateMuteConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MuteConfig>>;
  /** Creates a notification config. */
  createNotificationConfig(
    request: CreateNotificationConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<NotificationConfig>>;
  /** Creates a source. */
  createSource(request: CreateSourceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Source>>;
  /** Deletes an existing BigQuery export. */
  deleteBigQueryExport(
    request: DeleteBigQueryExportRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Deletes an existing mute config. If no location is specified, default is
   * global.
   */
  deleteMuteConfig(
    request: DeleteMuteConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Deletes a notification config. */
  deleteNotificationConfig(
    request: DeleteNotificationConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Deletes a ResourceValueConfig. */
  deleteResourceValueConfig(
    request: DeleteResourceValueConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Gets a BigQuery export. */
  getBigQueryExport(
    request: GetBigQueryExportRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BigQueryExport>>;
  /**
   * Get the simulation by name or the latest simulation for the given
   * organization.
   */
  getSimulation(request: GetSimulationRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Simulation>>;
  /** Get the valued resource by name */
  getValuedResource(
    request: GetValuedResourceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ValuedResource>>;
  /** Gets the access control policy on the specified Source. */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Gets a mute config. If no location is specified, default is
   * global.
   */
  getMuteConfig(request: GetMuteConfigRequest, context: CallContext & CallContextExt): Promise<DeepPartial<MuteConfig>>;
  /** Gets a notification config. */
  getNotificationConfig(
    request: GetNotificationConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<NotificationConfig>>;
  /** Gets a ResourceValueConfig. */
  getResourceValueConfig(
    request: GetResourceValueConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResourceValueConfig>>;
  /** Gets a source. */
  getSource(request: GetSourceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Source>>;
  /**
   * Filters an organization or source's findings and groups them by their
   * specified properties in a location. If no location is specified, findings
   * are assumed to be in global
   *
   * To group across all sources provide a `-` as the source id.
   * The following list shows some examples:
   *
   * + `/v2/organizations/{organization_id}/sources/-/findings`
   * +
   * `/v2/organizations/{organization_id}/sources/-/locations/{location_id}/findings`
   * + `/v2/folders/{folder_id}/sources/-/findings`
   * + `/v2/folders/{folder_id}/sources/-/locations/{location_id}/findings`
   * + `/v2/projects/{project_id}/sources/-/findings`
   * + `/v2/projects/{project_id}/sources/-/locations/{location_id}/findings`
   */
  groupFindings(
    request: GroupFindingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GroupFindingsResponse>>;
  /**
   * Lists the attack paths for a set of simulation results or valued resources
   * and filter.
   */
  listAttackPaths(
    request: ListAttackPathsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAttackPathsResponse>>;
  /**
   * Lists BigQuery exports. Note that when requesting BigQuery exports at a
   * given level all exports under that level are also returned e.g. if
   * requesting BigQuery exports under a folder, then all BigQuery exports
   * immediately under the folder plus the ones created under the projects
   * within the folder are returned.
   */
  listBigQueryExports(
    request: ListBigQueryExportsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListBigQueryExportsResponse>>;
  /**
   * Lists an organization or source's findings.
   *
   * To list across all sources for a given location provide a `-` as the source
   * id. If no location is specified, finding are assumed to be in global.
   * The following list shows some examples:
   *
   * + `/v2/organizations/{organization_id}/sources/-/findings`
   * +
   * `/v2/organizations/{organization_id}/sources/-/locations/{location_id}/findings`
   */
  listFindings(
    request: ListFindingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListFindingsResponse>>;
  /**
   * Lists mute configs. If no location is specified, default is
   * global.
   */
  listMuteConfigs(
    request: ListMuteConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListMuteConfigsResponse>>;
  /** Lists notification configs. */
  listNotificationConfigs(
    request: ListNotificationConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListNotificationConfigsResponse>>;
  /** Lists all ResourceValueConfigs. */
  listResourceValueConfigs(
    request: ListResourceValueConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListResourceValueConfigsResponse>>;
  /** Lists all sources belonging to an organization. */
  listSources(
    request: ListSourcesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSourcesResponse>>;
  /** Lists the valued resources for a set of simulation results and filter. */
  listValuedResources(
    request: ListValuedResourcesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListValuedResourcesResponse>>;
  /**
   * Updates the state of a finding. If no location is specified, finding is
   * assumed to be in global
   */
  setFindingState(
    request: SetFindingStateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Finding>>;
  /** Sets the access control policy on the specified Source. */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Updates the mute state of a finding. If no location is specified, finding
   * is assumed to be in global
   */
  setMute(request: SetMuteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Finding>>;
  /** Returns the permissions that a caller has on the specified source. */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
  /** Updates a BigQuery export. */
  updateBigQueryExport(
    request: UpdateBigQueryExportRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BigQueryExport>>;
  /**
   * Updates external system. This is for a given finding. If no location is
   * specified, finding is assumed to be in global
   */
  updateExternalSystem(
    request: UpdateExternalSystemRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExternalSystem>>;
  /**
   * Creates or updates a finding. If no location is specified, finding is
   * assumed to be in global. The corresponding source must exist for a finding
   * creation to succeed.
   */
  updateFinding(request: UpdateFindingRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Finding>>;
  /**
   * Updates a mute config. If no location is specified, default is
   * global.
   */
  updateMuteConfig(
    request: UpdateMuteConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MuteConfig>>;
  /**
   * Updates a notification config. The following update
   * fields are allowed: description, pubsub_topic, streaming_config.filter
   */
  updateNotificationConfig(
    request: UpdateNotificationConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<NotificationConfig>>;
  /** Updates an existing ResourceValueConfigs with new rules. */
  updateResourceValueConfig(
    request: UpdateResourceValueConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResourceValueConfig>>;
  /**
   * Updates security marks. For Finding Security marks, if no location is
   * specified, finding is assumed to be in global. Assets Security Marks can
   * only be accessed through global endpoint.
   */
  updateSecurityMarks(
    request: UpdateSecurityMarksRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SecurityMarks>>;
  /** Updates a source. */
  updateSource(request: UpdateSourceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Source>>;
}

export interface SecurityCenterClient<CallOptionsExt = {}> {
  /**
   * Creates a ResourceValueConfig for an organization. Maps user's tags to
   * difference resource values for use by the attack path simulation.
   */
  batchCreateResourceValueConfigs(
    request: DeepPartial<BatchCreateResourceValueConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchCreateResourceValueConfigsResponse>;
  /**
   * Kicks off an LRO to bulk mute findings for a parent based on a filter. If
   * no location is specified, findings are muted in global. The parent
   * can be either an organization, folder, or project. The findings matched by
   * the filter will be muted after the LRO is done.
   */
  bulkMuteFindings(
    request: DeepPartial<BulkMuteFindingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates a BigQuery export. */
  createBigQueryExport(
    request: DeepPartial<CreateBigQueryExportRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BigQueryExport>;
  /**
   * Creates a finding in a location. The corresponding source must exist for
   * finding creation to succeed.
   */
  createFinding(request: DeepPartial<CreateFindingRequest>, options?: CallOptions & CallOptionsExt): Promise<Finding>;
  /** Creates a mute config. */
  createMuteConfig(
    request: DeepPartial<CreateMuteConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MuteConfig>;
  /** Creates a notification config. */
  createNotificationConfig(
    request: DeepPartial<CreateNotificationConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<NotificationConfig>;
  /** Creates a source. */
  createSource(request: DeepPartial<CreateSourceRequest>, options?: CallOptions & CallOptionsExt): Promise<Source>;
  /** Deletes an existing BigQuery export. */
  deleteBigQueryExport(
    request: DeepPartial<DeleteBigQueryExportRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Deletes an existing mute config. If no location is specified, default is
   * global.
   */
  deleteMuteConfig(
    request: DeepPartial<DeleteMuteConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Deletes a notification config. */
  deleteNotificationConfig(
    request: DeepPartial<DeleteNotificationConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Deletes a ResourceValueConfig. */
  deleteResourceValueConfig(
    request: DeepPartial<DeleteResourceValueConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Gets a BigQuery export. */
  getBigQueryExport(
    request: DeepPartial<GetBigQueryExportRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BigQueryExport>;
  /**
   * Get the simulation by name or the latest simulation for the given
   * organization.
   */
  getSimulation(
    request: DeepPartial<GetSimulationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Simulation>;
  /** Get the valued resource by name */
  getValuedResource(
    request: DeepPartial<GetValuedResourceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ValuedResource>;
  /** Gets the access control policy on the specified Source. */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Gets a mute config. If no location is specified, default is
   * global.
   */
  getMuteConfig(
    request: DeepPartial<GetMuteConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MuteConfig>;
  /** Gets a notification config. */
  getNotificationConfig(
    request: DeepPartial<GetNotificationConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<NotificationConfig>;
  /** Gets a ResourceValueConfig. */
  getResourceValueConfig(
    request: DeepPartial<GetResourceValueConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResourceValueConfig>;
  /** Gets a source. */
  getSource(request: DeepPartial<GetSourceRequest>, options?: CallOptions & CallOptionsExt): Promise<Source>;
  /**
   * Filters an organization or source's findings and groups them by their
   * specified properties in a location. If no location is specified, findings
   * are assumed to be in global
   *
   * To group across all sources provide a `-` as the source id.
   * The following list shows some examples:
   *
   * + `/v2/organizations/{organization_id}/sources/-/findings`
   * +
   * `/v2/organizations/{organization_id}/sources/-/locations/{location_id}/findings`
   * + `/v2/folders/{folder_id}/sources/-/findings`
   * + `/v2/folders/{folder_id}/sources/-/locations/{location_id}/findings`
   * + `/v2/projects/{project_id}/sources/-/findings`
   * + `/v2/projects/{project_id}/sources/-/locations/{location_id}/findings`
   */
  groupFindings(
    request: DeepPartial<GroupFindingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GroupFindingsResponse>;
  /**
   * Lists the attack paths for a set of simulation results or valued resources
   * and filter.
   */
  listAttackPaths(
    request: DeepPartial<ListAttackPathsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAttackPathsResponse>;
  /**
   * Lists BigQuery exports. Note that when requesting BigQuery exports at a
   * given level all exports under that level are also returned e.g. if
   * requesting BigQuery exports under a folder, then all BigQuery exports
   * immediately under the folder plus the ones created under the projects
   * within the folder are returned.
   */
  listBigQueryExports(
    request: DeepPartial<ListBigQueryExportsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListBigQueryExportsResponse>;
  /**
   * Lists an organization or source's findings.
   *
   * To list across all sources for a given location provide a `-` as the source
   * id. If no location is specified, finding are assumed to be in global.
   * The following list shows some examples:
   *
   * + `/v2/organizations/{organization_id}/sources/-/findings`
   * +
   * `/v2/organizations/{organization_id}/sources/-/locations/{location_id}/findings`
   */
  listFindings(
    request: DeepPartial<ListFindingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListFindingsResponse>;
  /**
   * Lists mute configs. If no location is specified, default is
   * global.
   */
  listMuteConfigs(
    request: DeepPartial<ListMuteConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListMuteConfigsResponse>;
  /** Lists notification configs. */
  listNotificationConfigs(
    request: DeepPartial<ListNotificationConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListNotificationConfigsResponse>;
  /** Lists all ResourceValueConfigs. */
  listResourceValueConfigs(
    request: DeepPartial<ListResourceValueConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListResourceValueConfigsResponse>;
  /** Lists all sources belonging to an organization. */
  listSources(
    request: DeepPartial<ListSourcesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSourcesResponse>;
  /** Lists the valued resources for a set of simulation results and filter. */
  listValuedResources(
    request: DeepPartial<ListValuedResourcesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListValuedResourcesResponse>;
  /**
   * Updates the state of a finding. If no location is specified, finding is
   * assumed to be in global
   */
  setFindingState(
    request: DeepPartial<SetFindingStateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Finding>;
  /** Sets the access control policy on the specified Source. */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Updates the mute state of a finding. If no location is specified, finding
   * is assumed to be in global
   */
  setMute(request: DeepPartial<SetMuteRequest>, options?: CallOptions & CallOptionsExt): Promise<Finding>;
  /** Returns the permissions that a caller has on the specified source. */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
  /** Updates a BigQuery export. */
  updateBigQueryExport(
    request: DeepPartial<UpdateBigQueryExportRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BigQueryExport>;
  /**
   * Updates external system. This is for a given finding. If no location is
   * specified, finding is assumed to be in global
   */
  updateExternalSystem(
    request: DeepPartial<UpdateExternalSystemRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExternalSystem>;
  /**
   * Creates or updates a finding. If no location is specified, finding is
   * assumed to be in global. The corresponding source must exist for a finding
   * creation to succeed.
   */
  updateFinding(request: DeepPartial<UpdateFindingRequest>, options?: CallOptions & CallOptionsExt): Promise<Finding>;
  /**
   * Updates a mute config. If no location is specified, default is
   * global.
   */
  updateMuteConfig(
    request: DeepPartial<UpdateMuteConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MuteConfig>;
  /**
   * Updates a notification config. The following update
   * fields are allowed: description, pubsub_topic, streaming_config.filter
   */
  updateNotificationConfig(
    request: DeepPartial<UpdateNotificationConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<NotificationConfig>;
  /** Updates an existing ResourceValueConfigs with new rules. */
  updateResourceValueConfig(
    request: DeepPartial<UpdateResourceValueConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResourceValueConfig>;
  /**
   * Updates security marks. For Finding Security marks, if no location is
   * specified, finding is assumed to be in global. Assets Security Marks can
   * only be accessed through global endpoint.
   */
  updateSecurityMarks(
    request: DeepPartial<UpdateSecurityMarksRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SecurityMarks>;
  /** Updates a source. */
  updateSource(request: DeepPartial<UpdateSourceRequest>, options?: CallOptions & CallOptionsExt): Promise<Source>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
