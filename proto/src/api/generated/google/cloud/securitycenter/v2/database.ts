// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v2/database.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.securitycenter.v2";

/**
 * Represents database access information, such as queries. A database may be a
 * sub-resource of an instance (as in the case of Cloud SQL instances or Cloud
 * Spanner instances), or the database instance itself. Some database resources
 * might not have the [full resource
 * name](https://google.aip.dev/122#full-resource-names) populated because these
 * resource types, such as Cloud SQL databases, are not yet supported by Cloud
 * Asset Inventory. In these cases only the display name is provided.
 */
export interface Database {
  /**
   * Some database resources may not have the [full resource
   * name](https://google.aip.dev/122#full-resource-names) populated because
   * these resource types are not yet supported by Cloud Asset Inventory (e.g.
   * Cloud SQL databases). In these cases only the display name will be
   * provided.
   * The [full resource name](https://google.aip.dev/122#full-resource-names) of
   * the database that the user connected to, if it is supported by Cloud Asset
   * Inventory.
   */
  name: string;
  /** The human-readable name of the database that the user connected to. */
  displayName: string;
  /**
   * The username used to connect to the database. The username might not be an
   * IAM principal and does not have a set format.
   */
  userName: string;
  /** The SQL statement that is associated with the database access. */
  query: string;
  /**
   * The target usernames, roles, or groups of an SQL privilege grant, which is
   * not an IAM policy change.
   */
  grantees: string[];
  /**
   * The version of the database, for example, POSTGRES_14.
   * See [the complete
   * list](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1/SqlDatabaseVersion).
   */
  version: string;
}

function createBaseDatabase(): Database {
  return { name: "", displayName: "", userName: "", query: "", grantees: [], version: "" };
}

export const Database: MessageFns<Database> = {
  encode(message: Database, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.userName !== "") {
      writer.uint32(26).string(message.userName);
    }
    if (message.query !== "") {
      writer.uint32(34).string(message.query);
    }
    for (const v of message.grantees) {
      writer.uint32(42).string(v!);
    }
    if (message.version !== "") {
      writer.uint32(50).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Database {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatabase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.query = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.grantees.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Database {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      grantees: globalThis.Array.isArray(object?.grantees) ? object.grantees.map((e: any) => globalThis.String(e)) : [],
      version: isSet(object.version) ? globalThis.String(object.version) : "",
    };
  },

  toJSON(message: Database): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.userName !== "") {
      obj.userName = message.userName;
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.grantees?.length) {
      obj.grantees = message.grantees;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create(base?: DeepPartial<Database>): Database {
    return Database.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Database>): Database {
    const message = createBaseDatabase();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.userName = object.userName ?? "";
    message.query = object.query ?? "";
    message.grantees = object.grantees?.map((e) => e) || [];
    message.version = object.version ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
