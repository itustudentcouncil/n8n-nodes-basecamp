// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v1/group_membership.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.securitycenter.v1";

/**
 * Contains details about groups of which this finding is a member. A group is a
 * collection of findings that are related in some way.
 */
export interface GroupMembership {
  /** Type of group. */
  groupType: GroupMembership_GroupType;
  /** ID of the group. */
  groupId: string;
}

/** Possible types of groups. */
export enum GroupMembership_GroupType {
  /** GROUP_TYPE_UNSPECIFIED - Default value. */
  GROUP_TYPE_UNSPECIFIED = 0,
  /** GROUP_TYPE_TOXIC_COMBINATION - Group represents a toxic combination. */
  GROUP_TYPE_TOXIC_COMBINATION = 1,
  UNRECOGNIZED = -1,
}

export function groupMembership_GroupTypeFromJSON(object: any): GroupMembership_GroupType {
  switch (object) {
    case 0:
    case "GROUP_TYPE_UNSPECIFIED":
      return GroupMembership_GroupType.GROUP_TYPE_UNSPECIFIED;
    case 1:
    case "GROUP_TYPE_TOXIC_COMBINATION":
      return GroupMembership_GroupType.GROUP_TYPE_TOXIC_COMBINATION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GroupMembership_GroupType.UNRECOGNIZED;
  }
}

export function groupMembership_GroupTypeToJSON(object: GroupMembership_GroupType): string {
  switch (object) {
    case GroupMembership_GroupType.GROUP_TYPE_UNSPECIFIED:
      return "GROUP_TYPE_UNSPECIFIED";
    case GroupMembership_GroupType.GROUP_TYPE_TOXIC_COMBINATION:
      return "GROUP_TYPE_TOXIC_COMBINATION";
    case GroupMembership_GroupType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseGroupMembership(): GroupMembership {
  return { groupType: 0, groupId: "" };
}

export const GroupMembership: MessageFns<GroupMembership> = {
  encode(message: GroupMembership, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.groupType !== 0) {
      writer.uint32(8).int32(message.groupType);
    }
    if (message.groupId !== "") {
      writer.uint32(18).string(message.groupId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupMembership {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupMembership();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.groupType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.groupId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupMembership {
    return {
      groupType: isSet(object.groupType) ? groupMembership_GroupTypeFromJSON(object.groupType) : 0,
      groupId: isSet(object.groupId) ? globalThis.String(object.groupId) : "",
    };
  },

  toJSON(message: GroupMembership): unknown {
    const obj: any = {};
    if (message.groupType !== 0) {
      obj.groupType = groupMembership_GroupTypeToJSON(message.groupType);
    }
    if (message.groupId !== "") {
      obj.groupId = message.groupId;
    }
    return obj;
  },

  create(base?: DeepPartial<GroupMembership>): GroupMembership {
    return GroupMembership.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GroupMembership>): GroupMembership {
    const message = createBaseGroupMembership();
    message.groupType = object.groupType ?? 0;
    message.groupId = object.groupId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
