// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v1/backup_disaster_recovery.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.securitycenter.v1";

/** Information related to Google Cloud Backup and DR Service findings. */
export interface BackupDisasterRecovery {
  /**
   * The name of a Backup and DR template which comprises one or more backup
   * policies. See the [Backup and DR
   * documentation](https://cloud.google.com/backup-disaster-recovery/docs/concepts/backup-plan#temp)
   * for more information. For example, `snap-ov`.
   */
  backupTemplate: string;
  /**
   * The names of Backup and DR policies that are associated with a template
   * and that define when to run a backup, how frequently to run a backup, and
   * how long to retain the backup image. For example, `onvaults`.
   */
  policies: string[];
  /**
   * The name of a Backup and DR host, which is managed by the backup and
   * recovery appliance and known to the management console. The host can be of
   * type Generic (for example, Compute Engine, SQL Server, Oracle DB, SMB file
   * system, etc.), vCenter, or an ESX server. See the [Backup and DR
   * documentation on
   * hosts](https://cloud.google.com/backup-disaster-recovery/docs/configuration/manage-hosts-and-their-applications)
   * for more information. For example, `centos7-01`.
   */
  host: string;
  /**
   * The names of Backup and DR applications. An application is a VM, database,
   * or file system on a managed host monitored by a backup and recovery
   * appliance. For example, `centos7-01-vol00`, `centos7-01-vol01`,
   * `centos7-01-vol02`.
   */
  applications: string[];
  /**
   * The name of the Backup and DR storage pool that the backup and recovery
   * appliance is storing data in. The storage pool could be of type Cloud,
   * Primary, Snapshot, or OnVault. See the [Backup and DR documentation on
   * storage
   * pools](https://cloud.google.com/backup-disaster-recovery/docs/concepts/storage-pools).
   * For example, `DiskPoolOne`.
   */
  storagePool: string;
  /**
   * The names of Backup and DR advanced policy options of a policy applying to
   * an application. See the [Backup and DR documentation on policy
   * options](https://cloud.google.com/backup-disaster-recovery/docs/create-plan/policy-settings).
   * For example, `skipofflineappsincongrp, nounmap`.
   */
  policyOptions: string[];
  /**
   * The name of the Backup and DR resource profile that specifies the storage
   * media for backups of application and VM data. See the [Backup and DR
   * documentation on
   * profiles](https://cloud.google.com/backup-disaster-recovery/docs/concepts/backup-plan#profile).
   * For example, `GCP`.
   */
  profile: string;
  /**
   * The name of the Backup and DR appliance that captures, moves, and manages
   * the lifecycle of backup data. For example, `backup-server-57137`.
   */
  appliance: string;
  /**
   * The backup type of the Backup and DR image.
   * For example, `Snapshot`, `Remote Snapshot`, `OnVault`.
   */
  backupType: string;
  /** The timestamp at which the Backup and DR backup was created. */
  backupCreateTime: Date | undefined;
}

function createBaseBackupDisasterRecovery(): BackupDisasterRecovery {
  return {
    backupTemplate: "",
    policies: [],
    host: "",
    applications: [],
    storagePool: "",
    policyOptions: [],
    profile: "",
    appliance: "",
    backupType: "",
    backupCreateTime: undefined,
  };
}

export const BackupDisasterRecovery: MessageFns<BackupDisasterRecovery> = {
  encode(message: BackupDisasterRecovery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.backupTemplate !== "") {
      writer.uint32(10).string(message.backupTemplate);
    }
    for (const v of message.policies) {
      writer.uint32(18).string(v!);
    }
    if (message.host !== "") {
      writer.uint32(26).string(message.host);
    }
    for (const v of message.applications) {
      writer.uint32(34).string(v!);
    }
    if (message.storagePool !== "") {
      writer.uint32(42).string(message.storagePool);
    }
    for (const v of message.policyOptions) {
      writer.uint32(50).string(v!);
    }
    if (message.profile !== "") {
      writer.uint32(58).string(message.profile);
    }
    if (message.appliance !== "") {
      writer.uint32(66).string(message.appliance);
    }
    if (message.backupType !== "") {
      writer.uint32(74).string(message.backupType);
    }
    if (message.backupCreateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.backupCreateTime), writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupDisasterRecovery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupDisasterRecovery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.backupTemplate = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.policies.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.host = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.applications.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.storagePool = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.policyOptions.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.profile = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.appliance = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.backupType = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.backupCreateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupDisasterRecovery {
    return {
      backupTemplate: isSet(object.backupTemplate) ? globalThis.String(object.backupTemplate) : "",
      policies: globalThis.Array.isArray(object?.policies) ? object.policies.map((e: any) => globalThis.String(e)) : [],
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      applications: globalThis.Array.isArray(object?.applications)
        ? object.applications.map((e: any) => globalThis.String(e))
        : [],
      storagePool: isSet(object.storagePool) ? globalThis.String(object.storagePool) : "",
      policyOptions: globalThis.Array.isArray(object?.policyOptions)
        ? object.policyOptions.map((e: any) => globalThis.String(e))
        : [],
      profile: isSet(object.profile) ? globalThis.String(object.profile) : "",
      appliance: isSet(object.appliance) ? globalThis.String(object.appliance) : "",
      backupType: isSet(object.backupType) ? globalThis.String(object.backupType) : "",
      backupCreateTime: isSet(object.backupCreateTime) ? fromJsonTimestamp(object.backupCreateTime) : undefined,
    };
  },

  toJSON(message: BackupDisasterRecovery): unknown {
    const obj: any = {};
    if (message.backupTemplate !== "") {
      obj.backupTemplate = message.backupTemplate;
    }
    if (message.policies?.length) {
      obj.policies = message.policies;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.applications?.length) {
      obj.applications = message.applications;
    }
    if (message.storagePool !== "") {
      obj.storagePool = message.storagePool;
    }
    if (message.policyOptions?.length) {
      obj.policyOptions = message.policyOptions;
    }
    if (message.profile !== "") {
      obj.profile = message.profile;
    }
    if (message.appliance !== "") {
      obj.appliance = message.appliance;
    }
    if (message.backupType !== "") {
      obj.backupType = message.backupType;
    }
    if (message.backupCreateTime !== undefined) {
      obj.backupCreateTime = message.backupCreateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<BackupDisasterRecovery>): BackupDisasterRecovery {
    return BackupDisasterRecovery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BackupDisasterRecovery>): BackupDisasterRecovery {
    const message = createBaseBackupDisasterRecovery();
    message.backupTemplate = object.backupTemplate ?? "";
    message.policies = object.policies?.map((e) => e) || [];
    message.host = object.host ?? "";
    message.applications = object.applications?.map((e) => e) || [];
    message.storagePool = object.storagePool ?? "";
    message.policyOptions = object.policyOptions?.map((e) => e) || [];
    message.profile = object.profile ?? "";
    message.appliance = object.appliance ?? "";
    message.backupType = object.backupType ?? "";
    message.backupCreateTime = object.backupCreateTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
