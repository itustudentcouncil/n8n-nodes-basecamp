// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/batch/v1/volume.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.batch.v1";

/** Volume describes a volume and parameters for it to be mounted to a VM. */
export interface Volume {
  /**
   * A Network File System (NFS) volume. For example, a
   * Filestore file share.
   */
  nfs?:
    | NFS
    | undefined;
  /** A Google Cloud Storage (GCS) volume. */
  gcs?:
    | GCS
    | undefined;
  /**
   * Device name of an attached disk volume, which should align with a
   * device_name specified by
   * job.allocation_policy.instances[0].policy.disks[i].device_name or
   * defined by the given instance template in
   * job.allocation_policy.instances[0].instance_template.
   */
  deviceName?:
    | string
    | undefined;
  /** The mount path for the volume, e.g. /mnt/disks/share. */
  mountPath: string;
  /**
   * Mount options vary based on the type of storage volume:
   *
   * * For a Cloud Storage bucket, all the mount options provided
   * by
   *   the [`gcsfuse` tool](https://cloud.google.com/storage/docs/gcsfuse-cli)
   *   are supported.
   * * For an existing persistent disk, all mount options provided by the
   *   [`mount` command](https://man7.org/linux/man-pages/man8/mount.8.html)
   *   except writing are supported. This is due to restrictions of
   *   [multi-writer
   *   mode](https://cloud.google.com/compute/docs/disks/sharing-disks-between-vms).
   * * For any other disk or a Network File System (NFS), all the
   *   mount options provided by the `mount` command are supported.
   */
  mountOptions: string[];
}

/** Represents an NFS volume. */
export interface NFS {
  /** The IP address of the NFS. */
  server: string;
  /** Remote source path exported from the NFS, e.g., "/share". */
  remotePath: string;
}

/** Represents a Google Cloud Storage volume. */
export interface GCS {
  /**
   * Remote path, either a bucket name or a subdirectory of a bucket, e.g.:
   * bucket_name, bucket_name/subdirectory/
   */
  remotePath: string;
}

function createBaseVolume(): Volume {
  return { nfs: undefined, gcs: undefined, deviceName: undefined, mountPath: "", mountOptions: [] };
}

export const Volume: MessageFns<Volume> = {
  encode(message: Volume, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nfs !== undefined) {
      NFS.encode(message.nfs, writer.uint32(10).fork()).join();
    }
    if (message.gcs !== undefined) {
      GCS.encode(message.gcs, writer.uint32(26).fork()).join();
    }
    if (message.deviceName !== undefined) {
      writer.uint32(50).string(message.deviceName);
    }
    if (message.mountPath !== "") {
      writer.uint32(34).string(message.mountPath);
    }
    for (const v of message.mountOptions) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Volume {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVolume();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nfs = NFS.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gcs = GCS.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.deviceName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.mountPath = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.mountOptions.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Volume {
    return {
      nfs: isSet(object.nfs) ? NFS.fromJSON(object.nfs) : undefined,
      gcs: isSet(object.gcs) ? GCS.fromJSON(object.gcs) : undefined,
      deviceName: isSet(object.deviceName) ? globalThis.String(object.deviceName) : undefined,
      mountPath: isSet(object.mountPath) ? globalThis.String(object.mountPath) : "",
      mountOptions: globalThis.Array.isArray(object?.mountOptions)
        ? object.mountOptions.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Volume): unknown {
    const obj: any = {};
    if (message.nfs !== undefined) {
      obj.nfs = NFS.toJSON(message.nfs);
    }
    if (message.gcs !== undefined) {
      obj.gcs = GCS.toJSON(message.gcs);
    }
    if (message.deviceName !== undefined) {
      obj.deviceName = message.deviceName;
    }
    if (message.mountPath !== "") {
      obj.mountPath = message.mountPath;
    }
    if (message.mountOptions?.length) {
      obj.mountOptions = message.mountOptions;
    }
    return obj;
  },

  create(base?: DeepPartial<Volume>): Volume {
    return Volume.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Volume>): Volume {
    const message = createBaseVolume();
    message.nfs = (object.nfs !== undefined && object.nfs !== null) ? NFS.fromPartial(object.nfs) : undefined;
    message.gcs = (object.gcs !== undefined && object.gcs !== null) ? GCS.fromPartial(object.gcs) : undefined;
    message.deviceName = object.deviceName ?? undefined;
    message.mountPath = object.mountPath ?? "";
    message.mountOptions = object.mountOptions?.map((e) => e) || [];
    return message;
  },
};

function createBaseNFS(): NFS {
  return { server: "", remotePath: "" };
}

export const NFS: MessageFns<NFS> = {
  encode(message: NFS, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.server !== "") {
      writer.uint32(10).string(message.server);
    }
    if (message.remotePath !== "") {
      writer.uint32(18).string(message.remotePath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NFS {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNFS();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.server = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.remotePath = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NFS {
    return {
      server: isSet(object.server) ? globalThis.String(object.server) : "",
      remotePath: isSet(object.remotePath) ? globalThis.String(object.remotePath) : "",
    };
  },

  toJSON(message: NFS): unknown {
    const obj: any = {};
    if (message.server !== "") {
      obj.server = message.server;
    }
    if (message.remotePath !== "") {
      obj.remotePath = message.remotePath;
    }
    return obj;
  },

  create(base?: DeepPartial<NFS>): NFS {
    return NFS.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NFS>): NFS {
    const message = createBaseNFS();
    message.server = object.server ?? "";
    message.remotePath = object.remotePath ?? "";
    return message;
  },
};

function createBaseGCS(): GCS {
  return { remotePath: "" };
}

export const GCS: MessageFns<GCS> = {
  encode(message: GCS, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.remotePath !== "") {
      writer.uint32(10).string(message.remotePath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GCS {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGCS();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.remotePath = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GCS {
    return { remotePath: isSet(object.remotePath) ? globalThis.String(object.remotePath) : "" };
  },

  toJSON(message: GCS): unknown {
    const obj: any = {};
    if (message.remotePath !== "") {
      obj.remotePath = message.remotePath;
    }
    return obj;
  },

  create(base?: DeepPartial<GCS>): GCS {
    return GCS.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GCS>): GCS {
    const message = createBaseGCS();
    message.remotePath = object.remotePath ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
