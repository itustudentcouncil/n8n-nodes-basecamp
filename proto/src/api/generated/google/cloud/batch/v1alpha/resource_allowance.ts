// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/batch/v1alpha/resource_allowance.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Interval } from "../../../type/interval.js";
import { Notification } from "./notification.js";

export const protobufPackage = "google.cloud.batch.v1alpha";

/**
 * A `CalendarPeriod` represents the abstract concept of a time period that
 * has a canonical start. All calendar times begin at 12 AM US and Canadian
 * Pacific Time (UTC-8).
 */
export enum CalendarPeriod {
  /** CALENDAR_PERIOD_UNSPECIFIED - Unspecified. */
  CALENDAR_PERIOD_UNSPECIFIED = 0,
  /**
   * MONTH - The month starts on the first date of the month and resets at the beginning
   * of each month.
   */
  MONTH = 1,
  /**
   * QUARTER - The quarter starts on dates January 1, April 1, July 1, and October 1 of
   * each year and resets at the beginning of the next quarter.
   */
  QUARTER = 2,
  /** YEAR - The year starts on January 1 and resets at the beginning of the next year. */
  YEAR = 3,
  /** WEEK - The week period starts and resets every Monday. */
  WEEK = 4,
  /** DAY - The day starts at 12:00am. */
  DAY = 5,
  UNRECOGNIZED = -1,
}

export function calendarPeriodFromJSON(object: any): CalendarPeriod {
  switch (object) {
    case 0:
    case "CALENDAR_PERIOD_UNSPECIFIED":
      return CalendarPeriod.CALENDAR_PERIOD_UNSPECIFIED;
    case 1:
    case "MONTH":
      return CalendarPeriod.MONTH;
    case 2:
    case "QUARTER":
      return CalendarPeriod.QUARTER;
    case 3:
    case "YEAR":
      return CalendarPeriod.YEAR;
    case 4:
    case "WEEK":
      return CalendarPeriod.WEEK;
    case 5:
    case "DAY":
      return CalendarPeriod.DAY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CalendarPeriod.UNRECOGNIZED;
  }
}

export function calendarPeriodToJSON(object: CalendarPeriod): string {
  switch (object) {
    case CalendarPeriod.CALENDAR_PERIOD_UNSPECIFIED:
      return "CALENDAR_PERIOD_UNSPECIFIED";
    case CalendarPeriod.MONTH:
      return "MONTH";
    case CalendarPeriod.QUARTER:
      return "QUARTER";
    case CalendarPeriod.YEAR:
      return "YEAR";
    case CalendarPeriod.WEEK:
      return "WEEK";
    case CalendarPeriod.DAY:
      return "DAY";
    case CalendarPeriod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** ResourceAllowance valid state. */
export enum ResourceAllowanceState {
  /** RESOURCE_ALLOWANCE_STATE_UNSPECIFIED - Unspecified. */
  RESOURCE_ALLOWANCE_STATE_UNSPECIFIED = 0,
  /** RESOURCE_ALLOWANCE_ACTIVE - ResourceAllowance is active and in use. */
  RESOURCE_ALLOWANCE_ACTIVE = 1,
  /** RESOURCE_ALLOWANCE_DEPLETED - ResourceAllowance limit is reached. */
  RESOURCE_ALLOWANCE_DEPLETED = 2,
  UNRECOGNIZED = -1,
}

export function resourceAllowanceStateFromJSON(object: any): ResourceAllowanceState {
  switch (object) {
    case 0:
    case "RESOURCE_ALLOWANCE_STATE_UNSPECIFIED":
      return ResourceAllowanceState.RESOURCE_ALLOWANCE_STATE_UNSPECIFIED;
    case 1:
    case "RESOURCE_ALLOWANCE_ACTIVE":
      return ResourceAllowanceState.RESOURCE_ALLOWANCE_ACTIVE;
    case 2:
    case "RESOURCE_ALLOWANCE_DEPLETED":
      return ResourceAllowanceState.RESOURCE_ALLOWANCE_DEPLETED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResourceAllowanceState.UNRECOGNIZED;
  }
}

export function resourceAllowanceStateToJSON(object: ResourceAllowanceState): string {
  switch (object) {
    case ResourceAllowanceState.RESOURCE_ALLOWANCE_STATE_UNSPECIFIED:
      return "RESOURCE_ALLOWANCE_STATE_UNSPECIFIED";
    case ResourceAllowanceState.RESOURCE_ALLOWANCE_ACTIVE:
      return "RESOURCE_ALLOWANCE_ACTIVE";
    case ResourceAllowanceState.RESOURCE_ALLOWANCE_DEPLETED:
      return "RESOURCE_ALLOWANCE_DEPLETED";
    case ResourceAllowanceState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The Resource Allowance description for Cloud Batch.
 * Only one Resource Allowance is supported now under a specific location and
 * project.
 */
export interface ResourceAllowance {
  /** The detail of usage resource allowance. */
  usageResourceAllowance?:
    | UsageResourceAllowance
    | undefined;
  /**
   * Identifier. ResourceAllowance name.
   * For example:
   * "projects/123456/locations/us-central1/resourceAllowances/resource-allowance-1".
   */
  name: string;
  /**
   * Output only. A system generated unique ID (in UUID4 format) for the
   * ResourceAllowance.
   */
  uid: string;
  /** Output only. Time when the ResourceAllowance was created. */
  createTime:
    | Date
    | undefined;
  /**
   * Optional. Labels are attributes that can be set and used by both the
   * user and by Batch. Labels must meet the following constraints:
   *
   * * Keys and values can contain only lowercase letters, numeric characters,
   * underscores, and dashes.
   * * All characters must use UTF-8 encoding, and international characters are
   * allowed.
   * * Keys must start with a lowercase letter or international character.
   * * Each resource is limited to a maximum of 64 labels.
   *
   * Both keys and values are additionally constrained to be <= 128 bytes.
   */
  labels: { [key: string]: string };
  /** Optional. Notification configurations. */
  notifications: Notification[];
}

export interface ResourceAllowance_LabelsEntry {
  key: string;
  value: string;
}

/** UsageResourceAllowance describes the detail of usage resource allowance. */
export interface UsageResourceAllowance {
  /** Required. Spec of a usage ResourceAllowance. */
  spec:
    | UsageResourceAllowanceSpec
    | undefined;
  /** Output only. Status of a usage ResourceAllowance. */
  status: UsageResourceAllowanceStatus | undefined;
}

/** Spec of a usage ResourceAllowance. */
export interface UsageResourceAllowanceSpec {
  /**
   * Required. Spec type is unique for each usage ResourceAllowance.
   * Batch now only supports type as "cpu-core-hours" for CPU usage consumption
   * tracking.
   */
  type: string;
  /**
   * Required. Threshold of a UsageResourceAllowance limiting how many resources
   * can be consumed for each type.
   */
  limit: UsageResourceAllowanceSpec_Limit | undefined;
}

/** UsageResourceAllowance limitation. */
export interface UsageResourceAllowanceSpec_Limit {
  /**
   * Optional. A CalendarPeriod represents the abstract concept of a time
   * period that has a canonical start.
   */
  calendarPeriod?:
    | CalendarPeriod
    | undefined;
  /**
   * Required. Limit value of a UsageResourceAllowance within its one
   * duration.
   *
   * Limit cannot be a negative value. Default is 0.
   * For example, you can set `limit` as 10000.0 with duration of the current
   * month by setting `calendar_period` field as monthly. That means in your
   * current month, 10000.0 is the core hour limitation that your resources
   * are allowed to consume.
   */
  limit?: number | undefined;
}

/** Status of a usage ResourceAllowance. */
export interface UsageResourceAllowanceStatus {
  /** Output only. ResourceAllowance state. */
  state: ResourceAllowanceState;
  /** Output only. ResourceAllowance consumption status for usage resources. */
  limitStatus:
    | UsageResourceAllowanceStatus_LimitStatus
    | undefined;
  /** Output only. The report of ResourceAllowance consumptions in a time period. */
  report: UsageResourceAllowanceStatus_ConsumptionReport | undefined;
}

/** UsageResourceAllowanceStatus detail about usage consumption. */
export interface UsageResourceAllowanceStatus_LimitStatus {
  /** Output only. The consumption interval. */
  consumptionInterval:
    | Interval
    | undefined;
  /**
   * Output only. Limit value of a UsageResourceAllowance within its one
   * duration.
   */
  limit?:
    | number
    | undefined;
  /** Output only. Accumulated consumption during `consumption_interval`. */
  consumed?: number | undefined;
}

export interface UsageResourceAllowanceStatus_PeriodConsumption {
  /** Output only. The consumption interval. */
  consumptionInterval:
    | Interval
    | undefined;
  /** Output only. Accumulated consumption during `consumption_interval`. */
  consumed?: number | undefined;
}

/**
 * ConsumptionReport is the report of ResourceAllowance consumptions in a time
 * period.
 */
export interface UsageResourceAllowanceStatus_ConsumptionReport {
  /**
   * Output only. ResourceAllowance consumptions in the latest calendar
   * period. Key is the calendar period in string format. Batch currently
   * supports HOUR, DAY, MONTH and YEAR.
   */
  latestPeriodConsumptions: { [key: string]: UsageResourceAllowanceStatus_PeriodConsumption };
}

export interface UsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry {
  key: string;
  value: UsageResourceAllowanceStatus_PeriodConsumption | undefined;
}

function createBaseResourceAllowance(): ResourceAllowance {
  return { usageResourceAllowance: undefined, name: "", uid: "", createTime: undefined, labels: {}, notifications: [] };
}

export const ResourceAllowance: MessageFns<ResourceAllowance> = {
  encode(message: ResourceAllowance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.usageResourceAllowance !== undefined) {
      UsageResourceAllowance.encode(message.usageResourceAllowance, writer.uint32(34).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uid !== "") {
      writer.uint32(18).string(message.uid);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      ResourceAllowance_LabelsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    for (const v of message.notifications) {
      Notification.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourceAllowance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourceAllowance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.usageResourceAllowance = UsageResourceAllowance.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = ResourceAllowance_LabelsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.labels[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.notifications.push(Notification.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourceAllowance {
    return {
      usageResourceAllowance: isSet(object.usageResourceAllowance)
        ? UsageResourceAllowance.fromJSON(object.usageResourceAllowance)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      notifications: globalThis.Array.isArray(object?.notifications)
        ? object.notifications.map((e: any) => Notification.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ResourceAllowance): unknown {
    const obj: any = {};
    if (message.usageResourceAllowance !== undefined) {
      obj.usageResourceAllowance = UsageResourceAllowance.toJSON(message.usageResourceAllowance);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.notifications?.length) {
      obj.notifications = message.notifications.map((e) => Notification.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ResourceAllowance>): ResourceAllowance {
    return ResourceAllowance.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResourceAllowance>): ResourceAllowance {
    const message = createBaseResourceAllowance();
    message.usageResourceAllowance =
      (object.usageResourceAllowance !== undefined && object.usageResourceAllowance !== null)
        ? UsageResourceAllowance.fromPartial(object.usageResourceAllowance)
        : undefined;
    message.name = object.name ?? "";
    message.uid = object.uid ?? "";
    message.createTime = object.createTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.notifications = object.notifications?.map((e) => Notification.fromPartial(e)) || [];
    return message;
  },
};

function createBaseResourceAllowance_LabelsEntry(): ResourceAllowance_LabelsEntry {
  return { key: "", value: "" };
}

export const ResourceAllowance_LabelsEntry: MessageFns<ResourceAllowance_LabelsEntry> = {
  encode(message: ResourceAllowance_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourceAllowance_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourceAllowance_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourceAllowance_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ResourceAllowance_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ResourceAllowance_LabelsEntry>): ResourceAllowance_LabelsEntry {
    return ResourceAllowance_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResourceAllowance_LabelsEntry>): ResourceAllowance_LabelsEntry {
    const message = createBaseResourceAllowance_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseUsageResourceAllowance(): UsageResourceAllowance {
  return { spec: undefined, status: undefined };
}

export const UsageResourceAllowance: MessageFns<UsageResourceAllowance> = {
  encode(message: UsageResourceAllowance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.spec !== undefined) {
      UsageResourceAllowanceSpec.encode(message.spec, writer.uint32(10).fork()).join();
    }
    if (message.status !== undefined) {
      UsageResourceAllowanceStatus.encode(message.status, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsageResourceAllowance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsageResourceAllowance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.spec = UsageResourceAllowanceSpec.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.status = UsageResourceAllowanceStatus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsageResourceAllowance {
    return {
      spec: isSet(object.spec) ? UsageResourceAllowanceSpec.fromJSON(object.spec) : undefined,
      status: isSet(object.status) ? UsageResourceAllowanceStatus.fromJSON(object.status) : undefined,
    };
  },

  toJSON(message: UsageResourceAllowance): unknown {
    const obj: any = {};
    if (message.spec !== undefined) {
      obj.spec = UsageResourceAllowanceSpec.toJSON(message.spec);
    }
    if (message.status !== undefined) {
      obj.status = UsageResourceAllowanceStatus.toJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<UsageResourceAllowance>): UsageResourceAllowance {
    return UsageResourceAllowance.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UsageResourceAllowance>): UsageResourceAllowance {
    const message = createBaseUsageResourceAllowance();
    message.spec = (object.spec !== undefined && object.spec !== null)
      ? UsageResourceAllowanceSpec.fromPartial(object.spec)
      : undefined;
    message.status = (object.status !== undefined && object.status !== null)
      ? UsageResourceAllowanceStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

function createBaseUsageResourceAllowanceSpec(): UsageResourceAllowanceSpec {
  return { type: "", limit: undefined };
}

export const UsageResourceAllowanceSpec: MessageFns<UsageResourceAllowanceSpec> = {
  encode(message: UsageResourceAllowanceSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.limit !== undefined) {
      UsageResourceAllowanceSpec_Limit.encode(message.limit, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsageResourceAllowanceSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsageResourceAllowanceSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.limit = UsageResourceAllowanceSpec_Limit.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsageResourceAllowanceSpec {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      limit: isSet(object.limit) ? UsageResourceAllowanceSpec_Limit.fromJSON(object.limit) : undefined,
    };
  },

  toJSON(message: UsageResourceAllowanceSpec): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.limit !== undefined) {
      obj.limit = UsageResourceAllowanceSpec_Limit.toJSON(message.limit);
    }
    return obj;
  },

  create(base?: DeepPartial<UsageResourceAllowanceSpec>): UsageResourceAllowanceSpec {
    return UsageResourceAllowanceSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UsageResourceAllowanceSpec>): UsageResourceAllowanceSpec {
    const message = createBaseUsageResourceAllowanceSpec();
    message.type = object.type ?? "";
    message.limit = (object.limit !== undefined && object.limit !== null)
      ? UsageResourceAllowanceSpec_Limit.fromPartial(object.limit)
      : undefined;
    return message;
  },
};

function createBaseUsageResourceAllowanceSpec_Limit(): UsageResourceAllowanceSpec_Limit {
  return { calendarPeriod: undefined, limit: undefined };
}

export const UsageResourceAllowanceSpec_Limit: MessageFns<UsageResourceAllowanceSpec_Limit> = {
  encode(message: UsageResourceAllowanceSpec_Limit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.calendarPeriod !== undefined) {
      writer.uint32(8).int32(message.calendarPeriod);
    }
    if (message.limit !== undefined) {
      writer.uint32(17).double(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsageResourceAllowanceSpec_Limit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsageResourceAllowanceSpec_Limit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.calendarPeriod = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.limit = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsageResourceAllowanceSpec_Limit {
    return {
      calendarPeriod: isSet(object.calendarPeriod) ? calendarPeriodFromJSON(object.calendarPeriod) : undefined,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,
    };
  },

  toJSON(message: UsageResourceAllowanceSpec_Limit): unknown {
    const obj: any = {};
    if (message.calendarPeriod !== undefined) {
      obj.calendarPeriod = calendarPeriodToJSON(message.calendarPeriod);
    }
    if (message.limit !== undefined) {
      obj.limit = message.limit;
    }
    return obj;
  },

  create(base?: DeepPartial<UsageResourceAllowanceSpec_Limit>): UsageResourceAllowanceSpec_Limit {
    return UsageResourceAllowanceSpec_Limit.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UsageResourceAllowanceSpec_Limit>): UsageResourceAllowanceSpec_Limit {
    const message = createBaseUsageResourceAllowanceSpec_Limit();
    message.calendarPeriod = object.calendarPeriod ?? undefined;
    message.limit = object.limit ?? undefined;
    return message;
  },
};

function createBaseUsageResourceAllowanceStatus(): UsageResourceAllowanceStatus {
  return { state: 0, limitStatus: undefined, report: undefined };
}

export const UsageResourceAllowanceStatus: MessageFns<UsageResourceAllowanceStatus> = {
  encode(message: UsageResourceAllowanceStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.limitStatus !== undefined) {
      UsageResourceAllowanceStatus_LimitStatus.encode(message.limitStatus, writer.uint32(18).fork()).join();
    }
    if (message.report !== undefined) {
      UsageResourceAllowanceStatus_ConsumptionReport.encode(message.report, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsageResourceAllowanceStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsageResourceAllowanceStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.limitStatus = UsageResourceAllowanceStatus_LimitStatus.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.report = UsageResourceAllowanceStatus_ConsumptionReport.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsageResourceAllowanceStatus {
    return {
      state: isSet(object.state) ? resourceAllowanceStateFromJSON(object.state) : 0,
      limitStatus: isSet(object.limitStatus)
        ? UsageResourceAllowanceStatus_LimitStatus.fromJSON(object.limitStatus)
        : undefined,
      report: isSet(object.report) ? UsageResourceAllowanceStatus_ConsumptionReport.fromJSON(object.report) : undefined,
    };
  },

  toJSON(message: UsageResourceAllowanceStatus): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = resourceAllowanceStateToJSON(message.state);
    }
    if (message.limitStatus !== undefined) {
      obj.limitStatus = UsageResourceAllowanceStatus_LimitStatus.toJSON(message.limitStatus);
    }
    if (message.report !== undefined) {
      obj.report = UsageResourceAllowanceStatus_ConsumptionReport.toJSON(message.report);
    }
    return obj;
  },

  create(base?: DeepPartial<UsageResourceAllowanceStatus>): UsageResourceAllowanceStatus {
    return UsageResourceAllowanceStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UsageResourceAllowanceStatus>): UsageResourceAllowanceStatus {
    const message = createBaseUsageResourceAllowanceStatus();
    message.state = object.state ?? 0;
    message.limitStatus = (object.limitStatus !== undefined && object.limitStatus !== null)
      ? UsageResourceAllowanceStatus_LimitStatus.fromPartial(object.limitStatus)
      : undefined;
    message.report = (object.report !== undefined && object.report !== null)
      ? UsageResourceAllowanceStatus_ConsumptionReport.fromPartial(object.report)
      : undefined;
    return message;
  },
};

function createBaseUsageResourceAllowanceStatus_LimitStatus(): UsageResourceAllowanceStatus_LimitStatus {
  return { consumptionInterval: undefined, limit: undefined, consumed: undefined };
}

export const UsageResourceAllowanceStatus_LimitStatus: MessageFns<UsageResourceAllowanceStatus_LimitStatus> = {
  encode(message: UsageResourceAllowanceStatus_LimitStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consumptionInterval !== undefined) {
      Interval.encode(message.consumptionInterval, writer.uint32(10).fork()).join();
    }
    if (message.limit !== undefined) {
      writer.uint32(17).double(message.limit);
    }
    if (message.consumed !== undefined) {
      writer.uint32(25).double(message.consumed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsageResourceAllowanceStatus_LimitStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsageResourceAllowanceStatus_LimitStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.consumptionInterval = Interval.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.limit = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.consumed = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsageResourceAllowanceStatus_LimitStatus {
    return {
      consumptionInterval: isSet(object.consumptionInterval)
        ? Interval.fromJSON(object.consumptionInterval)
        : undefined,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,
      consumed: isSet(object.consumed) ? globalThis.Number(object.consumed) : undefined,
    };
  },

  toJSON(message: UsageResourceAllowanceStatus_LimitStatus): unknown {
    const obj: any = {};
    if (message.consumptionInterval !== undefined) {
      obj.consumptionInterval = Interval.toJSON(message.consumptionInterval);
    }
    if (message.limit !== undefined) {
      obj.limit = message.limit;
    }
    if (message.consumed !== undefined) {
      obj.consumed = message.consumed;
    }
    return obj;
  },

  create(base?: DeepPartial<UsageResourceAllowanceStatus_LimitStatus>): UsageResourceAllowanceStatus_LimitStatus {
    return UsageResourceAllowanceStatus_LimitStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UsageResourceAllowanceStatus_LimitStatus>): UsageResourceAllowanceStatus_LimitStatus {
    const message = createBaseUsageResourceAllowanceStatus_LimitStatus();
    message.consumptionInterval = (object.consumptionInterval !== undefined && object.consumptionInterval !== null)
      ? Interval.fromPartial(object.consumptionInterval)
      : undefined;
    message.limit = object.limit ?? undefined;
    message.consumed = object.consumed ?? undefined;
    return message;
  },
};

function createBaseUsageResourceAllowanceStatus_PeriodConsumption(): UsageResourceAllowanceStatus_PeriodConsumption {
  return { consumptionInterval: undefined, consumed: undefined };
}

export const UsageResourceAllowanceStatus_PeriodConsumption: MessageFns<
  UsageResourceAllowanceStatus_PeriodConsumption
> = {
  encode(
    message: UsageResourceAllowanceStatus_PeriodConsumption,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.consumptionInterval !== undefined) {
      Interval.encode(message.consumptionInterval, writer.uint32(10).fork()).join();
    }
    if (message.consumed !== undefined) {
      writer.uint32(17).double(message.consumed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsageResourceAllowanceStatus_PeriodConsumption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsageResourceAllowanceStatus_PeriodConsumption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.consumptionInterval = Interval.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.consumed = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsageResourceAllowanceStatus_PeriodConsumption {
    return {
      consumptionInterval: isSet(object.consumptionInterval)
        ? Interval.fromJSON(object.consumptionInterval)
        : undefined,
      consumed: isSet(object.consumed) ? globalThis.Number(object.consumed) : undefined,
    };
  },

  toJSON(message: UsageResourceAllowanceStatus_PeriodConsumption): unknown {
    const obj: any = {};
    if (message.consumptionInterval !== undefined) {
      obj.consumptionInterval = Interval.toJSON(message.consumptionInterval);
    }
    if (message.consumed !== undefined) {
      obj.consumed = message.consumed;
    }
    return obj;
  },

  create(
    base?: DeepPartial<UsageResourceAllowanceStatus_PeriodConsumption>,
  ): UsageResourceAllowanceStatus_PeriodConsumption {
    return UsageResourceAllowanceStatus_PeriodConsumption.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UsageResourceAllowanceStatus_PeriodConsumption>,
  ): UsageResourceAllowanceStatus_PeriodConsumption {
    const message = createBaseUsageResourceAllowanceStatus_PeriodConsumption();
    message.consumptionInterval = (object.consumptionInterval !== undefined && object.consumptionInterval !== null)
      ? Interval.fromPartial(object.consumptionInterval)
      : undefined;
    message.consumed = object.consumed ?? undefined;
    return message;
  },
};

function createBaseUsageResourceAllowanceStatus_ConsumptionReport(): UsageResourceAllowanceStatus_ConsumptionReport {
  return { latestPeriodConsumptions: {} };
}

export const UsageResourceAllowanceStatus_ConsumptionReport: MessageFns<
  UsageResourceAllowanceStatus_ConsumptionReport
> = {
  encode(
    message: UsageResourceAllowanceStatus_ConsumptionReport,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    Object.entries(message.latestPeriodConsumptions).forEach(([key, value]) => {
      UsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry.encode(
        { key: key as any, value },
        writer.uint32(10).fork(),
      ).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsageResourceAllowanceStatus_ConsumptionReport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsageResourceAllowanceStatus_ConsumptionReport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = UsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry.decode(
            reader,
            reader.uint32(),
          );
          if (entry1.value !== undefined) {
            message.latestPeriodConsumptions[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsageResourceAllowanceStatus_ConsumptionReport {
    return {
      latestPeriodConsumptions: isObject(object.latestPeriodConsumptions)
        ? Object.entries(object.latestPeriodConsumptions).reduce<
          { [key: string]: UsageResourceAllowanceStatus_PeriodConsumption }
        >((acc, [key, value]) => {
          acc[key] = UsageResourceAllowanceStatus_PeriodConsumption.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: UsageResourceAllowanceStatus_ConsumptionReport): unknown {
    const obj: any = {};
    if (message.latestPeriodConsumptions) {
      const entries = Object.entries(message.latestPeriodConsumptions);
      if (entries.length > 0) {
        obj.latestPeriodConsumptions = {};
        entries.forEach(([k, v]) => {
          obj.latestPeriodConsumptions[k] = UsageResourceAllowanceStatus_PeriodConsumption.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(
    base?: DeepPartial<UsageResourceAllowanceStatus_ConsumptionReport>,
  ): UsageResourceAllowanceStatus_ConsumptionReport {
    return UsageResourceAllowanceStatus_ConsumptionReport.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UsageResourceAllowanceStatus_ConsumptionReport>,
  ): UsageResourceAllowanceStatus_ConsumptionReport {
    const message = createBaseUsageResourceAllowanceStatus_ConsumptionReport();
    message.latestPeriodConsumptions = Object.entries(object.latestPeriodConsumptions ?? {}).reduce<
      { [key: string]: UsageResourceAllowanceStatus_PeriodConsumption }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = UsageResourceAllowanceStatus_PeriodConsumption.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseUsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry(): UsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry {
  return { key: "", value: undefined };
}

export const UsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry: MessageFns<
  UsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry
> = {
  encode(
    message: UsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      UsageResourceAllowanceStatus_PeriodConsumption.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = UsageResourceAllowanceStatus_PeriodConsumption.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? UsageResourceAllowanceStatus_PeriodConsumption.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: UsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = UsageResourceAllowanceStatus_PeriodConsumption.toJSON(message.value);
    }
    return obj;
  },

  create(
    base?: DeepPartial<UsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry>,
  ): UsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry {
    return UsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry>,
  ): UsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry {
    const message = createBaseUsageResourceAllowanceStatus_ConsumptionReport_LatestPeriodConsumptionsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? UsageResourceAllowanceStatus_PeriodConsumption.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
