// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gkemulticloud/v1/azure_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  AzureClient,
  AzureCluster,
  AzureJsonWebKeys,
  AzureNodePool,
  AzureOpenIdConfig,
  AzureServerConfig,
} from "./azure_resources.js";

export const protobufPackage = "google.cloud.gkemulticloud.v1";

/** Request message for `AzureClusters.CreateAzureCluster` method. */
export interface CreateAzureClusterRequest {
  /**
   * Required. The parent location where this
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource will be
   * created.
   *
   * Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  parent: string;
  /**
   * Required. The specification of the
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] to create.
   */
  azureCluster:
    | AzureCluster
    | undefined;
  /**
   * Required. A client provided ID the resource. Must be unique within the
   * parent resource.
   *
   * The provided ID will be part of the
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource name
   * formatted as
   * `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>`.
   *
   * Valid characters are `/[a-z][0-9]-/`. Cannot be longer than 63 characters.
   */
  azureClusterId: string;
  /** If set, only validate the request, but do not actually create the cluster. */
  validateOnly: boolean;
}

/** Request message for `AzureClusters.UpdateAzureCluster` method. */
export interface UpdateAzureClusterRequest {
  /**
   * Required. The [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
   * resource to update.
   */
  azureCluster:
    | AzureCluster
    | undefined;
  /** If set, only validate the request, but do not actually update the cluster. */
  validateOnly: boolean;
  /**
   * Required. Mask of fields to update. At least one path must be supplied in
   * this field. The elements of the repeated paths field can only include these
   * fields from [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]:
   *
   *  *   `description`.
   *  *   `azureClient`.
   *  *   `control_plane.version`.
   *  *   `control_plane.vm_size`.
   *  *   `annotations`.
   *  *   `authorization.admin_users`.
   *  *   `authorization.admin_groups`.
   *  *   `control_plane.root_volume.size_gib`.
   *  *   `azure_services_authentication`.
   *  *   `azure_services_authentication.tenant_id`.
   *  *   `azure_services_authentication.application_id`.
   *  *   `control_plane.proxy_config`.
   *  *   `control_plane.proxy_config.resource_group_id`.
   *  *   `control_plane.proxy_config.secret_id`.
   *  *   `control_plane.ssh_config.authorized_key`.
   *  *   `logging_config.component_config.enable_components`
   *  *   `monitoring_config.managed_prometheus_config.enabled`.
   */
  updateMask: string[] | undefined;
}

/** Request message for `AzureClusters.GetAzureCluster` method. */
export interface GetAzureClusterRequest {
  /**
   * Required. The name of the
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource to
   * describe.
   *
   * `AzureCluster` names are formatted as
   * `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud Platform resource names.
   */
  name: string;
}

/** Request message for `AzureClusters.ListAzureClusters` method. */
export interface ListAzureClustersRequest {
  /**
   * Required. The parent location which owns this collection of
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resources.
   *
   * Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud Platform resource names.
   */
  parent: string;
  /**
   * The maximum number of items to return.
   *
   * If not specified, a default value of 50 will be used by the service.
   * Regardless of the pageSize value, the response can include a partial list
   * and a caller should only rely on response's
   * [nextPageToken][google.cloud.gkemulticloud.v1.ListAzureClustersResponse.next_page_token]
   * to determine if there are more instances left to be queried.
   */
  pageSize: number;
  /**
   * The `nextPageToken` value returned from a previous
   * [azureClusters.list][google.cloud.gkemulticloud.v1.AzureClusters.ListAzureClusters]
   * request, if any.
   */
  pageToken: string;
}

/** Response message for `AzureClusters.ListAzureClusters` method. */
export interface ListAzureClustersResponse {
  /**
   * A list of [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
   * resources in the specified Google Cloud Platform project and region region.
   */
  azureClusters: AzureCluster[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/** Request message for `AzureClusters.DeleteAzureCluster` method. */
export interface DeleteAzureClusterRequest {
  /**
   * Required. The resource name the
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] to delete.
   *
   * `AzureCluster` names are formatted as
   * `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud Platform resource names.
   */
  name: string;
  /**
   * If set to true, and the
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource is not
   * found, the request will succeed but no action will be taken on the server
   * and a completed [Operation][google.longrunning.Operation] will be returned.
   *
   * Useful for idempotent deletion.
   */
  allowMissing: boolean;
  /** If set, only validate the request, but do not actually delete the resource. */
  validateOnly: boolean;
  /**
   * The current etag of the
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
   *
   * Allows clients to perform deletions through optimistic concurrency control.
   *
   * If the provided etag does not match the current etag of the cluster,
   * the request will fail and an ABORTED error will be returned.
   */
  etag: string;
  /**
   * Optional. If set to true, the deletion of
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource will
   * succeed even if errors occur during deleting in cluster resources. Using
   * this parameter may result in orphaned resources in the cluster.
   */
  ignoreErrors: boolean;
}

/** Response message for `AzureClusters.CreateAzureNodePool` method. */
export interface CreateAzureNodePoolRequest {
  /**
   * Required. The [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
   * resource where this node pool will be created.
   *
   * `AzureCluster` names are formatted as
   * `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  parent: string;
  /**
   * Required. The specification of the
   * [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] to create.
   */
  azureNodePool:
    | AzureNodePool
    | undefined;
  /**
   * Required. A client provided ID the resource. Must be unique within the
   * parent resource.
   *
   * The provided ID will be part of the
   * [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource name
   * formatted as
   * `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>/azureNodePools/<node-pool-id>`.
   *
   * Valid characters are `/[a-z][0-9]-/`. Cannot be longer than 63 characters.
   */
  azureNodePoolId: string;
  /**
   * If set, only validate the request, but do not actually create the node
   * pool.
   */
  validateOnly: boolean;
}

/** Request message for `AzureClusters.UpdateAzureNodePool` method. */
export interface UpdateAzureNodePoolRequest {
  /**
   * Required. The [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool]
   * resource to update.
   */
  azureNodePool:
    | AzureNodePool
    | undefined;
  /** If set, only validate the request, but don't actually update the node pool. */
  validateOnly: boolean;
  /**
   * Required. Mask of fields to update. At least one path must be supplied in
   * this field. The elements of the repeated paths field can only include these
   * fields from [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool]:
   *
   *  *.  `annotations`.
   *  *   `version`.
   *  *   `autoscaling.min_node_count`.
   *  *   `autoscaling.max_node_count`.
   *  *   `config.ssh_config.authorized_key`.
   *  *   `management.auto_repair`.
   *  *   `management`.
   */
  updateMask: string[] | undefined;
}

/** Request message for `AzureClusters.GetAzureNodePool` method. */
export interface GetAzureNodePoolRequest {
  /**
   * Required. The name of the
   * [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource to
   * describe.
   *
   * `AzureNodePool` names are formatted as
   * `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>/azureNodePools/<node-pool-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  name: string;
}

/** Request message for `AzureClusters.ListAzureNodePools` method. */
export interface ListAzureNodePoolsRequest {
  /**
   * Required. The parent `AzureCluster` which owns this collection of
   * [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resources.
   *
   * `AzureCluster` names are formatted as
   * `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  parent: string;
  /**
   * The maximum number of items to return.
   *
   * If not specified, a default value of 50 will be used by the service.
   * Regardless of the pageSize value, the response can include a partial list
   * and a caller should only rely on response's
   * [nextPageToken][google.cloud.gkemulticloud.v1.ListAzureNodePoolsResponse.next_page_token]
   * to determine if there are more instances left to be queried.
   */
  pageSize: number;
  /**
   * The `nextPageToken` value returned from a previous
   * [azureNodePools.list][google.cloud.gkemulticloud.v1.AzureClusters.ListAzureNodePools]
   * request, if any.
   */
  pageToken: string;
}

/** Response message for `AzureClusters.ListAzureNodePools` method. */
export interface ListAzureNodePoolsResponse {
  /**
   * A list of [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool]
   * resources in the specified `AzureCluster`.
   */
  azureNodePools: AzureNodePool[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/** Request message for `AzureClusters.DeleteAzureNodePool` method. */
export interface DeleteAzureNodePoolRequest {
  /**
   * Required. The resource name the
   * [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] to delete.
   *
   * `AzureNodePool` names are formatted as
   * `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>/azureNodePools/<node-pool-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  name: string;
  /**
   * If set, only validate the request, but do not actually delete the node
   * pool.
   */
  validateOnly: boolean;
  /**
   * If set to true, and the
   * [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource is
   * not found, the request will succeed but no action will be taken on the
   * server and a completed [Operation][google.longrunning.Operation] will be
   * returned.
   *
   * Useful for idempotent deletion.
   */
  allowMissing: boolean;
  /**
   * The current ETag of the
   * [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool].
   *
   * Allows clients to perform deletions through optimistic concurrency control.
   *
   * If the provided ETag does not match the current etag of the node pool,
   * the request will fail and an ABORTED error will be returned.
   */
  etag: string;
  /**
   * Optional. If set to true, the deletion of
   * [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource will
   * succeed even if errors occur during deleting in node pool resources. Using
   * this parameter may result in orphaned resources in the node pool.
   */
  ignoreErrors: boolean;
}

/**
 * GetAzureOpenIdConfigRequest gets the OIDC discovery document for the
 * cluster. See the OpenID Connect Discovery 1.0 specification for details.
 */
export interface GetAzureOpenIdConfigRequest {
  /**
   * Required. The AzureCluster, which owns the OIDC discovery document.
   * Format:
   * projects/<project-id>/locations/<region>/azureClusters/<cluster-id>
   */
  azureCluster: string;
}

/**
 * GetAzureJsonWebKeysRequest gets the public component of the keys used by the
 * cluster to sign token requests. This will be the jwks_uri for the discover
 * document returned by getOpenIDConfig. See the OpenID Connect
 * Discovery 1.0 specification for details.
 */
export interface GetAzureJsonWebKeysRequest {
  /**
   * Required. The AzureCluster, which owns the JsonWebKeys.
   * Format:
   * `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>`
   */
  azureCluster: string;
}

/** GetAzureServerConfigRequest gets the server config of GKE cluster on Azure. */
export interface GetAzureServerConfigRequest {
  /**
   * Required. The name of the
   * [AzureServerConfig][google.cloud.gkemulticloud.v1.AzureServerConfig]
   * resource to describe.
   *
   * `AzureServerConfig` names are formatted as
   * `projects/<project-id>/locations/<region>/azureServerConfig`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  name: string;
}

/** Request message for `AzureClusters.CreateAzureClient` method. */
export interface CreateAzureClientRequest {
  /**
   * Required. The parent location where this
   * [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] resource will be
   * created.
   *
   * Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  parent: string;
  /**
   * Required. The specification of the
   * [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] to create.
   */
  azureClient:
    | AzureClient
    | undefined;
  /**
   * Required. A client provided ID the resource. Must be unique within the
   * parent resource.
   *
   * The provided ID will be part of the
   * [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] resource name
   * formatted as
   * `projects/<project-id>/locations/<region>/azureClients/<client-id>`.
   *
   * Valid characters are `/[a-z][0-9]-/`. Cannot be longer than 63 characters.
   */
  azureClientId: string;
  /** If set, only validate the request, but do not actually create the client. */
  validateOnly: boolean;
}

/** Request message for `AzureClusters.GetAzureClient` method. */
export interface GetAzureClientRequest {
  /**
   * Required. The name of the
   * [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] resource to
   * describe.
   *
   * [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] names are
   * formatted as
   * `projects/<project-id>/locations/<region>/azureClients/<client-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  name: string;
}

/** Request message for `AzureClusters.ListAzureClients` method. */
export interface ListAzureClientsRequest {
  /**
   * Required. The parent location which owns this collection of
   * [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] resources.
   *
   * Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud Platform resource names.
   */
  parent: string;
  /**
   * The maximum number of items to return.
   *
   * If not specified, a default value of 50 will be used by the service.
   * Regardless of the pageSize value, the response can include a partial list
   * and a caller should only rely on response's
   * [nextPageToken][google.cloud.gkemulticloud.v1.ListAzureClientsResponse.next_page_token]
   * to determine if there are more instances left to be queried.
   */
  pageSize: number;
  /**
   * The `nextPageToken` value returned from a previous
   * [azureClients.list][google.cloud.gkemulticloud.v1.AzureClusters.ListAzureClients]
   * request, if any.
   */
  pageToken: string;
}

/** Response message for `AzureClusters.ListAzureClients` method. */
export interface ListAzureClientsResponse {
  /**
   * A list of [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
   * resources in the specified Google Cloud project and region region.
   */
  azureClients: AzureClient[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/** Request message for `AzureClusters.DeleteAzureClient` method. */
export interface DeleteAzureClientRequest {
  /**
   * Required. The resource name the
   * [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] to delete.
   *
   * [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] names are
   * formatted as
   * `projects/<project-id>/locations/<region>/azureClients/<client-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  name: string;
  /**
   * If set to true, and the
   * [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] resource is not
   * found, the request will succeed but no action will be taken on the server
   * and a completed [Operation][google.longrunning.Operation] will be returned.
   *
   * Useful for idempotent deletion.
   */
  allowMissing: boolean;
  /** If set, only validate the request, but do not actually delete the resource. */
  validateOnly: boolean;
}

/** Request message for `AzureClusters.GenerateAzureAccessToken` method. */
export interface GenerateAzureAccessTokenRequest {
  /**
   * Required. The name of the
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource to
   * authenticate to.
   *
   * `AzureCluster` names are formatted as
   * `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  azureCluster: string;
}

/** Response message for `AzureClusters.GenerateAzureAccessToken` method. */
export interface GenerateAzureAccessTokenResponse {
  /** Output only. Access token to authenticate to k8s api-server. */
  accessToken: string;
  /** Output only. Timestamp at which the token will expire. */
  expirationTime: Date | undefined;
}

export interface GenerateAzureClusterAgentTokenRequest {
  /** Required. */
  azureCluster: string;
  /** Required. */
  subjectToken: string;
  /** Required. */
  subjectTokenType: string;
  /** Required. */
  version: string;
  /** Optional. */
  nodePoolId: string;
  /** Optional. */
  grantType: string;
  /** Optional. */
  audience: string;
  /** Optional. */
  scope: string;
  /** Optional. */
  requestedTokenType: string;
  /** Optional. */
  options: string;
}

export interface GenerateAzureClusterAgentTokenResponse {
  accessToken: string;
  expiresIn: number;
  tokenType: string;
}

function createBaseCreateAzureClusterRequest(): CreateAzureClusterRequest {
  return { parent: "", azureCluster: undefined, azureClusterId: "", validateOnly: false };
}

export const CreateAzureClusterRequest: MessageFns<CreateAzureClusterRequest> = {
  encode(message: CreateAzureClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.azureCluster !== undefined) {
      AzureCluster.encode(message.azureCluster, writer.uint32(18).fork()).join();
    }
    if (message.azureClusterId !== "") {
      writer.uint32(26).string(message.azureClusterId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAzureClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAzureClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.azureCluster = AzureCluster.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.azureClusterId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAzureClusterRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      azureCluster: isSet(object.azureCluster) ? AzureCluster.fromJSON(object.azureCluster) : undefined,
      azureClusterId: isSet(object.azureClusterId) ? globalThis.String(object.azureClusterId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateAzureClusterRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.azureCluster !== undefined) {
      obj.azureCluster = AzureCluster.toJSON(message.azureCluster);
    }
    if (message.azureClusterId !== "") {
      obj.azureClusterId = message.azureClusterId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAzureClusterRequest>): CreateAzureClusterRequest {
    return CreateAzureClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAzureClusterRequest>): CreateAzureClusterRequest {
    const message = createBaseCreateAzureClusterRequest();
    message.parent = object.parent ?? "";
    message.azureCluster = (object.azureCluster !== undefined && object.azureCluster !== null)
      ? AzureCluster.fromPartial(object.azureCluster)
      : undefined;
    message.azureClusterId = object.azureClusterId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateAzureClusterRequest(): UpdateAzureClusterRequest {
  return { azureCluster: undefined, validateOnly: false, updateMask: undefined };
}

export const UpdateAzureClusterRequest: MessageFns<UpdateAzureClusterRequest> = {
  encode(message: UpdateAzureClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.azureCluster !== undefined) {
      AzureCluster.encode(message.azureCluster, writer.uint32(10).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAzureClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAzureClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.azureCluster = AzureCluster.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAzureClusterRequest {
    return {
      azureCluster: isSet(object.azureCluster) ? AzureCluster.fromJSON(object.azureCluster) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAzureClusterRequest): unknown {
    const obj: any = {};
    if (message.azureCluster !== undefined) {
      obj.azureCluster = AzureCluster.toJSON(message.azureCluster);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAzureClusterRequest>): UpdateAzureClusterRequest {
    return UpdateAzureClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAzureClusterRequest>): UpdateAzureClusterRequest {
    const message = createBaseUpdateAzureClusterRequest();
    message.azureCluster = (object.azureCluster !== undefined && object.azureCluster !== null)
      ? AzureCluster.fromPartial(object.azureCluster)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetAzureClusterRequest(): GetAzureClusterRequest {
  return { name: "" };
}

export const GetAzureClusterRequest: MessageFns<GetAzureClusterRequest> = {
  encode(message: GetAzureClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAzureClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAzureClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAzureClusterRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAzureClusterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAzureClusterRequest>): GetAzureClusterRequest {
    return GetAzureClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAzureClusterRequest>): GetAzureClusterRequest {
    const message = createBaseGetAzureClusterRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAzureClustersRequest(): ListAzureClustersRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAzureClustersRequest: MessageFns<ListAzureClustersRequest> = {
  encode(message: ListAzureClustersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAzureClustersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAzureClustersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAzureClustersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAzureClustersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAzureClustersRequest>): ListAzureClustersRequest {
    return ListAzureClustersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAzureClustersRequest>): ListAzureClustersRequest {
    const message = createBaseListAzureClustersRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAzureClustersResponse(): ListAzureClustersResponse {
  return { azureClusters: [], nextPageToken: "" };
}

export const ListAzureClustersResponse: MessageFns<ListAzureClustersResponse> = {
  encode(message: ListAzureClustersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.azureClusters) {
      AzureCluster.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAzureClustersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAzureClustersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.azureClusters.push(AzureCluster.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAzureClustersResponse {
    return {
      azureClusters: globalThis.Array.isArray(object?.azureClusters)
        ? object.azureClusters.map((e: any) => AzureCluster.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAzureClustersResponse): unknown {
    const obj: any = {};
    if (message.azureClusters?.length) {
      obj.azureClusters = message.azureClusters.map((e) => AzureCluster.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAzureClustersResponse>): ListAzureClustersResponse {
    return ListAzureClustersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAzureClustersResponse>): ListAzureClustersResponse {
    const message = createBaseListAzureClustersResponse();
    message.azureClusters = object.azureClusters?.map((e) => AzureCluster.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteAzureClusterRequest(): DeleteAzureClusterRequest {
  return { name: "", allowMissing: false, validateOnly: false, etag: "", ignoreErrors: false };
}

export const DeleteAzureClusterRequest: MessageFns<DeleteAzureClusterRequest> = {
  encode(message: DeleteAzureClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.allowMissing !== false) {
      writer.uint32(16).bool(message.allowMissing);
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    if (message.etag !== "") {
      writer.uint32(34).string(message.etag);
    }
    if (message.ignoreErrors !== false) {
      writer.uint32(40).bool(message.ignoreErrors);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAzureClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAzureClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.ignoreErrors = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAzureClusterRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      ignoreErrors: isSet(object.ignoreErrors) ? globalThis.Boolean(object.ignoreErrors) : false,
    };
  },

  toJSON(message: DeleteAzureClusterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.ignoreErrors !== false) {
      obj.ignoreErrors = message.ignoreErrors;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAzureClusterRequest>): DeleteAzureClusterRequest {
    return DeleteAzureClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAzureClusterRequest>): DeleteAzureClusterRequest {
    const message = createBaseDeleteAzureClusterRequest();
    message.name = object.name ?? "";
    message.allowMissing = object.allowMissing ?? false;
    message.validateOnly = object.validateOnly ?? false;
    message.etag = object.etag ?? "";
    message.ignoreErrors = object.ignoreErrors ?? false;
    return message;
  },
};

function createBaseCreateAzureNodePoolRequest(): CreateAzureNodePoolRequest {
  return { parent: "", azureNodePool: undefined, azureNodePoolId: "", validateOnly: false };
}

export const CreateAzureNodePoolRequest: MessageFns<CreateAzureNodePoolRequest> = {
  encode(message: CreateAzureNodePoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.azureNodePool !== undefined) {
      AzureNodePool.encode(message.azureNodePool, writer.uint32(18).fork()).join();
    }
    if (message.azureNodePoolId !== "") {
      writer.uint32(26).string(message.azureNodePoolId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAzureNodePoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAzureNodePoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.azureNodePool = AzureNodePool.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.azureNodePoolId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAzureNodePoolRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      azureNodePool: isSet(object.azureNodePool) ? AzureNodePool.fromJSON(object.azureNodePool) : undefined,
      azureNodePoolId: isSet(object.azureNodePoolId) ? globalThis.String(object.azureNodePoolId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateAzureNodePoolRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.azureNodePool !== undefined) {
      obj.azureNodePool = AzureNodePool.toJSON(message.azureNodePool);
    }
    if (message.azureNodePoolId !== "") {
      obj.azureNodePoolId = message.azureNodePoolId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAzureNodePoolRequest>): CreateAzureNodePoolRequest {
    return CreateAzureNodePoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAzureNodePoolRequest>): CreateAzureNodePoolRequest {
    const message = createBaseCreateAzureNodePoolRequest();
    message.parent = object.parent ?? "";
    message.azureNodePool = (object.azureNodePool !== undefined && object.azureNodePool !== null)
      ? AzureNodePool.fromPartial(object.azureNodePool)
      : undefined;
    message.azureNodePoolId = object.azureNodePoolId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateAzureNodePoolRequest(): UpdateAzureNodePoolRequest {
  return { azureNodePool: undefined, validateOnly: false, updateMask: undefined };
}

export const UpdateAzureNodePoolRequest: MessageFns<UpdateAzureNodePoolRequest> = {
  encode(message: UpdateAzureNodePoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.azureNodePool !== undefined) {
      AzureNodePool.encode(message.azureNodePool, writer.uint32(10).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAzureNodePoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAzureNodePoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.azureNodePool = AzureNodePool.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAzureNodePoolRequest {
    return {
      azureNodePool: isSet(object.azureNodePool) ? AzureNodePool.fromJSON(object.azureNodePool) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAzureNodePoolRequest): unknown {
    const obj: any = {};
    if (message.azureNodePool !== undefined) {
      obj.azureNodePool = AzureNodePool.toJSON(message.azureNodePool);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAzureNodePoolRequest>): UpdateAzureNodePoolRequest {
    return UpdateAzureNodePoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAzureNodePoolRequest>): UpdateAzureNodePoolRequest {
    const message = createBaseUpdateAzureNodePoolRequest();
    message.azureNodePool = (object.azureNodePool !== undefined && object.azureNodePool !== null)
      ? AzureNodePool.fromPartial(object.azureNodePool)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetAzureNodePoolRequest(): GetAzureNodePoolRequest {
  return { name: "" };
}

export const GetAzureNodePoolRequest: MessageFns<GetAzureNodePoolRequest> = {
  encode(message: GetAzureNodePoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAzureNodePoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAzureNodePoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAzureNodePoolRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAzureNodePoolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAzureNodePoolRequest>): GetAzureNodePoolRequest {
    return GetAzureNodePoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAzureNodePoolRequest>): GetAzureNodePoolRequest {
    const message = createBaseGetAzureNodePoolRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAzureNodePoolsRequest(): ListAzureNodePoolsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAzureNodePoolsRequest: MessageFns<ListAzureNodePoolsRequest> = {
  encode(message: ListAzureNodePoolsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAzureNodePoolsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAzureNodePoolsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAzureNodePoolsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAzureNodePoolsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAzureNodePoolsRequest>): ListAzureNodePoolsRequest {
    return ListAzureNodePoolsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAzureNodePoolsRequest>): ListAzureNodePoolsRequest {
    const message = createBaseListAzureNodePoolsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAzureNodePoolsResponse(): ListAzureNodePoolsResponse {
  return { azureNodePools: [], nextPageToken: "" };
}

export const ListAzureNodePoolsResponse: MessageFns<ListAzureNodePoolsResponse> = {
  encode(message: ListAzureNodePoolsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.azureNodePools) {
      AzureNodePool.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAzureNodePoolsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAzureNodePoolsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.azureNodePools.push(AzureNodePool.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAzureNodePoolsResponse {
    return {
      azureNodePools: globalThis.Array.isArray(object?.azureNodePools)
        ? object.azureNodePools.map((e: any) => AzureNodePool.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAzureNodePoolsResponse): unknown {
    const obj: any = {};
    if (message.azureNodePools?.length) {
      obj.azureNodePools = message.azureNodePools.map((e) => AzureNodePool.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAzureNodePoolsResponse>): ListAzureNodePoolsResponse {
    return ListAzureNodePoolsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAzureNodePoolsResponse>): ListAzureNodePoolsResponse {
    const message = createBaseListAzureNodePoolsResponse();
    message.azureNodePools = object.azureNodePools?.map((e) => AzureNodePool.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteAzureNodePoolRequest(): DeleteAzureNodePoolRequest {
  return { name: "", validateOnly: false, allowMissing: false, etag: "", ignoreErrors: false };
}

export const DeleteAzureNodePoolRequest: MessageFns<DeleteAzureNodePoolRequest> = {
  encode(message: DeleteAzureNodePoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    if (message.etag !== "") {
      writer.uint32(34).string(message.etag);
    }
    if (message.ignoreErrors !== false) {
      writer.uint32(40).bool(message.ignoreErrors);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAzureNodePoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAzureNodePoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.ignoreErrors = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAzureNodePoolRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      ignoreErrors: isSet(object.ignoreErrors) ? globalThis.Boolean(object.ignoreErrors) : false,
    };
  },

  toJSON(message: DeleteAzureNodePoolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.ignoreErrors !== false) {
      obj.ignoreErrors = message.ignoreErrors;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAzureNodePoolRequest>): DeleteAzureNodePoolRequest {
    return DeleteAzureNodePoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAzureNodePoolRequest>): DeleteAzureNodePoolRequest {
    const message = createBaseDeleteAzureNodePoolRequest();
    message.name = object.name ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.allowMissing = object.allowMissing ?? false;
    message.etag = object.etag ?? "";
    message.ignoreErrors = object.ignoreErrors ?? false;
    return message;
  },
};

function createBaseGetAzureOpenIdConfigRequest(): GetAzureOpenIdConfigRequest {
  return { azureCluster: "" };
}

export const GetAzureOpenIdConfigRequest: MessageFns<GetAzureOpenIdConfigRequest> = {
  encode(message: GetAzureOpenIdConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.azureCluster !== "") {
      writer.uint32(10).string(message.azureCluster);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAzureOpenIdConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAzureOpenIdConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.azureCluster = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAzureOpenIdConfigRequest {
    return { azureCluster: isSet(object.azureCluster) ? globalThis.String(object.azureCluster) : "" };
  },

  toJSON(message: GetAzureOpenIdConfigRequest): unknown {
    const obj: any = {};
    if (message.azureCluster !== "") {
      obj.azureCluster = message.azureCluster;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAzureOpenIdConfigRequest>): GetAzureOpenIdConfigRequest {
    return GetAzureOpenIdConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAzureOpenIdConfigRequest>): GetAzureOpenIdConfigRequest {
    const message = createBaseGetAzureOpenIdConfigRequest();
    message.azureCluster = object.azureCluster ?? "";
    return message;
  },
};

function createBaseGetAzureJsonWebKeysRequest(): GetAzureJsonWebKeysRequest {
  return { azureCluster: "" };
}

export const GetAzureJsonWebKeysRequest: MessageFns<GetAzureJsonWebKeysRequest> = {
  encode(message: GetAzureJsonWebKeysRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.azureCluster !== "") {
      writer.uint32(10).string(message.azureCluster);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAzureJsonWebKeysRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAzureJsonWebKeysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.azureCluster = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAzureJsonWebKeysRequest {
    return { azureCluster: isSet(object.azureCluster) ? globalThis.String(object.azureCluster) : "" };
  },

  toJSON(message: GetAzureJsonWebKeysRequest): unknown {
    const obj: any = {};
    if (message.azureCluster !== "") {
      obj.azureCluster = message.azureCluster;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAzureJsonWebKeysRequest>): GetAzureJsonWebKeysRequest {
    return GetAzureJsonWebKeysRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAzureJsonWebKeysRequest>): GetAzureJsonWebKeysRequest {
    const message = createBaseGetAzureJsonWebKeysRequest();
    message.azureCluster = object.azureCluster ?? "";
    return message;
  },
};

function createBaseGetAzureServerConfigRequest(): GetAzureServerConfigRequest {
  return { name: "" };
}

export const GetAzureServerConfigRequest: MessageFns<GetAzureServerConfigRequest> = {
  encode(message: GetAzureServerConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAzureServerConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAzureServerConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAzureServerConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAzureServerConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAzureServerConfigRequest>): GetAzureServerConfigRequest {
    return GetAzureServerConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAzureServerConfigRequest>): GetAzureServerConfigRequest {
    const message = createBaseGetAzureServerConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateAzureClientRequest(): CreateAzureClientRequest {
  return { parent: "", azureClient: undefined, azureClientId: "", validateOnly: false };
}

export const CreateAzureClientRequest: MessageFns<CreateAzureClientRequest> = {
  encode(message: CreateAzureClientRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.azureClient !== undefined) {
      AzureClient.encode(message.azureClient, writer.uint32(18).fork()).join();
    }
    if (message.azureClientId !== "") {
      writer.uint32(34).string(message.azureClientId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAzureClientRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAzureClientRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.azureClient = AzureClient.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.azureClientId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAzureClientRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      azureClient: isSet(object.azureClient) ? AzureClient.fromJSON(object.azureClient) : undefined,
      azureClientId: isSet(object.azureClientId) ? globalThis.String(object.azureClientId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateAzureClientRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.azureClient !== undefined) {
      obj.azureClient = AzureClient.toJSON(message.azureClient);
    }
    if (message.azureClientId !== "") {
      obj.azureClientId = message.azureClientId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAzureClientRequest>): CreateAzureClientRequest {
    return CreateAzureClientRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAzureClientRequest>): CreateAzureClientRequest {
    const message = createBaseCreateAzureClientRequest();
    message.parent = object.parent ?? "";
    message.azureClient = (object.azureClient !== undefined && object.azureClient !== null)
      ? AzureClient.fromPartial(object.azureClient)
      : undefined;
    message.azureClientId = object.azureClientId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseGetAzureClientRequest(): GetAzureClientRequest {
  return { name: "" };
}

export const GetAzureClientRequest: MessageFns<GetAzureClientRequest> = {
  encode(message: GetAzureClientRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAzureClientRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAzureClientRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAzureClientRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAzureClientRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAzureClientRequest>): GetAzureClientRequest {
    return GetAzureClientRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAzureClientRequest>): GetAzureClientRequest {
    const message = createBaseGetAzureClientRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAzureClientsRequest(): ListAzureClientsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAzureClientsRequest: MessageFns<ListAzureClientsRequest> = {
  encode(message: ListAzureClientsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAzureClientsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAzureClientsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAzureClientsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAzureClientsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAzureClientsRequest>): ListAzureClientsRequest {
    return ListAzureClientsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAzureClientsRequest>): ListAzureClientsRequest {
    const message = createBaseListAzureClientsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAzureClientsResponse(): ListAzureClientsResponse {
  return { azureClients: [], nextPageToken: "" };
}

export const ListAzureClientsResponse: MessageFns<ListAzureClientsResponse> = {
  encode(message: ListAzureClientsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.azureClients) {
      AzureClient.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAzureClientsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAzureClientsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.azureClients.push(AzureClient.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAzureClientsResponse {
    return {
      azureClients: globalThis.Array.isArray(object?.azureClients)
        ? object.azureClients.map((e: any) => AzureClient.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAzureClientsResponse): unknown {
    const obj: any = {};
    if (message.azureClients?.length) {
      obj.azureClients = message.azureClients.map((e) => AzureClient.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAzureClientsResponse>): ListAzureClientsResponse {
    return ListAzureClientsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAzureClientsResponse>): ListAzureClientsResponse {
    const message = createBaseListAzureClientsResponse();
    message.azureClients = object.azureClients?.map((e) => AzureClient.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteAzureClientRequest(): DeleteAzureClientRequest {
  return { name: "", allowMissing: false, validateOnly: false };
}

export const DeleteAzureClientRequest: MessageFns<DeleteAzureClientRequest> = {
  encode(message: DeleteAzureClientRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.allowMissing !== false) {
      writer.uint32(16).bool(message.allowMissing);
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAzureClientRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAzureClientRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAzureClientRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: DeleteAzureClientRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAzureClientRequest>): DeleteAzureClientRequest {
    return DeleteAzureClientRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAzureClientRequest>): DeleteAzureClientRequest {
    const message = createBaseDeleteAzureClientRequest();
    message.name = object.name ?? "";
    message.allowMissing = object.allowMissing ?? false;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseGenerateAzureAccessTokenRequest(): GenerateAzureAccessTokenRequest {
  return { azureCluster: "" };
}

export const GenerateAzureAccessTokenRequest: MessageFns<GenerateAzureAccessTokenRequest> = {
  encode(message: GenerateAzureAccessTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.azureCluster !== "") {
      writer.uint32(10).string(message.azureCluster);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateAzureAccessTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateAzureAccessTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.azureCluster = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateAzureAccessTokenRequest {
    return { azureCluster: isSet(object.azureCluster) ? globalThis.String(object.azureCluster) : "" };
  },

  toJSON(message: GenerateAzureAccessTokenRequest): unknown {
    const obj: any = {};
    if (message.azureCluster !== "") {
      obj.azureCluster = message.azureCluster;
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateAzureAccessTokenRequest>): GenerateAzureAccessTokenRequest {
    return GenerateAzureAccessTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateAzureAccessTokenRequest>): GenerateAzureAccessTokenRequest {
    const message = createBaseGenerateAzureAccessTokenRequest();
    message.azureCluster = object.azureCluster ?? "";
    return message;
  },
};

function createBaseGenerateAzureAccessTokenResponse(): GenerateAzureAccessTokenResponse {
  return { accessToken: "", expirationTime: undefined };
}

export const GenerateAzureAccessTokenResponse: MessageFns<GenerateAzureAccessTokenResponse> = {
  encode(message: GenerateAzureAccessTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.expirationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateAzureAccessTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateAzureAccessTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.expirationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateAzureAccessTokenResponse {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      expirationTime: isSet(object.expirationTime) ? fromJsonTimestamp(object.expirationTime) : undefined,
    };
  },

  toJSON(message: GenerateAzureAccessTokenResponse): unknown {
    const obj: any = {};
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.expirationTime !== undefined) {
      obj.expirationTime = message.expirationTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateAzureAccessTokenResponse>): GenerateAzureAccessTokenResponse {
    return GenerateAzureAccessTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateAzureAccessTokenResponse>): GenerateAzureAccessTokenResponse {
    const message = createBaseGenerateAzureAccessTokenResponse();
    message.accessToken = object.accessToken ?? "";
    message.expirationTime = object.expirationTime ?? undefined;
    return message;
  },
};

function createBaseGenerateAzureClusterAgentTokenRequest(): GenerateAzureClusterAgentTokenRequest {
  return {
    azureCluster: "",
    subjectToken: "",
    subjectTokenType: "",
    version: "",
    nodePoolId: "",
    grantType: "",
    audience: "",
    scope: "",
    requestedTokenType: "",
    options: "",
  };
}

export const GenerateAzureClusterAgentTokenRequest: MessageFns<GenerateAzureClusterAgentTokenRequest> = {
  encode(message: GenerateAzureClusterAgentTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.azureCluster !== "") {
      writer.uint32(10).string(message.azureCluster);
    }
    if (message.subjectToken !== "") {
      writer.uint32(18).string(message.subjectToken);
    }
    if (message.subjectTokenType !== "") {
      writer.uint32(26).string(message.subjectTokenType);
    }
    if (message.version !== "") {
      writer.uint32(34).string(message.version);
    }
    if (message.nodePoolId !== "") {
      writer.uint32(42).string(message.nodePoolId);
    }
    if (message.grantType !== "") {
      writer.uint32(50).string(message.grantType);
    }
    if (message.audience !== "") {
      writer.uint32(58).string(message.audience);
    }
    if (message.scope !== "") {
      writer.uint32(66).string(message.scope);
    }
    if (message.requestedTokenType !== "") {
      writer.uint32(74).string(message.requestedTokenType);
    }
    if (message.options !== "") {
      writer.uint32(82).string(message.options);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateAzureClusterAgentTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateAzureClusterAgentTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.azureCluster = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.subjectToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.subjectTokenType = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.version = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.nodePoolId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.grantType = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.audience = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.scope = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.requestedTokenType = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.options = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateAzureClusterAgentTokenRequest {
    return {
      azureCluster: isSet(object.azureCluster) ? globalThis.String(object.azureCluster) : "",
      subjectToken: isSet(object.subjectToken) ? globalThis.String(object.subjectToken) : "",
      subjectTokenType: isSet(object.subjectTokenType) ? globalThis.String(object.subjectTokenType) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      nodePoolId: isSet(object.nodePoolId) ? globalThis.String(object.nodePoolId) : "",
      grantType: isSet(object.grantType) ? globalThis.String(object.grantType) : "",
      audience: isSet(object.audience) ? globalThis.String(object.audience) : "",
      scope: isSet(object.scope) ? globalThis.String(object.scope) : "",
      requestedTokenType: isSet(object.requestedTokenType) ? globalThis.String(object.requestedTokenType) : "",
      options: isSet(object.options) ? globalThis.String(object.options) : "",
    };
  },

  toJSON(message: GenerateAzureClusterAgentTokenRequest): unknown {
    const obj: any = {};
    if (message.azureCluster !== "") {
      obj.azureCluster = message.azureCluster;
    }
    if (message.subjectToken !== "") {
      obj.subjectToken = message.subjectToken;
    }
    if (message.subjectTokenType !== "") {
      obj.subjectTokenType = message.subjectTokenType;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.nodePoolId !== "") {
      obj.nodePoolId = message.nodePoolId;
    }
    if (message.grantType !== "") {
      obj.grantType = message.grantType;
    }
    if (message.audience !== "") {
      obj.audience = message.audience;
    }
    if (message.scope !== "") {
      obj.scope = message.scope;
    }
    if (message.requestedTokenType !== "") {
      obj.requestedTokenType = message.requestedTokenType;
    }
    if (message.options !== "") {
      obj.options = message.options;
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateAzureClusterAgentTokenRequest>): GenerateAzureClusterAgentTokenRequest {
    return GenerateAzureClusterAgentTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateAzureClusterAgentTokenRequest>): GenerateAzureClusterAgentTokenRequest {
    const message = createBaseGenerateAzureClusterAgentTokenRequest();
    message.azureCluster = object.azureCluster ?? "";
    message.subjectToken = object.subjectToken ?? "";
    message.subjectTokenType = object.subjectTokenType ?? "";
    message.version = object.version ?? "";
    message.nodePoolId = object.nodePoolId ?? "";
    message.grantType = object.grantType ?? "";
    message.audience = object.audience ?? "";
    message.scope = object.scope ?? "";
    message.requestedTokenType = object.requestedTokenType ?? "";
    message.options = object.options ?? "";
    return message;
  },
};

function createBaseGenerateAzureClusterAgentTokenResponse(): GenerateAzureClusterAgentTokenResponse {
  return { accessToken: "", expiresIn: 0, tokenType: "" };
}

export const GenerateAzureClusterAgentTokenResponse: MessageFns<GenerateAzureClusterAgentTokenResponse> = {
  encode(message: GenerateAzureClusterAgentTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.expiresIn !== 0) {
      writer.uint32(16).int32(message.expiresIn);
    }
    if (message.tokenType !== "") {
      writer.uint32(26).string(message.tokenType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateAzureClusterAgentTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateAzureClusterAgentTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.expiresIn = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tokenType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateAzureClusterAgentTokenResponse {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      expiresIn: isSet(object.expiresIn) ? globalThis.Number(object.expiresIn) : 0,
      tokenType: isSet(object.tokenType) ? globalThis.String(object.tokenType) : "",
    };
  },

  toJSON(message: GenerateAzureClusterAgentTokenResponse): unknown {
    const obj: any = {};
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.expiresIn !== 0) {
      obj.expiresIn = Math.round(message.expiresIn);
    }
    if (message.tokenType !== "") {
      obj.tokenType = message.tokenType;
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateAzureClusterAgentTokenResponse>): GenerateAzureClusterAgentTokenResponse {
    return GenerateAzureClusterAgentTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateAzureClusterAgentTokenResponse>): GenerateAzureClusterAgentTokenResponse {
    const message = createBaseGenerateAzureClusterAgentTokenResponse();
    message.accessToken = object.accessToken ?? "";
    message.expiresIn = object.expiresIn ?? 0;
    message.tokenType = object.tokenType ?? "";
    return message;
  },
};

/**
 * The AzureClusters API provides a single centrally managed service
 * to create and manage Anthos clusters that run on Azure infrastructure.
 */
export type AzureClustersDefinition = typeof AzureClustersDefinition;
export const AzureClustersDefinition = {
  name: "AzureClusters",
  fullName: "google.cloud.gkemulticloud.v1.AzureClusters",
  methods: {
    /**
     * Creates a new [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
     * resource on a given Google Cloud project and region.
     *
     * `AzureClient` resources hold client authentication
     * information needed by the Anthos Multicloud API to manage Azure resources
     * on your Azure subscription on your behalf.
     *
     * If successful, the response contains a newly created
     * [Operation][google.longrunning.Operation] resource that can be
     * described to track the status of the operation.
     */
    createAzureClient: {
      name: "CreateAzureClient",
      requestType: CreateAzureClientRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              11,
              65,
              122,
              117,
              114,
              101,
              67,
              108,
              105,
              101,
              110,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              35,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              122,
              117,
              114,
              101,
              95,
              99,
              108,
              105,
              101,
              110,
              116,
              44,
              97,
              122,
              117,
              114,
              101,
              95,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              64,
              58,
              12,
              97,
              122,
              117,
              114,
              101,
              95,
              99,
              108,
              105,
              101,
              110,
              116,
              34,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              105,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Describes a specific
     * [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] resource.
     */
    getAzureClient: {
      name: "GetAzureClient",
      requestType: GetAzureClientRequest,
      requestStream: false,
      responseType: AzureClient,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              105,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
     * resources on a given Google Cloud project and region.
     */
    listAzureClients: {
      name: "ListAzureClients",
      requestType: ListAzureClientsRequest,
      requestStream: false,
      responseType: ListAzureClientsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              105,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a specific [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
     * resource.
     *
     * If the client is used by one or more clusters, deletion will
     * fail and a `FAILED_PRECONDITION` error will be returned.
     *
     * If successful, the response contains a newly created
     * [Operation][google.longrunning.Operation] resource that can be
     * described to track the status of the operation.
     */
    deleteAzureClient: {
      name: "DeleteAzureClient",
      requestType: DeleteAzureClientRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              42,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              105,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
     * resource on a given Google Cloud Platform project and region.
     *
     * If successful, the response contains a newly created
     * [Operation][google.longrunning.Operation] resource that can be
     * described to track the status of the operation.
     */
    createAzureCluster: {
      name: "CreateAzureCluster",
      requestType: CreateAzureClusterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              33,
              10,
              12,
              65,
              122,
              117,
              114,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              37,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              122,
              117,
              114,
              101,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              44,
              97,
              122,
              117,
              114,
              101,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              13,
              97,
              122,
              117,
              114,
              101,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              34,
              49,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]. */
    updateAzureCluster: {
      name: "UpdateAzureCluster",
      requestType: UpdateAzureClusterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              33,
              10,
              12,
              65,
              122,
              117,
              114,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              97,
              122,
              117,
              114,
              101,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              80,
              58,
              13,
              97,
              122,
              117,
              114,
              101,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              50,
              63,
              47,
              118,
              49,
              47,
              123,
              97,
              122,
              117,
              114,
              101,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Describes a specific
     * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
     */
    getAzureCluster: {
      name: "GetAzureCluster",
      requestType: GetAzureClusterRequest,
      requestStream: false,
      responseType: AzureCluster,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
     * resources on a given Google Cloud project and region.
     */
    listAzureClusters: {
      name: "ListAzureClusters",
      requestType: ListAzureClustersRequest,
      requestStream: false,
      responseType: ListAzureClustersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a specific
     * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
     *
     * Fails if the cluster has one or more associated
     * [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resources.
     *
     * If successful, the response contains a newly created
     * [Operation][google.longrunning.Operation] resource that can be
     * described to track the status of the operation.
     */
    deleteAzureCluster: {
      name: "DeleteAzureCluster",
      requestType: DeleteAzureClusterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              42,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Generates an access token for a cluster agent. */
    generateAzureClusterAgentToken: {
      name: "GenerateAzureClusterAgentToken",
      requestType: GenerateAzureClusterAgentTokenRequest,
      requestStream: false,
      responseType: GenerateAzureClusterAgentTokenResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              94,
              58,
              1,
              42,
              34,
              89,
              47,
              118,
              49,
              47,
              123,
              97,
              122,
              117,
              114,
              101,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              65,
              122,
              117,
              114,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              65,
              103,
              101,
              110,
              116,
              84,
              111,
              107,
              101,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Generates a short-lived access token to authenticate to a given
     * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
     */
    generateAzureAccessToken: {
      name: "GenerateAzureAccessToken",
      requestType: GenerateAzureAccessTokenRequest,
      requestStream: false,
      responseType: GenerateAzureAccessTokenResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              85,
              18,
              83,
              47,
              118,
              49,
              47,
              123,
              97,
              122,
              117,
              114,
              101,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              65,
              122,
              117,
              114,
              101,
              65,
              99,
              99,
              101,
              115,
              115,
              84,
              111,
              107,
              101,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool],
     * attached to a given
     * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
     *
     * If successful, the response contains a newly created
     * [Operation][google.longrunning.Operation] resource that can be
     * described to track the status of the operation.
     */
    createAzureNodePool: {
      name: "CreateAzureNodePool",
      requestType: CreateAzureNodePoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              34,
              10,
              13,
              65,
              122,
              117,
              114,
              101,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              41,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              122,
              117,
              114,
              101,
              95,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              44,
              97,
              122,
              117,
              114,
              101,
              95,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              85,
              58,
              15,
              97,
              122,
              117,
              114,
              101,
              95,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              34,
              66,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              97,
              122,
              117,
              114,
              101,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool]. */
    updateAzureNodePool: {
      name: "UpdateAzureNodePool",
      requestType: UpdateAzureNodePoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              34,
              10,
              13,
              65,
              122,
              117,
              114,
              101,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              97,
              122,
              117,
              114,
              101,
              95,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              101,
              58,
              15,
              97,
              122,
              117,
              114,
              101,
              95,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              50,
              82,
              47,
              118,
              49,
              47,
              123,
              97,
              122,
              117,
              114,
              101,
              95,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Describes a specific
     * [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
     */
    getAzureNodePool: {
      name: "GetAzureNodePool",
      requestType: GetAzureNodePoolRequest,
      requestStream: false,
      responseType: AzureNodePool,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              68,
              18,
              66,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool]
     * resources on a given
     * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
     */
    listAzureNodePools: {
      name: "ListAzureNodePools",
      requestType: ListAzureNodePoolsRequest,
      requestStream: false,
      responseType: ListAzureNodePoolsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              68,
              18,
              66,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              97,
              122,
              117,
              114,
              101,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a specific
     * [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
     *
     * If successful, the response contains a newly created
     * [Operation][google.longrunning.Operation] resource that can be
     * described to track the status of the operation.
     */
    deleteAzureNodePool: {
      name: "DeleteAzureNodePool",
      requestType: DeleteAzureNodePoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              68,
              42,
              66,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the OIDC discovery document for the cluster.
     * See the
     * [OpenID Connect Discovery 1.0
     * specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
     * for details.
     */
    getAzureOpenIdConfig: {
      name: "GetAzureOpenIdConfig",
      requestType: GetAzureOpenIdConfigRequest,
      requestStream: false,
      responseType: AzureOpenIdConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 97, 122, 117, 114, 101, 95, 99, 108, 117, 115, 116, 101, 114])],
          578365826: [
            Buffer.from([
              93,
              18,
              91,
              47,
              118,
              49,
              47,
              123,
              97,
              122,
              117,
              114,
              101,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              46,
              119,
              101,
              108,
              108,
              45,
              107,
              110,
              111,
              119,
              110,
              47,
              111,
              112,
              101,
              110,
              105,
              100,
              45,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the public component of the cluster signing keys in
     * JSON Web Key format.
     */
    getAzureJsonWebKeys: {
      name: "GetAzureJsonWebKeys",
      requestType: GetAzureJsonWebKeysRequest,
      requestStream: false,
      responseType: AzureJsonWebKeys,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 97, 122, 117, 114, 101, 95, 99, 108, 117, 115, 116, 101, 114])],
          578365826: [
            Buffer.from([
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              97,
              122,
              117,
              114,
              101,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              106,
              119,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Returns information, such as supported Azure regions and Kubernetes
     * versions, on a given Google Cloud location.
     */
    getAzureServerConfig: {
      name: "GetAzureServerConfig",
      requestType: GetAzureServerConfigRequest,
      requestStream: false,
      responseType: AzureServerConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              122,
              117,
              114,
              101,
              83,
              101,
              114,
              118,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AzureClustersServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a new [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
   * resource on a given Google Cloud project and region.
   *
   * `AzureClient` resources hold client authentication
   * information needed by the Anthos Multicloud API to manage Azure resources
   * on your Azure subscription on your behalf.
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  createAzureClient(
    request: CreateAzureClientRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Describes a specific
   * [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] resource.
   */
  getAzureClient(
    request: GetAzureClientRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AzureClient>>;
  /**
   * Lists all [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
   * resources on a given Google Cloud project and region.
   */
  listAzureClients(
    request: ListAzureClientsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAzureClientsResponse>>;
  /**
   * Deletes a specific [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
   * resource.
   *
   * If the client is used by one or more clusters, deletion will
   * fail and a `FAILED_PRECONDITION` error will be returned.
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  deleteAzureClient(
    request: DeleteAzureClientRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Creates a new [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
   * resource on a given Google Cloud Platform project and region.
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  createAzureCluster(
    request: CreateAzureClusterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates an [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]. */
  updateAzureCluster(
    request: UpdateAzureClusterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Describes a specific
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
   */
  getAzureCluster(
    request: GetAzureClusterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AzureCluster>>;
  /**
   * Lists all [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
   * resources on a given Google Cloud project and region.
   */
  listAzureClusters(
    request: ListAzureClustersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAzureClustersResponse>>;
  /**
   * Deletes a specific
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
   *
   * Fails if the cluster has one or more associated
   * [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resources.
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  deleteAzureCluster(
    request: DeleteAzureClusterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Generates an access token for a cluster agent. */
  generateAzureClusterAgentToken(
    request: GenerateAzureClusterAgentTokenRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateAzureClusterAgentTokenResponse>>;
  /**
   * Generates a short-lived access token to authenticate to a given
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
   */
  generateAzureAccessToken(
    request: GenerateAzureAccessTokenRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateAzureAccessTokenResponse>>;
  /**
   * Creates a new [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool],
   * attached to a given
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  createAzureNodePool(
    request: CreateAzureNodePoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates an [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool]. */
  updateAzureNodePool(
    request: UpdateAzureNodePoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Describes a specific
   * [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
   */
  getAzureNodePool(
    request: GetAzureNodePoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AzureNodePool>>;
  /**
   * Lists all [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool]
   * resources on a given
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
   */
  listAzureNodePools(
    request: ListAzureNodePoolsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAzureNodePoolsResponse>>;
  /**
   * Deletes a specific
   * [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  deleteAzureNodePool(
    request: DeleteAzureNodePoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Gets the OIDC discovery document for the cluster.
   * See the
   * [OpenID Connect Discovery 1.0
   * specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
   * for details.
   */
  getAzureOpenIdConfig(
    request: GetAzureOpenIdConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AzureOpenIdConfig>>;
  /**
   * Gets the public component of the cluster signing keys in
   * JSON Web Key format.
   */
  getAzureJsonWebKeys(
    request: GetAzureJsonWebKeysRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AzureJsonWebKeys>>;
  /**
   * Returns information, such as supported Azure regions and Kubernetes
   * versions, on a given Google Cloud location.
   */
  getAzureServerConfig(
    request: GetAzureServerConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AzureServerConfig>>;
}

export interface AzureClustersClient<CallOptionsExt = {}> {
  /**
   * Creates a new [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
   * resource on a given Google Cloud project and region.
   *
   * `AzureClient` resources hold client authentication
   * information needed by the Anthos Multicloud API to manage Azure resources
   * on your Azure subscription on your behalf.
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  createAzureClient(
    request: DeepPartial<CreateAzureClientRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Describes a specific
   * [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] resource.
   */
  getAzureClient(
    request: DeepPartial<GetAzureClientRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AzureClient>;
  /**
   * Lists all [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
   * resources on a given Google Cloud project and region.
   */
  listAzureClients(
    request: DeepPartial<ListAzureClientsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAzureClientsResponse>;
  /**
   * Deletes a specific [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
   * resource.
   *
   * If the client is used by one or more clusters, deletion will
   * fail and a `FAILED_PRECONDITION` error will be returned.
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  deleteAzureClient(
    request: DeepPartial<DeleteAzureClientRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Creates a new [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
   * resource on a given Google Cloud Platform project and region.
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  createAzureCluster(
    request: DeepPartial<CreateAzureClusterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates an [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]. */
  updateAzureCluster(
    request: DeepPartial<UpdateAzureClusterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Describes a specific
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
   */
  getAzureCluster(
    request: DeepPartial<GetAzureClusterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AzureCluster>;
  /**
   * Lists all [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
   * resources on a given Google Cloud project and region.
   */
  listAzureClusters(
    request: DeepPartial<ListAzureClustersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAzureClustersResponse>;
  /**
   * Deletes a specific
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
   *
   * Fails if the cluster has one or more associated
   * [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resources.
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  deleteAzureCluster(
    request: DeepPartial<DeleteAzureClusterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Generates an access token for a cluster agent. */
  generateAzureClusterAgentToken(
    request: DeepPartial<GenerateAzureClusterAgentTokenRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateAzureClusterAgentTokenResponse>;
  /**
   * Generates a short-lived access token to authenticate to a given
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
   */
  generateAzureAccessToken(
    request: DeepPartial<GenerateAzureAccessTokenRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateAzureAccessTokenResponse>;
  /**
   * Creates a new [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool],
   * attached to a given
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  createAzureNodePool(
    request: DeepPartial<CreateAzureNodePoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates an [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool]. */
  updateAzureNodePool(
    request: DeepPartial<UpdateAzureNodePoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Describes a specific
   * [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
   */
  getAzureNodePool(
    request: DeepPartial<GetAzureNodePoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AzureNodePool>;
  /**
   * Lists all [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool]
   * resources on a given
   * [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
   */
  listAzureNodePools(
    request: DeepPartial<ListAzureNodePoolsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAzureNodePoolsResponse>;
  /**
   * Deletes a specific
   * [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  deleteAzureNodePool(
    request: DeepPartial<DeleteAzureNodePoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Gets the OIDC discovery document for the cluster.
   * See the
   * [OpenID Connect Discovery 1.0
   * specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
   * for details.
   */
  getAzureOpenIdConfig(
    request: DeepPartial<GetAzureOpenIdConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AzureOpenIdConfig>;
  /**
   * Gets the public component of the cluster signing keys in
   * JSON Web Key format.
   */
  getAzureJsonWebKeys(
    request: DeepPartial<GetAzureJsonWebKeysRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AzureJsonWebKeys>;
  /**
   * Returns information, such as supported Azure regions and Kubernetes
   * versions, on a given Google Cloud location.
   */
  getAzureServerConfig(
    request: DeepPartial<GetAzureServerConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AzureServerConfig>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
