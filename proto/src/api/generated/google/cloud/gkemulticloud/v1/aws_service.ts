// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gkemulticloud/v1/aws_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { AwsCluster, AwsJsonWebKeys, AwsNodePool, AwsOpenIdConfig, AwsServerConfig } from "./aws_resources.js";

export const protobufPackage = "google.cloud.gkemulticloud.v1";

/** Request message for `AwsClusters.CreateAwsCluster` method. */
export interface CreateAwsClusterRequest {
  /**
   * Required. The parent location where this
   * [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resource will be
   * created.
   *
   * Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  parent: string;
  /**
   * Required. The specification of the
   * [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] to create.
   */
  awsCluster:
    | AwsCluster
    | undefined;
  /**
   * Required. A client provided ID the resource. Must be unique within the
   * parent resource.
   *
   * The provided ID will be part of the
   * [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resource name
   * formatted as
   * `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>`.
   *
   * Valid characters are `/[a-z][0-9]-/`. Cannot be longer than 63 characters.
   */
  awsClusterId: string;
  /** If set, only validate the request, but do not actually create the cluster. */
  validateOnly: boolean;
}

/** Request message for `AwsClusters.UpdateAwsCluster` method. */
export interface UpdateAwsClusterRequest {
  /**
   * Required. The [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
   * resource to update.
   */
  awsCluster:
    | AwsCluster
    | undefined;
  /** If set, only validate the request, but do not actually update the cluster. */
  validateOnly: boolean;
  /**
   * Required. Mask of fields to update. At least one path must be supplied in
   * this field. The elements of the repeated paths field can only include these
   * fields from [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]:
   *
   *  *   `description`.
   *  *   `annotations`.
   *  *   `control_plane.version`.
   *  *   `authorization.admin_users`.
   *  *   `authorization.admin_groups`.
   *  *   `binary_authorization.evaluation_mode`.
   *  *   `control_plane.aws_services_authentication.role_arn`.
   *  *   `control_plane.aws_services_authentication.role_session_name`.
   *  *   `control_plane.config_encryption.kms_key_arn`.
   *  *   `control_plane.instance_type`.
   *  *   `control_plane.security_group_ids`.
   *  *   `control_plane.proxy_config`.
   *  *   `control_plane.proxy_config.secret_arn`.
   *  *   `control_plane.proxy_config.secret_version`.
   *  *   `control_plane.root_volume.size_gib`.
   *  *   `control_plane.root_volume.volume_type`.
   *  *   `control_plane.root_volume.iops`.
   *  *   `control_plane.root_volume.throughput`.
   *  *   `control_plane.root_volume.kms_key_arn`.
   *  *   `control_plane.ssh_config`.
   *  *   `control_plane.ssh_config.ec2_key_pair`.
   *  *   `control_plane.instance_placement.tenancy`.
   *  *   `control_plane.iam_instance_profile`.
   *  *   `logging_config.component_config.enable_components`.
   *  *   `control_plane.tags`.
   *  *   `monitoring_config.managed_prometheus_config.enabled`.
   *  *   `networking.per_node_pool_sg_rules_disabled`.
   */
  updateMask: string[] | undefined;
}

/** Request message for `AwsClusters.GetAwsCluster` method. */
export interface GetAwsClusterRequest {
  /**
   * Required. The name of the
   * [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resource to
   * describe.
   *
   * `AwsCluster` names are formatted as
   * `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud Platform resource names.
   */
  name: string;
}

/** Request message for `AwsClusters.ListAwsClusters` method. */
export interface ListAwsClustersRequest {
  /**
   * Required. The parent location which owns this collection of
   * [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resources.
   *
   * Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud Platform resource names.
   */
  parent: string;
  /**
   * The maximum number of items to return.
   *
   * If not specified, a default value of 50 will be used by the service.
   * Regardless of the pageSize value, the response can include a partial list
   * and a caller should only rely on response's
   * [nextPageToken][google.cloud.gkemulticloud.v1.ListAwsClustersResponse.next_page_token]
   * to determine if there are more instances left to be queried.
   */
  pageSize: number;
  /**
   * The `nextPageToken` value returned from a previous
   * [awsClusters.list][google.cloud.gkemulticloud.v1.AwsClusters.ListAwsClusters]
   * request, if any.
   */
  pageToken: string;
}

/** Response message for `AwsClusters.ListAwsClusters` method. */
export interface ListAwsClustersResponse {
  /**
   * A list of [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resources
   * in the specified Google Cloud Platform project and region region.
   */
  awsClusters: AwsCluster[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/** Request message for `AwsClusters.DeleteAwsCluster` method. */
export interface DeleteAwsClusterRequest {
  /**
   * Required. The resource name the
   * [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] to delete.
   *
   * `AwsCluster` names are formatted as
   * `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud Platform resource names.
   */
  name: string;
  /** If set, only validate the request, but do not actually delete the resource. */
  validateOnly: boolean;
  /**
   * If set to true, and the
   * [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resource is not
   * found, the request will succeed but no action will be taken on the server
   * and a completed [Operation][google.longrunning.Operation] will be returned.
   *
   * Useful for idempotent deletion.
   */
  allowMissing: boolean;
  /**
   * Optional. If set to true, the deletion of
   * [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resource will
   * succeed even if errors occur during deleting in cluster resources. Using
   * this parameter may result in orphaned resources in the cluster.
   */
  ignoreErrors: boolean;
  /**
   * The current etag of the
   * [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
   *
   * Allows clients to perform deletions through optimistic concurrency control.
   *
   * If the provided etag does not match the current etag of the cluster,
   * the request will fail and an ABORTED error will be returned.
   */
  etag: string;
}

/** Response message for `AwsClusters.CreateAwsNodePool` method. */
export interface CreateAwsNodePoolRequest {
  /**
   * Required. The [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
   * resource where this node pool will be created.
   *
   * `AwsCluster` names are formatted as
   * `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  parent: string;
  /**
   * Required. The specification of the
   * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] to create.
   */
  awsNodePool:
    | AwsNodePool
    | undefined;
  /**
   * Required. A client provided ID the resource. Must be unique within the
   * parent resource.
   *
   * The provided ID will be part of the
   * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resource name
   * formatted as
   * `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>/awsNodePools/<node-pool-id>`.
   *
   * Valid characters are `/[a-z][0-9]-/`. Cannot be longer than 63 characters.
   */
  awsNodePoolId: string;
  /**
   * If set, only validate the request, but do not actually create the node
   * pool.
   */
  validateOnly: boolean;
}

/** Request message for `AwsClusters.UpdateAwsNodePool` method. */
export interface UpdateAwsNodePoolRequest {
  /**
   * Required. The [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
   * resource to update.
   */
  awsNodePool:
    | AwsNodePool
    | undefined;
  /** If set, only validate the request, but don't actually update the node pool. */
  validateOnly: boolean;
  /**
   * Required. Mask of fields to update. At least one path must be supplied in
   * this field. The elements of the repeated paths field can only include these
   * fields from [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]:
   *
   *  *   `annotations`.
   *  *   `version`.
   *  *   `autoscaling.min_node_count`.
   *  *   `autoscaling.max_node_count`.
   *  *   `config.config_encryption.kms_key_arn`.
   *  *   `config.security_group_ids`.
   *  *   `config.root_volume.iops`.
   *  *   `config.root_volume.throughput`.
   *  *   `config.root_volume.kms_key_arn`.
   *  *   `config.root_volume.volume_type`.
   *  *   `config.root_volume.size_gib`.
   *  *   `config.proxy_config`.
   *  *   `config.proxy_config.secret_arn`.
   *  *   `config.proxy_config.secret_version`.
   *  *   `config.ssh_config`.
   *  *   `config.ssh_config.ec2_key_pair`.
   *  *   `config.instance_placement.tenancy`.
   *  *   `config.iam_instance_profile`.
   *  *   `config.labels`.
   *  *   `config.tags`.
   *  *   `config.autoscaling_metrics_collection`.
   *  *   `config.autoscaling_metrics_collection.granularity`.
   *  *   `config.autoscaling_metrics_collection.metrics`.
   *  *   `config.instance_type`.
   *  *   `management.auto_repair`.
   *  *   `management`.
   *  *   `update_settings`.
   *  *   `update_settings.surge_settings`.
   *  *   `update_settings.surge_settings.max_surge`.
   *  *   `update_settings.surge_settings.max_unavailable`.
   */
  updateMask: string[] | undefined;
}

/** Request message for `AwsClusters.RollbackAwsNodePoolUpdate` method. */
export interface RollbackAwsNodePoolUpdateRequest {
  /**
   * Required. The name of the
   * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resource to
   * rollback.
   *
   * `AwsNodePool` names are formatted as
   * `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>/awsNodePools/<node-pool-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  name: string;
  /**
   * Optional. Option for rollback to ignore the PodDisruptionBudget when
   * draining the node pool nodes. Default value is false.
   */
  respectPdb: boolean;
}

/** Request message for `AwsClusters.GetAwsNodePool` method. */
export interface GetAwsNodePoolRequest {
  /**
   * Required. The name of the
   * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resource to
   * describe.
   *
   * `AwsNodePool` names are formatted as
   * `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>/awsNodePools/<node-pool-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  name: string;
}

/** Request message for `AwsClusters.ListAwsNodePools` method. */
export interface ListAwsNodePoolsRequest {
  /**
   * Required. The parent `AwsCluster` which owns this collection of
   * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resources.
   *
   * `AwsCluster` names are formatted as
   * `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  parent: string;
  /**
   * The maximum number of items to return.
   *
   * If not specified, a default value of 50 will be used by the service.
   * Regardless of the pageSize value, the response can include a partial list
   * and a caller should only rely on response's
   * [nextPageToken][google.cloud.gkemulticloud.v1.ListAwsNodePoolsResponse.next_page_token]
   * to determine if there are more instances left to be queried.
   */
  pageSize: number;
  /**
   * The `nextPageToken` value returned from a previous
   * [awsNodePools.list][google.cloud.gkemulticloud.v1.AwsClusters.ListAwsNodePools]
   * request, if any.
   */
  pageToken: string;
}

/** Response message for `AwsClusters.ListAwsNodePools` method. */
export interface ListAwsNodePoolsResponse {
  /**
   * A list of [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
   * resources in the specified `AwsCluster`.
   */
  awsNodePools: AwsNodePool[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/** Request message for `AwsClusters.DeleteAwsNodePool` method. */
export interface DeleteAwsNodePoolRequest {
  /**
   * Required. The resource name the
   * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] to delete.
   *
   * `AwsNodePool` names are formatted as
   * `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>/awsNodePools/<node-pool-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  name: string;
  /**
   * If set, only validate the request, but do not actually delete the node
   * pool.
   */
  validateOnly: boolean;
  /**
   * If set to true, and the
   * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resource is not
   * found, the request will succeed but no action will be taken on the server
   * and a completed [Operation][google.longrunning.Operation] will be returned.
   *
   * Useful for idempotent deletion.
   */
  allowMissing: boolean;
  /**
   * Optional. If set to true, the deletion of
   * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resource will
   * succeed even if errors occur during deleting in node pool resources. Using
   * this parameter may result in orphaned resources in the node pool.
   */
  ignoreErrors: boolean;
  /**
   * The current ETag of the
   * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool].
   *
   * Allows clients to perform deletions through optimistic concurrency control.
   *
   * If the provided ETag does not match the current etag of the node pool,
   * the request will fail and an ABORTED error will be returned.
   */
  etag: string;
}

/**
 * GetAwsOpenIdConfigRequest gets the OIDC discovery document for the
 * cluster. See the OpenID Connect Discovery 1.0 specification for details.
 */
export interface GetAwsOpenIdConfigRequest {
  /**
   * Required. The AwsCluster, which owns the OIDC discovery document.
   * Format:
   * projects/{project}/locations/{location}/awsClusters/{cluster}
   */
  awsCluster: string;
}

/**
 * GetAwsJsonWebKeysRequest gets the public component of the keys used by the
 * cluster to sign token requests. This will be the jwks_uri for the discover
 * document returned by getOpenIDConfig. See the OpenID Connect
 * Discovery 1.0 specification for details.
 */
export interface GetAwsJsonWebKeysRequest {
  /**
   * Required. The AwsCluster, which owns the JsonWebKeys.
   * Format:
   * projects/{project}/locations/{location}/awsClusters/{cluster}
   */
  awsCluster: string;
}

/** GetAwsServerConfigRequest gets the server config of GKE cluster on AWS. */
export interface GetAwsServerConfigRequest {
  /**
   * Required. The name of the
   * [AwsServerConfig][google.cloud.gkemulticloud.v1.AwsServerConfig] resource
   * to describe.
   *
   * `AwsServerConfig` names are formatted as
   * `projects/<project-id>/locations/<region>/awsServerConfig`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  name: string;
}

/** Request message for `AwsClusters.GenerateAwsAccessToken` method. */
export interface GenerateAwsAccessTokenRequest {
  /**
   * Required. The name of the
   * [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resource to
   * authenticate to.
   *
   * `AwsCluster` names are formatted as
   * `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud resource names.
   */
  awsCluster: string;
}

/** Response message for `AwsClusters.GenerateAwsAccessToken` method. */
export interface GenerateAwsAccessTokenResponse {
  /** Output only. Access token to authenticate to k8s api-server. */
  accessToken: string;
  /** Output only. Timestamp at which the token will expire. */
  expirationTime: Date | undefined;
}

export interface GenerateAwsClusterAgentTokenRequest {
  /** Required. */
  awsCluster: string;
  /** Required. */
  subjectToken: string;
  /** Required. */
  subjectTokenType: string;
  /** Required. */
  version: string;
  /** Optional. */
  nodePoolId: string;
  /** Optional. */
  grantType: string;
  /** Optional. */
  audience: string;
  /** Optional. */
  scope: string;
  /** Optional. */
  requestedTokenType: string;
  /** Optional. */
  options: string;
}

export interface GenerateAwsClusterAgentTokenResponse {
  accessToken: string;
  expiresIn: number;
  tokenType: string;
}

function createBaseCreateAwsClusterRequest(): CreateAwsClusterRequest {
  return { parent: "", awsCluster: undefined, awsClusterId: "", validateOnly: false };
}

export const CreateAwsClusterRequest: MessageFns<CreateAwsClusterRequest> = {
  encode(message: CreateAwsClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.awsCluster !== undefined) {
      AwsCluster.encode(message.awsCluster, writer.uint32(18).fork()).join();
    }
    if (message.awsClusterId !== "") {
      writer.uint32(26).string(message.awsClusterId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAwsClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAwsClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.awsCluster = AwsCluster.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.awsClusterId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAwsClusterRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      awsCluster: isSet(object.awsCluster) ? AwsCluster.fromJSON(object.awsCluster) : undefined,
      awsClusterId: isSet(object.awsClusterId) ? globalThis.String(object.awsClusterId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateAwsClusterRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.awsCluster !== undefined) {
      obj.awsCluster = AwsCluster.toJSON(message.awsCluster);
    }
    if (message.awsClusterId !== "") {
      obj.awsClusterId = message.awsClusterId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAwsClusterRequest>): CreateAwsClusterRequest {
    return CreateAwsClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAwsClusterRequest>): CreateAwsClusterRequest {
    const message = createBaseCreateAwsClusterRequest();
    message.parent = object.parent ?? "";
    message.awsCluster = (object.awsCluster !== undefined && object.awsCluster !== null)
      ? AwsCluster.fromPartial(object.awsCluster)
      : undefined;
    message.awsClusterId = object.awsClusterId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateAwsClusterRequest(): UpdateAwsClusterRequest {
  return { awsCluster: undefined, validateOnly: false, updateMask: undefined };
}

export const UpdateAwsClusterRequest: MessageFns<UpdateAwsClusterRequest> = {
  encode(message: UpdateAwsClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.awsCluster !== undefined) {
      AwsCluster.encode(message.awsCluster, writer.uint32(10).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAwsClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAwsClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.awsCluster = AwsCluster.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAwsClusterRequest {
    return {
      awsCluster: isSet(object.awsCluster) ? AwsCluster.fromJSON(object.awsCluster) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAwsClusterRequest): unknown {
    const obj: any = {};
    if (message.awsCluster !== undefined) {
      obj.awsCluster = AwsCluster.toJSON(message.awsCluster);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAwsClusterRequest>): UpdateAwsClusterRequest {
    return UpdateAwsClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAwsClusterRequest>): UpdateAwsClusterRequest {
    const message = createBaseUpdateAwsClusterRequest();
    message.awsCluster = (object.awsCluster !== undefined && object.awsCluster !== null)
      ? AwsCluster.fromPartial(object.awsCluster)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetAwsClusterRequest(): GetAwsClusterRequest {
  return { name: "" };
}

export const GetAwsClusterRequest: MessageFns<GetAwsClusterRequest> = {
  encode(message: GetAwsClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAwsClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAwsClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAwsClusterRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAwsClusterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAwsClusterRequest>): GetAwsClusterRequest {
    return GetAwsClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAwsClusterRequest>): GetAwsClusterRequest {
    const message = createBaseGetAwsClusterRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAwsClustersRequest(): ListAwsClustersRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAwsClustersRequest: MessageFns<ListAwsClustersRequest> = {
  encode(message: ListAwsClustersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAwsClustersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAwsClustersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAwsClustersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAwsClustersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAwsClustersRequest>): ListAwsClustersRequest {
    return ListAwsClustersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAwsClustersRequest>): ListAwsClustersRequest {
    const message = createBaseListAwsClustersRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAwsClustersResponse(): ListAwsClustersResponse {
  return { awsClusters: [], nextPageToken: "" };
}

export const ListAwsClustersResponse: MessageFns<ListAwsClustersResponse> = {
  encode(message: ListAwsClustersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.awsClusters) {
      AwsCluster.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAwsClustersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAwsClustersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.awsClusters.push(AwsCluster.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAwsClustersResponse {
    return {
      awsClusters: globalThis.Array.isArray(object?.awsClusters)
        ? object.awsClusters.map((e: any) => AwsCluster.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAwsClustersResponse): unknown {
    const obj: any = {};
    if (message.awsClusters?.length) {
      obj.awsClusters = message.awsClusters.map((e) => AwsCluster.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAwsClustersResponse>): ListAwsClustersResponse {
    return ListAwsClustersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAwsClustersResponse>): ListAwsClustersResponse {
    const message = createBaseListAwsClustersResponse();
    message.awsClusters = object.awsClusters?.map((e) => AwsCluster.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteAwsClusterRequest(): DeleteAwsClusterRequest {
  return { name: "", validateOnly: false, allowMissing: false, ignoreErrors: false, etag: "" };
}

export const DeleteAwsClusterRequest: MessageFns<DeleteAwsClusterRequest> = {
  encode(message: DeleteAwsClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    if (message.ignoreErrors !== false) {
      writer.uint32(40).bool(message.ignoreErrors);
    }
    if (message.etag !== "") {
      writer.uint32(34).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAwsClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAwsClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.ignoreErrors = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAwsClusterRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
      ignoreErrors: isSet(object.ignoreErrors) ? globalThis.Boolean(object.ignoreErrors) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteAwsClusterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    if (message.ignoreErrors !== false) {
      obj.ignoreErrors = message.ignoreErrors;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAwsClusterRequest>): DeleteAwsClusterRequest {
    return DeleteAwsClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAwsClusterRequest>): DeleteAwsClusterRequest {
    const message = createBaseDeleteAwsClusterRequest();
    message.name = object.name ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.allowMissing = object.allowMissing ?? false;
    message.ignoreErrors = object.ignoreErrors ?? false;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseCreateAwsNodePoolRequest(): CreateAwsNodePoolRequest {
  return { parent: "", awsNodePool: undefined, awsNodePoolId: "", validateOnly: false };
}

export const CreateAwsNodePoolRequest: MessageFns<CreateAwsNodePoolRequest> = {
  encode(message: CreateAwsNodePoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.awsNodePool !== undefined) {
      AwsNodePool.encode(message.awsNodePool, writer.uint32(18).fork()).join();
    }
    if (message.awsNodePoolId !== "") {
      writer.uint32(26).string(message.awsNodePoolId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAwsNodePoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAwsNodePoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.awsNodePool = AwsNodePool.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.awsNodePoolId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAwsNodePoolRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      awsNodePool: isSet(object.awsNodePool) ? AwsNodePool.fromJSON(object.awsNodePool) : undefined,
      awsNodePoolId: isSet(object.awsNodePoolId) ? globalThis.String(object.awsNodePoolId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateAwsNodePoolRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.awsNodePool !== undefined) {
      obj.awsNodePool = AwsNodePool.toJSON(message.awsNodePool);
    }
    if (message.awsNodePoolId !== "") {
      obj.awsNodePoolId = message.awsNodePoolId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAwsNodePoolRequest>): CreateAwsNodePoolRequest {
    return CreateAwsNodePoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAwsNodePoolRequest>): CreateAwsNodePoolRequest {
    const message = createBaseCreateAwsNodePoolRequest();
    message.parent = object.parent ?? "";
    message.awsNodePool = (object.awsNodePool !== undefined && object.awsNodePool !== null)
      ? AwsNodePool.fromPartial(object.awsNodePool)
      : undefined;
    message.awsNodePoolId = object.awsNodePoolId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateAwsNodePoolRequest(): UpdateAwsNodePoolRequest {
  return { awsNodePool: undefined, validateOnly: false, updateMask: undefined };
}

export const UpdateAwsNodePoolRequest: MessageFns<UpdateAwsNodePoolRequest> = {
  encode(message: UpdateAwsNodePoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.awsNodePool !== undefined) {
      AwsNodePool.encode(message.awsNodePool, writer.uint32(10).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAwsNodePoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAwsNodePoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.awsNodePool = AwsNodePool.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAwsNodePoolRequest {
    return {
      awsNodePool: isSet(object.awsNodePool) ? AwsNodePool.fromJSON(object.awsNodePool) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAwsNodePoolRequest): unknown {
    const obj: any = {};
    if (message.awsNodePool !== undefined) {
      obj.awsNodePool = AwsNodePool.toJSON(message.awsNodePool);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAwsNodePoolRequest>): UpdateAwsNodePoolRequest {
    return UpdateAwsNodePoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAwsNodePoolRequest>): UpdateAwsNodePoolRequest {
    const message = createBaseUpdateAwsNodePoolRequest();
    message.awsNodePool = (object.awsNodePool !== undefined && object.awsNodePool !== null)
      ? AwsNodePool.fromPartial(object.awsNodePool)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseRollbackAwsNodePoolUpdateRequest(): RollbackAwsNodePoolUpdateRequest {
  return { name: "", respectPdb: false };
}

export const RollbackAwsNodePoolUpdateRequest: MessageFns<RollbackAwsNodePoolUpdateRequest> = {
  encode(message: RollbackAwsNodePoolUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.respectPdb !== false) {
      writer.uint32(16).bool(message.respectPdb);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RollbackAwsNodePoolUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRollbackAwsNodePoolUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.respectPdb = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RollbackAwsNodePoolUpdateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      respectPdb: isSet(object.respectPdb) ? globalThis.Boolean(object.respectPdb) : false,
    };
  },

  toJSON(message: RollbackAwsNodePoolUpdateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.respectPdb !== false) {
      obj.respectPdb = message.respectPdb;
    }
    return obj;
  },

  create(base?: DeepPartial<RollbackAwsNodePoolUpdateRequest>): RollbackAwsNodePoolUpdateRequest {
    return RollbackAwsNodePoolUpdateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RollbackAwsNodePoolUpdateRequest>): RollbackAwsNodePoolUpdateRequest {
    const message = createBaseRollbackAwsNodePoolUpdateRequest();
    message.name = object.name ?? "";
    message.respectPdb = object.respectPdb ?? false;
    return message;
  },
};

function createBaseGetAwsNodePoolRequest(): GetAwsNodePoolRequest {
  return { name: "" };
}

export const GetAwsNodePoolRequest: MessageFns<GetAwsNodePoolRequest> = {
  encode(message: GetAwsNodePoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAwsNodePoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAwsNodePoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAwsNodePoolRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAwsNodePoolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAwsNodePoolRequest>): GetAwsNodePoolRequest {
    return GetAwsNodePoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAwsNodePoolRequest>): GetAwsNodePoolRequest {
    const message = createBaseGetAwsNodePoolRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAwsNodePoolsRequest(): ListAwsNodePoolsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAwsNodePoolsRequest: MessageFns<ListAwsNodePoolsRequest> = {
  encode(message: ListAwsNodePoolsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAwsNodePoolsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAwsNodePoolsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAwsNodePoolsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAwsNodePoolsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAwsNodePoolsRequest>): ListAwsNodePoolsRequest {
    return ListAwsNodePoolsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAwsNodePoolsRequest>): ListAwsNodePoolsRequest {
    const message = createBaseListAwsNodePoolsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAwsNodePoolsResponse(): ListAwsNodePoolsResponse {
  return { awsNodePools: [], nextPageToken: "" };
}

export const ListAwsNodePoolsResponse: MessageFns<ListAwsNodePoolsResponse> = {
  encode(message: ListAwsNodePoolsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.awsNodePools) {
      AwsNodePool.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAwsNodePoolsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAwsNodePoolsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.awsNodePools.push(AwsNodePool.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAwsNodePoolsResponse {
    return {
      awsNodePools: globalThis.Array.isArray(object?.awsNodePools)
        ? object.awsNodePools.map((e: any) => AwsNodePool.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAwsNodePoolsResponse): unknown {
    const obj: any = {};
    if (message.awsNodePools?.length) {
      obj.awsNodePools = message.awsNodePools.map((e) => AwsNodePool.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAwsNodePoolsResponse>): ListAwsNodePoolsResponse {
    return ListAwsNodePoolsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAwsNodePoolsResponse>): ListAwsNodePoolsResponse {
    const message = createBaseListAwsNodePoolsResponse();
    message.awsNodePools = object.awsNodePools?.map((e) => AwsNodePool.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteAwsNodePoolRequest(): DeleteAwsNodePoolRequest {
  return { name: "", validateOnly: false, allowMissing: false, ignoreErrors: false, etag: "" };
}

export const DeleteAwsNodePoolRequest: MessageFns<DeleteAwsNodePoolRequest> = {
  encode(message: DeleteAwsNodePoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    if (message.ignoreErrors !== false) {
      writer.uint32(40).bool(message.ignoreErrors);
    }
    if (message.etag !== "") {
      writer.uint32(34).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAwsNodePoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAwsNodePoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.ignoreErrors = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAwsNodePoolRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
      ignoreErrors: isSet(object.ignoreErrors) ? globalThis.Boolean(object.ignoreErrors) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteAwsNodePoolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    if (message.ignoreErrors !== false) {
      obj.ignoreErrors = message.ignoreErrors;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAwsNodePoolRequest>): DeleteAwsNodePoolRequest {
    return DeleteAwsNodePoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAwsNodePoolRequest>): DeleteAwsNodePoolRequest {
    const message = createBaseDeleteAwsNodePoolRequest();
    message.name = object.name ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.allowMissing = object.allowMissing ?? false;
    message.ignoreErrors = object.ignoreErrors ?? false;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseGetAwsOpenIdConfigRequest(): GetAwsOpenIdConfigRequest {
  return { awsCluster: "" };
}

export const GetAwsOpenIdConfigRequest: MessageFns<GetAwsOpenIdConfigRequest> = {
  encode(message: GetAwsOpenIdConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.awsCluster !== "") {
      writer.uint32(10).string(message.awsCluster);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAwsOpenIdConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAwsOpenIdConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.awsCluster = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAwsOpenIdConfigRequest {
    return { awsCluster: isSet(object.awsCluster) ? globalThis.String(object.awsCluster) : "" };
  },

  toJSON(message: GetAwsOpenIdConfigRequest): unknown {
    const obj: any = {};
    if (message.awsCluster !== "") {
      obj.awsCluster = message.awsCluster;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAwsOpenIdConfigRequest>): GetAwsOpenIdConfigRequest {
    return GetAwsOpenIdConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAwsOpenIdConfigRequest>): GetAwsOpenIdConfigRequest {
    const message = createBaseGetAwsOpenIdConfigRequest();
    message.awsCluster = object.awsCluster ?? "";
    return message;
  },
};

function createBaseGetAwsJsonWebKeysRequest(): GetAwsJsonWebKeysRequest {
  return { awsCluster: "" };
}

export const GetAwsJsonWebKeysRequest: MessageFns<GetAwsJsonWebKeysRequest> = {
  encode(message: GetAwsJsonWebKeysRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.awsCluster !== "") {
      writer.uint32(10).string(message.awsCluster);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAwsJsonWebKeysRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAwsJsonWebKeysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.awsCluster = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAwsJsonWebKeysRequest {
    return { awsCluster: isSet(object.awsCluster) ? globalThis.String(object.awsCluster) : "" };
  },

  toJSON(message: GetAwsJsonWebKeysRequest): unknown {
    const obj: any = {};
    if (message.awsCluster !== "") {
      obj.awsCluster = message.awsCluster;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAwsJsonWebKeysRequest>): GetAwsJsonWebKeysRequest {
    return GetAwsJsonWebKeysRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAwsJsonWebKeysRequest>): GetAwsJsonWebKeysRequest {
    const message = createBaseGetAwsJsonWebKeysRequest();
    message.awsCluster = object.awsCluster ?? "";
    return message;
  },
};

function createBaseGetAwsServerConfigRequest(): GetAwsServerConfigRequest {
  return { name: "" };
}

export const GetAwsServerConfigRequest: MessageFns<GetAwsServerConfigRequest> = {
  encode(message: GetAwsServerConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAwsServerConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAwsServerConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAwsServerConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAwsServerConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAwsServerConfigRequest>): GetAwsServerConfigRequest {
    return GetAwsServerConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAwsServerConfigRequest>): GetAwsServerConfigRequest {
    const message = createBaseGetAwsServerConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGenerateAwsAccessTokenRequest(): GenerateAwsAccessTokenRequest {
  return { awsCluster: "" };
}

export const GenerateAwsAccessTokenRequest: MessageFns<GenerateAwsAccessTokenRequest> = {
  encode(message: GenerateAwsAccessTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.awsCluster !== "") {
      writer.uint32(10).string(message.awsCluster);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateAwsAccessTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateAwsAccessTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.awsCluster = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateAwsAccessTokenRequest {
    return { awsCluster: isSet(object.awsCluster) ? globalThis.String(object.awsCluster) : "" };
  },

  toJSON(message: GenerateAwsAccessTokenRequest): unknown {
    const obj: any = {};
    if (message.awsCluster !== "") {
      obj.awsCluster = message.awsCluster;
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateAwsAccessTokenRequest>): GenerateAwsAccessTokenRequest {
    return GenerateAwsAccessTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateAwsAccessTokenRequest>): GenerateAwsAccessTokenRequest {
    const message = createBaseGenerateAwsAccessTokenRequest();
    message.awsCluster = object.awsCluster ?? "";
    return message;
  },
};

function createBaseGenerateAwsAccessTokenResponse(): GenerateAwsAccessTokenResponse {
  return { accessToken: "", expirationTime: undefined };
}

export const GenerateAwsAccessTokenResponse: MessageFns<GenerateAwsAccessTokenResponse> = {
  encode(message: GenerateAwsAccessTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.expirationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateAwsAccessTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateAwsAccessTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.expirationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateAwsAccessTokenResponse {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      expirationTime: isSet(object.expirationTime) ? fromJsonTimestamp(object.expirationTime) : undefined,
    };
  },

  toJSON(message: GenerateAwsAccessTokenResponse): unknown {
    const obj: any = {};
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.expirationTime !== undefined) {
      obj.expirationTime = message.expirationTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateAwsAccessTokenResponse>): GenerateAwsAccessTokenResponse {
    return GenerateAwsAccessTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateAwsAccessTokenResponse>): GenerateAwsAccessTokenResponse {
    const message = createBaseGenerateAwsAccessTokenResponse();
    message.accessToken = object.accessToken ?? "";
    message.expirationTime = object.expirationTime ?? undefined;
    return message;
  },
};

function createBaseGenerateAwsClusterAgentTokenRequest(): GenerateAwsClusterAgentTokenRequest {
  return {
    awsCluster: "",
    subjectToken: "",
    subjectTokenType: "",
    version: "",
    nodePoolId: "",
    grantType: "",
    audience: "",
    scope: "",
    requestedTokenType: "",
    options: "",
  };
}

export const GenerateAwsClusterAgentTokenRequest: MessageFns<GenerateAwsClusterAgentTokenRequest> = {
  encode(message: GenerateAwsClusterAgentTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.awsCluster !== "") {
      writer.uint32(10).string(message.awsCluster);
    }
    if (message.subjectToken !== "") {
      writer.uint32(18).string(message.subjectToken);
    }
    if (message.subjectTokenType !== "") {
      writer.uint32(26).string(message.subjectTokenType);
    }
    if (message.version !== "") {
      writer.uint32(34).string(message.version);
    }
    if (message.nodePoolId !== "") {
      writer.uint32(42).string(message.nodePoolId);
    }
    if (message.grantType !== "") {
      writer.uint32(50).string(message.grantType);
    }
    if (message.audience !== "") {
      writer.uint32(58).string(message.audience);
    }
    if (message.scope !== "") {
      writer.uint32(66).string(message.scope);
    }
    if (message.requestedTokenType !== "") {
      writer.uint32(74).string(message.requestedTokenType);
    }
    if (message.options !== "") {
      writer.uint32(82).string(message.options);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateAwsClusterAgentTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateAwsClusterAgentTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.awsCluster = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.subjectToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.subjectTokenType = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.version = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.nodePoolId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.grantType = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.audience = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.scope = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.requestedTokenType = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.options = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateAwsClusterAgentTokenRequest {
    return {
      awsCluster: isSet(object.awsCluster) ? globalThis.String(object.awsCluster) : "",
      subjectToken: isSet(object.subjectToken) ? globalThis.String(object.subjectToken) : "",
      subjectTokenType: isSet(object.subjectTokenType) ? globalThis.String(object.subjectTokenType) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      nodePoolId: isSet(object.nodePoolId) ? globalThis.String(object.nodePoolId) : "",
      grantType: isSet(object.grantType) ? globalThis.String(object.grantType) : "",
      audience: isSet(object.audience) ? globalThis.String(object.audience) : "",
      scope: isSet(object.scope) ? globalThis.String(object.scope) : "",
      requestedTokenType: isSet(object.requestedTokenType) ? globalThis.String(object.requestedTokenType) : "",
      options: isSet(object.options) ? globalThis.String(object.options) : "",
    };
  },

  toJSON(message: GenerateAwsClusterAgentTokenRequest): unknown {
    const obj: any = {};
    if (message.awsCluster !== "") {
      obj.awsCluster = message.awsCluster;
    }
    if (message.subjectToken !== "") {
      obj.subjectToken = message.subjectToken;
    }
    if (message.subjectTokenType !== "") {
      obj.subjectTokenType = message.subjectTokenType;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.nodePoolId !== "") {
      obj.nodePoolId = message.nodePoolId;
    }
    if (message.grantType !== "") {
      obj.grantType = message.grantType;
    }
    if (message.audience !== "") {
      obj.audience = message.audience;
    }
    if (message.scope !== "") {
      obj.scope = message.scope;
    }
    if (message.requestedTokenType !== "") {
      obj.requestedTokenType = message.requestedTokenType;
    }
    if (message.options !== "") {
      obj.options = message.options;
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateAwsClusterAgentTokenRequest>): GenerateAwsClusterAgentTokenRequest {
    return GenerateAwsClusterAgentTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateAwsClusterAgentTokenRequest>): GenerateAwsClusterAgentTokenRequest {
    const message = createBaseGenerateAwsClusterAgentTokenRequest();
    message.awsCluster = object.awsCluster ?? "";
    message.subjectToken = object.subjectToken ?? "";
    message.subjectTokenType = object.subjectTokenType ?? "";
    message.version = object.version ?? "";
    message.nodePoolId = object.nodePoolId ?? "";
    message.grantType = object.grantType ?? "";
    message.audience = object.audience ?? "";
    message.scope = object.scope ?? "";
    message.requestedTokenType = object.requestedTokenType ?? "";
    message.options = object.options ?? "";
    return message;
  },
};

function createBaseGenerateAwsClusterAgentTokenResponse(): GenerateAwsClusterAgentTokenResponse {
  return { accessToken: "", expiresIn: 0, tokenType: "" };
}

export const GenerateAwsClusterAgentTokenResponse: MessageFns<GenerateAwsClusterAgentTokenResponse> = {
  encode(message: GenerateAwsClusterAgentTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.expiresIn !== 0) {
      writer.uint32(16).int32(message.expiresIn);
    }
    if (message.tokenType !== "") {
      writer.uint32(26).string(message.tokenType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateAwsClusterAgentTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateAwsClusterAgentTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.expiresIn = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tokenType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateAwsClusterAgentTokenResponse {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      expiresIn: isSet(object.expiresIn) ? globalThis.Number(object.expiresIn) : 0,
      tokenType: isSet(object.tokenType) ? globalThis.String(object.tokenType) : "",
    };
  },

  toJSON(message: GenerateAwsClusterAgentTokenResponse): unknown {
    const obj: any = {};
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.expiresIn !== 0) {
      obj.expiresIn = Math.round(message.expiresIn);
    }
    if (message.tokenType !== "") {
      obj.tokenType = message.tokenType;
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateAwsClusterAgentTokenResponse>): GenerateAwsClusterAgentTokenResponse {
    return GenerateAwsClusterAgentTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateAwsClusterAgentTokenResponse>): GenerateAwsClusterAgentTokenResponse {
    const message = createBaseGenerateAwsClusterAgentTokenResponse();
    message.accessToken = object.accessToken ?? "";
    message.expiresIn = object.expiresIn ?? 0;
    message.tokenType = object.tokenType ?? "";
    return message;
  },
};

/**
 * The AwsClusters API provides a single centrally managed service
 * to create and manage Anthos clusters that run on AWS infrastructure.
 */
export type AwsClustersDefinition = typeof AwsClustersDefinition;
export const AwsClustersDefinition = {
  name: "AwsClusters",
  fullName: "google.cloud.gkemulticloud.v1.AwsClusters",
  methods: {
    /**
     * Creates a new [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
     * resource on a given Google Cloud Platform project and region.
     *
     * If successful, the response contains a newly created
     * [Operation][google.longrunning.Operation] resource that can be
     * described to track the status of the operation.
     */
    createAwsCluster: {
      name: "CreateAwsCluster",
      requestType: CreateAwsClusterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              31,
              10,
              10,
              65,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              33,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              119,
              115,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              44,
              97,
              119,
              115,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              11,
              97,
              119,
              115,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              34,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]. */
    updateAwsCluster: {
      name: "UpdateAwsCluster",
      requestType: UpdateAwsClusterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              31,
              10,
              10,
              65,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              97,
              119,
              115,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              74,
              58,
              11,
              97,
              119,
              115,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              50,
              59,
              47,
              118,
              49,
              47,
              123,
              97,
              119,
              115,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Describes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
     * resource.
     */
    getAwsCluster: {
      name: "GetAwsCluster",
      requestType: GetAwsClusterRequest,
      requestStream: false,
      responseType: AwsCluster,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resources
     * on a given Google Cloud project and region.
     */
    listAwsClusters: {
      name: "ListAwsClusters",
      requestType: ListAwsClustersRequest,
      requestStream: false,
      responseType: ListAwsClustersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
     * resource.
     *
     * Fails if the cluster has one or more associated
     * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resources.
     *
     * If successful, the response contains a newly created
     * [Operation][google.longrunning.Operation] resource that can be
     * described to track the status of the operation.
     */
    deleteAwsCluster: {
      name: "DeleteAwsCluster",
      requestType: DeleteAwsClusterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              42,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Generates an access token for a cluster agent. */
    generateAwsClusterAgentToken: {
      name: "GenerateAwsClusterAgentToken",
      requestType: GenerateAwsClusterAgentTokenRequest,
      requestStream: false,
      responseType: GenerateAwsClusterAgentTokenResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              88,
              58,
              1,
              42,
              34,
              83,
              47,
              118,
              49,
              47,
              123,
              97,
              119,
              115,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              65,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              65,
              103,
              101,
              110,
              116,
              84,
              111,
              107,
              101,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Generates a short-lived access token to authenticate to a given
     * [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resource.
     */
    generateAwsAccessToken: {
      name: "GenerateAwsAccessToken",
      requestType: GenerateAwsAccessTokenRequest,
      requestStream: false,
      responseType: GenerateAwsAccessTokenResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              79,
              18,
              77,
              47,
              118,
              49,
              47,
              123,
              97,
              119,
              115,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              65,
              119,
              115,
              65,
              99,
              99,
              101,
              115,
              115,
              84,
              111,
              107,
              101,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool],
     * attached to a given [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
     *
     * If successful, the response contains a newly created
     * [Operation][google.longrunning.Operation] resource that can be
     * described to track the status of the operation.
     */
    createAwsNodePool: {
      name: "CreateAwsNodePool",
      requestType: CreateAwsNodePoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              11,
              65,
              119,
              115,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              37,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              119,
              115,
              95,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              44,
              97,
              119,
              115,
              95,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              79,
              58,
              13,
              97,
              119,
              115,
              95,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              34,
              62,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              97,
              119,
              115,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]. */
    updateAwsNodePool: {
      name: "UpdateAwsNodePool",
      requestType: UpdateAwsNodePoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              11,
              65,
              119,
              115,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              97,
              119,
              115,
              95,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              93,
              58,
              13,
              97,
              119,
              115,
              95,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              50,
              76,
              47,
              118,
              49,
              47,
              123,
              97,
              119,
              115,
              95,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Rolls back a previously aborted or failed
     * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] update request.
     * Makes no changes if the last update request successfully finished.
     * If an update request is in progress, you cannot rollback the update.
     * You must first cancel or let it finish unsuccessfully before you can
     * rollback.
     */
    rollbackAwsNodePoolUpdate: {
      name: "RollbackAwsNodePoolUpdate",
      requestType: RollbackAwsNodePoolUpdateRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              11,
              65,
              119,
              115,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              76,
              58,
              1,
              42,
              34,
              71,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
              58,
              114,
              111,
              108,
              108,
              98,
              97,
              99,
              107,
            ]),
          ],
        },
      },
    },
    /**
     * Describes a specific
     * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resource.
     */
    getAwsNodePool: {
      name: "GetAwsNodePool",
      requestType: GetAwsNodePoolRequest,
      requestStream: false,
      responseType: AwsNodePool,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
     * resources on a given
     * [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
     */
    listAwsNodePools: {
      name: "ListAwsNodePools",
      requestType: ListAwsNodePoolsRequest,
      requestStream: false,
      responseType: ListAwsNodePoolsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              97,
              119,
              115,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a specific [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
     * resource.
     *
     * If successful, the response contains a newly created
     * [Operation][google.longrunning.Operation] resource that can be
     * described to track the status of the operation.
     */
    deleteAwsNodePool: {
      name: "DeleteAwsNodePool",
      requestType: DeleteAwsNodePoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              42,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the OIDC discovery document for the cluster.
     * See the
     * [OpenID Connect Discovery 1.0
     * specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
     * for details.
     */
    getAwsOpenIdConfig: {
      name: "GetAwsOpenIdConfig",
      requestType: GetAwsOpenIdConfigRequest,
      requestStream: false,
      responseType: AwsOpenIdConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              89,
              18,
              87,
              47,
              118,
              49,
              47,
              123,
              97,
              119,
              115,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              46,
              119,
              101,
              108,
              108,
              45,
              107,
              110,
              111,
              119,
              110,
              47,
              111,
              112,
              101,
              110,
              105,
              100,
              45,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the public component of the cluster signing keys in
     * JSON Web Key format.
     */
    getAwsJsonWebKeys: {
      name: "GetAwsJsonWebKeys",
      requestType: GetAwsJsonWebKeysRequest,
      requestStream: false,
      responseType: AwsJsonWebKeys,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              97,
              119,
              115,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              106,
              119,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Returns information, such as supported AWS regions and Kubernetes
     * versions, on a given Google Cloud location.
     */
    getAwsServerConfig: {
      name: "GetAwsServerConfig",
      requestType: GetAwsServerConfigRequest,
      requestStream: false,
      responseType: AwsServerConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              119,
              115,
              83,
              101,
              114,
              118,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AwsClustersServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a new [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
   * resource on a given Google Cloud Platform project and region.
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  createAwsCluster(
    request: CreateAwsClusterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates an [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]. */
  updateAwsCluster(
    request: UpdateAwsClusterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Describes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
   * resource.
   */
  getAwsCluster(request: GetAwsClusterRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AwsCluster>>;
  /**
   * Lists all [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resources
   * on a given Google Cloud project and region.
   */
  listAwsClusters(
    request: ListAwsClustersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAwsClustersResponse>>;
  /**
   * Deletes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
   * resource.
   *
   * Fails if the cluster has one or more associated
   * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resources.
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  deleteAwsCluster(
    request: DeleteAwsClusterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Generates an access token for a cluster agent. */
  generateAwsClusterAgentToken(
    request: GenerateAwsClusterAgentTokenRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateAwsClusterAgentTokenResponse>>;
  /**
   * Generates a short-lived access token to authenticate to a given
   * [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resource.
   */
  generateAwsAccessToken(
    request: GenerateAwsAccessTokenRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateAwsAccessTokenResponse>>;
  /**
   * Creates a new [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool],
   * attached to a given [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  createAwsNodePool(
    request: CreateAwsNodePoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates an [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]. */
  updateAwsNodePool(
    request: UpdateAwsNodePoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Rolls back a previously aborted or failed
   * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] update request.
   * Makes no changes if the last update request successfully finished.
   * If an update request is in progress, you cannot rollback the update.
   * You must first cancel or let it finish unsuccessfully before you can
   * rollback.
   */
  rollbackAwsNodePoolUpdate(
    request: RollbackAwsNodePoolUpdateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Describes a specific
   * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resource.
   */
  getAwsNodePool(
    request: GetAwsNodePoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AwsNodePool>>;
  /**
   * Lists all [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
   * resources on a given
   * [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
   */
  listAwsNodePools(
    request: ListAwsNodePoolsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAwsNodePoolsResponse>>;
  /**
   * Deletes a specific [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
   * resource.
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  deleteAwsNodePool(
    request: DeleteAwsNodePoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Gets the OIDC discovery document for the cluster.
   * See the
   * [OpenID Connect Discovery 1.0
   * specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
   * for details.
   */
  getAwsOpenIdConfig(
    request: GetAwsOpenIdConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AwsOpenIdConfig>>;
  /**
   * Gets the public component of the cluster signing keys in
   * JSON Web Key format.
   */
  getAwsJsonWebKeys(
    request: GetAwsJsonWebKeysRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AwsJsonWebKeys>>;
  /**
   * Returns information, such as supported AWS regions and Kubernetes
   * versions, on a given Google Cloud location.
   */
  getAwsServerConfig(
    request: GetAwsServerConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AwsServerConfig>>;
}

export interface AwsClustersClient<CallOptionsExt = {}> {
  /**
   * Creates a new [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
   * resource on a given Google Cloud Platform project and region.
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  createAwsCluster(
    request: DeepPartial<CreateAwsClusterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates an [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]. */
  updateAwsCluster(
    request: DeepPartial<UpdateAwsClusterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Describes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
   * resource.
   */
  getAwsCluster(
    request: DeepPartial<GetAwsClusterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AwsCluster>;
  /**
   * Lists all [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resources
   * on a given Google Cloud project and region.
   */
  listAwsClusters(
    request: DeepPartial<ListAwsClustersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAwsClustersResponse>;
  /**
   * Deletes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
   * resource.
   *
   * Fails if the cluster has one or more associated
   * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resources.
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  deleteAwsCluster(
    request: DeepPartial<DeleteAwsClusterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Generates an access token for a cluster agent. */
  generateAwsClusterAgentToken(
    request: DeepPartial<GenerateAwsClusterAgentTokenRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateAwsClusterAgentTokenResponse>;
  /**
   * Generates a short-lived access token to authenticate to a given
   * [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resource.
   */
  generateAwsAccessToken(
    request: DeepPartial<GenerateAwsAccessTokenRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateAwsAccessTokenResponse>;
  /**
   * Creates a new [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool],
   * attached to a given [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  createAwsNodePool(
    request: DeepPartial<CreateAwsNodePoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates an [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]. */
  updateAwsNodePool(
    request: DeepPartial<UpdateAwsNodePoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Rolls back a previously aborted or failed
   * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] update request.
   * Makes no changes if the last update request successfully finished.
   * If an update request is in progress, you cannot rollback the update.
   * You must first cancel or let it finish unsuccessfully before you can
   * rollback.
   */
  rollbackAwsNodePoolUpdate(
    request: DeepPartial<RollbackAwsNodePoolUpdateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Describes a specific
   * [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resource.
   */
  getAwsNodePool(
    request: DeepPartial<GetAwsNodePoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AwsNodePool>;
  /**
   * Lists all [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
   * resources on a given
   * [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
   */
  listAwsNodePools(
    request: DeepPartial<ListAwsNodePoolsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAwsNodePoolsResponse>;
  /**
   * Deletes a specific [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
   * resource.
   *
   * If successful, the response contains a newly created
   * [Operation][google.longrunning.Operation] resource that can be
   * described to track the status of the operation.
   */
  deleteAwsNodePool(
    request: DeepPartial<DeleteAwsNodePoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Gets the OIDC discovery document for the cluster.
   * See the
   * [OpenID Connect Discovery 1.0
   * specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
   * for details.
   */
  getAwsOpenIdConfig(
    request: DeepPartial<GetAwsOpenIdConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AwsOpenIdConfig>;
  /**
   * Gets the public component of the cluster signing keys in
   * JSON Web Key format.
   */
  getAwsJsonWebKeys(
    request: DeepPartial<GetAwsJsonWebKeysRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AwsJsonWebKeys>;
  /**
   * Returns information, such as supported AWS regions and Kubernetes
   * versions, on a given Google Cloud location.
   */
  getAwsServerConfig(
    request: DeepPartial<GetAwsServerConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AwsServerConfig>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
