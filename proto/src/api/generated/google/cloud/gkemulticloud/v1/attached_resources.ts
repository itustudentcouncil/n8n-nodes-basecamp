// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gkemulticloud/v1/attached_resources.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  BinaryAuthorization,
  Fleet,
  LoggingConfig,
  MonitoringConfig,
  SecurityPostureConfig,
  WorkloadIdentityConfig,
} from "./common_resources.js";

export const protobufPackage = "google.cloud.gkemulticloud.v1";

/** An Anthos cluster running on customer own infrastructure. */
export interface AttachedCluster {
  /**
   * The name of this resource.
   *
   * Cluster names are formatted as
   * `projects/<project-number>/locations/<region>/attachedClusters/<cluster-id>`.
   *
   * See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   * for more details on Google Cloud Platform resource names.
   */
  name: string;
  /**
   * Optional. A human readable description of this cluster.
   * Cannot be longer than 255 UTF-8 encoded bytes.
   */
  description: string;
  /** Required. OpenID Connect (OIDC) configuration for the cluster. */
  oidcConfig:
    | AttachedOidcConfig
    | undefined;
  /**
   * Required. The platform version for the cluster (e.g. `1.19.0-gke.1000`).
   *
   * You can list all supported versions on a given Google Cloud region by
   * calling
   * [GetAttachedServerConfig][google.cloud.gkemulticloud.v1.AttachedClusters.GetAttachedServerConfig].
   */
  platformVersion: string;
  /**
   * Required. The Kubernetes distribution of the underlying attached cluster.
   *
   * Supported values: ["eks", "aks", "generic"].
   */
  distribution: string;
  /**
   * Output only. The region where this cluster runs.
   *
   * For EKS clusters, this is a AWS region. For AKS clusters,
   * this is an Azure region.
   */
  clusterRegion: string;
  /** Required. Fleet configuration. */
  fleet:
    | Fleet
    | undefined;
  /** Output only. The current state of the cluster. */
  state: AttachedCluster_State;
  /** Output only. A globally unique identifier for the cluster. */
  uid: string;
  /** Output only. If set, there are currently changes in flight to the cluster. */
  reconciling: boolean;
  /** Output only. The time at which this cluster was registered. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time at which this cluster was last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Allows clients to perform consistent read-modify-writes
   * through optimistic concurrency control.
   *
   * Can be sent on update and delete requests to ensure the
   * client has an up-to-date value before proceeding.
   */
  etag: string;
  /** Output only. The Kubernetes version of the cluster. */
  kubernetesVersion: string;
  /**
   * Optional. Annotations on the cluster.
   *
   * This field has the same restrictions as Kubernetes annotations.
   * The total size of all keys and values combined is limited to 256k.
   * Key can have 2 segments: prefix (optional) and name (required),
   * separated by a slash (/).
   * Prefix must be a DNS subdomain.
   * Name must be 63 characters or less, begin and end with alphanumerics,
   * with dashes (-), underscores (_), dots (.), and alphanumerics between.
   */
  annotations: { [key: string]: string };
  /** Output only. Workload Identity settings. */
  workloadIdentityConfig:
    | WorkloadIdentityConfig
    | undefined;
  /** Optional. Logging configuration for this cluster. */
  loggingConfig:
    | LoggingConfig
    | undefined;
  /** Output only. A set of errors found in the cluster. */
  errors: AttachedClusterError[];
  /** Optional. Configuration related to the cluster RBAC settings. */
  authorization:
    | AttachedClustersAuthorization
    | undefined;
  /** Optional. Monitoring configuration for this cluster. */
  monitoringConfig:
    | MonitoringConfig
    | undefined;
  /** Optional. Proxy configuration for outbound HTTP(S) traffic. */
  proxyConfig:
    | AttachedProxyConfig
    | undefined;
  /** Optional. Binary Authorization configuration for this cluster. */
  binaryAuthorization:
    | BinaryAuthorization
    | undefined;
  /** Optional. Security Posture configuration for this cluster. */
  securityPostureConfig: SecurityPostureConfig | undefined;
}

/** The lifecycle state of the cluster. */
export enum AttachedCluster_State {
  /** STATE_UNSPECIFIED - Not set. */
  STATE_UNSPECIFIED = 0,
  /** PROVISIONING - The PROVISIONING state indicates the cluster is being registered. */
  PROVISIONING = 1,
  /**
   * RUNNING - The RUNNING state indicates the cluster has been register and is fully
   * usable.
   */
  RUNNING = 2,
  /**
   * RECONCILING - The RECONCILING state indicates that some work is actively being done on
   * the cluster, such as upgrading software components.
   */
  RECONCILING = 3,
  /** STOPPING - The STOPPING state indicates the cluster is being de-registered. */
  STOPPING = 4,
  /**
   * ERROR - The ERROR state indicates the cluster is in a broken unrecoverable
   * state.
   */
  ERROR = 5,
  /**
   * DEGRADED - The DEGRADED state indicates the cluster requires user action to
   * restore full functionality.
   */
  DEGRADED = 6,
  UNRECOGNIZED = -1,
}

export function attachedCluster_StateFromJSON(object: any): AttachedCluster_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return AttachedCluster_State.STATE_UNSPECIFIED;
    case 1:
    case "PROVISIONING":
      return AttachedCluster_State.PROVISIONING;
    case 2:
    case "RUNNING":
      return AttachedCluster_State.RUNNING;
    case 3:
    case "RECONCILING":
      return AttachedCluster_State.RECONCILING;
    case 4:
    case "STOPPING":
      return AttachedCluster_State.STOPPING;
    case 5:
    case "ERROR":
      return AttachedCluster_State.ERROR;
    case 6:
    case "DEGRADED":
      return AttachedCluster_State.DEGRADED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AttachedCluster_State.UNRECOGNIZED;
  }
}

export function attachedCluster_StateToJSON(object: AttachedCluster_State): string {
  switch (object) {
    case AttachedCluster_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case AttachedCluster_State.PROVISIONING:
      return "PROVISIONING";
    case AttachedCluster_State.RUNNING:
      return "RUNNING";
    case AttachedCluster_State.RECONCILING:
      return "RECONCILING";
    case AttachedCluster_State.STOPPING:
      return "STOPPING";
    case AttachedCluster_State.ERROR:
      return "ERROR";
    case AttachedCluster_State.DEGRADED:
      return "DEGRADED";
    case AttachedCluster_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface AttachedCluster_AnnotationsEntry {
  key: string;
  value: string;
}

/** Configuration related to the cluster RBAC settings. */
export interface AttachedClustersAuthorization {
  /**
   * Optional. Users that can perform operations as a cluster admin. A managed
   * ClusterRoleBinding will be created to grant the `cluster-admin` ClusterRole
   * to the users. Up to ten admin users can be provided.
   *
   * For more info on RBAC, see
   * https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
   */
  adminUsers: AttachedClusterUser[];
  /**
   * Optional. Groups of users that can perform operations as a cluster admin. A
   * managed ClusterRoleBinding will be created to grant the `cluster-admin`
   * ClusterRole to the groups. Up to ten admin groups can be provided.
   *
   * For more info on RBAC, see
   * https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
   */
  adminGroups: AttachedClusterGroup[];
}

/** Identities of a user-type subject for Attached clusters. */
export interface AttachedClusterUser {
  /** Required. The name of the user, e.g. `my-gcp-id@gmail.com`. */
  username: string;
}

/** Identities of a group-type subject for Attached clusters. */
export interface AttachedClusterGroup {
  /** Required. The name of the group, e.g. `my-group@domain.com`. */
  group: string;
}

/**
 * OIDC discovery information of the target cluster.
 *
 * Kubernetes Service Account (KSA) tokens are JWT tokens signed by the cluster
 * API server. This fields indicates how Google Cloud Platform services
 * validate KSA tokens in order to allow system workloads (such as GKE Connect
 * and telemetry agents) to authenticate back to Google Cloud Platform.
 *
 * Both clusters with public and private issuer URLs are supported.
 * Clusters with public issuers only need to specify the `issuer_url` field
 * while clusters with private issuers need to provide both
 * `issuer_url` and `oidc_jwks`.
 */
export interface AttachedOidcConfig {
  /** A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://`. */
  issuerUrl: string;
  /**
   * Optional. OIDC verification keys in JWKS format (RFC 7517).
   * It contains a list of OIDC verification keys that can be used to verify
   * OIDC JWTs.
   *
   * This field is required for cluster that doesn't have a publicly available
   * discovery endpoint. When provided, it will be directly used
   * to verify the OIDC JWT asserted by the IDP.
   */
  jwks: Buffer;
}

/**
 * AttachedServerConfig provides information about supported
 * Kubernetes versions
 */
export interface AttachedServerConfig {
  /** The resource name of the config. */
  name: string;
  /** List of valid platform versions. */
  validVersions: AttachedPlatformVersionInfo[];
}

/** Information about a supported Attached Clusters platform version. */
export interface AttachedPlatformVersionInfo {
  /** Platform version name. */
  version: string;
}

/** AttachedClusterError describes errors found on attached clusters. */
export interface AttachedClusterError {
  /** Human-friendly description of the error. */
  message: string;
}

/** Details of a proxy config. */
export interface AttachedProxyConfig {
  /**
   * The Kubernetes Secret resource that contains the HTTP(S) proxy
   * configuration. The secret must be a JSON encoded proxy configuration
   * as described in
   */
  kubernetesSecret: KubernetesSecret | undefined;
}

/** Information about a Kubernetes Secret */
export interface KubernetesSecret {
  /** Name of the kubernetes secret. */
  name: string;
  /** Namespace in which the kubernetes secret is stored. */
  namespace: string;
}

function createBaseAttachedCluster(): AttachedCluster {
  return {
    name: "",
    description: "",
    oidcConfig: undefined,
    platformVersion: "",
    distribution: "",
    clusterRegion: "",
    fleet: undefined,
    state: 0,
    uid: "",
    reconciling: false,
    createTime: undefined,
    updateTime: undefined,
    etag: "",
    kubernetesVersion: "",
    annotations: {},
    workloadIdentityConfig: undefined,
    loggingConfig: undefined,
    errors: [],
    authorization: undefined,
    monitoringConfig: undefined,
    proxyConfig: undefined,
    binaryAuthorization: undefined,
    securityPostureConfig: undefined,
  };
}

export const AttachedCluster: MessageFns<AttachedCluster> = {
  encode(message: AttachedCluster, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.oidcConfig !== undefined) {
      AttachedOidcConfig.encode(message.oidcConfig, writer.uint32(26).fork()).join();
    }
    if (message.platformVersion !== "") {
      writer.uint32(34).string(message.platformVersion);
    }
    if (message.distribution !== "") {
      writer.uint32(130).string(message.distribution);
    }
    if (message.clusterRegion !== "") {
      writer.uint32(178).string(message.clusterRegion);
    }
    if (message.fleet !== undefined) {
      Fleet.encode(message.fleet, writer.uint32(42).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(48).int32(message.state);
    }
    if (message.uid !== "") {
      writer.uint32(58).string(message.uid);
    }
    if (message.reconciling !== false) {
      writer.uint32(64).bool(message.reconciling);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(74).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(82).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(90).string(message.etag);
    }
    if (message.kubernetesVersion !== "") {
      writer.uint32(98).string(message.kubernetesVersion);
    }
    Object.entries(message.annotations).forEach(([key, value]) => {
      AttachedCluster_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(106).fork()).join();
    });
    if (message.workloadIdentityConfig !== undefined) {
      WorkloadIdentityConfig.encode(message.workloadIdentityConfig, writer.uint32(114).fork()).join();
    }
    if (message.loggingConfig !== undefined) {
      LoggingConfig.encode(message.loggingConfig, writer.uint32(122).fork()).join();
    }
    for (const v of message.errors) {
      AttachedClusterError.encode(v!, writer.uint32(162).fork()).join();
    }
    if (message.authorization !== undefined) {
      AttachedClustersAuthorization.encode(message.authorization, writer.uint32(170).fork()).join();
    }
    if (message.monitoringConfig !== undefined) {
      MonitoringConfig.encode(message.monitoringConfig, writer.uint32(186).fork()).join();
    }
    if (message.proxyConfig !== undefined) {
      AttachedProxyConfig.encode(message.proxyConfig, writer.uint32(194).fork()).join();
    }
    if (message.binaryAuthorization !== undefined) {
      BinaryAuthorization.encode(message.binaryAuthorization, writer.uint32(202).fork()).join();
    }
    if (message.securityPostureConfig !== undefined) {
      SecurityPostureConfig.encode(message.securityPostureConfig, writer.uint32(210).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttachedCluster {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachedCluster();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.oidcConfig = AttachedOidcConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.platformVersion = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.distribution = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.clusterRegion = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.fleet = Fleet.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.reconciling = reader.bool();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.kubernetesVersion = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          const entry13 = AttachedCluster_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry13.value !== undefined) {
            message.annotations[entry13.key] = entry13.value;
          }
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.workloadIdentityConfig = WorkloadIdentityConfig.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.loggingConfig = LoggingConfig.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.errors.push(AttachedClusterError.decode(reader, reader.uint32()));
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.authorization = AttachedClustersAuthorization.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.monitoringConfig = MonitoringConfig.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.proxyConfig = AttachedProxyConfig.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.binaryAuthorization = BinaryAuthorization.decode(reader, reader.uint32());
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.securityPostureConfig = SecurityPostureConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttachedCluster {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      oidcConfig: isSet(object.oidcConfig) ? AttachedOidcConfig.fromJSON(object.oidcConfig) : undefined,
      platformVersion: isSet(object.platformVersion) ? globalThis.String(object.platformVersion) : "",
      distribution: isSet(object.distribution) ? globalThis.String(object.distribution) : "",
      clusterRegion: isSet(object.clusterRegion) ? globalThis.String(object.clusterRegion) : "",
      fleet: isSet(object.fleet) ? Fleet.fromJSON(object.fleet) : undefined,
      state: isSet(object.state) ? attachedCluster_StateFromJSON(object.state) : 0,
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      reconciling: isSet(object.reconciling) ? globalThis.Boolean(object.reconciling) : false,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      kubernetesVersion: isSet(object.kubernetesVersion) ? globalThis.String(object.kubernetesVersion) : "",
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      workloadIdentityConfig: isSet(object.workloadIdentityConfig)
        ? WorkloadIdentityConfig.fromJSON(object.workloadIdentityConfig)
        : undefined,
      loggingConfig: isSet(object.loggingConfig) ? LoggingConfig.fromJSON(object.loggingConfig) : undefined,
      errors: globalThis.Array.isArray(object?.errors)
        ? object.errors.map((e: any) => AttachedClusterError.fromJSON(e))
        : [],
      authorization: isSet(object.authorization)
        ? AttachedClustersAuthorization.fromJSON(object.authorization)
        : undefined,
      monitoringConfig: isSet(object.monitoringConfig) ? MonitoringConfig.fromJSON(object.monitoringConfig) : undefined,
      proxyConfig: isSet(object.proxyConfig) ? AttachedProxyConfig.fromJSON(object.proxyConfig) : undefined,
      binaryAuthorization: isSet(object.binaryAuthorization)
        ? BinaryAuthorization.fromJSON(object.binaryAuthorization)
        : undefined,
      securityPostureConfig: isSet(object.securityPostureConfig)
        ? SecurityPostureConfig.fromJSON(object.securityPostureConfig)
        : undefined,
    };
  },

  toJSON(message: AttachedCluster): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.oidcConfig !== undefined) {
      obj.oidcConfig = AttachedOidcConfig.toJSON(message.oidcConfig);
    }
    if (message.platformVersion !== "") {
      obj.platformVersion = message.platformVersion;
    }
    if (message.distribution !== "") {
      obj.distribution = message.distribution;
    }
    if (message.clusterRegion !== "") {
      obj.clusterRegion = message.clusterRegion;
    }
    if (message.fleet !== undefined) {
      obj.fleet = Fleet.toJSON(message.fleet);
    }
    if (message.state !== 0) {
      obj.state = attachedCluster_StateToJSON(message.state);
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.reconciling !== false) {
      obj.reconciling = message.reconciling;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.kubernetesVersion !== "") {
      obj.kubernetesVersion = message.kubernetesVersion;
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    if (message.workloadIdentityConfig !== undefined) {
      obj.workloadIdentityConfig = WorkloadIdentityConfig.toJSON(message.workloadIdentityConfig);
    }
    if (message.loggingConfig !== undefined) {
      obj.loggingConfig = LoggingConfig.toJSON(message.loggingConfig);
    }
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => AttachedClusterError.toJSON(e));
    }
    if (message.authorization !== undefined) {
      obj.authorization = AttachedClustersAuthorization.toJSON(message.authorization);
    }
    if (message.monitoringConfig !== undefined) {
      obj.monitoringConfig = MonitoringConfig.toJSON(message.monitoringConfig);
    }
    if (message.proxyConfig !== undefined) {
      obj.proxyConfig = AttachedProxyConfig.toJSON(message.proxyConfig);
    }
    if (message.binaryAuthorization !== undefined) {
      obj.binaryAuthorization = BinaryAuthorization.toJSON(message.binaryAuthorization);
    }
    if (message.securityPostureConfig !== undefined) {
      obj.securityPostureConfig = SecurityPostureConfig.toJSON(message.securityPostureConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<AttachedCluster>): AttachedCluster {
    return AttachedCluster.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttachedCluster>): AttachedCluster {
    const message = createBaseAttachedCluster();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.oidcConfig = (object.oidcConfig !== undefined && object.oidcConfig !== null)
      ? AttachedOidcConfig.fromPartial(object.oidcConfig)
      : undefined;
    message.platformVersion = object.platformVersion ?? "";
    message.distribution = object.distribution ?? "";
    message.clusterRegion = object.clusterRegion ?? "";
    message.fleet = (object.fleet !== undefined && object.fleet !== null) ? Fleet.fromPartial(object.fleet) : undefined;
    message.state = object.state ?? 0;
    message.uid = object.uid ?? "";
    message.reconciling = object.reconciling ?? false;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.etag = object.etag ?? "";
    message.kubernetesVersion = object.kubernetesVersion ?? "";
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.workloadIdentityConfig =
      (object.workloadIdentityConfig !== undefined && object.workloadIdentityConfig !== null)
        ? WorkloadIdentityConfig.fromPartial(object.workloadIdentityConfig)
        : undefined;
    message.loggingConfig = (object.loggingConfig !== undefined && object.loggingConfig !== null)
      ? LoggingConfig.fromPartial(object.loggingConfig)
      : undefined;
    message.errors = object.errors?.map((e) => AttachedClusterError.fromPartial(e)) || [];
    message.authorization = (object.authorization !== undefined && object.authorization !== null)
      ? AttachedClustersAuthorization.fromPartial(object.authorization)
      : undefined;
    message.monitoringConfig = (object.monitoringConfig !== undefined && object.monitoringConfig !== null)
      ? MonitoringConfig.fromPartial(object.monitoringConfig)
      : undefined;
    message.proxyConfig = (object.proxyConfig !== undefined && object.proxyConfig !== null)
      ? AttachedProxyConfig.fromPartial(object.proxyConfig)
      : undefined;
    message.binaryAuthorization = (object.binaryAuthorization !== undefined && object.binaryAuthorization !== null)
      ? BinaryAuthorization.fromPartial(object.binaryAuthorization)
      : undefined;
    message.securityPostureConfig =
      (object.securityPostureConfig !== undefined && object.securityPostureConfig !== null)
        ? SecurityPostureConfig.fromPartial(object.securityPostureConfig)
        : undefined;
    return message;
  },
};

function createBaseAttachedCluster_AnnotationsEntry(): AttachedCluster_AnnotationsEntry {
  return { key: "", value: "" };
}

export const AttachedCluster_AnnotationsEntry: MessageFns<AttachedCluster_AnnotationsEntry> = {
  encode(message: AttachedCluster_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttachedCluster_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachedCluster_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttachedCluster_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AttachedCluster_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<AttachedCluster_AnnotationsEntry>): AttachedCluster_AnnotationsEntry {
    return AttachedCluster_AnnotationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttachedCluster_AnnotationsEntry>): AttachedCluster_AnnotationsEntry {
    const message = createBaseAttachedCluster_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAttachedClustersAuthorization(): AttachedClustersAuthorization {
  return { adminUsers: [], adminGroups: [] };
}

export const AttachedClustersAuthorization: MessageFns<AttachedClustersAuthorization> = {
  encode(message: AttachedClustersAuthorization, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.adminUsers) {
      AttachedClusterUser.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.adminGroups) {
      AttachedClusterGroup.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttachedClustersAuthorization {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachedClustersAuthorization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.adminUsers.push(AttachedClusterUser.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.adminGroups.push(AttachedClusterGroup.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttachedClustersAuthorization {
    return {
      adminUsers: globalThis.Array.isArray(object?.adminUsers)
        ? object.adminUsers.map((e: any) => AttachedClusterUser.fromJSON(e))
        : [],
      adminGroups: globalThis.Array.isArray(object?.adminGroups)
        ? object.adminGroups.map((e: any) => AttachedClusterGroup.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AttachedClustersAuthorization): unknown {
    const obj: any = {};
    if (message.adminUsers?.length) {
      obj.adminUsers = message.adminUsers.map((e) => AttachedClusterUser.toJSON(e));
    }
    if (message.adminGroups?.length) {
      obj.adminGroups = message.adminGroups.map((e) => AttachedClusterGroup.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AttachedClustersAuthorization>): AttachedClustersAuthorization {
    return AttachedClustersAuthorization.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttachedClustersAuthorization>): AttachedClustersAuthorization {
    const message = createBaseAttachedClustersAuthorization();
    message.adminUsers = object.adminUsers?.map((e) => AttachedClusterUser.fromPartial(e)) || [];
    message.adminGroups = object.adminGroups?.map((e) => AttachedClusterGroup.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAttachedClusterUser(): AttachedClusterUser {
  return { username: "" };
}

export const AttachedClusterUser: MessageFns<AttachedClusterUser> = {
  encode(message: AttachedClusterUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttachedClusterUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachedClusterUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttachedClusterUser {
    return { username: isSet(object.username) ? globalThis.String(object.username) : "" };
  },

  toJSON(message: AttachedClusterUser): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create(base?: DeepPartial<AttachedClusterUser>): AttachedClusterUser {
    return AttachedClusterUser.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttachedClusterUser>): AttachedClusterUser {
    const message = createBaseAttachedClusterUser();
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseAttachedClusterGroup(): AttachedClusterGroup {
  return { group: "" };
}

export const AttachedClusterGroup: MessageFns<AttachedClusterGroup> = {
  encode(message: AttachedClusterGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.group !== "") {
      writer.uint32(10).string(message.group);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttachedClusterGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachedClusterGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.group = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttachedClusterGroup {
    return { group: isSet(object.group) ? globalThis.String(object.group) : "" };
  },

  toJSON(message: AttachedClusterGroup): unknown {
    const obj: any = {};
    if (message.group !== "") {
      obj.group = message.group;
    }
    return obj;
  },

  create(base?: DeepPartial<AttachedClusterGroup>): AttachedClusterGroup {
    return AttachedClusterGroup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttachedClusterGroup>): AttachedClusterGroup {
    const message = createBaseAttachedClusterGroup();
    message.group = object.group ?? "";
    return message;
  },
};

function createBaseAttachedOidcConfig(): AttachedOidcConfig {
  return { issuerUrl: "", jwks: Buffer.alloc(0) };
}

export const AttachedOidcConfig: MessageFns<AttachedOidcConfig> = {
  encode(message: AttachedOidcConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.issuerUrl !== "") {
      writer.uint32(10).string(message.issuerUrl);
    }
    if (message.jwks.length !== 0) {
      writer.uint32(18).bytes(message.jwks);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttachedOidcConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachedOidcConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.issuerUrl = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jwks = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttachedOidcConfig {
    return {
      issuerUrl: isSet(object.issuerUrl) ? globalThis.String(object.issuerUrl) : "",
      jwks: isSet(object.jwks) ? Buffer.from(bytesFromBase64(object.jwks)) : Buffer.alloc(0),
    };
  },

  toJSON(message: AttachedOidcConfig): unknown {
    const obj: any = {};
    if (message.issuerUrl !== "") {
      obj.issuerUrl = message.issuerUrl;
    }
    if (message.jwks.length !== 0) {
      obj.jwks = base64FromBytes(message.jwks);
    }
    return obj;
  },

  create(base?: DeepPartial<AttachedOidcConfig>): AttachedOidcConfig {
    return AttachedOidcConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttachedOidcConfig>): AttachedOidcConfig {
    const message = createBaseAttachedOidcConfig();
    message.issuerUrl = object.issuerUrl ?? "";
    message.jwks = object.jwks ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseAttachedServerConfig(): AttachedServerConfig {
  return { name: "", validVersions: [] };
}

export const AttachedServerConfig: MessageFns<AttachedServerConfig> = {
  encode(message: AttachedServerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.validVersions) {
      AttachedPlatformVersionInfo.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttachedServerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachedServerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.validVersions.push(AttachedPlatformVersionInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttachedServerConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      validVersions: globalThis.Array.isArray(object?.validVersions)
        ? object.validVersions.map((e: any) => AttachedPlatformVersionInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AttachedServerConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.validVersions?.length) {
      obj.validVersions = message.validVersions.map((e) => AttachedPlatformVersionInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AttachedServerConfig>): AttachedServerConfig {
    return AttachedServerConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttachedServerConfig>): AttachedServerConfig {
    const message = createBaseAttachedServerConfig();
    message.name = object.name ?? "";
    message.validVersions = object.validVersions?.map((e) => AttachedPlatformVersionInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAttachedPlatformVersionInfo(): AttachedPlatformVersionInfo {
  return { version: "" };
}

export const AttachedPlatformVersionInfo: MessageFns<AttachedPlatformVersionInfo> = {
  encode(message: AttachedPlatformVersionInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttachedPlatformVersionInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachedPlatformVersionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttachedPlatformVersionInfo {
    return { version: isSet(object.version) ? globalThis.String(object.version) : "" };
  },

  toJSON(message: AttachedPlatformVersionInfo): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create(base?: DeepPartial<AttachedPlatformVersionInfo>): AttachedPlatformVersionInfo {
    return AttachedPlatformVersionInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttachedPlatformVersionInfo>): AttachedPlatformVersionInfo {
    const message = createBaseAttachedPlatformVersionInfo();
    message.version = object.version ?? "";
    return message;
  },
};

function createBaseAttachedClusterError(): AttachedClusterError {
  return { message: "" };
}

export const AttachedClusterError: MessageFns<AttachedClusterError> = {
  encode(message: AttachedClusterError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttachedClusterError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachedClusterError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttachedClusterError {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: AttachedClusterError): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<AttachedClusterError>): AttachedClusterError {
    return AttachedClusterError.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttachedClusterError>): AttachedClusterError {
    const message = createBaseAttachedClusterError();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseAttachedProxyConfig(): AttachedProxyConfig {
  return { kubernetesSecret: undefined };
}

export const AttachedProxyConfig: MessageFns<AttachedProxyConfig> = {
  encode(message: AttachedProxyConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kubernetesSecret !== undefined) {
      KubernetesSecret.encode(message.kubernetesSecret, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttachedProxyConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachedProxyConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kubernetesSecret = KubernetesSecret.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttachedProxyConfig {
    return {
      kubernetesSecret: isSet(object.kubernetesSecret) ? KubernetesSecret.fromJSON(object.kubernetesSecret) : undefined,
    };
  },

  toJSON(message: AttachedProxyConfig): unknown {
    const obj: any = {};
    if (message.kubernetesSecret !== undefined) {
      obj.kubernetesSecret = KubernetesSecret.toJSON(message.kubernetesSecret);
    }
    return obj;
  },

  create(base?: DeepPartial<AttachedProxyConfig>): AttachedProxyConfig {
    return AttachedProxyConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttachedProxyConfig>): AttachedProxyConfig {
    const message = createBaseAttachedProxyConfig();
    message.kubernetesSecret = (object.kubernetesSecret !== undefined && object.kubernetesSecret !== null)
      ? KubernetesSecret.fromPartial(object.kubernetesSecret)
      : undefined;
    return message;
  },
};

function createBaseKubernetesSecret(): KubernetesSecret {
  return { name: "", namespace: "" };
}

export const KubernetesSecret: MessageFns<KubernetesSecret> = {
  encode(message: KubernetesSecret, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.namespace !== "") {
      writer.uint32(18).string(message.namespace);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KubernetesSecret {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKubernetesSecret();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.namespace = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KubernetesSecret {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : "",
    };
  },

  toJSON(message: KubernetesSecret): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.namespace !== "") {
      obj.namespace = message.namespace;
    }
    return obj;
  },

  create(base?: DeepPartial<KubernetesSecret>): KubernetesSecret {
    return KubernetesSecret.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KubernetesSecret>): KubernetesSecret {
    const message = createBaseKubernetesSecret();
    message.name = object.name ?? "";
    message.namespace = object.namespace ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
