// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dataproc/v1/operations.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.dataproc.v1";

/** Metadata describing the Batch operation. */
export interface BatchOperationMetadata {
  /** Name of the batch for the operation. */
  batch: string;
  /** Batch UUID for the operation. */
  batchUuid: string;
  /** The time when the operation was created. */
  createTime:
    | Date
    | undefined;
  /** The time when the operation finished. */
  doneTime:
    | Date
    | undefined;
  /** The operation type. */
  operationType: BatchOperationMetadata_BatchOperationType;
  /** Short description of the operation. */
  description: string;
  /** Labels associated with the operation. */
  labels: { [key: string]: string };
  /** Warnings encountered during operation execution. */
  warnings: string[];
}

/** Operation type for Batch resources */
export enum BatchOperationMetadata_BatchOperationType {
  /** BATCH_OPERATION_TYPE_UNSPECIFIED - Batch operation type is unknown. */
  BATCH_OPERATION_TYPE_UNSPECIFIED = 0,
  /** BATCH - Batch operation type. */
  BATCH = 1,
  UNRECOGNIZED = -1,
}

export function batchOperationMetadata_BatchOperationTypeFromJSON(
  object: any,
): BatchOperationMetadata_BatchOperationType {
  switch (object) {
    case 0:
    case "BATCH_OPERATION_TYPE_UNSPECIFIED":
      return BatchOperationMetadata_BatchOperationType.BATCH_OPERATION_TYPE_UNSPECIFIED;
    case 1:
    case "BATCH":
      return BatchOperationMetadata_BatchOperationType.BATCH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BatchOperationMetadata_BatchOperationType.UNRECOGNIZED;
  }
}

export function batchOperationMetadata_BatchOperationTypeToJSON(
  object: BatchOperationMetadata_BatchOperationType,
): string {
  switch (object) {
    case BatchOperationMetadata_BatchOperationType.BATCH_OPERATION_TYPE_UNSPECIFIED:
      return "BATCH_OPERATION_TYPE_UNSPECIFIED";
    case BatchOperationMetadata_BatchOperationType.BATCH:
      return "BATCH";
    case BatchOperationMetadata_BatchOperationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BatchOperationMetadata_LabelsEntry {
  key: string;
  value: string;
}

/** Metadata describing the Session operation. */
export interface SessionOperationMetadata {
  /** Name of the session for the operation. */
  session: string;
  /** Session UUID for the operation. */
  sessionUuid: string;
  /** The time when the operation was created. */
  createTime:
    | Date
    | undefined;
  /** The time when the operation was finished. */
  doneTime:
    | Date
    | undefined;
  /** The operation type. */
  operationType: SessionOperationMetadata_SessionOperationType;
  /** Short description of the operation. */
  description: string;
  /** Labels associated with the operation. */
  labels: { [key: string]: string };
  /** Warnings encountered during operation execution. */
  warnings: string[];
}

/** Operation type for Session resources */
export enum SessionOperationMetadata_SessionOperationType {
  /** SESSION_OPERATION_TYPE_UNSPECIFIED - Session operation type is unknown. */
  SESSION_OPERATION_TYPE_UNSPECIFIED = 0,
  /** CREATE - Create Session operation type. */
  CREATE = 1,
  /** TERMINATE - Terminate Session operation type. */
  TERMINATE = 2,
  /** DELETE - Delete Session operation type. */
  DELETE = 3,
  UNRECOGNIZED = -1,
}

export function sessionOperationMetadata_SessionOperationTypeFromJSON(
  object: any,
): SessionOperationMetadata_SessionOperationType {
  switch (object) {
    case 0:
    case "SESSION_OPERATION_TYPE_UNSPECIFIED":
      return SessionOperationMetadata_SessionOperationType.SESSION_OPERATION_TYPE_UNSPECIFIED;
    case 1:
    case "CREATE":
      return SessionOperationMetadata_SessionOperationType.CREATE;
    case 2:
    case "TERMINATE":
      return SessionOperationMetadata_SessionOperationType.TERMINATE;
    case 3:
    case "DELETE":
      return SessionOperationMetadata_SessionOperationType.DELETE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SessionOperationMetadata_SessionOperationType.UNRECOGNIZED;
  }
}

export function sessionOperationMetadata_SessionOperationTypeToJSON(
  object: SessionOperationMetadata_SessionOperationType,
): string {
  switch (object) {
    case SessionOperationMetadata_SessionOperationType.SESSION_OPERATION_TYPE_UNSPECIFIED:
      return "SESSION_OPERATION_TYPE_UNSPECIFIED";
    case SessionOperationMetadata_SessionOperationType.CREATE:
      return "CREATE";
    case SessionOperationMetadata_SessionOperationType.TERMINATE:
      return "TERMINATE";
    case SessionOperationMetadata_SessionOperationType.DELETE:
      return "DELETE";
    case SessionOperationMetadata_SessionOperationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SessionOperationMetadata_LabelsEntry {
  key: string;
  value: string;
}

/** The status of the operation. */
export interface ClusterOperationStatus {
  /** Output only. A message containing the operation state. */
  state: ClusterOperationStatus_State;
  /** Output only. A message containing the detailed operation state. */
  innerState: string;
  /** Output only. A message containing any operation metadata details. */
  details: string;
  /** Output only. The time this state was entered. */
  stateStartTime: Date | undefined;
}

/** The operation state. */
export enum ClusterOperationStatus_State {
  /** UNKNOWN - Unused. */
  UNKNOWN = 0,
  /** PENDING - The operation has been created. */
  PENDING = 1,
  /** RUNNING - The operation is running. */
  RUNNING = 2,
  /** DONE - The operation is done; either cancelled or completed. */
  DONE = 3,
  UNRECOGNIZED = -1,
}

export function clusterOperationStatus_StateFromJSON(object: any): ClusterOperationStatus_State {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return ClusterOperationStatus_State.UNKNOWN;
    case 1:
    case "PENDING":
      return ClusterOperationStatus_State.PENDING;
    case 2:
    case "RUNNING":
      return ClusterOperationStatus_State.RUNNING;
    case 3:
    case "DONE":
      return ClusterOperationStatus_State.DONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClusterOperationStatus_State.UNRECOGNIZED;
  }
}

export function clusterOperationStatus_StateToJSON(object: ClusterOperationStatus_State): string {
  switch (object) {
    case ClusterOperationStatus_State.UNKNOWN:
      return "UNKNOWN";
    case ClusterOperationStatus_State.PENDING:
      return "PENDING";
    case ClusterOperationStatus_State.RUNNING:
      return "RUNNING";
    case ClusterOperationStatus_State.DONE:
      return "DONE";
    case ClusterOperationStatus_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Metadata describing the operation. */
export interface ClusterOperationMetadata {
  /** Output only. Name of the cluster for the operation. */
  clusterName: string;
  /** Output only. Cluster UUID for the operation. */
  clusterUuid: string;
  /** Output only. Current operation status. */
  status:
    | ClusterOperationStatus
    | undefined;
  /** Output only. The previous operation status. */
  statusHistory: ClusterOperationStatus[];
  /** Output only. The operation type. */
  operationType: string;
  /** Output only. Short description of operation. */
  description: string;
  /** Output only. Labels associated with the operation */
  labels: { [key: string]: string };
  /** Output only. Errors encountered during operation execution. */
  warnings: string[];
  /** Output only. Child operation ids */
  childOperationIds: string[];
}

export interface ClusterOperationMetadata_LabelsEntry {
  key: string;
  value: string;
}

/** Metadata describing the node group operation. */
export interface NodeGroupOperationMetadata {
  /** Output only. Node group ID for the operation. */
  nodeGroupId: string;
  /** Output only. Cluster UUID associated with the node group operation. */
  clusterUuid: string;
  /** Output only. Current operation status. */
  status:
    | ClusterOperationStatus
    | undefined;
  /** Output only. The previous operation status. */
  statusHistory: ClusterOperationStatus[];
  /** The operation type. */
  operationType: NodeGroupOperationMetadata_NodeGroupOperationType;
  /** Output only. Short description of operation. */
  description: string;
  /** Output only. Labels associated with the operation. */
  labels: { [key: string]: string };
  /** Output only. Errors encountered during operation execution. */
  warnings: string[];
}

/** Operation type for node group resources. */
export enum NodeGroupOperationMetadata_NodeGroupOperationType {
  /** NODE_GROUP_OPERATION_TYPE_UNSPECIFIED - Node group operation type is unknown. */
  NODE_GROUP_OPERATION_TYPE_UNSPECIFIED = 0,
  /** CREATE - Create node group operation type. */
  CREATE = 1,
  /** UPDATE - Update node group operation type. */
  UPDATE = 2,
  /** DELETE - Delete node group operation type. */
  DELETE = 3,
  /** RESIZE - Resize node group operation type. */
  RESIZE = 4,
  UNRECOGNIZED = -1,
}

export function nodeGroupOperationMetadata_NodeGroupOperationTypeFromJSON(
  object: any,
): NodeGroupOperationMetadata_NodeGroupOperationType {
  switch (object) {
    case 0:
    case "NODE_GROUP_OPERATION_TYPE_UNSPECIFIED":
      return NodeGroupOperationMetadata_NodeGroupOperationType.NODE_GROUP_OPERATION_TYPE_UNSPECIFIED;
    case 1:
    case "CREATE":
      return NodeGroupOperationMetadata_NodeGroupOperationType.CREATE;
    case 2:
    case "UPDATE":
      return NodeGroupOperationMetadata_NodeGroupOperationType.UPDATE;
    case 3:
    case "DELETE":
      return NodeGroupOperationMetadata_NodeGroupOperationType.DELETE;
    case 4:
    case "RESIZE":
      return NodeGroupOperationMetadata_NodeGroupOperationType.RESIZE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NodeGroupOperationMetadata_NodeGroupOperationType.UNRECOGNIZED;
  }
}

export function nodeGroupOperationMetadata_NodeGroupOperationTypeToJSON(
  object: NodeGroupOperationMetadata_NodeGroupOperationType,
): string {
  switch (object) {
    case NodeGroupOperationMetadata_NodeGroupOperationType.NODE_GROUP_OPERATION_TYPE_UNSPECIFIED:
      return "NODE_GROUP_OPERATION_TYPE_UNSPECIFIED";
    case NodeGroupOperationMetadata_NodeGroupOperationType.CREATE:
      return "CREATE";
    case NodeGroupOperationMetadata_NodeGroupOperationType.UPDATE:
      return "UPDATE";
    case NodeGroupOperationMetadata_NodeGroupOperationType.DELETE:
      return "DELETE";
    case NodeGroupOperationMetadata_NodeGroupOperationType.RESIZE:
      return "RESIZE";
    case NodeGroupOperationMetadata_NodeGroupOperationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NodeGroupOperationMetadata_LabelsEntry {
  key: string;
  value: string;
}

function createBaseBatchOperationMetadata(): BatchOperationMetadata {
  return {
    batch: "",
    batchUuid: "",
    createTime: undefined,
    doneTime: undefined,
    operationType: 0,
    description: "",
    labels: {},
    warnings: [],
  };
}

export const BatchOperationMetadata: MessageFns<BatchOperationMetadata> = {
  encode(message: BatchOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.batch !== "") {
      writer.uint32(10).string(message.batch);
    }
    if (message.batchUuid !== "") {
      writer.uint32(18).string(message.batchUuid);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.doneTime !== undefined) {
      Timestamp.encode(toTimestamp(message.doneTime), writer.uint32(34).fork()).join();
    }
    if (message.operationType !== 0) {
      writer.uint32(48).int32(message.operationType);
    }
    if (message.description !== "") {
      writer.uint32(58).string(message.description);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      BatchOperationMetadata_LabelsEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    for (const v of message.warnings) {
      writer.uint32(74).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.batch = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.batchUuid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.doneTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.operationType = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          const entry8 = BatchOperationMetadata_LabelsEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.labels[entry8.key] = entry8.value;
          }
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.warnings.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchOperationMetadata {
    return {
      batch: isSet(object.batch) ? globalThis.String(object.batch) : "",
      batchUuid: isSet(object.batchUuid) ? globalThis.String(object.batchUuid) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      doneTime: isSet(object.doneTime) ? fromJsonTimestamp(object.doneTime) : undefined,
      operationType: isSet(object.operationType)
        ? batchOperationMetadata_BatchOperationTypeFromJSON(object.operationType)
        : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      warnings: globalThis.Array.isArray(object?.warnings) ? object.warnings.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: BatchOperationMetadata): unknown {
    const obj: any = {};
    if (message.batch !== "") {
      obj.batch = message.batch;
    }
    if (message.batchUuid !== "") {
      obj.batchUuid = message.batchUuid;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.doneTime !== undefined) {
      obj.doneTime = message.doneTime.toISOString();
    }
    if (message.operationType !== 0) {
      obj.operationType = batchOperationMetadata_BatchOperationTypeToJSON(message.operationType);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.warnings?.length) {
      obj.warnings = message.warnings;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchOperationMetadata>): BatchOperationMetadata {
    return BatchOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchOperationMetadata>): BatchOperationMetadata {
    const message = createBaseBatchOperationMetadata();
    message.batch = object.batch ?? "";
    message.batchUuid = object.batchUuid ?? "";
    message.createTime = object.createTime ?? undefined;
    message.doneTime = object.doneTime ?? undefined;
    message.operationType = object.operationType ?? 0;
    message.description = object.description ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.warnings = object.warnings?.map((e) => e) || [];
    return message;
  },
};

function createBaseBatchOperationMetadata_LabelsEntry(): BatchOperationMetadata_LabelsEntry {
  return { key: "", value: "" };
}

export const BatchOperationMetadata_LabelsEntry: MessageFns<BatchOperationMetadata_LabelsEntry> = {
  encode(message: BatchOperationMetadata_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchOperationMetadata_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchOperationMetadata_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchOperationMetadata_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: BatchOperationMetadata_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchOperationMetadata_LabelsEntry>): BatchOperationMetadata_LabelsEntry {
    return BatchOperationMetadata_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchOperationMetadata_LabelsEntry>): BatchOperationMetadata_LabelsEntry {
    const message = createBaseBatchOperationMetadata_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSessionOperationMetadata(): SessionOperationMetadata {
  return {
    session: "",
    sessionUuid: "",
    createTime: undefined,
    doneTime: undefined,
    operationType: 0,
    description: "",
    labels: {},
    warnings: [],
  };
}

export const SessionOperationMetadata: MessageFns<SessionOperationMetadata> = {
  encode(message: SessionOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.session !== "") {
      writer.uint32(10).string(message.session);
    }
    if (message.sessionUuid !== "") {
      writer.uint32(18).string(message.sessionUuid);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.doneTime !== undefined) {
      Timestamp.encode(toTimestamp(message.doneTime), writer.uint32(34).fork()).join();
    }
    if (message.operationType !== 0) {
      writer.uint32(48).int32(message.operationType);
    }
    if (message.description !== "") {
      writer.uint32(58).string(message.description);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      SessionOperationMetadata_LabelsEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    for (const v of message.warnings) {
      writer.uint32(74).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.session = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sessionUuid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.doneTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.operationType = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          const entry8 = SessionOperationMetadata_LabelsEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.labels[entry8.key] = entry8.value;
          }
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.warnings.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionOperationMetadata {
    return {
      session: isSet(object.session) ? globalThis.String(object.session) : "",
      sessionUuid: isSet(object.sessionUuid) ? globalThis.String(object.sessionUuid) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      doneTime: isSet(object.doneTime) ? fromJsonTimestamp(object.doneTime) : undefined,
      operationType: isSet(object.operationType)
        ? sessionOperationMetadata_SessionOperationTypeFromJSON(object.operationType)
        : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      warnings: globalThis.Array.isArray(object?.warnings) ? object.warnings.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: SessionOperationMetadata): unknown {
    const obj: any = {};
    if (message.session !== "") {
      obj.session = message.session;
    }
    if (message.sessionUuid !== "") {
      obj.sessionUuid = message.sessionUuid;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.doneTime !== undefined) {
      obj.doneTime = message.doneTime.toISOString();
    }
    if (message.operationType !== 0) {
      obj.operationType = sessionOperationMetadata_SessionOperationTypeToJSON(message.operationType);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.warnings?.length) {
      obj.warnings = message.warnings;
    }
    return obj;
  },

  create(base?: DeepPartial<SessionOperationMetadata>): SessionOperationMetadata {
    return SessionOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SessionOperationMetadata>): SessionOperationMetadata {
    const message = createBaseSessionOperationMetadata();
    message.session = object.session ?? "";
    message.sessionUuid = object.sessionUuid ?? "";
    message.createTime = object.createTime ?? undefined;
    message.doneTime = object.doneTime ?? undefined;
    message.operationType = object.operationType ?? 0;
    message.description = object.description ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.warnings = object.warnings?.map((e) => e) || [];
    return message;
  },
};

function createBaseSessionOperationMetadata_LabelsEntry(): SessionOperationMetadata_LabelsEntry {
  return { key: "", value: "" };
}

export const SessionOperationMetadata_LabelsEntry: MessageFns<SessionOperationMetadata_LabelsEntry> = {
  encode(message: SessionOperationMetadata_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionOperationMetadata_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionOperationMetadata_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionOperationMetadata_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SessionOperationMetadata_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<SessionOperationMetadata_LabelsEntry>): SessionOperationMetadata_LabelsEntry {
    return SessionOperationMetadata_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SessionOperationMetadata_LabelsEntry>): SessionOperationMetadata_LabelsEntry {
    const message = createBaseSessionOperationMetadata_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseClusterOperationStatus(): ClusterOperationStatus {
  return { state: 0, innerState: "", details: "", stateStartTime: undefined };
}

export const ClusterOperationStatus: MessageFns<ClusterOperationStatus> = {
  encode(message: ClusterOperationStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.innerState !== "") {
      writer.uint32(18).string(message.innerState);
    }
    if (message.details !== "") {
      writer.uint32(26).string(message.details);
    }
    if (message.stateStartTime !== undefined) {
      Timestamp.encode(toTimestamp(message.stateStartTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClusterOperationStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClusterOperationStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.innerState = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.details = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.stateStartTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClusterOperationStatus {
    return {
      state: isSet(object.state) ? clusterOperationStatus_StateFromJSON(object.state) : 0,
      innerState: isSet(object.innerState) ? globalThis.String(object.innerState) : "",
      details: isSet(object.details) ? globalThis.String(object.details) : "",
      stateStartTime: isSet(object.stateStartTime) ? fromJsonTimestamp(object.stateStartTime) : undefined,
    };
  },

  toJSON(message: ClusterOperationStatus): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = clusterOperationStatus_StateToJSON(message.state);
    }
    if (message.innerState !== "") {
      obj.innerState = message.innerState;
    }
    if (message.details !== "") {
      obj.details = message.details;
    }
    if (message.stateStartTime !== undefined) {
      obj.stateStartTime = message.stateStartTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ClusterOperationStatus>): ClusterOperationStatus {
    return ClusterOperationStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClusterOperationStatus>): ClusterOperationStatus {
    const message = createBaseClusterOperationStatus();
    message.state = object.state ?? 0;
    message.innerState = object.innerState ?? "";
    message.details = object.details ?? "";
    message.stateStartTime = object.stateStartTime ?? undefined;
    return message;
  },
};

function createBaseClusterOperationMetadata(): ClusterOperationMetadata {
  return {
    clusterName: "",
    clusterUuid: "",
    status: undefined,
    statusHistory: [],
    operationType: "",
    description: "",
    labels: {},
    warnings: [],
    childOperationIds: [],
  };
}

export const ClusterOperationMetadata: MessageFns<ClusterOperationMetadata> = {
  encode(message: ClusterOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clusterName !== "") {
      writer.uint32(58).string(message.clusterName);
    }
    if (message.clusterUuid !== "") {
      writer.uint32(66).string(message.clusterUuid);
    }
    if (message.status !== undefined) {
      ClusterOperationStatus.encode(message.status, writer.uint32(74).fork()).join();
    }
    for (const v of message.statusHistory) {
      ClusterOperationStatus.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.operationType !== "") {
      writer.uint32(90).string(message.operationType);
    }
    if (message.description !== "") {
      writer.uint32(98).string(message.description);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      ClusterOperationMetadata_LabelsEntry.encode({ key: key as any, value }, writer.uint32(106).fork()).join();
    });
    for (const v of message.warnings) {
      writer.uint32(114).string(v!);
    }
    for (const v of message.childOperationIds) {
      writer.uint32(122).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClusterOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClusterOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 7:
          if (tag !== 58) {
            break;
          }

          message.clusterName = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.clusterUuid = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.status = ClusterOperationStatus.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.statusHistory.push(ClusterOperationStatus.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.operationType = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.description = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          const entry13 = ClusterOperationMetadata_LabelsEntry.decode(reader, reader.uint32());
          if (entry13.value !== undefined) {
            message.labels[entry13.key] = entry13.value;
          }
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.warnings.push(reader.string());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.childOperationIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClusterOperationMetadata {
    return {
      clusterName: isSet(object.clusterName) ? globalThis.String(object.clusterName) : "",
      clusterUuid: isSet(object.clusterUuid) ? globalThis.String(object.clusterUuid) : "",
      status: isSet(object.status) ? ClusterOperationStatus.fromJSON(object.status) : undefined,
      statusHistory: globalThis.Array.isArray(object?.statusHistory)
        ? object.statusHistory.map((e: any) => ClusterOperationStatus.fromJSON(e))
        : [],
      operationType: isSet(object.operationType) ? globalThis.String(object.operationType) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      warnings: globalThis.Array.isArray(object?.warnings) ? object.warnings.map((e: any) => globalThis.String(e)) : [],
      childOperationIds: globalThis.Array.isArray(object?.childOperationIds)
        ? object.childOperationIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ClusterOperationMetadata): unknown {
    const obj: any = {};
    if (message.clusterName !== "") {
      obj.clusterName = message.clusterName;
    }
    if (message.clusterUuid !== "") {
      obj.clusterUuid = message.clusterUuid;
    }
    if (message.status !== undefined) {
      obj.status = ClusterOperationStatus.toJSON(message.status);
    }
    if (message.statusHistory?.length) {
      obj.statusHistory = message.statusHistory.map((e) => ClusterOperationStatus.toJSON(e));
    }
    if (message.operationType !== "") {
      obj.operationType = message.operationType;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.warnings?.length) {
      obj.warnings = message.warnings;
    }
    if (message.childOperationIds?.length) {
      obj.childOperationIds = message.childOperationIds;
    }
    return obj;
  },

  create(base?: DeepPartial<ClusterOperationMetadata>): ClusterOperationMetadata {
    return ClusterOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClusterOperationMetadata>): ClusterOperationMetadata {
    const message = createBaseClusterOperationMetadata();
    message.clusterName = object.clusterName ?? "";
    message.clusterUuid = object.clusterUuid ?? "";
    message.status = (object.status !== undefined && object.status !== null)
      ? ClusterOperationStatus.fromPartial(object.status)
      : undefined;
    message.statusHistory = object.statusHistory?.map((e) => ClusterOperationStatus.fromPartial(e)) || [];
    message.operationType = object.operationType ?? "";
    message.description = object.description ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.warnings = object.warnings?.map((e) => e) || [];
    message.childOperationIds = object.childOperationIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseClusterOperationMetadata_LabelsEntry(): ClusterOperationMetadata_LabelsEntry {
  return { key: "", value: "" };
}

export const ClusterOperationMetadata_LabelsEntry: MessageFns<ClusterOperationMetadata_LabelsEntry> = {
  encode(message: ClusterOperationMetadata_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClusterOperationMetadata_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClusterOperationMetadata_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClusterOperationMetadata_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ClusterOperationMetadata_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ClusterOperationMetadata_LabelsEntry>): ClusterOperationMetadata_LabelsEntry {
    return ClusterOperationMetadata_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClusterOperationMetadata_LabelsEntry>): ClusterOperationMetadata_LabelsEntry {
    const message = createBaseClusterOperationMetadata_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseNodeGroupOperationMetadata(): NodeGroupOperationMetadata {
  return {
    nodeGroupId: "",
    clusterUuid: "",
    status: undefined,
    statusHistory: [],
    operationType: 0,
    description: "",
    labels: {},
    warnings: [],
  };
}

export const NodeGroupOperationMetadata: MessageFns<NodeGroupOperationMetadata> = {
  encode(message: NodeGroupOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nodeGroupId !== "") {
      writer.uint32(10).string(message.nodeGroupId);
    }
    if (message.clusterUuid !== "") {
      writer.uint32(18).string(message.clusterUuid);
    }
    if (message.status !== undefined) {
      ClusterOperationStatus.encode(message.status, writer.uint32(26).fork()).join();
    }
    for (const v of message.statusHistory) {
      ClusterOperationStatus.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.operationType !== 0) {
      writer.uint32(40).int32(message.operationType);
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      NodeGroupOperationMetadata_LabelsEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    for (const v of message.warnings) {
      writer.uint32(66).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NodeGroupOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNodeGroupOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nodeGroupId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clusterUuid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.status = ClusterOperationStatus.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.statusHistory.push(ClusterOperationStatus.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.operationType = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = NodeGroupOperationMetadata_LabelsEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.labels[entry7.key] = entry7.value;
          }
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.warnings.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NodeGroupOperationMetadata {
    return {
      nodeGroupId: isSet(object.nodeGroupId) ? globalThis.String(object.nodeGroupId) : "",
      clusterUuid: isSet(object.clusterUuid) ? globalThis.String(object.clusterUuid) : "",
      status: isSet(object.status) ? ClusterOperationStatus.fromJSON(object.status) : undefined,
      statusHistory: globalThis.Array.isArray(object?.statusHistory)
        ? object.statusHistory.map((e: any) => ClusterOperationStatus.fromJSON(e))
        : [],
      operationType: isSet(object.operationType)
        ? nodeGroupOperationMetadata_NodeGroupOperationTypeFromJSON(object.operationType)
        : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      warnings: globalThis.Array.isArray(object?.warnings) ? object.warnings.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: NodeGroupOperationMetadata): unknown {
    const obj: any = {};
    if (message.nodeGroupId !== "") {
      obj.nodeGroupId = message.nodeGroupId;
    }
    if (message.clusterUuid !== "") {
      obj.clusterUuid = message.clusterUuid;
    }
    if (message.status !== undefined) {
      obj.status = ClusterOperationStatus.toJSON(message.status);
    }
    if (message.statusHistory?.length) {
      obj.statusHistory = message.statusHistory.map((e) => ClusterOperationStatus.toJSON(e));
    }
    if (message.operationType !== 0) {
      obj.operationType = nodeGroupOperationMetadata_NodeGroupOperationTypeToJSON(message.operationType);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.warnings?.length) {
      obj.warnings = message.warnings;
    }
    return obj;
  },

  create(base?: DeepPartial<NodeGroupOperationMetadata>): NodeGroupOperationMetadata {
    return NodeGroupOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NodeGroupOperationMetadata>): NodeGroupOperationMetadata {
    const message = createBaseNodeGroupOperationMetadata();
    message.nodeGroupId = object.nodeGroupId ?? "";
    message.clusterUuid = object.clusterUuid ?? "";
    message.status = (object.status !== undefined && object.status !== null)
      ? ClusterOperationStatus.fromPartial(object.status)
      : undefined;
    message.statusHistory = object.statusHistory?.map((e) => ClusterOperationStatus.fromPartial(e)) || [];
    message.operationType = object.operationType ?? 0;
    message.description = object.description ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.warnings = object.warnings?.map((e) => e) || [];
    return message;
  },
};

function createBaseNodeGroupOperationMetadata_LabelsEntry(): NodeGroupOperationMetadata_LabelsEntry {
  return { key: "", value: "" };
}

export const NodeGroupOperationMetadata_LabelsEntry: MessageFns<NodeGroupOperationMetadata_LabelsEntry> = {
  encode(message: NodeGroupOperationMetadata_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NodeGroupOperationMetadata_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNodeGroupOperationMetadata_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NodeGroupOperationMetadata_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: NodeGroupOperationMetadata_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<NodeGroupOperationMetadata_LabelsEntry>): NodeGroupOperationMetadata_LabelsEntry {
    return NodeGroupOperationMetadata_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NodeGroupOperationMetadata_LabelsEntry>): NodeGroupOperationMetadata_LabelsEntry {
    const message = createBaseNodeGroupOperationMetadata_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
