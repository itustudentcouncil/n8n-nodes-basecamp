// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dataproc/v1/sessions.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { EnvironmentConfig, RuntimeConfig, RuntimeInfo } from "./shared.js";

export const protobufPackage = "google.cloud.dataproc.v1";

/** A request to create a session. */
export interface CreateSessionRequest {
  /** Required. The parent resource where this session will be created. */
  parent: string;
  /** Required. The interactive session to create. */
  session:
    | Session
    | undefined;
  /**
   * Required. The ID to use for the session, which becomes the final component
   * of the session's resource name.
   *
   * This value must be 4-63 characters. Valid characters
   * are /[a-z][0-9]-/.
   */
  sessionId: string;
  /**
   * Optional. A unique ID used to identify the request. If the service
   * receives two
   * [CreateSessionRequests](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.CreateSessionRequest)s
   * with the same ID, the second request is ignored, and the
   * first [Session][google.cloud.dataproc.v1.Session] is created and stored in
   * the backend.
   *
   * Recommendation: Set this value to a
   * [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
   *
   * The value must contain only letters (a-z, A-Z), numbers (0-9),
   * underscores (_), and hyphens (-). The maximum length is 40 characters.
   */
  requestId: string;
}

/** A request to get the resource representation for a session. */
export interface GetSessionRequest {
  /** Required. The name of the session to retrieve. */
  name: string;
}

/** A request to list sessions in a project. */
export interface ListSessionsRequest {
  /** Required. The parent, which owns this collection of sessions. */
  parent: string;
  /**
   * Optional. The maximum number of sessions to return in each response.
   * The service may return fewer than this value.
   */
  pageSize: number;
  /**
   * Optional. A page token received from a previous `ListSessions` call.
   * Provide this token to retrieve the subsequent page.
   */
  pageToken: string;
  /**
   * Optional. A filter for the sessions to return in the response.
   *
   * A filter is a logical expression constraining the values of various fields
   * in each session resource. Filters are case sensitive, and may contain
   * multiple clauses combined with logical operators (AND, OR).
   * Supported fields are `session_id`, `session_uuid`, `state`, `create_time`,
   * and `labels`.
   *
   * Example: `state = ACTIVE and create_time < "2023-01-01T00:00:00Z"`
   * is a filter for sessions in an ACTIVE state that were created before
   * 2023-01-01. `state = ACTIVE and labels.environment=production` is a filter
   * for sessions in an ACTIVE state that have a production environment label.
   *
   * See https://google.aip.dev/assets/misc/ebnf-filtering.txt for a detailed
   * description of the filter syntax and a list of supported comparators.
   */
  filter: string;
}

/** A list of interactive sessions. */
export interface ListSessionsResponse {
  /** Output only. The sessions from the specified collection. */
  sessions: Session[];
  /**
   * A token, which can be sent as `page_token`, to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** A request to terminate an interactive session. */
export interface TerminateSessionRequest {
  /** Required. The name of the session resource to terminate. */
  name: string;
  /**
   * Optional. A unique ID used to identify the request. If the service
   * receives two
   * [TerminateSessionRequest](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.TerminateSessionRequest)s
   * with the same ID, the second request is ignored.
   *
   * Recommendation: Set this value to a
   * [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
   *
   * The value must contain only letters (a-z, A-Z), numbers (0-9),
   * underscores (_), and hyphens (-). The maximum length is 40 characters.
   */
  requestId: string;
}

/** A request to delete a session. */
export interface DeleteSessionRequest {
  /** Required. The name of the session resource to delete. */
  name: string;
  /**
   * Optional. A unique ID used to identify the request. If the service
   * receives two
   * [DeleteSessionRequest](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.DeleteSessionRequest)s
   * with the same ID, the second request is ignored.
   *
   * Recommendation: Set this value to a
   * [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
   *
   * The value must contain only letters (a-z, A-Z), numbers (0-9),
   * underscores (_), and hyphens (-). The maximum length is 40 characters.
   */
  requestId: string;
}

/** A representation of a session. */
export interface Session {
  /** Required. The resource name of the session. */
  name: string;
  /**
   * Output only. A session UUID (Unique Universal Identifier). The service
   * generates this value when it creates the session.
   */
  uuid: string;
  /** Output only. The time when the session was created. */
  createTime:
    | Date
    | undefined;
  /** Optional. Jupyter session config. */
  jupyterSession?:
    | JupyterConfig
    | undefined;
  /** Optional. Spark Connect session config. */
  sparkConnectSession?:
    | SparkConnectConfig
    | undefined;
  /** Output only. Runtime information about session execution. */
  runtimeInfo:
    | RuntimeInfo
    | undefined;
  /** Output only. A state of the session. */
  state: Session_State;
  /**
   * Output only. Session state details, such as the failure
   * description if the state is `FAILED`.
   */
  stateMessage: string;
  /** Output only. The time when the session entered the current state. */
  stateTime:
    | Date
    | undefined;
  /** Output only. The email address of the user who created the session. */
  creator: string;
  /**
   * Optional. The labels to associate with the session.
   * Label **keys** must contain 1 to 63 characters, and must conform to
   * [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).
   * Label **values** may be empty, but, if present, must contain 1 to 63
   * characters, and must conform to [RFC
   * 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
   * associated with a session.
   */
  labels: { [key: string]: string };
  /** Optional. Runtime configuration for the session execution. */
  runtimeConfig:
    | RuntimeConfig
    | undefined;
  /** Optional. Environment configuration for the session execution. */
  environmentConfig:
    | EnvironmentConfig
    | undefined;
  /** Optional. The email address of the user who owns the session. */
  user: string;
  /** Output only. Historical state information for the session. */
  stateHistory: Session_SessionStateHistory[];
  /**
   * Optional. The session template used by the session.
   *
   * Only resource names, including project ID and location, are valid.
   *
   * Example:
   * * `https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]`
   * * `projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]`
   *
   * The template must be in the same project and Dataproc region as the
   * session.
   */
  sessionTemplate: string;
}

/** The session state. */
export enum Session_State {
  /** STATE_UNSPECIFIED - The session state is unknown. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - The session is created prior to running. */
  CREATING = 1,
  /** ACTIVE - The session is running. */
  ACTIVE = 2,
  /** TERMINATING - The session is terminating. */
  TERMINATING = 3,
  /** TERMINATED - The session is terminated successfully. */
  TERMINATED = 4,
  /** FAILED - The session is no longer running due to an error. */
  FAILED = 5,
  UNRECOGNIZED = -1,
}

export function session_StateFromJSON(object: any): Session_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Session_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Session_State.CREATING;
    case 2:
    case "ACTIVE":
      return Session_State.ACTIVE;
    case 3:
    case "TERMINATING":
      return Session_State.TERMINATING;
    case 4:
    case "TERMINATED":
      return Session_State.TERMINATED;
    case 5:
    case "FAILED":
      return Session_State.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Session_State.UNRECOGNIZED;
  }
}

export function session_StateToJSON(object: Session_State): string {
  switch (object) {
    case Session_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Session_State.CREATING:
      return "CREATING";
    case Session_State.ACTIVE:
      return "ACTIVE";
    case Session_State.TERMINATING:
      return "TERMINATING";
    case Session_State.TERMINATED:
      return "TERMINATED";
    case Session_State.FAILED:
      return "FAILED";
    case Session_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Historical state information. */
export interface Session_SessionStateHistory {
  /**
   * Output only. The state of the session at this point in the session
   * history.
   */
  state: Session_State;
  /**
   * Output only. Details about the state at this point in the session
   * history.
   */
  stateMessage: string;
  /** Output only. The time when the session entered the historical state. */
  stateStartTime: Date | undefined;
}

export interface Session_LabelsEntry {
  key: string;
  value: string;
}

/** Jupyter configuration for an interactive session. */
export interface JupyterConfig {
  /** Optional. Kernel */
  kernel: JupyterConfig_Kernel;
  /** Optional. Display name, shown in the Jupyter kernelspec card. */
  displayName: string;
}

/** Jupyter kernel types. */
export enum JupyterConfig_Kernel {
  /** KERNEL_UNSPECIFIED - The kernel is unknown. */
  KERNEL_UNSPECIFIED = 0,
  /** PYTHON - Python kernel. */
  PYTHON = 1,
  /** SCALA - Scala kernel. */
  SCALA = 2,
  UNRECOGNIZED = -1,
}

export function jupyterConfig_KernelFromJSON(object: any): JupyterConfig_Kernel {
  switch (object) {
    case 0:
    case "KERNEL_UNSPECIFIED":
      return JupyterConfig_Kernel.KERNEL_UNSPECIFIED;
    case 1:
    case "PYTHON":
      return JupyterConfig_Kernel.PYTHON;
    case 2:
    case "SCALA":
      return JupyterConfig_Kernel.SCALA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return JupyterConfig_Kernel.UNRECOGNIZED;
  }
}

export function jupyterConfig_KernelToJSON(object: JupyterConfig_Kernel): string {
  switch (object) {
    case JupyterConfig_Kernel.KERNEL_UNSPECIFIED:
      return "KERNEL_UNSPECIFIED";
    case JupyterConfig_Kernel.PYTHON:
      return "PYTHON";
    case JupyterConfig_Kernel.SCALA:
      return "SCALA";
    case JupyterConfig_Kernel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Spark Connect configuration for an interactive session. */
export interface SparkConnectConfig {
}

function createBaseCreateSessionRequest(): CreateSessionRequest {
  return { parent: "", session: undefined, sessionId: "", requestId: "" };
}

export const CreateSessionRequest: MessageFns<CreateSessionRequest> = {
  encode(message: CreateSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.session !== undefined) {
      Session.encode(message.session, writer.uint32(18).fork()).join();
    }
    if (message.sessionId !== "") {
      writer.uint32(26).string(message.sessionId);
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.session = Session.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSessionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      session: isSet(object.session) ? Session.fromJSON(object.session) : undefined,
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateSessionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.session !== undefined) {
      obj.session = Session.toJSON(message.session);
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSessionRequest>): CreateSessionRequest {
    return CreateSessionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSessionRequest>): CreateSessionRequest {
    const message = createBaseCreateSessionRequest();
    message.parent = object.parent ?? "";
    message.session = (object.session !== undefined && object.session !== null)
      ? Session.fromPartial(object.session)
      : undefined;
    message.sessionId = object.sessionId ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseGetSessionRequest(): GetSessionRequest {
  return { name: "" };
}

export const GetSessionRequest: MessageFns<GetSessionRequest> = {
  encode(message: GetSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSessionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSessionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSessionRequest>): GetSessionRequest {
    return GetSessionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSessionRequest>): GetSessionRequest {
    const message = createBaseGetSessionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSessionsRequest(): ListSessionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListSessionsRequest: MessageFns<ListSessionsRequest> = {
  encode(message: ListSessionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSessionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSessionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListSessionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSessionsRequest>): ListSessionsRequest {
    return ListSessionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSessionsRequest>): ListSessionsRequest {
    const message = createBaseListSessionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListSessionsResponse(): ListSessionsResponse {
  return { sessions: [], nextPageToken: "" };
}

export const ListSessionsResponse: MessageFns<ListSessionsResponse> = {
  encode(message: ListSessionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sessions) {
      Session.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSessionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sessions.push(Session.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSessionsResponse {
    return {
      sessions: globalThis.Array.isArray(object?.sessions) ? object.sessions.map((e: any) => Session.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSessionsResponse): unknown {
    const obj: any = {};
    if (message.sessions?.length) {
      obj.sessions = message.sessions.map((e) => Session.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSessionsResponse>): ListSessionsResponse {
    return ListSessionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSessionsResponse>): ListSessionsResponse {
    const message = createBaseListSessionsResponse();
    message.sessions = object.sessions?.map((e) => Session.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseTerminateSessionRequest(): TerminateSessionRequest {
  return { name: "", requestId: "" };
}

export const TerminateSessionRequest: MessageFns<TerminateSessionRequest> = {
  encode(message: TerminateSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TerminateSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTerminateSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TerminateSessionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: TerminateSessionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<TerminateSessionRequest>): TerminateSessionRequest {
    return TerminateSessionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TerminateSessionRequest>): TerminateSessionRequest {
    const message = createBaseTerminateSessionRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteSessionRequest(): DeleteSessionRequest {
  return { name: "", requestId: "" };
}

export const DeleteSessionRequest: MessageFns<DeleteSessionRequest> = {
  encode(message: DeleteSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSessionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteSessionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSessionRequest>): DeleteSessionRequest {
    return DeleteSessionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSessionRequest>): DeleteSessionRequest {
    const message = createBaseDeleteSessionRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseSession(): Session {
  return {
    name: "",
    uuid: "",
    createTime: undefined,
    jupyterSession: undefined,
    sparkConnectSession: undefined,
    runtimeInfo: undefined,
    state: 0,
    stateMessage: "",
    stateTime: undefined,
    creator: "",
    labels: {},
    runtimeConfig: undefined,
    environmentConfig: undefined,
    user: "",
    stateHistory: [],
    sessionTemplate: "",
  };
}

export const Session: MessageFns<Session> = {
  encode(message: Session, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uuid !== "") {
      writer.uint32(18).string(message.uuid);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.jupyterSession !== undefined) {
      JupyterConfig.encode(message.jupyterSession, writer.uint32(34).fork()).join();
    }
    if (message.sparkConnectSession !== undefined) {
      SparkConnectConfig.encode(message.sparkConnectSession, writer.uint32(138).fork()).join();
    }
    if (message.runtimeInfo !== undefined) {
      RuntimeInfo.encode(message.runtimeInfo, writer.uint32(50).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    if (message.stateMessage !== "") {
      writer.uint32(66).string(message.stateMessage);
    }
    if (message.stateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.stateTime), writer.uint32(74).fork()).join();
    }
    if (message.creator !== "") {
      writer.uint32(82).string(message.creator);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Session_LabelsEntry.encode({ key: key as any, value }, writer.uint32(90).fork()).join();
    });
    if (message.runtimeConfig !== undefined) {
      RuntimeConfig.encode(message.runtimeConfig, writer.uint32(98).fork()).join();
    }
    if (message.environmentConfig !== undefined) {
      EnvironmentConfig.encode(message.environmentConfig, writer.uint32(106).fork()).join();
    }
    if (message.user !== "") {
      writer.uint32(114).string(message.user);
    }
    for (const v of message.stateHistory) {
      Session_SessionStateHistory.encode(v!, writer.uint32(122).fork()).join();
    }
    if (message.sessionTemplate !== "") {
      writer.uint32(130).string(message.sessionTemplate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Session {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSession();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uuid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.jupyterSession = JupyterConfig.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.sparkConnectSession = SparkConnectConfig.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.runtimeInfo = RuntimeInfo.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.stateMessage = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.stateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          const entry11 = Session_LabelsEntry.decode(reader, reader.uint32());
          if (entry11.value !== undefined) {
            message.labels[entry11.key] = entry11.value;
          }
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.runtimeConfig = RuntimeConfig.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.environmentConfig = EnvironmentConfig.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.user = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.stateHistory.push(Session_SessionStateHistory.decode(reader, reader.uint32()));
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.sessionTemplate = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Session {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      jupyterSession: isSet(object.jupyterSession) ? JupyterConfig.fromJSON(object.jupyterSession) : undefined,
      sparkConnectSession: isSet(object.sparkConnectSession)
        ? SparkConnectConfig.fromJSON(object.sparkConnectSession)
        : undefined,
      runtimeInfo: isSet(object.runtimeInfo) ? RuntimeInfo.fromJSON(object.runtimeInfo) : undefined,
      state: isSet(object.state) ? session_StateFromJSON(object.state) : 0,
      stateMessage: isSet(object.stateMessage) ? globalThis.String(object.stateMessage) : "",
      stateTime: isSet(object.stateTime) ? fromJsonTimestamp(object.stateTime) : undefined,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      runtimeConfig: isSet(object.runtimeConfig) ? RuntimeConfig.fromJSON(object.runtimeConfig) : undefined,
      environmentConfig: isSet(object.environmentConfig)
        ? EnvironmentConfig.fromJSON(object.environmentConfig)
        : undefined,
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      stateHistory: globalThis.Array.isArray(object?.stateHistory)
        ? object.stateHistory.map((e: any) => Session_SessionStateHistory.fromJSON(e))
        : [],
      sessionTemplate: isSet(object.sessionTemplate) ? globalThis.String(object.sessionTemplate) : "",
    };
  },

  toJSON(message: Session): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.jupyterSession !== undefined) {
      obj.jupyterSession = JupyterConfig.toJSON(message.jupyterSession);
    }
    if (message.sparkConnectSession !== undefined) {
      obj.sparkConnectSession = SparkConnectConfig.toJSON(message.sparkConnectSession);
    }
    if (message.runtimeInfo !== undefined) {
      obj.runtimeInfo = RuntimeInfo.toJSON(message.runtimeInfo);
    }
    if (message.state !== 0) {
      obj.state = session_StateToJSON(message.state);
    }
    if (message.stateMessage !== "") {
      obj.stateMessage = message.stateMessage;
    }
    if (message.stateTime !== undefined) {
      obj.stateTime = message.stateTime.toISOString();
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.runtimeConfig !== undefined) {
      obj.runtimeConfig = RuntimeConfig.toJSON(message.runtimeConfig);
    }
    if (message.environmentConfig !== undefined) {
      obj.environmentConfig = EnvironmentConfig.toJSON(message.environmentConfig);
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.stateHistory?.length) {
      obj.stateHistory = message.stateHistory.map((e) => Session_SessionStateHistory.toJSON(e));
    }
    if (message.sessionTemplate !== "") {
      obj.sessionTemplate = message.sessionTemplate;
    }
    return obj;
  },

  create(base?: DeepPartial<Session>): Session {
    return Session.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Session>): Session {
    const message = createBaseSession();
    message.name = object.name ?? "";
    message.uuid = object.uuid ?? "";
    message.createTime = object.createTime ?? undefined;
    message.jupyterSession = (object.jupyterSession !== undefined && object.jupyterSession !== null)
      ? JupyterConfig.fromPartial(object.jupyterSession)
      : undefined;
    message.sparkConnectSession = (object.sparkConnectSession !== undefined && object.sparkConnectSession !== null)
      ? SparkConnectConfig.fromPartial(object.sparkConnectSession)
      : undefined;
    message.runtimeInfo = (object.runtimeInfo !== undefined && object.runtimeInfo !== null)
      ? RuntimeInfo.fromPartial(object.runtimeInfo)
      : undefined;
    message.state = object.state ?? 0;
    message.stateMessage = object.stateMessage ?? "";
    message.stateTime = object.stateTime ?? undefined;
    message.creator = object.creator ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.runtimeConfig = (object.runtimeConfig !== undefined && object.runtimeConfig !== null)
      ? RuntimeConfig.fromPartial(object.runtimeConfig)
      : undefined;
    message.environmentConfig = (object.environmentConfig !== undefined && object.environmentConfig !== null)
      ? EnvironmentConfig.fromPartial(object.environmentConfig)
      : undefined;
    message.user = object.user ?? "";
    message.stateHistory = object.stateHistory?.map((e) => Session_SessionStateHistory.fromPartial(e)) || [];
    message.sessionTemplate = object.sessionTemplate ?? "";
    return message;
  },
};

function createBaseSession_SessionStateHistory(): Session_SessionStateHistory {
  return { state: 0, stateMessage: "", stateStartTime: undefined };
}

export const Session_SessionStateHistory: MessageFns<Session_SessionStateHistory> = {
  encode(message: Session_SessionStateHistory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.stateMessage !== "") {
      writer.uint32(18).string(message.stateMessage);
    }
    if (message.stateStartTime !== undefined) {
      Timestamp.encode(toTimestamp(message.stateStartTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Session_SessionStateHistory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSession_SessionStateHistory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stateMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stateStartTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Session_SessionStateHistory {
    return {
      state: isSet(object.state) ? session_StateFromJSON(object.state) : 0,
      stateMessage: isSet(object.stateMessage) ? globalThis.String(object.stateMessage) : "",
      stateStartTime: isSet(object.stateStartTime) ? fromJsonTimestamp(object.stateStartTime) : undefined,
    };
  },

  toJSON(message: Session_SessionStateHistory): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = session_StateToJSON(message.state);
    }
    if (message.stateMessage !== "") {
      obj.stateMessage = message.stateMessage;
    }
    if (message.stateStartTime !== undefined) {
      obj.stateStartTime = message.stateStartTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Session_SessionStateHistory>): Session_SessionStateHistory {
    return Session_SessionStateHistory.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Session_SessionStateHistory>): Session_SessionStateHistory {
    const message = createBaseSession_SessionStateHistory();
    message.state = object.state ?? 0;
    message.stateMessage = object.stateMessage ?? "";
    message.stateStartTime = object.stateStartTime ?? undefined;
    return message;
  },
};

function createBaseSession_LabelsEntry(): Session_LabelsEntry {
  return { key: "", value: "" };
}

export const Session_LabelsEntry: MessageFns<Session_LabelsEntry> = {
  encode(message: Session_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Session_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSession_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Session_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Session_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Session_LabelsEntry>): Session_LabelsEntry {
    return Session_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Session_LabelsEntry>): Session_LabelsEntry {
    const message = createBaseSession_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseJupyterConfig(): JupyterConfig {
  return { kernel: 0, displayName: "" };
}

export const JupyterConfig: MessageFns<JupyterConfig> = {
  encode(message: JupyterConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kernel !== 0) {
      writer.uint32(8).int32(message.kernel);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JupyterConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJupyterConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.kernel = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JupyterConfig {
    return {
      kernel: isSet(object.kernel) ? jupyterConfig_KernelFromJSON(object.kernel) : 0,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: JupyterConfig): unknown {
    const obj: any = {};
    if (message.kernel !== 0) {
      obj.kernel = jupyterConfig_KernelToJSON(message.kernel);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<JupyterConfig>): JupyterConfig {
    return JupyterConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<JupyterConfig>): JupyterConfig {
    const message = createBaseJupyterConfig();
    message.kernel = object.kernel ?? 0;
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseSparkConnectConfig(): SparkConnectConfig {
  return {};
}

export const SparkConnectConfig: MessageFns<SparkConnectConfig> = {
  encode(_: SparkConnectConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SparkConnectConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSparkConnectConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SparkConnectConfig {
    return {};
  },

  toJSON(_: SparkConnectConfig): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SparkConnectConfig>): SparkConnectConfig {
    return SparkConnectConfig.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SparkConnectConfig>): SparkConnectConfig {
    const message = createBaseSparkConnectConfig();
    return message;
  },
};

/** The `SessionController` provides methods to manage interactive sessions. */
export type SessionControllerDefinition = typeof SessionControllerDefinition;
export const SessionControllerDefinition = {
  name: "SessionController",
  fullName: "google.cloud.dataproc.v1.SessionController",
  methods: {
    /** Create an interactive session asynchronously. */
    createSession: {
      name: "CreateSession",
      requestType: CreateSessionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              60,
              10,
              7,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              18,
              49,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              97,
              116,
              97,
              112,
              114,
              111,
              99,
              46,
              118,
              49,
              46,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              44,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              55,
              58,
              7,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              34,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets the resource representation for an interactive session. */
    getSession: {
      name: "GetSession",
      requestType: GetSessionRequest,
      requestStream: false,
      responseType: Session,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists interactive sessions. */
    listSessions: {
      name: "ListSessions",
      requestType: ListSessionsRequest,
      requestStream: false,
      responseType: ListSessionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Terminates the interactive session. */
    terminateSession: {
      name: "TerminateSession",
      requestType: TerminateSessionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              60,
              10,
              7,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              18,
              49,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              97,
              116,
              97,
              112,
              114,
              111,
              99,
              46,
              118,
              49,
              46,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              58,
              1,
              42,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              114,
              109,
              105,
              110,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes the interactive session resource. If the session is not in terminal
     * state, it is terminated, and then deleted.
     */
    deleteSession: {
      name: "DeleteSession",
      requestType: DeleteSessionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              60,
              10,
              7,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              18,
              49,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              97,
              116,
              97,
              112,
              114,
              111,
              99,
              46,
              118,
              49,
              46,
              83,
              101,
              115,
              115,
              105,
              111,
              110,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              42,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SessionControllerServiceImplementation<CallContextExt = {}> {
  /** Create an interactive session asynchronously. */
  createSession(request: CreateSessionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Gets the resource representation for an interactive session. */
  getSession(request: GetSessionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Session>>;
  /** Lists interactive sessions. */
  listSessions(
    request: ListSessionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSessionsResponse>>;
  /** Terminates the interactive session. */
  terminateSession(
    request: TerminateSessionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes the interactive session resource. If the session is not in terminal
   * state, it is terminated, and then deleted.
   */
  deleteSession(request: DeleteSessionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface SessionControllerClient<CallOptionsExt = {}> {
  /** Create an interactive session asynchronously. */
  createSession(request: DeepPartial<CreateSessionRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Gets the resource representation for an interactive session. */
  getSession(request: DeepPartial<GetSessionRequest>, options?: CallOptions & CallOptionsExt): Promise<Session>;
  /** Lists interactive sessions. */
  listSessions(
    request: DeepPartial<ListSessionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSessionsResponse>;
  /** Terminates the interactive session. */
  terminateSession(
    request: DeepPartial<TerminateSessionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes the interactive session resource. If the session is not in terminal
   * state, it is terminated, and then deleted.
   */
  deleteSession(request: DeepPartial<DeleteSessionRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
