// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dataproc/v1/session_templates.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { JupyterConfig, SparkConnectConfig } from "./sessions.js";
import { EnvironmentConfig, RuntimeConfig } from "./shared.js";

export const protobufPackage = "google.cloud.dataproc.v1";

/** A request to create a session template. */
export interface CreateSessionTemplateRequest {
  /** Required. The parent resource where this session template will be created. */
  parent: string;
  /** Required. The session template to create. */
  sessionTemplate: SessionTemplate | undefined;
}

/** A request to update a session template. */
export interface UpdateSessionTemplateRequest {
  /** Required. The updated session template. */
  sessionTemplate: SessionTemplate | undefined;
}

/** A request to get the resource representation for a session template. */
export interface GetSessionTemplateRequest {
  /** Required. The name of the session template to retrieve. */
  name: string;
}

/** A request to list session templates in a project. */
export interface ListSessionTemplatesRequest {
  /** Required. The parent that owns this collection of session templates. */
  parent: string;
  /**
   * Optional. The maximum number of sessions to return in each response.
   * The service may return fewer than this value.
   */
  pageSize: number;
  /**
   * Optional. A page token received from a previous `ListSessions` call.
   * Provide this token to retrieve the subsequent page.
   */
  pageToken: string;
  /**
   * Optional. A filter for the session templates to return in the response.
   * Filters are case sensitive and have the following syntax:
   *
   * [field = value] AND [field [= value]] ...
   */
  filter: string;
}

/** A list of session templates. */
export interface ListSessionTemplatesResponse {
  /** Output only. Session template list */
  sessionTemplates: SessionTemplate[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** A request to delete a session template. */
export interface DeleteSessionTemplateRequest {
  /** Required. The name of the session template resource to delete. */
  name: string;
}

/** A representation of a session template. */
export interface SessionTemplate {
  /** Required. The resource name of the session template. */
  name: string;
  /** Optional. Brief description of the template. */
  description: string;
  /** Output only. The time when the template was created. */
  createTime:
    | Date
    | undefined;
  /** Optional. Jupyter session config. */
  jupyterSession?:
    | JupyterConfig
    | undefined;
  /** Optional. Spark Connect session config. */
  sparkConnectSession?:
    | SparkConnectConfig
    | undefined;
  /** Output only. The email address of the user who created the template. */
  creator: string;
  /**
   * Optional. Labels to associate with sessions created using this template.
   * Label **keys** must contain 1 to 63 characters, and must conform to
   * [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).
   * Label **values** can be empty, but, if present, must contain 1 to 63
   * characters and conform to [RFC
   * 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
   * associated with a session.
   */
  labels: { [key: string]: string };
  /** Optional. Runtime configuration for session execution. */
  runtimeConfig:
    | RuntimeConfig
    | undefined;
  /** Optional. Environment configuration for session execution. */
  environmentConfig:
    | EnvironmentConfig
    | undefined;
  /** Output only. The time the template was last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. A session template UUID (Unique Universal Identifier). The
   * service generates this value when it creates the session template.
   */
  uuid: string;
}

export interface SessionTemplate_LabelsEntry {
  key: string;
  value: string;
}

function createBaseCreateSessionTemplateRequest(): CreateSessionTemplateRequest {
  return { parent: "", sessionTemplate: undefined };
}

export const CreateSessionTemplateRequest: MessageFns<CreateSessionTemplateRequest> = {
  encode(message: CreateSessionTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.sessionTemplate !== undefined) {
      SessionTemplate.encode(message.sessionTemplate, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSessionTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSessionTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sessionTemplate = SessionTemplate.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSessionTemplateRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      sessionTemplate: isSet(object.sessionTemplate) ? SessionTemplate.fromJSON(object.sessionTemplate) : undefined,
    };
  },

  toJSON(message: CreateSessionTemplateRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.sessionTemplate !== undefined) {
      obj.sessionTemplate = SessionTemplate.toJSON(message.sessionTemplate);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSessionTemplateRequest>): CreateSessionTemplateRequest {
    return CreateSessionTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSessionTemplateRequest>): CreateSessionTemplateRequest {
    const message = createBaseCreateSessionTemplateRequest();
    message.parent = object.parent ?? "";
    message.sessionTemplate = (object.sessionTemplate !== undefined && object.sessionTemplate !== null)
      ? SessionTemplate.fromPartial(object.sessionTemplate)
      : undefined;
    return message;
  },
};

function createBaseUpdateSessionTemplateRequest(): UpdateSessionTemplateRequest {
  return { sessionTemplate: undefined };
}

export const UpdateSessionTemplateRequest: MessageFns<UpdateSessionTemplateRequest> = {
  encode(message: UpdateSessionTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionTemplate !== undefined) {
      SessionTemplate.encode(message.sessionTemplate, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSessionTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSessionTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sessionTemplate = SessionTemplate.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSessionTemplateRequest {
    return {
      sessionTemplate: isSet(object.sessionTemplate) ? SessionTemplate.fromJSON(object.sessionTemplate) : undefined,
    };
  },

  toJSON(message: UpdateSessionTemplateRequest): unknown {
    const obj: any = {};
    if (message.sessionTemplate !== undefined) {
      obj.sessionTemplate = SessionTemplate.toJSON(message.sessionTemplate);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSessionTemplateRequest>): UpdateSessionTemplateRequest {
    return UpdateSessionTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSessionTemplateRequest>): UpdateSessionTemplateRequest {
    const message = createBaseUpdateSessionTemplateRequest();
    message.sessionTemplate = (object.sessionTemplate !== undefined && object.sessionTemplate !== null)
      ? SessionTemplate.fromPartial(object.sessionTemplate)
      : undefined;
    return message;
  },
};

function createBaseGetSessionTemplateRequest(): GetSessionTemplateRequest {
  return { name: "" };
}

export const GetSessionTemplateRequest: MessageFns<GetSessionTemplateRequest> = {
  encode(message: GetSessionTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSessionTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSessionTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSessionTemplateRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSessionTemplateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSessionTemplateRequest>): GetSessionTemplateRequest {
    return GetSessionTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSessionTemplateRequest>): GetSessionTemplateRequest {
    const message = createBaseGetSessionTemplateRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSessionTemplatesRequest(): ListSessionTemplatesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListSessionTemplatesRequest: MessageFns<ListSessionTemplatesRequest> = {
  encode(message: ListSessionTemplatesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSessionTemplatesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionTemplatesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSessionTemplatesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListSessionTemplatesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSessionTemplatesRequest>): ListSessionTemplatesRequest {
    return ListSessionTemplatesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSessionTemplatesRequest>): ListSessionTemplatesRequest {
    const message = createBaseListSessionTemplatesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListSessionTemplatesResponse(): ListSessionTemplatesResponse {
  return { sessionTemplates: [], nextPageToken: "" };
}

export const ListSessionTemplatesResponse: MessageFns<ListSessionTemplatesResponse> = {
  encode(message: ListSessionTemplatesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sessionTemplates) {
      SessionTemplate.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSessionTemplatesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionTemplatesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sessionTemplates.push(SessionTemplate.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSessionTemplatesResponse {
    return {
      sessionTemplates: globalThis.Array.isArray(object?.sessionTemplates)
        ? object.sessionTemplates.map((e: any) => SessionTemplate.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSessionTemplatesResponse): unknown {
    const obj: any = {};
    if (message.sessionTemplates?.length) {
      obj.sessionTemplates = message.sessionTemplates.map((e) => SessionTemplate.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSessionTemplatesResponse>): ListSessionTemplatesResponse {
    return ListSessionTemplatesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSessionTemplatesResponse>): ListSessionTemplatesResponse {
    const message = createBaseListSessionTemplatesResponse();
    message.sessionTemplates = object.sessionTemplates?.map((e) => SessionTemplate.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteSessionTemplateRequest(): DeleteSessionTemplateRequest {
  return { name: "" };
}

export const DeleteSessionTemplateRequest: MessageFns<DeleteSessionTemplateRequest> = {
  encode(message: DeleteSessionTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSessionTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSessionTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSessionTemplateRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteSessionTemplateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSessionTemplateRequest>): DeleteSessionTemplateRequest {
    return DeleteSessionTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSessionTemplateRequest>): DeleteSessionTemplateRequest {
    const message = createBaseDeleteSessionTemplateRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSessionTemplate(): SessionTemplate {
  return {
    name: "",
    description: "",
    createTime: undefined,
    jupyterSession: undefined,
    sparkConnectSession: undefined,
    creator: "",
    labels: {},
    runtimeConfig: undefined,
    environmentConfig: undefined,
    updateTime: undefined,
    uuid: "",
  };
}

export const SessionTemplate: MessageFns<SessionTemplate> = {
  encode(message: SessionTemplate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(74).string(message.description);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.jupyterSession !== undefined) {
      JupyterConfig.encode(message.jupyterSession, writer.uint32(26).fork()).join();
    }
    if (message.sparkConnectSession !== undefined) {
      SparkConnectConfig.encode(message.sparkConnectSession, writer.uint32(90).fork()).join();
    }
    if (message.creator !== "") {
      writer.uint32(42).string(message.creator);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      SessionTemplate_LabelsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.runtimeConfig !== undefined) {
      RuntimeConfig.encode(message.runtimeConfig, writer.uint32(58).fork()).join();
    }
    if (message.environmentConfig !== undefined) {
      EnvironmentConfig.encode(message.environmentConfig, writer.uint32(66).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(82).fork()).join();
    }
    if (message.uuid !== "") {
      writer.uint32(98).string(message.uuid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionTemplate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionTemplate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.description = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jupyterSession = JupyterConfig.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.sparkConnectSession = SparkConnectConfig.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = SessionTemplate_LabelsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.labels[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.runtimeConfig = RuntimeConfig.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.environmentConfig = EnvironmentConfig.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.uuid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionTemplate {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      jupyterSession: isSet(object.jupyterSession) ? JupyterConfig.fromJSON(object.jupyterSession) : undefined,
      sparkConnectSession: isSet(object.sparkConnectSession)
        ? SparkConnectConfig.fromJSON(object.sparkConnectSession)
        : undefined,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      runtimeConfig: isSet(object.runtimeConfig) ? RuntimeConfig.fromJSON(object.runtimeConfig) : undefined,
      environmentConfig: isSet(object.environmentConfig)
        ? EnvironmentConfig.fromJSON(object.environmentConfig)
        : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
    };
  },

  toJSON(message: SessionTemplate): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.jupyterSession !== undefined) {
      obj.jupyterSession = JupyterConfig.toJSON(message.jupyterSession);
    }
    if (message.sparkConnectSession !== undefined) {
      obj.sparkConnectSession = SparkConnectConfig.toJSON(message.sparkConnectSession);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.runtimeConfig !== undefined) {
      obj.runtimeConfig = RuntimeConfig.toJSON(message.runtimeConfig);
    }
    if (message.environmentConfig !== undefined) {
      obj.environmentConfig = EnvironmentConfig.toJSON(message.environmentConfig);
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    return obj;
  },

  create(base?: DeepPartial<SessionTemplate>): SessionTemplate {
    return SessionTemplate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SessionTemplate>): SessionTemplate {
    const message = createBaseSessionTemplate();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.createTime = object.createTime ?? undefined;
    message.jupyterSession = (object.jupyterSession !== undefined && object.jupyterSession !== null)
      ? JupyterConfig.fromPartial(object.jupyterSession)
      : undefined;
    message.sparkConnectSession = (object.sparkConnectSession !== undefined && object.sparkConnectSession !== null)
      ? SparkConnectConfig.fromPartial(object.sparkConnectSession)
      : undefined;
    message.creator = object.creator ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.runtimeConfig = (object.runtimeConfig !== undefined && object.runtimeConfig !== null)
      ? RuntimeConfig.fromPartial(object.runtimeConfig)
      : undefined;
    message.environmentConfig = (object.environmentConfig !== undefined && object.environmentConfig !== null)
      ? EnvironmentConfig.fromPartial(object.environmentConfig)
      : undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.uuid = object.uuid ?? "";
    return message;
  },
};

function createBaseSessionTemplate_LabelsEntry(): SessionTemplate_LabelsEntry {
  return { key: "", value: "" };
}

export const SessionTemplate_LabelsEntry: MessageFns<SessionTemplate_LabelsEntry> = {
  encode(message: SessionTemplate_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionTemplate_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionTemplate_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionTemplate_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SessionTemplate_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<SessionTemplate_LabelsEntry>): SessionTemplate_LabelsEntry {
    return SessionTemplate_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SessionTemplate_LabelsEntry>): SessionTemplate_LabelsEntry {
    const message = createBaseSessionTemplate_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

/** The SessionTemplateController provides methods to manage session templates. */
export type SessionTemplateControllerDefinition = typeof SessionTemplateControllerDefinition;
export const SessionTemplateControllerDefinition = {
  name: "SessionTemplateController",
  fullName: "google.cloud.dataproc.v1.SessionTemplateController",
  methods: {
    /** Create a session template synchronously. */
    createSessionTemplate: {
      name: "CreateSessionTemplate",
      requestType: CreateSessionTemplateRequest,
      requestStream: false,
      responseType: SessionTemplate,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              72,
              58,
              16,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              34,
              52,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the session template synchronously. */
    updateSessionTemplate: {
      name: "UpdateSessionTemplate",
      requestType: UpdateSessionTemplateRequest,
      requestStream: false,
      responseType: SessionTemplate,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 115, 101, 115, 115, 105, 111, 110, 95, 116, 101, 109, 112, 108, 97, 116, 101])],
          578365826: [
            Buffer.from([
              89,
              58,
              16,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              50,
              69,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets the resource representation for a session template. */
    getSessionTemplate: {
      name: "GetSessionTemplate",
      requestType: GetSessionTemplateRequest,
      requestStream: false,
      responseType: SessionTemplate,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              54,
              18,
              52,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists session templates. */
    listSessionTemplates: {
      name: "ListSessionTemplates",
      requestType: ListSessionTemplatesRequest,
      requestStream: false,
      responseType: ListSessionTemplatesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              54,
              18,
              52,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a session template. */
    deleteSessionTemplate: {
      name: "DeleteSessionTemplate",
      requestType: DeleteSessionTemplateRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              54,
              42,
              52,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SessionTemplateControllerServiceImplementation<CallContextExt = {}> {
  /** Create a session template synchronously. */
  createSessionTemplate(
    request: CreateSessionTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SessionTemplate>>;
  /** Updates the session template synchronously. */
  updateSessionTemplate(
    request: UpdateSessionTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SessionTemplate>>;
  /** Gets the resource representation for a session template. */
  getSessionTemplate(
    request: GetSessionTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SessionTemplate>>;
  /** Lists session templates. */
  listSessionTemplates(
    request: ListSessionTemplatesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSessionTemplatesResponse>>;
  /** Deletes a session template. */
  deleteSessionTemplate(
    request: DeleteSessionTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface SessionTemplateControllerClient<CallOptionsExt = {}> {
  /** Create a session template synchronously. */
  createSessionTemplate(
    request: DeepPartial<CreateSessionTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SessionTemplate>;
  /** Updates the session template synchronously. */
  updateSessionTemplate(
    request: DeepPartial<UpdateSessionTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SessionTemplate>;
  /** Gets the resource representation for a session template. */
  getSessionTemplate(
    request: DeepPartial<GetSessionTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SessionTemplate>;
  /** Lists session templates. */
  listSessionTemplates(
    request: DeepPartial<ListSessionTemplatesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSessionTemplatesResponse>;
  /** Deletes a session template. */
  deleteSessionTemplate(
    request: DeepPartial<DeleteSessionTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
