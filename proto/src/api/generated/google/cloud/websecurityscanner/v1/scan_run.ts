// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/websecurityscanner/v1/scan_run.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { ScanRunErrorTrace } from "./scan_run_error_trace.js";
import { ScanRunWarningTrace } from "./scan_run_warning_trace.js";

export const protobufPackage = "google.cloud.websecurityscanner.v1";

/**
 * A ScanRun is a output-only resource representing an actual run of the scan.
 * Next id: 12
 */
export interface ScanRun {
  /**
   * Output only. The resource name of the ScanRun. The name follows the format of
   * 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'.
   * The ScanRun IDs are generated by the system.
   */
  name: string;
  /** Output only. The execution state of the ScanRun. */
  executionState: ScanRun_ExecutionState;
  /**
   * Output only. The result state of the ScanRun. This field is only available after the
   * execution state reaches "FINISHED".
   */
  resultState: ScanRun_ResultState;
  /** Output only. The time at which the ScanRun started. */
  startTime:
    | Date
    | undefined;
  /**
   * Output only. The time at which the ScanRun reached termination state - that the ScanRun
   * is either finished or stopped by user.
   */
  endTime:
    | Date
    | undefined;
  /**
   * Output only. The number of URLs crawled during this ScanRun. If the scan is in progress,
   * the value represents the number of URLs crawled up to now.
   */
  urlsCrawledCount: Long;
  /**
   * Output only. The number of URLs tested during this ScanRun. If the scan is in progress,
   * the value represents the number of URLs tested up to now. The number of
   * URLs tested is usually larger than the number URLS crawled because
   * typically a crawled URL is tested with multiple test payloads.
   */
  urlsTestedCount: Long;
  /** Output only. Whether the scan run has found any vulnerabilities. */
  hasVulnerabilities: boolean;
  /**
   * Output only. The percentage of total completion ranging from 0 to 100.
   * If the scan is in queue, the value is 0.
   * If the scan is running, the value ranges from 0 to 100.
   * If the scan is finished, the value is 100.
   */
  progressPercent: number;
  /**
   * Output only. If result_state is an ERROR, this field provides the primary reason for
   * scan's termination and more details, if such are available.
   */
  errorTrace:
    | ScanRunErrorTrace
    | undefined;
  /** Output only. A list of warnings, if such are encountered during this scan run. */
  warningTraces: ScanRunWarningTrace[];
}

/** Types of ScanRun execution state. */
export enum ScanRun_ExecutionState {
  /**
   * EXECUTION_STATE_UNSPECIFIED - Represents an invalid state caused by internal server error. This value
   * should never be returned.
   */
  EXECUTION_STATE_UNSPECIFIED = 0,
  /** QUEUED - The scan is waiting in the queue. */
  QUEUED = 1,
  /** SCANNING - The scan is in progress. */
  SCANNING = 2,
  /** FINISHED - The scan is either finished or stopped by user. */
  FINISHED = 3,
  UNRECOGNIZED = -1,
}

export function scanRun_ExecutionStateFromJSON(object: any): ScanRun_ExecutionState {
  switch (object) {
    case 0:
    case "EXECUTION_STATE_UNSPECIFIED":
      return ScanRun_ExecutionState.EXECUTION_STATE_UNSPECIFIED;
    case 1:
    case "QUEUED":
      return ScanRun_ExecutionState.QUEUED;
    case 2:
    case "SCANNING":
      return ScanRun_ExecutionState.SCANNING;
    case 3:
    case "FINISHED":
      return ScanRun_ExecutionState.FINISHED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ScanRun_ExecutionState.UNRECOGNIZED;
  }
}

export function scanRun_ExecutionStateToJSON(object: ScanRun_ExecutionState): string {
  switch (object) {
    case ScanRun_ExecutionState.EXECUTION_STATE_UNSPECIFIED:
      return "EXECUTION_STATE_UNSPECIFIED";
    case ScanRun_ExecutionState.QUEUED:
      return "QUEUED";
    case ScanRun_ExecutionState.SCANNING:
      return "SCANNING";
    case ScanRun_ExecutionState.FINISHED:
      return "FINISHED";
    case ScanRun_ExecutionState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Types of ScanRun result state. */
export enum ScanRun_ResultState {
  /**
   * RESULT_STATE_UNSPECIFIED - Default value. This value is returned when the ScanRun is not yet
   * finished.
   */
  RESULT_STATE_UNSPECIFIED = 0,
  /** SUCCESS - The scan finished without errors. */
  SUCCESS = 1,
  /** ERROR - The scan finished with errors. */
  ERROR = 2,
  /** KILLED - The scan was terminated by user. */
  KILLED = 3,
  UNRECOGNIZED = -1,
}

export function scanRun_ResultStateFromJSON(object: any): ScanRun_ResultState {
  switch (object) {
    case 0:
    case "RESULT_STATE_UNSPECIFIED":
      return ScanRun_ResultState.RESULT_STATE_UNSPECIFIED;
    case 1:
    case "SUCCESS":
      return ScanRun_ResultState.SUCCESS;
    case 2:
    case "ERROR":
      return ScanRun_ResultState.ERROR;
    case 3:
    case "KILLED":
      return ScanRun_ResultState.KILLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ScanRun_ResultState.UNRECOGNIZED;
  }
}

export function scanRun_ResultStateToJSON(object: ScanRun_ResultState): string {
  switch (object) {
    case ScanRun_ResultState.RESULT_STATE_UNSPECIFIED:
      return "RESULT_STATE_UNSPECIFIED";
    case ScanRun_ResultState.SUCCESS:
      return "SUCCESS";
    case ScanRun_ResultState.ERROR:
      return "ERROR";
    case ScanRun_ResultState.KILLED:
      return "KILLED";
    case ScanRun_ResultState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseScanRun(): ScanRun {
  return {
    name: "",
    executionState: 0,
    resultState: 0,
    startTime: undefined,
    endTime: undefined,
    urlsCrawledCount: Long.ZERO,
    urlsTestedCount: Long.ZERO,
    hasVulnerabilities: false,
    progressPercent: 0,
    errorTrace: undefined,
    warningTraces: [],
  };
}

export const ScanRun: MessageFns<ScanRun> = {
  encode(message: ScanRun, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.executionState !== 0) {
      writer.uint32(16).int32(message.executionState);
    }
    if (message.resultState !== 0) {
      writer.uint32(24).int32(message.resultState);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(34).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(42).fork()).join();
    }
    if (!message.urlsCrawledCount.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.urlsCrawledCount.toString());
    }
    if (!message.urlsTestedCount.equals(Long.ZERO)) {
      writer.uint32(56).int64(message.urlsTestedCount.toString());
    }
    if (message.hasVulnerabilities !== false) {
      writer.uint32(64).bool(message.hasVulnerabilities);
    }
    if (message.progressPercent !== 0) {
      writer.uint32(72).int32(message.progressPercent);
    }
    if (message.errorTrace !== undefined) {
      ScanRunErrorTrace.encode(message.errorTrace, writer.uint32(82).fork()).join();
    }
    for (const v of message.warningTraces) {
      ScanRunWarningTrace.encode(v!, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScanRun {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScanRun();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.executionState = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.resultState = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.urlsCrawledCount = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.urlsTestedCount = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.hasVulnerabilities = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.progressPercent = reader.int32();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.errorTrace = ScanRunErrorTrace.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.warningTraces.push(ScanRunWarningTrace.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScanRun {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      executionState: isSet(object.executionState) ? scanRun_ExecutionStateFromJSON(object.executionState) : 0,
      resultState: isSet(object.resultState) ? scanRun_ResultStateFromJSON(object.resultState) : 0,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      urlsCrawledCount: isSet(object.urlsCrawledCount) ? Long.fromValue(object.urlsCrawledCount) : Long.ZERO,
      urlsTestedCount: isSet(object.urlsTestedCount) ? Long.fromValue(object.urlsTestedCount) : Long.ZERO,
      hasVulnerabilities: isSet(object.hasVulnerabilities) ? globalThis.Boolean(object.hasVulnerabilities) : false,
      progressPercent: isSet(object.progressPercent) ? globalThis.Number(object.progressPercent) : 0,
      errorTrace: isSet(object.errorTrace) ? ScanRunErrorTrace.fromJSON(object.errorTrace) : undefined,
      warningTraces: globalThis.Array.isArray(object?.warningTraces)
        ? object.warningTraces.map((e: any) => ScanRunWarningTrace.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ScanRun): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.executionState !== 0) {
      obj.executionState = scanRun_ExecutionStateToJSON(message.executionState);
    }
    if (message.resultState !== 0) {
      obj.resultState = scanRun_ResultStateToJSON(message.resultState);
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (!message.urlsCrawledCount.equals(Long.ZERO)) {
      obj.urlsCrawledCount = (message.urlsCrawledCount || Long.ZERO).toString();
    }
    if (!message.urlsTestedCount.equals(Long.ZERO)) {
      obj.urlsTestedCount = (message.urlsTestedCount || Long.ZERO).toString();
    }
    if (message.hasVulnerabilities !== false) {
      obj.hasVulnerabilities = message.hasVulnerabilities;
    }
    if (message.progressPercent !== 0) {
      obj.progressPercent = Math.round(message.progressPercent);
    }
    if (message.errorTrace !== undefined) {
      obj.errorTrace = ScanRunErrorTrace.toJSON(message.errorTrace);
    }
    if (message.warningTraces?.length) {
      obj.warningTraces = message.warningTraces.map((e) => ScanRunWarningTrace.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ScanRun>): ScanRun {
    return ScanRun.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ScanRun>): ScanRun {
    const message = createBaseScanRun();
    message.name = object.name ?? "";
    message.executionState = object.executionState ?? 0;
    message.resultState = object.resultState ?? 0;
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.urlsCrawledCount = (object.urlsCrawledCount !== undefined && object.urlsCrawledCount !== null)
      ? Long.fromValue(object.urlsCrawledCount)
      : Long.ZERO;
    message.urlsTestedCount = (object.urlsTestedCount !== undefined && object.urlsTestedCount !== null)
      ? Long.fromValue(object.urlsTestedCount)
      : Long.ZERO;
    message.hasVulnerabilities = object.hasVulnerabilities ?? false;
    message.progressPercent = object.progressPercent ?? 0;
    message.errorTrace = (object.errorTrace !== undefined && object.errorTrace !== null)
      ? ScanRunErrorTrace.fromPartial(object.errorTrace)
      : undefined;
    message.warningTraces = object.warningTraces?.map((e) => ScanRunWarningTrace.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
