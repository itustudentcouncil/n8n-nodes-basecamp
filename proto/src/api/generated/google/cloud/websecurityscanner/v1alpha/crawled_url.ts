// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/websecurityscanner/v1alpha/crawled_url.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.websecurityscanner.v1alpha";

/**
 * A CrawledUrl resource represents a URL that was crawled during a ScanRun. Web
 * Security Scanner Service crawls the web applications, following all links
 * within the scope of sites, to find the URLs to test against.
 */
export interface CrawledUrl {
  /**
   * Output only. The http method of the request that was used to visit the URL, in
   * uppercase.
   */
  httpMethod: string;
  /** Output only. The URL that was crawled. */
  url: string;
  /** Output only. The body of the request that was used to visit the URL. */
  body: string;
}

function createBaseCrawledUrl(): CrawledUrl {
  return { httpMethod: "", url: "", body: "" };
}

export const CrawledUrl: MessageFns<CrawledUrl> = {
  encode(message: CrawledUrl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.httpMethod !== "") {
      writer.uint32(10).string(message.httpMethod);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    if (message.body !== "") {
      writer.uint32(26).string(message.body);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CrawledUrl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCrawledUrl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.httpMethod = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.body = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CrawledUrl {
    return {
      httpMethod: isSet(object.httpMethod) ? globalThis.String(object.httpMethod) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      body: isSet(object.body) ? globalThis.String(object.body) : "",
    };
  },

  toJSON(message: CrawledUrl): unknown {
    const obj: any = {};
    if (message.httpMethod !== "") {
      obj.httpMethod = message.httpMethod;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    return obj;
  },

  create(base?: DeepPartial<CrawledUrl>): CrawledUrl {
    return CrawledUrl.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CrawledUrl>): CrawledUrl {
    const message = createBaseCrawledUrl();
    message.httpMethod = object.httpMethod ?? "";
    message.url = object.url ?? "";
    message.body = object.body ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
