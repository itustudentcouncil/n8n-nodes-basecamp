// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/websecurityscanner/v1alpha/finding.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { OutdatedLibrary, ViolatingResource, VulnerableHeaders, VulnerableParameters, Xss } from "./finding_addon.js";

export const protobufPackage = "google.cloud.websecurityscanner.v1alpha";

/**
 * A Finding resource represents a vulnerability instance identified during a
 * ScanRun.
 */
export interface Finding {
  /**
   * The resource name of the Finding. The name follows the format of
   * 'projects/{projectId}/scanConfigs/{scanConfigId}/scanruns/{scanRunId}/findings/{findingId}'.
   * The finding IDs are generated by the system.
   */
  name: string;
  /** The type of the Finding. */
  findingType: Finding_FindingType;
  /**
   * The http method of the request that triggered the vulnerability, in
   * uppercase.
   */
  httpMethod: string;
  /**
   * The URL produced by the server-side fuzzer and used in the request that
   * triggered the vulnerability.
   */
  fuzzedUrl: string;
  /** The body of the request that triggered the vulnerability. */
  body: string;
  /** The description of the vulnerability. */
  description: string;
  /**
   * The URL containing human-readable payload that user can leverage to
   * reproduce the vulnerability.
   */
  reproductionUrl: string;
  /**
   * If the vulnerability was originated from nested IFrame, the immediate
   * parent IFrame is reported.
   */
  frameUrl: string;
  /** The URL where the browser lands when the vulnerability is detected. */
  finalUrl: string;
  /**
   * The tracking ID uniquely identifies a vulnerability instance across
   * multiple ScanRuns.
   */
  trackingId: string;
  /** An addon containing information about outdated libraries. */
  outdatedLibrary:
    | OutdatedLibrary
    | undefined;
  /**
   * An addon containing detailed information regarding any resource causing the
   * vulnerability such as JavaScript sources, image, audio files, etc.
   */
  violatingResource:
    | ViolatingResource
    | undefined;
  /** An addon containing information about vulnerable or missing HTTP headers. */
  vulnerableHeaders:
    | VulnerableHeaders
    | undefined;
  /**
   * An addon containing information about request parameters which were found
   * to be vulnerable.
   */
  vulnerableParameters:
    | VulnerableParameters
    | undefined;
  /** An addon containing information reported for an XSS, if any. */
  xss: Xss | undefined;
}

/** Types of Findings. */
export enum Finding_FindingType {
  /** FINDING_TYPE_UNSPECIFIED - The invalid finding type. */
  FINDING_TYPE_UNSPECIFIED = 0,
  /**
   * MIXED_CONTENT - A page that was served over HTTPS also resources over HTTP. A
   * man-in-the-middle attacker could tamper with the HTTP resource and gain
   * full access to the website that loads the resource or to monitor the
   * actions taken by the user.
   */
  MIXED_CONTENT = 1,
  /**
   * OUTDATED_LIBRARY - The version of an included library is known to contain a security issue.
   * The scanner checks the version of library in use against a known list of
   * vulnerable libraries. False positives are possible if the version
   * detection fails or if the library has been manually patched.
   */
  OUTDATED_LIBRARY = 2,
  /**
   * ROSETTA_FLASH - This type of vulnerability occurs when the value of a request parameter
   * is reflected at the beginning of the response, for example, in requests
   * using JSONP. Under certain circumstances, an attacker may be able to
   * supply an alphanumeric-only Flash file in the vulnerable parameter
   * causing the browser to execute the Flash file as if it originated on the
   * vulnerable server.
   */
  ROSETTA_FLASH = 5,
  /**
   * XSS_CALLBACK - A cross-site scripting (XSS) bug is found via JavaScript callback. For
   * detailed explanations on XSS, see
   * https://www.google.com/about/appsecurity/learning/xss/.
   */
  XSS_CALLBACK = 3,
  /**
   * XSS_ERROR - A potential cross-site scripting (XSS) bug due to JavaScript breakage.
   * In some circumstances, the application under test might modify the test
   * string before it is parsed by the browser. When the browser attempts to
   * runs this modified test string, it will likely break and throw a
   * JavaScript execution error, thus an injection issue is occurring.
   * However, it may not be exploitable. Manual verification is needed to see
   * if the test string modifications can be evaded and confirm that the issue
   * is in fact an XSS vulnerability. For detailed explanations on XSS, see
   * https://www.google.com/about/appsecurity/learning/xss/.
   */
  XSS_ERROR = 4,
  /**
   * CLEAR_TEXT_PASSWORD - An application appears to be transmitting a password field in clear text.
   * An attacker can eavesdrop network traffic and sniff the password field.
   */
  CLEAR_TEXT_PASSWORD = 6,
  /**
   * INVALID_CONTENT_TYPE - An application returns sensitive content with an invalid content type,
   * or without an 'X-Content-Type-Options: nosniff' header.
   */
  INVALID_CONTENT_TYPE = 7,
  /**
   * XSS_ANGULAR_CALLBACK - A cross-site scripting (XSS) vulnerability in AngularJS module that
   * occurs when a user-provided string is interpolated by Angular.
   */
  XSS_ANGULAR_CALLBACK = 8,
  /** INVALID_HEADER - A malformed or invalid valued header. */
  INVALID_HEADER = 9,
  /** MISSPELLED_SECURITY_HEADER_NAME - Misspelled security header name. */
  MISSPELLED_SECURITY_HEADER_NAME = 10,
  /** MISMATCHING_SECURITY_HEADER_VALUES - Mismatching values in a duplicate security header. */
  MISMATCHING_SECURITY_HEADER_VALUES = 11,
  UNRECOGNIZED = -1,
}

export function finding_FindingTypeFromJSON(object: any): Finding_FindingType {
  switch (object) {
    case 0:
    case "FINDING_TYPE_UNSPECIFIED":
      return Finding_FindingType.FINDING_TYPE_UNSPECIFIED;
    case 1:
    case "MIXED_CONTENT":
      return Finding_FindingType.MIXED_CONTENT;
    case 2:
    case "OUTDATED_LIBRARY":
      return Finding_FindingType.OUTDATED_LIBRARY;
    case 5:
    case "ROSETTA_FLASH":
      return Finding_FindingType.ROSETTA_FLASH;
    case 3:
    case "XSS_CALLBACK":
      return Finding_FindingType.XSS_CALLBACK;
    case 4:
    case "XSS_ERROR":
      return Finding_FindingType.XSS_ERROR;
    case 6:
    case "CLEAR_TEXT_PASSWORD":
      return Finding_FindingType.CLEAR_TEXT_PASSWORD;
    case 7:
    case "INVALID_CONTENT_TYPE":
      return Finding_FindingType.INVALID_CONTENT_TYPE;
    case 8:
    case "XSS_ANGULAR_CALLBACK":
      return Finding_FindingType.XSS_ANGULAR_CALLBACK;
    case 9:
    case "INVALID_HEADER":
      return Finding_FindingType.INVALID_HEADER;
    case 10:
    case "MISSPELLED_SECURITY_HEADER_NAME":
      return Finding_FindingType.MISSPELLED_SECURITY_HEADER_NAME;
    case 11:
    case "MISMATCHING_SECURITY_HEADER_VALUES":
      return Finding_FindingType.MISMATCHING_SECURITY_HEADER_VALUES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Finding_FindingType.UNRECOGNIZED;
  }
}

export function finding_FindingTypeToJSON(object: Finding_FindingType): string {
  switch (object) {
    case Finding_FindingType.FINDING_TYPE_UNSPECIFIED:
      return "FINDING_TYPE_UNSPECIFIED";
    case Finding_FindingType.MIXED_CONTENT:
      return "MIXED_CONTENT";
    case Finding_FindingType.OUTDATED_LIBRARY:
      return "OUTDATED_LIBRARY";
    case Finding_FindingType.ROSETTA_FLASH:
      return "ROSETTA_FLASH";
    case Finding_FindingType.XSS_CALLBACK:
      return "XSS_CALLBACK";
    case Finding_FindingType.XSS_ERROR:
      return "XSS_ERROR";
    case Finding_FindingType.CLEAR_TEXT_PASSWORD:
      return "CLEAR_TEXT_PASSWORD";
    case Finding_FindingType.INVALID_CONTENT_TYPE:
      return "INVALID_CONTENT_TYPE";
    case Finding_FindingType.XSS_ANGULAR_CALLBACK:
      return "XSS_ANGULAR_CALLBACK";
    case Finding_FindingType.INVALID_HEADER:
      return "INVALID_HEADER";
    case Finding_FindingType.MISSPELLED_SECURITY_HEADER_NAME:
      return "MISSPELLED_SECURITY_HEADER_NAME";
    case Finding_FindingType.MISMATCHING_SECURITY_HEADER_VALUES:
      return "MISMATCHING_SECURITY_HEADER_VALUES";
    case Finding_FindingType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseFinding(): Finding {
  return {
    name: "",
    findingType: 0,
    httpMethod: "",
    fuzzedUrl: "",
    body: "",
    description: "",
    reproductionUrl: "",
    frameUrl: "",
    finalUrl: "",
    trackingId: "",
    outdatedLibrary: undefined,
    violatingResource: undefined,
    vulnerableHeaders: undefined,
    vulnerableParameters: undefined,
    xss: undefined,
  };
}

export const Finding: MessageFns<Finding> = {
  encode(message: Finding, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.findingType !== 0) {
      writer.uint32(16).int32(message.findingType);
    }
    if (message.httpMethod !== "") {
      writer.uint32(26).string(message.httpMethod);
    }
    if (message.fuzzedUrl !== "") {
      writer.uint32(34).string(message.fuzzedUrl);
    }
    if (message.body !== "") {
      writer.uint32(42).string(message.body);
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    if (message.reproductionUrl !== "") {
      writer.uint32(58).string(message.reproductionUrl);
    }
    if (message.frameUrl !== "") {
      writer.uint32(66).string(message.frameUrl);
    }
    if (message.finalUrl !== "") {
      writer.uint32(74).string(message.finalUrl);
    }
    if (message.trackingId !== "") {
      writer.uint32(82).string(message.trackingId);
    }
    if (message.outdatedLibrary !== undefined) {
      OutdatedLibrary.encode(message.outdatedLibrary, writer.uint32(90).fork()).join();
    }
    if (message.violatingResource !== undefined) {
      ViolatingResource.encode(message.violatingResource, writer.uint32(98).fork()).join();
    }
    if (message.vulnerableHeaders !== undefined) {
      VulnerableHeaders.encode(message.vulnerableHeaders, writer.uint32(122).fork()).join();
    }
    if (message.vulnerableParameters !== undefined) {
      VulnerableParameters.encode(message.vulnerableParameters, writer.uint32(106).fork()).join();
    }
    if (message.xss !== undefined) {
      Xss.encode(message.xss, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Finding {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.findingType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.httpMethod = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.fuzzedUrl = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.body = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.reproductionUrl = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.frameUrl = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.finalUrl = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.trackingId = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.outdatedLibrary = OutdatedLibrary.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.violatingResource = ViolatingResource.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.vulnerableHeaders = VulnerableHeaders.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.vulnerableParameters = VulnerableParameters.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.xss = Xss.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Finding {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      findingType: isSet(object.findingType) ? finding_FindingTypeFromJSON(object.findingType) : 0,
      httpMethod: isSet(object.httpMethod) ? globalThis.String(object.httpMethod) : "",
      fuzzedUrl: isSet(object.fuzzedUrl) ? globalThis.String(object.fuzzedUrl) : "",
      body: isSet(object.body) ? globalThis.String(object.body) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      reproductionUrl: isSet(object.reproductionUrl) ? globalThis.String(object.reproductionUrl) : "",
      frameUrl: isSet(object.frameUrl) ? globalThis.String(object.frameUrl) : "",
      finalUrl: isSet(object.finalUrl) ? globalThis.String(object.finalUrl) : "",
      trackingId: isSet(object.trackingId) ? globalThis.String(object.trackingId) : "",
      outdatedLibrary: isSet(object.outdatedLibrary) ? OutdatedLibrary.fromJSON(object.outdatedLibrary) : undefined,
      violatingResource: isSet(object.violatingResource)
        ? ViolatingResource.fromJSON(object.violatingResource)
        : undefined,
      vulnerableHeaders: isSet(object.vulnerableHeaders)
        ? VulnerableHeaders.fromJSON(object.vulnerableHeaders)
        : undefined,
      vulnerableParameters: isSet(object.vulnerableParameters)
        ? VulnerableParameters.fromJSON(object.vulnerableParameters)
        : undefined,
      xss: isSet(object.xss) ? Xss.fromJSON(object.xss) : undefined,
    };
  },

  toJSON(message: Finding): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.findingType !== 0) {
      obj.findingType = finding_FindingTypeToJSON(message.findingType);
    }
    if (message.httpMethod !== "") {
      obj.httpMethod = message.httpMethod;
    }
    if (message.fuzzedUrl !== "") {
      obj.fuzzedUrl = message.fuzzedUrl;
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.reproductionUrl !== "") {
      obj.reproductionUrl = message.reproductionUrl;
    }
    if (message.frameUrl !== "") {
      obj.frameUrl = message.frameUrl;
    }
    if (message.finalUrl !== "") {
      obj.finalUrl = message.finalUrl;
    }
    if (message.trackingId !== "") {
      obj.trackingId = message.trackingId;
    }
    if (message.outdatedLibrary !== undefined) {
      obj.outdatedLibrary = OutdatedLibrary.toJSON(message.outdatedLibrary);
    }
    if (message.violatingResource !== undefined) {
      obj.violatingResource = ViolatingResource.toJSON(message.violatingResource);
    }
    if (message.vulnerableHeaders !== undefined) {
      obj.vulnerableHeaders = VulnerableHeaders.toJSON(message.vulnerableHeaders);
    }
    if (message.vulnerableParameters !== undefined) {
      obj.vulnerableParameters = VulnerableParameters.toJSON(message.vulnerableParameters);
    }
    if (message.xss !== undefined) {
      obj.xss = Xss.toJSON(message.xss);
    }
    return obj;
  },

  create(base?: DeepPartial<Finding>): Finding {
    return Finding.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Finding>): Finding {
    const message = createBaseFinding();
    message.name = object.name ?? "";
    message.findingType = object.findingType ?? 0;
    message.httpMethod = object.httpMethod ?? "";
    message.fuzzedUrl = object.fuzzedUrl ?? "";
    message.body = object.body ?? "";
    message.description = object.description ?? "";
    message.reproductionUrl = object.reproductionUrl ?? "";
    message.frameUrl = object.frameUrl ?? "";
    message.finalUrl = object.finalUrl ?? "";
    message.trackingId = object.trackingId ?? "";
    message.outdatedLibrary = (object.outdatedLibrary !== undefined && object.outdatedLibrary !== null)
      ? OutdatedLibrary.fromPartial(object.outdatedLibrary)
      : undefined;
    message.violatingResource = (object.violatingResource !== undefined && object.violatingResource !== null)
      ? ViolatingResource.fromPartial(object.violatingResource)
      : undefined;
    message.vulnerableHeaders = (object.vulnerableHeaders !== undefined && object.vulnerableHeaders !== null)
      ? VulnerableHeaders.fromPartial(object.vulnerableHeaders)
      : undefined;
    message.vulnerableParameters = (object.vulnerableParameters !== undefined && object.vulnerableParameters !== null)
      ? VulnerableParameters.fromPartial(object.vulnerableParameters)
      : undefined;
    message.xss = (object.xss !== undefined && object.xss !== null) ? Xss.fromPartial(object.xss) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
