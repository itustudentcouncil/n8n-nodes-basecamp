// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/osconfig/agentendpoint/v1/inventory.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { DateMessage } from "../../../../type/date.js";

export const protobufPackage = "google.cloud.osconfig.agentendpoint.v1";

/** The inventory details of a VM. */
export interface Inventory {
  /** Base level operating system information for the VM. */
  osInfo:
    | Inventory_OsInfo
    | undefined;
  /** A list of installed packages currently on the VM. */
  installedPackages: Inventory_SoftwarePackage[];
  /**
   * A list of software updates available for the VM as reported by the update
   * managers.
   */
  availablePackages: Inventory_SoftwarePackage[];
}

/** Operating system information for the VM. */
export interface Inventory_OsInfo {
  /** The VM hostname. */
  hostname: string;
  /**
   * The operating system long name.
   * For example 'Debian GNU/Linux 9' or 'Microsoft Window Server 2019
   * Datacenter'.
   */
  longName: string;
  /**
   * The operating system short name.
   * For example, 'windows' or 'debian'.
   */
  shortName: string;
  /** The version of the operating system. */
  version: string;
  /** The system architecture of the operating system. */
  architecture: string;
  /** The kernel version of the operating system. */
  kernelVersion: string;
  /** The kernel release of the operating system. */
  kernelRelease: string;
  /** The current version of the OS Config agent running on the VM. */
  osconfigAgentVersion: string;
}

/** Software package information of the operating system. */
export interface Inventory_SoftwarePackage {
  /**
   * Yum package info.
   * For details about the yum package manager, see
   * https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/ch-yum.
   */
  yumPackage?:
    | Inventory_VersionedPackage
    | undefined;
  /**
   * Details of an APT package.
   * For details about the apt package manager, see
   * https://wiki.debian.org/Apt.
   */
  aptPackage?:
    | Inventory_VersionedPackage
    | undefined;
  /**
   * Details of a Zypper package.
   * For details about the Zypper package manager, see
   * https://en.opensuse.org/SDB:Zypper_manual.
   */
  zypperPackage?:
    | Inventory_VersionedPackage
    | undefined;
  /**
   * Details of a Googet package.
   *  For details about the googet package manager, see
   *  https://github.com/google/googet.
   */
  googetPackage?:
    | Inventory_VersionedPackage
    | undefined;
  /**
   * Details of a Zypper patch.
   * For details about the Zypper package manager, see
   * https://en.opensuse.org/SDB:Zypper_manual.
   */
  zypperPatch?:
    | Inventory_ZypperPatch
    | undefined;
  /**
   * Details of a Windows Update package.
   * See https://docs.microsoft.com/en-us/windows/win32/api/_wua/ for
   * information about Windows Update.
   */
  wuaPackage?:
    | Inventory_WindowsUpdatePackage
    | undefined;
  /**
   * Details of a Windows Quick Fix engineering package.
   * See
   * https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-quickfixengineering
   * for info in Windows Quick Fix Engineering.
   */
  qfePackage?:
    | Inventory_WindowsQuickFixEngineeringPackage
    | undefined;
  /** Details of a COS package. */
  cosPackage?:
    | Inventory_VersionedPackage
    | undefined;
  /** Details of Windows Application. */
  windowsApplication?: Inventory_WindowsApplication | undefined;
}

/**
 * Information related to the a standard versioned package.  This includes
 * package info for APT, Yum, Zypper, and Googet package managers.
 */
export interface Inventory_VersionedPackage {
  /** The name of the package. */
  packageName: string;
  /** The system architecture this package is intended for. */
  architecture: string;
  /** The version of the package. */
  version: string;
  /** Optional. The source of the package. */
  source: Inventory_VersionedPackage_Source | undefined;
}

/**
 * Information related to the actuall source of the versioned package. This
 * includes source package name and version if available.
 */
export interface Inventory_VersionedPackage_Source {
  /** Required. The name of the source package. */
  name: string;
  /** Optional. The version of the source package. */
  version: string;
}

/** Details related to a Zypper Patch. */
export interface Inventory_ZypperPatch {
  /** The name of the patch. */
  patchName: string;
  /** The category of the patch. */
  category: string;
  /** The severity specified for this patch */
  severity: string;
  /** Any summary information provided about this patch. */
  summary: string;
}

/**
 * Details related to a Windows Update package.
 * Field data and names are taken from Windows Update API IUpdate Interface:
 * https://docs.microsoft.com/en-us/windows/win32/api/_wua/
 * Descriptive fields like title, and description are localized based on
 * the locale of the VM being updated.
 */
export interface Inventory_WindowsUpdatePackage {
  /** The localized title of the update package. */
  title: string;
  /** The localized description of the update package. */
  description: string;
  /** The categories that are associated with this update package. */
  categories: Inventory_WindowsUpdatePackage_WindowsUpdateCategory[];
  /**
   * A collection of Microsoft Knowledge Base article IDs that are associated
   * with the update package.
   */
  kbArticleIds: string[];
  /** A hyperlink to the language-specific support information for the update. */
  supportUrl: string;
  /**
   * A collection of URLs that provide more information about the update
   * package.
   */
  moreInfoUrls: string[];
  /**
   * Gets the identifier of an update package.  Stays the same across
   * revisions.
   */
  updateId: string;
  /** The revision number of this update package. */
  revisionNumber: number;
  /** The last published date of the update, in (UTC) date and time. */
  lastDeploymentChangeTime: Date | undefined;
}

/** Categories specified by the Windows Update. */
export interface Inventory_WindowsUpdatePackage_WindowsUpdateCategory {
  /** The identifier of the windows update category. */
  id: string;
  /** The name of the windows update category. */
  name: string;
}

/**
 * Information related to a Quick Fix Engineering package.
 * Fields are taken from Windows QuickFixEngineering Interface and match
 * the source names:
 * https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-quickfixengineering
 */
export interface Inventory_WindowsQuickFixEngineeringPackage {
  /** A short textual description of the QFE update. */
  caption: string;
  /** A textual description of the QFE update. */
  description: string;
  /** Unique identifier associated with a particular QFE update. */
  hotFixId: string;
  /** Date that the QFE update was installed.  Mapped from installed_on field. */
  installTime: Date | undefined;
}

/**
 * Details about Windows Application - based on Windows Registry.
 * All fields in this message are taken from:
 * https://docs.microsoft.com/en-us/windows/win32/msi/uninstall-registry-key
 */
export interface Inventory_WindowsApplication {
  /** DisplayName field from Windows Registry. */
  displayName: string;
  /** DisplayVersion field from Windows Registry. */
  displayVersion: string;
  /** Publisher field from Windows Registry. */
  publisher: string;
  /** Installation date field from Windows Registry. */
  installDate:
    | DateMessage
    | undefined;
  /** HelpLink field from Windows Registry. */
  helpLink: string;
}

function createBaseInventory(): Inventory {
  return { osInfo: undefined, installedPackages: [], availablePackages: [] };
}

export const Inventory: MessageFns<Inventory> = {
  encode(message: Inventory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.osInfo !== undefined) {
      Inventory_OsInfo.encode(message.osInfo, writer.uint32(10).fork()).join();
    }
    for (const v of message.installedPackages) {
      Inventory_SoftwarePackage.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.availablePackages) {
      Inventory_SoftwarePackage.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Inventory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.osInfo = Inventory_OsInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.installedPackages.push(Inventory_SoftwarePackage.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.availablePackages.push(Inventory_SoftwarePackage.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inventory {
    return {
      osInfo: isSet(object.osInfo) ? Inventory_OsInfo.fromJSON(object.osInfo) : undefined,
      installedPackages: globalThis.Array.isArray(object?.installedPackages)
        ? object.installedPackages.map((e: any) => Inventory_SoftwarePackage.fromJSON(e))
        : [],
      availablePackages: globalThis.Array.isArray(object?.availablePackages)
        ? object.availablePackages.map((e: any) => Inventory_SoftwarePackage.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Inventory): unknown {
    const obj: any = {};
    if (message.osInfo !== undefined) {
      obj.osInfo = Inventory_OsInfo.toJSON(message.osInfo);
    }
    if (message.installedPackages?.length) {
      obj.installedPackages = message.installedPackages.map((e) => Inventory_SoftwarePackage.toJSON(e));
    }
    if (message.availablePackages?.length) {
      obj.availablePackages = message.availablePackages.map((e) => Inventory_SoftwarePackage.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Inventory>): Inventory {
    return Inventory.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Inventory>): Inventory {
    const message = createBaseInventory();
    message.osInfo = (object.osInfo !== undefined && object.osInfo !== null)
      ? Inventory_OsInfo.fromPartial(object.osInfo)
      : undefined;
    message.installedPackages = object.installedPackages?.map((e) => Inventory_SoftwarePackage.fromPartial(e)) || [];
    message.availablePackages = object.availablePackages?.map((e) => Inventory_SoftwarePackage.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInventory_OsInfo(): Inventory_OsInfo {
  return {
    hostname: "",
    longName: "",
    shortName: "",
    version: "",
    architecture: "",
    kernelVersion: "",
    kernelRelease: "",
    osconfigAgentVersion: "",
  };
}

export const Inventory_OsInfo: MessageFns<Inventory_OsInfo> = {
  encode(message: Inventory_OsInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hostname !== "") {
      writer.uint32(10).string(message.hostname);
    }
    if (message.longName !== "") {
      writer.uint32(18).string(message.longName);
    }
    if (message.shortName !== "") {
      writer.uint32(26).string(message.shortName);
    }
    if (message.version !== "") {
      writer.uint32(34).string(message.version);
    }
    if (message.architecture !== "") {
      writer.uint32(42).string(message.architecture);
    }
    if (message.kernelVersion !== "") {
      writer.uint32(50).string(message.kernelVersion);
    }
    if (message.kernelRelease !== "") {
      writer.uint32(58).string(message.kernelRelease);
    }
    if (message.osconfigAgentVersion !== "") {
      writer.uint32(66).string(message.osconfigAgentVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Inventory_OsInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventory_OsInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hostname = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.longName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.shortName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.version = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.architecture = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.kernelVersion = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.kernelRelease = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.osconfigAgentVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inventory_OsInfo {
    return {
      hostname: isSet(object.hostname) ? globalThis.String(object.hostname) : "",
      longName: isSet(object.longName) ? globalThis.String(object.longName) : "",
      shortName: isSet(object.shortName) ? globalThis.String(object.shortName) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      architecture: isSet(object.architecture) ? globalThis.String(object.architecture) : "",
      kernelVersion: isSet(object.kernelVersion) ? globalThis.String(object.kernelVersion) : "",
      kernelRelease: isSet(object.kernelRelease) ? globalThis.String(object.kernelRelease) : "",
      osconfigAgentVersion: isSet(object.osconfigAgentVersion) ? globalThis.String(object.osconfigAgentVersion) : "",
    };
  },

  toJSON(message: Inventory_OsInfo): unknown {
    const obj: any = {};
    if (message.hostname !== "") {
      obj.hostname = message.hostname;
    }
    if (message.longName !== "") {
      obj.longName = message.longName;
    }
    if (message.shortName !== "") {
      obj.shortName = message.shortName;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.architecture !== "") {
      obj.architecture = message.architecture;
    }
    if (message.kernelVersion !== "") {
      obj.kernelVersion = message.kernelVersion;
    }
    if (message.kernelRelease !== "") {
      obj.kernelRelease = message.kernelRelease;
    }
    if (message.osconfigAgentVersion !== "") {
      obj.osconfigAgentVersion = message.osconfigAgentVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<Inventory_OsInfo>): Inventory_OsInfo {
    return Inventory_OsInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Inventory_OsInfo>): Inventory_OsInfo {
    const message = createBaseInventory_OsInfo();
    message.hostname = object.hostname ?? "";
    message.longName = object.longName ?? "";
    message.shortName = object.shortName ?? "";
    message.version = object.version ?? "";
    message.architecture = object.architecture ?? "";
    message.kernelVersion = object.kernelVersion ?? "";
    message.kernelRelease = object.kernelRelease ?? "";
    message.osconfigAgentVersion = object.osconfigAgentVersion ?? "";
    return message;
  },
};

function createBaseInventory_SoftwarePackage(): Inventory_SoftwarePackage {
  return {
    yumPackage: undefined,
    aptPackage: undefined,
    zypperPackage: undefined,
    googetPackage: undefined,
    zypperPatch: undefined,
    wuaPackage: undefined,
    qfePackage: undefined,
    cosPackage: undefined,
    windowsApplication: undefined,
  };
}

export const Inventory_SoftwarePackage: MessageFns<Inventory_SoftwarePackage> = {
  encode(message: Inventory_SoftwarePackage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.yumPackage !== undefined) {
      Inventory_VersionedPackage.encode(message.yumPackage, writer.uint32(10).fork()).join();
    }
    if (message.aptPackage !== undefined) {
      Inventory_VersionedPackage.encode(message.aptPackage, writer.uint32(18).fork()).join();
    }
    if (message.zypperPackage !== undefined) {
      Inventory_VersionedPackage.encode(message.zypperPackage, writer.uint32(26).fork()).join();
    }
    if (message.googetPackage !== undefined) {
      Inventory_VersionedPackage.encode(message.googetPackage, writer.uint32(34).fork()).join();
    }
    if (message.zypperPatch !== undefined) {
      Inventory_ZypperPatch.encode(message.zypperPatch, writer.uint32(42).fork()).join();
    }
    if (message.wuaPackage !== undefined) {
      Inventory_WindowsUpdatePackage.encode(message.wuaPackage, writer.uint32(50).fork()).join();
    }
    if (message.qfePackage !== undefined) {
      Inventory_WindowsQuickFixEngineeringPackage.encode(message.qfePackage, writer.uint32(58).fork()).join();
    }
    if (message.cosPackage !== undefined) {
      Inventory_VersionedPackage.encode(message.cosPackage, writer.uint32(66).fork()).join();
    }
    if (message.windowsApplication !== undefined) {
      Inventory_WindowsApplication.encode(message.windowsApplication, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Inventory_SoftwarePackage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventory_SoftwarePackage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.yumPackage = Inventory_VersionedPackage.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.aptPackage = Inventory_VersionedPackage.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.zypperPackage = Inventory_VersionedPackage.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.googetPackage = Inventory_VersionedPackage.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.zypperPatch = Inventory_ZypperPatch.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.wuaPackage = Inventory_WindowsUpdatePackage.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.qfePackage = Inventory_WindowsQuickFixEngineeringPackage.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.cosPackage = Inventory_VersionedPackage.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.windowsApplication = Inventory_WindowsApplication.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inventory_SoftwarePackage {
    return {
      yumPackage: isSet(object.yumPackage) ? Inventory_VersionedPackage.fromJSON(object.yumPackage) : undefined,
      aptPackage: isSet(object.aptPackage) ? Inventory_VersionedPackage.fromJSON(object.aptPackage) : undefined,
      zypperPackage: isSet(object.zypperPackage)
        ? Inventory_VersionedPackage.fromJSON(object.zypperPackage)
        : undefined,
      googetPackage: isSet(object.googetPackage)
        ? Inventory_VersionedPackage.fromJSON(object.googetPackage)
        : undefined,
      zypperPatch: isSet(object.zypperPatch) ? Inventory_ZypperPatch.fromJSON(object.zypperPatch) : undefined,
      wuaPackage: isSet(object.wuaPackage) ? Inventory_WindowsUpdatePackage.fromJSON(object.wuaPackage) : undefined,
      qfePackage: isSet(object.qfePackage)
        ? Inventory_WindowsQuickFixEngineeringPackage.fromJSON(object.qfePackage)
        : undefined,
      cosPackage: isSet(object.cosPackage) ? Inventory_VersionedPackage.fromJSON(object.cosPackage) : undefined,
      windowsApplication: isSet(object.windowsApplication)
        ? Inventory_WindowsApplication.fromJSON(object.windowsApplication)
        : undefined,
    };
  },

  toJSON(message: Inventory_SoftwarePackage): unknown {
    const obj: any = {};
    if (message.yumPackage !== undefined) {
      obj.yumPackage = Inventory_VersionedPackage.toJSON(message.yumPackage);
    }
    if (message.aptPackage !== undefined) {
      obj.aptPackage = Inventory_VersionedPackage.toJSON(message.aptPackage);
    }
    if (message.zypperPackage !== undefined) {
      obj.zypperPackage = Inventory_VersionedPackage.toJSON(message.zypperPackage);
    }
    if (message.googetPackage !== undefined) {
      obj.googetPackage = Inventory_VersionedPackage.toJSON(message.googetPackage);
    }
    if (message.zypperPatch !== undefined) {
      obj.zypperPatch = Inventory_ZypperPatch.toJSON(message.zypperPatch);
    }
    if (message.wuaPackage !== undefined) {
      obj.wuaPackage = Inventory_WindowsUpdatePackage.toJSON(message.wuaPackage);
    }
    if (message.qfePackage !== undefined) {
      obj.qfePackage = Inventory_WindowsQuickFixEngineeringPackage.toJSON(message.qfePackage);
    }
    if (message.cosPackage !== undefined) {
      obj.cosPackage = Inventory_VersionedPackage.toJSON(message.cosPackage);
    }
    if (message.windowsApplication !== undefined) {
      obj.windowsApplication = Inventory_WindowsApplication.toJSON(message.windowsApplication);
    }
    return obj;
  },

  create(base?: DeepPartial<Inventory_SoftwarePackage>): Inventory_SoftwarePackage {
    return Inventory_SoftwarePackage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Inventory_SoftwarePackage>): Inventory_SoftwarePackage {
    const message = createBaseInventory_SoftwarePackage();
    message.yumPackage = (object.yumPackage !== undefined && object.yumPackage !== null)
      ? Inventory_VersionedPackage.fromPartial(object.yumPackage)
      : undefined;
    message.aptPackage = (object.aptPackage !== undefined && object.aptPackage !== null)
      ? Inventory_VersionedPackage.fromPartial(object.aptPackage)
      : undefined;
    message.zypperPackage = (object.zypperPackage !== undefined && object.zypperPackage !== null)
      ? Inventory_VersionedPackage.fromPartial(object.zypperPackage)
      : undefined;
    message.googetPackage = (object.googetPackage !== undefined && object.googetPackage !== null)
      ? Inventory_VersionedPackage.fromPartial(object.googetPackage)
      : undefined;
    message.zypperPatch = (object.zypperPatch !== undefined && object.zypperPatch !== null)
      ? Inventory_ZypperPatch.fromPartial(object.zypperPatch)
      : undefined;
    message.wuaPackage = (object.wuaPackage !== undefined && object.wuaPackage !== null)
      ? Inventory_WindowsUpdatePackage.fromPartial(object.wuaPackage)
      : undefined;
    message.qfePackage = (object.qfePackage !== undefined && object.qfePackage !== null)
      ? Inventory_WindowsQuickFixEngineeringPackage.fromPartial(object.qfePackage)
      : undefined;
    message.cosPackage = (object.cosPackage !== undefined && object.cosPackage !== null)
      ? Inventory_VersionedPackage.fromPartial(object.cosPackage)
      : undefined;
    message.windowsApplication = (object.windowsApplication !== undefined && object.windowsApplication !== null)
      ? Inventory_WindowsApplication.fromPartial(object.windowsApplication)
      : undefined;
    return message;
  },
};

function createBaseInventory_VersionedPackage(): Inventory_VersionedPackage {
  return { packageName: "", architecture: "", version: "", source: undefined };
}

export const Inventory_VersionedPackage: MessageFns<Inventory_VersionedPackage> = {
  encode(message: Inventory_VersionedPackage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.packageName !== "") {
      writer.uint32(10).string(message.packageName);
    }
    if (message.architecture !== "") {
      writer.uint32(18).string(message.architecture);
    }
    if (message.version !== "") {
      writer.uint32(26).string(message.version);
    }
    if (message.source !== undefined) {
      Inventory_VersionedPackage_Source.encode(message.source, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Inventory_VersionedPackage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventory_VersionedPackage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.packageName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.architecture = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.version = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.source = Inventory_VersionedPackage_Source.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inventory_VersionedPackage {
    return {
      packageName: isSet(object.packageName) ? globalThis.String(object.packageName) : "",
      architecture: isSet(object.architecture) ? globalThis.String(object.architecture) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      source: isSet(object.source) ? Inventory_VersionedPackage_Source.fromJSON(object.source) : undefined,
    };
  },

  toJSON(message: Inventory_VersionedPackage): unknown {
    const obj: any = {};
    if (message.packageName !== "") {
      obj.packageName = message.packageName;
    }
    if (message.architecture !== "") {
      obj.architecture = message.architecture;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.source !== undefined) {
      obj.source = Inventory_VersionedPackage_Source.toJSON(message.source);
    }
    return obj;
  },

  create(base?: DeepPartial<Inventory_VersionedPackage>): Inventory_VersionedPackage {
    return Inventory_VersionedPackage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Inventory_VersionedPackage>): Inventory_VersionedPackage {
    const message = createBaseInventory_VersionedPackage();
    message.packageName = object.packageName ?? "";
    message.architecture = object.architecture ?? "";
    message.version = object.version ?? "";
    message.source = (object.source !== undefined && object.source !== null)
      ? Inventory_VersionedPackage_Source.fromPartial(object.source)
      : undefined;
    return message;
  },
};

function createBaseInventory_VersionedPackage_Source(): Inventory_VersionedPackage_Source {
  return { name: "", version: "" };
}

export const Inventory_VersionedPackage_Source: MessageFns<Inventory_VersionedPackage_Source> = {
  encode(message: Inventory_VersionedPackage_Source, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Inventory_VersionedPackage_Source {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventory_VersionedPackage_Source();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inventory_VersionedPackage_Source {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
    };
  },

  toJSON(message: Inventory_VersionedPackage_Source): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create(base?: DeepPartial<Inventory_VersionedPackage_Source>): Inventory_VersionedPackage_Source {
    return Inventory_VersionedPackage_Source.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Inventory_VersionedPackage_Source>): Inventory_VersionedPackage_Source {
    const message = createBaseInventory_VersionedPackage_Source();
    message.name = object.name ?? "";
    message.version = object.version ?? "";
    return message;
  },
};

function createBaseInventory_ZypperPatch(): Inventory_ZypperPatch {
  return { patchName: "", category: "", severity: "", summary: "" };
}

export const Inventory_ZypperPatch: MessageFns<Inventory_ZypperPatch> = {
  encode(message: Inventory_ZypperPatch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.patchName !== "") {
      writer.uint32(10).string(message.patchName);
    }
    if (message.category !== "") {
      writer.uint32(18).string(message.category);
    }
    if (message.severity !== "") {
      writer.uint32(26).string(message.severity);
    }
    if (message.summary !== "") {
      writer.uint32(34).string(message.summary);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Inventory_ZypperPatch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventory_ZypperPatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.patchName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.category = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.severity = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.summary = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inventory_ZypperPatch {
    return {
      patchName: isSet(object.patchName) ? globalThis.String(object.patchName) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      severity: isSet(object.severity) ? globalThis.String(object.severity) : "",
      summary: isSet(object.summary) ? globalThis.String(object.summary) : "",
    };
  },

  toJSON(message: Inventory_ZypperPatch): unknown {
    const obj: any = {};
    if (message.patchName !== "") {
      obj.patchName = message.patchName;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.severity !== "") {
      obj.severity = message.severity;
    }
    if (message.summary !== "") {
      obj.summary = message.summary;
    }
    return obj;
  },

  create(base?: DeepPartial<Inventory_ZypperPatch>): Inventory_ZypperPatch {
    return Inventory_ZypperPatch.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Inventory_ZypperPatch>): Inventory_ZypperPatch {
    const message = createBaseInventory_ZypperPatch();
    message.patchName = object.patchName ?? "";
    message.category = object.category ?? "";
    message.severity = object.severity ?? "";
    message.summary = object.summary ?? "";
    return message;
  },
};

function createBaseInventory_WindowsUpdatePackage(): Inventory_WindowsUpdatePackage {
  return {
    title: "",
    description: "",
    categories: [],
    kbArticleIds: [],
    supportUrl: "",
    moreInfoUrls: [],
    updateId: "",
    revisionNumber: 0,
    lastDeploymentChangeTime: undefined,
  };
}

export const Inventory_WindowsUpdatePackage: MessageFns<Inventory_WindowsUpdatePackage> = {
  encode(message: Inventory_WindowsUpdatePackage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.categories) {
      Inventory_WindowsUpdatePackage_WindowsUpdateCategory.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.kbArticleIds) {
      writer.uint32(34).string(v!);
    }
    if (message.supportUrl !== "") {
      writer.uint32(42).string(message.supportUrl);
    }
    for (const v of message.moreInfoUrls) {
      writer.uint32(50).string(v!);
    }
    if (message.updateId !== "") {
      writer.uint32(58).string(message.updateId);
    }
    if (message.revisionNumber !== 0) {
      writer.uint32(64).int32(message.revisionNumber);
    }
    if (message.lastDeploymentChangeTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastDeploymentChangeTime), writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Inventory_WindowsUpdatePackage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventory_WindowsUpdatePackage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.categories.push(Inventory_WindowsUpdatePackage_WindowsUpdateCategory.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.kbArticleIds.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.supportUrl = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.moreInfoUrls.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updateId = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.revisionNumber = reader.int32();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.lastDeploymentChangeTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inventory_WindowsUpdatePackage {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      categories: globalThis.Array.isArray(object?.categories)
        ? object.categories.map((e: any) => Inventory_WindowsUpdatePackage_WindowsUpdateCategory.fromJSON(e))
        : [],
      kbArticleIds: globalThis.Array.isArray(object?.kbArticleIds)
        ? object.kbArticleIds.map((e: any) => globalThis.String(e))
        : [],
      supportUrl: isSet(object.supportUrl) ? globalThis.String(object.supportUrl) : "",
      moreInfoUrls: globalThis.Array.isArray(object?.moreInfoUrls)
        ? object.moreInfoUrls.map((e: any) => globalThis.String(e))
        : [],
      updateId: isSet(object.updateId) ? globalThis.String(object.updateId) : "",
      revisionNumber: isSet(object.revisionNumber) ? globalThis.Number(object.revisionNumber) : 0,
      lastDeploymentChangeTime: isSet(object.lastDeploymentChangeTime)
        ? fromJsonTimestamp(object.lastDeploymentChangeTime)
        : undefined,
    };
  },

  toJSON(message: Inventory_WindowsUpdatePackage): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.categories?.length) {
      obj.categories = message.categories.map((e) => Inventory_WindowsUpdatePackage_WindowsUpdateCategory.toJSON(e));
    }
    if (message.kbArticleIds?.length) {
      obj.kbArticleIds = message.kbArticleIds;
    }
    if (message.supportUrl !== "") {
      obj.supportUrl = message.supportUrl;
    }
    if (message.moreInfoUrls?.length) {
      obj.moreInfoUrls = message.moreInfoUrls;
    }
    if (message.updateId !== "") {
      obj.updateId = message.updateId;
    }
    if (message.revisionNumber !== 0) {
      obj.revisionNumber = Math.round(message.revisionNumber);
    }
    if (message.lastDeploymentChangeTime !== undefined) {
      obj.lastDeploymentChangeTime = message.lastDeploymentChangeTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Inventory_WindowsUpdatePackage>): Inventory_WindowsUpdatePackage {
    return Inventory_WindowsUpdatePackage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Inventory_WindowsUpdatePackage>): Inventory_WindowsUpdatePackage {
    const message = createBaseInventory_WindowsUpdatePackage();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.categories =
      object.categories?.map((e) => Inventory_WindowsUpdatePackage_WindowsUpdateCategory.fromPartial(e)) || [];
    message.kbArticleIds = object.kbArticleIds?.map((e) => e) || [];
    message.supportUrl = object.supportUrl ?? "";
    message.moreInfoUrls = object.moreInfoUrls?.map((e) => e) || [];
    message.updateId = object.updateId ?? "";
    message.revisionNumber = object.revisionNumber ?? 0;
    message.lastDeploymentChangeTime = object.lastDeploymentChangeTime ?? undefined;
    return message;
  },
};

function createBaseInventory_WindowsUpdatePackage_WindowsUpdateCategory(): Inventory_WindowsUpdatePackage_WindowsUpdateCategory {
  return { id: "", name: "" };
}

export const Inventory_WindowsUpdatePackage_WindowsUpdateCategory: MessageFns<
  Inventory_WindowsUpdatePackage_WindowsUpdateCategory
> = {
  encode(
    message: Inventory_WindowsUpdatePackage_WindowsUpdateCategory,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Inventory_WindowsUpdatePackage_WindowsUpdateCategory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventory_WindowsUpdatePackage_WindowsUpdateCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inventory_WindowsUpdatePackage_WindowsUpdateCategory {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: Inventory_WindowsUpdatePackage_WindowsUpdateCategory): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(
    base?: DeepPartial<Inventory_WindowsUpdatePackage_WindowsUpdateCategory>,
  ): Inventory_WindowsUpdatePackage_WindowsUpdateCategory {
    return Inventory_WindowsUpdatePackage_WindowsUpdateCategory.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<Inventory_WindowsUpdatePackage_WindowsUpdateCategory>,
  ): Inventory_WindowsUpdatePackage_WindowsUpdateCategory {
    const message = createBaseInventory_WindowsUpdatePackage_WindowsUpdateCategory();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseInventory_WindowsQuickFixEngineeringPackage(): Inventory_WindowsQuickFixEngineeringPackage {
  return { caption: "", description: "", hotFixId: "", installTime: undefined };
}

export const Inventory_WindowsQuickFixEngineeringPackage: MessageFns<Inventory_WindowsQuickFixEngineeringPackage> = {
  encode(
    message: Inventory_WindowsQuickFixEngineeringPackage,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.caption !== "") {
      writer.uint32(10).string(message.caption);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.hotFixId !== "") {
      writer.uint32(26).string(message.hotFixId);
    }
    if (message.installTime !== undefined) {
      Timestamp.encode(toTimestamp(message.installTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Inventory_WindowsQuickFixEngineeringPackage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventory_WindowsQuickFixEngineeringPackage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.caption = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hotFixId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.installTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inventory_WindowsQuickFixEngineeringPackage {
    return {
      caption: isSet(object.caption) ? globalThis.String(object.caption) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      hotFixId: isSet(object.hotFixId) ? globalThis.String(object.hotFixId) : "",
      installTime: isSet(object.installTime) ? fromJsonTimestamp(object.installTime) : undefined,
    };
  },

  toJSON(message: Inventory_WindowsQuickFixEngineeringPackage): unknown {
    const obj: any = {};
    if (message.caption !== "") {
      obj.caption = message.caption;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.hotFixId !== "") {
      obj.hotFixId = message.hotFixId;
    }
    if (message.installTime !== undefined) {
      obj.installTime = message.installTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Inventory_WindowsQuickFixEngineeringPackage>): Inventory_WindowsQuickFixEngineeringPackage {
    return Inventory_WindowsQuickFixEngineeringPackage.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<Inventory_WindowsQuickFixEngineeringPackage>,
  ): Inventory_WindowsQuickFixEngineeringPackage {
    const message = createBaseInventory_WindowsQuickFixEngineeringPackage();
    message.caption = object.caption ?? "";
    message.description = object.description ?? "";
    message.hotFixId = object.hotFixId ?? "";
    message.installTime = object.installTime ?? undefined;
    return message;
  },
};

function createBaseInventory_WindowsApplication(): Inventory_WindowsApplication {
  return { displayName: "", displayVersion: "", publisher: "", installDate: undefined, helpLink: "" };
}

export const Inventory_WindowsApplication: MessageFns<Inventory_WindowsApplication> = {
  encode(message: Inventory_WindowsApplication, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    if (message.displayVersion !== "") {
      writer.uint32(18).string(message.displayVersion);
    }
    if (message.publisher !== "") {
      writer.uint32(26).string(message.publisher);
    }
    if (message.installDate !== undefined) {
      DateMessage.encode(message.installDate, writer.uint32(34).fork()).join();
    }
    if (message.helpLink !== "") {
      writer.uint32(42).string(message.helpLink);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Inventory_WindowsApplication {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventory_WindowsApplication();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayVersion = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.publisher = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.installDate = DateMessage.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.helpLink = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inventory_WindowsApplication {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      displayVersion: isSet(object.displayVersion) ? globalThis.String(object.displayVersion) : "",
      publisher: isSet(object.publisher) ? globalThis.String(object.publisher) : "",
      installDate: isSet(object.installDate) ? DateMessage.fromJSON(object.installDate) : undefined,
      helpLink: isSet(object.helpLink) ? globalThis.String(object.helpLink) : "",
    };
  },

  toJSON(message: Inventory_WindowsApplication): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.displayVersion !== "") {
      obj.displayVersion = message.displayVersion;
    }
    if (message.publisher !== "") {
      obj.publisher = message.publisher;
    }
    if (message.installDate !== undefined) {
      obj.installDate = DateMessage.toJSON(message.installDate);
    }
    if (message.helpLink !== "") {
      obj.helpLink = message.helpLink;
    }
    return obj;
  },

  create(base?: DeepPartial<Inventory_WindowsApplication>): Inventory_WindowsApplication {
    return Inventory_WindowsApplication.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Inventory_WindowsApplication>): Inventory_WindowsApplication {
    const message = createBaseInventory_WindowsApplication();
    message.displayName = object.displayName ?? "";
    message.displayVersion = object.displayVersion ?? "";
    message.publisher = object.publisher ?? "";
    message.installDate = (object.installDate !== undefined && object.installDate !== null)
      ? DateMessage.fromPartial(object.installDate)
      : undefined;
    message.helpLink = object.helpLink ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
