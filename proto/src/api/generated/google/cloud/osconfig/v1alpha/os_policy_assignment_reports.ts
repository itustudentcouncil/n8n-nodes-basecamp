// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/osconfig/v1alpha/os_policy_assignment_reports.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.osconfig.v1alpha";

/** Get a report of the OS policy assignment for a VM instance. */
export interface GetOSPolicyAssignmentReportRequest {
  /**
   * Required. API resource name for OS policy assignment report.
   *
   * Format:
   * `/projects/{project}/locations/{location}/instances/{instance}/osPolicyAssignments/{assignment}/report`
   *
   * For `{project}`, either `project-number` or `project-id` can be provided.
   * For `{instance_id}`, either Compute Engine `instance-id` or `instance-name`
   * can be provided.
   * For `{assignment_id}`, the OSPolicyAssignment id must be provided.
   */
  name: string;
}

/** List the OS policy assignment reports for VM instances. */
export interface ListOSPolicyAssignmentReportsRequest {
  /**
   * Required. The parent resource name.
   *
   * Format:
   * `projects/{project}/locations/{location}/instances/{instance}/osPolicyAssignments/{assignment}/reports`
   *
   * For `{project}`, either `project-number` or `project-id` can be provided.
   * For `{instance}`, either `instance-name`, `instance-id`, or `-` can be
   * provided. If '-' is provided, the response will include
   * OSPolicyAssignmentReports for all instances in the project/location.
   * For `{assignment}`, either `assignment-id` or `-` can be provided. If '-'
   * is provided, the response will include OSPolicyAssignmentReports for all
   * OSPolicyAssignments in the project/location.
   * Either {instance} or {assignment} must be `-`.
   *
   * For example:
   * `projects/{project}/locations/{location}/instances/{instance}/osPolicyAssignments/-/reports`
   *  returns all reports for the instance
   * `projects/{project}/locations/{location}/instances/-/osPolicyAssignments/{assignment-id}/reports`
   *  returns all the reports for the given assignment across all instances.
   * `projects/{project}/locations/{location}/instances/-/osPolicyAssignments/-/reports`
   *  returns all the reports for all assignments across all instances.
   */
  parent: string;
  /** The maximum number of results to return. */
  pageSize: number;
  /**
   * If provided, this field specifies the criteria that must be met by the
   * `OSPolicyAssignmentReport` API resource that is included in the response.
   */
  filter: string;
  /**
   * A pagination token returned from a previous call to the
   * `ListOSPolicyAssignmentReports` method that indicates where this listing
   * should continue from.
   */
  pageToken: string;
}

/**
 * A response message for listing OS Policy assignment reports including the
 * page of results and page token.
 */
export interface ListOSPolicyAssignmentReportsResponse {
  /** List of OS policy assignment reports. */
  osPolicyAssignmentReports: OSPolicyAssignmentReport[];
  /**
   * The pagination token to retrieve the next page of OS policy assignment
   * report objects.
   */
  nextPageToken: string;
}

/** A report of the OS policy assignment status for a given instance. */
export interface OSPolicyAssignmentReport {
  /**
   * The `OSPolicyAssignmentReport` API resource name.
   *
   * Format:
   * `projects/{project_number}/locations/{location}/instances/{instance_id}/osPolicyAssignments/{os_policy_assignment_id}/report`
   */
  name: string;
  /** The Compute Engine VM instance name. */
  instance: string;
  /**
   * Reference to the `OSPolicyAssignment` API resource that the `OSPolicy`
   * belongs to.
   *
   * Format:
   * `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`
   */
  osPolicyAssignment: string;
  /** Compliance data for each `OSPolicy` that is applied to the VM. */
  osPolicyCompliances: OSPolicyAssignmentReport_OSPolicyCompliance[];
  /** Timestamp for when the report was last generated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Unique identifier of the last attempted run to apply the OS policies
   * associated with this assignment on the VM.
   *
   * This ID is logged by the OS Config agent while applying the OS
   * policies associated with this assignment on the VM.
   * NOTE: If the service is unable to successfully connect to the agent for
   * this run, then this id will not be available in the agent logs.
   */
  lastRunId: string;
}

/** Compliance data for an OS policy */
export interface OSPolicyAssignmentReport_OSPolicyCompliance {
  /** The OS policy id */
  osPolicyId: string;
  /** The compliance state of the OS policy. */
  complianceState: OSPolicyAssignmentReport_OSPolicyCompliance_ComplianceState;
  /**
   * The reason for the OS policy to be in an unknown compliance state.
   * This field is always populated when `compliance_state` is `UNKNOWN`.
   *
   * If populated, the field can contain one of the following values:
   *
   * * `vm-not-running`: The VM was not running.
   * * `os-policies-not-supported-by-agent`: The version of the OS Config
   * agent running on the VM does not support running OS policies.
   * * `no-agent-detected`: The OS Config agent is not detected for the VM.
   * * `resource-execution-errors`: The OS Config agent encountered errors
   * while executing one or more resources in the policy. See
   * `os_policy_resource_compliances` for details.
   * * `task-timeout`: The task sent to the agent to apply the policy timed
   * out.
   * * `unexpected-agent-state`: The OS Config agent did not report the final
   * status of the task that attempted to apply the policy. Instead, the agent
   * unexpectedly started working on a different task. This mostly happens
   * when the agent or VM unexpectedly restarts while applying OS policies.
   * * `internal-service-errors`: Internal service errors were encountered
   * while attempting to apply the policy.
   */
  complianceStateReason: string;
  /**
   * Compliance data for each resource within the policy that is applied to
   * the VM.
   */
  osPolicyResourceCompliances: OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance[];
}

/** Possible compliance states for an os policy. */
export enum OSPolicyAssignmentReport_OSPolicyCompliance_ComplianceState {
  /**
   * UNKNOWN - The policy is in an unknown compliance state.
   *
   * Refer to the field `compliance_state_reason` to learn the exact reason
   * for the policy to be in this compliance state.
   */
  UNKNOWN = 0,
  /**
   * COMPLIANT - Policy is compliant.
   *
   * The policy is compliant if all the underlying resources are also
   * compliant.
   */
  COMPLIANT = 1,
  /**
   * NON_COMPLIANT - Policy is non-compliant.
   *
   * The policy is non-compliant if one or more underlying resources are
   * non-compliant.
   */
  NON_COMPLIANT = 2,
  UNRECOGNIZED = -1,
}

export function oSPolicyAssignmentReport_OSPolicyCompliance_ComplianceStateFromJSON(
  object: any,
): OSPolicyAssignmentReport_OSPolicyCompliance_ComplianceState {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return OSPolicyAssignmentReport_OSPolicyCompliance_ComplianceState.UNKNOWN;
    case 1:
    case "COMPLIANT":
      return OSPolicyAssignmentReport_OSPolicyCompliance_ComplianceState.COMPLIANT;
    case 2:
    case "NON_COMPLIANT":
      return OSPolicyAssignmentReport_OSPolicyCompliance_ComplianceState.NON_COMPLIANT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OSPolicyAssignmentReport_OSPolicyCompliance_ComplianceState.UNRECOGNIZED;
  }
}

export function oSPolicyAssignmentReport_OSPolicyCompliance_ComplianceStateToJSON(
  object: OSPolicyAssignmentReport_OSPolicyCompliance_ComplianceState,
): string {
  switch (object) {
    case OSPolicyAssignmentReport_OSPolicyCompliance_ComplianceState.UNKNOWN:
      return "UNKNOWN";
    case OSPolicyAssignmentReport_OSPolicyCompliance_ComplianceState.COMPLIANT:
      return "COMPLIANT";
    case OSPolicyAssignmentReport_OSPolicyCompliance_ComplianceState.NON_COMPLIANT:
      return "NON_COMPLIANT";
    case OSPolicyAssignmentReport_OSPolicyCompliance_ComplianceState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Compliance data for an OS policy resource. */
export interface OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance {
  /** The ID of the OS policy resource. */
  osPolicyResourceId: string;
  /**
   * Ordered list of configuration completed by the agent for the OS policy
   * resource.
   */
  configSteps: OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep[];
  /** The compliance state of the resource. */
  complianceState: OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ComplianceState;
  /**
   * A reason for the resource to be in the given compliance state.
   * This field is always populated when `compliance_state` is `UNKNOWN`.
   *
   * The following values are supported when `compliance_state == UNKNOWN`
   *
   * * `execution-errors`: Errors were encountered by the agent while
   * executing the resource and the compliance state couldn't be
   * determined.
   * * `execution-skipped-by-agent`: Resource execution was skipped by the
   * agent because errors were encountered while executing prior resources
   * in the OS policy.
   * * `os-policy-execution-attempt-failed`: The execution of the OS policy
   * containing this resource failed and the compliance state couldn't be
   * determined.
   */
  complianceStateReason: string;
  /** ExecResource specific output. */
  execResourceOutput?:
    | OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput
    | undefined;
}

/** Possible compliance states for a resource. */
export enum OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ComplianceState {
  /**
   * UNKNOWN - The resource is in an unknown compliance state.
   *
   * To get more details about why the policy is in this state, review
   * the output of the `compliance_state_reason` field.
   */
  UNKNOWN = 0,
  /** COMPLIANT - Resource is compliant. */
  COMPLIANT = 1,
  /** NON_COMPLIANT - Resource is non-compliant. */
  NON_COMPLIANT = 2,
  UNRECOGNIZED = -1,
}

export function oSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ComplianceStateFromJSON(
  object: any,
): OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ComplianceState {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ComplianceState.UNKNOWN;
    case 1:
    case "COMPLIANT":
      return OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ComplianceState.COMPLIANT;
    case 2:
    case "NON_COMPLIANT":
      return OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ComplianceState.NON_COMPLIANT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ComplianceState.UNRECOGNIZED;
  }
}

export function oSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ComplianceStateToJSON(
  object: OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ComplianceState,
): string {
  switch (object) {
    case OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ComplianceState.UNKNOWN:
      return "UNKNOWN";
    case OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ComplianceState.COMPLIANT:
      return "COMPLIANT";
    case OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ComplianceState.NON_COMPLIANT:
      return "NON_COMPLIANT";
    case OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ComplianceState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Step performed by the OS Config agent for configuring an
 * `OSPolicy` resource to its desired state.
 */
export interface OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep {
  /** Configuration step type. */
  type: OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_Type;
  /**
   * An error message recorded during the execution of this step.
   * Only populated if errors were encountered during this step execution.
   */
  errorMessage: string;
}

/** Supported configuration step types */
export enum OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_Type {
  /** TYPE_UNSPECIFIED - Default value. This value is unused. */
  TYPE_UNSPECIFIED = 0,
  /** VALIDATION - Checks for resource conflicts such as schema errors. */
  VALIDATION = 1,
  /** DESIRED_STATE_CHECK - Checks the current status of the desired state for a resource. */
  DESIRED_STATE_CHECK = 2,
  /**
   * DESIRED_STATE_ENFORCEMENT - Enforces the desired state for a resource that is not in desired
   * state.
   */
  DESIRED_STATE_ENFORCEMENT = 3,
  /**
   * DESIRED_STATE_CHECK_POST_ENFORCEMENT - Re-checks the status of the desired state. This check is done
   * for a resource after the enforcement of all OS policies.
   *
   * This step is used to determine the final desired state status for
   * the resource. It accounts for any resources that might have drifted
   * from their desired state due to side effects from executing other
   * resources.
   */
  DESIRED_STATE_CHECK_POST_ENFORCEMENT = 4,
  UNRECOGNIZED = -1,
}

export function oSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_TypeFromJSON(
  object: any,
): OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_Type
        .TYPE_UNSPECIFIED;
    case 1:
    case "VALIDATION":
      return OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_Type
        .VALIDATION;
    case 2:
    case "DESIRED_STATE_CHECK":
      return OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_Type
        .DESIRED_STATE_CHECK;
    case 3:
    case "DESIRED_STATE_ENFORCEMENT":
      return OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_Type
        .DESIRED_STATE_ENFORCEMENT;
    case 4:
    case "DESIRED_STATE_CHECK_POST_ENFORCEMENT":
      return OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_Type
        .DESIRED_STATE_CHECK_POST_ENFORCEMENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_Type
        .UNRECOGNIZED;
  }
}

export function oSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_TypeToJSON(
  object: OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_Type,
): string {
  switch (object) {
    case OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_Type
      .TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_Type
      .VALIDATION:
      return "VALIDATION";
    case OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_Type
      .DESIRED_STATE_CHECK:
      return "DESIRED_STATE_CHECK";
    case OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_Type
      .DESIRED_STATE_ENFORCEMENT:
      return "DESIRED_STATE_ENFORCEMENT";
    case OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_Type
      .DESIRED_STATE_CHECK_POST_ENFORCEMENT:
      return "DESIRED_STATE_CHECK_POST_ENFORCEMENT";
    case OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_Type
      .UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** ExecResource specific output. */
export interface OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput {
  /**
   * Output from enforcement phase output file (if run).
   * Output size is limited to 100K bytes.
   */
  enforcementOutput: Buffer;
}

function createBaseGetOSPolicyAssignmentReportRequest(): GetOSPolicyAssignmentReportRequest {
  return { name: "" };
}

export const GetOSPolicyAssignmentReportRequest: MessageFns<GetOSPolicyAssignmentReportRequest> = {
  encode(message: GetOSPolicyAssignmentReportRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOSPolicyAssignmentReportRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOSPolicyAssignmentReportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOSPolicyAssignmentReportRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetOSPolicyAssignmentReportRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetOSPolicyAssignmentReportRequest>): GetOSPolicyAssignmentReportRequest {
    return GetOSPolicyAssignmentReportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOSPolicyAssignmentReportRequest>): GetOSPolicyAssignmentReportRequest {
    const message = createBaseGetOSPolicyAssignmentReportRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListOSPolicyAssignmentReportsRequest(): ListOSPolicyAssignmentReportsRequest {
  return { parent: "", pageSize: 0, filter: "", pageToken: "" };
}

export const ListOSPolicyAssignmentReportsRequest: MessageFns<ListOSPolicyAssignmentReportsRequest> = {
  encode(message: ListOSPolicyAssignmentReportsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOSPolicyAssignmentReportsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOSPolicyAssignmentReportsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOSPolicyAssignmentReportsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListOSPolicyAssignmentReportsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListOSPolicyAssignmentReportsRequest>): ListOSPolicyAssignmentReportsRequest {
    return ListOSPolicyAssignmentReportsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOSPolicyAssignmentReportsRequest>): ListOSPolicyAssignmentReportsRequest {
    const message = createBaseListOSPolicyAssignmentReportsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.filter = object.filter ?? "";
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListOSPolicyAssignmentReportsResponse(): ListOSPolicyAssignmentReportsResponse {
  return { osPolicyAssignmentReports: [], nextPageToken: "" };
}

export const ListOSPolicyAssignmentReportsResponse: MessageFns<ListOSPolicyAssignmentReportsResponse> = {
  encode(message: ListOSPolicyAssignmentReportsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.osPolicyAssignmentReports) {
      OSPolicyAssignmentReport.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOSPolicyAssignmentReportsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOSPolicyAssignmentReportsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.osPolicyAssignmentReports.push(OSPolicyAssignmentReport.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOSPolicyAssignmentReportsResponse {
    return {
      osPolicyAssignmentReports: globalThis.Array.isArray(object?.osPolicyAssignmentReports)
        ? object.osPolicyAssignmentReports.map((e: any) => OSPolicyAssignmentReport.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListOSPolicyAssignmentReportsResponse): unknown {
    const obj: any = {};
    if (message.osPolicyAssignmentReports?.length) {
      obj.osPolicyAssignmentReports = message.osPolicyAssignmentReports.map((e) => OSPolicyAssignmentReport.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListOSPolicyAssignmentReportsResponse>): ListOSPolicyAssignmentReportsResponse {
    return ListOSPolicyAssignmentReportsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOSPolicyAssignmentReportsResponse>): ListOSPolicyAssignmentReportsResponse {
    const message = createBaseListOSPolicyAssignmentReportsResponse();
    message.osPolicyAssignmentReports =
      object.osPolicyAssignmentReports?.map((e) => OSPolicyAssignmentReport.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseOSPolicyAssignmentReport(): OSPolicyAssignmentReport {
  return {
    name: "",
    instance: "",
    osPolicyAssignment: "",
    osPolicyCompliances: [],
    updateTime: undefined,
    lastRunId: "",
  };
}

export const OSPolicyAssignmentReport: MessageFns<OSPolicyAssignmentReport> = {
  encode(message: OSPolicyAssignmentReport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.instance !== "") {
      writer.uint32(18).string(message.instance);
    }
    if (message.osPolicyAssignment !== "") {
      writer.uint32(26).string(message.osPolicyAssignment);
    }
    for (const v of message.osPolicyCompliances) {
      OSPolicyAssignmentReport_OSPolicyCompliance.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(42).fork()).join();
    }
    if (message.lastRunId !== "") {
      writer.uint32(50).string(message.lastRunId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OSPolicyAssignmentReport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOSPolicyAssignmentReport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.osPolicyAssignment = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.osPolicyCompliances.push(OSPolicyAssignmentReport_OSPolicyCompliance.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.lastRunId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OSPolicyAssignmentReport {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      osPolicyAssignment: isSet(object.osPolicyAssignment) ? globalThis.String(object.osPolicyAssignment) : "",
      osPolicyCompliances: globalThis.Array.isArray(object?.osPolicyCompliances)
        ? object.osPolicyCompliances.map((e: any) => OSPolicyAssignmentReport_OSPolicyCompliance.fromJSON(e))
        : [],
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      lastRunId: isSet(object.lastRunId) ? globalThis.String(object.lastRunId) : "",
    };
  },

  toJSON(message: OSPolicyAssignmentReport): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.osPolicyAssignment !== "") {
      obj.osPolicyAssignment = message.osPolicyAssignment;
    }
    if (message.osPolicyCompliances?.length) {
      obj.osPolicyCompliances = message.osPolicyCompliances.map((e) =>
        OSPolicyAssignmentReport_OSPolicyCompliance.toJSON(e)
      );
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.lastRunId !== "") {
      obj.lastRunId = message.lastRunId;
    }
    return obj;
  },

  create(base?: DeepPartial<OSPolicyAssignmentReport>): OSPolicyAssignmentReport {
    return OSPolicyAssignmentReport.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OSPolicyAssignmentReport>): OSPolicyAssignmentReport {
    const message = createBaseOSPolicyAssignmentReport();
    message.name = object.name ?? "";
    message.instance = object.instance ?? "";
    message.osPolicyAssignment = object.osPolicyAssignment ?? "";
    message.osPolicyCompliances =
      object.osPolicyCompliances?.map((e) => OSPolicyAssignmentReport_OSPolicyCompliance.fromPartial(e)) || [];
    message.updateTime = object.updateTime ?? undefined;
    message.lastRunId = object.lastRunId ?? "";
    return message;
  },
};

function createBaseOSPolicyAssignmentReport_OSPolicyCompliance(): OSPolicyAssignmentReport_OSPolicyCompliance {
  return { osPolicyId: "", complianceState: 0, complianceStateReason: "", osPolicyResourceCompliances: [] };
}

export const OSPolicyAssignmentReport_OSPolicyCompliance: MessageFns<OSPolicyAssignmentReport_OSPolicyCompliance> = {
  encode(
    message: OSPolicyAssignmentReport_OSPolicyCompliance,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.osPolicyId !== "") {
      writer.uint32(10).string(message.osPolicyId);
    }
    if (message.complianceState !== 0) {
      writer.uint32(16).int32(message.complianceState);
    }
    if (message.complianceStateReason !== "") {
      writer.uint32(26).string(message.complianceStateReason);
    }
    for (const v of message.osPolicyResourceCompliances) {
      OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance.encode(v!, writer.uint32(34).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OSPolicyAssignmentReport_OSPolicyCompliance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOSPolicyAssignmentReport_OSPolicyCompliance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.osPolicyId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.complianceState = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.complianceStateReason = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.osPolicyResourceCompliances.push(
            OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OSPolicyAssignmentReport_OSPolicyCompliance {
    return {
      osPolicyId: isSet(object.osPolicyId) ? globalThis.String(object.osPolicyId) : "",
      complianceState: isSet(object.complianceState)
        ? oSPolicyAssignmentReport_OSPolicyCompliance_ComplianceStateFromJSON(object.complianceState)
        : 0,
      complianceStateReason: isSet(object.complianceStateReason) ? globalThis.String(object.complianceStateReason) : "",
      osPolicyResourceCompliances: globalThis.Array.isArray(object?.osPolicyResourceCompliances)
        ? object.osPolicyResourceCompliances.map((e: any) =>
          OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: OSPolicyAssignmentReport_OSPolicyCompliance): unknown {
    const obj: any = {};
    if (message.osPolicyId !== "") {
      obj.osPolicyId = message.osPolicyId;
    }
    if (message.complianceState !== 0) {
      obj.complianceState = oSPolicyAssignmentReport_OSPolicyCompliance_ComplianceStateToJSON(message.complianceState);
    }
    if (message.complianceStateReason !== "") {
      obj.complianceStateReason = message.complianceStateReason;
    }
    if (message.osPolicyResourceCompliances?.length) {
      obj.osPolicyResourceCompliances = message.osPolicyResourceCompliances.map((e) =>
        OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<OSPolicyAssignmentReport_OSPolicyCompliance>): OSPolicyAssignmentReport_OSPolicyCompliance {
    return OSPolicyAssignmentReport_OSPolicyCompliance.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<OSPolicyAssignmentReport_OSPolicyCompliance>,
  ): OSPolicyAssignmentReport_OSPolicyCompliance {
    const message = createBaseOSPolicyAssignmentReport_OSPolicyCompliance();
    message.osPolicyId = object.osPolicyId ?? "";
    message.complianceState = object.complianceState ?? 0;
    message.complianceStateReason = object.complianceStateReason ?? "";
    message.osPolicyResourceCompliances =
      object.osPolicyResourceCompliances?.map((e) =>
        OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseOSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance(): OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance {
  return {
    osPolicyResourceId: "",
    configSteps: [],
    complianceState: 0,
    complianceStateReason: "",
    execResourceOutput: undefined,
  };
}

export const OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance: MessageFns<
  OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance
> = {
  encode(
    message: OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.osPolicyResourceId !== "") {
      writer.uint32(10).string(message.osPolicyResourceId);
    }
    for (const v of message.configSteps) {
      OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep.encode(
        v!,
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.complianceState !== 0) {
      writer.uint32(24).int32(message.complianceState);
    }
    if (message.complianceStateReason !== "") {
      writer.uint32(34).string(message.complianceStateReason);
    }
    if (message.execResourceOutput !== undefined) {
      OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput.encode(
        message.execResourceOutput,
        writer.uint32(42).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.osPolicyResourceId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.configSteps.push(
            OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.complianceState = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.complianceStateReason = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.execResourceOutput =
            OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput.decode(
              reader,
              reader.uint32(),
            );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance {
    return {
      osPolicyResourceId: isSet(object.osPolicyResourceId) ? globalThis.String(object.osPolicyResourceId) : "",
      configSteps: globalThis.Array.isArray(object?.configSteps)
        ? object.configSteps.map((e: any) =>
          OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep.fromJSON(e)
        )
        : [],
      complianceState: isSet(object.complianceState)
        ? oSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ComplianceStateFromJSON(
          object.complianceState,
        )
        : 0,
      complianceStateReason: isSet(object.complianceStateReason) ? globalThis.String(object.complianceStateReason) : "",
      execResourceOutput: isSet(object.execResourceOutput)
        ? OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput.fromJSON(
          object.execResourceOutput,
        )
        : undefined,
    };
  },

  toJSON(message: OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance): unknown {
    const obj: any = {};
    if (message.osPolicyResourceId !== "") {
      obj.osPolicyResourceId = message.osPolicyResourceId;
    }
    if (message.configSteps?.length) {
      obj.configSteps = message.configSteps.map((e) =>
        OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep.toJSON(e)
      );
    }
    if (message.complianceState !== 0) {
      obj.complianceState =
        oSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ComplianceStateToJSON(
          message.complianceState,
        );
    }
    if (message.complianceStateReason !== "") {
      obj.complianceStateReason = message.complianceStateReason;
    }
    if (message.execResourceOutput !== undefined) {
      obj.execResourceOutput = OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput
        .toJSON(message.execResourceOutput);
    }
    return obj;
  },

  create(
    base?: DeepPartial<OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance>,
  ): OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance {
    return OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance>,
  ): OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance {
    const message = createBaseOSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance();
    message.osPolicyResourceId = object.osPolicyResourceId ?? "";
    message.configSteps =
      object.configSteps?.map((e) =>
        OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep.fromPartial(e)
      ) || [];
    message.complianceState = object.complianceState ?? 0;
    message.complianceStateReason = object.complianceStateReason ?? "";
    message.execResourceOutput = (object.execResourceOutput !== undefined && object.execResourceOutput !== null)
      ? OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput.fromPartial(
        object.execResourceOutput,
      )
      : undefined;
    return message;
  },
};

function createBaseOSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep(): OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep {
  return { type: 0, errorMessage: "" };
}

export const OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep:
  MessageFns<OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep> = {
    encode(
      message: OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.type !== 0) {
        writer.uint32(8).int32(message.type);
      }
      if (message.errorMessage !== "") {
        writer.uint32(18).string(message.errorMessage);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message =
        createBaseOSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.type = reader.int32() as any;
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.errorMessage = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(
      object: any,
    ): OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep {
      return {
        type: isSet(object.type)
          ? oSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_TypeFromJSON(
            object.type,
          )
          : 0,
        errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
      };
    },

    toJSON(
      message: OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep,
    ): unknown {
      const obj: any = {};
      if (message.type !== 0) {
        obj.type =
          oSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep_TypeToJSON(
            message.type,
          );
      }
      if (message.errorMessage !== "") {
        obj.errorMessage = message.errorMessage;
      }
      return obj;
    },

    create(
      base?: DeepPartial<
        OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep
      >,
    ): OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep {
      return OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep
        .fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<
        OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep
      >,
    ): OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep {
      const message =
        createBaseOSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_OSPolicyResourceConfigStep();
      message.type = object.type ?? 0;
      message.errorMessage = object.errorMessage ?? "";
      return message;
    },
  };

function createBaseOSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput(): OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput {
  return { enforcementOutput: Buffer.alloc(0) };
}

export const OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput: MessageFns<
  OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput
> = {
  encode(
    message: OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.enforcementOutput.length !== 0) {
      writer.uint32(18).bytes(message.enforcementOutput);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message =
      createBaseOSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.enforcementOutput = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput {
    return {
      enforcementOutput: isSet(object.enforcementOutput)
        ? Buffer.from(bytesFromBase64(object.enforcementOutput))
        : Buffer.alloc(0),
    };
  },

  toJSON(message: OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput): unknown {
    const obj: any = {};
    if (message.enforcementOutput.length !== 0) {
      obj.enforcementOutput = base64FromBytes(message.enforcementOutput);
    }
    return obj;
  },

  create(
    base?: DeepPartial<OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput>,
  ): OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput {
    return OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput.fromPartial(
      base ?? {},
    );
  },
  fromPartial(
    object: DeepPartial<OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput>,
  ): OSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput {
    const message =
      createBaseOSPolicyAssignmentReport_OSPolicyCompliance_OSPolicyResourceCompliance_ExecResourceOutput();
    message.enforcementOutput = object.enforcementOutput ?? Buffer.alloc(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
