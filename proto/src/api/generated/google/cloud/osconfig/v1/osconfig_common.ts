// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/osconfig/v1/osconfig_common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.osconfig.v1";

/**
 * Message encapsulating a value that can be either absolute ("fixed") or
 * relative ("percent") to a value.
 */
export interface FixedOrPercent {
  /** Specifies a fixed value. */
  fixed?:
    | number
    | undefined;
  /**
   * Specifies the relative value defined as a percentage, which will be
   * multiplied by a reference value.
   */
  percent?: number | undefined;
}

function createBaseFixedOrPercent(): FixedOrPercent {
  return { fixed: undefined, percent: undefined };
}

export const FixedOrPercent: MessageFns<FixedOrPercent> = {
  encode(message: FixedOrPercent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fixed !== undefined) {
      writer.uint32(8).int32(message.fixed);
    }
    if (message.percent !== undefined) {
      writer.uint32(16).int32(message.percent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FixedOrPercent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFixedOrPercent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fixed = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.percent = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FixedOrPercent {
    return {
      fixed: isSet(object.fixed) ? globalThis.Number(object.fixed) : undefined,
      percent: isSet(object.percent) ? globalThis.Number(object.percent) : undefined,
    };
  },

  toJSON(message: FixedOrPercent): unknown {
    const obj: any = {};
    if (message.fixed !== undefined) {
      obj.fixed = Math.round(message.fixed);
    }
    if (message.percent !== undefined) {
      obj.percent = Math.round(message.percent);
    }
    return obj;
  },

  create(base?: DeepPartial<FixedOrPercent>): FixedOrPercent {
    return FixedOrPercent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FixedOrPercent>): FixedOrPercent {
    const message = createBaseFixedOrPercent();
    message.fixed = object.fixed ?? undefined;
    message.percent = object.percent ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
