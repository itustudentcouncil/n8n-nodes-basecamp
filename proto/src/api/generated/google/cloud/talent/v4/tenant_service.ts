// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/talent/v4/tenant_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { ResponseMetadata } from "./common.js";
import { Tenant } from "./tenant.js";

export const protobufPackage = "google.cloud.talent.v4";

/** The Request of the CreateTenant method. */
export interface CreateTenantRequest {
  /**
   * Required. Resource name of the project under which the tenant is created.
   *
   * The format is "projects/{project_id}", for example,
   * "projects/foo".
   */
  parent: string;
  /** Required. The tenant to be created. */
  tenant: Tenant | undefined;
}

/** Request for getting a tenant by name. */
export interface GetTenantRequest {
  /**
   * Required. The resource name of the tenant to be retrieved.
   *
   * The format is "projects/{project_id}/tenants/{tenant_id}", for example,
   * "projects/foo/tenants/bar".
   */
  name: string;
}

/** Request for updating a specified tenant. */
export interface UpdateTenantRequest {
  /**
   * Required. The tenant resource to replace the current resource in the
   * system.
   */
  tenant:
    | Tenant
    | undefined;
  /**
   * Strongly recommended for the best service experience.
   *
   * If [update_mask][google.cloud.talent.v4.UpdateTenantRequest.update_mask] is
   * provided, only the specified fields in
   * [tenant][google.cloud.talent.v4.UpdateTenantRequest.tenant] are updated.
   * Otherwise all the fields are updated.
   *
   * A field mask to specify the tenant fields to be updated. Only
   * top level fields of [Tenant][google.cloud.talent.v4.Tenant] are supported.
   */
  updateMask: string[] | undefined;
}

/** Request to delete a tenant. */
export interface DeleteTenantRequest {
  /**
   * Required. The resource name of the tenant to be deleted.
   *
   * The format is "projects/{project_id}/tenants/{tenant_id}", for example,
   * "projects/foo/tenants/bar".
   */
  name: string;
}

/** List tenants for which the client has ACL visibility. */
export interface ListTenantsRequest {
  /**
   * Required. Resource name of the project under which the tenant is created.
   *
   * The format is "projects/{project_id}", for example,
   * "projects/foo".
   */
  parent: string;
  /** The starting indicator from which to return results. */
  pageToken: string;
  /**
   * The maximum number of tenants to be returned, at most 100.
   * Default is 100 if a non-positive number is provided.
   */
  pageSize: number;
}

/** The List tenants response object. */
export interface ListTenantsResponse {
  /** Tenants for the current client. */
  tenants: Tenant[];
  /** A token to retrieve the next page of results. */
  nextPageToken: string;
  /**
   * Additional information for the API invocation, such as the request
   * tracking id.
   */
  metadata: ResponseMetadata | undefined;
}

function createBaseCreateTenantRequest(): CreateTenantRequest {
  return { parent: "", tenant: undefined };
}

export const CreateTenantRequest: MessageFns<CreateTenantRequest> = {
  encode(message: CreateTenantRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.tenant !== undefined) {
      Tenant.encode(message.tenant, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTenantRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTenantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tenant = Tenant.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTenantRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      tenant: isSet(object.tenant) ? Tenant.fromJSON(object.tenant) : undefined,
    };
  },

  toJSON(message: CreateTenantRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.tenant !== undefined) {
      obj.tenant = Tenant.toJSON(message.tenant);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTenantRequest>): CreateTenantRequest {
    return CreateTenantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTenantRequest>): CreateTenantRequest {
    const message = createBaseCreateTenantRequest();
    message.parent = object.parent ?? "";
    message.tenant = (object.tenant !== undefined && object.tenant !== null)
      ? Tenant.fromPartial(object.tenant)
      : undefined;
    return message;
  },
};

function createBaseGetTenantRequest(): GetTenantRequest {
  return { name: "" };
}

export const GetTenantRequest: MessageFns<GetTenantRequest> = {
  encode(message: GetTenantRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTenantRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTenantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTenantRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTenantRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTenantRequest>): GetTenantRequest {
    return GetTenantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTenantRequest>): GetTenantRequest {
    const message = createBaseGetTenantRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateTenantRequest(): UpdateTenantRequest {
  return { tenant: undefined, updateMask: undefined };
}

export const UpdateTenantRequest: MessageFns<UpdateTenantRequest> = {
  encode(message: UpdateTenantRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenant !== undefined) {
      Tenant.encode(message.tenant, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTenantRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTenantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tenant = Tenant.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTenantRequest {
    return {
      tenant: isSet(object.tenant) ? Tenant.fromJSON(object.tenant) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateTenantRequest): unknown {
    const obj: any = {};
    if (message.tenant !== undefined) {
      obj.tenant = Tenant.toJSON(message.tenant);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTenantRequest>): UpdateTenantRequest {
    return UpdateTenantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTenantRequest>): UpdateTenantRequest {
    const message = createBaseUpdateTenantRequest();
    message.tenant = (object.tenant !== undefined && object.tenant !== null)
      ? Tenant.fromPartial(object.tenant)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteTenantRequest(): DeleteTenantRequest {
  return { name: "" };
}

export const DeleteTenantRequest: MessageFns<DeleteTenantRequest> = {
  encode(message: DeleteTenantRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTenantRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTenantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTenantRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteTenantRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTenantRequest>): DeleteTenantRequest {
    return DeleteTenantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTenantRequest>): DeleteTenantRequest {
    const message = createBaseDeleteTenantRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListTenantsRequest(): ListTenantsRequest {
  return { parent: "", pageToken: "", pageSize: 0 };
}

export const ListTenantsRequest: MessageFns<ListTenantsRequest> = {
  encode(message: ListTenantsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTenantsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTenantsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTenantsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListTenantsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListTenantsRequest>): ListTenantsRequest {
    return ListTenantsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTenantsRequest>): ListTenantsRequest {
    const message = createBaseListTenantsRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListTenantsResponse(): ListTenantsResponse {
  return { tenants: [], nextPageToken: "", metadata: undefined };
}

export const ListTenantsResponse: MessageFns<ListTenantsResponse> = {
  encode(message: ListTenantsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tenants) {
      Tenant.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.metadata !== undefined) {
      ResponseMetadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTenantsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTenantsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tenants.push(Tenant.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadata = ResponseMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTenantsResponse {
    return {
      tenants: globalThis.Array.isArray(object?.tenants) ? object.tenants.map((e: any) => Tenant.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      metadata: isSet(object.metadata) ? ResponseMetadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: ListTenantsResponse): unknown {
    const obj: any = {};
    if (message.tenants?.length) {
      obj.tenants = message.tenants.map((e) => Tenant.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.metadata !== undefined) {
      obj.metadata = ResponseMetadata.toJSON(message.metadata);
    }
    return obj;
  },

  create(base?: DeepPartial<ListTenantsResponse>): ListTenantsResponse {
    return ListTenantsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTenantsResponse>): ListTenantsResponse {
    const message = createBaseListTenantsResponse();
    message.tenants = object.tenants?.map((e) => Tenant.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? ResponseMetadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

/** A service that handles tenant management, including CRUD and enumeration. */
export type TenantServiceDefinition = typeof TenantServiceDefinition;
export const TenantServiceDefinition = {
  name: "TenantService",
  fullName: "google.cloud.talent.v4.TenantService",
  methods: {
    /** Creates a new tenant entity. */
    createTenant: {
      name: "CreateTenant",
      requestType: CreateTenantRequest,
      requestStream: false,
      responseType: Tenant,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 116, 101, 110, 97, 110, 116])],
          578365826: [
            Buffer.from([
              41,
              58,
              6,
              116,
              101,
              110,
              97,
              110,
              116,
              34,
              31,
              47,
              118,
              52,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves specified tenant. */
    getTenant: {
      name: "GetTenant",
      requestType: GetTenantRequest,
      requestStream: false,
      responseType: Tenant,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              33,
              18,
              31,
              47,
              118,
              52,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates specified tenant. */
    updateTenant: {
      name: "UpdateTenant",
      requestType: UpdateTenantRequest,
      requestStream: false,
      responseType: Tenant,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([18, 116, 101, 110, 97, 110, 116, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              48,
              58,
              6,
              116,
              101,
              110,
              97,
              110,
              116,
              50,
              38,
              47,
              118,
              52,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes specified tenant. */
    deleteTenant: {
      name: "DeleteTenant",
      requestType: DeleteTenantRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              33,
              42,
              31,
              47,
              118,
              52,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all tenants associated with the project. */
    listTenants: {
      name: "ListTenants",
      requestType: ListTenantsRequest,
      requestStream: false,
      responseType: ListTenantsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              33,
              18,
              31,
              47,
              118,
              52,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface TenantServiceImplementation<CallContextExt = {}> {
  /** Creates a new tenant entity. */
  createTenant(request: CreateTenantRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Tenant>>;
  /** Retrieves specified tenant. */
  getTenant(request: GetTenantRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Tenant>>;
  /** Updates specified tenant. */
  updateTenant(request: UpdateTenantRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Tenant>>;
  /** Deletes specified tenant. */
  deleteTenant(request: DeleteTenantRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Lists all tenants associated with the project. */
  listTenants(
    request: ListTenantsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTenantsResponse>>;
}

export interface TenantServiceClient<CallOptionsExt = {}> {
  /** Creates a new tenant entity. */
  createTenant(request: DeepPartial<CreateTenantRequest>, options?: CallOptions & CallOptionsExt): Promise<Tenant>;
  /** Retrieves specified tenant. */
  getTenant(request: DeepPartial<GetTenantRequest>, options?: CallOptions & CallOptionsExt): Promise<Tenant>;
  /** Updates specified tenant. */
  updateTenant(request: DeepPartial<UpdateTenantRequest>, options?: CallOptions & CallOptionsExt): Promise<Tenant>;
  /** Deletes specified tenant. */
  deleteTenant(request: DeepPartial<DeleteTenantRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Lists all tenants associated with the project. */
  listTenants(
    request: DeepPartial<ListTenantsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTenantsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
