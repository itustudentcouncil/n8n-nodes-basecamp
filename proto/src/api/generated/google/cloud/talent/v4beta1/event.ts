// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/talent/v4beta1/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.talent.v4beta1";

/**
 * An event issued when an end user interacts with the application that
 * implements Cloud Talent Solution. Providing this information improves the
 * quality of results for the API clients, enabling the
 * service to perform optimally. The number of events sent must be consistent
 * with other calls, such as job searches, issued to the service by the client.
 */
export interface ClientEvent {
  /**
   * Strongly recommended for the best service experience.
   *
   * A unique ID generated in the API responses. It can be found in
   * [ResponseMetadata.request_id][google.cloud.talent.v4beta1.ResponseMetadata.request_id].
   */
  requestId: string;
  /** Required. A unique identifier, generated by the client application. */
  eventId: string;
  /** Required. The timestamp of the event. */
  createTime:
    | Date
    | undefined;
  /**
   * An event issued when a job seeker interacts with the application that
   * implements Cloud Talent Solution.
   */
  jobEvent?:
    | JobEvent
    | undefined;
  /**
   * Notes about the event provided by recruiters or other users, for example,
   * feedback on why a profile was bookmarked.
   */
  eventNotes: string;
}

/**
 * An event issued when a job seeker interacts with the application that
 * implements Cloud Talent Solution.
 */
export interface JobEvent {
  /**
   * Required. The type of the event (see
   * [JobEventType][google.cloud.talent.v4beta1.JobEvent.JobEventType]).
   */
  type: JobEvent_JobEventType;
  /**
   * Required. The [job name(s)][google.cloud.talent.v4beta1.Job.name]
   * associated with this event. For example, if this is an
   * [impression][google.cloud.talent.v4beta1.JobEvent.JobEventType.IMPRESSION]
   * event, this field contains the identifiers of all jobs shown to the job
   * seeker. If this was a
   * [view][google.cloud.talent.v4beta1.JobEvent.JobEventType.VIEW] event, this
   * field contains the identifier of the viewed job.
   *
   * The format is
   * "projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}", for
   * example, "projects/foo/tenants/bar/jobs/baz".
   */
  jobs: string[];
  /**
   * The [profile name][google.cloud.talent.v4beta1.Profile.name] associated
   * with this client event.
   *
   * The format is
   * "projects/{project_id}/tenants/{tenant_id}/profiles/{profile_id}",
   * for example, "projects/foo/tenants/bar/profiles/baz".
   */
  profile: string;
}

/**
 * An enumeration of an event attributed to the behavior of the end user,
 * such as a job seeker.
 */
export enum JobEvent_JobEventType {
  /** JOB_EVENT_TYPE_UNSPECIFIED - The event is unspecified by other provided values. */
  JOB_EVENT_TYPE_UNSPECIFIED = 0,
  /**
   * IMPRESSION - The job seeker or other entity interacting with the service has
   * had a job rendered in their view, such as in a list of search results in
   * a compressed or clipped format. This event is typically associated with
   * the viewing of a jobs list on a single page by a job seeker.
   */
  IMPRESSION = 1,
  /**
   * VIEW - The job seeker, or other entity interacting with the service, has
   * viewed the details of a job, including the full description. This
   * event doesn't apply to the viewing a snippet of a job appearing as a
   * part of the job search results. Viewing a snippet is associated with an
   * [impression][google.cloud.talent.v4beta1.JobEvent.JobEventType.IMPRESSION]).
   */
  VIEW = 2,
  /**
   * VIEW_REDIRECT - The job seeker or other entity interacting with the service
   * performed an action to view a job and was redirected to a different
   * website for job.
   */
  VIEW_REDIRECT = 3,
  /**
   * APPLICATION_START - The job seeker or other entity interacting with the service
   * began the process or demonstrated the intention of applying for a job.
   */
  APPLICATION_START = 4,
  /**
   * APPLICATION_FINISH - The job seeker or other entity interacting with the service
   * submitted an application for a job.
   */
  APPLICATION_FINISH = 5,
  /**
   * APPLICATION_QUICK_SUBMISSION - The job seeker or other entity interacting with the service
   * submitted an application for a job with a single click without
   * entering information. If a job seeker performs this action, send only
   * this event to the service. Do not also send
   * [JobEventType.APPLICATION_START][google.cloud.talent.v4beta1.JobEvent.JobEventType.APPLICATION_START]
   * or
   * [JobEventType.APPLICATION_FINISH][google.cloud.talent.v4beta1.JobEvent.JobEventType.APPLICATION_FINISH]
   * events.
   */
  APPLICATION_QUICK_SUBMISSION = 6,
  /**
   * APPLICATION_REDIRECT - The job seeker or other entity interacting with the service
   * performed an action to apply to a job and was redirected to a different
   * website to complete the application.
   */
  APPLICATION_REDIRECT = 7,
  /**
   * APPLICATION_START_FROM_SEARCH - The job seeker or other entity interacting with the service began the
   * process or demonstrated the intention of applying for a job from the
   * search results page without viewing the details of the job posting.
   * If sending this event, JobEventType.VIEW event shouldn't be sent.
   */
  APPLICATION_START_FROM_SEARCH = 8,
  /**
   * APPLICATION_REDIRECT_FROM_SEARCH - The job seeker, or other entity interacting with the service, performs an
   * action with a single click from the search results page to apply to a job
   * (without viewing the details of the job posting), and is redirected
   * to a different website to complete the application. If a candidate
   * performs this action, send only this event to the service. Do not also
   * send
   * [JobEventType.APPLICATION_START][google.cloud.talent.v4beta1.JobEvent.JobEventType.APPLICATION_START],
   * [JobEventType.APPLICATION_FINISH][google.cloud.talent.v4beta1.JobEvent.JobEventType.APPLICATION_FINISH]
   * or
   * [JobEventType.VIEW][google.cloud.talent.v4beta1.JobEvent.JobEventType.VIEW]
   * events.
   */
  APPLICATION_REDIRECT_FROM_SEARCH = 9,
  /**
   * APPLICATION_COMPANY_SUBMIT - This event should be used when a company submits an application
   * on behalf of a job seeker. This event is intended for use by staffing
   * agencies attempting to place candidates.
   */
  APPLICATION_COMPANY_SUBMIT = 10,
  /**
   * BOOKMARK - The job seeker or other entity interacting with the service demonstrated
   * an interest in a job by bookmarking or saving it.
   */
  BOOKMARK = 11,
  /**
   * NOTIFICATION - The job seeker or other entity interacting with the service was
   * sent a notification, such as an email alert or device notification,
   * containing one or more jobs listings generated by the service.
   */
  NOTIFICATION = 12,
  /**
   * HIRED - The job seeker or other entity interacting with the service was
   * employed by the hiring entity (employer). Send this event
   * only if the job seeker was hired through an application that was
   * initiated by a search conducted through the Cloud Talent Solution
   * service.
   */
  HIRED = 13,
  /**
   * SENT_CV - A recruiter or staffing agency submitted an application on behalf of the
   * candidate after interacting with the service to identify a suitable job
   * posting.
   */
  SENT_CV = 14,
  /**
   * INTERVIEW_GRANTED - The entity interacting with the service (for example, the job seeker),
   * was granted an initial interview by the hiring entity (employer). This
   * event should only be sent if the job seeker was granted an interview as
   * part of an application that was initiated by a search conducted through /
   * recommendation provided by the Cloud Talent Solution service.
   */
  INTERVIEW_GRANTED = 15,
  UNRECOGNIZED = -1,
}

export function jobEvent_JobEventTypeFromJSON(object: any): JobEvent_JobEventType {
  switch (object) {
    case 0:
    case "JOB_EVENT_TYPE_UNSPECIFIED":
      return JobEvent_JobEventType.JOB_EVENT_TYPE_UNSPECIFIED;
    case 1:
    case "IMPRESSION":
      return JobEvent_JobEventType.IMPRESSION;
    case 2:
    case "VIEW":
      return JobEvent_JobEventType.VIEW;
    case 3:
    case "VIEW_REDIRECT":
      return JobEvent_JobEventType.VIEW_REDIRECT;
    case 4:
    case "APPLICATION_START":
      return JobEvent_JobEventType.APPLICATION_START;
    case 5:
    case "APPLICATION_FINISH":
      return JobEvent_JobEventType.APPLICATION_FINISH;
    case 6:
    case "APPLICATION_QUICK_SUBMISSION":
      return JobEvent_JobEventType.APPLICATION_QUICK_SUBMISSION;
    case 7:
    case "APPLICATION_REDIRECT":
      return JobEvent_JobEventType.APPLICATION_REDIRECT;
    case 8:
    case "APPLICATION_START_FROM_SEARCH":
      return JobEvent_JobEventType.APPLICATION_START_FROM_SEARCH;
    case 9:
    case "APPLICATION_REDIRECT_FROM_SEARCH":
      return JobEvent_JobEventType.APPLICATION_REDIRECT_FROM_SEARCH;
    case 10:
    case "APPLICATION_COMPANY_SUBMIT":
      return JobEvent_JobEventType.APPLICATION_COMPANY_SUBMIT;
    case 11:
    case "BOOKMARK":
      return JobEvent_JobEventType.BOOKMARK;
    case 12:
    case "NOTIFICATION":
      return JobEvent_JobEventType.NOTIFICATION;
    case 13:
    case "HIRED":
      return JobEvent_JobEventType.HIRED;
    case 14:
    case "SENT_CV":
      return JobEvent_JobEventType.SENT_CV;
    case 15:
    case "INTERVIEW_GRANTED":
      return JobEvent_JobEventType.INTERVIEW_GRANTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return JobEvent_JobEventType.UNRECOGNIZED;
  }
}

export function jobEvent_JobEventTypeToJSON(object: JobEvent_JobEventType): string {
  switch (object) {
    case JobEvent_JobEventType.JOB_EVENT_TYPE_UNSPECIFIED:
      return "JOB_EVENT_TYPE_UNSPECIFIED";
    case JobEvent_JobEventType.IMPRESSION:
      return "IMPRESSION";
    case JobEvent_JobEventType.VIEW:
      return "VIEW";
    case JobEvent_JobEventType.VIEW_REDIRECT:
      return "VIEW_REDIRECT";
    case JobEvent_JobEventType.APPLICATION_START:
      return "APPLICATION_START";
    case JobEvent_JobEventType.APPLICATION_FINISH:
      return "APPLICATION_FINISH";
    case JobEvent_JobEventType.APPLICATION_QUICK_SUBMISSION:
      return "APPLICATION_QUICK_SUBMISSION";
    case JobEvent_JobEventType.APPLICATION_REDIRECT:
      return "APPLICATION_REDIRECT";
    case JobEvent_JobEventType.APPLICATION_START_FROM_SEARCH:
      return "APPLICATION_START_FROM_SEARCH";
    case JobEvent_JobEventType.APPLICATION_REDIRECT_FROM_SEARCH:
      return "APPLICATION_REDIRECT_FROM_SEARCH";
    case JobEvent_JobEventType.APPLICATION_COMPANY_SUBMIT:
      return "APPLICATION_COMPANY_SUBMIT";
    case JobEvent_JobEventType.BOOKMARK:
      return "BOOKMARK";
    case JobEvent_JobEventType.NOTIFICATION:
      return "NOTIFICATION";
    case JobEvent_JobEventType.HIRED:
      return "HIRED";
    case JobEvent_JobEventType.SENT_CV:
      return "SENT_CV";
    case JobEvent_JobEventType.INTERVIEW_GRANTED:
      return "INTERVIEW_GRANTED";
    case JobEvent_JobEventType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseClientEvent(): ClientEvent {
  return { requestId: "", eventId: "", createTime: undefined, jobEvent: undefined, eventNotes: "" };
}

export const ClientEvent: MessageFns<ClientEvent> = {
  encode(message: ClientEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.eventId !== "") {
      writer.uint32(18).string(message.eventId);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    if (message.jobEvent !== undefined) {
      JobEvent.encode(message.jobEvent, writer.uint32(42).fork()).join();
    }
    if (message.eventNotes !== "") {
      writer.uint32(74).string(message.eventNotes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.jobEvent = JobEvent.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.eventNotes = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientEvent {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      jobEvent: isSet(object.jobEvent) ? JobEvent.fromJSON(object.jobEvent) : undefined,
      eventNotes: isSet(object.eventNotes) ? globalThis.String(object.eventNotes) : "",
    };
  },

  toJSON(message: ClientEvent): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.jobEvent !== undefined) {
      obj.jobEvent = JobEvent.toJSON(message.jobEvent);
    }
    if (message.eventNotes !== "") {
      obj.eventNotes = message.eventNotes;
    }
    return obj;
  },

  create(base?: DeepPartial<ClientEvent>): ClientEvent {
    return ClientEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClientEvent>): ClientEvent {
    const message = createBaseClientEvent();
    message.requestId = object.requestId ?? "";
    message.eventId = object.eventId ?? "";
    message.createTime = object.createTime ?? undefined;
    message.jobEvent = (object.jobEvent !== undefined && object.jobEvent !== null)
      ? JobEvent.fromPartial(object.jobEvent)
      : undefined;
    message.eventNotes = object.eventNotes ?? "";
    return message;
  },
};

function createBaseJobEvent(): JobEvent {
  return { type: 0, jobs: [], profile: "" };
}

export const JobEvent: MessageFns<JobEvent> = {
  encode(message: JobEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    for (const v of message.jobs) {
      writer.uint32(18).string(v!);
    }
    if (message.profile !== "") {
      writer.uint32(26).string(message.profile);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JobEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jobs.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.profile = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JobEvent {
    return {
      type: isSet(object.type) ? jobEvent_JobEventTypeFromJSON(object.type) : 0,
      jobs: globalThis.Array.isArray(object?.jobs) ? object.jobs.map((e: any) => globalThis.String(e)) : [],
      profile: isSet(object.profile) ? globalThis.String(object.profile) : "",
    };
  },

  toJSON(message: JobEvent): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = jobEvent_JobEventTypeToJSON(message.type);
    }
    if (message.jobs?.length) {
      obj.jobs = message.jobs;
    }
    if (message.profile !== "") {
      obj.profile = message.profile;
    }
    return obj;
  },

  create(base?: DeepPartial<JobEvent>): JobEvent {
    return JobEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<JobEvent>): JobEvent {
    const message = createBaseJobEvent();
    message.type = object.type ?? 0;
    message.jobs = object.jobs?.map((e) => e) || [];
    message.profile = object.profile ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
