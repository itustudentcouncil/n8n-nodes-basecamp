// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/talent/v4beta1/company_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { ResponseMetadata } from "./common.js";
import { Company } from "./company.js";

export const protobufPackage = "google.cloud.talent.v4beta1";

/** The Request of the CreateCompany method. */
export interface CreateCompanyRequest {
  /**
   * Required. Resource name of the tenant under which the company is created.
   *
   * The format is "projects/{project_id}/tenants/{tenant_id}", for example,
   * "projects/foo/tenant/bar". If tenant id is unspecified, a default tenant
   * is created, for example, "projects/foo".
   */
  parent: string;
  /** Required. The company to be created. */
  company: Company | undefined;
}

/** Request for getting a company by name. */
export interface GetCompanyRequest {
  /**
   * Required. The resource name of the company to be retrieved.
   *
   * The format is
   * "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}", for
   * example, "projects/api-test-project/tenants/foo/companies/bar".
   *
   * If tenant id is unspecified, the default tenant is used, for
   * example, "projects/api-test-project/companies/bar".
   */
  name: string;
}

/** Request for updating a specified company. */
export interface UpdateCompanyRequest {
  /**
   * Required. The company resource to replace the current resource in the
   * system.
   */
  company:
    | Company
    | undefined;
  /**
   * Strongly recommended for the best service experience.
   *
   * If
   * [update_mask][google.cloud.talent.v4beta1.UpdateCompanyRequest.update_mask]
   * is provided, only the specified fields in
   * [company][google.cloud.talent.v4beta1.UpdateCompanyRequest.company] are
   * updated. Otherwise all the fields are updated.
   *
   * A field mask to specify the company fields to be updated. Only
   * top level fields of [Company][google.cloud.talent.v4beta1.Company] are
   * supported.
   */
  updateMask: string[] | undefined;
}

/** Request to delete a company. */
export interface DeleteCompanyRequest {
  /**
   * Required. The resource name of the company to be deleted.
   *
   * The format is
   * "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}", for
   * example, "projects/foo/tenants/bar/companies/baz".
   *
   * If tenant id is unspecified, the default tenant is used, for
   * example, "projects/foo/companies/bar".
   */
  name: string;
}

/** List companies for which the client has ACL visibility. */
export interface ListCompaniesRequest {
  /**
   * Required. Resource name of the tenant under which the company is created.
   *
   * The format is "projects/{project_id}/tenants/{tenant_id}", for example,
   * "projects/foo/tenant/bar".
   *
   * If tenant id is unspecified, the default tenant will be used, for
   * example, "projects/foo".
   */
  parent: string;
  /** The starting indicator from which to return results. */
  pageToken: string;
  /**
   * The maximum number of companies to be returned, at most 100.
   * Default is 100 if a non-positive number is provided.
   */
  pageSize: number;
  /**
   * Set to true if the companies requested must have open jobs.
   *
   * Defaults to false.
   *
   * If true, at most
   * [page_size][google.cloud.talent.v4beta1.ListCompaniesRequest.page_size] of
   * companies are fetched, among which only those with open jobs are returned.
   */
  requireOpenJobs: boolean;
}

/** The List companies response object. */
export interface ListCompaniesResponse {
  /** Companies for the current client. */
  companies: Company[];
  /** A token to retrieve the next page of results. */
  nextPageToken: string;
  /**
   * Additional information for the API invocation, such as the request
   * tracking id.
   */
  metadata: ResponseMetadata | undefined;
}

function createBaseCreateCompanyRequest(): CreateCompanyRequest {
  return { parent: "", company: undefined };
}

export const CreateCompanyRequest: MessageFns<CreateCompanyRequest> = {
  encode(message: CreateCompanyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.company !== undefined) {
      Company.encode(message.company, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCompanyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCompanyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.company = Company.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCompanyRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      company: isSet(object.company) ? Company.fromJSON(object.company) : undefined,
    };
  },

  toJSON(message: CreateCompanyRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.company !== undefined) {
      obj.company = Company.toJSON(message.company);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCompanyRequest>): CreateCompanyRequest {
    return CreateCompanyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCompanyRequest>): CreateCompanyRequest {
    const message = createBaseCreateCompanyRequest();
    message.parent = object.parent ?? "";
    message.company = (object.company !== undefined && object.company !== null)
      ? Company.fromPartial(object.company)
      : undefined;
    return message;
  },
};

function createBaseGetCompanyRequest(): GetCompanyRequest {
  return { name: "" };
}

export const GetCompanyRequest: MessageFns<GetCompanyRequest> = {
  encode(message: GetCompanyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCompanyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCompanyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCompanyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCompanyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCompanyRequest>): GetCompanyRequest {
    return GetCompanyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCompanyRequest>): GetCompanyRequest {
    const message = createBaseGetCompanyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateCompanyRequest(): UpdateCompanyRequest {
  return { company: undefined, updateMask: undefined };
}

export const UpdateCompanyRequest: MessageFns<UpdateCompanyRequest> = {
  encode(message: UpdateCompanyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.company !== undefined) {
      Company.encode(message.company, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCompanyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCompanyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.company = Company.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCompanyRequest {
    return {
      company: isSet(object.company) ? Company.fromJSON(object.company) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateCompanyRequest): unknown {
    const obj: any = {};
    if (message.company !== undefined) {
      obj.company = Company.toJSON(message.company);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCompanyRequest>): UpdateCompanyRequest {
    return UpdateCompanyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCompanyRequest>): UpdateCompanyRequest {
    const message = createBaseUpdateCompanyRequest();
    message.company = (object.company !== undefined && object.company !== null)
      ? Company.fromPartial(object.company)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteCompanyRequest(): DeleteCompanyRequest {
  return { name: "" };
}

export const DeleteCompanyRequest: MessageFns<DeleteCompanyRequest> = {
  encode(message: DeleteCompanyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCompanyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCompanyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCompanyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteCompanyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteCompanyRequest>): DeleteCompanyRequest {
    return DeleteCompanyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCompanyRequest>): DeleteCompanyRequest {
    const message = createBaseDeleteCompanyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListCompaniesRequest(): ListCompaniesRequest {
  return { parent: "", pageToken: "", pageSize: 0, requireOpenJobs: false };
}

export const ListCompaniesRequest: MessageFns<ListCompaniesRequest> = {
  encode(message: ListCompaniesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.requireOpenJobs !== false) {
      writer.uint32(32).bool(message.requireOpenJobs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCompaniesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCompaniesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.requireOpenJobs = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCompaniesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      requireOpenJobs: isSet(object.requireOpenJobs) ? globalThis.Boolean(object.requireOpenJobs) : false,
    };
  },

  toJSON(message: ListCompaniesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.requireOpenJobs !== false) {
      obj.requireOpenJobs = message.requireOpenJobs;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCompaniesRequest>): ListCompaniesRequest {
    return ListCompaniesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCompaniesRequest>): ListCompaniesRequest {
    const message = createBaseListCompaniesRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.requireOpenJobs = object.requireOpenJobs ?? false;
    return message;
  },
};

function createBaseListCompaniesResponse(): ListCompaniesResponse {
  return { companies: [], nextPageToken: "", metadata: undefined };
}

export const ListCompaniesResponse: MessageFns<ListCompaniesResponse> = {
  encode(message: ListCompaniesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.companies) {
      Company.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.metadata !== undefined) {
      ResponseMetadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCompaniesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCompaniesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.companies.push(Company.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadata = ResponseMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCompaniesResponse {
    return {
      companies: globalThis.Array.isArray(object?.companies)
        ? object.companies.map((e: any) => Company.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      metadata: isSet(object.metadata) ? ResponseMetadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: ListCompaniesResponse): unknown {
    const obj: any = {};
    if (message.companies?.length) {
      obj.companies = message.companies.map((e) => Company.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.metadata !== undefined) {
      obj.metadata = ResponseMetadata.toJSON(message.metadata);
    }
    return obj;
  },

  create(base?: DeepPartial<ListCompaniesResponse>): ListCompaniesResponse {
    return ListCompaniesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCompaniesResponse>): ListCompaniesResponse {
    const message = createBaseListCompaniesResponse();
    message.companies = object.companies?.map((e) => Company.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? ResponseMetadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

/** A service that handles company management, including CRUD and enumeration. */
export type CompanyServiceDefinition = typeof CompanyServiceDefinition;
export const CompanyServiceDefinition = {
  name: "CompanyService",
  fullName: "google.cloud.talent.v4beta1.CompanyService",
  methods: {
    /** Creates a new company entity. */
    createCompany: {
      name: "CreateCompany",
      requestType: CreateCompanyRequest,
      requestStream: false,
      responseType: Company,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 99, 111, 109, 112, 97, 110, 121])],
          578365826: [
            Buffer.from([
              98,
              58,
              1,
              42,
              90,
              43,
              58,
              1,
              42,
              34,
              38,
              47,
              118,
              52,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              109,
              112,
              97,
              110,
              105,
              101,
              115,
              34,
              48,
              47,
              118,
              52,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              109,
              112,
              97,
              110,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves specified company. */
    getCompany: {
      name: "GetCompany",
      requestType: GetCompanyRequest,
      requestStream: false,
      responseType: Company,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              92,
              90,
              40,
              18,
              38,
              47,
              118,
              52,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              97,
              110,
              105,
              101,
              115,
              47,
              42,
              125,
              18,
              48,
              47,
              118,
              52,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              97,
              110,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates specified company. */
    updateCompany: {
      name: "UpdateCompany",
      requestType: UpdateCompanyRequest,
      requestStream: false,
      responseType: Company,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([7, 99, 111, 109, 112, 97, 110, 121])],
          578365826: [
            Buffer.from([
              114,
              58,
              1,
              42,
              90,
              51,
              58,
              1,
              42,
              50,
              46,
              47,
              118,
              52,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              97,
              110,
              105,
              101,
              115,
              47,
              42,
              125,
              50,
              56,
              47,
              118,
              52,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              97,
              110,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes specified company.
     * Prerequisite: The company has no jobs associated with it.
     */
    deleteCompany: {
      name: "DeleteCompany",
      requestType: DeleteCompanyRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              92,
              90,
              40,
              42,
              38,
              47,
              118,
              52,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              97,
              110,
              105,
              101,
              115,
              47,
              42,
              125,
              42,
              48,
              47,
              118,
              52,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              97,
              110,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all companies associated with the project. */
    listCompanies: {
      name: "ListCompanies",
      requestType: ListCompaniesRequest,
      requestStream: false,
      responseType: ListCompaniesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              92,
              90,
              40,
              18,
              38,
              47,
              118,
              52,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              109,
              112,
              97,
              110,
              105,
              101,
              115,
              18,
              48,
              47,
              118,
              52,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              109,
              112,
              97,
              110,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CompanyServiceImplementation<CallContextExt = {}> {
  /** Creates a new company entity. */
  createCompany(request: CreateCompanyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Company>>;
  /** Retrieves specified company. */
  getCompany(request: GetCompanyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Company>>;
  /** Updates specified company. */
  updateCompany(request: UpdateCompanyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Company>>;
  /**
   * Deletes specified company.
   * Prerequisite: The company has no jobs associated with it.
   */
  deleteCompany(request: DeleteCompanyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Lists all companies associated with the project. */
  listCompanies(
    request: ListCompaniesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCompaniesResponse>>;
}

export interface CompanyServiceClient<CallOptionsExt = {}> {
  /** Creates a new company entity. */
  createCompany(request: DeepPartial<CreateCompanyRequest>, options?: CallOptions & CallOptionsExt): Promise<Company>;
  /** Retrieves specified company. */
  getCompany(request: DeepPartial<GetCompanyRequest>, options?: CallOptions & CallOptionsExt): Promise<Company>;
  /** Updates specified company. */
  updateCompany(request: DeepPartial<UpdateCompanyRequest>, options?: CallOptions & CallOptionsExt): Promise<Company>;
  /**
   * Deletes specified company.
   * Prerequisite: The company has no jobs associated with it.
   */
  deleteCompany(request: DeepPartial<DeleteCompanyRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Lists all companies associated with the project. */
  listCompanies(
    request: DeepPartial<ListCompaniesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCompaniesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
