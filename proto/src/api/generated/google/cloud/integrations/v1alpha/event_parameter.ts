// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/integrations/v1alpha/event_parameter.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ValueType } from "./value_type.js";

export const protobufPackage = "google.cloud.integrations.v1alpha";

/**
 * This message is used for processing and persisting (when applicable) key
 * value pair parameters for each event in the event bus.
 * Next available id: 4
 */
export interface EventParameter {
  /**
   * Key is used to retrieve the corresponding parameter value. This should be
   * unique for a given fired event. These parameters must be predefined in the
   * integration definition.
   */
  key: string;
  /**
   * Values for the defined keys. Each value can either be string, int, double
   * or any proto message.
   */
  value:
    | ValueType
    | undefined;
  /** True if this parameter should be masked in the logs */
  masked: boolean;
}

function createBaseEventParameter(): EventParameter {
  return { key: "", value: undefined, masked: false };
}

export const EventParameter: MessageFns<EventParameter> = {
  encode(message: EventParameter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ValueType.encode(message.value, writer.uint32(18).fork()).join();
    }
    if (message.masked !== false) {
      writer.uint32(24).bool(message.masked);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventParameter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventParameter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = ValueType.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.masked = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventParameter {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ValueType.fromJSON(object.value) : undefined,
      masked: isSet(object.masked) ? globalThis.Boolean(object.masked) : false,
    };
  },

  toJSON(message: EventParameter): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ValueType.toJSON(message.value);
    }
    if (message.masked !== false) {
      obj.masked = message.masked;
    }
    return obj;
  },

  create(base?: DeepPartial<EventParameter>): EventParameter {
    return EventParameter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventParameter>): EventParameter {
    const message = createBaseEventParameter();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ValueType.fromPartial(object.value)
      : undefined;
    message.masked = object.masked ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
