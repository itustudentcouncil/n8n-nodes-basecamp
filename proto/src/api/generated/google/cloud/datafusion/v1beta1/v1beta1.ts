// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/datafusion/v1beta1/v1beta1.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Policy } from "../../../iam/v1/policy.js";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";

export const protobufPackage = "google.cloud.datafusion.v1beta1";

/** A view for Namespace */
export enum NamespaceView {
  /** NAMESPACE_VIEW_UNSPECIFIED - Default/unset value, which will use BASIC view. */
  NAMESPACE_VIEW_UNSPECIFIED = 0,
  /** NAMESPACE_VIEW_BASIC - Show the most basic metadata of a namespace */
  NAMESPACE_VIEW_BASIC = 1,
  /** NAMESPACE_VIEW_FULL - Returns all metadata of a namespace */
  NAMESPACE_VIEW_FULL = 2,
  UNRECOGNIZED = -1,
}

export function namespaceViewFromJSON(object: any): NamespaceView {
  switch (object) {
    case 0:
    case "NAMESPACE_VIEW_UNSPECIFIED":
      return NamespaceView.NAMESPACE_VIEW_UNSPECIFIED;
    case 1:
    case "NAMESPACE_VIEW_BASIC":
      return NamespaceView.NAMESPACE_VIEW_BASIC;
    case 2:
    case "NAMESPACE_VIEW_FULL":
      return NamespaceView.NAMESPACE_VIEW_FULL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NamespaceView.UNRECOGNIZED;
  }
}

export function namespaceViewToJSON(object: NamespaceView): string {
  switch (object) {
    case NamespaceView.NAMESPACE_VIEW_UNSPECIFIED:
      return "NAMESPACE_VIEW_UNSPECIFIED";
    case NamespaceView.NAMESPACE_VIEW_BASIC:
      return "NAMESPACE_VIEW_BASIC";
    case NamespaceView.NAMESPACE_VIEW_FULL:
      return "NAMESPACE_VIEW_FULL";
    case NamespaceView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Network configuration for a Data Fusion instance. These configurations
 * are used for peering with the customer network. Configurations are optional
 * when a public Data Fusion instance is to be created. However, providing
 * these configurations allows several benefits, such as reduced network latency
 * while accessing the customer resources from managed Data Fusion instance
 * nodes, as well as access to the customer on-prem resources.
 */
export interface NetworkConfig {
  /**
   * Name of the network in the customer project with which the Tenant Project
   * will be peered for executing pipelines. In case of shared VPC where the
   * network resides in another host project the network should specified in
   * the form of projects/{host-project-id}/global/networks/{network}
   */
  network: string;
  /**
   * The IP range in CIDR notation to use for the managed Data Fusion instance
   * nodes. This range must not overlap with any other ranges used in the Data
   * Fusion instance network.
   */
  ipAllocation: string;
}

/** The Data Fusion version. */
export interface Version {
  /** The version number of the Data Fusion instance, such as '6.0.1.0'. */
  versionNumber: string;
  /** Whether this is currently the default version for Cloud Data Fusion */
  defaultVersion: boolean;
  /** Represents a list of available feature names for a given version. */
  availableFeatures: string[];
  /** Type represents the release availability of the version */
  type: Version_Type;
}

/** Each type represents the release availability of a CDF version */
export enum Version_Type {
  /** TYPE_UNSPECIFIED - Version does not have availability yet */
  TYPE_UNSPECIFIED = 0,
  /** TYPE_PREVIEW - Version is under development and not considered stable */
  TYPE_PREVIEW = 1,
  /** TYPE_GENERAL_AVAILABILITY - Version is available for public use */
  TYPE_GENERAL_AVAILABILITY = 2,
  UNRECOGNIZED = -1,
}

export function version_TypeFromJSON(object: any): Version_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Version_Type.TYPE_UNSPECIFIED;
    case 1:
    case "TYPE_PREVIEW":
      return Version_Type.TYPE_PREVIEW;
    case 2:
    case "TYPE_GENERAL_AVAILABILITY":
      return Version_Type.TYPE_GENERAL_AVAILABILITY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Version_Type.UNRECOGNIZED;
  }
}

export function version_TypeToJSON(object: Version_Type): string {
  switch (object) {
    case Version_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Version_Type.TYPE_PREVIEW:
      return "TYPE_PREVIEW";
    case Version_Type.TYPE_GENERAL_AVAILABILITY:
      return "TYPE_GENERAL_AVAILABILITY";
    case Version_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Identifies Data Fusion accelerators for an instance. */
export interface Accelerator {
  /** The type of an accelator for a CDF instance. */
  acceleratorType: Accelerator_AcceleratorType;
}

/**
 * Each type represents an Accelerator (Add-On) supported by Cloud Data Fusion
 * service.
 */
export enum Accelerator_AcceleratorType {
  /** ACCELERATOR_TYPE_UNSPECIFIED - Default value, if unspecified. */
  ACCELERATOR_TYPE_UNSPECIFIED = 0,
  /** CDC - Change Data Capture accelerator for CDF. */
  CDC = 1,
  /**
   * HEALTHCARE - Cloud Healthcare accelerator for CDF. This accelerator is to enable Cloud
   * Healthcare specific CDF plugins developed by Healthcare team.
   */
  HEALTHCARE = 2,
  UNRECOGNIZED = -1,
}

export function accelerator_AcceleratorTypeFromJSON(object: any): Accelerator_AcceleratorType {
  switch (object) {
    case 0:
    case "ACCELERATOR_TYPE_UNSPECIFIED":
      return Accelerator_AcceleratorType.ACCELERATOR_TYPE_UNSPECIFIED;
    case 1:
    case "CDC":
      return Accelerator_AcceleratorType.CDC;
    case 2:
    case "HEALTHCARE":
      return Accelerator_AcceleratorType.HEALTHCARE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Accelerator_AcceleratorType.UNRECOGNIZED;
  }
}

export function accelerator_AcceleratorTypeToJSON(object: Accelerator_AcceleratorType): string {
  switch (object) {
    case Accelerator_AcceleratorType.ACCELERATOR_TYPE_UNSPECIFIED:
      return "ACCELERATOR_TYPE_UNSPECIFIED";
    case Accelerator_AcceleratorType.CDC:
      return "CDC";
    case Accelerator_AcceleratorType.HEALTHCARE:
      return "HEALTHCARE";
    case Accelerator_AcceleratorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The crypto key configuration. This field is used by the Customer-managed
 * encryption keys (CMEK) feature.
 */
export interface CryptoKeyConfig {
  /**
   * The name of the key which is used to encrypt/decrypt customer data. For key
   * in Cloud KMS, the key should be in the format of
   * `projects/* /locations/* /keyRings/* /cryptoKeys/*`.
   */
  keyReference: string;
}

/** Represents a Data Fusion instance. */
export interface Instance {
  /**
   * Output only. The name of this instance is in the form of
   * projects/{project}/locations/{location}/instances/{instance}.
   */
  name: string;
  /** A description of this instance. */
  description: string;
  /** Required. Instance type. */
  type: Instance_Type;
  /** Option to enable Stackdriver Logging. */
  enableStackdriverLogging: boolean;
  /** Option to enable Stackdriver Monitoring. */
  enableStackdriverMonitoring: boolean;
  /**
   * Specifies whether the Data Fusion instance should be private. If set to
   * true, all Data Fusion nodes will have private IP addresses and will not be
   * able to access the public internet.
   */
  privateInstance: boolean;
  /**
   * Network configuration options. These are required when a private Data
   * Fusion instance is to be created.
   */
  networkConfig:
    | NetworkConfig
    | undefined;
  /**
   * The resource labels for instance to use to annotate any related underlying
   * resources such as Compute Engine VMs. The character '=' is not allowed to
   * be used within the labels.
   */
  labels: { [key: string]: string };
  /**
   * Map of additional options used to configure the behavior of
   * Data Fusion instance.
   */
  options: { [key: string]: string };
  /** Output only. The time the instance was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the instance was last updated. */
  updateTime:
    | Date
    | undefined;
  /** Output only. The current state of this Data Fusion instance. */
  state: Instance_State;
  /**
   * Output only. Additional information about the current state of this Data
   * Fusion instance if available.
   */
  stateMessage: string;
  /** Output only. Endpoint on which the Data Fusion UI is accessible. */
  serviceEndpoint: string;
  /**
   * Name of the zone in which the Data Fusion instance will be created. Only
   * DEVELOPER instances use this field.
   */
  zone: string;
  /** Current version of Data Fusion. */
  version: string;
  /**
   * Output only. Deprecated. Use tenant_project_id instead to extract the tenant project ID.
   *
   * @deprecated
   */
  serviceAccount: string;
  /** Display name for an instance. */
  displayName: string;
  /**
   * Available versions that the instance can be upgraded to using
   * UpdateInstanceRequest.
   */
  availableVersion: Version[];
  /** Output only. Endpoint on which the REST APIs is accessible. */
  apiEndpoint: string;
  /** Output only. Cloud Storage bucket generated by Data Fusion in the customer project. */
  gcsBucket: string;
  /** List of accelerators enabled for this CDF instance. */
  accelerators: Accelerator[];
  /** Output only. P4 service account for the customer project. */
  p4ServiceAccount: string;
  /** Output only. The name of the tenant project. */
  tenantProjectId: string;
  /**
   * User-managed service account to set on Dataproc when Cloud Data Fusion
   * creates Dataproc to run data processing pipelines.
   *
   * This allows users to have fine-grained access control on Dataproc's
   * accesses to cloud resources.
   */
  dataprocServiceAccount: string;
  /** Option to enable granular role-based access control. */
  enableRbac: boolean;
  /**
   * The crypto key configuration. This field is used by the Customer-Managed
   * Encryption Keys (CMEK) feature.
   */
  cryptoKeyConfig:
    | CryptoKeyConfig
    | undefined;
  /** Output only. If the instance state is DISABLED, the reason for disabling the instance. */
  disabledReason: Instance_DisabledReason[];
}

/**
 * Represents the type of Data Fusion instance. Each type is configured with
 * the default settings for processing and memory.
 */
export enum Instance_Type {
  /** TYPE_UNSPECIFIED - No type specified. The instance creation will fail. */
  TYPE_UNSPECIFIED = 0,
  /**
   * BASIC - Basic Data Fusion instance. In Basic type, the user will be able to
   * create data pipelines using point and click UI. However, there are
   * certain limitations, such as fewer number of concurrent pipelines, no
   * support for streaming pipelines, etc.
   */
  BASIC = 1,
  /**
   * ENTERPRISE - Enterprise Data Fusion instance. In Enterprise type, the user will have
   * all features available, such as support for streaming pipelines,
   * unlimited number of concurrent pipelines, etc.
   */
  ENTERPRISE = 2,
  /**
   * DEVELOPER - Developer Data Fusion instance. In Developer type, the user will have all
   * features available but with restrictive capabilities. This is to help
   * enterprises design and develop their data ingestion and integration
   * pipelines at low cost.
   */
  DEVELOPER = 3,
  UNRECOGNIZED = -1,
}

export function instance_TypeFromJSON(object: any): Instance_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Instance_Type.TYPE_UNSPECIFIED;
    case 1:
    case "BASIC":
      return Instance_Type.BASIC;
    case 2:
    case "ENTERPRISE":
      return Instance_Type.ENTERPRISE;
    case 3:
    case "DEVELOPER":
      return Instance_Type.DEVELOPER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Instance_Type.UNRECOGNIZED;
  }
}

export function instance_TypeToJSON(object: Instance_Type): string {
  switch (object) {
    case Instance_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Instance_Type.BASIC:
      return "BASIC";
    case Instance_Type.ENTERPRISE:
      return "ENTERPRISE";
    case Instance_Type.DEVELOPER:
      return "DEVELOPER";
    case Instance_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents the state of a Data Fusion instance */
export enum Instance_State {
  /** STATE_UNSPECIFIED - Instance does not have a state yet */
  STATE_UNSPECIFIED = 0,
  /** CREATING - Instance is being created */
  CREATING = 1,
  /** RUNNING - Instance is running and ready for requests */
  RUNNING = 2,
  /** FAILED - Instance creation failed */
  FAILED = 3,
  /** DELETING - Instance is being deleted */
  DELETING = 4,
  /** UPGRADING - Instance is being upgraded */
  UPGRADING = 5,
  /** RESTARTING - Instance is being restarted */
  RESTARTING = 6,
  /** UPDATING - Instance is being updated on customer request */
  UPDATING = 7,
  /** AUTO_UPDATING - Instance is being auto-updated */
  AUTO_UPDATING = 8,
  /** AUTO_UPGRADING - Instance is being auto-upgraded */
  AUTO_UPGRADING = 9,
  /** DISABLED - Instance is disabled */
  DISABLED = 10,
  UNRECOGNIZED = -1,
}

export function instance_StateFromJSON(object: any): Instance_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Instance_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Instance_State.CREATING;
    case 2:
    case "RUNNING":
      return Instance_State.RUNNING;
    case 3:
    case "FAILED":
      return Instance_State.FAILED;
    case 4:
    case "DELETING":
      return Instance_State.DELETING;
    case 5:
    case "UPGRADING":
      return Instance_State.UPGRADING;
    case 6:
    case "RESTARTING":
      return Instance_State.RESTARTING;
    case 7:
    case "UPDATING":
      return Instance_State.UPDATING;
    case 8:
    case "AUTO_UPDATING":
      return Instance_State.AUTO_UPDATING;
    case 9:
    case "AUTO_UPGRADING":
      return Instance_State.AUTO_UPGRADING;
    case 10:
    case "DISABLED":
      return Instance_State.DISABLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Instance_State.UNRECOGNIZED;
  }
}

export function instance_StateToJSON(object: Instance_State): string {
  switch (object) {
    case Instance_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Instance_State.CREATING:
      return "CREATING";
    case Instance_State.RUNNING:
      return "RUNNING";
    case Instance_State.FAILED:
      return "FAILED";
    case Instance_State.DELETING:
      return "DELETING";
    case Instance_State.UPGRADING:
      return "UPGRADING";
    case Instance_State.RESTARTING:
      return "RESTARTING";
    case Instance_State.UPDATING:
      return "UPDATING";
    case Instance_State.AUTO_UPDATING:
      return "AUTO_UPDATING";
    case Instance_State.AUTO_UPGRADING:
      return "AUTO_UPGRADING";
    case Instance_State.DISABLED:
      return "DISABLED";
    case Instance_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The reason for disabling the instance if the state is DISABLED. */
export enum Instance_DisabledReason {
  /** DISABLED_REASON_UNSPECIFIED - This is an unknown reason for disabling. */
  DISABLED_REASON_UNSPECIFIED = 0,
  /** KMS_KEY_ISSUE - The KMS key used by the instance is either revoked or denied access to */
  KMS_KEY_ISSUE = 1,
  UNRECOGNIZED = -1,
}

export function instance_DisabledReasonFromJSON(object: any): Instance_DisabledReason {
  switch (object) {
    case 0:
    case "DISABLED_REASON_UNSPECIFIED":
      return Instance_DisabledReason.DISABLED_REASON_UNSPECIFIED;
    case 1:
    case "KMS_KEY_ISSUE":
      return Instance_DisabledReason.KMS_KEY_ISSUE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Instance_DisabledReason.UNRECOGNIZED;
  }
}

export function instance_DisabledReasonToJSON(object: Instance_DisabledReason): string {
  switch (object) {
    case Instance_DisabledReason.DISABLED_REASON_UNSPECIFIED:
      return "DISABLED_REASON_UNSPECIFIED";
    case Instance_DisabledReason.KMS_KEY_ISSUE:
      return "KMS_KEY_ISSUE";
    case Instance_DisabledReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Instance_LabelsEntry {
  key: string;
  value: string;
}

export interface Instance_OptionsEntry {
  key: string;
  value: string;
}

/** Request message for listing Data Fusion instances. */
export interface ListInstancesRequest {
  /**
   * Required. The project and location for which to retrieve instance information
   * in the format projects/{project}/locations/{location}. If the location is
   * specified as '-' (wildcard), then all regions available to the project
   * are queried, and the results are aggregated.
   */
  parent: string;
  /** The maximum number of items to return. */
  pageSize: number;
  /**
   * The next_page_token value to use if there are additional
   * results to retrieve for this list request.
   */
  pageToken: string;
  /** List filter. */
  filter: string;
  /** Sort results. Supported values are "name", "name desc",  or "" (unsorted). */
  orderBy: string;
}

/** Response message for the list instance request. */
export interface ListInstancesResponse {
  /** Represents a list of Data Fusion instances. */
  instances: Instance[];
  /**
   * Token to retrieve the next page of results or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message for the list available versions request. */
export interface ListAvailableVersionsRequest {
  /**
   * Required. The project and location for which to retrieve instance information
   * in the format projects/{project}/locations/{location}.
   */
  parent: string;
  /** The maximum number of items to return. */
  pageSize: number;
  /**
   * The next_page_token value to use if there are additional
   * results to retrieve for this list request.
   */
  pageToken: string;
  /**
   * Whether or not to return the latest patch of every available minor version.
   * If true, only the latest patch will be returned. Ex. if allowed versions is
   * [6.1.1, 6.1.2, 6.2.0] then response will be [6.1.2, 6.2.0]
   */
  latestPatchOnly: boolean;
}

/** Response message for the list available versions request. */
export interface ListAvailableVersionsResponse {
  /** Represents a list of versions that are supported. */
  availableVersions: Version[];
  /**
   * Token to retrieve the next page of results or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/** Request message for getting details about a Data Fusion instance. */
export interface GetInstanceRequest {
  /**
   * Required. The instance resource name in the format
   * projects/{project}/locations/{location}/instances/{instance}.
   */
  name: string;
}

/** Request message for creating a Data Fusion instance. */
export interface CreateInstanceRequest {
  /**
   * Required. The instance's project and location in the format
   * projects/{project}/locations/{location}.
   */
  parent: string;
  /** Required. The name of the instance to create. */
  instanceId: string;
  /** An instance resource. */
  instance: Instance | undefined;
}

/** Request message for deleting a Data Fusion instance. */
export interface DeleteInstanceRequest {
  /**
   * Required. The instance resource name in the format
   * projects/{project}/locations/{location}/instances/{instance}
   */
  name: string;
}

/**
 * Request message for updating a Data Fusion instance.
 * Data Fusion only allows updating the labels, options, and stack driver
 * settings.
 */
export interface UpdateInstanceRequest {
  /**
   * Required. The instance resource that replaces the resource on the server. Currently,
   * Data Fusion only allows replacing labels, options, and stack driver
   * settings. All other fields will be ignored.
   */
  instance:
    | Instance
    | undefined;
  /**
   * Field mask is used to specify the fields that the update will overwrite
   * in an instance resource. The fields specified in the update_mask are
   * relative to the resource, not the full request.
   * A field will be overwritten if it is in the mask.
   * If the user does not provide a mask, all the supported fields (labels and
   * options currently) will be overwritten.
   */
  updateMask: string[] | undefined;
}

/** Request message for restarting a Data Fusion instance. */
export interface RestartInstanceRequest {
  /**
   * Required. Name of the Data Fusion instance which need to be restarted in the form of
   * projects/{project}/locations/{location}/instances/{instance}
   */
  name: string;
}

/**
 * Request message for upgrading a Data Fusion instance.
 * To change the instance properties, instance update should be used.
 */
export interface UpgradeInstanceRequest {
  /**
   * Required. Name of the Data Fusion instance which need to be upgraded in the form of
   * projects/{project}/locations/{location}/instances/{instance}
   * Instance will be upgraded with the latest stable version of the Data
   * Fusion.
   */
  name: string;
}

/** Represents the metadata of a long-running operation. */
export interface OperationMetadata {
  /** The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Server-defined resource path for the target of the operation. */
  target: string;
  /** Name of the verb executed by the operation. */
  verb: string;
  /** Human-readable status of the operation if any. */
  statusDetail: string;
  /**
   * Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
   * corresponding to `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** API version used to start the operation. */
  apiVersion: string;
}

/** Request message for RemoveIamPolicy method. */
export interface RemoveIamPolicyRequest {
  /** Required. The resource on which IAM policy to be removed is attached to. */
  resource: string;
}

/** Response message for RemoveIamPolicy method. */
export interface RemoveIamPolicyResponse {
}

/** List namespaces request. */
export interface ListNamespacesRequest {
  /** Required. The instance to list its namespaces. */
  parent: string;
  /** The maximum number of items to return. */
  pageSize: number;
  /**
   * The next_page_token value to use if there are additional
   * results to retrieve for this list request.
   */
  pageToken: string;
  /**
   * By default, only basic information about a namespace is returned
   * (e.g. name). When `NAMESPACE_VIEW_FULL` is specified, additional
   * information associated with a namespace gets returned
   * (e.g. IAM policy set on the namespace)
   */
  view: NamespaceView;
}

/**
 * IAMPolicy encapsulates the IAM policy name, definition and status of
 * policy fetching.
 */
export interface IAMPolicy {
  /**
   * Policy definition if IAM policy fetching is successful,
   * otherwise empty.
   */
  policy:
    | Policy
    | undefined;
  /** Status of iam policy fetching. */
  status: Status | undefined;
}

/** Represents the information of a namespace */
export interface Namespace {
  /** Name of the given namespace. */
  name: string;
  /** IAM policy associated with this namespace. */
  iamPolicy: IAMPolicy | undefined;
}

/** List namespaces response. */
export interface ListNamespacesResponse {
  /** List of namespaces */
  namespaces: Namespace[];
  /**
   * Token to retrieve the next page of results or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/**
 * DNS peering configuration. These configurations are used to create
 * DNS peering with the customer Cloud DNS.
 */
export interface DnsPeering {
  /** Required. Name of the zone. */
  zone: string;
  /** Required. Name of the dns. */
  domain: string;
  /** Optional. Optional description of the dns zone. */
  description: string;
  /** Optional. Optional target project to which dns peering should happen. */
  targetProject: string;
  /** Optional. Optional target network to which dns peering should happen. */
  targetNetwork: string;
}

/** Request message to create dns peering. */
export interface AddDnsPeeringRequest {
  /** Required. The resource on which DNS peering will be created. */
  parent: string;
  /** Dns peering config. */
  dnsPeering: DnsPeering | undefined;
}

/** Response message for set dns peering method. */
export interface AddDnsPeeringResponse {
}

/** Request message to remove dns peering. */
export interface RemoveDnsPeeringRequest {
  /** Required. The resource on which DNS peering will be removed. */
  parent: string;
  /** Required. The zone to be removed. */
  zone: string;
}

/** Response message for set dns peering method. */
export interface RemoveDnsPeeringResponse {
}

/** List dns peering request. */
export interface ListDnsPeeringsRequest {
  /** Required. The resource on which dns peering will be listed. */
  parent: string;
  /** The maximum number of items to return. */
  pageSize: number;
  /**
   * The next_page_token value to use if there are additional
   * results to retrieve for this list request.
   */
  pageToken: string;
}

/** List dns peering response. */
export interface ListDnsPeeringsResponse {
  /** List of dns peering configs. */
  dnsPeerings: DnsPeering[];
  /**
   * Token to retrieve the next page of results or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

function createBaseNetworkConfig(): NetworkConfig {
  return { network: "", ipAllocation: "" };
}

export const NetworkConfig: MessageFns<NetworkConfig> = {
  encode(message: NetworkConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.network !== "") {
      writer.uint32(10).string(message.network);
    }
    if (message.ipAllocation !== "") {
      writer.uint32(18).string(message.ipAllocation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NetworkConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.network = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ipAllocation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkConfig {
    return {
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      ipAllocation: isSet(object.ipAllocation) ? globalThis.String(object.ipAllocation) : "",
    };
  },

  toJSON(message: NetworkConfig): unknown {
    const obj: any = {};
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.ipAllocation !== "") {
      obj.ipAllocation = message.ipAllocation;
    }
    return obj;
  },

  create(base?: DeepPartial<NetworkConfig>): NetworkConfig {
    return NetworkConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NetworkConfig>): NetworkConfig {
    const message = createBaseNetworkConfig();
    message.network = object.network ?? "";
    message.ipAllocation = object.ipAllocation ?? "";
    return message;
  },
};

function createBaseVersion(): Version {
  return { versionNumber: "", defaultVersion: false, availableFeatures: [], type: 0 };
}

export const Version: MessageFns<Version> = {
  encode(message: Version, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.versionNumber !== "") {
      writer.uint32(10).string(message.versionNumber);
    }
    if (message.defaultVersion !== false) {
      writer.uint32(16).bool(message.defaultVersion);
    }
    for (const v of message.availableFeatures) {
      writer.uint32(26).string(v!);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Version {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.versionNumber = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.defaultVersion = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.availableFeatures.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Version {
    return {
      versionNumber: isSet(object.versionNumber) ? globalThis.String(object.versionNumber) : "",
      defaultVersion: isSet(object.defaultVersion) ? globalThis.Boolean(object.defaultVersion) : false,
      availableFeatures: globalThis.Array.isArray(object?.availableFeatures)
        ? object.availableFeatures.map((e: any) => globalThis.String(e))
        : [],
      type: isSet(object.type) ? version_TypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: Version): unknown {
    const obj: any = {};
    if (message.versionNumber !== "") {
      obj.versionNumber = message.versionNumber;
    }
    if (message.defaultVersion !== false) {
      obj.defaultVersion = message.defaultVersion;
    }
    if (message.availableFeatures?.length) {
      obj.availableFeatures = message.availableFeatures;
    }
    if (message.type !== 0) {
      obj.type = version_TypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<Version>): Version {
    return Version.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Version>): Version {
    const message = createBaseVersion();
    message.versionNumber = object.versionNumber ?? "";
    message.defaultVersion = object.defaultVersion ?? false;
    message.availableFeatures = object.availableFeatures?.map((e) => e) || [];
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseAccelerator(): Accelerator {
  return { acceleratorType: 0 };
}

export const Accelerator: MessageFns<Accelerator> = {
  encode(message: Accelerator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.acceleratorType !== 0) {
      writer.uint32(8).int32(message.acceleratorType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Accelerator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccelerator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.acceleratorType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Accelerator {
    return {
      acceleratorType: isSet(object.acceleratorType) ? accelerator_AcceleratorTypeFromJSON(object.acceleratorType) : 0,
    };
  },

  toJSON(message: Accelerator): unknown {
    const obj: any = {};
    if (message.acceleratorType !== 0) {
      obj.acceleratorType = accelerator_AcceleratorTypeToJSON(message.acceleratorType);
    }
    return obj;
  },

  create(base?: DeepPartial<Accelerator>): Accelerator {
    return Accelerator.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Accelerator>): Accelerator {
    const message = createBaseAccelerator();
    message.acceleratorType = object.acceleratorType ?? 0;
    return message;
  },
};

function createBaseCryptoKeyConfig(): CryptoKeyConfig {
  return { keyReference: "" };
}

export const CryptoKeyConfig: MessageFns<CryptoKeyConfig> = {
  encode(message: CryptoKeyConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyReference !== "") {
      writer.uint32(10).string(message.keyReference);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CryptoKeyConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCryptoKeyConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keyReference = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CryptoKeyConfig {
    return { keyReference: isSet(object.keyReference) ? globalThis.String(object.keyReference) : "" };
  },

  toJSON(message: CryptoKeyConfig): unknown {
    const obj: any = {};
    if (message.keyReference !== "") {
      obj.keyReference = message.keyReference;
    }
    return obj;
  },

  create(base?: DeepPartial<CryptoKeyConfig>): CryptoKeyConfig {
    return CryptoKeyConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CryptoKeyConfig>): CryptoKeyConfig {
    const message = createBaseCryptoKeyConfig();
    message.keyReference = object.keyReference ?? "";
    return message;
  },
};

function createBaseInstance(): Instance {
  return {
    name: "",
    description: "",
    type: 0,
    enableStackdriverLogging: false,
    enableStackdriverMonitoring: false,
    privateInstance: false,
    networkConfig: undefined,
    labels: {},
    options: {},
    createTime: undefined,
    updateTime: undefined,
    state: 0,
    stateMessage: "",
    serviceEndpoint: "",
    zone: "",
    version: "",
    serviceAccount: "",
    displayName: "",
    availableVersion: [],
    apiEndpoint: "",
    gcsBucket: "",
    accelerators: [],
    p4ServiceAccount: "",
    tenantProjectId: "",
    dataprocServiceAccount: "",
    enableRbac: false,
    cryptoKeyConfig: undefined,
    disabledReason: [],
  };
}

export const Instance: MessageFns<Instance> = {
  encode(message: Instance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.enableStackdriverLogging !== false) {
      writer.uint32(32).bool(message.enableStackdriverLogging);
    }
    if (message.enableStackdriverMonitoring !== false) {
      writer.uint32(40).bool(message.enableStackdriverMonitoring);
    }
    if (message.privateInstance !== false) {
      writer.uint32(48).bool(message.privateInstance);
    }
    if (message.networkConfig !== undefined) {
      NetworkConfig.encode(message.networkConfig, writer.uint32(58).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Instance_LabelsEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    Object.entries(message.options).forEach(([key, value]) => {
      Instance_OptionsEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(82).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(90).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(96).int32(message.state);
    }
    if (message.stateMessage !== "") {
      writer.uint32(106).string(message.stateMessage);
    }
    if (message.serviceEndpoint !== "") {
      writer.uint32(114).string(message.serviceEndpoint);
    }
    if (message.zone !== "") {
      writer.uint32(122).string(message.zone);
    }
    if (message.version !== "") {
      writer.uint32(130).string(message.version);
    }
    if (message.serviceAccount !== "") {
      writer.uint32(138).string(message.serviceAccount);
    }
    if (message.displayName !== "") {
      writer.uint32(146).string(message.displayName);
    }
    for (const v of message.availableVersion) {
      Version.encode(v!, writer.uint32(154).fork()).join();
    }
    if (message.apiEndpoint !== "") {
      writer.uint32(162).string(message.apiEndpoint);
    }
    if (message.gcsBucket !== "") {
      writer.uint32(170).string(message.gcsBucket);
    }
    for (const v of message.accelerators) {
      Accelerator.encode(v!, writer.uint32(178).fork()).join();
    }
    if (message.p4ServiceAccount !== "") {
      writer.uint32(186).string(message.p4ServiceAccount);
    }
    if (message.tenantProjectId !== "") {
      writer.uint32(194).string(message.tenantProjectId);
    }
    if (message.dataprocServiceAccount !== "") {
      writer.uint32(202).string(message.dataprocServiceAccount);
    }
    if (message.enableRbac !== false) {
      writer.uint32(208).bool(message.enableRbac);
    }
    if (message.cryptoKeyConfig !== undefined) {
      CryptoKeyConfig.encode(message.cryptoKeyConfig, writer.uint32(218).fork()).join();
    }
    writer.uint32(226).fork();
    for (const v of message.disabledReason) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Instance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.enableStackdriverLogging = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.enableStackdriverMonitoring = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.privateInstance = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.networkConfig = NetworkConfig.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          const entry8 = Instance_LabelsEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.labels[entry8.key] = entry8.value;
          }
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          const entry9 = Instance_OptionsEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.options[entry9.key] = entry9.value;
          }
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.stateMessage = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.serviceEndpoint = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.zone = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.version = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.availableVersion.push(Version.decode(reader, reader.uint32()));
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.apiEndpoint = reader.string();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.gcsBucket = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.accelerators.push(Accelerator.decode(reader, reader.uint32()));
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.p4ServiceAccount = reader.string();
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.tenantProjectId = reader.string();
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.dataprocServiceAccount = reader.string();
          continue;
        case 26:
          if (tag !== 208) {
            break;
          }

          message.enableRbac = reader.bool();
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.cryptoKeyConfig = CryptoKeyConfig.decode(reader, reader.uint32());
          continue;
        case 28:
          if (tag === 224) {
            message.disabledReason.push(reader.int32() as any);

            continue;
          }

          if (tag === 226) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.disabledReason.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Instance {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      type: isSet(object.type) ? instance_TypeFromJSON(object.type) : 0,
      enableStackdriverLogging: isSet(object.enableStackdriverLogging)
        ? globalThis.Boolean(object.enableStackdriverLogging)
        : false,
      enableStackdriverMonitoring: isSet(object.enableStackdriverMonitoring)
        ? globalThis.Boolean(object.enableStackdriverMonitoring)
        : false,
      privateInstance: isSet(object.privateInstance) ? globalThis.Boolean(object.privateInstance) : false,
      networkConfig: isSet(object.networkConfig) ? NetworkConfig.fromJSON(object.networkConfig) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      options: isObject(object.options)
        ? Object.entries(object.options).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      state: isSet(object.state) ? instance_StateFromJSON(object.state) : 0,
      stateMessage: isSet(object.stateMessage) ? globalThis.String(object.stateMessage) : "",
      serviceEndpoint: isSet(object.serviceEndpoint) ? globalThis.String(object.serviceEndpoint) : "",
      zone: isSet(object.zone) ? globalThis.String(object.zone) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      availableVersion: globalThis.Array.isArray(object?.availableVersion)
        ? object.availableVersion.map((e: any) => Version.fromJSON(e))
        : [],
      apiEndpoint: isSet(object.apiEndpoint) ? globalThis.String(object.apiEndpoint) : "",
      gcsBucket: isSet(object.gcsBucket) ? globalThis.String(object.gcsBucket) : "",
      accelerators: globalThis.Array.isArray(object?.accelerators)
        ? object.accelerators.map((e: any) => Accelerator.fromJSON(e))
        : [],
      p4ServiceAccount: isSet(object.p4ServiceAccount) ? globalThis.String(object.p4ServiceAccount) : "",
      tenantProjectId: isSet(object.tenantProjectId) ? globalThis.String(object.tenantProjectId) : "",
      dataprocServiceAccount: isSet(object.dataprocServiceAccount)
        ? globalThis.String(object.dataprocServiceAccount)
        : "",
      enableRbac: isSet(object.enableRbac) ? globalThis.Boolean(object.enableRbac) : false,
      cryptoKeyConfig: isSet(object.cryptoKeyConfig) ? CryptoKeyConfig.fromJSON(object.cryptoKeyConfig) : undefined,
      disabledReason: globalThis.Array.isArray(object?.disabledReason)
        ? object.disabledReason.map((e: any) => instance_DisabledReasonFromJSON(e))
        : [],
    };
  },

  toJSON(message: Instance): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.type !== 0) {
      obj.type = instance_TypeToJSON(message.type);
    }
    if (message.enableStackdriverLogging !== false) {
      obj.enableStackdriverLogging = message.enableStackdriverLogging;
    }
    if (message.enableStackdriverMonitoring !== false) {
      obj.enableStackdriverMonitoring = message.enableStackdriverMonitoring;
    }
    if (message.privateInstance !== false) {
      obj.privateInstance = message.privateInstance;
    }
    if (message.networkConfig !== undefined) {
      obj.networkConfig = NetworkConfig.toJSON(message.networkConfig);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.options) {
      const entries = Object.entries(message.options);
      if (entries.length > 0) {
        obj.options = {};
        entries.forEach(([k, v]) => {
          obj.options[k] = v;
        });
      }
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = instance_StateToJSON(message.state);
    }
    if (message.stateMessage !== "") {
      obj.stateMessage = message.stateMessage;
    }
    if (message.serviceEndpoint !== "") {
      obj.serviceEndpoint = message.serviceEndpoint;
    }
    if (message.zone !== "") {
      obj.zone = message.zone;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.serviceAccount !== "") {
      obj.serviceAccount = message.serviceAccount;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.availableVersion?.length) {
      obj.availableVersion = message.availableVersion.map((e) => Version.toJSON(e));
    }
    if (message.apiEndpoint !== "") {
      obj.apiEndpoint = message.apiEndpoint;
    }
    if (message.gcsBucket !== "") {
      obj.gcsBucket = message.gcsBucket;
    }
    if (message.accelerators?.length) {
      obj.accelerators = message.accelerators.map((e) => Accelerator.toJSON(e));
    }
    if (message.p4ServiceAccount !== "") {
      obj.p4ServiceAccount = message.p4ServiceAccount;
    }
    if (message.tenantProjectId !== "") {
      obj.tenantProjectId = message.tenantProjectId;
    }
    if (message.dataprocServiceAccount !== "") {
      obj.dataprocServiceAccount = message.dataprocServiceAccount;
    }
    if (message.enableRbac !== false) {
      obj.enableRbac = message.enableRbac;
    }
    if (message.cryptoKeyConfig !== undefined) {
      obj.cryptoKeyConfig = CryptoKeyConfig.toJSON(message.cryptoKeyConfig);
    }
    if (message.disabledReason?.length) {
      obj.disabledReason = message.disabledReason.map((e) => instance_DisabledReasonToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Instance>): Instance {
    return Instance.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Instance>): Instance {
    const message = createBaseInstance();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.type = object.type ?? 0;
    message.enableStackdriverLogging = object.enableStackdriverLogging ?? false;
    message.enableStackdriverMonitoring = object.enableStackdriverMonitoring ?? false;
    message.privateInstance = object.privateInstance ?? false;
    message.networkConfig = (object.networkConfig !== undefined && object.networkConfig !== null)
      ? NetworkConfig.fromPartial(object.networkConfig)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.options = Object.entries(object.options ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.state = object.state ?? 0;
    message.stateMessage = object.stateMessage ?? "";
    message.serviceEndpoint = object.serviceEndpoint ?? "";
    message.zone = object.zone ?? "";
    message.version = object.version ?? "";
    message.serviceAccount = object.serviceAccount ?? "";
    message.displayName = object.displayName ?? "";
    message.availableVersion = object.availableVersion?.map((e) => Version.fromPartial(e)) || [];
    message.apiEndpoint = object.apiEndpoint ?? "";
    message.gcsBucket = object.gcsBucket ?? "";
    message.accelerators = object.accelerators?.map((e) => Accelerator.fromPartial(e)) || [];
    message.p4ServiceAccount = object.p4ServiceAccount ?? "";
    message.tenantProjectId = object.tenantProjectId ?? "";
    message.dataprocServiceAccount = object.dataprocServiceAccount ?? "";
    message.enableRbac = object.enableRbac ?? false;
    message.cryptoKeyConfig = (object.cryptoKeyConfig !== undefined && object.cryptoKeyConfig !== null)
      ? CryptoKeyConfig.fromPartial(object.cryptoKeyConfig)
      : undefined;
    message.disabledReason = object.disabledReason?.map((e) => e) || [];
    return message;
  },
};

function createBaseInstance_LabelsEntry(): Instance_LabelsEntry {
  return { key: "", value: "" };
}

export const Instance_LabelsEntry: MessageFns<Instance_LabelsEntry> = {
  encode(message: Instance_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Instance_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstance_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Instance_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Instance_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Instance_LabelsEntry>): Instance_LabelsEntry {
    return Instance_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Instance_LabelsEntry>): Instance_LabelsEntry {
    const message = createBaseInstance_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseInstance_OptionsEntry(): Instance_OptionsEntry {
  return { key: "", value: "" };
}

export const Instance_OptionsEntry: MessageFns<Instance_OptionsEntry> = {
  encode(message: Instance_OptionsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Instance_OptionsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstance_OptionsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Instance_OptionsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Instance_OptionsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Instance_OptionsEntry>): Instance_OptionsEntry {
    return Instance_OptionsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Instance_OptionsEntry>): Instance_OptionsEntry {
    const message = createBaseInstance_OptionsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListInstancesRequest(): ListInstancesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListInstancesRequest: MessageFns<ListInstancesRequest> = {
  encode(message: ListInstancesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInstancesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstancesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstancesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListInstancesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListInstancesRequest>): ListInstancesRequest {
    return ListInstancesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInstancesRequest>): ListInstancesRequest {
    const message = createBaseListInstancesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListInstancesResponse(): ListInstancesResponse {
  return { instances: [], nextPageToken: "", unreachable: [] };
}

export const ListInstancesResponse: MessageFns<ListInstancesResponse> = {
  encode(message: ListInstancesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.instances) {
      Instance.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInstancesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstancesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instances.push(Instance.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstancesResponse {
    return {
      instances: globalThis.Array.isArray(object?.instances)
        ? object.instances.map((e: any) => Instance.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListInstancesResponse): unknown {
    const obj: any = {};
    if (message.instances?.length) {
      obj.instances = message.instances.map((e) => Instance.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListInstancesResponse>): ListInstancesResponse {
    return ListInstancesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInstancesResponse>): ListInstancesResponse {
    const message = createBaseListInstancesResponse();
    message.instances = object.instances?.map((e) => Instance.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseListAvailableVersionsRequest(): ListAvailableVersionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", latestPatchOnly: false };
}

export const ListAvailableVersionsRequest: MessageFns<ListAvailableVersionsRequest> = {
  encode(message: ListAvailableVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.latestPatchOnly !== false) {
      writer.uint32(32).bool(message.latestPatchOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAvailableVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAvailableVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.latestPatchOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAvailableVersionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      latestPatchOnly: isSet(object.latestPatchOnly) ? globalThis.Boolean(object.latestPatchOnly) : false,
    };
  },

  toJSON(message: ListAvailableVersionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.latestPatchOnly !== false) {
      obj.latestPatchOnly = message.latestPatchOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAvailableVersionsRequest>): ListAvailableVersionsRequest {
    return ListAvailableVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAvailableVersionsRequest>): ListAvailableVersionsRequest {
    const message = createBaseListAvailableVersionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.latestPatchOnly = object.latestPatchOnly ?? false;
    return message;
  },
};

function createBaseListAvailableVersionsResponse(): ListAvailableVersionsResponse {
  return { availableVersions: [], nextPageToken: "" };
}

export const ListAvailableVersionsResponse: MessageFns<ListAvailableVersionsResponse> = {
  encode(message: ListAvailableVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.availableVersions) {
      Version.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAvailableVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAvailableVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.availableVersions.push(Version.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAvailableVersionsResponse {
    return {
      availableVersions: globalThis.Array.isArray(object?.availableVersions)
        ? object.availableVersions.map((e: any) => Version.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAvailableVersionsResponse): unknown {
    const obj: any = {};
    if (message.availableVersions?.length) {
      obj.availableVersions = message.availableVersions.map((e) => Version.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAvailableVersionsResponse>): ListAvailableVersionsResponse {
    return ListAvailableVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAvailableVersionsResponse>): ListAvailableVersionsResponse {
    const message = createBaseListAvailableVersionsResponse();
    message.availableVersions = object.availableVersions?.map((e) => Version.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetInstanceRequest(): GetInstanceRequest {
  return { name: "" };
}

export const GetInstanceRequest: MessageFns<GetInstanceRequest> = {
  encode(message: GetInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetInstanceRequest>): GetInstanceRequest {
    return GetInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetInstanceRequest>): GetInstanceRequest {
    const message = createBaseGetInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateInstanceRequest(): CreateInstanceRequest {
  return { parent: "", instanceId: "", instance: undefined };
}

export const CreateInstanceRequest: MessageFns<CreateInstanceRequest> = {
  encode(message: CreateInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.instanceId !== "") {
      writer.uint32(18).string(message.instanceId);
    }
    if (message.instance !== undefined) {
      Instance.encode(message.instance, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.instance = Instance.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateInstanceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      instance: isSet(object.instance) ? Instance.fromJSON(object.instance) : undefined,
    };
  },

  toJSON(message: CreateInstanceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.instance !== undefined) {
      obj.instance = Instance.toJSON(message.instance);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateInstanceRequest>): CreateInstanceRequest {
    return CreateInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateInstanceRequest>): CreateInstanceRequest {
    const message = createBaseCreateInstanceRequest();
    message.parent = object.parent ?? "";
    message.instanceId = object.instanceId ?? "";
    message.instance = (object.instance !== undefined && object.instance !== null)
      ? Instance.fromPartial(object.instance)
      : undefined;
    return message;
  },
};

function createBaseDeleteInstanceRequest(): DeleteInstanceRequest {
  return { name: "" };
}

export const DeleteInstanceRequest: MessageFns<DeleteInstanceRequest> = {
  encode(message: DeleteInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteInstanceRequest>): DeleteInstanceRequest {
    return DeleteInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteInstanceRequest>): DeleteInstanceRequest {
    const message = createBaseDeleteInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateInstanceRequest(): UpdateInstanceRequest {
  return { instance: undefined, updateMask: undefined };
}

export const UpdateInstanceRequest: MessageFns<UpdateInstanceRequest> = {
  encode(message: UpdateInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== undefined) {
      Instance.encode(message.instance, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = Instance.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateInstanceRequest {
    return {
      instance: isSet(object.instance) ? Instance.fromJSON(object.instance) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateInstanceRequest): unknown {
    const obj: any = {};
    if (message.instance !== undefined) {
      obj.instance = Instance.toJSON(message.instance);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateInstanceRequest>): UpdateInstanceRequest {
    return UpdateInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateInstanceRequest>): UpdateInstanceRequest {
    const message = createBaseUpdateInstanceRequest();
    message.instance = (object.instance !== undefined && object.instance !== null)
      ? Instance.fromPartial(object.instance)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseRestartInstanceRequest(): RestartInstanceRequest {
  return { name: "" };
}

export const RestartInstanceRequest: MessageFns<RestartInstanceRequest> = {
  encode(message: RestartInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestartInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestartInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestartInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: RestartInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<RestartInstanceRequest>): RestartInstanceRequest {
    return RestartInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestartInstanceRequest>): RestartInstanceRequest {
    const message = createBaseRestartInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpgradeInstanceRequest(): UpgradeInstanceRequest {
  return { name: "" };
}

export const UpgradeInstanceRequest: MessageFns<UpgradeInstanceRequest> = {
  encode(message: UpgradeInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpgradeInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpgradeInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpgradeInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: UpgradeInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<UpgradeInstanceRequest>): UpgradeInstanceRequest {
    return UpgradeInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpgradeInstanceRequest>): UpgradeInstanceRequest {
    const message = createBaseUpgradeInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusDetail: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusDetail !== "") {
      writer.uint32(42).string(message.statusDetail);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusDetail = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusDetail: isSet(object.statusDetail) ? globalThis.String(object.statusDetail) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusDetail !== "") {
      obj.statusDetail = message.statusDetail;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusDetail = object.statusDetail ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

function createBaseRemoveIamPolicyRequest(): RemoveIamPolicyRequest {
  return { resource: "" };
}

export const RemoveIamPolicyRequest: MessageFns<RemoveIamPolicyRequest> = {
  encode(message: RemoveIamPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resource !== "") {
      writer.uint32(10).string(message.resource);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveIamPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIamPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resource = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveIamPolicyRequest {
    return { resource: isSet(object.resource) ? globalThis.String(object.resource) : "" };
  },

  toJSON(message: RemoveIamPolicyRequest): unknown {
    const obj: any = {};
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveIamPolicyRequest>): RemoveIamPolicyRequest {
    return RemoveIamPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveIamPolicyRequest>): RemoveIamPolicyRequest {
    const message = createBaseRemoveIamPolicyRequest();
    message.resource = object.resource ?? "";
    return message;
  },
};

function createBaseRemoveIamPolicyResponse(): RemoveIamPolicyResponse {
  return {};
}

export const RemoveIamPolicyResponse: MessageFns<RemoveIamPolicyResponse> = {
  encode(_: RemoveIamPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveIamPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIamPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveIamPolicyResponse {
    return {};
  },

  toJSON(_: RemoveIamPolicyResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveIamPolicyResponse>): RemoveIamPolicyResponse {
    return RemoveIamPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveIamPolicyResponse>): RemoveIamPolicyResponse {
    const message = createBaseRemoveIamPolicyResponse();
    return message;
  },
};

function createBaseListNamespacesRequest(): ListNamespacesRequest {
  return { parent: "", pageSize: 0, pageToken: "", view: 0 };
}

export const ListNamespacesRequest: MessageFns<ListNamespacesRequest> = {
  encode(message: ListNamespacesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.view !== 0) {
      writer.uint32(32).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNamespacesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNamespacesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNamespacesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      view: isSet(object.view) ? namespaceViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: ListNamespacesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.view !== 0) {
      obj.view = namespaceViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<ListNamespacesRequest>): ListNamespacesRequest {
    return ListNamespacesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNamespacesRequest>): ListNamespacesRequest {
    const message = createBaseListNamespacesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseIAMPolicy(): IAMPolicy {
  return { policy: undefined, status: undefined };
}

export const IAMPolicy: MessageFns<IAMPolicy> = {
  encode(message: IAMPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      Policy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IAMPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIAMPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = Policy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IAMPolicy {
    return {
      policy: isSet(object.policy) ? Policy.fromJSON(object.policy) : undefined,
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
    };
  },

  toJSON(message: IAMPolicy): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = Policy.toJSON(message.policy);
    }
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<IAMPolicy>): IAMPolicy {
    return IAMPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IAMPolicy>): IAMPolicy {
    const message = createBaseIAMPolicy();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? Policy.fromPartial(object.policy)
      : undefined;
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    return message;
  },
};

function createBaseNamespace(): Namespace {
  return { name: "", iamPolicy: undefined };
}

export const Namespace: MessageFns<Namespace> = {
  encode(message: Namespace, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.iamPolicy !== undefined) {
      IAMPolicy.encode(message.iamPolicy, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Namespace {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNamespace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.iamPolicy = IAMPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Namespace {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      iamPolicy: isSet(object.iamPolicy) ? IAMPolicy.fromJSON(object.iamPolicy) : undefined,
    };
  },

  toJSON(message: Namespace): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.iamPolicy !== undefined) {
      obj.iamPolicy = IAMPolicy.toJSON(message.iamPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<Namespace>): Namespace {
    return Namespace.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Namespace>): Namespace {
    const message = createBaseNamespace();
    message.name = object.name ?? "";
    message.iamPolicy = (object.iamPolicy !== undefined && object.iamPolicy !== null)
      ? IAMPolicy.fromPartial(object.iamPolicy)
      : undefined;
    return message;
  },
};

function createBaseListNamespacesResponse(): ListNamespacesResponse {
  return { namespaces: [], nextPageToken: "" };
}

export const ListNamespacesResponse: MessageFns<ListNamespacesResponse> = {
  encode(message: ListNamespacesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.namespaces) {
      Namespace.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNamespacesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNamespacesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.namespaces.push(Namespace.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNamespacesResponse {
    return {
      namespaces: globalThis.Array.isArray(object?.namespaces)
        ? object.namespaces.map((e: any) => Namespace.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListNamespacesResponse): unknown {
    const obj: any = {};
    if (message.namespaces?.length) {
      obj.namespaces = message.namespaces.map((e) => Namespace.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNamespacesResponse>): ListNamespacesResponse {
    return ListNamespacesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNamespacesResponse>): ListNamespacesResponse {
    const message = createBaseListNamespacesResponse();
    message.namespaces = object.namespaces?.map((e) => Namespace.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDnsPeering(): DnsPeering {
  return { zone: "", domain: "", description: "", targetProject: "", targetNetwork: "" };
}

export const DnsPeering: MessageFns<DnsPeering> = {
  encode(message: DnsPeering, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.zone !== "") {
      writer.uint32(10).string(message.zone);
    }
    if (message.domain !== "") {
      writer.uint32(18).string(message.domain);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.targetProject !== "") {
      writer.uint32(34).string(message.targetProject);
    }
    if (message.targetNetwork !== "") {
      writer.uint32(42).string(message.targetNetwork);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsPeering {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsPeering();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.zone = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.domain = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.targetProject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.targetNetwork = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsPeering {
    return {
      zone: isSet(object.zone) ? globalThis.String(object.zone) : "",
      domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      targetProject: isSet(object.targetProject) ? globalThis.String(object.targetProject) : "",
      targetNetwork: isSet(object.targetNetwork) ? globalThis.String(object.targetNetwork) : "",
    };
  },

  toJSON(message: DnsPeering): unknown {
    const obj: any = {};
    if (message.zone !== "") {
      obj.zone = message.zone;
    }
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.targetProject !== "") {
      obj.targetProject = message.targetProject;
    }
    if (message.targetNetwork !== "") {
      obj.targetNetwork = message.targetNetwork;
    }
    return obj;
  },

  create(base?: DeepPartial<DnsPeering>): DnsPeering {
    return DnsPeering.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DnsPeering>): DnsPeering {
    const message = createBaseDnsPeering();
    message.zone = object.zone ?? "";
    message.domain = object.domain ?? "";
    message.description = object.description ?? "";
    message.targetProject = object.targetProject ?? "";
    message.targetNetwork = object.targetNetwork ?? "";
    return message;
  },
};

function createBaseAddDnsPeeringRequest(): AddDnsPeeringRequest {
  return { parent: "", dnsPeering: undefined };
}

export const AddDnsPeeringRequest: MessageFns<AddDnsPeeringRequest> = {
  encode(message: AddDnsPeeringRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.dnsPeering !== undefined) {
      DnsPeering.encode(message.dnsPeering, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddDnsPeeringRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddDnsPeeringRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dnsPeering = DnsPeering.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddDnsPeeringRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dnsPeering: isSet(object.dnsPeering) ? DnsPeering.fromJSON(object.dnsPeering) : undefined,
    };
  },

  toJSON(message: AddDnsPeeringRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dnsPeering !== undefined) {
      obj.dnsPeering = DnsPeering.toJSON(message.dnsPeering);
    }
    return obj;
  },

  create(base?: DeepPartial<AddDnsPeeringRequest>): AddDnsPeeringRequest {
    return AddDnsPeeringRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddDnsPeeringRequest>): AddDnsPeeringRequest {
    const message = createBaseAddDnsPeeringRequest();
    message.parent = object.parent ?? "";
    message.dnsPeering = (object.dnsPeering !== undefined && object.dnsPeering !== null)
      ? DnsPeering.fromPartial(object.dnsPeering)
      : undefined;
    return message;
  },
};

function createBaseAddDnsPeeringResponse(): AddDnsPeeringResponse {
  return {};
}

export const AddDnsPeeringResponse: MessageFns<AddDnsPeeringResponse> = {
  encode(_: AddDnsPeeringResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddDnsPeeringResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddDnsPeeringResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AddDnsPeeringResponse {
    return {};
  },

  toJSON(_: AddDnsPeeringResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AddDnsPeeringResponse>): AddDnsPeeringResponse {
    return AddDnsPeeringResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AddDnsPeeringResponse>): AddDnsPeeringResponse {
    const message = createBaseAddDnsPeeringResponse();
    return message;
  },
};

function createBaseRemoveDnsPeeringRequest(): RemoveDnsPeeringRequest {
  return { parent: "", zone: "" };
}

export const RemoveDnsPeeringRequest: MessageFns<RemoveDnsPeeringRequest> = {
  encode(message: RemoveDnsPeeringRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.zone !== "") {
      writer.uint32(18).string(message.zone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveDnsPeeringRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveDnsPeeringRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.zone = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveDnsPeeringRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      zone: isSet(object.zone) ? globalThis.String(object.zone) : "",
    };
  },

  toJSON(message: RemoveDnsPeeringRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.zone !== "") {
      obj.zone = message.zone;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveDnsPeeringRequest>): RemoveDnsPeeringRequest {
    return RemoveDnsPeeringRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveDnsPeeringRequest>): RemoveDnsPeeringRequest {
    const message = createBaseRemoveDnsPeeringRequest();
    message.parent = object.parent ?? "";
    message.zone = object.zone ?? "";
    return message;
  },
};

function createBaseRemoveDnsPeeringResponse(): RemoveDnsPeeringResponse {
  return {};
}

export const RemoveDnsPeeringResponse: MessageFns<RemoveDnsPeeringResponse> = {
  encode(_: RemoveDnsPeeringResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveDnsPeeringResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveDnsPeeringResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveDnsPeeringResponse {
    return {};
  },

  toJSON(_: RemoveDnsPeeringResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveDnsPeeringResponse>): RemoveDnsPeeringResponse {
    return RemoveDnsPeeringResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveDnsPeeringResponse>): RemoveDnsPeeringResponse {
    const message = createBaseRemoveDnsPeeringResponse();
    return message;
  },
};

function createBaseListDnsPeeringsRequest(): ListDnsPeeringsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDnsPeeringsRequest: MessageFns<ListDnsPeeringsRequest> = {
  encode(message: ListDnsPeeringsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDnsPeeringsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDnsPeeringsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDnsPeeringsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDnsPeeringsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDnsPeeringsRequest>): ListDnsPeeringsRequest {
    return ListDnsPeeringsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDnsPeeringsRequest>): ListDnsPeeringsRequest {
    const message = createBaseListDnsPeeringsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDnsPeeringsResponse(): ListDnsPeeringsResponse {
  return { dnsPeerings: [], nextPageToken: "" };
}

export const ListDnsPeeringsResponse: MessageFns<ListDnsPeeringsResponse> = {
  encode(message: ListDnsPeeringsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dnsPeerings) {
      DnsPeering.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDnsPeeringsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDnsPeeringsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dnsPeerings.push(DnsPeering.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDnsPeeringsResponse {
    return {
      dnsPeerings: globalThis.Array.isArray(object?.dnsPeerings)
        ? object.dnsPeerings.map((e: any) => DnsPeering.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDnsPeeringsResponse): unknown {
    const obj: any = {};
    if (message.dnsPeerings?.length) {
      obj.dnsPeerings = message.dnsPeerings.map((e) => DnsPeering.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDnsPeeringsResponse>): ListDnsPeeringsResponse {
    return ListDnsPeeringsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDnsPeeringsResponse>): ListDnsPeeringsResponse {
    const message = createBaseListDnsPeeringsResponse();
    message.dnsPeerings = object.dnsPeerings?.map((e) => DnsPeering.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * Service for creating and managing Data Fusion instances.
 * Data Fusion enables ETL developers to build code-free, data integration
 * pipelines via a point-and-click UI.
 */
export type DataFusionDefinition = typeof DataFusionDefinition;
export const DataFusionDefinition = {
  name: "DataFusion",
  fullName: "google.cloud.datafusion.v1beta1.DataFusion",
  methods: {
    /**
     * Lists possible versions for Data Fusion instances in the specified project
     * and location.
     */
    listAvailableVersions: {
      name: "ListAvailableVersions",
      requestType: ListAvailableVersionsRequest,
      requestStream: false,
      responseType: ListAvailableVersionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists Data Fusion instances in the specified project and location. */
    listInstances: {
      name: "ListInstances",
      requestType: ListInstancesRequest,
      requestStream: false,
      responseType: ListInstancesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Data Fusion instance. */
    getInstance: {
      name: "GetInstance",
      requestType: GetInstanceRequest,
      requestStream: false,
      responseType: Instance,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Data Fusion instance in the specified project and location. */
    createInstance: {
      name: "CreateInstance",
      requestType: CreateInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              44,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              8,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              34,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Data Fusion instance. */
    deleteInstance: {
      name: "DeleteInstance",
      requestType: DeleteInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              42,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a single Data Fusion instance. */
    updateInstance: {
      name: "UpdateInstance",
      requestType: UpdateInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              20,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              71,
              58,
              8,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              50,
              59,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Restart a single Data Fusion instance.
     * At the end of an operation instance is fully restarted.
     */
    restartInstance: {
      name: "RestartInstance",
      requestType: RestartInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              1,
              42,
              34,
              58,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              116,
              97,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Upgrade a single Data Fusion instance.
     * At the end of an operation instance is fully upgraded.
     */
    upgradeInstance: {
      name: "UpgradeInstance",
      requestType: UpgradeInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              1,
              42,
              34,
              58,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              117,
              112,
              103,
              114,
              97,
              100,
              101,
            ]),
          ],
        },
      },
    },
    /** Remove IAM policy that is currently set on the given resource. */
    removeIamPolicy: {
      name: "RemoveIamPolicy",
      requestType: RemoveIamPolicyRequest,
      requestStream: false,
      responseType: RemoveIamPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              42,
              42,
              125,
              58,
              114,
              101,
              109,
              111,
              118,
              101,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /** List namespaces in a given instance */
    listNamespaces: {
      name: "ListNamespaces",
      requestType: ListNamespacesRequest,
      requestStream: false,
      responseType: ListNamespacesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              65,
              18,
              63,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Add DNS peering on the given resource. */
    addDnsPeering: {
      name: "AddDnsPeering",
      requestType: AddDnsPeeringRequest,
      requestStream: false,
      responseType: AddDnsPeeringResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              73,
              58,
              1,
              42,
              34,
              68,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              110,
              115,
              80,
              101,
              101,
              114,
              105,
              110,
              103,
              115,
              58,
              97,
              100,
              100,
            ]),
          ],
        },
      },
    },
    /** Remove DNS peering on the given resource. */
    removeDnsPeering: {
      name: "RemoveDnsPeering",
      requestType: RemoveDnsPeeringRequest,
      requestStream: false,
      responseType: RemoveDnsPeeringResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              76,
              58,
              1,
              42,
              34,
              71,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              110,
              115,
              80,
              101,
              101,
              114,
              105,
              110,
              103,
              115,
              58,
              114,
              101,
              109,
              111,
              118,
              101,
            ]),
          ],
        },
      },
    },
    /** List DNS peering for a given resource. */
    listDnsPeerings: {
      name: "ListDnsPeerings",
      requestType: ListDnsPeeringsRequest,
      requestStream: false,
      responseType: ListDnsPeeringsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              71,
              18,
              69,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              110,
              115,
              80,
              101,
              101,
              114,
              105,
              110,
              103,
              115,
              58,
              108,
              105,
              115,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DataFusionServiceImplementation<CallContextExt = {}> {
  /**
   * Lists possible versions for Data Fusion instances in the specified project
   * and location.
   */
  listAvailableVersions(
    request: ListAvailableVersionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAvailableVersionsResponse>>;
  /** Lists Data Fusion instances in the specified project and location. */
  listInstances(
    request: ListInstancesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListInstancesResponse>>;
  /** Gets details of a single Data Fusion instance. */
  getInstance(request: GetInstanceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Instance>>;
  /** Creates a new Data Fusion instance in the specified project and location. */
  createInstance(
    request: CreateInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single Data Fusion instance. */
  deleteInstance(
    request: DeleteInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates a single Data Fusion instance. */
  updateInstance(
    request: UpdateInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Restart a single Data Fusion instance.
   * At the end of an operation instance is fully restarted.
   */
  restartInstance(
    request: RestartInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Upgrade a single Data Fusion instance.
   * At the end of an operation instance is fully upgraded.
   */
  upgradeInstance(
    request: UpgradeInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Remove IAM policy that is currently set on the given resource. */
  removeIamPolicy(
    request: RemoveIamPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveIamPolicyResponse>>;
  /** List namespaces in a given instance */
  listNamespaces(
    request: ListNamespacesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListNamespacesResponse>>;
  /** Add DNS peering on the given resource. */
  addDnsPeering(
    request: AddDnsPeeringRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddDnsPeeringResponse>>;
  /** Remove DNS peering on the given resource. */
  removeDnsPeering(
    request: RemoveDnsPeeringRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveDnsPeeringResponse>>;
  /** List DNS peering for a given resource. */
  listDnsPeerings(
    request: ListDnsPeeringsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDnsPeeringsResponse>>;
}

export interface DataFusionClient<CallOptionsExt = {}> {
  /**
   * Lists possible versions for Data Fusion instances in the specified project
   * and location.
   */
  listAvailableVersions(
    request: DeepPartial<ListAvailableVersionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAvailableVersionsResponse>;
  /** Lists Data Fusion instances in the specified project and location. */
  listInstances(
    request: DeepPartial<ListInstancesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListInstancesResponse>;
  /** Gets details of a single Data Fusion instance. */
  getInstance(request: DeepPartial<GetInstanceRequest>, options?: CallOptions & CallOptionsExt): Promise<Instance>;
  /** Creates a new Data Fusion instance in the specified project and location. */
  createInstance(
    request: DeepPartial<CreateInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single Data Fusion instance. */
  deleteInstance(
    request: DeepPartial<DeleteInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates a single Data Fusion instance. */
  updateInstance(
    request: DeepPartial<UpdateInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Restart a single Data Fusion instance.
   * At the end of an operation instance is fully restarted.
   */
  restartInstance(
    request: DeepPartial<RestartInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Upgrade a single Data Fusion instance.
   * At the end of an operation instance is fully upgraded.
   */
  upgradeInstance(
    request: DeepPartial<UpgradeInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Remove IAM policy that is currently set on the given resource. */
  removeIamPolicy(
    request: DeepPartial<RemoveIamPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveIamPolicyResponse>;
  /** List namespaces in a given instance */
  listNamespaces(
    request: DeepPartial<ListNamespacesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListNamespacesResponse>;
  /** Add DNS peering on the given resource. */
  addDnsPeering(
    request: DeepPartial<AddDnsPeeringRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddDnsPeeringResponse>;
  /** Remove DNS peering on the given resource. */
  removeDnsPeering(
    request: DeepPartial<RemoveDnsPeeringRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveDnsPeeringResponse>;
  /** List DNS peering for a given resource. */
  listDnsPeerings(
    request: DeepPartial<ListDnsPeeringsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDnsPeeringsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
