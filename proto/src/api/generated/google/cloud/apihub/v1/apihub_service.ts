// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/apihub/v1/apihub_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import {
  Api,
  ApiOperation,
  Attribute,
  Definition,
  Dependency,
  Deployment,
  ExternalApi,
  Spec,
  SpecContents,
  Version,
} from "./common_fields.js";

export const protobufPackage = "google.cloud.apihub.v1";

/** The [CreateApi][google.cloud.apihub.v1.ApiHub.CreateApi] method's request. */
export interface CreateApiRequest {
  /**
   * Required. The parent resource for the API resource.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. The ID to use for the API resource, which will become the final
   * component of the API's resource name. This field is optional.
   *
   * * If provided, the same will be used. The service will throw an error if
   * the specified id is already used by another API resource in the API hub.
   * * If not provided, a system generated id will be used.
   *
   * This value should be 4-500 characters, and valid characters
   * are /[a-z][A-Z][0-9]-_/.
   */
  apiId: string;
  /** Required. The API resource to create. */
  api: Api | undefined;
}

/** The [GetApi][google.cloud.apihub.v1.ApiHub.GetApi] method's request. */
export interface GetApiRequest {
  /**
   * Required. The name of the API resource to retrieve.
   * Format: `projects/{project}/locations/{location}/apis/{api}`
   */
  name: string;
}

/** The [UpdateApi][google.cloud.apihub.v1.ApiHub.UpdateApi] method's request. */
export interface UpdateApiRequest {
  /**
   * Required. The API resource to update.
   *
   * The API resource's `name` field is used to identify the API resource to
   * update.
   * Format: `projects/{project}/locations/{location}/apis/{api}`
   */
  api:
    | Api
    | undefined;
  /** Required. The list of fields to update. */
  updateMask: string[] | undefined;
}

/** The [DeleteApi][google.cloud.apihub.v1.ApiHub.DeleteApi] method's request. */
export interface DeleteApiRequest {
  /**
   * Required. The name of the API resource to delete.
   * Format: `projects/{project}/locations/{location}/apis/{api}`
   */
  name: string;
  /**
   * Optional. If set to true, any versions from this API will also be deleted.
   * Otherwise, the request will only work if the API has no versions.
   */
  force: boolean;
}

/** The [ListApis][google.cloud.apihub.v1.ApiHub.ListApis] method's request. */
export interface ListApisRequest {
  /**
   * Required. The parent, which owns this collection of API resources.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. An expression that filters the list of ApiResources.
   *
   * A filter expression consists of a field name, a comparison
   * operator, and a value for filtering. The value must be a string. The
   * comparison operator must be one of: `<`, `>`, `:` or `=`. Filters are not
   * case sensitive.
   *
   * The following fields in the `ApiResource` are eligible for filtering:
   *
   *   * `owner.email` - The email of the team which owns the ApiResource.
   *   Allowed comparison operators: `=`.
   *   * `create_time` - The time at which the ApiResource was created. The
   *   value should be in the (RFC3339)[https://tools.ietf.org/html/rfc3339]
   *   format. Allowed comparison operators: `>` and `<`.
   *   * `display_name` - The display name of the ApiResource. Allowed
   *   comparison operators: `=`.
   *   * `target_user.enum_values.values.id` - The allowed value id of the
   *   target users attribute associated with the ApiResource. Allowed
   *   comparison operator is `:`.
   *   * `target_user.enum_values.values.display_name` - The allowed value
   *   display name of the target users attribute associated with the
   *   ApiResource. Allowed comparison operator is `:`.
   *   * `team.enum_values.values.id` - The allowed value id of the team
   *   attribute associated with the ApiResource. Allowed comparison operator is
   *   `:`.
   *   * `team.enum_values.values.display_name` - The allowed value display name
   *   of the team attribute associated with the ApiResource. Allowed comparison
   *   operator is `:`.
   *   * `business_unit.enum_values.values.id` - The allowed value id of the
   *   business unit attribute associated with the ApiResource. Allowed
   *   comparison operator is `:`.
   *   * `business_unit.enum_values.values.display_name` - The allowed value
   *   display name of the business unit attribute associated with the
   *   ApiResource. Allowed comparison operator is `:`.
   *   * `maturity_level.enum_values.values.id` - The allowed value id of the
   *   maturity level attribute associated with the ApiResource. Allowed
   *   comparison operator is `:`.
   *   * `maturity_level.enum_values.values.display_name` - The allowed value
   *   display name of the maturity level attribute associated with the
   *   ApiResource. Allowed comparison operator is `:`.
   *   * `api_style.enum_values.values.id` - The allowed value id of the
   *   api style attribute associated with the ApiResource. Allowed
   *   comparison operator is `:`.
   *   * `api_style.enum_values.values.display_name` - The allowed value display
   *   name of the api style attribute associated with the ApiResource. Allowed
   *   comparison operator is `:`.
   *
   * Expressions are combined with either `AND` logic operator or `OR` logical
   * operator but not both of them together i.e. only one of the `AND` or `OR`
   * operator can be used throughout the filter string and both the operators
   * cannot be used together. No other logical operators are supported. At most
   * three filter fields are allowed in the filter string and if provided
   * more than that then `INVALID_ARGUMENT` error is returned by the API.
   *
   * Here are a few examples:
   *
   *   * `owner.email = \"apihub@google.com\"` -  - The owner team email is
   *   _apihub@google.com_.
   *   * `owner.email = \"apihub@google.com\" AND create_time <
   *   \"2021-08-15T14:50:00Z\" AND create_time > \"2021-08-10T12:00:00Z\"` -
   *   The owner team email is _apihub@google.com_ and the api was created
   *   before _2021-08-15 14:50:00 UTC_ and after _2021-08-10 12:00:00 UTC_.
   *   * `owner.email = \"apihub@google.com\" OR team.enum_values.values.id:
   *   apihub-team-id` - The filter string specifies the APIs where the owner
   *   team email is _apihub@google.com_ or the id of the allowed value
   *   associated with the team attribute is _apihub-team-id_.
   *   * `owner.email = \"apihub@google.com\" OR
   *   team.enum_values.values.display_name: ApiHub Team` - The filter string
   *   specifies the APIs where the owner team email is _apihub@google.com_ or
   *   the display name of the allowed value associated with the team attribute
   *   is `ApiHub Team`.
   */
  filter: string;
  /**
   * Optional. The maximum number of API resources to return. The service may
   * return fewer than this value. If unspecified, at most 50 Apis will be
   * returned. The maximum value is 1000; values above 1000 will be coerced to
   * 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListApis` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters (except page_size) provided to
   * `ListApis` must match the call that provided the page token.
   */
  pageToken: string;
}

/** The [ListApis][google.cloud.apihub.v1.ApiHub.ListApis] method's response. */
export interface ListApisResponse {
  /** The API resources present in the API hub. */
  apis: Api[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/**
 * The [CreateVersion][google.cloud.apihub.v1.ApiHub.CreateVersion] method's
 * request.
 */
export interface CreateVersionRequest {
  /**
   * Required. The parent resource for API version.
   * Format: `projects/{project}/locations/{location}/apis/{api}`
   */
  parent: string;
  /**
   * Optional. The ID to use for the API version, which will become the final
   * component of the version's resource name. This field is optional.
   *
   * * If provided, the same will be used. The service will throw an error if
   * the specified id is already used by another version in the API resource.
   * * If not provided, a system generated id will be used.
   *
   * This value should be 4-500 characters, and valid characters
   * are /[a-z][A-Z][0-9]-_/.
   */
  versionId: string;
  /** Required. The version to create. */
  version: Version | undefined;
}

/** The [GetVersion][google.cloud.apihub.v1.ApiHub.GetVersion] method's request. */
export interface GetVersionRequest {
  /**
   * Required. The name of the API version to retrieve.
   * Format:
   * `projects/{project}/locations/{location}/apis/{api}/versions/{version}`
   */
  name: string;
}

/**
 * The [UpdateVersion][google.cloud.apihub.v1.ApiHub.UpdateVersion] method's
 * request.
 */
export interface UpdateVersionRequest {
  /**
   * Required. The API version to update.
   *
   * The version's `name` field is used to identify the API version to update.
   * Format:
   * `projects/{project}/locations/{location}/apis/{api}/versions/{version}`
   */
  version:
    | Version
    | undefined;
  /** Required. The list of fields to update. */
  updateMask: string[] | undefined;
}

/**
 * The [DeleteVersion][google.cloud.apihub.v1.ApiHub.DeleteVersion] method's
 * request.
 */
export interface DeleteVersionRequest {
  /**
   * Required. The name of the version to delete.
   * Format:
   * `projects/{project}/locations/{location}/apis/{api}/versions/{version}`
   */
  name: string;
  /**
   * Optional. If set to true, any specs from this version will also be deleted.
   * Otherwise, the request will only work if the version has no specs.
   */
  force: boolean;
}

/**
 * The [ListVersions][google.cloud.apihub.v1.ApiHub.ListVersions] method's
 * request.
 */
export interface ListVersionsRequest {
  /**
   * Required. The parent which owns this collection of API versions i.e., the
   * API resource Format: `projects/{project}/locations/{location}/apis/{api}`
   */
  parent: string;
  /**
   * Optional. An expression that filters the list of Versions.
   *
   * A filter expression consists of a field name, a comparison
   * operator, and a value for filtering. The value must be a string, a
   * number, or a boolean. The comparison operator must be one of: `<`, `>` or
   * `=`. Filters are not case sensitive.
   *
   * The following fields in the `Version` are eligible for filtering:
   *
   *   * `display_name` - The display name of the Version. Allowed
   *   comparison operators: `=`.
   *   * `create_time` - The time at which the Version was created. The
   *   value should be in the (RFC3339)[https://tools.ietf.org/html/rfc3339]
   *   format. Allowed comparison operators: `>` and `<`.
   *   * `lifecycle.enum_values.values.id` - The allowed value id of the
   *   lifecycle attribute associated with the Version. Allowed comparison
   *   operators: `:`.
   *   * `lifecycle.enum_values.values.display_name` - The allowed value display
   *   name of the lifecycle attribute associated with the Version. Allowed
   *   comparison operators: `:`.
   *   * `compliance.enum_values.values.id` -  The allowed value id of the
   *   compliances attribute associated with the Version. Allowed comparison
   *   operators: `:`.
   *   * `compliance.enum_values.values.display_name` -  The allowed value
   *   display name of the compliances attribute associated with the Version.
   *   Allowed comparison operators: `:`.
   *   * `accreditation.enum_values.values.id` - The allowed value id of the
   *   accreditations attribute associated with the Version. Allowed
   *   comparison operators: `:`.
   *   * `accreditation.enum_values.values.display_name` - The allowed value
   *   display name of the accreditations attribute associated with the Version.
   *   Allowed comparison operators: `:`.
   *
   * Expressions are combined with either `AND` logic operator or `OR` logical
   * operator but not both of them together i.e. only one of the `AND` or `OR`
   * operator can be used throughout the filter string and both the operators
   * cannot be used together. No other logical operators are
   * supported. At most three filter fields are allowed in the filter
   * string and if provided more than that then `INVALID_ARGUMENT` error is
   * returned by the API.
   *
   * Here are a few examples:
   *
   *   * `lifecycle.enum_values.values.id: preview-id` - The filter string
   *   specifies that the id of the allowed value associated with the lifecycle
   *   attribute of the Version is _preview-id_.
   *   * `lifecycle.enum_values.values.display_name: \"Preview Display Name\"` -
   *   The filter string specifies that the display name of the allowed value
   *   associated with the lifecycle attribute of the Version is `Preview
   *   Display Name`.
   *   * `lifecycle.enum_values.values.id: preview-id AND create_time <
   *   \"2021-08-15T14:50:00Z\" AND create_time > \"2021-08-10T12:00:00Z\"` -
   *   The id of the allowed value associated with the lifecycle attribute of
   *   the Version is _preview-id_ and it was created before _2021-08-15
   *   14:50:00 UTC_ and after _2021-08-10 12:00:00 UTC_.
   *   * `compliance.enum_values.values.id: gdpr-id OR
   *   compliance.enum_values.values.id: pci-dss-id`
   *   - The id of the allowed value associated with the compliance attribute is
   *   _gdpr-id_ or _pci-dss-id_.
   */
  filter: string;
  /**
   * Optional. The maximum number of versions to return. The service may return
   * fewer than this value. If unspecified, at most 50 versions will be
   * returned. The maximum value is 1000; values above 1000 will be coerced to
   * 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListVersions` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters (except page_size) provided to
   * `ListVersions` must match the call that provided the page token.
   */
  pageToken: string;
}

/**
 * The [ListVersions][google.cloud.apihub.v1.ApiHub.ListVersions] method's
 * response.
 */
export interface ListVersionsResponse {
  /** The versions corresponding to an API. */
  versions: Version[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** The [CreateSpec][google.cloud.apihub.v1.ApiHub.CreateSpec] method's request. */
export interface CreateSpecRequest {
  /**
   * Required. The parent resource for Spec.
   * Format:
   * `projects/{project}/locations/{location}/apis/{api}/versions/{version}`
   */
  parent: string;
  /**
   * Optional. The ID to use for the spec, which will become the final component
   * of the spec's resource name. This field is optional.
   *
   * * If provided, the same will be used. The service will throw an error if
   * the specified id is already used by another spec in the API
   * resource.
   * * If not provided, a system generated id will be used.
   *
   * This value should be 4-500 characters, and valid characters
   * are /[a-z][A-Z][0-9]-_/.
   */
  specId: string;
  /** Required. The spec to create. */
  spec: Spec | undefined;
}

/** The [GetSpec][google.cloud.apihub.v1.ApiHub.GetSpec] method's request. */
export interface GetSpecRequest {
  /**
   * Required. The name of the spec to retrieve.
   * Format:
   * `projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}`
   */
  name: string;
}

/** The [UpdateSpec][google.cloud.apihub.v1.ApiHub.UpdateSpec] method's request. */
export interface UpdateSpecRequest {
  /**
   * Required. The spec to update.
   *
   * The spec's `name` field is used to identify the spec to
   * update. Format:
   * `projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}`
   */
  spec:
    | Spec
    | undefined;
  /** Required. The list of fields to update. */
  updateMask: string[] | undefined;
}

/** The [DeleteSpec][google.cloud.apihub.v1.ApiHub.DeleteSpec] method's request. */
export interface DeleteSpecRequest {
  /**
   * Required. The name of the spec  to delete.
   * Format:
   * `projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}`
   */
  name: string;
}

/** The [ListSpecs][ListSpecs] method's request. */
export interface ListSpecsRequest {
  /**
   * Required. The parent, which owns this collection of specs.
   * Format:
   * `projects/{project}/locations/{location}/apis/{api}/versions/{version}`
   */
  parent: string;
  /**
   * Optional. An expression that filters the list of Specs.
   *
   * A filter expression consists of a field name, a comparison
   * operator, and a value for filtering. The value must be a string. The
   * comparison operator must be one of: `<`, `>`, `:` or `=`. Filters are not
   * case sensitive.
   *
   * The following fields in the `Spec` are eligible for filtering:
   *
   *   * `display_name` - The display name of the Spec. Allowed comparison
   *   operators: `=`.
   *   * `create_time` - The time at which the Spec was created. The
   *   value should be in the (RFC3339)[https://tools.ietf.org/html/rfc3339]
   *   format. Allowed comparison operators: `>` and `<`.
   *   * `spec_type.enum_values.values.id` - The allowed value id of the
   *   spec_type attribute associated with the Spec. Allowed comparison
   *   operators: `:`.
   *   * `spec_type.enum_values.values.display_name` - The allowed value display
   *   name of the spec_type attribute associated with the Spec. Allowed
   *   comparison operators: `:`.
   *   * `lint_response.json_values.values` - The json value of the
   *   lint_response attribute associated with the Spec. Allowed comparison
   *   operators: `:`.
   *   * `mime_type` - The MIME type of the Spec. Allowed comparison
   *   operators: `=`.
   *
   * Expressions are combined with either `AND` logic operator or `OR` logical
   * operator but not both of them together i.e. only one of the `AND` or `OR`
   * operator can be used throughout the filter string and both the operators
   * cannot be used together. No other logical operators are
   * supported. At most three filter fields are allowed in the filter
   * string and if provided more than that then `INVALID_ARGUMENT` error is
   * returned by the API.
   *
   * Here are a few examples:
   *
   *   * `spec_type.enum_values.values.id: rest-id` -  The filter
   *   string specifies that the id of the allowed value associated with the
   *   spec_type attribute is _rest-id_.
   *   * `spec_type.enum_values.values.display_name: \"Rest Display Name\"` -
   *   The filter string specifies that the display name of the allowed value
   *   associated with the spec_type attribute is `Rest Display Name`.
   *   * `spec_type.enum_values.values.id: grpc-id AND create_time <
   *   \"2021-08-15T14:50:00Z\" AND create_time > \"2021-08-10T12:00:00Z\"` -
   *   The id of the allowed value associated with the spec_type attribute is
   *   _grpc-id_ and the spec was created before _2021-08-15 14:50:00 UTC_ and
   *   after _2021-08-10 12:00:00 UTC_.
   *   * `spec_type.enum_values.values.id: rest-id OR
   *   spec_type.enum_values.values.id: grpc-id`
   *   - The id of the allowed value associated with the spec_type attribute is
   *   _rest-id_ or _grpc-id_.
   */
  filter: string;
  /**
   * Optional. The maximum number of specs to return. The service may return
   * fewer than this value. If unspecified, at most 50 specs will be
   * returned. The maximum value is 1000; values above 1000 will be coerced to
   * 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListSpecs` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListSpecs` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** The [ListSpecs][google.cloud.apihub.v1.ApiHub.ListSpecs] method's response. */
export interface ListSpecsResponse {
  /** The specs corresponding to an API. */
  specs: Spec[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/**
 * The [GetSpecContents][google.cloud.apihub.v1.ApiHub.GetSpecContents] method's
 * request.
 */
export interface GetSpecContentsRequest {
  /**
   * Required. The name of the spec whose contents need to be retrieved.
   * Format:
   * `projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}`
   */
  name: string;
}

/**
 * The [GetApiOperation][google.cloud.apihub.v1.ApiHub.GetApiOperation] method's
 * request.
 */
export interface GetApiOperationRequest {
  /**
   * Required. The name of the operation to retrieve.
   * Format:
   * `projects/{project}/locations/{location}/apis/{api}/versions/{version}/operations/{operation}`
   */
  name: string;
}

/**
 * The [ListApiOperations][google.cloud.apihub.v1.ApiHub.ListApiOperations]
 * method's request.
 */
export interface ListApiOperationsRequest {
  /**
   * Required. The parent which owns this collection of operations i.e., the API
   * version. Format:
   * `projects/{project}/locations/{location}/apis/{api}/versions/{version}`
   */
  parent: string;
  /**
   * Optional. An expression that filters the list of ApiOperations.
   *
   * A filter expression consists of a field name, a comparison
   * operator, and a value for filtering. The value must be a string or a
   * boolean. The comparison operator must be one of: `<`, `>` or
   * `=`. Filters are not case sensitive.
   *
   * The following fields in the `ApiOperation` are eligible for filtering:
   *   * `name` - The ApiOperation resource name. Allowed comparison
   *   operators:
   *   `=`.
   *   * `details.http_operation.path.path` - The http operation's complete path
   *   relative to server endpoint. Allowed comparison operators: `=`.
   *   * `details.http_operation.method` - The http operation method type.
   *   Allowed comparison operators: `=`.
   *   * `details.deprecated` - Indicates if the ApiOperation is deprecated.
   *   Allowed values are True / False indicating the deprycation status of the
   *   ApiOperation. Allowed comparison operators: `=`.
   *   * `create_time` - The time at which the ApiOperation was created. The
   *   value should be in the (RFC3339)[https://tools.ietf.org/html/rfc3339]
   *   format. Allowed comparison operators: `>` and `<`.
   *
   * Expressions are combined with either `AND` logic operator or `OR` logical
   * operator but not both of them together i.e. only one of the `AND` or `OR`
   * operator can be used throughout the filter string and both the operators
   * cannot be used together. No other logical operators are supported. At most
   * three filter fields are allowed in the filter string and if provided
   * more than that then `INVALID_ARGUMENT` error is returned by the API.
   *
   * Here are a few examples:
   *
   *   * `details.deprecated = True` -  The ApiOperation is deprecated.
   *   * `details.http_operation.method = GET AND create_time <
   *   \"2021-08-15T14:50:00Z\" AND create_time > \"2021-08-10T12:00:00Z\"` -
   *   The method of the http operation of the ApiOperation is _GET_ and the
   *   spec was created before _2021-08-15 14:50:00 UTC_ and after _2021-08-10
   *   12:00:00 UTC_.
   *   * `details.http_operation.method = GET OR details.http_operation.method =
   *   POST`. - The http operation of the method of ApiOperation is _GET_ or
   *   _POST_.
   */
  filter: string;
  /**
   * Optional. The maximum number of operations to return. The service may
   * return fewer than this value. If unspecified, at most 50 operations will be
   * returned. The maximum value is 1000; values above 1000 will be coerced to
   * 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListApiOperations` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters (except page_size) provided to
   * `ListApiOperations` must match the call that provided the page token.
   */
  pageToken: string;
}

/**
 * The [ListApiOperations][google.cloud.apihub.v1.ApiHub.ListApiOperations]
 * method's response.
 */
export interface ListApiOperationsResponse {
  /**
   * The operations corresponding to an API version.
   * Only following field will be populated in the response: name,
   * spec, details.deprecated, details.http_operation.path.path,
   * details.http_operation.method and details.documentation.external_uri.
   */
  apiOperations: ApiOperation[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/**
 * The [GetDefinition][google.cloud.apihub.v1.ApiHub.GetDefinition] method's
 * request.
 */
export interface GetDefinitionRequest {
  /**
   * Required. The name of the definition to retrieve.
   * Format:
   * `projects/{project}/locations/{location}/apis/{api}/versions/{version}/definitions/{definition}`
   */
  name: string;
}

/**
 * The [CreateDeployment][google.cloud.apihub.v1.ApiHub.CreateDeployment]
 * method's request.
 */
export interface CreateDeploymentRequest {
  /**
   * Required. The parent resource for the deployment resource.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. The ID to use for the deployment resource, which will become the
   * final component of the deployment's resource name. This field is optional.
   *
   * * If provided, the same will be used. The service will throw an error if
   * the specified id is already used by another deployment resource in the API
   * hub.
   * * If not provided, a system generated id will be used.
   *
   * This value should be 4-500 characters, and valid characters
   * are /[a-z][A-Z][0-9]-_/.
   */
  deploymentId: string;
  /** Required. The deployment resource to create. */
  deployment: Deployment | undefined;
}

/**
 * The [GetDeployment][google.cloud.apihub.v1.ApiHub.GetDeployment] method's
 * request.
 */
export interface GetDeploymentRequest {
  /**
   * Required. The name of the deployment resource to retrieve.
   * Format: `projects/{project}/locations/{location}/deployments/{deployment}`
   */
  name: string;
}

/**
 * The [UpdateDeployment][google.cloud.apihub.v1.ApiHub.UpdateDeployment]
 * method's request.
 */
export interface UpdateDeploymentRequest {
  /**
   * Required. The deployment resource to update.
   *
   * The deployment resource's `name` field is used to identify the deployment
   * resource to update.
   * Format: `projects/{project}/locations/{location}/deployments/{deployment}`
   */
  deployment:
    | Deployment
    | undefined;
  /** Required. The list of fields to update. */
  updateMask: string[] | undefined;
}

/**
 * The [DeleteDeployment][google.cloud.apihub.v1.ApiHub.DeleteDeployment]
 * method's request.
 */
export interface DeleteDeploymentRequest {
  /**
   * Required. The name of the deployment resource to delete.
   * Format: `projects/{project}/locations/{location}/deployments/{deployment}`
   */
  name: string;
}

/**
 * The [ListDeployments][google.cloud.apihub.v1.ApiHub.ListDeployments] method's
 * request.
 */
export interface ListDeploymentsRequest {
  /**
   * Required. The parent, which owns this collection of deployment resources.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. An expression that filters the list of Deployments.
   *
   * A filter expression consists of a field name, a comparison
   * operator, and a value for filtering. The value must be a string. The
   * comparison operator must be one of: `<`, `>` or
   * `=`. Filters are not case sensitive.
   *
   * The following fields in the `Deployments` are eligible for filtering:
   *
   *   * `display_name` - The display name of the Deployment. Allowed
   *   comparison operators: `=`.
   *   * `create_time` - The time at which the Deployment was created. The
   *   value should be in the (RFC3339)[https://tools.ietf.org/html/rfc3339]
   *   format. Allowed comparison operators: `>` and `<`.
   *   * `resource_uri` - A URI to the deployment resource. Allowed
   *   comparison operators: `=`.
   *   * `api_versions` - The API versions linked to this deployment. Allowed
   *   comparison operators: `:`.
   *   * `deployment_type.enum_values.values.id` - The allowed value id of the
   *   deployment_type attribute associated with the Deployment. Allowed
   *   comparison operators: `:`.
   *   * `deployment_type.enum_values.values.display_name` - The allowed value
   *   display name of the deployment_type attribute associated with the
   *   Deployment. Allowed comparison operators: `:`.
   *   * `slo.string_values.values` -The allowed string value of the slo
   *   attribute associated with the deployment. Allowed comparison
   *   operators: `:`.
   *   * `environment.enum_values.values.id` - The allowed value id of the
   *   environment attribute associated with the deployment. Allowed
   *   comparison operators: `:`.
   *   * `environment.enum_values.values.display_name` - The allowed value
   *   display name of the environment attribute associated with the deployment.
   *   Allowed comparison operators: `:`.
   *
   * Expressions are combined with either `AND` logic operator or `OR` logical
   * operator but not both of them together i.e. only one of the `AND` or `OR`
   * operator can be used throughout the filter string and both the operators
   * cannot be used together. No other logical operators are supported. At most
   * three filter fields are allowed in the filter string and if provided
   * more than that then `INVALID_ARGUMENT` error is returned by the API.
   *
   * Here are a few examples:
   *
   *   * `environment.enum_values.values.id: staging-id` - The allowed value id
   *   of the environment attribute associated with the Deployment is
   *   _staging-id_.
   *   * `environment.enum_values.values.display_name: \"Staging Deployment\"` -
   *   The allowed value display name of the environment attribute associated
   *   with the Deployment is `Staging Deployment`.
   *   * `environment.enum_values.values.id: production-id AND create_time <
   *   \"2021-08-15T14:50:00Z\" AND create_time > \"2021-08-10T12:00:00Z\"` -
   *   The allowed value id of the environment attribute associated with the
   *   Deployment is _production-id_ and Deployment was created before
   *   _2021-08-15 14:50:00 UTC_ and after _2021-08-10 12:00:00 UTC_.
   *   * `environment.enum_values.values.id: production-id OR
   *   slo.string_values.values: \"99.99%\"`
   *   - The allowed value id of the environment attribute Deployment is
   *   _production-id_ or string value of the slo attribute is _99.99%_.
   */
  filter: string;
  /**
   * Optional. The maximum number of deployment resources to return. The service
   * may return fewer than this value. If unspecified, at most 50 deployments
   * will be returned. The maximum value is 1000; values above 1000 will be
   * coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListDeployments` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters (except page_size) provided to
   * `ListDeployments` must match the call that provided the page token.
   */
  pageToken: string;
}

/**
 * The [ListDeployments][google.cloud.apihub.v1.ApiHub.ListDeployments] method's
 * response.
 */
export interface ListDeploymentsResponse {
  /** The deployment resources present in the API hub. */
  deployments: Deployment[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/**
 * The [CreateAttribute][google.cloud.apihub.v1.ApiHub.CreateAttribute] method's
 * request.
 */
export interface CreateAttributeRequest {
  /**
   * Required. The parent resource for Attribute.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. The ID to use for the attribute, which will become the final
   * component of the attribute's resource name. This field is optional.
   *
   * * If provided, the same will be used. The service will throw an error if
   * the specified id is already used by another attribute resource in the API
   * hub.
   * * If not provided, a system generated id will be used.
   *
   * This value should be 4-500 characters, and valid characters
   * are /[a-z][A-Z][0-9]-_/.
   */
  attributeId: string;
  /** Required. The attribute to create. */
  attribute: Attribute | undefined;
}

/**
 * The [GetAttribute][google.cloud.apihub.v1.ApiHub.GetAttribute] method's
 * request.
 */
export interface GetAttributeRequest {
  /**
   * Required. The name of the attribute to retrieve.
   * Format:
   * `projects/{project}/locations/{location}/attributes/{attribute}`
   */
  name: string;
}

/**
 * The [UpdateAttribute][google.cloud.apihub.v1.ApiHub.UpdateAttribute] method's
 * request.
 */
export interface UpdateAttributeRequest {
  /**
   * Required. The attribute to update.
   *
   * The attribute's `name` field is used to identify the attribute to update.
   * Format:
   * `projects/{project}/locations/{location}/attributes/{attribute}`
   */
  attribute:
    | Attribute
    | undefined;
  /** Required. The list of fields to update. */
  updateMask: string[] | undefined;
}

/**
 * The [DeleteAttribute][google.cloud.apihub.v1.ApiHub.DeleteAttribute] method's
 * request.
 */
export interface DeleteAttributeRequest {
  /**
   * Required. The name of the attribute to delete.
   * Format:
   * `projects/{project}/locations/{location}/attributes/{attribute}`
   */
  name: string;
}

/**
 * The [ListAttributes][google.cloud.apihub.v1.ApiHub.ListAttributes] method's
 * request.
 */
export interface ListAttributesRequest {
  /**
   * Required. The parent resource for Attribute.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. An expression that filters the list of Attributes.
   *
   * A filter expression consists of a field name, a comparison
   * operator, and a value for filtering. The value must be a string or a
   * boolean. The comparison operator must be one of: `<`, `>` or
   * `=`. Filters are not case sensitive.
   *
   * The following fields in the `Attribute` are eligible for filtering:
   *
   *   * `display_name` - The display name of the Attribute. Allowed
   *   comparison operators: `=`.
   *   * `definition_type` - The definition type of the attribute. Allowed
   *   comparison operators: `=`.
   *   * `scope` - The scope of the attribute. Allowed comparison operators:
   *   `=`.
   *   * `data_type` - The type of the data of the attribute. Allowed
   *   comparison operators: `=`.
   *   * `mandatory` - Denotes whether the attribute is mandatory or not.
   *   Allowed comparison operators: `=`.
   *   * `create_time` - The time at which the Attribute was created. The
   *   value should be in the (RFC3339)[https://tools.ietf.org/html/rfc3339]
   *   format. Allowed comparison operators: `>` and `<`.
   *
   * Expressions are combined with either `AND` logic operator or `OR` logical
   * operator but not both of them together i.e. only one of the `AND` or `OR`
   * operator can be used throughout the filter string and both the operators
   * cannot be used together. No other logical operators are
   * supported. At most three filter fields are allowed in the filter
   * string and if provided more than that then `INVALID_ARGUMENT` error is
   * returned by the API.
   *
   * Here are a few examples:
   *
   *   * `display_name = production` -  - The display name of the attribute is
   *   _production_.
   *   * `(display_name = production) AND (create_time <
   *   \"2021-08-15T14:50:00Z\") AND (create_time > \"2021-08-10T12:00:00Z\")` -
   *   The display name of the attribute is _production_ and the attribute was
   *   created before _2021-08-15 14:50:00 UTC_ and after _2021-08-10 12:00:00
   *   UTC_.
   *   * `display_name = production OR scope = api` -
   *   The attribute where the display name is _production_ or the scope is
   *   _api_.
   */
  filter: string;
  /**
   * Optional. The maximum number of attribute resources to return. The service
   * may return fewer than this value. If unspecified, at most 50 attributes
   * will be returned. The maximum value is 1000; values above 1000 will be
   * coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListAttributes` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListAttributes` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/**
 * The [ListAttributes][google.cloud.apihub.v1.ApiHub.ListAttributes] method's
 * response.
 */
export interface ListAttributesResponse {
  /** The list of all attributes. */
  attributes: Attribute[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/**
 * The [SearchResources][google.cloud.apihub.v1.ApiHub.SearchResources] method's
 * request.
 */
export interface SearchResourcesRequest {
  /**
   * Required. The resource name of the location which will be of the type
   * `projects/{project_id}/locations/{location_id}`. This field is used to
   * identify the instance of API-Hub in which resources should be searched.
   */
  location: string;
  /**
   * Required. The free text search query. This query can contain keywords which
   * could be related to any detail of the API-Hub resources such display names,
   * descriptions, attributes etc.
   */
  query: string;
  /**
   * Optional. An expression that filters the list of search results.
   *
   * A filter expression consists of a field name, a comparison operator,
   * and a value for filtering. The value must be a string, a number, or a
   * boolean. The comparison operator must be `=`. Filters are not case
   * sensitive.
   *
   * The following field names are eligible for filtering:
   *    * `resource_type` - The type of resource in the search results.
   *    Must be one of the following: `Api`, `ApiOperation`, `Deployment`,
   *    `Definition`, `Spec` or `Version`. This field can only be specified once
   *    in the filter.
   *
   * Here are is an example:
   *
   *   * `resource_type = Api` - The resource_type is _Api_.
   */
  filter: string;
  /**
   * Optional. The maximum number of search results to return. The service may
   * return fewer than this value. If unspecified at most 10 search results will
   * be returned. If value is negative then `INVALID_ARGUMENT` error is
   * returned. The maximum value is 25; values above 25 will be coerced to 25.
   * While paginating, you can specify a new page size parameter for each page
   * of search results to be listed.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous
   * [SearchResources][SearchResources]
   * call. Specify this parameter to retrieve the next page of transactions.
   *
   * When paginating, you must specify the `page_token` parameter and all the
   * other parameters except
   * [page_size][google.cloud.apihub.v1.SearchResourcesRequest.page_size]
   * should be specified with the same value which was used in the previous
   * call. If the other fields are set with a different value than the previous
   * call then `INVALID_ARGUMENT` error is returned.
   */
  pageToken: string;
}

/**
 * ApiHubResource is one of the resources such as Api, Operation, Deployment,
 * Definition, Spec and Version resources stored in API-Hub.
 */
export interface ApiHubResource {
  /**
   * This represents Api resource in search results. Only name, display_name,
   * description and owner fields are populated in search results.
   */
  api?:
    | Api
    | undefined;
  /**
   * This represents ApiOperation resource in search results. Only name,
   * and description fields are populated in search results.
   */
  operation?:
    | ApiOperation
    | undefined;
  /**
   * This represents Deployment resource in search results. Only name,
   * display_name and description fields are populated in search results.
   */
  deployment?:
    | Deployment
    | undefined;
  /**
   * This represents Spec resource in search results. Only name,
   * display_name and description fields are populated in search results.
   */
  spec?:
    | Spec
    | undefined;
  /**
   * This represents Definition resource in search results.
   * Only name field is populated in search results.
   */
  definition?:
    | Definition
    | undefined;
  /**
   * This represents Version resource in search results. Only name,
   * display_name and description fields are populated in search results.
   */
  version?: Version | undefined;
}

/** Represents the search results. */
export interface SearchResult {
  /**
   * This represents the ApiHubResource.
   * Note: Only selected fields of the resources are populated in response.
   */
  resource: ApiHubResource | undefined;
}

/**
 * Response for the
 * [SearchResources][google.cloud.apihub.v1.ApiHub.SearchResources] method.
 */
export interface SearchResourcesResponse {
  /**
   * List of search results according to the filter and search query specified.
   * The order of search results represents the ranking.
   */
  searchResults: SearchResult[];
  /**
   * Pass this token in the
   * [SearchResourcesRequest][google.cloud.apihub.v1.SearchResourcesRequest]
   * to continue to list results. If all results have been returned, this field
   * is an empty string or not present in the response.
   */
  nextPageToken: string;
}

/**
 * The
 * [CreateDependency][google.cloud.apihub.v1.ApiHubDependencies.CreateDependency]
 * method's request.
 */
export interface CreateDependencyRequest {
  /**
   * Required. The parent resource for the dependency resource.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. The ID to use for the dependency resource, which will become the
   * final component of the dependency's resource name. This field is optional.
   * * If provided, the same will be used. The service will throw an error if
   * duplicate id is provided by the client.
   * * If not provided, a system generated id will be used.
   *
   * This value should be 4-500 characters, and valid characters
   * are `[a-z][A-Z][0-9]-_`.
   */
  dependencyId: string;
  /** Required. The dependency resource to create. */
  dependency: Dependency | undefined;
}

/**
 * The [GetDependency][.ApiHubDependencies.GetDependency]
 * method's request.
 */
export interface GetDependencyRequest {
  /**
   * Required. The name of the dependency resource to retrieve.
   * Format: `projects/{project}/locations/{location}/dependencies/{dependency}`
   */
  name: string;
}

/**
 * The
 * [UpdateDependency][google.cloud.apihub.v1.ApiHubDependencies.UpdateDependency]
 * method's request.
 */
export interface UpdateDependencyRequest {
  /**
   * Required. The dependency resource to update.
   *
   * The dependency's `name` field is used to identify the dependency to update.
   * Format: `projects/{project}/locations/{location}/dependencies/{dependency}`
   */
  dependency:
    | Dependency
    | undefined;
  /** Required. The list of fields to update. */
  updateMask: string[] | undefined;
}

/**
 * The
 * [DeleteDependency][google.cloud.apihub.v1.ApiHubDependencies.DeleteDependency]
 * method's request.
 */
export interface DeleteDependencyRequest {
  /**
   * Required. The name of the dependency resource to delete.
   * Format: `projects/{project}/locations/{location}/dependencies/{dependency}`
   */
  name: string;
}

/**
 * The
 * [ListDependencies][google.cloud.apihub.v1.ApiHubDependencies.ListDependencies]
 * method's request.
 */
export interface ListDependenciesRequest {
  /**
   * Required. The parent which owns this collection of dependency resources.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. An expression that filters the list of Dependencies.
   *
   * A filter expression consists of a field name, a comparison operator, and
   * a value for filtering. The value must be a string. Allowed comparison
   * operator is `=`. Filters are not case sensitive.
   *
   * The following fields in the `Dependency` are eligible for filtering:
   *
   *   * `consumer.operation_resource_name` - The operation resource name for
   *   the consumer entity involved in a dependency. Allowed comparison
   *   operators: `=`.
   *   * `consumer.external_api_resource_name` - The external api resource name
   *   for the consumer entity involved in a dependency. Allowed comparison
   *   operators: `=`.
   *   * `supplier.operation_resource_name` - The operation resource name for
   *   the supplier entity involved in a dependency. Allowed comparison
   *   operators: `=`.
   *   * `supplier.external_api_resource_name` - The external api resource name
   *   for the supplier entity involved in a dependency. Allowed comparison
   *   operators: `=`.
   *
   * Expressions are combined with either `AND` logic operator or `OR` logical
   * operator but not both of them together i.e. only one of the `AND` or `OR`
   * operator can be used throughout the filter string and both the operators
   * cannot be used together. No other logical operators are supported. At most
   * three filter fields are allowed in the filter string and if provided
   * more than that then `INVALID_ARGUMENT` error is returned by the API.
   *
   * For example, `consumer.operation_resource_name =
   * \"projects/p1/locations/global/apis/a1/versions/v1/operations/o1\" OR
   * supplier.operation_resource_name =
   * \"projects/p1/locations/global/apis/a1/versions/v1/operations/o1\"` - The
   * dependencies with either consumer or supplier operation resource name as
   * _projects/p1/locations/global/apis/a1/versions/v1/operations/o1_.
   */
  filter: string;
  /**
   * Optional. The maximum number of dependency resources to return. The service
   * may return fewer than this value. If unspecified, at most 50 dependencies
   * will be returned. The maximum value is 1000; values above 1000 will be
   * coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListDependencies` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListDependencies` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/**
 * The
 * [ListDependencies][google.cloud.apihub.v1.ApiHubDependencies.ListDependencies]
 * method's response.
 */
export interface ListDependenciesResponse {
  /**
   * The dependency resources present in the API hub.
   * Only following field will be populated in the response: name.
   */
  dependencies: Dependency[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/**
 * The [CreateExternalApi][google.cloud.apihub.v1.ApiHub.CreateExternalApi]
 * method's request.
 */
export interface CreateExternalApiRequest {
  /**
   * Required. The parent resource for the External API resource.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. The ID to use for the External API resource, which will become
   * the final component of the External API's resource name. This field is
   * optional.
   *
   * * If provided, the same will be used. The service will throw an error if
   * the specified id is already used by another External API resource in the
   * API hub.
   * * If not provided, a system generated id will be used.
   *
   * This value should be 4-500 characters, and valid characters
   * are /[a-z][A-Z][0-9]-_/.
   */
  externalApiId: string;
  /** Required. The External API resource to create. */
  externalApi: ExternalApi | undefined;
}

/**
 * The [GetExternalApi][google.cloud.apihub.v1.ApiHub.GetExternalApi] method's
 * request.
 */
export interface GetExternalApiRequest {
  /**
   * Required. The name of the External API resource to retrieve.
   * Format:
   * `projects/{project}/locations/{location}/externalApis/{externalApi}`
   */
  name: string;
}

/**
 * The [UpdateExternalApi][google.cloud.apihub.v1.ApiHub.UpdateExternalApi]
 * method's request.
 */
export interface UpdateExternalApiRequest {
  /**
   * Required. The External API resource to update.
   *
   * The External API resource's `name` field is used to identify the External
   * API resource to update. Format:
   * `projects/{project}/locations/{location}/externalApis/{externalApi}`
   */
  externalApi:
    | ExternalApi
    | undefined;
  /** Required. The list of fields to update. */
  updateMask: string[] | undefined;
}

/**
 * The [DeleteExternalApi][google.cloud.apihub.v1.ApiHub.DeleteExternalApi]
 * method's request.
 */
export interface DeleteExternalApiRequest {
  /**
   * Required. The name of the External API resource to delete.
   * Format:
   * `projects/{project}/locations/{location}/externalApis/{externalApi}`
   */
  name: string;
}

/**
 * The [ListExternalApis][google.cloud.apihub.v1.ApiHub.ListExternalApis]
 * method's request.
 */
export interface ListExternalApisRequest {
  /**
   * Required. The parent, which owns this collection of External API resources.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. The maximum number of External API resources to return. The
   * service may return fewer than this value. If unspecified, at most 50
   * ExternalApis will be returned. The maximum value is 1000; values above 1000
   * will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListExternalApis` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters (except page_size) provided to
   * `ListExternalApis` must match the call that provided the page token.
   */
  pageToken: string;
}

/**
 * The [ListExternalApis][google.cloud.apihub.v1.ApiHub.ListExternalApis]
 * method's response.
 */
export interface ListExternalApisResponse {
  /**
   * The External API resources present in the API hub.
   * Only following fields will be populated in the response: name,
   * display_name, documentation.external_uri.
   */
  externalApis: ExternalApi[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

function createBaseCreateApiRequest(): CreateApiRequest {
  return { parent: "", apiId: "", api: undefined };
}

export const CreateApiRequest: MessageFns<CreateApiRequest> = {
  encode(message: CreateApiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.apiId !== "") {
      writer.uint32(18).string(message.apiId);
    }
    if (message.api !== undefined) {
      Api.encode(message.api, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateApiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateApiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.apiId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.api = Api.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateApiRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      apiId: isSet(object.apiId) ? globalThis.String(object.apiId) : "",
      api: isSet(object.api) ? Api.fromJSON(object.api) : undefined,
    };
  },

  toJSON(message: CreateApiRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.apiId !== "") {
      obj.apiId = message.apiId;
    }
    if (message.api !== undefined) {
      obj.api = Api.toJSON(message.api);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateApiRequest>): CreateApiRequest {
    return CreateApiRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateApiRequest>): CreateApiRequest {
    const message = createBaseCreateApiRequest();
    message.parent = object.parent ?? "";
    message.apiId = object.apiId ?? "";
    message.api = (object.api !== undefined && object.api !== null) ? Api.fromPartial(object.api) : undefined;
    return message;
  },
};

function createBaseGetApiRequest(): GetApiRequest {
  return { name: "" };
}

export const GetApiRequest: MessageFns<GetApiRequest> = {
  encode(message: GetApiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetApiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetApiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetApiRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetApiRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetApiRequest>): GetApiRequest {
    return GetApiRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetApiRequest>): GetApiRequest {
    const message = createBaseGetApiRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateApiRequest(): UpdateApiRequest {
  return { api: undefined, updateMask: undefined };
}

export const UpdateApiRequest: MessageFns<UpdateApiRequest> = {
  encode(message: UpdateApiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.api !== undefined) {
      Api.encode(message.api, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateApiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateApiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.api = Api.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateApiRequest {
    return {
      api: isSet(object.api) ? Api.fromJSON(object.api) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateApiRequest): unknown {
    const obj: any = {};
    if (message.api !== undefined) {
      obj.api = Api.toJSON(message.api);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateApiRequest>): UpdateApiRequest {
    return UpdateApiRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateApiRequest>): UpdateApiRequest {
    const message = createBaseUpdateApiRequest();
    message.api = (object.api !== undefined && object.api !== null) ? Api.fromPartial(object.api) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteApiRequest(): DeleteApiRequest {
  return { name: "", force: false };
}

export const DeleteApiRequest: MessageFns<DeleteApiRequest> = {
  encode(message: DeleteApiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteApiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteApiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteApiRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteApiRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteApiRequest>): DeleteApiRequest {
    return DeleteApiRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteApiRequest>): DeleteApiRequest {
    const message = createBaseDeleteApiRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseListApisRequest(): ListApisRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListApisRequest: MessageFns<ListApisRequest> = {
  encode(message: ListApisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApisRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListApisRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApisRequest>): ListApisRequest {
    return ListApisRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApisRequest>): ListApisRequest {
    const message = createBaseListApisRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListApisResponse(): ListApisResponse {
  return { apis: [], nextPageToken: "" };
}

export const ListApisResponse: MessageFns<ListApisResponse> = {
  encode(message: ListApisResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.apis) {
      Api.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApisResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApisResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apis.push(Api.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApisResponse {
    return {
      apis: globalThis.Array.isArray(object?.apis) ? object.apis.map((e: any) => Api.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListApisResponse): unknown {
    const obj: any = {};
    if (message.apis?.length) {
      obj.apis = message.apis.map((e) => Api.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApisResponse>): ListApisResponse {
    return ListApisResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApisResponse>): ListApisResponse {
    const message = createBaseListApisResponse();
    message.apis = object.apis?.map((e) => Api.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateVersionRequest(): CreateVersionRequest {
  return { parent: "", versionId: "", version: undefined };
}

export const CreateVersionRequest: MessageFns<CreateVersionRequest> = {
  encode(message: CreateVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.versionId !== "") {
      writer.uint32(18).string(message.versionId);
    }
    if (message.version !== undefined) {
      Version.encode(message.version, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.versionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.version = Version.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateVersionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      versionId: isSet(object.versionId) ? globalThis.String(object.versionId) : "",
      version: isSet(object.version) ? Version.fromJSON(object.version) : undefined,
    };
  },

  toJSON(message: CreateVersionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.versionId !== "") {
      obj.versionId = message.versionId;
    }
    if (message.version !== undefined) {
      obj.version = Version.toJSON(message.version);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateVersionRequest>): CreateVersionRequest {
    return CreateVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateVersionRequest>): CreateVersionRequest {
    const message = createBaseCreateVersionRequest();
    message.parent = object.parent ?? "";
    message.versionId = object.versionId ?? "";
    message.version = (object.version !== undefined && object.version !== null)
      ? Version.fromPartial(object.version)
      : undefined;
    return message;
  },
};

function createBaseGetVersionRequest(): GetVersionRequest {
  return { name: "" };
}

export const GetVersionRequest: MessageFns<GetVersionRequest> = {
  encode(message: GetVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVersionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetVersionRequest>): GetVersionRequest {
    return GetVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetVersionRequest>): GetVersionRequest {
    const message = createBaseGetVersionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateVersionRequest(): UpdateVersionRequest {
  return { version: undefined, updateMask: undefined };
}

export const UpdateVersionRequest: MessageFns<UpdateVersionRequest> = {
  encode(message: UpdateVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== undefined) {
      Version.encode(message.version, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.version = Version.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateVersionRequest {
    return {
      version: isSet(object.version) ? Version.fromJSON(object.version) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateVersionRequest): unknown {
    const obj: any = {};
    if (message.version !== undefined) {
      obj.version = Version.toJSON(message.version);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateVersionRequest>): UpdateVersionRequest {
    return UpdateVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateVersionRequest>): UpdateVersionRequest {
    const message = createBaseUpdateVersionRequest();
    message.version = (object.version !== undefined && object.version !== null)
      ? Version.fromPartial(object.version)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteVersionRequest(): DeleteVersionRequest {
  return { name: "", force: false };
}

export const DeleteVersionRequest: MessageFns<DeleteVersionRequest> = {
  encode(message: DeleteVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteVersionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteVersionRequest>): DeleteVersionRequest {
    return DeleteVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteVersionRequest>): DeleteVersionRequest {
    const message = createBaseDeleteVersionRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseListVersionsRequest(): ListVersionsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListVersionsRequest: MessageFns<ListVersionsRequest> = {
  encode(message: ListVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVersionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListVersionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVersionsRequest>): ListVersionsRequest {
    return ListVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVersionsRequest>): ListVersionsRequest {
    const message = createBaseListVersionsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListVersionsResponse(): ListVersionsResponse {
  return { versions: [], nextPageToken: "" };
}

export const ListVersionsResponse: MessageFns<ListVersionsResponse> = {
  encode(message: ListVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.versions) {
      Version.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.versions.push(Version.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVersionsResponse {
    return {
      versions: globalThis.Array.isArray(object?.versions) ? object.versions.map((e: any) => Version.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListVersionsResponse): unknown {
    const obj: any = {};
    if (message.versions?.length) {
      obj.versions = message.versions.map((e) => Version.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVersionsResponse>): ListVersionsResponse {
    return ListVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVersionsResponse>): ListVersionsResponse {
    const message = createBaseListVersionsResponse();
    message.versions = object.versions?.map((e) => Version.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateSpecRequest(): CreateSpecRequest {
  return { parent: "", specId: "", spec: undefined };
}

export const CreateSpecRequest: MessageFns<CreateSpecRequest> = {
  encode(message: CreateSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.specId !== "") {
      writer.uint32(18).string(message.specId);
    }
    if (message.spec !== undefined) {
      Spec.encode(message.spec, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.specId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.spec = Spec.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSpecRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      specId: isSet(object.specId) ? globalThis.String(object.specId) : "",
      spec: isSet(object.spec) ? Spec.fromJSON(object.spec) : undefined,
    };
  },

  toJSON(message: CreateSpecRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.specId !== "") {
      obj.specId = message.specId;
    }
    if (message.spec !== undefined) {
      obj.spec = Spec.toJSON(message.spec);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSpecRequest>): CreateSpecRequest {
    return CreateSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSpecRequest>): CreateSpecRequest {
    const message = createBaseCreateSpecRequest();
    message.parent = object.parent ?? "";
    message.specId = object.specId ?? "";
    message.spec = (object.spec !== undefined && object.spec !== null) ? Spec.fromPartial(object.spec) : undefined;
    return message;
  },
};

function createBaseGetSpecRequest(): GetSpecRequest {
  return { name: "" };
}

export const GetSpecRequest: MessageFns<GetSpecRequest> = {
  encode(message: GetSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSpecRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSpecRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSpecRequest>): GetSpecRequest {
    return GetSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSpecRequest>): GetSpecRequest {
    const message = createBaseGetSpecRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateSpecRequest(): UpdateSpecRequest {
  return { spec: undefined, updateMask: undefined };
}

export const UpdateSpecRequest: MessageFns<UpdateSpecRequest> = {
  encode(message: UpdateSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.spec !== undefined) {
      Spec.encode(message.spec, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.spec = Spec.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSpecRequest {
    return {
      spec: isSet(object.spec) ? Spec.fromJSON(object.spec) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSpecRequest): unknown {
    const obj: any = {};
    if (message.spec !== undefined) {
      obj.spec = Spec.toJSON(message.spec);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSpecRequest>): UpdateSpecRequest {
    return UpdateSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSpecRequest>): UpdateSpecRequest {
    const message = createBaseUpdateSpecRequest();
    message.spec = (object.spec !== undefined && object.spec !== null) ? Spec.fromPartial(object.spec) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteSpecRequest(): DeleteSpecRequest {
  return { name: "" };
}

export const DeleteSpecRequest: MessageFns<DeleteSpecRequest> = {
  encode(message: DeleteSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSpecRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteSpecRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSpecRequest>): DeleteSpecRequest {
    return DeleteSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSpecRequest>): DeleteSpecRequest {
    const message = createBaseDeleteSpecRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSpecsRequest(): ListSpecsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListSpecsRequest: MessageFns<ListSpecsRequest> = {
  encode(message: ListSpecsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSpecsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSpecsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSpecsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListSpecsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSpecsRequest>): ListSpecsRequest {
    return ListSpecsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSpecsRequest>): ListSpecsRequest {
    const message = createBaseListSpecsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListSpecsResponse(): ListSpecsResponse {
  return { specs: [], nextPageToken: "" };
}

export const ListSpecsResponse: MessageFns<ListSpecsResponse> = {
  encode(message: ListSpecsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.specs) {
      Spec.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSpecsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSpecsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.specs.push(Spec.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSpecsResponse {
    return {
      specs: globalThis.Array.isArray(object?.specs) ? object.specs.map((e: any) => Spec.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSpecsResponse): unknown {
    const obj: any = {};
    if (message.specs?.length) {
      obj.specs = message.specs.map((e) => Spec.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSpecsResponse>): ListSpecsResponse {
    return ListSpecsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSpecsResponse>): ListSpecsResponse {
    const message = createBaseListSpecsResponse();
    message.specs = object.specs?.map((e) => Spec.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetSpecContentsRequest(): GetSpecContentsRequest {
  return { name: "" };
}

export const GetSpecContentsRequest: MessageFns<GetSpecContentsRequest> = {
  encode(message: GetSpecContentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSpecContentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSpecContentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSpecContentsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSpecContentsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSpecContentsRequest>): GetSpecContentsRequest {
    return GetSpecContentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSpecContentsRequest>): GetSpecContentsRequest {
    const message = createBaseGetSpecContentsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetApiOperationRequest(): GetApiOperationRequest {
  return { name: "" };
}

export const GetApiOperationRequest: MessageFns<GetApiOperationRequest> = {
  encode(message: GetApiOperationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetApiOperationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetApiOperationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetApiOperationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetApiOperationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetApiOperationRequest>): GetApiOperationRequest {
    return GetApiOperationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetApiOperationRequest>): GetApiOperationRequest {
    const message = createBaseGetApiOperationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListApiOperationsRequest(): ListApiOperationsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListApiOperationsRequest: MessageFns<ListApiOperationsRequest> = {
  encode(message: ListApiOperationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApiOperationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApiOperationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApiOperationsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListApiOperationsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApiOperationsRequest>): ListApiOperationsRequest {
    return ListApiOperationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApiOperationsRequest>): ListApiOperationsRequest {
    const message = createBaseListApiOperationsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListApiOperationsResponse(): ListApiOperationsResponse {
  return { apiOperations: [], nextPageToken: "" };
}

export const ListApiOperationsResponse: MessageFns<ListApiOperationsResponse> = {
  encode(message: ListApiOperationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.apiOperations) {
      ApiOperation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApiOperationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApiOperationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiOperations.push(ApiOperation.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApiOperationsResponse {
    return {
      apiOperations: globalThis.Array.isArray(object?.apiOperations)
        ? object.apiOperations.map((e: any) => ApiOperation.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListApiOperationsResponse): unknown {
    const obj: any = {};
    if (message.apiOperations?.length) {
      obj.apiOperations = message.apiOperations.map((e) => ApiOperation.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApiOperationsResponse>): ListApiOperationsResponse {
    return ListApiOperationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApiOperationsResponse>): ListApiOperationsResponse {
    const message = createBaseListApiOperationsResponse();
    message.apiOperations = object.apiOperations?.map((e) => ApiOperation.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetDefinitionRequest(): GetDefinitionRequest {
  return { name: "" };
}

export const GetDefinitionRequest: MessageFns<GetDefinitionRequest> = {
  encode(message: GetDefinitionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefinitionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefinitionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefinitionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDefinitionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefinitionRequest>): GetDefinitionRequest {
    return GetDefinitionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefinitionRequest>): GetDefinitionRequest {
    const message = createBaseGetDefinitionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateDeploymentRequest(): CreateDeploymentRequest {
  return { parent: "", deploymentId: "", deployment: undefined };
}

export const CreateDeploymentRequest: MessageFns<CreateDeploymentRequest> = {
  encode(message: CreateDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.deploymentId !== "") {
      writer.uint32(18).string(message.deploymentId);
    }
    if (message.deployment !== undefined) {
      Deployment.encode(message.deployment, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deploymentId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.deployment = Deployment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDeploymentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      deploymentId: isSet(object.deploymentId) ? globalThis.String(object.deploymentId) : "",
      deployment: isSet(object.deployment) ? Deployment.fromJSON(object.deployment) : undefined,
    };
  },

  toJSON(message: CreateDeploymentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.deploymentId !== "") {
      obj.deploymentId = message.deploymentId;
    }
    if (message.deployment !== undefined) {
      obj.deployment = Deployment.toJSON(message.deployment);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDeploymentRequest>): CreateDeploymentRequest {
    return CreateDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDeploymentRequest>): CreateDeploymentRequest {
    const message = createBaseCreateDeploymentRequest();
    message.parent = object.parent ?? "";
    message.deploymentId = object.deploymentId ?? "";
    message.deployment = (object.deployment !== undefined && object.deployment !== null)
      ? Deployment.fromPartial(object.deployment)
      : undefined;
    return message;
  },
};

function createBaseGetDeploymentRequest(): GetDeploymentRequest {
  return { name: "" };
}

export const GetDeploymentRequest: MessageFns<GetDeploymentRequest> = {
  encode(message: GetDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDeploymentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDeploymentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDeploymentRequest>): GetDeploymentRequest {
    return GetDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDeploymentRequest>): GetDeploymentRequest {
    const message = createBaseGetDeploymentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateDeploymentRequest(): UpdateDeploymentRequest {
  return { deployment: undefined, updateMask: undefined };
}

export const UpdateDeploymentRequest: MessageFns<UpdateDeploymentRequest> = {
  encode(message: UpdateDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployment !== undefined) {
      Deployment.encode(message.deployment, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deployment = Deployment.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDeploymentRequest {
    return {
      deployment: isSet(object.deployment) ? Deployment.fromJSON(object.deployment) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDeploymentRequest): unknown {
    const obj: any = {};
    if (message.deployment !== undefined) {
      obj.deployment = Deployment.toJSON(message.deployment);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDeploymentRequest>): UpdateDeploymentRequest {
    return UpdateDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDeploymentRequest>): UpdateDeploymentRequest {
    const message = createBaseUpdateDeploymentRequest();
    message.deployment = (object.deployment !== undefined && object.deployment !== null)
      ? Deployment.fromPartial(object.deployment)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteDeploymentRequest(): DeleteDeploymentRequest {
  return { name: "" };
}

export const DeleteDeploymentRequest: MessageFns<DeleteDeploymentRequest> = {
  encode(message: DeleteDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDeploymentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDeploymentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDeploymentRequest>): DeleteDeploymentRequest {
    return DeleteDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDeploymentRequest>): DeleteDeploymentRequest {
    const message = createBaseDeleteDeploymentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDeploymentsRequest(): ListDeploymentsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListDeploymentsRequest: MessageFns<ListDeploymentsRequest> = {
  encode(message: ListDeploymentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeploymentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeploymentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDeploymentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDeploymentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDeploymentsRequest>): ListDeploymentsRequest {
    return ListDeploymentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDeploymentsRequest>): ListDeploymentsRequest {
    const message = createBaseListDeploymentsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDeploymentsResponse(): ListDeploymentsResponse {
  return { deployments: [], nextPageToken: "" };
}

export const ListDeploymentsResponse: MessageFns<ListDeploymentsResponse> = {
  encode(message: ListDeploymentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.deployments) {
      Deployment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeploymentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeploymentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deployments.push(Deployment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDeploymentsResponse {
    return {
      deployments: globalThis.Array.isArray(object?.deployments)
        ? object.deployments.map((e: any) => Deployment.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDeploymentsResponse): unknown {
    const obj: any = {};
    if (message.deployments?.length) {
      obj.deployments = message.deployments.map((e) => Deployment.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDeploymentsResponse>): ListDeploymentsResponse {
    return ListDeploymentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDeploymentsResponse>): ListDeploymentsResponse {
    const message = createBaseListDeploymentsResponse();
    message.deployments = object.deployments?.map((e) => Deployment.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateAttributeRequest(): CreateAttributeRequest {
  return { parent: "", attributeId: "", attribute: undefined };
}

export const CreateAttributeRequest: MessageFns<CreateAttributeRequest> = {
  encode(message: CreateAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.attributeId !== "") {
      writer.uint32(18).string(message.attributeId);
    }
    if (message.attribute !== undefined) {
      Attribute.encode(message.attribute, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.attributeId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.attribute = Attribute.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAttributeRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      attributeId: isSet(object.attributeId) ? globalThis.String(object.attributeId) : "",
      attribute: isSet(object.attribute) ? Attribute.fromJSON(object.attribute) : undefined,
    };
  },

  toJSON(message: CreateAttributeRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.attributeId !== "") {
      obj.attributeId = message.attributeId;
    }
    if (message.attribute !== undefined) {
      obj.attribute = Attribute.toJSON(message.attribute);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAttributeRequest>): CreateAttributeRequest {
    return CreateAttributeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAttributeRequest>): CreateAttributeRequest {
    const message = createBaseCreateAttributeRequest();
    message.parent = object.parent ?? "";
    message.attributeId = object.attributeId ?? "";
    message.attribute = (object.attribute !== undefined && object.attribute !== null)
      ? Attribute.fromPartial(object.attribute)
      : undefined;
    return message;
  },
};

function createBaseGetAttributeRequest(): GetAttributeRequest {
  return { name: "" };
}

export const GetAttributeRequest: MessageFns<GetAttributeRequest> = {
  encode(message: GetAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAttributeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAttributeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAttributeRequest>): GetAttributeRequest {
    return GetAttributeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAttributeRequest>): GetAttributeRequest {
    const message = createBaseGetAttributeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateAttributeRequest(): UpdateAttributeRequest {
  return { attribute: undefined, updateMask: undefined };
}

export const UpdateAttributeRequest: MessageFns<UpdateAttributeRequest> = {
  encode(message: UpdateAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attribute !== undefined) {
      Attribute.encode(message.attribute, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attribute = Attribute.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAttributeRequest {
    return {
      attribute: isSet(object.attribute) ? Attribute.fromJSON(object.attribute) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAttributeRequest): unknown {
    const obj: any = {};
    if (message.attribute !== undefined) {
      obj.attribute = Attribute.toJSON(message.attribute);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAttributeRequest>): UpdateAttributeRequest {
    return UpdateAttributeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAttributeRequest>): UpdateAttributeRequest {
    const message = createBaseUpdateAttributeRequest();
    message.attribute = (object.attribute !== undefined && object.attribute !== null)
      ? Attribute.fromPartial(object.attribute)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteAttributeRequest(): DeleteAttributeRequest {
  return { name: "" };
}

export const DeleteAttributeRequest: MessageFns<DeleteAttributeRequest> = {
  encode(message: DeleteAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAttributeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteAttributeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAttributeRequest>): DeleteAttributeRequest {
    return DeleteAttributeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAttributeRequest>): DeleteAttributeRequest {
    const message = createBaseDeleteAttributeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAttributesRequest(): ListAttributesRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListAttributesRequest: MessageFns<ListAttributesRequest> = {
  encode(message: ListAttributesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAttributesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAttributesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAttributesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAttributesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAttributesRequest>): ListAttributesRequest {
    return ListAttributesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAttributesRequest>): ListAttributesRequest {
    const message = createBaseListAttributesRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAttributesResponse(): ListAttributesResponse {
  return { attributes: [], nextPageToken: "" };
}

export const ListAttributesResponse: MessageFns<ListAttributesResponse> = {
  encode(message: ListAttributesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAttributesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAttributesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAttributesResponse {
    return {
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => Attribute.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAttributesResponse): unknown {
    const obj: any = {};
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => Attribute.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAttributesResponse>): ListAttributesResponse {
    return ListAttributesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAttributesResponse>): ListAttributesResponse {
    const message = createBaseListAttributesResponse();
    message.attributes = object.attributes?.map((e) => Attribute.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseSearchResourcesRequest(): SearchResourcesRequest {
  return { location: "", query: "", filter: "", pageSize: 0, pageToken: "" };
}

export const SearchResourcesRequest: MessageFns<SearchResourcesRequest> = {
  encode(message: SearchResourcesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.location !== "") {
      writer.uint32(10).string(message.location);
    }
    if (message.query !== "") {
      writer.uint32(18).string(message.query);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(42).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchResourcesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchResourcesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.location = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchResourcesRequest {
    return {
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchResourcesRequest): unknown {
    const obj: any = {};
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchResourcesRequest>): SearchResourcesRequest {
    return SearchResourcesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchResourcesRequest>): SearchResourcesRequest {
    const message = createBaseSearchResourcesRequest();
    message.location = object.location ?? "";
    message.query = object.query ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseApiHubResource(): ApiHubResource {
  return {
    api: undefined,
    operation: undefined,
    deployment: undefined,
    spec: undefined,
    definition: undefined,
    version: undefined,
  };
}

export const ApiHubResource: MessageFns<ApiHubResource> = {
  encode(message: ApiHubResource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.api !== undefined) {
      Api.encode(message.api, writer.uint32(10).fork()).join();
    }
    if (message.operation !== undefined) {
      ApiOperation.encode(message.operation, writer.uint32(18).fork()).join();
    }
    if (message.deployment !== undefined) {
      Deployment.encode(message.deployment, writer.uint32(26).fork()).join();
    }
    if (message.spec !== undefined) {
      Spec.encode(message.spec, writer.uint32(34).fork()).join();
    }
    if (message.definition !== undefined) {
      Definition.encode(message.definition, writer.uint32(42).fork()).join();
    }
    if (message.version !== undefined) {
      Version.encode(message.version, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiHubResource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiHubResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.api = Api.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operation = ApiOperation.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.deployment = Deployment.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.spec = Spec.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.definition = Definition.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.version = Version.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiHubResource {
    return {
      api: isSet(object.api) ? Api.fromJSON(object.api) : undefined,
      operation: isSet(object.operation) ? ApiOperation.fromJSON(object.operation) : undefined,
      deployment: isSet(object.deployment) ? Deployment.fromJSON(object.deployment) : undefined,
      spec: isSet(object.spec) ? Spec.fromJSON(object.spec) : undefined,
      definition: isSet(object.definition) ? Definition.fromJSON(object.definition) : undefined,
      version: isSet(object.version) ? Version.fromJSON(object.version) : undefined,
    };
  },

  toJSON(message: ApiHubResource): unknown {
    const obj: any = {};
    if (message.api !== undefined) {
      obj.api = Api.toJSON(message.api);
    }
    if (message.operation !== undefined) {
      obj.operation = ApiOperation.toJSON(message.operation);
    }
    if (message.deployment !== undefined) {
      obj.deployment = Deployment.toJSON(message.deployment);
    }
    if (message.spec !== undefined) {
      obj.spec = Spec.toJSON(message.spec);
    }
    if (message.definition !== undefined) {
      obj.definition = Definition.toJSON(message.definition);
    }
    if (message.version !== undefined) {
      obj.version = Version.toJSON(message.version);
    }
    return obj;
  },

  create(base?: DeepPartial<ApiHubResource>): ApiHubResource {
    return ApiHubResource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApiHubResource>): ApiHubResource {
    const message = createBaseApiHubResource();
    message.api = (object.api !== undefined && object.api !== null) ? Api.fromPartial(object.api) : undefined;
    message.operation = (object.operation !== undefined && object.operation !== null)
      ? ApiOperation.fromPartial(object.operation)
      : undefined;
    message.deployment = (object.deployment !== undefined && object.deployment !== null)
      ? Deployment.fromPartial(object.deployment)
      : undefined;
    message.spec = (object.spec !== undefined && object.spec !== null) ? Spec.fromPartial(object.spec) : undefined;
    message.definition = (object.definition !== undefined && object.definition !== null)
      ? Definition.fromPartial(object.definition)
      : undefined;
    message.version = (object.version !== undefined && object.version !== null)
      ? Version.fromPartial(object.version)
      : undefined;
    return message;
  },
};

function createBaseSearchResult(): SearchResult {
  return { resource: undefined };
}

export const SearchResult: MessageFns<SearchResult> = {
  encode(message: SearchResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resource !== undefined) {
      ApiHubResource.encode(message.resource, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resource = ApiHubResource.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchResult {
    return { resource: isSet(object.resource) ? ApiHubResource.fromJSON(object.resource) : undefined };
  },

  toJSON(message: SearchResult): unknown {
    const obj: any = {};
    if (message.resource !== undefined) {
      obj.resource = ApiHubResource.toJSON(message.resource);
    }
    return obj;
  },

  create(base?: DeepPartial<SearchResult>): SearchResult {
    return SearchResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchResult>): SearchResult {
    const message = createBaseSearchResult();
    message.resource = (object.resource !== undefined && object.resource !== null)
      ? ApiHubResource.fromPartial(object.resource)
      : undefined;
    return message;
  },
};

function createBaseSearchResourcesResponse(): SearchResourcesResponse {
  return { searchResults: [], nextPageToken: "" };
}

export const SearchResourcesResponse: MessageFns<SearchResourcesResponse> = {
  encode(message: SearchResourcesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.searchResults) {
      SearchResult.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchResourcesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchResourcesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.searchResults.push(SearchResult.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchResourcesResponse {
    return {
      searchResults: globalThis.Array.isArray(object?.searchResults)
        ? object.searchResults.map((e: any) => SearchResult.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchResourcesResponse): unknown {
    const obj: any = {};
    if (message.searchResults?.length) {
      obj.searchResults = message.searchResults.map((e) => SearchResult.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchResourcesResponse>): SearchResourcesResponse {
    return SearchResourcesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchResourcesResponse>): SearchResourcesResponse {
    const message = createBaseSearchResourcesResponse();
    message.searchResults = object.searchResults?.map((e) => SearchResult.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateDependencyRequest(): CreateDependencyRequest {
  return { parent: "", dependencyId: "", dependency: undefined };
}

export const CreateDependencyRequest: MessageFns<CreateDependencyRequest> = {
  encode(message: CreateDependencyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.dependencyId !== "") {
      writer.uint32(18).string(message.dependencyId);
    }
    if (message.dependency !== undefined) {
      Dependency.encode(message.dependency, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDependencyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDependencyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dependencyId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dependency = Dependency.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDependencyRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dependencyId: isSet(object.dependencyId) ? globalThis.String(object.dependencyId) : "",
      dependency: isSet(object.dependency) ? Dependency.fromJSON(object.dependency) : undefined,
    };
  },

  toJSON(message: CreateDependencyRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dependencyId !== "") {
      obj.dependencyId = message.dependencyId;
    }
    if (message.dependency !== undefined) {
      obj.dependency = Dependency.toJSON(message.dependency);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDependencyRequest>): CreateDependencyRequest {
    return CreateDependencyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDependencyRequest>): CreateDependencyRequest {
    const message = createBaseCreateDependencyRequest();
    message.parent = object.parent ?? "";
    message.dependencyId = object.dependencyId ?? "";
    message.dependency = (object.dependency !== undefined && object.dependency !== null)
      ? Dependency.fromPartial(object.dependency)
      : undefined;
    return message;
  },
};

function createBaseGetDependencyRequest(): GetDependencyRequest {
  return { name: "" };
}

export const GetDependencyRequest: MessageFns<GetDependencyRequest> = {
  encode(message: GetDependencyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDependencyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDependencyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDependencyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDependencyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDependencyRequest>): GetDependencyRequest {
    return GetDependencyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDependencyRequest>): GetDependencyRequest {
    const message = createBaseGetDependencyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateDependencyRequest(): UpdateDependencyRequest {
  return { dependency: undefined, updateMask: undefined };
}

export const UpdateDependencyRequest: MessageFns<UpdateDependencyRequest> = {
  encode(message: UpdateDependencyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dependency !== undefined) {
      Dependency.encode(message.dependency, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDependencyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDependencyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dependency = Dependency.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDependencyRequest {
    return {
      dependency: isSet(object.dependency) ? Dependency.fromJSON(object.dependency) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDependencyRequest): unknown {
    const obj: any = {};
    if (message.dependency !== undefined) {
      obj.dependency = Dependency.toJSON(message.dependency);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDependencyRequest>): UpdateDependencyRequest {
    return UpdateDependencyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDependencyRequest>): UpdateDependencyRequest {
    const message = createBaseUpdateDependencyRequest();
    message.dependency = (object.dependency !== undefined && object.dependency !== null)
      ? Dependency.fromPartial(object.dependency)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteDependencyRequest(): DeleteDependencyRequest {
  return { name: "" };
}

export const DeleteDependencyRequest: MessageFns<DeleteDependencyRequest> = {
  encode(message: DeleteDependencyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDependencyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDependencyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDependencyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDependencyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDependencyRequest>): DeleteDependencyRequest {
    return DeleteDependencyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDependencyRequest>): DeleteDependencyRequest {
    const message = createBaseDeleteDependencyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDependenciesRequest(): ListDependenciesRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListDependenciesRequest: MessageFns<ListDependenciesRequest> = {
  encode(message: ListDependenciesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDependenciesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDependenciesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDependenciesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDependenciesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDependenciesRequest>): ListDependenciesRequest {
    return ListDependenciesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDependenciesRequest>): ListDependenciesRequest {
    const message = createBaseListDependenciesRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDependenciesResponse(): ListDependenciesResponse {
  return { dependencies: [], nextPageToken: "" };
}

export const ListDependenciesResponse: MessageFns<ListDependenciesResponse> = {
  encode(message: ListDependenciesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dependencies) {
      Dependency.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDependenciesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDependenciesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dependencies.push(Dependency.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDependenciesResponse {
    return {
      dependencies: globalThis.Array.isArray(object?.dependencies)
        ? object.dependencies.map((e: any) => Dependency.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDependenciesResponse): unknown {
    const obj: any = {};
    if (message.dependencies?.length) {
      obj.dependencies = message.dependencies.map((e) => Dependency.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDependenciesResponse>): ListDependenciesResponse {
    return ListDependenciesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDependenciesResponse>): ListDependenciesResponse {
    const message = createBaseListDependenciesResponse();
    message.dependencies = object.dependencies?.map((e) => Dependency.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateExternalApiRequest(): CreateExternalApiRequest {
  return { parent: "", externalApiId: "", externalApi: undefined };
}

export const CreateExternalApiRequest: MessageFns<CreateExternalApiRequest> = {
  encode(message: CreateExternalApiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.externalApiId !== "") {
      writer.uint32(18).string(message.externalApiId);
    }
    if (message.externalApi !== undefined) {
      ExternalApi.encode(message.externalApi, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateExternalApiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateExternalApiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.externalApiId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.externalApi = ExternalApi.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateExternalApiRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      externalApiId: isSet(object.externalApiId) ? globalThis.String(object.externalApiId) : "",
      externalApi: isSet(object.externalApi) ? ExternalApi.fromJSON(object.externalApi) : undefined,
    };
  },

  toJSON(message: CreateExternalApiRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.externalApiId !== "") {
      obj.externalApiId = message.externalApiId;
    }
    if (message.externalApi !== undefined) {
      obj.externalApi = ExternalApi.toJSON(message.externalApi);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateExternalApiRequest>): CreateExternalApiRequest {
    return CreateExternalApiRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateExternalApiRequest>): CreateExternalApiRequest {
    const message = createBaseCreateExternalApiRequest();
    message.parent = object.parent ?? "";
    message.externalApiId = object.externalApiId ?? "";
    message.externalApi = (object.externalApi !== undefined && object.externalApi !== null)
      ? ExternalApi.fromPartial(object.externalApi)
      : undefined;
    return message;
  },
};

function createBaseGetExternalApiRequest(): GetExternalApiRequest {
  return { name: "" };
}

export const GetExternalApiRequest: MessageFns<GetExternalApiRequest> = {
  encode(message: GetExternalApiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetExternalApiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetExternalApiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetExternalApiRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetExternalApiRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetExternalApiRequest>): GetExternalApiRequest {
    return GetExternalApiRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetExternalApiRequest>): GetExternalApiRequest {
    const message = createBaseGetExternalApiRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateExternalApiRequest(): UpdateExternalApiRequest {
  return { externalApi: undefined, updateMask: undefined };
}

export const UpdateExternalApiRequest: MessageFns<UpdateExternalApiRequest> = {
  encode(message: UpdateExternalApiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.externalApi !== undefined) {
      ExternalApi.encode(message.externalApi, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateExternalApiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateExternalApiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.externalApi = ExternalApi.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateExternalApiRequest {
    return {
      externalApi: isSet(object.externalApi) ? ExternalApi.fromJSON(object.externalApi) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateExternalApiRequest): unknown {
    const obj: any = {};
    if (message.externalApi !== undefined) {
      obj.externalApi = ExternalApi.toJSON(message.externalApi);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateExternalApiRequest>): UpdateExternalApiRequest {
    return UpdateExternalApiRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateExternalApiRequest>): UpdateExternalApiRequest {
    const message = createBaseUpdateExternalApiRequest();
    message.externalApi = (object.externalApi !== undefined && object.externalApi !== null)
      ? ExternalApi.fromPartial(object.externalApi)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteExternalApiRequest(): DeleteExternalApiRequest {
  return { name: "" };
}

export const DeleteExternalApiRequest: MessageFns<DeleteExternalApiRequest> = {
  encode(message: DeleteExternalApiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteExternalApiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteExternalApiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteExternalApiRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteExternalApiRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteExternalApiRequest>): DeleteExternalApiRequest {
    return DeleteExternalApiRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteExternalApiRequest>): DeleteExternalApiRequest {
    const message = createBaseDeleteExternalApiRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListExternalApisRequest(): ListExternalApisRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListExternalApisRequest: MessageFns<ListExternalApisRequest> = {
  encode(message: ListExternalApisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExternalApisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExternalApisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExternalApisRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListExternalApisRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExternalApisRequest>): ListExternalApisRequest {
    return ListExternalApisRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExternalApisRequest>): ListExternalApisRequest {
    const message = createBaseListExternalApisRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListExternalApisResponse(): ListExternalApisResponse {
  return { externalApis: [], nextPageToken: "" };
}

export const ListExternalApisResponse: MessageFns<ListExternalApisResponse> = {
  encode(message: ListExternalApisResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.externalApis) {
      ExternalApi.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExternalApisResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExternalApisResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.externalApis.push(ExternalApi.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExternalApisResponse {
    return {
      externalApis: globalThis.Array.isArray(object?.externalApis)
        ? object.externalApis.map((e: any) => ExternalApi.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListExternalApisResponse): unknown {
    const obj: any = {};
    if (message.externalApis?.length) {
      obj.externalApis = message.externalApis.map((e) => ExternalApi.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExternalApisResponse>): ListExternalApisResponse {
    return ListExternalApisResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExternalApisResponse>): ListExternalApisResponse {
    const message = createBaseListExternalApisResponse();
    message.externalApis = object.externalApis?.map((e) => ExternalApi.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** This service provides all methods related to the API hub. */
export type ApiHubDefinition = typeof ApiHubDefinition;
export const ApiHubDefinition = {
  name: "ApiHub",
  fullName: "google.cloud.apihub.v1.ApiHub",
  methods: {
    /**
     * Create an API resource in the API hub.
     * Once an API resource is created, versions can be added to it.
     */
    createApi: {
      name: "CreateApi",
      requestType: CreateApiRequest,
      requestStream: false,
      responseType: Api,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 112, 97, 114, 101, 110, 116, 44, 97, 112, 105, 44, 97, 112, 105, 95, 105, 100])],
          578365826: [
            Buffer.from([
              47,
              58,
              3,
              97,
              112,
              105,
              34,
              40,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              112,
              105,
              115,
            ]),
          ],
        },
      },
    },
    /** Get API resource details including the API versions contained in it. */
    getApi: {
      name: "GetApi",
      requestType: GetApiRequest,
      requestStream: false,
      responseType: Api,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              42,
              18,
              40,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List API resources in the API hub. */
    listApis: {
      name: "ListApis",
      requestType: ListApisRequest,
      requestStream: false,
      responseType: ListApisResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              42,
              18,
              40,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              112,
              105,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Update an API resource in the API hub. The following fields in the
     * [API][] can be updated:
     *
     * * [display_name][google.cloud.apihub.v1.Api.display_name]
     * * [description][google.cloud.apihub.v1.Api.description]
     * * [owner][google.cloud.apihub.v1.Api.owner]
     * * [documentation][google.cloud.apihub.v1.Api.documentation]
     * * [target_user][google.cloud.apihub.v1.Api.target_user]
     * * [team][google.cloud.apihub.v1.Api.team]
     * * [business_unit][google.cloud.apihub.v1.Api.business_unit]
     * * [maturity_level][google.cloud.apihub.v1.Api.maturity_level]
     * * [attributes][google.cloud.apihub.v1.Api.attributes]
     *
     * The
     * [update_mask][google.cloud.apihub.v1.UpdateApiRequest.update_mask]
     * should be used to specify the fields being updated.
     *
     * Updating the owner field requires complete owner message
     * and updates both owner and email fields.
     */
    updateApi: {
      name: "UpdateApi",
      requestType: UpdateApiRequest,
      requestStream: false,
      responseType: Api,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 97, 112, 105, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              51,
              58,
              3,
              97,
              112,
              105,
              50,
              44,
              47,
              118,
              49,
              47,
              123,
              97,
              112,
              105,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Delete an API resource in the API hub. API can only be deleted if all
     * underlying versions are deleted.
     */
    deleteApi: {
      name: "DeleteApi",
      requestType: DeleteApiRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              42,
              42,
              40,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Create an API version for an API resource in the API hub. */
    createVersion: {
      name: "CreateVersion",
      requestType: CreateVersionRequest,
      requestStream: false,
      responseType: Version,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              44,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              7,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Get details about the API version of an API resource. This will include
     * information about the specs and operations present in the API
     * version as well as the deployments linked to it.
     */
    getVersion: {
      name: "GetVersion",
      requestType: GetVersionRequest,
      requestStream: false,
      responseType: Version,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List API versions of an API resource in the API hub. */
    listVersions: {
      name: "ListVersions",
      requestType: ListVersionsRequest,
      requestStream: false,
      responseType: ListVersionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Update API version. The following fields in the
     * [version][google.cloud.apihub.v1.Version] can be updated currently:
     *
     * * [display_name][google.cloud.apihub.v1.Version.display_name]
     * * [description][google.cloud.apihub.v1.Version.description]
     * * [documentation][google.cloud.apihub.v1.Version.documentation]
     * * [deployments][google.cloud.apihub.v1.Version.deployments]
     * * [lifecycle][google.cloud.apihub.v1.Version.lifecycle]
     * * [compliance][google.cloud.apihub.v1.Version.compliance]
     * * [accreditation][google.cloud.apihub.v1.Version.accreditation]
     * * [attributes][google.cloud.apihub.v1.Version.attributes]
     *
     * The
     * [update_mask][google.cloud.apihub.v1.UpdateVersionRequest.update_mask]
     * should be used to specify the fields being updated.
     */
    updateVersion: {
      name: "UpdateVersion",
      requestType: UpdateVersionRequest,
      requestStream: false,
      responseType: Version,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              19,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              70,
              58,
              7,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              50,
              59,
              47,
              118,
              49,
              47,
              123,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Delete an API version. Version can only be deleted if all underlying specs,
     * operations, definitions and linked deployments are deleted.
     */
    deleteVersion: {
      name: "DeleteVersion",
      requestType: DeleteVersionRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              42,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Add a spec to an API version in the API hub.
     * Multiple specs can be added to an API version.
     * Note, while adding a spec, at least one of `contents` or `source_uri` must
     * be provided. If `contents` is provided, then `spec_type` must also be
     * provided.
     *
     * On adding a spec with contents to the version, the operations present in it
     * will be added to the version.Note that the file contents in the spec should
     * be of the same type as defined in the
     * `projects/{project}/locations/{location}/attributes/system-spec-type`
     * attribute associated with spec resource. Note that specs of various types
     * can be uploaded, however parsing of details is supported for OpenAPI spec
     * currently.
     *
     * In order to access the information parsed from the spec, use the
     * [GetSpec][google.cloud.apihub.v1.ApiHub.GetSpec] method.
     * In order to access the raw contents for a particular spec, use the
     * [GetSpecContents][google.cloud.apihub.v1.ApiHub.GetSpecContents] method.
     * In order to access the operations parsed from the spec, use the
     * [ListAPIOperations][google.cloud.apihub.v1.ApiHub.ListApiOperations]
     * method.
     */
    createSpec: {
      name: "CreateSpec",
      requestType: CreateSpecRequest,
      requestStream: false,
      responseType: Spec,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 112, 97, 114, 101, 110, 116, 44, 115, 112, 101, 99, 44, 115, 112, 101, 99, 95, 105, 100]),
          ],
          578365826: [
            Buffer.from([
              67,
              58,
              4,
              115,
              112,
              101,
              99,
              34,
              59,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              112,
              101,
              99,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Get details about the information parsed from a spec.
     * Note that this method does not return the raw spec contents.
     * Use [GetSpecContents][google.cloud.apihub.v1.ApiHub.GetSpecContents] method
     * to retrieve the same.
     */
    getSpec: {
      name: "GetSpec",
      requestType: GetSpecRequest,
      requestStream: false,
      responseType: Spec,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Get spec contents. */
    getSpecContents: {
      name: "GetSpecContents",
      requestType: GetSpecContentsRequest,
      requestStream: false,
      responseType: SpecContents,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              70,
              18,
              68,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
              58,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** List specs corresponding to a particular API resource. */
    listSpecs: {
      name: "ListSpecs",
      requestType: ListSpecsRequest,
      requestStream: false,
      responseType: ListSpecsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              112,
              101,
              99,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Update spec. The following fields in the
     * [spec][google.cloud.apihub.v1.Spec] can be updated:
     *
     * * [display_name][google.cloud.apihub.v1.Spec.display_name]
     * * [source_uri][google.cloud.apihub.v1.Spec.source_uri]
     * * [lint_response][google.cloud.apihub.v1.Spec.lint_response]
     * * [attributes][google.cloud.apihub.v1.Spec.attributes]
     * * [contents][google.cloud.apihub.v1.Spec.contents]
     * * [spec_type][google.cloud.apihub.v1.Spec.spec_type]
     *
     * In case of an OAS spec, updating spec contents can lead to:
     * 1. Creation, deletion and update of operations.
     * 2. Creation, deletion and update of definitions.
     * 3. Update of other info parsed out from the new spec.
     *
     * In case of contents or source_uri being present in update mask, spec_type
     * must also be present. Also, spec_type can not be present in update mask if
     * contents or source_uri is not present.
     *
     * The
     * [update_mask][google.cloud.apihub.v1.UpdateSpecRequest.update_mask]
     * should be used to specify the fields being updated.
     */
    updateSpec: {
      name: "UpdateSpec",
      requestType: UpdateSpecRequest,
      requestStream: false,
      responseType: Spec,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 115, 112, 101, 99, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              72,
              58,
              4,
              115,
              112,
              101,
              99,
              50,
              64,
              47,
              118,
              49,
              47,
              123,
              115,
              112,
              101,
              99,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Delete a spec.
     * Deleting a spec will also delete the associated operations from the
     * version.
     */
    deleteSpec: {
      name: "DeleteSpec",
      requestType: DeleteSpecRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              42,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Get details about a particular operation in API version. */
    getApiOperation: {
      name: "GetApiOperation",
      requestType: GetApiOperationRequest,
      requestStream: false,
      responseType: ApiOperation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              66,
              18,
              64,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List operations in an API version. */
    listApiOperations: {
      name: "ListApiOperations",
      requestType: ListApiOperationsRequest,
      requestStream: false,
      responseType: ListApiOperationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              66,
              18,
              64,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Get details about a definition in an API version. */
    getDefinition: {
      name: "GetDefinition",
      requestType: GetDefinitionRequest,
      requestStream: false,
      responseType: Definition,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              67,
              18,
              65,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Create a deployment resource in the API hub.
     * Once a deployment resource is created, it can be associated with API
     * versions.
     */
    createDeployment: {
      name: "CreateDeployment",
      requestType: CreateDeploymentRequest,
      requestStream: false,
      responseType: Deployment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              31,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              44,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              10,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              34,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Get details about a deployment and the API versions linked to it. */
    getDeployment: {
      name: "GetDeployment",
      requestType: GetDeploymentRequest,
      requestStream: false,
      responseType: Deployment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List deployment resources in the API hub. */
    listDeployments: {
      name: "ListDeployments",
      requestType: ListDeploymentsRequest,
      requestStream: false,
      responseType: ListDeploymentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Update a deployment resource in the API hub. The following fields in the
     * [deployment resource][google.cloud.apihub.v1.Deployment] can be
     * updated:
     *
     * * [display_name][google.cloud.apihub.v1.Deployment.display_name]
     * * [description][google.cloud.apihub.v1.Deployment.description]
     * * [documentation][google.cloud.apihub.v1.Deployment.documentation]
     * * [deployment_type][google.cloud.apihub.v1.Deployment.deployment_type]
     * * [resource_uri][google.cloud.apihub.v1.Deployment.resource_uri]
     * * [endpoints][google.cloud.apihub.v1.Deployment.endpoints]
     * * [slo][google.cloud.apihub.v1.Deployment.slo]
     * * [environment][google.cloud.apihub.v1.Deployment.environment]
     * * [attributes][google.cloud.apihub.v1.Deployment.attributes]
     *
     * The
     * [update_mask][google.cloud.apihub.v1.UpdateDeploymentRequest.update_mask]
     * should be used to specify the fields being updated.
     */
    updateDeployment: {
      name: "UpdateDeployment",
      requestType: UpdateDeploymentRequest,
      requestStream: false,
      responseType: Deployment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              72,
              58,
              10,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              50,
              58,
              47,
              118,
              49,
              47,
              123,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Delete a deployment resource in the API hub. */
    deleteDeployment: {
      name: "DeleteDeployment",
      requestType: DeleteDeploymentRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              42,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Create a user defined attribute.
     *
     * Certain pre defined attributes are already created by the API hub. These
     * attributes will have type as `SYSTEM_DEFINED` and can be listed via
     * [ListAttributes][google.cloud.apihub.v1.ApiHub.ListAttributes] method.
     * Allowed values for the same can be updated via
     * [UpdateAttribute][google.cloud.apihub.v1.ApiHub.UpdateAttribute] method.
     */
    createAttribute: {
      name: "CreateAttribute",
      requestType: CreateAttributeRequest,
      requestStream: false,
      responseType: Attribute,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              29,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              44,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              59,
              58,
              9,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              34,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Get details about the attribute. */
    getAttribute: {
      name: "GetAttribute",
      requestType: GetAttributeRequest,
      requestStream: false,
      responseType: Attribute,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Update the attribute.  The following fields in the
     * [Attribute resource][google.cloud.apihub.v1.Attribute] can be updated:
     *
     * * [display_name][google.cloud.apihub.v1.Attribute.display_name]
     * The display name can be updated for user defined attributes only.
     * * [description][google.cloud.apihub.v1.Attribute.description]
     * The description can be updated for user defined attributes only.
     * * [allowed_values][google.cloud.apihub.v1.Attribute.allowed_values]
     * To update the list of allowed values, clients need to use the fetched list
     * of allowed values and add or remove values to or from the same list.
     * The mutable allowed values can be updated for both user defined and System
     * defined attributes. The immutable allowed values cannot be updated or
     * deleted. The updated list of allowed values cannot be empty. If an allowed
     * value that is already used by some resource's attribute is deleted, then
     * the association between the resource and the attribute value will also be
     * deleted.
     * * [cardinality][google.cloud.apihub.v1.Attribute.cardinality]
     * The cardinality can be updated for user defined attributes only.
     * Cardinality can only be increased during an update.
     *
     * The
     * [update_mask][google.cloud.apihub.v1.UpdateAttributeRequest.update_mask]
     * should be used to specify the fields being updated.
     */
    updateAttribute: {
      name: "UpdateAttribute",
      requestType: UpdateAttributeRequest,
      requestStream: false,
      responseType: Attribute,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              69,
              58,
              9,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              50,
              56,
              47,
              118,
              49,
              47,
              123,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Delete an attribute.
     *
     * Note: System defined attributes cannot be deleted. All
     * associations of the attribute being deleted with any API hub resource will
     * also get deleted.
     */
    deleteAttribute: {
      name: "DeleteAttribute",
      requestType: DeleteAttributeRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              42,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List all attributes. */
    listAttributes: {
      name: "ListAttributes",
      requestType: ListAttributesRequest,
      requestStream: false,
      responseType: ListAttributesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Search across API-Hub resources. */
    searchResources: {
      name: "SearchResources",
      requestType: SearchResourcesRequest,
      requestStream: false,
      responseType: SearchResourcesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 108, 111, 99, 97, 116, 105, 111, 110, 44, 113, 117, 101, 114, 121])],
          578365826: [
            Buffer.from([
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              49,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Create an External API resource in the API hub. */
    createExternalApi: {
      name: "CreateExternalApi",
      requestType: CreateExternalApiRequest,
      requestStream: false,
      responseType: ExternalApi,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              35,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              97,
              112,
              105,
              44,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              97,
              112,
              105,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              64,
              58,
              12,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              97,
              112,
              105,
              34,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              65,
              112,
              105,
              115,
            ]),
          ],
        },
      },
    },
    /** Get details about an External API resource in the API hub. */
    getExternalApi: {
      name: "GetExternalApi",
      requestType: GetExternalApiRequest,
      requestStream: false,
      responseType: ExternalApi,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              65,
              112,
              105,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Update an External API resource in the API hub. The following fields can be
     * updated:
     *
     * * [display_name][google.cloud.apihub.v1.ExternalApi.display_name]
     * * [description][google.cloud.apihub.v1.ExternalApi.description]
     * * [documentation][google.cloud.apihub.v1.ExternalApi.documentation]
     * * [endpoints][google.cloud.apihub.v1.ExternalApi.endpoints]
     * * [paths][google.cloud.apihub.v1.ExternalApi.paths]
     *
     * The
     * [update_mask][google.cloud.apihub.v1.UpdateExternalApiRequest.update_mask]
     * should be used to specify the fields being updated.
     */
    updateExternalApi: {
      name: "UpdateExternalApi",
      requestType: UpdateExternalApiRequest,
      requestStream: false,
      responseType: ExternalApi,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              97,
              112,
              105,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              77,
              58,
              12,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              97,
              112,
              105,
              50,
              61,
              47,
              118,
              49,
              47,
              123,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              97,
              112,
              105,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              65,
              112,
              105,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Delete an External API resource in the API hub. */
    deleteExternalApi: {
      name: "DeleteExternalApi",
      requestType: DeleteExternalApiRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              42,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              65,
              112,
              105,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List External API resources in the API hub. */
    listExternalApis: {
      name: "ListExternalApis",
      requestType: ListExternalApisRequest,
      requestStream: false,
      responseType: ListExternalApisResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              65,
              112,
              105,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ApiHubServiceImplementation<CallContextExt = {}> {
  /**
   * Create an API resource in the API hub.
   * Once an API resource is created, versions can be added to it.
   */
  createApi(request: CreateApiRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Api>>;
  /** Get API resource details including the API versions contained in it. */
  getApi(request: GetApiRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Api>>;
  /** List API resources in the API hub. */
  listApis(request: ListApisRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListApisResponse>>;
  /**
   * Update an API resource in the API hub. The following fields in the
   * [API][] can be updated:
   *
   * * [display_name][google.cloud.apihub.v1.Api.display_name]
   * * [description][google.cloud.apihub.v1.Api.description]
   * * [owner][google.cloud.apihub.v1.Api.owner]
   * * [documentation][google.cloud.apihub.v1.Api.documentation]
   * * [target_user][google.cloud.apihub.v1.Api.target_user]
   * * [team][google.cloud.apihub.v1.Api.team]
   * * [business_unit][google.cloud.apihub.v1.Api.business_unit]
   * * [maturity_level][google.cloud.apihub.v1.Api.maturity_level]
   * * [attributes][google.cloud.apihub.v1.Api.attributes]
   *
   * The
   * [update_mask][google.cloud.apihub.v1.UpdateApiRequest.update_mask]
   * should be used to specify the fields being updated.
   *
   * Updating the owner field requires complete owner message
   * and updates both owner and email fields.
   */
  updateApi(request: UpdateApiRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Api>>;
  /**
   * Delete an API resource in the API hub. API can only be deleted if all
   * underlying versions are deleted.
   */
  deleteApi(request: DeleteApiRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Create an API version for an API resource in the API hub. */
  createVersion(request: CreateVersionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Version>>;
  /**
   * Get details about the API version of an API resource. This will include
   * information about the specs and operations present in the API
   * version as well as the deployments linked to it.
   */
  getVersion(request: GetVersionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Version>>;
  /** List API versions of an API resource in the API hub. */
  listVersions(
    request: ListVersionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListVersionsResponse>>;
  /**
   * Update API version. The following fields in the
   * [version][google.cloud.apihub.v1.Version] can be updated currently:
   *
   * * [display_name][google.cloud.apihub.v1.Version.display_name]
   * * [description][google.cloud.apihub.v1.Version.description]
   * * [documentation][google.cloud.apihub.v1.Version.documentation]
   * * [deployments][google.cloud.apihub.v1.Version.deployments]
   * * [lifecycle][google.cloud.apihub.v1.Version.lifecycle]
   * * [compliance][google.cloud.apihub.v1.Version.compliance]
   * * [accreditation][google.cloud.apihub.v1.Version.accreditation]
   * * [attributes][google.cloud.apihub.v1.Version.attributes]
   *
   * The
   * [update_mask][google.cloud.apihub.v1.UpdateVersionRequest.update_mask]
   * should be used to specify the fields being updated.
   */
  updateVersion(request: UpdateVersionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Version>>;
  /**
   * Delete an API version. Version can only be deleted if all underlying specs,
   * operations, definitions and linked deployments are deleted.
   */
  deleteVersion(request: DeleteVersionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Add a spec to an API version in the API hub.
   * Multiple specs can be added to an API version.
   * Note, while adding a spec, at least one of `contents` or `source_uri` must
   * be provided. If `contents` is provided, then `spec_type` must also be
   * provided.
   *
   * On adding a spec with contents to the version, the operations present in it
   * will be added to the version.Note that the file contents in the spec should
   * be of the same type as defined in the
   * `projects/{project}/locations/{location}/attributes/system-spec-type`
   * attribute associated with spec resource. Note that specs of various types
   * can be uploaded, however parsing of details is supported for OpenAPI spec
   * currently.
   *
   * In order to access the information parsed from the spec, use the
   * [GetSpec][google.cloud.apihub.v1.ApiHub.GetSpec] method.
   * In order to access the raw contents for a particular spec, use the
   * [GetSpecContents][google.cloud.apihub.v1.ApiHub.GetSpecContents] method.
   * In order to access the operations parsed from the spec, use the
   * [ListAPIOperations][google.cloud.apihub.v1.ApiHub.ListApiOperations]
   * method.
   */
  createSpec(request: CreateSpecRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Spec>>;
  /**
   * Get details about the information parsed from a spec.
   * Note that this method does not return the raw spec contents.
   * Use [GetSpecContents][google.cloud.apihub.v1.ApiHub.GetSpecContents] method
   * to retrieve the same.
   */
  getSpec(request: GetSpecRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Spec>>;
  /** Get spec contents. */
  getSpecContents(
    request: GetSpecContentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SpecContents>>;
  /** List specs corresponding to a particular API resource. */
  listSpecs(request: ListSpecsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListSpecsResponse>>;
  /**
   * Update spec. The following fields in the
   * [spec][google.cloud.apihub.v1.Spec] can be updated:
   *
   * * [display_name][google.cloud.apihub.v1.Spec.display_name]
   * * [source_uri][google.cloud.apihub.v1.Spec.source_uri]
   * * [lint_response][google.cloud.apihub.v1.Spec.lint_response]
   * * [attributes][google.cloud.apihub.v1.Spec.attributes]
   * * [contents][google.cloud.apihub.v1.Spec.contents]
   * * [spec_type][google.cloud.apihub.v1.Spec.spec_type]
   *
   * In case of an OAS spec, updating spec contents can lead to:
   * 1. Creation, deletion and update of operations.
   * 2. Creation, deletion and update of definitions.
   * 3. Update of other info parsed out from the new spec.
   *
   * In case of contents or source_uri being present in update mask, spec_type
   * must also be present. Also, spec_type can not be present in update mask if
   * contents or source_uri is not present.
   *
   * The
   * [update_mask][google.cloud.apihub.v1.UpdateSpecRequest.update_mask]
   * should be used to specify the fields being updated.
   */
  updateSpec(request: UpdateSpecRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Spec>>;
  /**
   * Delete a spec.
   * Deleting a spec will also delete the associated operations from the
   * version.
   */
  deleteSpec(request: DeleteSpecRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Get details about a particular operation in API version. */
  getApiOperation(
    request: GetApiOperationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ApiOperation>>;
  /** List operations in an API version. */
  listApiOperations(
    request: ListApiOperationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListApiOperationsResponse>>;
  /** Get details about a definition in an API version. */
  getDefinition(request: GetDefinitionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Definition>>;
  /**
   * Create a deployment resource in the API hub.
   * Once a deployment resource is created, it can be associated with API
   * versions.
   */
  createDeployment(
    request: CreateDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Deployment>>;
  /** Get details about a deployment and the API versions linked to it. */
  getDeployment(request: GetDeploymentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Deployment>>;
  /** List deployment resources in the API hub. */
  listDeployments(
    request: ListDeploymentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDeploymentsResponse>>;
  /**
   * Update a deployment resource in the API hub. The following fields in the
   * [deployment resource][google.cloud.apihub.v1.Deployment] can be
   * updated:
   *
   * * [display_name][google.cloud.apihub.v1.Deployment.display_name]
   * * [description][google.cloud.apihub.v1.Deployment.description]
   * * [documentation][google.cloud.apihub.v1.Deployment.documentation]
   * * [deployment_type][google.cloud.apihub.v1.Deployment.deployment_type]
   * * [resource_uri][google.cloud.apihub.v1.Deployment.resource_uri]
   * * [endpoints][google.cloud.apihub.v1.Deployment.endpoints]
   * * [slo][google.cloud.apihub.v1.Deployment.slo]
   * * [environment][google.cloud.apihub.v1.Deployment.environment]
   * * [attributes][google.cloud.apihub.v1.Deployment.attributes]
   *
   * The
   * [update_mask][google.cloud.apihub.v1.UpdateDeploymentRequest.update_mask]
   * should be used to specify the fields being updated.
   */
  updateDeployment(
    request: UpdateDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Deployment>>;
  /** Delete a deployment resource in the API hub. */
  deleteDeployment(
    request: DeleteDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Create a user defined attribute.
   *
   * Certain pre defined attributes are already created by the API hub. These
   * attributes will have type as `SYSTEM_DEFINED` and can be listed via
   * [ListAttributes][google.cloud.apihub.v1.ApiHub.ListAttributes] method.
   * Allowed values for the same can be updated via
   * [UpdateAttribute][google.cloud.apihub.v1.ApiHub.UpdateAttribute] method.
   */
  createAttribute(
    request: CreateAttributeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Attribute>>;
  /** Get details about the attribute. */
  getAttribute(request: GetAttributeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Attribute>>;
  /**
   * Update the attribute.  The following fields in the
   * [Attribute resource][google.cloud.apihub.v1.Attribute] can be updated:
   *
   * * [display_name][google.cloud.apihub.v1.Attribute.display_name]
   * The display name can be updated for user defined attributes only.
   * * [description][google.cloud.apihub.v1.Attribute.description]
   * The description can be updated for user defined attributes only.
   * * [allowed_values][google.cloud.apihub.v1.Attribute.allowed_values]
   * To update the list of allowed values, clients need to use the fetched list
   * of allowed values and add or remove values to or from the same list.
   * The mutable allowed values can be updated for both user defined and System
   * defined attributes. The immutable allowed values cannot be updated or
   * deleted. The updated list of allowed values cannot be empty. If an allowed
   * value that is already used by some resource's attribute is deleted, then
   * the association between the resource and the attribute value will also be
   * deleted.
   * * [cardinality][google.cloud.apihub.v1.Attribute.cardinality]
   * The cardinality can be updated for user defined attributes only.
   * Cardinality can only be increased during an update.
   *
   * The
   * [update_mask][google.cloud.apihub.v1.UpdateAttributeRequest.update_mask]
   * should be used to specify the fields being updated.
   */
  updateAttribute(
    request: UpdateAttributeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Attribute>>;
  /**
   * Delete an attribute.
   *
   * Note: System defined attributes cannot be deleted. All
   * associations of the attribute being deleted with any API hub resource will
   * also get deleted.
   */
  deleteAttribute(request: DeleteAttributeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** List all attributes. */
  listAttributes(
    request: ListAttributesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAttributesResponse>>;
  /** Search across API-Hub resources. */
  searchResources(
    request: SearchResourcesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchResourcesResponse>>;
  /** Create an External API resource in the API hub. */
  createExternalApi(
    request: CreateExternalApiRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExternalApi>>;
  /** Get details about an External API resource in the API hub. */
  getExternalApi(
    request: GetExternalApiRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExternalApi>>;
  /**
   * Update an External API resource in the API hub. The following fields can be
   * updated:
   *
   * * [display_name][google.cloud.apihub.v1.ExternalApi.display_name]
   * * [description][google.cloud.apihub.v1.ExternalApi.description]
   * * [documentation][google.cloud.apihub.v1.ExternalApi.documentation]
   * * [endpoints][google.cloud.apihub.v1.ExternalApi.endpoints]
   * * [paths][google.cloud.apihub.v1.ExternalApi.paths]
   *
   * The
   * [update_mask][google.cloud.apihub.v1.UpdateExternalApiRequest.update_mask]
   * should be used to specify the fields being updated.
   */
  updateExternalApi(
    request: UpdateExternalApiRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExternalApi>>;
  /** Delete an External API resource in the API hub. */
  deleteExternalApi(
    request: DeleteExternalApiRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** List External API resources in the API hub. */
  listExternalApis(
    request: ListExternalApisRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListExternalApisResponse>>;
}

export interface ApiHubClient<CallOptionsExt = {}> {
  /**
   * Create an API resource in the API hub.
   * Once an API resource is created, versions can be added to it.
   */
  createApi(request: DeepPartial<CreateApiRequest>, options?: CallOptions & CallOptionsExt): Promise<Api>;
  /** Get API resource details including the API versions contained in it. */
  getApi(request: DeepPartial<GetApiRequest>, options?: CallOptions & CallOptionsExt): Promise<Api>;
  /** List API resources in the API hub. */
  listApis(request: DeepPartial<ListApisRequest>, options?: CallOptions & CallOptionsExt): Promise<ListApisResponse>;
  /**
   * Update an API resource in the API hub. The following fields in the
   * [API][] can be updated:
   *
   * * [display_name][google.cloud.apihub.v1.Api.display_name]
   * * [description][google.cloud.apihub.v1.Api.description]
   * * [owner][google.cloud.apihub.v1.Api.owner]
   * * [documentation][google.cloud.apihub.v1.Api.documentation]
   * * [target_user][google.cloud.apihub.v1.Api.target_user]
   * * [team][google.cloud.apihub.v1.Api.team]
   * * [business_unit][google.cloud.apihub.v1.Api.business_unit]
   * * [maturity_level][google.cloud.apihub.v1.Api.maturity_level]
   * * [attributes][google.cloud.apihub.v1.Api.attributes]
   *
   * The
   * [update_mask][google.cloud.apihub.v1.UpdateApiRequest.update_mask]
   * should be used to specify the fields being updated.
   *
   * Updating the owner field requires complete owner message
   * and updates both owner and email fields.
   */
  updateApi(request: DeepPartial<UpdateApiRequest>, options?: CallOptions & CallOptionsExt): Promise<Api>;
  /**
   * Delete an API resource in the API hub. API can only be deleted if all
   * underlying versions are deleted.
   */
  deleteApi(request: DeepPartial<DeleteApiRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Create an API version for an API resource in the API hub. */
  createVersion(request: DeepPartial<CreateVersionRequest>, options?: CallOptions & CallOptionsExt): Promise<Version>;
  /**
   * Get details about the API version of an API resource. This will include
   * information about the specs and operations present in the API
   * version as well as the deployments linked to it.
   */
  getVersion(request: DeepPartial<GetVersionRequest>, options?: CallOptions & CallOptionsExt): Promise<Version>;
  /** List API versions of an API resource in the API hub. */
  listVersions(
    request: DeepPartial<ListVersionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListVersionsResponse>;
  /**
   * Update API version. The following fields in the
   * [version][google.cloud.apihub.v1.Version] can be updated currently:
   *
   * * [display_name][google.cloud.apihub.v1.Version.display_name]
   * * [description][google.cloud.apihub.v1.Version.description]
   * * [documentation][google.cloud.apihub.v1.Version.documentation]
   * * [deployments][google.cloud.apihub.v1.Version.deployments]
   * * [lifecycle][google.cloud.apihub.v1.Version.lifecycle]
   * * [compliance][google.cloud.apihub.v1.Version.compliance]
   * * [accreditation][google.cloud.apihub.v1.Version.accreditation]
   * * [attributes][google.cloud.apihub.v1.Version.attributes]
   *
   * The
   * [update_mask][google.cloud.apihub.v1.UpdateVersionRequest.update_mask]
   * should be used to specify the fields being updated.
   */
  updateVersion(request: DeepPartial<UpdateVersionRequest>, options?: CallOptions & CallOptionsExt): Promise<Version>;
  /**
   * Delete an API version. Version can only be deleted if all underlying specs,
   * operations, definitions and linked deployments are deleted.
   */
  deleteVersion(request: DeepPartial<DeleteVersionRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Add a spec to an API version in the API hub.
   * Multiple specs can be added to an API version.
   * Note, while adding a spec, at least one of `contents` or `source_uri` must
   * be provided. If `contents` is provided, then `spec_type` must also be
   * provided.
   *
   * On adding a spec with contents to the version, the operations present in it
   * will be added to the version.Note that the file contents in the spec should
   * be of the same type as defined in the
   * `projects/{project}/locations/{location}/attributes/system-spec-type`
   * attribute associated with spec resource. Note that specs of various types
   * can be uploaded, however parsing of details is supported for OpenAPI spec
   * currently.
   *
   * In order to access the information parsed from the spec, use the
   * [GetSpec][google.cloud.apihub.v1.ApiHub.GetSpec] method.
   * In order to access the raw contents for a particular spec, use the
   * [GetSpecContents][google.cloud.apihub.v1.ApiHub.GetSpecContents] method.
   * In order to access the operations parsed from the spec, use the
   * [ListAPIOperations][google.cloud.apihub.v1.ApiHub.ListApiOperations]
   * method.
   */
  createSpec(request: DeepPartial<CreateSpecRequest>, options?: CallOptions & CallOptionsExt): Promise<Spec>;
  /**
   * Get details about the information parsed from a spec.
   * Note that this method does not return the raw spec contents.
   * Use [GetSpecContents][google.cloud.apihub.v1.ApiHub.GetSpecContents] method
   * to retrieve the same.
   */
  getSpec(request: DeepPartial<GetSpecRequest>, options?: CallOptions & CallOptionsExt): Promise<Spec>;
  /** Get spec contents. */
  getSpecContents(
    request: DeepPartial<GetSpecContentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SpecContents>;
  /** List specs corresponding to a particular API resource. */
  listSpecs(request: DeepPartial<ListSpecsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListSpecsResponse>;
  /**
   * Update spec. The following fields in the
   * [spec][google.cloud.apihub.v1.Spec] can be updated:
   *
   * * [display_name][google.cloud.apihub.v1.Spec.display_name]
   * * [source_uri][google.cloud.apihub.v1.Spec.source_uri]
   * * [lint_response][google.cloud.apihub.v1.Spec.lint_response]
   * * [attributes][google.cloud.apihub.v1.Spec.attributes]
   * * [contents][google.cloud.apihub.v1.Spec.contents]
   * * [spec_type][google.cloud.apihub.v1.Spec.spec_type]
   *
   * In case of an OAS spec, updating spec contents can lead to:
   * 1. Creation, deletion and update of operations.
   * 2. Creation, deletion and update of definitions.
   * 3. Update of other info parsed out from the new spec.
   *
   * In case of contents or source_uri being present in update mask, spec_type
   * must also be present. Also, spec_type can not be present in update mask if
   * contents or source_uri is not present.
   *
   * The
   * [update_mask][google.cloud.apihub.v1.UpdateSpecRequest.update_mask]
   * should be used to specify the fields being updated.
   */
  updateSpec(request: DeepPartial<UpdateSpecRequest>, options?: CallOptions & CallOptionsExt): Promise<Spec>;
  /**
   * Delete a spec.
   * Deleting a spec will also delete the associated operations from the
   * version.
   */
  deleteSpec(request: DeepPartial<DeleteSpecRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Get details about a particular operation in API version. */
  getApiOperation(
    request: DeepPartial<GetApiOperationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ApiOperation>;
  /** List operations in an API version. */
  listApiOperations(
    request: DeepPartial<ListApiOperationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListApiOperationsResponse>;
  /** Get details about a definition in an API version. */
  getDefinition(
    request: DeepPartial<GetDefinitionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Definition>;
  /**
   * Create a deployment resource in the API hub.
   * Once a deployment resource is created, it can be associated with API
   * versions.
   */
  createDeployment(
    request: DeepPartial<CreateDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Deployment>;
  /** Get details about a deployment and the API versions linked to it. */
  getDeployment(
    request: DeepPartial<GetDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Deployment>;
  /** List deployment resources in the API hub. */
  listDeployments(
    request: DeepPartial<ListDeploymentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDeploymentsResponse>;
  /**
   * Update a deployment resource in the API hub. The following fields in the
   * [deployment resource][google.cloud.apihub.v1.Deployment] can be
   * updated:
   *
   * * [display_name][google.cloud.apihub.v1.Deployment.display_name]
   * * [description][google.cloud.apihub.v1.Deployment.description]
   * * [documentation][google.cloud.apihub.v1.Deployment.documentation]
   * * [deployment_type][google.cloud.apihub.v1.Deployment.deployment_type]
   * * [resource_uri][google.cloud.apihub.v1.Deployment.resource_uri]
   * * [endpoints][google.cloud.apihub.v1.Deployment.endpoints]
   * * [slo][google.cloud.apihub.v1.Deployment.slo]
   * * [environment][google.cloud.apihub.v1.Deployment.environment]
   * * [attributes][google.cloud.apihub.v1.Deployment.attributes]
   *
   * The
   * [update_mask][google.cloud.apihub.v1.UpdateDeploymentRequest.update_mask]
   * should be used to specify the fields being updated.
   */
  updateDeployment(
    request: DeepPartial<UpdateDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Deployment>;
  /** Delete a deployment resource in the API hub. */
  deleteDeployment(
    request: DeepPartial<DeleteDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Create a user defined attribute.
   *
   * Certain pre defined attributes are already created by the API hub. These
   * attributes will have type as `SYSTEM_DEFINED` and can be listed via
   * [ListAttributes][google.cloud.apihub.v1.ApiHub.ListAttributes] method.
   * Allowed values for the same can be updated via
   * [UpdateAttribute][google.cloud.apihub.v1.ApiHub.UpdateAttribute] method.
   */
  createAttribute(
    request: DeepPartial<CreateAttributeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Attribute>;
  /** Get details about the attribute. */
  getAttribute(request: DeepPartial<GetAttributeRequest>, options?: CallOptions & CallOptionsExt): Promise<Attribute>;
  /**
   * Update the attribute.  The following fields in the
   * [Attribute resource][google.cloud.apihub.v1.Attribute] can be updated:
   *
   * * [display_name][google.cloud.apihub.v1.Attribute.display_name]
   * The display name can be updated for user defined attributes only.
   * * [description][google.cloud.apihub.v1.Attribute.description]
   * The description can be updated for user defined attributes only.
   * * [allowed_values][google.cloud.apihub.v1.Attribute.allowed_values]
   * To update the list of allowed values, clients need to use the fetched list
   * of allowed values and add or remove values to or from the same list.
   * The mutable allowed values can be updated for both user defined and System
   * defined attributes. The immutable allowed values cannot be updated or
   * deleted. The updated list of allowed values cannot be empty. If an allowed
   * value that is already used by some resource's attribute is deleted, then
   * the association between the resource and the attribute value will also be
   * deleted.
   * * [cardinality][google.cloud.apihub.v1.Attribute.cardinality]
   * The cardinality can be updated for user defined attributes only.
   * Cardinality can only be increased during an update.
   *
   * The
   * [update_mask][google.cloud.apihub.v1.UpdateAttributeRequest.update_mask]
   * should be used to specify the fields being updated.
   */
  updateAttribute(
    request: DeepPartial<UpdateAttributeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Attribute>;
  /**
   * Delete an attribute.
   *
   * Note: System defined attributes cannot be deleted. All
   * associations of the attribute being deleted with any API hub resource will
   * also get deleted.
   */
  deleteAttribute(request: DeepPartial<DeleteAttributeRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** List all attributes. */
  listAttributes(
    request: DeepPartial<ListAttributesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAttributesResponse>;
  /** Search across API-Hub resources. */
  searchResources(
    request: DeepPartial<SearchResourcesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchResourcesResponse>;
  /** Create an External API resource in the API hub. */
  createExternalApi(
    request: DeepPartial<CreateExternalApiRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExternalApi>;
  /** Get details about an External API resource in the API hub. */
  getExternalApi(
    request: DeepPartial<GetExternalApiRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExternalApi>;
  /**
   * Update an External API resource in the API hub. The following fields can be
   * updated:
   *
   * * [display_name][google.cloud.apihub.v1.ExternalApi.display_name]
   * * [description][google.cloud.apihub.v1.ExternalApi.description]
   * * [documentation][google.cloud.apihub.v1.ExternalApi.documentation]
   * * [endpoints][google.cloud.apihub.v1.ExternalApi.endpoints]
   * * [paths][google.cloud.apihub.v1.ExternalApi.paths]
   *
   * The
   * [update_mask][google.cloud.apihub.v1.UpdateExternalApiRequest.update_mask]
   * should be used to specify the fields being updated.
   */
  updateExternalApi(
    request: DeepPartial<UpdateExternalApiRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExternalApi>;
  /** Delete an External API resource in the API hub. */
  deleteExternalApi(
    request: DeepPartial<DeleteExternalApiRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** List External API resources in the API hub. */
  listExternalApis(
    request: DeepPartial<ListExternalApisRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListExternalApisResponse>;
}

/**
 * This service provides methods for various operations related to a
 * [Dependency][google.cloud.apihub.v1.Dependency] in the API hub.
 */
export type ApiHubDependenciesDefinition = typeof ApiHubDependenciesDefinition;
export const ApiHubDependenciesDefinition = {
  name: "ApiHubDependencies",
  fullName: "google.cloud.apihub.v1.ApiHubDependencies",
  methods: {
    /** Create a dependency between two entities in the API hub. */
    createDependency: {
      name: "CreateDependency",
      requestType: CreateDependencyRequest,
      requestStream: false,
      responseType: Dependency,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              31,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              99,
              121,
              44,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              99,
              121,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              10,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              99,
              121,
              34,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              99,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Get details about a dependency resource in the API hub. */
    getDependency: {
      name: "GetDependency",
      requestType: GetDependencyRequest,
      requestStream: false,
      responseType: Dependency,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Update a dependency based on the
     * [update_mask][google.cloud.apihub.v1.UpdateDependencyRequest.update_mask]
     * provided in the request.
     *
     * The following fields in the [dependency][google.cloud.apihub.v1.Dependency]
     * can be updated:
     * * [description][google.cloud.apihub.v1.Dependency.description]
     */
    updateDependency: {
      name: "UpdateDependency",
      requestType: UpdateDependencyRequest,
      requestStream: false,
      responseType: Dependency,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              99,
              121,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              73,
              58,
              10,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              99,
              121,
              50,
              59,
              47,
              118,
              49,
              47,
              123,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              99,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Delete the dependency resource. */
    deleteDependency: {
      name: "DeleteDependency",
      requestType: DeleteDependencyRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              42,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List dependencies based on the provided filter and pagination parameters. */
    listDependencies: {
      name: "ListDependencies",
      requestType: ListDependenciesRequest,
      requestStream: false,
      responseType: ListDependenciesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              99,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ApiHubDependenciesServiceImplementation<CallContextExt = {}> {
  /** Create a dependency between two entities in the API hub. */
  createDependency(
    request: CreateDependencyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Dependency>>;
  /** Get details about a dependency resource in the API hub. */
  getDependency(request: GetDependencyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Dependency>>;
  /**
   * Update a dependency based on the
   * [update_mask][google.cloud.apihub.v1.UpdateDependencyRequest.update_mask]
   * provided in the request.
   *
   * The following fields in the [dependency][google.cloud.apihub.v1.Dependency]
   * can be updated:
   * * [description][google.cloud.apihub.v1.Dependency.description]
   */
  updateDependency(
    request: UpdateDependencyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Dependency>>;
  /** Delete the dependency resource. */
  deleteDependency(
    request: DeleteDependencyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** List dependencies based on the provided filter and pagination parameters. */
  listDependencies(
    request: ListDependenciesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDependenciesResponse>>;
}

export interface ApiHubDependenciesClient<CallOptionsExt = {}> {
  /** Create a dependency between two entities in the API hub. */
  createDependency(
    request: DeepPartial<CreateDependencyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Dependency>;
  /** Get details about a dependency resource in the API hub. */
  getDependency(
    request: DeepPartial<GetDependencyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Dependency>;
  /**
   * Update a dependency based on the
   * [update_mask][google.cloud.apihub.v1.UpdateDependencyRequest.update_mask]
   * provided in the request.
   *
   * The following fields in the [dependency][google.cloud.apihub.v1.Dependency]
   * can be updated:
   * * [description][google.cloud.apihub.v1.Dependency.description]
   */
  updateDependency(
    request: DeepPartial<UpdateDependencyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Dependency>;
  /** Delete the dependency resource. */
  deleteDependency(
    request: DeepPartial<DeleteDependencyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** List dependencies based on the provided filter and pagination parameters. */
  listDependencies(
    request: DeepPartial<ListDependenciesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDependenciesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
