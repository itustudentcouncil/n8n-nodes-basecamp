// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/orchestration/airflow/service/v1beta1/operations.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.orchestration.airflow.service.v1beta1";

/** Metadata describing an operation. */
export interface OperationMetadata {
  /** Output only. The current operation state. */
  state: OperationMetadata_State;
  /** Output only. The type of operation being performed. */
  operationType: OperationMetadata_Type;
  /**
   * Output only. The resource being operated on, as a [relative resource name](
   * /apis/design/resource_names#relative_resource_name).
   */
  resource: string;
  /** Output only. The UUID of the resource being operated on. */
  resourceUuid: string;
  /** Output only. The time the operation was submitted to the server. */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. The time when the operation terminated, regardless of its
   * success. This field is unset if the operation is still ongoing.
   */
  endTime: Date | undefined;
}

/** An enum describing the overall state of an operation. */
export enum OperationMetadata_State {
  /** STATE_UNSPECIFIED - Unused. */
  STATE_UNSPECIFIED = 0,
  /** PENDING - The operation has been created but is not yet started. */
  PENDING = 1,
  /** RUNNING - The operation is underway. */
  RUNNING = 2,
  /** SUCCESSFUL - The operation completed successfully. */
  SUCCESSFUL = 3,
  /** FAILED - The operation is no longer running but did not succeed. */
  FAILED = 4,
  UNRECOGNIZED = -1,
}

export function operationMetadata_StateFromJSON(object: any): OperationMetadata_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return OperationMetadata_State.STATE_UNSPECIFIED;
    case 1:
    case "PENDING":
      return OperationMetadata_State.PENDING;
    case 2:
    case "RUNNING":
      return OperationMetadata_State.RUNNING;
    case 3:
    case "SUCCESSFUL":
      return OperationMetadata_State.SUCCESSFUL;
    case 4:
    case "FAILED":
      return OperationMetadata_State.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OperationMetadata_State.UNRECOGNIZED;
  }
}

export function operationMetadata_StateToJSON(object: OperationMetadata_State): string {
  switch (object) {
    case OperationMetadata_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case OperationMetadata_State.PENDING:
      return "PENDING";
    case OperationMetadata_State.RUNNING:
      return "RUNNING";
    case OperationMetadata_State.SUCCESSFUL:
      return "SUCCESSFUL";
    case OperationMetadata_State.FAILED:
      return "FAILED";
    case OperationMetadata_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Type of longrunning operation. */
export enum OperationMetadata_Type {
  /** TYPE_UNSPECIFIED - Unused. */
  TYPE_UNSPECIFIED = 0,
  /** CREATE - A resource creation operation. */
  CREATE = 1,
  /** DELETE - A resource deletion operation. */
  DELETE = 2,
  /** UPDATE - A resource update operation. */
  UPDATE = 3,
  /** CHECK - A resource check operation. */
  CHECK = 4,
  /** SAVE_SNAPSHOT - Saves snapshot of the resource operation. */
  SAVE_SNAPSHOT = 5,
  /** LOAD_SNAPSHOT - Loads snapshot of the resource operation. */
  LOAD_SNAPSHOT = 6,
  /**
   * DATABASE_FAILOVER - Triggers failover of environment's Cloud SQL instance (only for highly
   * resilient environments).
   */
  DATABASE_FAILOVER = 7,
  UNRECOGNIZED = -1,
}

export function operationMetadata_TypeFromJSON(object: any): OperationMetadata_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return OperationMetadata_Type.TYPE_UNSPECIFIED;
    case 1:
    case "CREATE":
      return OperationMetadata_Type.CREATE;
    case 2:
    case "DELETE":
      return OperationMetadata_Type.DELETE;
    case 3:
    case "UPDATE":
      return OperationMetadata_Type.UPDATE;
    case 4:
    case "CHECK":
      return OperationMetadata_Type.CHECK;
    case 5:
    case "SAVE_SNAPSHOT":
      return OperationMetadata_Type.SAVE_SNAPSHOT;
    case 6:
    case "LOAD_SNAPSHOT":
      return OperationMetadata_Type.LOAD_SNAPSHOT;
    case 7:
    case "DATABASE_FAILOVER":
      return OperationMetadata_Type.DATABASE_FAILOVER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OperationMetadata_Type.UNRECOGNIZED;
  }
}

export function operationMetadata_TypeToJSON(object: OperationMetadata_Type): string {
  switch (object) {
    case OperationMetadata_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case OperationMetadata_Type.CREATE:
      return "CREATE";
    case OperationMetadata_Type.DELETE:
      return "DELETE";
    case OperationMetadata_Type.UPDATE:
      return "UPDATE";
    case OperationMetadata_Type.CHECK:
      return "CHECK";
    case OperationMetadata_Type.SAVE_SNAPSHOT:
      return "SAVE_SNAPSHOT";
    case OperationMetadata_Type.LOAD_SNAPSHOT:
      return "LOAD_SNAPSHOT";
    case OperationMetadata_Type.DATABASE_FAILOVER:
      return "DATABASE_FAILOVER";
    case OperationMetadata_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseOperationMetadata(): OperationMetadata {
  return { state: 0, operationType: 0, resource: "", resourceUuid: "", createTime: undefined, endTime: undefined };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.operationType !== 0) {
      writer.uint32(16).int32(message.operationType);
    }
    if (message.resource !== "") {
      writer.uint32(26).string(message.resource);
    }
    if (message.resourceUuid !== "") {
      writer.uint32(34).string(message.resourceUuid);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.operationType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resource = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.resourceUuid = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      state: isSet(object.state) ? operationMetadata_StateFromJSON(object.state) : 0,
      operationType: isSet(object.operationType) ? operationMetadata_TypeFromJSON(object.operationType) : 0,
      resource: isSet(object.resource) ? globalThis.String(object.resource) : "",
      resourceUuid: isSet(object.resourceUuid) ? globalThis.String(object.resourceUuid) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = operationMetadata_StateToJSON(message.state);
    }
    if (message.operationType !== 0) {
      obj.operationType = operationMetadata_TypeToJSON(message.operationType);
    }
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    if (message.resourceUuid !== "") {
      obj.resourceUuid = message.resourceUuid;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.state = object.state ?? 0;
    message.operationType = object.operationType ?? 0;
    message.resource = object.resource ?? "";
    message.resourceUuid = object.resourceUuid ?? "";
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
