// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/orchestration/airflow/service/v1beta1/image_versions.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { DateMessage } from "../../../../../type/date.js";

export const protobufPackage = "google.cloud.orchestration.airflow.service.v1beta1";

/** List ImageVersions in a project and location. */
export interface ListImageVersionsRequest {
  /**
   * List ImageVersions in the given project and location, in the form:
   * "projects/{projectId}/locations/{locationId}"
   */
  parent: string;
  /** The maximum number of image_versions to return. */
  pageSize: number;
  /** The next_page_token value returned from a previous List request, if any. */
  pageToken: string;
  /** Whether or not image versions from old releases should be included. */
  includePastReleases: boolean;
}

/** The ImageVersions in a project and location. */
export interface ListImageVersionsResponse {
  /** The list of supported ImageVersions in a location. */
  imageVersions: ImageVersion[];
  /** The page token used to query for the next page if one exists. */
  nextPageToken: string;
}

/** Image Version information */
export interface ImageVersion {
  /**
   * The string identifier of the ImageVersion, in the form:
   * "composer-x.y.z-airflow-a.b.c"
   */
  imageVersionId: string;
  /**
   * Whether this is the default ImageVersion used by Composer during
   * environment creation if no input ImageVersion is specified.
   */
  isDefault: boolean;
  /** supported python versions */
  supportedPythonVersions: string[];
  /** The date of the version release. */
  releaseDate:
    | DateMessage
    | undefined;
  /** Whether it is impossible to create an environment with the image version. */
  creationDisabled: boolean;
  /**
   * Whether it is impossible to upgrade an environment running with the image
   * version.
   */
  upgradeDisabled: boolean;
}

function createBaseListImageVersionsRequest(): ListImageVersionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", includePastReleases: false };
}

export const ListImageVersionsRequest: MessageFns<ListImageVersionsRequest> = {
  encode(message: ListImageVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.includePastReleases !== false) {
      writer.uint32(32).bool(message.includePastReleases);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListImageVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListImageVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.includePastReleases = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListImageVersionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      includePastReleases: isSet(object.includePastReleases) ? globalThis.Boolean(object.includePastReleases) : false,
    };
  },

  toJSON(message: ListImageVersionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.includePastReleases !== false) {
      obj.includePastReleases = message.includePastReleases;
    }
    return obj;
  },

  create(base?: DeepPartial<ListImageVersionsRequest>): ListImageVersionsRequest {
    return ListImageVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListImageVersionsRequest>): ListImageVersionsRequest {
    const message = createBaseListImageVersionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.includePastReleases = object.includePastReleases ?? false;
    return message;
  },
};

function createBaseListImageVersionsResponse(): ListImageVersionsResponse {
  return { imageVersions: [], nextPageToken: "" };
}

export const ListImageVersionsResponse: MessageFns<ListImageVersionsResponse> = {
  encode(message: ListImageVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.imageVersions) {
      ImageVersion.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListImageVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListImageVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.imageVersions.push(ImageVersion.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListImageVersionsResponse {
    return {
      imageVersions: globalThis.Array.isArray(object?.imageVersions)
        ? object.imageVersions.map((e: any) => ImageVersion.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListImageVersionsResponse): unknown {
    const obj: any = {};
    if (message.imageVersions?.length) {
      obj.imageVersions = message.imageVersions.map((e) => ImageVersion.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListImageVersionsResponse>): ListImageVersionsResponse {
    return ListImageVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListImageVersionsResponse>): ListImageVersionsResponse {
    const message = createBaseListImageVersionsResponse();
    message.imageVersions = object.imageVersions?.map((e) => ImageVersion.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseImageVersion(): ImageVersion {
  return {
    imageVersionId: "",
    isDefault: false,
    supportedPythonVersions: [],
    releaseDate: undefined,
    creationDisabled: false,
    upgradeDisabled: false,
  };
}

export const ImageVersion: MessageFns<ImageVersion> = {
  encode(message: ImageVersion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.imageVersionId !== "") {
      writer.uint32(10).string(message.imageVersionId);
    }
    if (message.isDefault !== false) {
      writer.uint32(16).bool(message.isDefault);
    }
    for (const v of message.supportedPythonVersions) {
      writer.uint32(26).string(v!);
    }
    if (message.releaseDate !== undefined) {
      DateMessage.encode(message.releaseDate, writer.uint32(34).fork()).join();
    }
    if (message.creationDisabled !== false) {
      writer.uint32(40).bool(message.creationDisabled);
    }
    if (message.upgradeDisabled !== false) {
      writer.uint32(48).bool(message.upgradeDisabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageVersion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.imageVersionId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.supportedPythonVersions.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.releaseDate = DateMessage.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.creationDisabled = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.upgradeDisabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageVersion {
    return {
      imageVersionId: isSet(object.imageVersionId) ? globalThis.String(object.imageVersionId) : "",
      isDefault: isSet(object.isDefault) ? globalThis.Boolean(object.isDefault) : false,
      supportedPythonVersions: globalThis.Array.isArray(object?.supportedPythonVersions)
        ? object.supportedPythonVersions.map((e: any) => globalThis.String(e))
        : [],
      releaseDate: isSet(object.releaseDate) ? DateMessage.fromJSON(object.releaseDate) : undefined,
      creationDisabled: isSet(object.creationDisabled) ? globalThis.Boolean(object.creationDisabled) : false,
      upgradeDisabled: isSet(object.upgradeDisabled) ? globalThis.Boolean(object.upgradeDisabled) : false,
    };
  },

  toJSON(message: ImageVersion): unknown {
    const obj: any = {};
    if (message.imageVersionId !== "") {
      obj.imageVersionId = message.imageVersionId;
    }
    if (message.isDefault !== false) {
      obj.isDefault = message.isDefault;
    }
    if (message.supportedPythonVersions?.length) {
      obj.supportedPythonVersions = message.supportedPythonVersions;
    }
    if (message.releaseDate !== undefined) {
      obj.releaseDate = DateMessage.toJSON(message.releaseDate);
    }
    if (message.creationDisabled !== false) {
      obj.creationDisabled = message.creationDisabled;
    }
    if (message.upgradeDisabled !== false) {
      obj.upgradeDisabled = message.upgradeDisabled;
    }
    return obj;
  },

  create(base?: DeepPartial<ImageVersion>): ImageVersion {
    return ImageVersion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImageVersion>): ImageVersion {
    const message = createBaseImageVersion();
    message.imageVersionId = object.imageVersionId ?? "";
    message.isDefault = object.isDefault ?? false;
    message.supportedPythonVersions = object.supportedPythonVersions?.map((e) => e) || [];
    message.releaseDate = (object.releaseDate !== undefined && object.releaseDate !== null)
      ? DateMessage.fromPartial(object.releaseDate)
      : undefined;
    message.creationDisabled = object.creationDisabled ?? false;
    message.upgradeDisabled = object.upgradeDisabled ?? false;
    return message;
  },
};

/** Readonly service to query available ImageVersions. */
export type ImageVersionsDefinition = typeof ImageVersionsDefinition;
export const ImageVersionsDefinition = {
  name: "ImageVersions",
  fullName: "google.cloud.orchestration.airflow.service.v1beta1.ImageVersions",
  methods: {
    /** List ImageVersions for provided location. */
    listImageVersions: {
      name: "ListImageVersions",
      requestType: ListImageVersionsRequest,
      requestStream: false,
      responseType: ListImageVersionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              105,
              109,
              97,
              103,
              101,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ImageVersionsServiceImplementation<CallContextExt = {}> {
  /** List ImageVersions for provided location. */
  listImageVersions(
    request: ListImageVersionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListImageVersionsResponse>>;
}

export interface ImageVersionsClient<CallOptionsExt = {}> {
  /** List ImageVersions for provided location. */
  listImageVersions(
    request: DeepPartial<ListImageVersionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListImageVersionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
