// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/vpcaccess/v1/vpc_access.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.vpcaccess.v1";

/** Definition of a Serverless VPC Access connector. */
export interface Connector {
  /** The resource name in the format `projects/* /locations/* /connectors/*`. */
  name: string;
  /** Name of a VPC network. */
  network: string;
  /**
   * The range of internal addresses that follows RFC 4632 notation.
   * Example: `10.132.0.0/28`.
   */
  ipCidrRange: string;
  /** Output only. State of the VPC access connector. */
  state: Connector_State;
  /** Minimum throughput of the connector in Mbps. Default and min is 200. */
  minThroughput: number;
  /** Maximum throughput of the connector in Mbps. Default is 300, max is 1000. */
  maxThroughput: number;
  /** Output only. List of projects using the connector. */
  connectedProjects: string[];
  /** The subnet in which to house the VPC Access Connector. */
  subnet:
    | Connector_Subnet
    | undefined;
  /** Machine type of VM Instance underlying connector. Default is e2-micro */
  machineType: string;
  /** Minimum value of instances in autoscaling group underlying the connector. */
  minInstances: number;
  /** Maximum value of instances in autoscaling group underlying the connector. */
  maxInstances: number;
}

/** State of a connector. */
export enum Connector_State {
  /** STATE_UNSPECIFIED - Invalid state. */
  STATE_UNSPECIFIED = 0,
  /** READY - Connector is deployed and ready to receive traffic. */
  READY = 1,
  /** CREATING - An Insert operation is in progress. Transient condition. */
  CREATING = 2,
  /** DELETING - A Delete operation is in progress. Transient condition. */
  DELETING = 3,
  /** ERROR - Connector is in a bad state, manual deletion recommended. */
  ERROR = 4,
  /** UPDATING - The connector is being updated. */
  UPDATING = 5,
  UNRECOGNIZED = -1,
}

export function connector_StateFromJSON(object: any): Connector_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Connector_State.STATE_UNSPECIFIED;
    case 1:
    case "READY":
      return Connector_State.READY;
    case 2:
    case "CREATING":
      return Connector_State.CREATING;
    case 3:
    case "DELETING":
      return Connector_State.DELETING;
    case 4:
    case "ERROR":
      return Connector_State.ERROR;
    case 5:
    case "UPDATING":
      return Connector_State.UPDATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Connector_State.UNRECOGNIZED;
  }
}

export function connector_StateToJSON(object: Connector_State): string {
  switch (object) {
    case Connector_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Connector_State.READY:
      return "READY";
    case Connector_State.CREATING:
      return "CREATING";
    case Connector_State.DELETING:
      return "DELETING";
    case Connector_State.ERROR:
      return "ERROR";
    case Connector_State.UPDATING:
      return "UPDATING";
    case Connector_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The subnet in which to house the connector */
export interface Connector_Subnet {
  /**
   * Subnet name (relative, not fully qualified).
   * E.g. if the full subnet selfLink is
   * https://compute.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetName}
   * the correct input for this field would be {subnetName}
   */
  name: string;
  /**
   * Project in which the subnet exists.
   * If not set, this project is assumed to be the project for which
   * the connector create request was issued.
   */
  projectId: string;
}

/** Request for creating a Serverless VPC Access connector. */
export interface CreateConnectorRequest {
  /**
   * Required. The project and location in which the configuration should be created,
   * specified in the format `projects/* /locations/*`.
   */
  parent: string;
  /** Required. The ID to use for this connector. */
  connectorId: string;
  /** Required. Resource to create. */
  connector: Connector | undefined;
}

/** Request for getting a Serverless VPC Access connector. */
export interface GetConnectorRequest {
  /** Required. Name of a Serverless VPC Access connector to get. */
  name: string;
}

/** Request for listing Serverless VPC Access connectors in a location. */
export interface ListConnectorsRequest {
  /** Required. The project and location from which the routes should be listed. */
  parent: string;
  /** Maximum number of functions to return per call. */
  pageSize: number;
  /** Continuation token. */
  pageToken: string;
}

/** Response for listing Serverless VPC Access connectors. */
export interface ListConnectorsResponse {
  /** List of Serverless VPC Access connectors. */
  connectors: Connector[];
  /** Continuation token. */
  nextPageToken: string;
}

/** Request for deleting a Serverless VPC Access connector. */
export interface DeleteConnectorRequest {
  /** Required. Name of a Serverless VPC Access connector to delete. */
  name: string;
}

/** Metadata for google.longrunning.Operation. */
export interface OperationMetadata {
  /**
   * Output only. Method that initiated the operation e.g.
   * google.cloud.vpcaccess.v1.Connectors.CreateConnector.
   */
  method: string;
  /** Output only. Time when the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Time when the operation completed. */
  endTime:
    | Date
    | undefined;
  /**
   * Output only. Name of the resource that this operation is acting on e.g.
   * projects/my-project/locations/us-central1/connectors/v1.
   */
  target: string;
}

function createBaseConnector(): Connector {
  return {
    name: "",
    network: "",
    ipCidrRange: "",
    state: 0,
    minThroughput: 0,
    maxThroughput: 0,
    connectedProjects: [],
    subnet: undefined,
    machineType: "",
    minInstances: 0,
    maxInstances: 0,
  };
}

export const Connector: MessageFns<Connector> = {
  encode(message: Connector, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.network !== "") {
      writer.uint32(18).string(message.network);
    }
    if (message.ipCidrRange !== "") {
      writer.uint32(26).string(message.ipCidrRange);
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.minThroughput !== 0) {
      writer.uint32(40).int32(message.minThroughput);
    }
    if (message.maxThroughput !== 0) {
      writer.uint32(48).int32(message.maxThroughput);
    }
    for (const v of message.connectedProjects) {
      writer.uint32(58).string(v!);
    }
    if (message.subnet !== undefined) {
      Connector_Subnet.encode(message.subnet, writer.uint32(66).fork()).join();
    }
    if (message.machineType !== "") {
      writer.uint32(82).string(message.machineType);
    }
    if (message.minInstances !== 0) {
      writer.uint32(88).int32(message.minInstances);
    }
    if (message.maxInstances !== 0) {
      writer.uint32(96).int32(message.maxInstances);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Connector {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnector();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.network = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ipCidrRange = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.minThroughput = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.maxThroughput = reader.int32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.connectedProjects.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.subnet = Connector_Subnet.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.machineType = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.minInstances = reader.int32();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.maxInstances = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Connector {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      ipCidrRange: isSet(object.ipCidrRange) ? globalThis.String(object.ipCidrRange) : "",
      state: isSet(object.state) ? connector_StateFromJSON(object.state) : 0,
      minThroughput: isSet(object.minThroughput) ? globalThis.Number(object.minThroughput) : 0,
      maxThroughput: isSet(object.maxThroughput) ? globalThis.Number(object.maxThroughput) : 0,
      connectedProjects: globalThis.Array.isArray(object?.connectedProjects)
        ? object.connectedProjects.map((e: any) => globalThis.String(e))
        : [],
      subnet: isSet(object.subnet) ? Connector_Subnet.fromJSON(object.subnet) : undefined,
      machineType: isSet(object.machineType) ? globalThis.String(object.machineType) : "",
      minInstances: isSet(object.minInstances) ? globalThis.Number(object.minInstances) : 0,
      maxInstances: isSet(object.maxInstances) ? globalThis.Number(object.maxInstances) : 0,
    };
  },

  toJSON(message: Connector): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.ipCidrRange !== "") {
      obj.ipCidrRange = message.ipCidrRange;
    }
    if (message.state !== 0) {
      obj.state = connector_StateToJSON(message.state);
    }
    if (message.minThroughput !== 0) {
      obj.minThroughput = Math.round(message.minThroughput);
    }
    if (message.maxThroughput !== 0) {
      obj.maxThroughput = Math.round(message.maxThroughput);
    }
    if (message.connectedProjects?.length) {
      obj.connectedProjects = message.connectedProjects;
    }
    if (message.subnet !== undefined) {
      obj.subnet = Connector_Subnet.toJSON(message.subnet);
    }
    if (message.machineType !== "") {
      obj.machineType = message.machineType;
    }
    if (message.minInstances !== 0) {
      obj.minInstances = Math.round(message.minInstances);
    }
    if (message.maxInstances !== 0) {
      obj.maxInstances = Math.round(message.maxInstances);
    }
    return obj;
  },

  create(base?: DeepPartial<Connector>): Connector {
    return Connector.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Connector>): Connector {
    const message = createBaseConnector();
    message.name = object.name ?? "";
    message.network = object.network ?? "";
    message.ipCidrRange = object.ipCidrRange ?? "";
    message.state = object.state ?? 0;
    message.minThroughput = object.minThroughput ?? 0;
    message.maxThroughput = object.maxThroughput ?? 0;
    message.connectedProjects = object.connectedProjects?.map((e) => e) || [];
    message.subnet = (object.subnet !== undefined && object.subnet !== null)
      ? Connector_Subnet.fromPartial(object.subnet)
      : undefined;
    message.machineType = object.machineType ?? "";
    message.minInstances = object.minInstances ?? 0;
    message.maxInstances = object.maxInstances ?? 0;
    return message;
  },
};

function createBaseConnector_Subnet(): Connector_Subnet {
  return { name: "", projectId: "" };
}

export const Connector_Subnet: MessageFns<Connector_Subnet> = {
  encode(message: Connector_Subnet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Connector_Subnet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnector_Subnet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Connector_Subnet {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
    };
  },

  toJSON(message: Connector_Subnet): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    return obj;
  },

  create(base?: DeepPartial<Connector_Subnet>): Connector_Subnet {
    return Connector_Subnet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Connector_Subnet>): Connector_Subnet {
    const message = createBaseConnector_Subnet();
    message.name = object.name ?? "";
    message.projectId = object.projectId ?? "";
    return message;
  },
};

function createBaseCreateConnectorRequest(): CreateConnectorRequest {
  return { parent: "", connectorId: "", connector: undefined };
}

export const CreateConnectorRequest: MessageFns<CreateConnectorRequest> = {
  encode(message: CreateConnectorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.connectorId !== "") {
      writer.uint32(18).string(message.connectorId);
    }
    if (message.connector !== undefined) {
      Connector.encode(message.connector, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConnectorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConnectorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.connectorId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.connector = Connector.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateConnectorRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      connectorId: isSet(object.connectorId) ? globalThis.String(object.connectorId) : "",
      connector: isSet(object.connector) ? Connector.fromJSON(object.connector) : undefined,
    };
  },

  toJSON(message: CreateConnectorRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.connectorId !== "") {
      obj.connectorId = message.connectorId;
    }
    if (message.connector !== undefined) {
      obj.connector = Connector.toJSON(message.connector);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateConnectorRequest>): CreateConnectorRequest {
    return CreateConnectorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateConnectorRequest>): CreateConnectorRequest {
    const message = createBaseCreateConnectorRequest();
    message.parent = object.parent ?? "";
    message.connectorId = object.connectorId ?? "";
    message.connector = (object.connector !== undefined && object.connector !== null)
      ? Connector.fromPartial(object.connector)
      : undefined;
    return message;
  },
};

function createBaseGetConnectorRequest(): GetConnectorRequest {
  return { name: "" };
}

export const GetConnectorRequest: MessageFns<GetConnectorRequest> = {
  encode(message: GetConnectorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConnectorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConnectorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetConnectorRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetConnectorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetConnectorRequest>): GetConnectorRequest {
    return GetConnectorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetConnectorRequest>): GetConnectorRequest {
    const message = createBaseGetConnectorRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListConnectorsRequest(): ListConnectorsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListConnectorsRequest: MessageFns<ListConnectorsRequest> = {
  encode(message: ListConnectorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConnectorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConnectorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConnectorsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListConnectorsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConnectorsRequest>): ListConnectorsRequest {
    return ListConnectorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConnectorsRequest>): ListConnectorsRequest {
    const message = createBaseListConnectorsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListConnectorsResponse(): ListConnectorsResponse {
  return { connectors: [], nextPageToken: "" };
}

export const ListConnectorsResponse: MessageFns<ListConnectorsResponse> = {
  encode(message: ListConnectorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.connectors) {
      Connector.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConnectorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConnectorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connectors.push(Connector.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConnectorsResponse {
    return {
      connectors: globalThis.Array.isArray(object?.connectors)
        ? object.connectors.map((e: any) => Connector.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListConnectorsResponse): unknown {
    const obj: any = {};
    if (message.connectors?.length) {
      obj.connectors = message.connectors.map((e) => Connector.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConnectorsResponse>): ListConnectorsResponse {
    return ListConnectorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConnectorsResponse>): ListConnectorsResponse {
    const message = createBaseListConnectorsResponse();
    message.connectors = object.connectors?.map((e) => Connector.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteConnectorRequest(): DeleteConnectorRequest {
  return { name: "" };
}

export const DeleteConnectorRequest: MessageFns<DeleteConnectorRequest> = {
  encode(message: DeleteConnectorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteConnectorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConnectorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteConnectorRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteConnectorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteConnectorRequest>): DeleteConnectorRequest {
    return DeleteConnectorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteConnectorRequest>): DeleteConnectorRequest {
    const message = createBaseDeleteConnectorRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return { method: "", createTime: undefined, endTime: undefined, target: "" };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.method !== "") {
      writer.uint32(10).string(message.method);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(26).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(42).string(message.target);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.method = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.target = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.method = object.method ?? "";
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    return message;
  },
};

/**
 * Serverless VPC Access API allows users to create and manage connectors for
 * App Engine, Cloud Functions and Cloud Run to have internal connections to
 * Virtual Private Cloud networks.
 */
export type VpcAccessServiceDefinition = typeof VpcAccessServiceDefinition;
export const VpcAccessServiceDefinition = {
  name: "VpcAccessService",
  fullName: "google.cloud.vpcaccess.v1.VpcAccessService",
  methods: {
    /** Creates a Serverless VPC Access connector, returns an operation. */
    createConnector: {
      name: "CreateConnector",
      requestType: CreateConnectorRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              30,
              10,
              9,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              29,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              95,
              105,
              100,
              44,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
            ]),
          ],
          578365826: [
            Buffer.from([
              59,
              58,
              9,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              34,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets a Serverless VPC Access connector. Returns NOT_FOUND if the resource
     * does not exist.
     */
    getConnector: {
      name: "GetConnector",
      requestType: GetConnectorRequest,
      requestStream: false,
      responseType: Connector,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Serverless VPC Access connectors. */
    listConnectors: {
      name: "ListConnectors",
      requestType: ListConnectorsRequest,
      requestStream: false,
      responseType: ListConnectorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a Serverless VPC Access connector. Returns NOT_FOUND if the
     * resource does not exist.
     */
    deleteConnector: {
      name: "DeleteConnector",
      requestType: DeleteConnectorRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              42,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface VpcAccessServiceImplementation<CallContextExt = {}> {
  /** Creates a Serverless VPC Access connector, returns an operation. */
  createConnector(
    request: CreateConnectorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Gets a Serverless VPC Access connector. Returns NOT_FOUND if the resource
   * does not exist.
   */
  getConnector(request: GetConnectorRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Connector>>;
  /** Lists Serverless VPC Access connectors. */
  listConnectors(
    request: ListConnectorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListConnectorsResponse>>;
  /**
   * Deletes a Serverless VPC Access connector. Returns NOT_FOUND if the
   * resource does not exist.
   */
  deleteConnector(
    request: DeleteConnectorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface VpcAccessServiceClient<CallOptionsExt = {}> {
  /** Creates a Serverless VPC Access connector, returns an operation. */
  createConnector(
    request: DeepPartial<CreateConnectorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Gets a Serverless VPC Access connector. Returns NOT_FOUND if the resource
   * does not exist.
   */
  getConnector(request: DeepPartial<GetConnectorRequest>, options?: CallOptions & CallOptionsExt): Promise<Connector>;
  /** Lists Serverless VPC Access connectors. */
  listConnectors(
    request: DeepPartial<ListConnectorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListConnectorsResponse>;
  /**
   * Deletes a Serverless VPC Access connector. Returns NOT_FOUND if the
   * resource does not exist.
   */
  deleteConnector(
    request: DeepPartial<DeleteConnectorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
