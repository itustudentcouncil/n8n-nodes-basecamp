// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/support/v2/case.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Actor } from "./actor.js";

export const protobufPackage = "google.cloud.support.v2";

/** A support case. */
export interface Case {
  /** The resource name for the case. */
  name: string;
  /** The short summary of the issue reported in this case. */
  displayName: string;
  /** A broad description of the issue. */
  description: string;
  /** The issue classification applicable to this case. */
  classification:
    | CaseClassification
    | undefined;
  /**
   * The timezone of the user who created the support case.
   * It should be in a format IANA recognizes: https://www.iana.org/time-zones.
   * There is no additional validation done by the API.
   */
  timeZone: string;
  /** The email addresses to receive updates on this case. */
  subscriberEmailAddresses: string[];
  /** Output only. The current status of the support case. */
  state: Case_State;
  /** Output only. The time this case was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time this case was last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * The user who created the case.
   *
   * Note: The name and email will be obfuscated if the case was created by
   * Google Support.
   */
  creator:
    | Actor
    | undefined;
  /**
   * A user-supplied email address to send case update notifications for. This
   * should only be used in BYOID flows, where we cannot infer the user's email
   * address directly from their EUCs.
   */
  contactEmail: string;
  /** Whether the case is currently escalated. */
  escalated: boolean;
  /**
   * Whether this case was created for internal API testing and should not be
   * acted on by the support team.
   */
  testCase: boolean;
  /**
   * The language the user has requested to receive support in. This should be a
   * BCP 47 language code (e.g., `"en"`, `"zh-CN"`, `"zh-TW"`, `"ja"`, `"ko"`).
   * If no language or an unsupported language is specified, this field defaults
   * to English (en).
   *
   * Language selection during case creation may affect your available support
   * options. For a list of supported languages and their support working hours,
   * see: https://cloud.google.com/support/docs/language-working-hours
   */
  languageCode: string;
  /** The priority of this case. */
  priority: Case_Priority;
}

/** The status of a support case. */
export enum Case_State {
  /** STATE_UNSPECIFIED - Case is in an unknown state. */
  STATE_UNSPECIFIED = 0,
  /** NEW - The case has been created but no one is assigned to work on it yet. */
  NEW = 1,
  /** IN_PROGRESS_GOOGLE_SUPPORT - The case is currently being handled by Google support. */
  IN_PROGRESS_GOOGLE_SUPPORT = 2,
  /** ACTION_REQUIRED - Google is waiting for a response. */
  ACTION_REQUIRED = 3,
  /** SOLUTION_PROVIDED - A solution has been offered for the case, but it isn't yet closed. */
  SOLUTION_PROVIDED = 4,
  /** CLOSED - The case has been resolved. */
  CLOSED = 5,
  UNRECOGNIZED = -1,
}

export function case_StateFromJSON(object: any): Case_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Case_State.STATE_UNSPECIFIED;
    case 1:
    case "NEW":
      return Case_State.NEW;
    case 2:
    case "IN_PROGRESS_GOOGLE_SUPPORT":
      return Case_State.IN_PROGRESS_GOOGLE_SUPPORT;
    case 3:
    case "ACTION_REQUIRED":
      return Case_State.ACTION_REQUIRED;
    case 4:
    case "SOLUTION_PROVIDED":
      return Case_State.SOLUTION_PROVIDED;
    case 5:
    case "CLOSED":
      return Case_State.CLOSED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Case_State.UNRECOGNIZED;
  }
}

export function case_StateToJSON(object: Case_State): string {
  switch (object) {
    case Case_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Case_State.NEW:
      return "NEW";
    case Case_State.IN_PROGRESS_GOOGLE_SUPPORT:
      return "IN_PROGRESS_GOOGLE_SUPPORT";
    case Case_State.ACTION_REQUIRED:
      return "ACTION_REQUIRED";
    case Case_State.SOLUTION_PROVIDED:
      return "SOLUTION_PROVIDED";
    case Case_State.CLOSED:
      return "CLOSED";
    case Case_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The case Priority. P0 is most urgent and P4 the least. */
export enum Case_Priority {
  /** PRIORITY_UNSPECIFIED - Priority is undefined or has not been set yet. */
  PRIORITY_UNSPECIFIED = 0,
  /** P0 - Extreme impact on a production service. Service is hard down. */
  P0 = 1,
  /** P1 - Critical impact on a production service. Service is currently unusable. */
  P1 = 2,
  /**
   * P2 - Severe impact on a production service. Service is usable but greatly
   * impaired.
   */
  P2 = 3,
  /**
   * P3 - Medium impact on a production service.  Service is available, but
   * moderately impaired.
   */
  P3 = 4,
  /**
   * P4 - General questions or minor issues.  Production service is fully
   * available.
   */
  P4 = 5,
  UNRECOGNIZED = -1,
}

export function case_PriorityFromJSON(object: any): Case_Priority {
  switch (object) {
    case 0:
    case "PRIORITY_UNSPECIFIED":
      return Case_Priority.PRIORITY_UNSPECIFIED;
    case 1:
    case "P0":
      return Case_Priority.P0;
    case 2:
    case "P1":
      return Case_Priority.P1;
    case 3:
    case "P2":
      return Case_Priority.P2;
    case 4:
    case "P3":
      return Case_Priority.P3;
    case 5:
    case "P4":
      return Case_Priority.P4;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Case_Priority.UNRECOGNIZED;
  }
}

export function case_PriorityToJSON(object: Case_Priority): string {
  switch (object) {
    case Case_Priority.PRIORITY_UNSPECIFIED:
      return "PRIORITY_UNSPECIFIED";
    case Case_Priority.P0:
      return "P0";
    case Case_Priority.P1:
      return "P1";
    case Case_Priority.P2:
      return "P2";
    case Case_Priority.P3:
      return "P3";
    case Case_Priority.P4:
      return "P4";
    case Case_Priority.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A classification object with a product type and value. */
export interface CaseClassification {
  /**
   * The unique ID for a classification. Must be specified for case creation.
   *
   * To retrieve valid classification IDs for case creation, use
   * `caseClassifications.search`.
   */
  id: string;
  /** The display name of the classification. */
  displayName: string;
}

function createBaseCase(): Case {
  return {
    name: "",
    displayName: "",
    description: "",
    classification: undefined,
    timeZone: "",
    subscriberEmailAddresses: [],
    state: 0,
    createTime: undefined,
    updateTime: undefined,
    creator: undefined,
    contactEmail: "",
    escalated: false,
    testCase: false,
    languageCode: "",
    priority: 0,
  };
}

export const Case: MessageFns<Case> = {
  encode(message: Case, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.classification !== undefined) {
      CaseClassification.encode(message.classification, writer.uint32(34).fork()).join();
    }
    if (message.timeZone !== "") {
      writer.uint32(66).string(message.timeZone);
    }
    for (const v of message.subscriberEmailAddresses) {
      writer.uint32(74).string(v!);
    }
    if (message.state !== 0) {
      writer.uint32(96).int32(message.state);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(106).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(114).fork()).join();
    }
    if (message.creator !== undefined) {
      Actor.encode(message.creator, writer.uint32(122).fork()).join();
    }
    if (message.contactEmail !== "") {
      writer.uint32(282).string(message.contactEmail);
    }
    if (message.escalated !== false) {
      writer.uint32(136).bool(message.escalated);
    }
    if (message.testCase !== false) {
      writer.uint32(152).bool(message.testCase);
    }
    if (message.languageCode !== "") {
      writer.uint32(186).string(message.languageCode);
    }
    if (message.priority !== 0) {
      writer.uint32(256).int32(message.priority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Case {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.classification = CaseClassification.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.timeZone = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.subscriberEmailAddresses.push(reader.string());
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.creator = Actor.decode(reader, reader.uint32());
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.contactEmail = reader.string();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.escalated = reader.bool();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.testCase = reader.bool();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 32:
          if (tag !== 256) {
            break;
          }

          message.priority = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Case {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      classification: isSet(object.classification) ? CaseClassification.fromJSON(object.classification) : undefined,
      timeZone: isSet(object.timeZone) ? globalThis.String(object.timeZone) : "",
      subscriberEmailAddresses: globalThis.Array.isArray(object?.subscriberEmailAddresses)
        ? object.subscriberEmailAddresses.map((e: any) => globalThis.String(e))
        : [],
      state: isSet(object.state) ? case_StateFromJSON(object.state) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      creator: isSet(object.creator) ? Actor.fromJSON(object.creator) : undefined,
      contactEmail: isSet(object.contactEmail) ? globalThis.String(object.contactEmail) : "",
      escalated: isSet(object.escalated) ? globalThis.Boolean(object.escalated) : false,
      testCase: isSet(object.testCase) ? globalThis.Boolean(object.testCase) : false,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      priority: isSet(object.priority) ? case_PriorityFromJSON(object.priority) : 0,
    };
  },

  toJSON(message: Case): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.classification !== undefined) {
      obj.classification = CaseClassification.toJSON(message.classification);
    }
    if (message.timeZone !== "") {
      obj.timeZone = message.timeZone;
    }
    if (message.subscriberEmailAddresses?.length) {
      obj.subscriberEmailAddresses = message.subscriberEmailAddresses;
    }
    if (message.state !== 0) {
      obj.state = case_StateToJSON(message.state);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.creator !== undefined) {
      obj.creator = Actor.toJSON(message.creator);
    }
    if (message.contactEmail !== "") {
      obj.contactEmail = message.contactEmail;
    }
    if (message.escalated !== false) {
      obj.escalated = message.escalated;
    }
    if (message.testCase !== false) {
      obj.testCase = message.testCase;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.priority !== 0) {
      obj.priority = case_PriorityToJSON(message.priority);
    }
    return obj;
  },

  create(base?: DeepPartial<Case>): Case {
    return Case.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Case>): Case {
    const message = createBaseCase();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.classification = (object.classification !== undefined && object.classification !== null)
      ? CaseClassification.fromPartial(object.classification)
      : undefined;
    message.timeZone = object.timeZone ?? "";
    message.subscriberEmailAddresses = object.subscriberEmailAddresses?.map((e) => e) || [];
    message.state = object.state ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.creator = (object.creator !== undefined && object.creator !== null)
      ? Actor.fromPartial(object.creator)
      : undefined;
    message.contactEmail = object.contactEmail ?? "";
    message.escalated = object.escalated ?? false;
    message.testCase = object.testCase ?? false;
    message.languageCode = object.languageCode ?? "";
    message.priority = object.priority ?? 0;
    return message;
  },
};

function createBaseCaseClassification(): CaseClassification {
  return { id: "", displayName: "" };
}

export const CaseClassification: MessageFns<CaseClassification> = {
  encode(message: CaseClassification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CaseClassification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCaseClassification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CaseClassification {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: CaseClassification): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<CaseClassification>): CaseClassification {
    return CaseClassification.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CaseClassification>): CaseClassification {
    const message = createBaseCaseClassification();
    message.id = object.id ?? "";
    message.displayName = object.displayName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
