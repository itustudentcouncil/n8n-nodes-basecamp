// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/support/v2/comment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Actor } from "./actor.js";

export const protobufPackage = "google.cloud.support.v2";

/** A comment associated with a support case. */
export interface Comment {
  /** Output only. The resource name for the comment. */
  name: string;
  /** Output only. The time when this comment was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The user or Google Support agent created this comment. */
  creator:
    | Actor
    | undefined;
  /**
   * The full comment body. Maximum of 12800 characters. This can contain rich
   * text syntax.
   */
  body: string;
  /**
   * Output only. DEPRECATED. An automatically generated plain text version of
   * body with all rich text syntax stripped.
   */
  plainTextBody: string;
}

function createBaseComment(): Comment {
  return { name: "", createTime: undefined, creator: undefined, body: "", plainTextBody: "" };
}

export const Comment: MessageFns<Comment> = {
  encode(message: Comment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.creator !== undefined) {
      Actor.encode(message.creator, writer.uint32(26).fork()).join();
    }
    if (message.body !== "") {
      writer.uint32(34).string(message.body);
    }
    if (message.plainTextBody !== "") {
      writer.uint32(42).string(message.plainTextBody);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Comment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.creator = Actor.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.body = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.plainTextBody = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Comment {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      creator: isSet(object.creator) ? Actor.fromJSON(object.creator) : undefined,
      body: isSet(object.body) ? globalThis.String(object.body) : "",
      plainTextBody: isSet(object.plainTextBody) ? globalThis.String(object.plainTextBody) : "",
    };
  },

  toJSON(message: Comment): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.creator !== undefined) {
      obj.creator = Actor.toJSON(message.creator);
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    if (message.plainTextBody !== "") {
      obj.plainTextBody = message.plainTextBody;
    }
    return obj;
  },

  create(base?: DeepPartial<Comment>): Comment {
    return Comment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Comment>): Comment {
    const message = createBaseComment();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.creator = (object.creator !== undefined && object.creator !== null)
      ? Actor.fromPartial(object.creator)
      : undefined;
    message.body = object.body ?? "";
    message.plainTextBody = object.plainTextBody ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
