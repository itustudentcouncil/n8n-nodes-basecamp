// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/support/v2/actor.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.support.v2";

/**
 * An object containing information about the effective user and
 * authenticated principal responsible for an action.
 */
export interface Actor {
  /**
   * The name to display for the actor. If not provided, it is inferred from
   * credentials supplied during case creation. When an email is provided, a
   * display name must also be provided. This will be obfuscated if the user
   * is a Google Support agent.
   */
  displayName: string;
  /**
   * The email address of the actor. If not provided, it is inferred from
   * credentials supplied during case creation. If the authenticated principal
   * does not have an email address, one must be provided. When a name is
   * provided, an email must also be provided. This will be obfuscated if the
   * user is a Google Support agent.
   */
  email: string;
  /** Output only. Whether the actor is a Google support actor. */
  googleSupport: boolean;
}

function createBaseActor(): Actor {
  return { displayName: "", email: "", googleSupport: false };
}

export const Actor: MessageFns<Actor> = {
  encode(message: Actor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.googleSupport !== false) {
      writer.uint32(32).bool(message.googleSupport);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Actor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.googleSupport = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Actor {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      googleSupport: isSet(object.googleSupport) ? globalThis.Boolean(object.googleSupport) : false,
    };
  },

  toJSON(message: Actor): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.googleSupport !== false) {
      obj.googleSupport = message.googleSupport;
    }
    return obj;
  },

  create(base?: DeepPartial<Actor>): Actor {
    return Actor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Actor>): Actor {
    const message = createBaseActor();
    message.displayName = object.displayName ?? "";
    message.email = object.email ?? "";
    message.googleSupport = object.googleSupport ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
