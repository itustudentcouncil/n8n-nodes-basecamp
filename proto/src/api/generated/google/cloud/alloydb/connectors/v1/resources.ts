// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/alloydb/connectors/v1/resources.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.alloydb.connectors.v1";

/**
 * Message used by AlloyDB connectors to exchange client and connection metadata
 * with the server after a successful TLS handshake. This metadata includes an
 * IAM token, which is used to authenticate users based on their IAM identity.
 * The sole purpose of this message is for the use of AlloyDB connectors.
 * Clients should not rely on this message directly as there can be breaking
 * changes in the future.
 */
export interface MetadataExchangeRequest {
  /** Optional. Connector information. */
  userAgent: string;
  /** Authentication type. */
  authType: MetadataExchangeRequest_AuthType;
  /**
   * IAM token used for both IAM user authentiation and
   * `alloydb.instances.connect` permission check.
   */
  oauth2Token: string;
}

/** AuthType contains all supported authentication types. */
export enum MetadataExchangeRequest_AuthType {
  /** AUTH_TYPE_UNSPECIFIED - Authentication type is unspecified and DB_NATIVE is used by default */
  AUTH_TYPE_UNSPECIFIED = 0,
  /** DB_NATIVE - Database native authentication (user/password) */
  DB_NATIVE = 1,
  /** AUTO_IAM - Automatic IAM authentication */
  AUTO_IAM = 2,
  UNRECOGNIZED = -1,
}

export function metadataExchangeRequest_AuthTypeFromJSON(object: any): MetadataExchangeRequest_AuthType {
  switch (object) {
    case 0:
    case "AUTH_TYPE_UNSPECIFIED":
      return MetadataExchangeRequest_AuthType.AUTH_TYPE_UNSPECIFIED;
    case 1:
    case "DB_NATIVE":
      return MetadataExchangeRequest_AuthType.DB_NATIVE;
    case 2:
    case "AUTO_IAM":
      return MetadataExchangeRequest_AuthType.AUTO_IAM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MetadataExchangeRequest_AuthType.UNRECOGNIZED;
  }
}

export function metadataExchangeRequest_AuthTypeToJSON(object: MetadataExchangeRequest_AuthType): string {
  switch (object) {
    case MetadataExchangeRequest_AuthType.AUTH_TYPE_UNSPECIFIED:
      return "AUTH_TYPE_UNSPECIFIED";
    case MetadataExchangeRequest_AuthType.DB_NATIVE:
      return "DB_NATIVE";
    case MetadataExchangeRequest_AuthType.AUTO_IAM:
      return "AUTO_IAM";
    case MetadataExchangeRequest_AuthType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Message for response to metadata exchange request. The sole purpose of this
 * message is for the use of AlloyDB connectors. Clients should not rely on this
 * message directly as there can be breaking changes in the future.
 */
export interface MetadataExchangeResponse {
  /** Response code. */
  responseCode: MetadataExchangeResponse_ResponseCode;
  /** Optional. Error message. */
  error: string;
}

/** Response code. */
export enum MetadataExchangeResponse_ResponseCode {
  /** RESPONSE_CODE_UNSPECIFIED - Unknown response code */
  RESPONSE_CODE_UNSPECIFIED = 0,
  /** OK - Success */
  OK = 1,
  /** ERROR - Failure */
  ERROR = 2,
  UNRECOGNIZED = -1,
}

export function metadataExchangeResponse_ResponseCodeFromJSON(object: any): MetadataExchangeResponse_ResponseCode {
  switch (object) {
    case 0:
    case "RESPONSE_CODE_UNSPECIFIED":
      return MetadataExchangeResponse_ResponseCode.RESPONSE_CODE_UNSPECIFIED;
    case 1:
    case "OK":
      return MetadataExchangeResponse_ResponseCode.OK;
    case 2:
    case "ERROR":
      return MetadataExchangeResponse_ResponseCode.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MetadataExchangeResponse_ResponseCode.UNRECOGNIZED;
  }
}

export function metadataExchangeResponse_ResponseCodeToJSON(object: MetadataExchangeResponse_ResponseCode): string {
  switch (object) {
    case MetadataExchangeResponse_ResponseCode.RESPONSE_CODE_UNSPECIFIED:
      return "RESPONSE_CODE_UNSPECIFIED";
    case MetadataExchangeResponse_ResponseCode.OK:
      return "OK";
    case MetadataExchangeResponse_ResponseCode.ERROR:
      return "ERROR";
    case MetadataExchangeResponse_ResponseCode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseMetadataExchangeRequest(): MetadataExchangeRequest {
  return { userAgent: "", authType: 0, oauth2Token: "" };
}

export const MetadataExchangeRequest: MessageFns<MetadataExchangeRequest> = {
  encode(message: MetadataExchangeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userAgent !== "") {
      writer.uint32(10).string(message.userAgent);
    }
    if (message.authType !== 0) {
      writer.uint32(16).int32(message.authType);
    }
    if (message.oauth2Token !== "") {
      writer.uint32(26).string(message.oauth2Token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataExchangeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataExchangeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.authType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.oauth2Token = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetadataExchangeRequest {
    return {
      userAgent: isSet(object.userAgent) ? globalThis.String(object.userAgent) : "",
      authType: isSet(object.authType) ? metadataExchangeRequest_AuthTypeFromJSON(object.authType) : 0,
      oauth2Token: isSet(object.oauth2Token) ? globalThis.String(object.oauth2Token) : "",
    };
  },

  toJSON(message: MetadataExchangeRequest): unknown {
    const obj: any = {};
    if (message.userAgent !== "") {
      obj.userAgent = message.userAgent;
    }
    if (message.authType !== 0) {
      obj.authType = metadataExchangeRequest_AuthTypeToJSON(message.authType);
    }
    if (message.oauth2Token !== "") {
      obj.oauth2Token = message.oauth2Token;
    }
    return obj;
  },

  create(base?: DeepPartial<MetadataExchangeRequest>): MetadataExchangeRequest {
    return MetadataExchangeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MetadataExchangeRequest>): MetadataExchangeRequest {
    const message = createBaseMetadataExchangeRequest();
    message.userAgent = object.userAgent ?? "";
    message.authType = object.authType ?? 0;
    message.oauth2Token = object.oauth2Token ?? "";
    return message;
  },
};

function createBaseMetadataExchangeResponse(): MetadataExchangeResponse {
  return { responseCode: 0, error: "" };
}

export const MetadataExchangeResponse: MessageFns<MetadataExchangeResponse> = {
  encode(message: MetadataExchangeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.responseCode !== 0) {
      writer.uint32(8).int32(message.responseCode);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataExchangeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataExchangeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.responseCode = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetadataExchangeResponse {
    return {
      responseCode: isSet(object.responseCode) ? metadataExchangeResponse_ResponseCodeFromJSON(object.responseCode) : 0,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: MetadataExchangeResponse): unknown {
    const obj: any = {};
    if (message.responseCode !== 0) {
      obj.responseCode = metadataExchangeResponse_ResponseCodeToJSON(message.responseCode);
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create(base?: DeepPartial<MetadataExchangeResponse>): MetadataExchangeResponse {
    return MetadataExchangeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MetadataExchangeResponse>): MetadataExchangeResponse {
    const message = createBaseMetadataExchangeResponse();
    message.responseCode = object.responseCode ?? 0;
    message.error = object.error ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
