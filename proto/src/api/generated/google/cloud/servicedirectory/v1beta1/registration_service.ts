// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/servicedirectory/v1beta1/registration_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Endpoint } from "./endpoint.js";
import { Namespace } from "./namespace.js";
import { Service } from "./service.js";

export const protobufPackage = "google.cloud.servicedirectory.v1beta1";

/**
 * The request message for
 * [RegistrationService.CreateNamespace][google.cloud.servicedirectory.v1beta1.RegistrationService.CreateNamespace].
 */
export interface CreateNamespaceRequest {
  /**
   * Required. The resource name of the project and location the namespace
   * will be created in.
   */
  parent: string;
  /**
   * Required. The Resource ID must be 1-63 characters long, and comply with
   * <a href="https://www.ietf.org/rfc/rfc1035.txt" target="_blank">RFC1035</a>.
   * Specifically, the name must be 1-63 characters long and match the regular
   * expression `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first
   * character must be a lowercase letter, and all following characters must
   * be a dash, lowercase letter, or digit, except the last character, which
   * cannot be a dash.
   */
  namespaceId: string;
  /** Required. A namespace with initial fields set. */
  namespace: Namespace | undefined;
}

/**
 * The request message for
 * [RegistrationService.ListNamespaces][google.cloud.servicedirectory.v1beta1.RegistrationService.ListNamespaces].
 */
export interface ListNamespacesRequest {
  /**
   * Required. The resource name of the project and location whose namespaces
   * you'd like to list.
   */
  parent: string;
  /** Optional. The maximum number of items to return. The default value is 100. */
  pageSize: number;
  /**
   * Optional. The next_page_token value returned from a previous List request,
   * if any.
   */
  pageToken: string;
  /**
   * Optional. The filter to list results by.
   *
   * General `filter` string syntax:
   * `<field> <operator> <value> (<logical connector>)`
   *
   * *   `<field>` can be `name`, `labels.<key>` for map field, or
   * `attributes.<field>` for attributes field
   * *   `<operator>` can be `<`, `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:`
   *     means `HAS`, and is roughly the same as `=`
   * *   `<value>` must be the same data type as field
   * *   `<logical connector>` can be `AND`, `OR`, `NOT`
   *
   * Examples of valid filters:
   *
   * *   `labels.owner` returns namespaces that have a label with the key
   *     `owner`, this is the same as `labels:owner`
   * *   `labels.owner=sd` returns namespaces that have key/value `owner=sd`
   * *   `name>projects/my-project/locations/us-east1/namespaces/namespace-c`
   *     returns namespaces that have name that is alphabetically later than the
   *     string, so "namespace-e" is returned but "namespace-a" is not
   * *   `labels.owner!=sd AND labels.foo=bar` returns namespaces that have
   *     `owner` in label key but value is not `sd` AND have key/value `foo=bar`
   * *   `doesnotexist.foo=bar` returns an empty list. Note that namespace
   *     doesn't have a field called "doesnotexist". Since the filter does not
   *     match any namespaces, it returns no results
   * *   `attributes.managed_registration=true` returns namespaces that are
   *     managed by a GCP product or service
   *
   * For more information about filtering, see
   * [API Filtering](https://aip.dev/160).
   */
  filter: string;
  /**
   * Optional. The order to list results by.
   *
   * General `order_by` string syntax: `<field> (<asc|desc>) (,)`
   *
   * *   `<field>` allows value: `name`
   * *   `<asc|desc>` ascending or descending order by `<field>`. If this is
   *     left blank, `asc` is used
   *
   * Note that an empty `order_by` string results in default order, which is
   * order by `name` in ascending order.
   */
  orderBy: string;
}

/**
 * The response message for
 * [RegistrationService.ListNamespaces][google.cloud.servicedirectory.v1beta1.RegistrationService.ListNamespaces].
 */
export interface ListNamespacesResponse {
  /** The list of namespaces. */
  namespaces: Namespace[];
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [RegistrationService.GetNamespace][google.cloud.servicedirectory.v1beta1.RegistrationService.GetNamespace].
 */
export interface GetNamespaceRequest {
  /** Required. The name of the namespace to retrieve. */
  name: string;
}

/**
 * The request message for
 * [RegistrationService.UpdateNamespace][google.cloud.servicedirectory.v1beta1.RegistrationService.UpdateNamespace].
 */
export interface UpdateNamespaceRequest {
  /** Required. The updated namespace. */
  namespace:
    | Namespace
    | undefined;
  /** Required. List of fields to be updated in this request. */
  updateMask: string[] | undefined;
}

/**
 * The request message for
 * [RegistrationService.DeleteNamespace][google.cloud.servicedirectory.v1beta1.RegistrationService.DeleteNamespace].
 */
export interface DeleteNamespaceRequest {
  /** Required. The name of the namespace to delete. */
  name: string;
}

/**
 * The request message for
 * [RegistrationService.CreateService][google.cloud.servicedirectory.v1beta1.RegistrationService.CreateService].
 */
export interface CreateServiceRequest {
  /** Required. The resource name of the namespace this service will belong to. */
  parent: string;
  /**
   * Required. The Resource ID must be 1-63 characters long, and comply with
   * <a href="https://www.ietf.org/rfc/rfc1035.txt" target="_blank">RFC1035</a>.
   * Specifically, the name must be 1-63 characters long and match the regular
   * expression `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first
   * character must be a lowercase letter, and all following characters must
   * be a dash, lowercase letter, or digit, except the last character, which
   * cannot be a dash.
   */
  serviceId: string;
  /** Required. A service  with initial fields set. */
  service: Service | undefined;
}

/**
 * The request message for
 * [RegistrationService.ListServices][google.cloud.servicedirectory.v1beta1.RegistrationService.ListServices].
 */
export interface ListServicesRequest {
  /**
   * Required. The resource name of the namespace whose services you'd
   * like to list.
   */
  parent: string;
  /** Optional. The maximum number of items to return. The default value is 100. */
  pageSize: number;
  /**
   * Optional. The next_page_token value returned from a previous List request,
   * if any.
   */
  pageToken: string;
  /**
   * Optional. The filter to list results by.
   *
   * General `filter` string syntax:
   * `<field> <operator> <value> (<logical connector>)`
   *
   * *   `<field>` can be `name` or `metadata.<key>` for map field
   * *   `<operator>` can be `<`, `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:`
   *     means `HAS`, and is roughly the same as `=`
   * *   `<value>` must be the same data type as field
   * *   `<logical connector>` can be `AND`, `OR`, `NOT`
   *
   * Examples of valid filters:
   *
   * *   `metadata.owner` returns services that have a metadata with the key
   *     `owner`, this is the same as `metadata:owner`
   * *   `metadata.protocol=gRPC` returns services that have key/value
   *     `protocol=gRPC`
   * *
   * `name>projects/my-project/locations/us-east1/namespaces/my-namespace/services/service-c`
   *     returns services that have name that is alphabetically later than the
   *     string, so "service-e" is returned but "service-a" is not
   * *   `metadata.owner!=sd AND metadata.foo=bar` returns services that have
   *     `owner` in metadata key but value is not `sd` AND have key/value
   *     `foo=bar`
   * *   `doesnotexist.foo=bar` returns an empty list. Note that service
   *     doesn't have a field called "doesnotexist". Since the filter does not
   *     match any services, it returns no results
   * *   `attributes.managed_registration=true` returns services that are
   * managed
   *     by a GCP product or service
   *
   * For more information about filtering, see
   * [API Filtering](https://aip.dev/160).
   */
  filter: string;
  /**
   * Optional. The order to list results by.
   *
   * General `order_by` string syntax: `<field> (<asc|desc>) (,)`
   *
   * *   `<field>` allows value: `name`
   * *   `<asc|desc>` ascending or descending order by `<field>`. If this is
   *     left blank, `asc` is used
   *
   * Note that an empty `order_by` string results in default order, which is
   * order by `name` in ascending order.
   */
  orderBy: string;
}

/**
 * The response message for
 * [RegistrationService.ListServices][google.cloud.servicedirectory.v1beta1.RegistrationService.ListServices].
 */
export interface ListServicesResponse {
  /** The list of services. */
  services: Service[];
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [RegistrationService.GetService][google.cloud.servicedirectory.v1beta1.RegistrationService.GetService].
 * This should not be used for looking up a service. Instead, use the `resolve`
 * method as it contains all endpoints and associated metadata.
 */
export interface GetServiceRequest {
  /** Required. The name of the service to get. */
  name: string;
}

/**
 * The request message for
 * [RegistrationService.UpdateService][google.cloud.servicedirectory.v1beta1.RegistrationService.UpdateService].
 */
export interface UpdateServiceRequest {
  /** Required. The updated service. */
  service:
    | Service
    | undefined;
  /** Required. List of fields to be updated in this request. */
  updateMask: string[] | undefined;
}

/**
 * The request message for
 * [RegistrationService.DeleteService][google.cloud.servicedirectory.v1beta1.RegistrationService.DeleteService].
 */
export interface DeleteServiceRequest {
  /** Required. The name of the service to delete. */
  name: string;
}

/**
 * The request message for
 * [RegistrationService.CreateEndpoint][google.cloud.servicedirectory.v1beta1.RegistrationService.CreateEndpoint].
 */
export interface CreateEndpointRequest {
  /** Required. The resource name of the service that this endpoint provides. */
  parent: string;
  /**
   * Required. The Resource ID must be 1-63 characters long, and comply with
   * <a href="https://www.ietf.org/rfc/rfc1035.txt" target="_blank">RFC1035</a>.
   * Specifically, the name must be 1-63 characters long and match the regular
   * expression `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first
   * character must be a lowercase letter, and all following characters must
   * be a dash, lowercase letter, or digit, except the last character, which
   * cannot be a dash.
   */
  endpointId: string;
  /** Required. A endpoint with initial fields set. */
  endpoint: Endpoint | undefined;
}

/**
 * The request message for
 * [RegistrationService.ListEndpoints][google.cloud.servicedirectory.v1beta1.RegistrationService.ListEndpoints].
 */
export interface ListEndpointsRequest {
  /**
   * Required. The resource name of the service whose endpoints you'd like to
   * list.
   */
  parent: string;
  /** Optional. The maximum number of items to return. The default value is 100. */
  pageSize: number;
  /**
   * Optional. The next_page_token value returned from a previous List request,
   * if any.
   */
  pageToken: string;
  /**
   * Optional. The filter to list results by.
   *
   * General `filter` string syntax:
   * `<field> <operator> <value> (<logical connector>)`
   *
   * *   `<field>` can be `name`, `address`, `port`, `metadata.<key>` for map
   *     field, or `attributes.<field>` for attributes field
   * *   `<operator>` can be `<`, `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:`
   *     means `HAS`, and is roughly the same as `=`
   * *   `<value>` must be the same data type as field
   * *   `<logical connector>` can be `AND`, `OR`, `NOT`
   *
   * Examples of valid filters:
   *
   * *   `metadata.owner` returns endpoints that have a metadata with the key
   *     `owner`, this is the same as `metadata:owner`
   * *   `metadata.protocol=gRPC` returns endpoints that have key/value
   *     `protocol=gRPC`
   * *   `address=192.108.1.105` returns endpoints that have this address
   * *   `port>8080` returns endpoints that have port number larger than 8080
   * *
   * `name>projects/my-project/locations/us-east1/namespaces/my-namespace/services/my-service/endpoints/endpoint-c`
   *     returns endpoints that have name that is alphabetically later than the
   *     string, so "endpoint-e" is returned but "endpoint-a" is not
   * *   `metadata.owner!=sd AND metadata.foo=bar` returns endpoints that have
   *     `owner` in metadata key but value is not `sd` AND have key/value
   *      `foo=bar`
   * *   `doesnotexist.foo=bar` returns an empty list. Note that endpoint
   *     doesn't have a field called "doesnotexist". Since the filter does not
   *     match any endpoints, it returns no results
   * *   `attributes.kubernetes_resource_type=KUBERNETES_RESOURCE_TYPE_CLUSTER_
   *     IP` returns endpoints with the corresponding kubernetes_resource_type
   *
   * For more information about filtering, see
   * [API Filtering](https://aip.dev/160).
   */
  filter: string;
  /**
   * Optional. The order to list results by.
   *
   * General `order_by` string syntax: `<field> (<asc|desc>) (,)`
   *
   * *   `<field>` allows values: `name`, `address`, `port`
   * *   `<asc|desc>` ascending or descending order by `<field>`. If this is
   *     left blank, `asc` is used
   *
   * Note that an empty `order_by` string results in default order, which is
   * order by `name` in ascending order.
   */
  orderBy: string;
}

/**
 * The response message for
 * [RegistrationService.ListEndpoints][google.cloud.servicedirectory.v1beta1.RegistrationService.ListEndpoints].
 */
export interface ListEndpointsResponse {
  /** The list of endpoints. */
  endpoints: Endpoint[];
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [RegistrationService.GetEndpoint][google.cloud.servicedirectory.v1beta1.RegistrationService.GetEndpoint].
 * This should not be used to lookup endpoints at runtime. Instead, use
 * the `resolve` method.
 */
export interface GetEndpointRequest {
  /** Required. The name of the endpoint to get. */
  name: string;
}

/**
 * The request message for
 * [RegistrationService.UpdateEndpoint][google.cloud.servicedirectory.v1beta1.RegistrationService.UpdateEndpoint].
 */
export interface UpdateEndpointRequest {
  /** Required. The updated endpoint. */
  endpoint:
    | Endpoint
    | undefined;
  /** Required. List of fields to be updated in this request. */
  updateMask: string[] | undefined;
}

/**
 * The request message for
 * [RegistrationService.DeleteEndpoint][google.cloud.servicedirectory.v1beta1.RegistrationService.DeleteEndpoint].
 */
export interface DeleteEndpointRequest {
  /** Required. The name of the endpoint to delete. */
  name: string;
}

function createBaseCreateNamespaceRequest(): CreateNamespaceRequest {
  return { parent: "", namespaceId: "", namespace: undefined };
}

export const CreateNamespaceRequest: MessageFns<CreateNamespaceRequest> = {
  encode(message: CreateNamespaceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.namespaceId !== "") {
      writer.uint32(18).string(message.namespaceId);
    }
    if (message.namespace !== undefined) {
      Namespace.encode(message.namespace, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateNamespaceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateNamespaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.namespaceId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.namespace = Namespace.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateNamespaceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      namespaceId: isSet(object.namespaceId) ? globalThis.String(object.namespaceId) : "",
      namespace: isSet(object.namespace) ? Namespace.fromJSON(object.namespace) : undefined,
    };
  },

  toJSON(message: CreateNamespaceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.namespaceId !== "") {
      obj.namespaceId = message.namespaceId;
    }
    if (message.namespace !== undefined) {
      obj.namespace = Namespace.toJSON(message.namespace);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateNamespaceRequest>): CreateNamespaceRequest {
    return CreateNamespaceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateNamespaceRequest>): CreateNamespaceRequest {
    const message = createBaseCreateNamespaceRequest();
    message.parent = object.parent ?? "";
    message.namespaceId = object.namespaceId ?? "";
    message.namespace = (object.namespace !== undefined && object.namespace !== null)
      ? Namespace.fromPartial(object.namespace)
      : undefined;
    return message;
  },
};

function createBaseListNamespacesRequest(): ListNamespacesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListNamespacesRequest: MessageFns<ListNamespacesRequest> = {
  encode(message: ListNamespacesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNamespacesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNamespacesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNamespacesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListNamespacesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNamespacesRequest>): ListNamespacesRequest {
    return ListNamespacesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNamespacesRequest>): ListNamespacesRequest {
    const message = createBaseListNamespacesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListNamespacesResponse(): ListNamespacesResponse {
  return { namespaces: [], nextPageToken: "" };
}

export const ListNamespacesResponse: MessageFns<ListNamespacesResponse> = {
  encode(message: ListNamespacesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.namespaces) {
      Namespace.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNamespacesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNamespacesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.namespaces.push(Namespace.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNamespacesResponse {
    return {
      namespaces: globalThis.Array.isArray(object?.namespaces)
        ? object.namespaces.map((e: any) => Namespace.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListNamespacesResponse): unknown {
    const obj: any = {};
    if (message.namespaces?.length) {
      obj.namespaces = message.namespaces.map((e) => Namespace.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNamespacesResponse>): ListNamespacesResponse {
    return ListNamespacesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNamespacesResponse>): ListNamespacesResponse {
    const message = createBaseListNamespacesResponse();
    message.namespaces = object.namespaces?.map((e) => Namespace.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetNamespaceRequest(): GetNamespaceRequest {
  return { name: "" };
}

export const GetNamespaceRequest: MessageFns<GetNamespaceRequest> = {
  encode(message: GetNamespaceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNamespaceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNamespaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNamespaceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetNamespaceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetNamespaceRequest>): GetNamespaceRequest {
    return GetNamespaceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetNamespaceRequest>): GetNamespaceRequest {
    const message = createBaseGetNamespaceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateNamespaceRequest(): UpdateNamespaceRequest {
  return { namespace: undefined, updateMask: undefined };
}

export const UpdateNamespaceRequest: MessageFns<UpdateNamespaceRequest> = {
  encode(message: UpdateNamespaceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.namespace !== undefined) {
      Namespace.encode(message.namespace, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateNamespaceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateNamespaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.namespace = Namespace.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateNamespaceRequest {
    return {
      namespace: isSet(object.namespace) ? Namespace.fromJSON(object.namespace) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateNamespaceRequest): unknown {
    const obj: any = {};
    if (message.namespace !== undefined) {
      obj.namespace = Namespace.toJSON(message.namespace);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateNamespaceRequest>): UpdateNamespaceRequest {
    return UpdateNamespaceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateNamespaceRequest>): UpdateNamespaceRequest {
    const message = createBaseUpdateNamespaceRequest();
    message.namespace = (object.namespace !== undefined && object.namespace !== null)
      ? Namespace.fromPartial(object.namespace)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteNamespaceRequest(): DeleteNamespaceRequest {
  return { name: "" };
}

export const DeleteNamespaceRequest: MessageFns<DeleteNamespaceRequest> = {
  encode(message: DeleteNamespaceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteNamespaceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteNamespaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteNamespaceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteNamespaceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteNamespaceRequest>): DeleteNamespaceRequest {
    return DeleteNamespaceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteNamespaceRequest>): DeleteNamespaceRequest {
    const message = createBaseDeleteNamespaceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateServiceRequest(): CreateServiceRequest {
  return { parent: "", serviceId: "", service: undefined };
}

export const CreateServiceRequest: MessageFns<CreateServiceRequest> = {
  encode(message: CreateServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.serviceId !== "") {
      writer.uint32(18).string(message.serviceId);
    }
    if (message.service !== undefined) {
      Service.encode(message.service, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.service = Service.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateServiceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      serviceId: isSet(object.serviceId) ? globalThis.String(object.serviceId) : "",
      service: isSet(object.service) ? Service.fromJSON(object.service) : undefined,
    };
  },

  toJSON(message: CreateServiceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.serviceId !== "") {
      obj.serviceId = message.serviceId;
    }
    if (message.service !== undefined) {
      obj.service = Service.toJSON(message.service);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateServiceRequest>): CreateServiceRequest {
    return CreateServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateServiceRequest>): CreateServiceRequest {
    const message = createBaseCreateServiceRequest();
    message.parent = object.parent ?? "";
    message.serviceId = object.serviceId ?? "";
    message.service = (object.service !== undefined && object.service !== null)
      ? Service.fromPartial(object.service)
      : undefined;
    return message;
  },
};

function createBaseListServicesRequest(): ListServicesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListServicesRequest: MessageFns<ListServicesRequest> = {
  encode(message: ListServicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServicesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListServicesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServicesRequest>): ListServicesRequest {
    return ListServicesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServicesRequest>): ListServicesRequest {
    const message = createBaseListServicesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListServicesResponse(): ListServicesResponse {
  return { services: [], nextPageToken: "" };
}

export const ListServicesResponse: MessageFns<ListServicesResponse> = {
  encode(message: ListServicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.services) {
      Service.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.services.push(Service.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServicesResponse {
    return {
      services: globalThis.Array.isArray(object?.services) ? object.services.map((e: any) => Service.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListServicesResponse): unknown {
    const obj: any = {};
    if (message.services?.length) {
      obj.services = message.services.map((e) => Service.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServicesResponse>): ListServicesResponse {
    return ListServicesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServicesResponse>): ListServicesResponse {
    const message = createBaseListServicesResponse();
    message.services = object.services?.map((e) => Service.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetServiceRequest(): GetServiceRequest {
  return { name: "" };
}

export const GetServiceRequest: MessageFns<GetServiceRequest> = {
  encode(message: GetServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServiceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetServiceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetServiceRequest>): GetServiceRequest {
    return GetServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServiceRequest>): GetServiceRequest {
    const message = createBaseGetServiceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateServiceRequest(): UpdateServiceRequest {
  return { service: undefined, updateMask: undefined };
}

export const UpdateServiceRequest: MessageFns<UpdateServiceRequest> = {
  encode(message: UpdateServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service !== undefined) {
      Service.encode(message.service, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.service = Service.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateServiceRequest {
    return {
      service: isSet(object.service) ? Service.fromJSON(object.service) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateServiceRequest): unknown {
    const obj: any = {};
    if (message.service !== undefined) {
      obj.service = Service.toJSON(message.service);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateServiceRequest>): UpdateServiceRequest {
    return UpdateServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateServiceRequest>): UpdateServiceRequest {
    const message = createBaseUpdateServiceRequest();
    message.service = (object.service !== undefined && object.service !== null)
      ? Service.fromPartial(object.service)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteServiceRequest(): DeleteServiceRequest {
  return { name: "" };
}

export const DeleteServiceRequest: MessageFns<DeleteServiceRequest> = {
  encode(message: DeleteServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteServiceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteServiceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteServiceRequest>): DeleteServiceRequest {
    return DeleteServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteServiceRequest>): DeleteServiceRequest {
    const message = createBaseDeleteServiceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateEndpointRequest(): CreateEndpointRequest {
  return { parent: "", endpointId: "", endpoint: undefined };
}

export const CreateEndpointRequest: MessageFns<CreateEndpointRequest> = {
  encode(message: CreateEndpointRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.endpointId !== "") {
      writer.uint32(18).string(message.endpointId);
    }
    if (message.endpoint !== undefined) {
      Endpoint.encode(message.endpoint, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEndpointRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEndpointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.endpoint = Endpoint.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEndpointRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      endpoint: isSet(object.endpoint) ? Endpoint.fromJSON(object.endpoint) : undefined,
    };
  },

  toJSON(message: CreateEndpointRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.endpoint !== undefined) {
      obj.endpoint = Endpoint.toJSON(message.endpoint);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEndpointRequest>): CreateEndpointRequest {
    return CreateEndpointRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEndpointRequest>): CreateEndpointRequest {
    const message = createBaseCreateEndpointRequest();
    message.parent = object.parent ?? "";
    message.endpointId = object.endpointId ?? "";
    message.endpoint = (object.endpoint !== undefined && object.endpoint !== null)
      ? Endpoint.fromPartial(object.endpoint)
      : undefined;
    return message;
  },
};

function createBaseListEndpointsRequest(): ListEndpointsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListEndpointsRequest: MessageFns<ListEndpointsRequest> = {
  encode(message: ListEndpointsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEndpointsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEndpointsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEndpointsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListEndpointsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEndpointsRequest>): ListEndpointsRequest {
    return ListEndpointsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEndpointsRequest>): ListEndpointsRequest {
    const message = createBaseListEndpointsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListEndpointsResponse(): ListEndpointsResponse {
  return { endpoints: [], nextPageToken: "" };
}

export const ListEndpointsResponse: MessageFns<ListEndpointsResponse> = {
  encode(message: ListEndpointsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.endpoints) {
      Endpoint.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEndpointsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEndpointsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.endpoints.push(Endpoint.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEndpointsResponse {
    return {
      endpoints: globalThis.Array.isArray(object?.endpoints)
        ? object.endpoints.map((e: any) => Endpoint.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListEndpointsResponse): unknown {
    const obj: any = {};
    if (message.endpoints?.length) {
      obj.endpoints = message.endpoints.map((e) => Endpoint.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEndpointsResponse>): ListEndpointsResponse {
    return ListEndpointsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEndpointsResponse>): ListEndpointsResponse {
    const message = createBaseListEndpointsResponse();
    message.endpoints = object.endpoints?.map((e) => Endpoint.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetEndpointRequest(): GetEndpointRequest {
  return { name: "" };
}

export const GetEndpointRequest: MessageFns<GetEndpointRequest> = {
  encode(message: GetEndpointRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEndpointRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEndpointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEndpointRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEndpointRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEndpointRequest>): GetEndpointRequest {
    return GetEndpointRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEndpointRequest>): GetEndpointRequest {
    const message = createBaseGetEndpointRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateEndpointRequest(): UpdateEndpointRequest {
  return { endpoint: undefined, updateMask: undefined };
}

export const UpdateEndpointRequest: MessageFns<UpdateEndpointRequest> = {
  encode(message: UpdateEndpointRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpoint !== undefined) {
      Endpoint.encode(message.endpoint, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEndpointRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEndpointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.endpoint = Endpoint.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEndpointRequest {
    return {
      endpoint: isSet(object.endpoint) ? Endpoint.fromJSON(object.endpoint) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateEndpointRequest): unknown {
    const obj: any = {};
    if (message.endpoint !== undefined) {
      obj.endpoint = Endpoint.toJSON(message.endpoint);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEndpointRequest>): UpdateEndpointRequest {
    return UpdateEndpointRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEndpointRequest>): UpdateEndpointRequest {
    const message = createBaseUpdateEndpointRequest();
    message.endpoint = (object.endpoint !== undefined && object.endpoint !== null)
      ? Endpoint.fromPartial(object.endpoint)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteEndpointRequest(): DeleteEndpointRequest {
  return { name: "" };
}

export const DeleteEndpointRequest: MessageFns<DeleteEndpointRequest> = {
  encode(message: DeleteEndpointRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEndpointRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEndpointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEndpointRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteEndpointRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEndpointRequest>): DeleteEndpointRequest {
    return DeleteEndpointRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEndpointRequest>): DeleteEndpointRequest {
    const message = createBaseDeleteEndpointRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * Service Directory API for registering services. It defines the following
 * resource model:
 *
 * - The API has a collection of
 * [Namespace][google.cloud.servicedirectory.v1beta1.Namespace]
 * resources, named `projects/* /locations/* /namespaces/*`.
 *
 * - Each Namespace has a collection of
 * [Service][google.cloud.servicedirectory.v1beta1.Service] resources, named
 * `projects/* /locations/* /namespaces/* /services/*`.
 *
 * - Each Service has a collection of
 * [Endpoint][google.cloud.servicedirectory.v1beta1.Endpoint]
 * resources, named
 * `projects/* /locations/* /namespaces/* /services/* /endpoints/*`.
 */
export type RegistrationServiceDefinition = typeof RegistrationServiceDefinition;
export const RegistrationServiceDefinition = {
  name: "RegistrationService",
  fullName: "google.cloud.servicedirectory.v1beta1.RegistrationService",
  methods: {
    /** Creates a namespace, and returns the new namespace. */
    createNamespace: {
      name: "CreateNamespace",
      requestType: CreateNamespaceRequest,
      requestStream: false,
      responseType: Namespace,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              29,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              44,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              64,
              58,
              9,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              34,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists all namespaces. */
    listNamespaces: {
      name: "ListNamespaces",
      requestType: ListNamespacesRequest,
      requestStream: false,
      responseType: ListNamespacesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a namespace. */
    getNamespace: {
      name: "GetNamespace",
      requestType: GetNamespaceRequest,
      requestStream: false,
      responseType: Namespace,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a namespace. */
    updateNamespace: {
      name: "UpdateNamespace",
      requestType: UpdateNamespaceRequest,
      requestStream: false,
      responseType: Namespace,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              74,
              58,
              9,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              50,
              61,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a namespace. This also deletes all services and endpoints in
     * the namespace.
     */
    deleteNamespace: {
      name: "DeleteNamespace",
      requestType: DeleteNamespaceRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              42,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a service, and returns the new service. */
    createService: {
      name: "CreateService",
      requestType: CreateServiceRequest,
      requestStream: false,
      responseType: Service,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              44,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              73,
              58,
              7,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists all services belonging to a namespace. */
    listServices: {
      name: "ListServices",
      requestType: ListServicesRequest,
      requestStream: false,
      responseType: ListServicesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a service. */
    getService: {
      name: "GetService",
      requestType: GetServiceRequest,
      requestStream: false,
      responseType: Service,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a service. */
    updateService: {
      name: "UpdateService",
      requestType: UpdateServiceRequest,
      requestStream: false,
      responseType: Service,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 115, 101, 114, 118, 105, 99, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              81,
              58,
              7,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              50,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a service. This also deletes all endpoints associated with
     * the service.
     */
    deleteService: {
      name: "DeleteService",
      requestType: DeleteServiceRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              42,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates an endpoint, and returns the new endpoint. */
    createEndpoint: {
      name: "CreateEndpoint",
      requestType: CreateEndpointRequest,
      requestStream: false,
      responseType: Endpoint,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              44,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              86,
              58,
              8,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              34,
              74,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists all endpoints. */
    listEndpoints: {
      name: "ListEndpoints",
      requestType: ListEndpointsRequest,
      requestStream: false,
      responseType: ListEndpointsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              76,
              18,
              74,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets an endpoint. */
    getEndpoint: {
      name: "GetEndpoint",
      requestType: GetEndpointRequest,
      requestStream: false,
      responseType: Endpoint,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              76,
              18,
              74,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates an endpoint. */
    updateEndpoint: {
      name: "UpdateEndpoint",
      requestType: UpdateEndpointRequest,
      requestStream: false,
      responseType: Endpoint,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              95,
              58,
              8,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              50,
              83,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an endpoint. */
    deleteEndpoint: {
      name: "DeleteEndpoint",
      requestType: DeleteEndpointRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              76,
              42,
              74,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets the IAM Policy for a resource */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              246,
              1,
              58,
              1,
              42,
              90,
              84,
              58,
              1,
              42,
              34,
              79,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              90,
              85,
              58,
              1,
              42,
              34,
              80,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              34,
              68,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /** Sets the IAM Policy for a resource */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              246,
              1,
              58,
              1,
              42,
              90,
              84,
              58,
              1,
              42,
              34,
              79,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              90,
              85,
              58,
              1,
              42,
              34,
              80,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              34,
              68,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Tests IAM permissions for a resource (namespace, service  or
     * service workload only).
     */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              136,
              2,
              58,
              1,
              42,
              90,
              90,
              58,
              1,
              42,
              34,
              85,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              90,
              91,
              58,
              1,
              42,
              34,
              86,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              34,
              74,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface RegistrationServiceImplementation<CallContextExt = {}> {
  /** Creates a namespace, and returns the new namespace. */
  createNamespace(
    request: CreateNamespaceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Namespace>>;
  /** Lists all namespaces. */
  listNamespaces(
    request: ListNamespacesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListNamespacesResponse>>;
  /** Gets a namespace. */
  getNamespace(request: GetNamespaceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Namespace>>;
  /** Updates a namespace. */
  updateNamespace(
    request: UpdateNamespaceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Namespace>>;
  /**
   * Deletes a namespace. This also deletes all services and endpoints in
   * the namespace.
   */
  deleteNamespace(request: DeleteNamespaceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Creates a service, and returns the new service. */
  createService(request: CreateServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Service>>;
  /** Lists all services belonging to a namespace. */
  listServices(
    request: ListServicesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListServicesResponse>>;
  /** Gets a service. */
  getService(request: GetServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Service>>;
  /** Updates a service. */
  updateService(request: UpdateServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Service>>;
  /**
   * Deletes a service. This also deletes all endpoints associated with
   * the service.
   */
  deleteService(request: DeleteServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Creates an endpoint, and returns the new endpoint. */
  createEndpoint(request: CreateEndpointRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Endpoint>>;
  /** Lists all endpoints. */
  listEndpoints(
    request: ListEndpointsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEndpointsResponse>>;
  /** Gets an endpoint. */
  getEndpoint(request: GetEndpointRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Endpoint>>;
  /** Updates an endpoint. */
  updateEndpoint(request: UpdateEndpointRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Endpoint>>;
  /** Deletes an endpoint. */
  deleteEndpoint(request: DeleteEndpointRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Gets the IAM Policy for a resource */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /** Sets the IAM Policy for a resource */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Tests IAM permissions for a resource (namespace, service  or
   * service workload only).
   */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
}

export interface RegistrationServiceClient<CallOptionsExt = {}> {
  /** Creates a namespace, and returns the new namespace. */
  createNamespace(
    request: DeepPartial<CreateNamespaceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Namespace>;
  /** Lists all namespaces. */
  listNamespaces(
    request: DeepPartial<ListNamespacesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListNamespacesResponse>;
  /** Gets a namespace. */
  getNamespace(request: DeepPartial<GetNamespaceRequest>, options?: CallOptions & CallOptionsExt): Promise<Namespace>;
  /** Updates a namespace. */
  updateNamespace(
    request: DeepPartial<UpdateNamespaceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Namespace>;
  /**
   * Deletes a namespace. This also deletes all services and endpoints in
   * the namespace.
   */
  deleteNamespace(request: DeepPartial<DeleteNamespaceRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Creates a service, and returns the new service. */
  createService(request: DeepPartial<CreateServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Service>;
  /** Lists all services belonging to a namespace. */
  listServices(
    request: DeepPartial<ListServicesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListServicesResponse>;
  /** Gets a service. */
  getService(request: DeepPartial<GetServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Service>;
  /** Updates a service. */
  updateService(request: DeepPartial<UpdateServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Service>;
  /**
   * Deletes a service. This also deletes all endpoints associated with
   * the service.
   */
  deleteService(request: DeepPartial<DeleteServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Creates an endpoint, and returns the new endpoint. */
  createEndpoint(
    request: DeepPartial<CreateEndpointRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Endpoint>;
  /** Lists all endpoints. */
  listEndpoints(
    request: DeepPartial<ListEndpointsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEndpointsResponse>;
  /** Gets an endpoint. */
  getEndpoint(request: DeepPartial<GetEndpointRequest>, options?: CallOptions & CallOptionsExt): Promise<Endpoint>;
  /** Updates an endpoint. */
  updateEndpoint(
    request: DeepPartial<UpdateEndpointRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Endpoint>;
  /** Deletes an endpoint. */
  deleteEndpoint(request: DeepPartial<DeleteEndpointRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Gets the IAM Policy for a resource */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /** Sets the IAM Policy for a resource */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Tests IAM permissions for a resource (namespace, service  or
   * service workload only).
   */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
