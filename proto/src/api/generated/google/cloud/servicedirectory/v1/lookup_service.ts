// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/servicedirectory/v1/lookup_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Service } from "./service.js";

export const protobufPackage = "google.cloud.servicedirectory.v1";

/**
 * The request message for
 * [LookupService.ResolveService][google.cloud.servicedirectory.v1.LookupService.ResolveService].
 * Looks up a service by its name, returns the service and its endpoints.
 */
export interface ResolveServiceRequest {
  /** Required. The name of the service to resolve. */
  name: string;
  /**
   * Optional. The maximum number of endpoints to return. Defaults to 25.
   * Maximum is 100. If a value less than one is specified, the Default is used.
   * If a value greater than the Maximum is specified, the Maximum is used.
   */
  maxEndpoints: number;
  /**
   * Optional. The filter applied to the endpoints of the resolved service.
   *
   * General `filter` string syntax:
   * `<field> <operator> <value> (<logical connector>)`
   *
   * *   `<field>` can be `name`, `address`, `port`, or `annotations.<key>` for
   *     map field
   * *   `<operator>` can be `<`, `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:`
   *     means `HAS`, and is roughly the same as `=`
   * *   `<value>` must be the same data type as field
   * *   `<logical connector>` can be `AND`, `OR`, `NOT`
   *
   * Examples of valid filters:
   *
   * *   `annotations.owner` returns endpoints that have a annotation with the
   *     key `owner`, this is the same as `annotations:owner`
   * *   `annotations.protocol=gRPC` returns endpoints that have key/value
   *     `protocol=gRPC`
   * *   `address=192.108.1.105` returns endpoints that have this address
   * *   `port>8080` returns endpoints that have port number larger than 8080
   * *
   * `name>projects/my-project/locations/us-east1/namespaces/my-namespace/services/my-service/endpoints/endpoint-c`
   *     returns endpoints that have name that is alphabetically later than the
   *     string, so "endpoint-e" is returned but "endpoint-a" is not
   * *
   * `name=projects/my-project/locations/us-central1/namespaces/my-namespace/services/my-service/endpoints/ep-1`
   *      returns the endpoint that has an endpoint_id equal to `ep-1`
   * *   `annotations.owner!=sd AND annotations.foo=bar` returns endpoints that
   *     have `owner` in annotation key but value is not `sd` AND have
   *     key/value `foo=bar`
   * *   `doesnotexist.foo=bar` returns an empty list. Note that endpoint
   *     doesn't have a field called "doesnotexist". Since the filter does not
   *     match any endpoint, it returns no results
   *
   * For more information about filtering, see
   * [API Filtering](https://aip.dev/160).
   */
  endpointFilter: string;
}

/**
 * The response message for
 * [LookupService.ResolveService][google.cloud.servicedirectory.v1.LookupService.ResolveService].
 */
export interface ResolveServiceResponse {
  service: Service | undefined;
}

function createBaseResolveServiceRequest(): ResolveServiceRequest {
  return { name: "", maxEndpoints: 0, endpointFilter: "" };
}

export const ResolveServiceRequest: MessageFns<ResolveServiceRequest> = {
  encode(message: ResolveServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.maxEndpoints !== 0) {
      writer.uint32(16).int32(message.maxEndpoints);
    }
    if (message.endpointFilter !== "") {
      writer.uint32(26).string(message.endpointFilter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxEndpoints = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.endpointFilter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolveServiceRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      maxEndpoints: isSet(object.maxEndpoints) ? globalThis.Number(object.maxEndpoints) : 0,
      endpointFilter: isSet(object.endpointFilter) ? globalThis.String(object.endpointFilter) : "",
    };
  },

  toJSON(message: ResolveServiceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.maxEndpoints !== 0) {
      obj.maxEndpoints = Math.round(message.maxEndpoints);
    }
    if (message.endpointFilter !== "") {
      obj.endpointFilter = message.endpointFilter;
    }
    return obj;
  },

  create(base?: DeepPartial<ResolveServiceRequest>): ResolveServiceRequest {
    return ResolveServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResolveServiceRequest>): ResolveServiceRequest {
    const message = createBaseResolveServiceRequest();
    message.name = object.name ?? "";
    message.maxEndpoints = object.maxEndpoints ?? 0;
    message.endpointFilter = object.endpointFilter ?? "";
    return message;
  },
};

function createBaseResolveServiceResponse(): ResolveServiceResponse {
  return { service: undefined };
}

export const ResolveServiceResponse: MessageFns<ResolveServiceResponse> = {
  encode(message: ResolveServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service !== undefined) {
      Service.encode(message.service, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.service = Service.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolveServiceResponse {
    return { service: isSet(object.service) ? Service.fromJSON(object.service) : undefined };
  },

  toJSON(message: ResolveServiceResponse): unknown {
    const obj: any = {};
    if (message.service !== undefined) {
      obj.service = Service.toJSON(message.service);
    }
    return obj;
  },

  create(base?: DeepPartial<ResolveServiceResponse>): ResolveServiceResponse {
    return ResolveServiceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResolveServiceResponse>): ResolveServiceResponse {
    const message = createBaseResolveServiceResponse();
    message.service = (object.service !== undefined && object.service !== null)
      ? Service.fromPartial(object.service)
      : undefined;
    return message;
  },
};

/** Service Directory API for looking up service data at runtime. */
export type LookupServiceDefinition = typeof LookupServiceDefinition;
export const LookupServiceDefinition = {
  name: "LookupService",
  fullName: "google.cloud.servicedirectory.v1.LookupService",
  methods: {
    /**
     * Returns a [service][google.cloud.servicedirectory.v1.Service] and its
     * associated endpoints.
     * Resolving a service is not considered an active developer method.
     */
    resolveService: {
      name: "ResolveService",
      requestType: ResolveServiceRequest,
      requestStream: false,
      responseType: ResolveServiceResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              70,
              58,
              1,
              42,
              34,
              65,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              111,
              108,
              118,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface LookupServiceImplementation<CallContextExt = {}> {
  /**
   * Returns a [service][google.cloud.servicedirectory.v1.Service] and its
   * associated endpoints.
   * Resolving a service is not considered an active developer method.
   */
  resolveService(
    request: ResolveServiceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResolveServiceResponse>>;
}

export interface LookupServiceClient<CallOptionsExt = {}> {
  /**
   * Returns a [service][google.cloud.servicedirectory.v1.Service] and its
   * associated endpoints.
   * Resolving a service is not considered an active developer method.
   */
  resolveService(
    request: DeepPartial<ResolveServiceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResolveServiceResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
