// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gkehub/v1alpha/multiclusteringress/multiclusteringress.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.gkehub.multiclusteringress.v1alpha";

/** Billing identifies which billing structure the customer is using. */
export enum Billing {
  /** BILLING_UNSPECIFIED - Unknown */
  BILLING_UNSPECIFIED = 0,
  /** PAY_AS_YOU_GO - User pays a fee per-endpoint. */
  PAY_AS_YOU_GO = 1,
  /** ANTHOS_LICENSE - User is paying for Anthos as a whole. */
  ANTHOS_LICENSE = 2,
  UNRECOGNIZED = -1,
}

export function billingFromJSON(object: any): Billing {
  switch (object) {
    case 0:
    case "BILLING_UNSPECIFIED":
      return Billing.BILLING_UNSPECIFIED;
    case 1:
    case "PAY_AS_YOU_GO":
      return Billing.PAY_AS_YOU_GO;
    case 2:
    case "ANTHOS_LICENSE":
      return Billing.ANTHOS_LICENSE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Billing.UNRECOGNIZED;
  }
}

export function billingToJSON(object: Billing): string {
  switch (object) {
    case Billing.BILLING_UNSPECIFIED:
      return "BILLING_UNSPECIFIED";
    case Billing.PAY_AS_YOU_GO:
      return "PAY_AS_YOU_GO";
    case Billing.ANTHOS_LICENSE:
      return "ANTHOS_LICENSE";
    case Billing.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * *Multi-cluster Ingress**: The configuration for the MultiClusterIngress
 * feature.
 */
export interface FeatureSpec {
  /**
   * Fully-qualified Membership name which hosts the MultiClusterIngress CRD.
   * Example: `projects/foo-proj/locations/global/memberships/bar`
   */
  configMembership: string;
  /** Customer's billing structure */
  billing: Billing;
}

function createBaseFeatureSpec(): FeatureSpec {
  return { configMembership: "", billing: 0 };
}

export const FeatureSpec: MessageFns<FeatureSpec> = {
  encode(message: FeatureSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.configMembership !== "") {
      writer.uint32(10).string(message.configMembership);
    }
    if (message.billing !== 0) {
      writer.uint32(16).int32(message.billing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.configMembership = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.billing = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureSpec {
    return {
      configMembership: isSet(object.configMembership) ? globalThis.String(object.configMembership) : "",
      billing: isSet(object.billing) ? billingFromJSON(object.billing) : 0,
    };
  },

  toJSON(message: FeatureSpec): unknown {
    const obj: any = {};
    if (message.configMembership !== "") {
      obj.configMembership = message.configMembership;
    }
    if (message.billing !== 0) {
      obj.billing = billingToJSON(message.billing);
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureSpec>): FeatureSpec {
    return FeatureSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureSpec>): FeatureSpec {
    const message = createBaseFeatureSpec();
    message.configMembership = object.configMembership ?? "";
    message.billing = object.billing ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
