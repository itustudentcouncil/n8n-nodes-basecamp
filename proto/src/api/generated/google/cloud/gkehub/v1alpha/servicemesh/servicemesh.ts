// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gkehub/v1alpha/servicemesh/servicemesh.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../../../protobuf/struct.js";

export const protobufPackage = "google.cloud.gkehub.servicemesh.v1alpha";

/**
 * *Service Mesh**: State for the whole Hub, as analyzed by the Service Mesh
 * Hub Controller.
 */
export interface FeatureState {
  /** Output only. Results of running Service Mesh analyzers. */
  analysisMessages: AnalysisMessage[];
}

/**
 * *Service Mesh**: State for a single Membership, as analyzed by the Service
 * Mesh Hub Controller.
 */
export interface MembershipState {
  /** Output only. Results of running Service Mesh analyzers. */
  analysisMessages: AnalysisMessage[];
}

/**
 * AnalysisMessageBase describes some common information that is
 * needed for all messages.
 */
export interface AnalysisMessageBase {
  /** Represents the specific type of a message. */
  type:
    | AnalysisMessageBase_Type
    | undefined;
  /** Represents how severe a message is. */
  level: AnalysisMessageBase_Level;
  /**
   * A url pointing to the Service Mesh or Istio documentation for this specific
   * error type.
   */
  documentationUrl: string;
}

/**
 * The values here are chosen so that more severe messages get sorted higher,
 * as well as leaving space in between to add more later
 * See istio.analysis.v1alpha1.AnalysisMessageBase.Level
 */
export enum AnalysisMessageBase_Level {
  /** LEVEL_UNSPECIFIED - Illegal. Same istio.analysis.v1alpha1.AnalysisMessageBase.Level.UNKNOWN. */
  LEVEL_UNSPECIFIED = 0,
  /** ERROR - ERROR represents a misconfiguration that must be fixed. */
  ERROR = 3,
  /** WARNING - WARNING represents a misconfiguration that should be fixed. */
  WARNING = 8,
  /** INFO - INFO represents an informational finding. */
  INFO = 12,
  UNRECOGNIZED = -1,
}

export function analysisMessageBase_LevelFromJSON(object: any): AnalysisMessageBase_Level {
  switch (object) {
    case 0:
    case "LEVEL_UNSPECIFIED":
      return AnalysisMessageBase_Level.LEVEL_UNSPECIFIED;
    case 3:
    case "ERROR":
      return AnalysisMessageBase_Level.ERROR;
    case 8:
    case "WARNING":
      return AnalysisMessageBase_Level.WARNING;
    case 12:
    case "INFO":
      return AnalysisMessageBase_Level.INFO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AnalysisMessageBase_Level.UNRECOGNIZED;
  }
}

export function analysisMessageBase_LevelToJSON(object: AnalysisMessageBase_Level): string {
  switch (object) {
    case AnalysisMessageBase_Level.LEVEL_UNSPECIFIED:
      return "LEVEL_UNSPECIFIED";
    case AnalysisMessageBase_Level.ERROR:
      return "ERROR";
    case AnalysisMessageBase_Level.WARNING:
      return "WARNING";
    case AnalysisMessageBase_Level.INFO:
      return "INFO";
    case AnalysisMessageBase_Level.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A unique identifier for the type of message. Display_name is intended to be
 * human-readable, code is intended to be machine readable. There should be a
 * one-to-one mapping between display_name and code. (i.e. do not re-use
 * display_names or codes between message types.)
 * See istio.analysis.v1alpha1.AnalysisMessageBase.Type
 */
export interface AnalysisMessageBase_Type {
  /**
   * A human-readable name for the message type. e.g. "InternalError",
   * "PodMissingProxy". This should be the same for all messages of the same
   * type. (This corresponds to the `name` field in open-source Istio.)
   */
  displayName: string;
  /**
   * A 7 character code matching `^IST[0-9]{4}$` or `^ASM[0-9]{4}$`, intended
   * to uniquely identify the message type. (e.g. "IST0001" is mapped to the
   * "InternalError" message type.)
   */
  code: string;
}

/**
 * AnalysisMessage is a single message produced by an analyzer, and
 * it used to communicate to the end user about the state of their Service
 * Mesh configuration.
 */
export interface AnalysisMessage {
  /** Details common to all types of Istio and ServiceMesh analysis messages. */
  messageBase:
    | AnalysisMessageBase
    | undefined;
  /**
   * A human readable description of what the error means. It is suitable for
   * non-internationalize display purposes.
   */
  description: string;
  /**
   * A list of strings specifying the resource identifiers that were the cause
   * of message generation.
   * A "path" here may be:
   * * MEMBERSHIP_ID if the cause is a specific member cluster
   * * MEMBERSHIP_ID/(NAMESPACE\/)?RESOURCETYPE/NAME if the cause is a resource
   * in a cluster
   */
  resourcePaths: string[];
  /**
   * A UI can combine these args with a template (based on message_base.type)
   * to produce an internationalized message.
   */
  args: { [key: string]: any } | undefined;
}

function createBaseFeatureState(): FeatureState {
  return { analysisMessages: [] };
}

export const FeatureState: MessageFns<FeatureState> = {
  encode(message: FeatureState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.analysisMessages) {
      AnalysisMessage.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.analysisMessages.push(AnalysisMessage.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureState {
    return {
      analysisMessages: globalThis.Array.isArray(object?.analysisMessages)
        ? object.analysisMessages.map((e: any) => AnalysisMessage.fromJSON(e))
        : [],
    };
  },

  toJSON(message: FeatureState): unknown {
    const obj: any = {};
    if (message.analysisMessages?.length) {
      obj.analysisMessages = message.analysisMessages.map((e) => AnalysisMessage.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureState>): FeatureState {
    return FeatureState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureState>): FeatureState {
    const message = createBaseFeatureState();
    message.analysisMessages = object.analysisMessages?.map((e) => AnalysisMessage.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMembershipState(): MembershipState {
  return { analysisMessages: [] };
}

export const MembershipState: MessageFns<MembershipState> = {
  encode(message: MembershipState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.analysisMessages) {
      AnalysisMessage.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MembershipState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMembershipState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.analysisMessages.push(AnalysisMessage.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MembershipState {
    return {
      analysisMessages: globalThis.Array.isArray(object?.analysisMessages)
        ? object.analysisMessages.map((e: any) => AnalysisMessage.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MembershipState): unknown {
    const obj: any = {};
    if (message.analysisMessages?.length) {
      obj.analysisMessages = message.analysisMessages.map((e) => AnalysisMessage.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MembershipState>): MembershipState {
    return MembershipState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MembershipState>): MembershipState {
    const message = createBaseMembershipState();
    message.analysisMessages = object.analysisMessages?.map((e) => AnalysisMessage.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAnalysisMessageBase(): AnalysisMessageBase {
  return { type: undefined, level: 0, documentationUrl: "" };
}

export const AnalysisMessageBase: MessageFns<AnalysisMessageBase> = {
  encode(message: AnalysisMessageBase, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined) {
      AnalysisMessageBase_Type.encode(message.type, writer.uint32(10).fork()).join();
    }
    if (message.level !== 0) {
      writer.uint32(16).int32(message.level);
    }
    if (message.documentationUrl !== "") {
      writer.uint32(26).string(message.documentationUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnalysisMessageBase {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalysisMessageBase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = AnalysisMessageBase_Type.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.level = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.documentationUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnalysisMessageBase {
    return {
      type: isSet(object.type) ? AnalysisMessageBase_Type.fromJSON(object.type) : undefined,
      level: isSet(object.level) ? analysisMessageBase_LevelFromJSON(object.level) : 0,
      documentationUrl: isSet(object.documentationUrl) ? globalThis.String(object.documentationUrl) : "",
    };
  },

  toJSON(message: AnalysisMessageBase): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = AnalysisMessageBase_Type.toJSON(message.type);
    }
    if (message.level !== 0) {
      obj.level = analysisMessageBase_LevelToJSON(message.level);
    }
    if (message.documentationUrl !== "") {
      obj.documentationUrl = message.documentationUrl;
    }
    return obj;
  },

  create(base?: DeepPartial<AnalysisMessageBase>): AnalysisMessageBase {
    return AnalysisMessageBase.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnalysisMessageBase>): AnalysisMessageBase {
    const message = createBaseAnalysisMessageBase();
    message.type = (object.type !== undefined && object.type !== null)
      ? AnalysisMessageBase_Type.fromPartial(object.type)
      : undefined;
    message.level = object.level ?? 0;
    message.documentationUrl = object.documentationUrl ?? "";
    return message;
  },
};

function createBaseAnalysisMessageBase_Type(): AnalysisMessageBase_Type {
  return { displayName: "", code: "" };
}

export const AnalysisMessageBase_Type: MessageFns<AnalysisMessageBase_Type> = {
  encode(message: AnalysisMessageBase_Type, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnalysisMessageBase_Type {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalysisMessageBase_Type();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnalysisMessageBase_Type {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
    };
  },

  toJSON(message: AnalysisMessageBase_Type): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    return obj;
  },

  create(base?: DeepPartial<AnalysisMessageBase_Type>): AnalysisMessageBase_Type {
    return AnalysisMessageBase_Type.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnalysisMessageBase_Type>): AnalysisMessageBase_Type {
    const message = createBaseAnalysisMessageBase_Type();
    message.displayName = object.displayName ?? "";
    message.code = object.code ?? "";
    return message;
  },
};

function createBaseAnalysisMessage(): AnalysisMessage {
  return { messageBase: undefined, description: "", resourcePaths: [], args: undefined };
}

export const AnalysisMessage: MessageFns<AnalysisMessage> = {
  encode(message: AnalysisMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageBase !== undefined) {
      AnalysisMessageBase.encode(message.messageBase, writer.uint32(10).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.resourcePaths) {
      writer.uint32(26).string(v!);
    }
    if (message.args !== undefined) {
      Struct.encode(Struct.wrap(message.args), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnalysisMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalysisMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.messageBase = AnalysisMessageBase.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resourcePaths.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.args = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnalysisMessage {
    return {
      messageBase: isSet(object.messageBase) ? AnalysisMessageBase.fromJSON(object.messageBase) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      resourcePaths: globalThis.Array.isArray(object?.resourcePaths)
        ? object.resourcePaths.map((e: any) => globalThis.String(e))
        : [],
      args: isObject(object.args) ? object.args : undefined,
    };
  },

  toJSON(message: AnalysisMessage): unknown {
    const obj: any = {};
    if (message.messageBase !== undefined) {
      obj.messageBase = AnalysisMessageBase.toJSON(message.messageBase);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.resourcePaths?.length) {
      obj.resourcePaths = message.resourcePaths;
    }
    if (message.args !== undefined) {
      obj.args = message.args;
    }
    return obj;
  },

  create(base?: DeepPartial<AnalysisMessage>): AnalysisMessage {
    return AnalysisMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnalysisMessage>): AnalysisMessage {
    const message = createBaseAnalysisMessage();
    message.messageBase = (object.messageBase !== undefined && object.messageBase !== null)
      ? AnalysisMessageBase.fromPartial(object.messageBase)
      : undefined;
    message.description = object.description ?? "";
    message.resourcePaths = object.resourcePaths?.map((e) => e) || [];
    message.args = object.args ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
