// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gkehub/v1alpha/cloudauditlogging/cloudauditlogging.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.gkehub.cloudauditlogging.v1alpha";

/** *Cloud Audit Logging**: Spec for Audit Logging Allowlisting. */
export interface FeatureSpec {
  /**
   * Service account that should be allowlisted to send the audit logs; eg
   * cloudauditlogging@gcp-project.iam.gserviceaccount.com. These accounts must
   * already exist, but do not need to have any permissions granted to them.
   * The customer's entitlements will be checked prior to allowlisting (i.e.
   * the customer must be an Anthos customer.)
   */
  allowlistedServiceAccounts: string[];
}

function createBaseFeatureSpec(): FeatureSpec {
  return { allowlistedServiceAccounts: [] };
}

export const FeatureSpec: MessageFns<FeatureSpec> = {
  encode(message: FeatureSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.allowlistedServiceAccounts) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.allowlistedServiceAccounts.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureSpec {
    return {
      allowlistedServiceAccounts: globalThis.Array.isArray(object?.allowlistedServiceAccounts)
        ? object.allowlistedServiceAccounts.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: FeatureSpec): unknown {
    const obj: any = {};
    if (message.allowlistedServiceAccounts?.length) {
      obj.allowlistedServiceAccounts = message.allowlistedServiceAccounts;
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureSpec>): FeatureSpec {
    return FeatureSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureSpec>): FeatureSpec {
    const message = createBaseFeatureSpec();
    message.allowlistedServiceAccounts = object.allowlistedServiceAccounts?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
