// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/sql/v1beta4/cloud_sql_tiers.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "google.cloud.sql.v1beta4";

export interface SqlTiersListRequest {
  /** Project ID of the project for which to list tiers. */
  project: string;
}

/** Tiers list response. */
export interface TiersListResponse {
  /** This is always `sql#tiersList`. */
  kind: string;
  /** List of tiers. */
  items: Tier[];
}

/** A Google Cloud SQL service tier resource. */
export interface Tier {
  /**
   * An identifier for the machine type, for example, `db-custom-1-3840`. For
   * related information, see [Pricing](/sql/pricing).
   */
  tier: string;
  /** The maximum RAM usage of this tier in bytes. */
  RAM: Long;
  /** This is always `sql#tier`. */
  kind: string;
  /** The maximum disk size of this tier in bytes. */
  DiskQuota: Long;
  /** The applicable regions for this tier. */
  region: string[];
}

function createBaseSqlTiersListRequest(): SqlTiersListRequest {
  return { project: "" };
}

export const SqlTiersListRequest: MessageFns<SqlTiersListRequest> = {
  encode(message: SqlTiersListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.project !== "") {
      writer.uint32(10).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlTiersListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlTiersListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlTiersListRequest {
    return { project: isSet(object.project) ? globalThis.String(object.project) : "" };
  },

  toJSON(message: SqlTiersListRequest): unknown {
    const obj: any = {};
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlTiersListRequest>): SqlTiersListRequest {
    return SqlTiersListRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlTiersListRequest>): SqlTiersListRequest {
    const message = createBaseSqlTiersListRequest();
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseTiersListResponse(): TiersListResponse {
  return { kind: "", items: [] };
}

export const TiersListResponse: MessageFns<TiersListResponse> = {
  encode(message: TiersListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kind !== "") {
      writer.uint32(10).string(message.kind);
    }
    for (const v of message.items) {
      Tier.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TiersListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTiersListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.items.push(Tier.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TiersListResponse {
    return {
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => Tier.fromJSON(e)) : [],
    };
  },

  toJSON(message: TiersListResponse): unknown {
    const obj: any = {};
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => Tier.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TiersListResponse>): TiersListResponse {
    return TiersListResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TiersListResponse>): TiersListResponse {
    const message = createBaseTiersListResponse();
    message.kind = object.kind ?? "";
    message.items = object.items?.map((e) => Tier.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTier(): Tier {
  return { tier: "", RAM: Long.ZERO, kind: "", DiskQuota: Long.ZERO, region: [] };
}

export const Tier: MessageFns<Tier> = {
  encode(message: Tier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tier !== "") {
      writer.uint32(10).string(message.tier);
    }
    if (!message.RAM.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.RAM.toString());
    }
    if (message.kind !== "") {
      writer.uint32(26).string(message.kind);
    }
    if (!message.DiskQuota.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.DiskQuota.toString());
    }
    for (const v of message.region) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tier = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.RAM = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.DiskQuota = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.region.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tier {
    return {
      tier: isSet(object.tier) ? globalThis.String(object.tier) : "",
      RAM: isSet(object.RAM) ? Long.fromValue(object.RAM) : Long.ZERO,
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
      DiskQuota: isSet(object.DiskQuota) ? Long.fromValue(object.DiskQuota) : Long.ZERO,
      region: globalThis.Array.isArray(object?.region) ? object.region.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Tier): unknown {
    const obj: any = {};
    if (message.tier !== "") {
      obj.tier = message.tier;
    }
    if (!message.RAM.equals(Long.ZERO)) {
      obj.RAM = (message.RAM || Long.ZERO).toString();
    }
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (!message.DiskQuota.equals(Long.ZERO)) {
      obj.DiskQuota = (message.DiskQuota || Long.ZERO).toString();
    }
    if (message.region?.length) {
      obj.region = message.region;
    }
    return obj;
  },

  create(base?: DeepPartial<Tier>): Tier {
    return Tier.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Tier>): Tier {
    const message = createBaseTier();
    message.tier = object.tier ?? "";
    message.RAM = (object.RAM !== undefined && object.RAM !== null) ? Long.fromValue(object.RAM) : Long.ZERO;
    message.kind = object.kind ?? "";
    message.DiskQuota = (object.DiskQuota !== undefined && object.DiskQuota !== null)
      ? Long.fromValue(object.DiskQuota)
      : Long.ZERO;
    message.region = object.region?.map((e) => e) || [];
    return message;
  },
};

/** Service for providing machine types (tiers) for Cloud SQL. */
export type SqlTiersServiceDefinition = typeof SqlTiersServiceDefinition;
export const SqlTiersServiceDefinition = {
  name: "SqlTiersService",
  fullName: "google.cloud.sql.v1beta4.SqlTiersService",
  methods: {
    /**
     * Lists all available machine types (tiers) for Cloud SQL, for example,
     * `db-custom-1-3840`. For related information, see [Pricing](/sql/pricing).
     */
    list: {
      name: "List",
      requestType: SqlTiersListRequest,
      requestStream: false,
      responseType: TiersListResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              39,
              18,
              37,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              116,
              105,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SqlTiersServiceImplementation<CallContextExt = {}> {
  /**
   * Lists all available machine types (tiers) for Cloud SQL, for example,
   * `db-custom-1-3840`. For related information, see [Pricing](/sql/pricing).
   */
  list(request: SqlTiersListRequest, context: CallContext & CallContextExt): Promise<DeepPartial<TiersListResponse>>;
}

export interface SqlTiersServiceClient<CallOptionsExt = {}> {
  /**
   * Lists all available machine types (tiers) for Cloud SQL, for example,
   * `db-custom-1-3840`. For related information, see [Pricing](/sql/pricing).
   */
  list(request: DeepPartial<SqlTiersListRequest>, options?: CallOptions & CallOptionsExt): Promise<TiersListResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
