// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/sql/v1/cloud_sql_ssl_certs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation, SslCert, SslCertDetail } from "./cloud_sql_resources.js";

export const protobufPackage = "google.cloud.sql.v1";

export interface SqlSslCertsDeleteRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  /** Sha1 FingerPrint. */
  sha1Fingerprint: string;
}

export interface SqlSslCertsGetRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  /** Sha1 FingerPrint. */
  sha1Fingerprint: string;
}

export interface SqlSslCertsInsertRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  body: SslCertsInsertRequest | undefined;
}

export interface SqlSslCertsListRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

/** SslCerts insert request. */
export interface SslCertsInsertRequest {
  /**
   * User supplied name.  Must be a distinct name from the other certificates
   * for this instance.
   */
  commonName: string;
}

/** SslCert insert response. */
export interface SslCertsInsertResponse {
  /** This is always `sql#sslCertsInsert`. */
  kind: string;
  /** The operation to track the ssl certs insert request. */
  operation:
    | Operation
    | undefined;
  /**
   * The server Certificate Authority's certificate.  If this is missing you can
   * force a new one to be generated by calling resetSslConfig method on
   * instances resource.
   */
  serverCaCert:
    | SslCert
    | undefined;
  /** The new client certificate and private key. */
  clientCert: SslCertDetail | undefined;
}

/** SslCerts list response. */
export interface SslCertsListResponse {
  /** This is always `sql#sslCertsList`. */
  kind: string;
  /** List of client certificates for the instance. */
  items: SslCert[];
}

function createBaseSqlSslCertsDeleteRequest(): SqlSslCertsDeleteRequest {
  return { instance: "", project: "", sha1Fingerprint: "" };
}

export const SqlSslCertsDeleteRequest: MessageFns<SqlSslCertsDeleteRequest> = {
  encode(message: SqlSslCertsDeleteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.sha1Fingerprint !== "") {
      writer.uint32(26).string(message.sha1Fingerprint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlSslCertsDeleteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlSslCertsDeleteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sha1Fingerprint = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlSslCertsDeleteRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      sha1Fingerprint: isSet(object.sha1Fingerprint) ? globalThis.String(object.sha1Fingerprint) : "",
    };
  },

  toJSON(message: SqlSslCertsDeleteRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.sha1Fingerprint !== "") {
      obj.sha1Fingerprint = message.sha1Fingerprint;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlSslCertsDeleteRequest>): SqlSslCertsDeleteRequest {
    return SqlSslCertsDeleteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlSslCertsDeleteRequest>): SqlSslCertsDeleteRequest {
    const message = createBaseSqlSslCertsDeleteRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.sha1Fingerprint = object.sha1Fingerprint ?? "";
    return message;
  },
};

function createBaseSqlSslCertsGetRequest(): SqlSslCertsGetRequest {
  return { instance: "", project: "", sha1Fingerprint: "" };
}

export const SqlSslCertsGetRequest: MessageFns<SqlSslCertsGetRequest> = {
  encode(message: SqlSslCertsGetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.sha1Fingerprint !== "") {
      writer.uint32(26).string(message.sha1Fingerprint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlSslCertsGetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlSslCertsGetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sha1Fingerprint = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlSslCertsGetRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      sha1Fingerprint: isSet(object.sha1Fingerprint) ? globalThis.String(object.sha1Fingerprint) : "",
    };
  },

  toJSON(message: SqlSslCertsGetRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.sha1Fingerprint !== "") {
      obj.sha1Fingerprint = message.sha1Fingerprint;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlSslCertsGetRequest>): SqlSslCertsGetRequest {
    return SqlSslCertsGetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlSslCertsGetRequest>): SqlSslCertsGetRequest {
    const message = createBaseSqlSslCertsGetRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.sha1Fingerprint = object.sha1Fingerprint ?? "";
    return message;
  },
};

function createBaseSqlSslCertsInsertRequest(): SqlSslCertsInsertRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlSslCertsInsertRequest: MessageFns<SqlSslCertsInsertRequest> = {
  encode(message: SqlSslCertsInsertRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      SslCertsInsertRequest.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlSslCertsInsertRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlSslCertsInsertRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = SslCertsInsertRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlSslCertsInsertRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? SslCertsInsertRequest.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlSslCertsInsertRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = SslCertsInsertRequest.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlSslCertsInsertRequest>): SqlSslCertsInsertRequest {
    return SqlSslCertsInsertRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlSslCertsInsertRequest>): SqlSslCertsInsertRequest {
    const message = createBaseSqlSslCertsInsertRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? SslCertsInsertRequest.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlSslCertsListRequest(): SqlSslCertsListRequest {
  return { instance: "", project: "" };
}

export const SqlSslCertsListRequest: MessageFns<SqlSslCertsListRequest> = {
  encode(message: SqlSslCertsListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlSslCertsListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlSslCertsListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlSslCertsListRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlSslCertsListRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlSslCertsListRequest>): SqlSslCertsListRequest {
    return SqlSslCertsListRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlSslCertsListRequest>): SqlSslCertsListRequest {
    const message = createBaseSqlSslCertsListRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSslCertsInsertRequest(): SslCertsInsertRequest {
  return { commonName: "" };
}

export const SslCertsInsertRequest: MessageFns<SslCertsInsertRequest> = {
  encode(message: SslCertsInsertRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commonName !== "") {
      writer.uint32(10).string(message.commonName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SslCertsInsertRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSslCertsInsertRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.commonName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SslCertsInsertRequest {
    return { commonName: isSet(object.commonName) ? globalThis.String(object.commonName) : "" };
  },

  toJSON(message: SslCertsInsertRequest): unknown {
    const obj: any = {};
    if (message.commonName !== "") {
      obj.commonName = message.commonName;
    }
    return obj;
  },

  create(base?: DeepPartial<SslCertsInsertRequest>): SslCertsInsertRequest {
    return SslCertsInsertRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SslCertsInsertRequest>): SslCertsInsertRequest {
    const message = createBaseSslCertsInsertRequest();
    message.commonName = object.commonName ?? "";
    return message;
  },
};

function createBaseSslCertsInsertResponse(): SslCertsInsertResponse {
  return { kind: "", operation: undefined, serverCaCert: undefined, clientCert: undefined };
}

export const SslCertsInsertResponse: MessageFns<SslCertsInsertResponse> = {
  encode(message: SslCertsInsertResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kind !== "") {
      writer.uint32(10).string(message.kind);
    }
    if (message.operation !== undefined) {
      Operation.encode(message.operation, writer.uint32(18).fork()).join();
    }
    if (message.serverCaCert !== undefined) {
      SslCert.encode(message.serverCaCert, writer.uint32(26).fork()).join();
    }
    if (message.clientCert !== undefined) {
      SslCertDetail.encode(message.clientCert, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SslCertsInsertResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSslCertsInsertResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operation = Operation.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.serverCaCert = SslCert.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientCert = SslCertDetail.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SslCertsInsertResponse {
    return {
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
      operation: isSet(object.operation) ? Operation.fromJSON(object.operation) : undefined,
      serverCaCert: isSet(object.serverCaCert) ? SslCert.fromJSON(object.serverCaCert) : undefined,
      clientCert: isSet(object.clientCert) ? SslCertDetail.fromJSON(object.clientCert) : undefined,
    };
  },

  toJSON(message: SslCertsInsertResponse): unknown {
    const obj: any = {};
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (message.operation !== undefined) {
      obj.operation = Operation.toJSON(message.operation);
    }
    if (message.serverCaCert !== undefined) {
      obj.serverCaCert = SslCert.toJSON(message.serverCaCert);
    }
    if (message.clientCert !== undefined) {
      obj.clientCert = SslCertDetail.toJSON(message.clientCert);
    }
    return obj;
  },

  create(base?: DeepPartial<SslCertsInsertResponse>): SslCertsInsertResponse {
    return SslCertsInsertResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SslCertsInsertResponse>): SslCertsInsertResponse {
    const message = createBaseSslCertsInsertResponse();
    message.kind = object.kind ?? "";
    message.operation = (object.operation !== undefined && object.operation !== null)
      ? Operation.fromPartial(object.operation)
      : undefined;
    message.serverCaCert = (object.serverCaCert !== undefined && object.serverCaCert !== null)
      ? SslCert.fromPartial(object.serverCaCert)
      : undefined;
    message.clientCert = (object.clientCert !== undefined && object.clientCert !== null)
      ? SslCertDetail.fromPartial(object.clientCert)
      : undefined;
    return message;
  },
};

function createBaseSslCertsListResponse(): SslCertsListResponse {
  return { kind: "", items: [] };
}

export const SslCertsListResponse: MessageFns<SslCertsListResponse> = {
  encode(message: SslCertsListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kind !== "") {
      writer.uint32(10).string(message.kind);
    }
    for (const v of message.items) {
      SslCert.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SslCertsListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSslCertsListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.items.push(SslCert.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SslCertsListResponse {
    return {
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => SslCert.fromJSON(e)) : [],
    };
  },

  toJSON(message: SslCertsListResponse): unknown {
    const obj: any = {};
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => SslCert.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SslCertsListResponse>): SslCertsListResponse {
    return SslCertsListResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SslCertsListResponse>): SslCertsListResponse {
    const message = createBaseSslCertsListResponse();
    message.kind = object.kind ?? "";
    message.items = object.items?.map((e) => SslCert.fromPartial(e)) || [];
    return message;
  },
};

/** Service to manage SSL certs for Cloud SQL instances. */
export type SqlSslCertsServiceDefinition = typeof SqlSslCertsServiceDefinition;
export const SqlSslCertsServiceDefinition = {
  name: "SqlSslCertsService",
  fullName: "google.cloud.sql.v1.SqlSslCertsService",
  methods: {
    /**
     * Deletes the SSL certificate. For First Generation instances, the
     * certificate remains valid until the instance is restarted.
     */
    delete: {
      name: "Delete",
      requestType: SqlSslCertsDeleteRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              73,
              42,
              71,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              115,
              115,
              108,
              67,
              101,
              114,
              116,
              115,
              47,
              123,
              115,
              104,
              97,
              49,
              95,
              102,
              105,
              110,
              103,
              101,
              114,
              112,
              114,
              105,
              110,
              116,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves a particular SSL certificate.  Does not include the private key
     * (required for usage).  The private key must be saved from the response to
     * initial creation.
     */
    get: {
      name: "Get",
      requestType: SqlSslCertsGetRequest,
      requestStream: false,
      responseType: SslCert,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              115,
              115,
              108,
              67,
              101,
              114,
              116,
              115,
              47,
              123,
              115,
              104,
              97,
              49,
              95,
              102,
              105,
              110,
              103,
              101,
              114,
              112,
              114,
              105,
              110,
              116,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates an SSL certificate and returns it along with the private key and
     * server certificate authority.  The new certificate will not be usable until
     * the instance is restarted.
     */
    insert: {
      name: "Insert",
      requestType: SqlSslCertsInsertRequest,
      requestStream: false,
      responseType: SslCertsInsertResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              60,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              52,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              115,
              115,
              108,
              67,
              101,
              114,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists all of the current SSL certificates for the instance. */
    list: {
      name: "List",
      requestType: SqlSslCertsListRequest,
      requestStream: false,
      responseType: SslCertsListResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              54,
              18,
              52,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              115,
              115,
              108,
              67,
              101,
              114,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SqlSslCertsServiceImplementation<CallContextExt = {}> {
  /**
   * Deletes the SSL certificate. For First Generation instances, the
   * certificate remains valid until the instance is restarted.
   */
  delete(request: SqlSslCertsDeleteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Retrieves a particular SSL certificate.  Does not include the private key
   * (required for usage).  The private key must be saved from the response to
   * initial creation.
   */
  get(request: SqlSslCertsGetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SslCert>>;
  /**
   * Creates an SSL certificate and returns it along with the private key and
   * server certificate authority.  The new certificate will not be usable until
   * the instance is restarted.
   */
  insert(
    request: SqlSslCertsInsertRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SslCertsInsertResponse>>;
  /** Lists all of the current SSL certificates for the instance. */
  list(
    request: SqlSslCertsListRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SslCertsListResponse>>;
}

export interface SqlSslCertsServiceClient<CallOptionsExt = {}> {
  /**
   * Deletes the SSL certificate. For First Generation instances, the
   * certificate remains valid until the instance is restarted.
   */
  delete(request: DeepPartial<SqlSslCertsDeleteRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Retrieves a particular SSL certificate.  Does not include the private key
   * (required for usage).  The private key must be saved from the response to
   * initial creation.
   */
  get(request: DeepPartial<SqlSslCertsGetRequest>, options?: CallOptions & CallOptionsExt): Promise<SslCert>;
  /**
   * Creates an SSL certificate and returns it along with the private key and
   * server certificate authority.  The new certificate will not be usable until
   * the instance is restarted.
   */
  insert(
    request: DeepPartial<SqlSslCertsInsertRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SslCertsInsertResponse>;
  /** Lists all of the current SSL certificates for the instance. */
  list(
    request: DeepPartial<SqlSslCertsListRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SslCertsListResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
