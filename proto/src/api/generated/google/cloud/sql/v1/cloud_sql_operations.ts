// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/sql/v1/cloud_sql_operations.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { Operation } from "./cloud_sql_resources.js";

export const protobufPackage = "google.cloud.sql.v1";

/** Operations get request. */
export interface SqlOperationsGetRequest {
  /** Instance operation ID. */
  operation: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

/** Operations list request. */
export interface SqlOperationsListRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Maximum number of operations per response. */
  maxResults: number;
  /**
   * A previously-returned page token representing part of the larger set of
   * results to view.
   */
  pageToken: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

/** Operations list response. */
export interface OperationsListResponse {
  /** This is always `sql#operationsList`. */
  kind: string;
  /** List of operation resources. */
  items: Operation[];
  /**
   * The continuation token, used to page through large result sets. Provide
   * this value in a subsequent request to return the next page of results.
   */
  nextPageToken: string;
}

/** Operations cancel request. */
export interface SqlOperationsCancelRequest {
  /** Instance operation ID. */
  operation: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

function createBaseSqlOperationsGetRequest(): SqlOperationsGetRequest {
  return { operation: "", project: "" };
}

export const SqlOperationsGetRequest: MessageFns<SqlOperationsGetRequest> = {
  encode(message: SqlOperationsGetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operation !== "") {
      writer.uint32(10).string(message.operation);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlOperationsGetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlOperationsGetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operation = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlOperationsGetRequest {
    return {
      operation: isSet(object.operation) ? globalThis.String(object.operation) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlOperationsGetRequest): unknown {
    const obj: any = {};
    if (message.operation !== "") {
      obj.operation = message.operation;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlOperationsGetRequest>): SqlOperationsGetRequest {
    return SqlOperationsGetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlOperationsGetRequest>): SqlOperationsGetRequest {
    const message = createBaseSqlOperationsGetRequest();
    message.operation = object.operation ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlOperationsListRequest(): SqlOperationsListRequest {
  return { instance: "", maxResults: 0, pageToken: "", project: "" };
}

export const SqlOperationsListRequest: MessageFns<SqlOperationsListRequest> = {
  encode(message: SqlOperationsListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.maxResults !== 0) {
      writer.uint32(16).uint32(message.maxResults);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.project !== "") {
      writer.uint32(34).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlOperationsListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlOperationsListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxResults = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlOperationsListRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      maxResults: isSet(object.maxResults) ? globalThis.Number(object.maxResults) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlOperationsListRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.maxResults !== 0) {
      obj.maxResults = Math.round(message.maxResults);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlOperationsListRequest>): SqlOperationsListRequest {
    return SqlOperationsListRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlOperationsListRequest>): SqlOperationsListRequest {
    const message = createBaseSqlOperationsListRequest();
    message.instance = object.instance ?? "";
    message.maxResults = object.maxResults ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseOperationsListResponse(): OperationsListResponse {
  return { kind: "", items: [], nextPageToken: "" };
}

export const OperationsListResponse: MessageFns<OperationsListResponse> = {
  encode(message: OperationsListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kind !== "") {
      writer.uint32(10).string(message.kind);
    }
    for (const v of message.items) {
      Operation.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(26).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationsListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationsListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.items.push(Operation.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationsListResponse {
    return {
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => Operation.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: OperationsListResponse): unknown {
    const obj: any = {};
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => Operation.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationsListResponse>): OperationsListResponse {
    return OperationsListResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationsListResponse>): OperationsListResponse {
    const message = createBaseOperationsListResponse();
    message.kind = object.kind ?? "";
    message.items = object.items?.map((e) => Operation.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseSqlOperationsCancelRequest(): SqlOperationsCancelRequest {
  return { operation: "", project: "" };
}

export const SqlOperationsCancelRequest: MessageFns<SqlOperationsCancelRequest> = {
  encode(message: SqlOperationsCancelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operation !== "") {
      writer.uint32(10).string(message.operation);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlOperationsCancelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlOperationsCancelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operation = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlOperationsCancelRequest {
    return {
      operation: isSet(object.operation) ? globalThis.String(object.operation) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlOperationsCancelRequest): unknown {
    const obj: any = {};
    if (message.operation !== "") {
      obj.operation = message.operation;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlOperationsCancelRequest>): SqlOperationsCancelRequest {
    return SqlOperationsCancelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlOperationsCancelRequest>): SqlOperationsCancelRequest {
    const message = createBaseSqlOperationsCancelRequest();
    message.operation = object.operation ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

/** Service to fetch operations for database instances. */
export type SqlOperationsServiceDefinition = typeof SqlOperationsServiceDefinition;
export const SqlOperationsServiceDefinition = {
  name: "SqlOperationsService",
  fullName: "google.cloud.sql.v1.SqlOperationsService",
  methods: {
    /** Retrieves an instance operation that has been performed on an instance. */
    get: {
      name: "Get",
      requestType: SqlOperationsGetRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all instance operations that have been performed on the given Cloud
     * SQL instance in the reverse chronological order of the start time.
     */
    list: {
      name: "List",
      requestType: SqlOperationsListRequest,
      requestStream: false,
      responseType: OperationsListResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              35,
              18,
              33,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Cancels an instance operation that has been performed on an instance. */
    cancel: {
      name: "Cancel",
      requestType: SqlOperationsCancelRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              54,
              34,
              52,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              125,
              47,
              99,
              97,
              110,
              99,
              101,
              108,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SqlOperationsServiceImplementation<CallContextExt = {}> {
  /** Retrieves an instance operation that has been performed on an instance. */
  get(request: SqlOperationsGetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Lists all instance operations that have been performed on the given Cloud
   * SQL instance in the reverse chronological order of the start time.
   */
  list(
    request: SqlOperationsListRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<OperationsListResponse>>;
  /** Cancels an instance operation that has been performed on an instance. */
  cancel(request: SqlOperationsCancelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface SqlOperationsServiceClient<CallOptionsExt = {}> {
  /** Retrieves an instance operation that has been performed on an instance. */
  get(request: DeepPartial<SqlOperationsGetRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Lists all instance operations that have been performed on the given Cloud
   * SQL instance in the reverse chronological order of the start time.
   */
  list(
    request: DeepPartial<SqlOperationsListRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<OperationsListResponse>;
  /** Cancels an instance operation that has been performed on an instance. */
  cancel(request: DeepPartial<SqlOperationsCancelRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
