// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/sql/v1/cloud_sql_users.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Duration } from "../../../protobuf/duration.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Operation } from "./cloud_sql_resources.js";

export const protobufPackage = "google.cloud.sql.v1";

export interface SqlUsersDeleteRequest {
  /** Host of the user in the instance. */
  host: string;
  /** Database instance ID. This does not include the project ID. */
  instance: string;
  /** Name of the user in the instance. */
  name: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

/** Request message for Users Get RPC */
export interface SqlUsersGetRequest {
  /** Database instance ID. This does not include the project ID. */
  instance: string;
  /** User of the instance. */
  name: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  /** Host of a user of the instance. */
  host: string;
}

export interface SqlUsersInsertRequest {
  /** Database instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  body: User | undefined;
}

export interface SqlUsersListRequest {
  /** Database instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

export interface SqlUsersUpdateRequest {
  /** Optional. Host of the user in the instance. */
  host: string;
  /** Database instance ID. This does not include the project ID. */
  instance: string;
  /** Name of the user in the instance. */
  name: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  body: User | undefined;
}

/** User level password validation policy. */
export interface UserPasswordValidationPolicy {
  /** Number of failed login attempts allowed before user get locked. */
  allowedFailedAttempts: number;
  /** Expiration duration after password is updated. */
  passwordExpirationDuration:
    | Duration
    | undefined;
  /** If true, failed login attempts check will be enabled. */
  enableFailedAttemptsCheck: boolean;
  /** Output only. Read-only password status. */
  status:
    | PasswordStatus
    | undefined;
  /**
   * If true, the user must specify the current password before changing the
   * password. This flag is supported only for MySQL.
   */
  enablePasswordVerification: boolean;
}

/** Read-only password status. */
export interface PasswordStatus {
  /** If true, user does not have login privileges. */
  locked: boolean;
  /** The expiration time of the current password. */
  passwordExpirationTime: Date | undefined;
}

/** A Cloud SQL user resource. */
export interface User {
  /** This is always `sql#user`. */
  kind: string;
  /** The password for the user. */
  password: string;
  /**
   * This field is deprecated and will be removed from a future version of the
   * API.
   */
  etag: string;
  /**
   * The name of the user in the Cloud SQL instance. Can be omitted for
   * `update` because it is already specified in the URL.
   */
  name: string;
  /**
   * Optional. The host from which the user can connect. For `insert`
   * operations, host defaults to an empty string. For `update`
   * operations, host is specified as part of the request URL. The host name
   * cannot be updated after insertion.  For a MySQL instance, it's required;
   * for a PostgreSQL or SQL Server instance, it's optional.
   */
  host: string;
  /**
   * The name of the Cloud SQL instance. This does not include the project ID.
   * Can be omitted for `update` because it is already specified on the
   * URL.
   */
  instance: string;
  /**
   * The project ID of the project containing the Cloud SQL database. The Google
   * apps domain is prefixed if applicable. Can be omitted for `update` because
   * it is already specified on the URL.
   */
  project: string;
  /**
   * The user type. It determines the method to authenticate the user during
   * login. The default is the database's built-in user type.
   */
  type: User_SqlUserType;
  sqlserverUserDetails?:
    | SqlServerUserDetails
    | undefined;
  /** User level password validation policy. */
  passwordPolicy:
    | UserPasswordValidationPolicy
    | undefined;
  /** Dual password status for the user. */
  dualPasswordType?: User_DualPasswordType | undefined;
}

/** The user type. */
export enum User_SqlUserType {
  /** BUILT_IN - The database's built-in user type. */
  BUILT_IN = 0,
  /** CLOUD_IAM_USER - Cloud IAM user. */
  CLOUD_IAM_USER = 1,
  /** CLOUD_IAM_SERVICE_ACCOUNT - Cloud IAM service account. */
  CLOUD_IAM_SERVICE_ACCOUNT = 2,
  /** CLOUD_IAM_GROUP - Cloud IAM group non-login user. */
  CLOUD_IAM_GROUP = 3,
  /** CLOUD_IAM_GROUP_USER - Cloud IAM group login user. */
  CLOUD_IAM_GROUP_USER = 4,
  /** CLOUD_IAM_GROUP_SERVICE_ACCOUNT - Cloud IAM group login service account. */
  CLOUD_IAM_GROUP_SERVICE_ACCOUNT = 5,
  UNRECOGNIZED = -1,
}

export function user_SqlUserTypeFromJSON(object: any): User_SqlUserType {
  switch (object) {
    case 0:
    case "BUILT_IN":
      return User_SqlUserType.BUILT_IN;
    case 1:
    case "CLOUD_IAM_USER":
      return User_SqlUserType.CLOUD_IAM_USER;
    case 2:
    case "CLOUD_IAM_SERVICE_ACCOUNT":
      return User_SqlUserType.CLOUD_IAM_SERVICE_ACCOUNT;
    case 3:
    case "CLOUD_IAM_GROUP":
      return User_SqlUserType.CLOUD_IAM_GROUP;
    case 4:
    case "CLOUD_IAM_GROUP_USER":
      return User_SqlUserType.CLOUD_IAM_GROUP_USER;
    case 5:
    case "CLOUD_IAM_GROUP_SERVICE_ACCOUNT":
      return User_SqlUserType.CLOUD_IAM_GROUP_SERVICE_ACCOUNT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return User_SqlUserType.UNRECOGNIZED;
  }
}

export function user_SqlUserTypeToJSON(object: User_SqlUserType): string {
  switch (object) {
    case User_SqlUserType.BUILT_IN:
      return "BUILT_IN";
    case User_SqlUserType.CLOUD_IAM_USER:
      return "CLOUD_IAM_USER";
    case User_SqlUserType.CLOUD_IAM_SERVICE_ACCOUNT:
      return "CLOUD_IAM_SERVICE_ACCOUNT";
    case User_SqlUserType.CLOUD_IAM_GROUP:
      return "CLOUD_IAM_GROUP";
    case User_SqlUserType.CLOUD_IAM_GROUP_USER:
      return "CLOUD_IAM_GROUP_USER";
    case User_SqlUserType.CLOUD_IAM_GROUP_SERVICE_ACCOUNT:
      return "CLOUD_IAM_GROUP_SERVICE_ACCOUNT";
    case User_SqlUserType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The type of retained password. */
export enum User_DualPasswordType {
  /** DUAL_PASSWORD_TYPE_UNSPECIFIED - The default value. */
  DUAL_PASSWORD_TYPE_UNSPECIFIED = 0,
  /** NO_MODIFY_DUAL_PASSWORD - Do not update the user's dual password status. */
  NO_MODIFY_DUAL_PASSWORD = 1,
  /** NO_DUAL_PASSWORD - No dual password usable for connecting using this user. */
  NO_DUAL_PASSWORD = 2,
  /** DUAL_PASSWORD - Dual password usable for connecting using this user. */
  DUAL_PASSWORD = 3,
  UNRECOGNIZED = -1,
}

export function user_DualPasswordTypeFromJSON(object: any): User_DualPasswordType {
  switch (object) {
    case 0:
    case "DUAL_PASSWORD_TYPE_UNSPECIFIED":
      return User_DualPasswordType.DUAL_PASSWORD_TYPE_UNSPECIFIED;
    case 1:
    case "NO_MODIFY_DUAL_PASSWORD":
      return User_DualPasswordType.NO_MODIFY_DUAL_PASSWORD;
    case 2:
    case "NO_DUAL_PASSWORD":
      return User_DualPasswordType.NO_DUAL_PASSWORD;
    case 3:
    case "DUAL_PASSWORD":
      return User_DualPasswordType.DUAL_PASSWORD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return User_DualPasswordType.UNRECOGNIZED;
  }
}

export function user_DualPasswordTypeToJSON(object: User_DualPasswordType): string {
  switch (object) {
    case User_DualPasswordType.DUAL_PASSWORD_TYPE_UNSPECIFIED:
      return "DUAL_PASSWORD_TYPE_UNSPECIFIED";
    case User_DualPasswordType.NO_MODIFY_DUAL_PASSWORD:
      return "NO_MODIFY_DUAL_PASSWORD";
    case User_DualPasswordType.NO_DUAL_PASSWORD:
      return "NO_DUAL_PASSWORD";
    case User_DualPasswordType.DUAL_PASSWORD:
      return "DUAL_PASSWORD";
    case User_DualPasswordType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents a Sql Server user on the Cloud SQL instance. */
export interface SqlServerUserDetails {
  /** If the user has been disabled */
  disabled: boolean;
  /** The server roles for this user */
  serverRoles: string[];
}

/** User list response. */
export interface UsersListResponse {
  /** This is always `sql#usersList`. */
  kind: string;
  /** List of user resources in the instance. */
  items: User[];
  /**
   * Unused.
   *
   * @deprecated
   */
  nextPageToken: string;
}

function createBaseSqlUsersDeleteRequest(): SqlUsersDeleteRequest {
  return { host: "", instance: "", name: "", project: "" };
}

export const SqlUsersDeleteRequest: MessageFns<SqlUsersDeleteRequest> = {
  encode(message: SqlUsersDeleteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.host !== "") {
      writer.uint32(10).string(message.host);
    }
    if (message.instance !== "") {
      writer.uint32(18).string(message.instance);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.project !== "") {
      writer.uint32(34).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlUsersDeleteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlUsersDeleteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.host = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlUsersDeleteRequest {
    return {
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlUsersDeleteRequest): unknown {
    const obj: any = {};
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlUsersDeleteRequest>): SqlUsersDeleteRequest {
    return SqlUsersDeleteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlUsersDeleteRequest>): SqlUsersDeleteRequest {
    const message = createBaseSqlUsersDeleteRequest();
    message.host = object.host ?? "";
    message.instance = object.instance ?? "";
    message.name = object.name ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlUsersGetRequest(): SqlUsersGetRequest {
  return { instance: "", name: "", project: "", host: "" };
}

export const SqlUsersGetRequest: MessageFns<SqlUsersGetRequest> = {
  encode(message: SqlUsersGetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.project !== "") {
      writer.uint32(26).string(message.project);
    }
    if (message.host !== "") {
      writer.uint32(34).string(message.host);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlUsersGetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlUsersGetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.project = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.host = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlUsersGetRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      host: isSet(object.host) ? globalThis.String(object.host) : "",
    };
  },

  toJSON(message: SqlUsersGetRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlUsersGetRequest>): SqlUsersGetRequest {
    return SqlUsersGetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlUsersGetRequest>): SqlUsersGetRequest {
    const message = createBaseSqlUsersGetRequest();
    message.instance = object.instance ?? "";
    message.name = object.name ?? "";
    message.project = object.project ?? "";
    message.host = object.host ?? "";
    return message;
  },
};

function createBaseSqlUsersInsertRequest(): SqlUsersInsertRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlUsersInsertRequest: MessageFns<SqlUsersInsertRequest> = {
  encode(message: SqlUsersInsertRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      User.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlUsersInsertRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlUsersInsertRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlUsersInsertRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? User.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlUsersInsertRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = User.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlUsersInsertRequest>): SqlUsersInsertRequest {
    return SqlUsersInsertRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlUsersInsertRequest>): SqlUsersInsertRequest {
    const message = createBaseSqlUsersInsertRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null) ? User.fromPartial(object.body) : undefined;
    return message;
  },
};

function createBaseSqlUsersListRequest(): SqlUsersListRequest {
  return { instance: "", project: "" };
}

export const SqlUsersListRequest: MessageFns<SqlUsersListRequest> = {
  encode(message: SqlUsersListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlUsersListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlUsersListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlUsersListRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlUsersListRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlUsersListRequest>): SqlUsersListRequest {
    return SqlUsersListRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlUsersListRequest>): SqlUsersListRequest {
    const message = createBaseSqlUsersListRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlUsersUpdateRequest(): SqlUsersUpdateRequest {
  return { host: "", instance: "", name: "", project: "", body: undefined };
}

export const SqlUsersUpdateRequest: MessageFns<SqlUsersUpdateRequest> = {
  encode(message: SqlUsersUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.host !== "") {
      writer.uint32(10).string(message.host);
    }
    if (message.instance !== "") {
      writer.uint32(18).string(message.instance);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.project !== "") {
      writer.uint32(34).string(message.project);
    }
    if (message.body !== undefined) {
      User.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlUsersUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlUsersUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.host = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlUsersUpdateRequest {
    return {
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? User.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlUsersUpdateRequest): unknown {
    const obj: any = {};
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = User.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlUsersUpdateRequest>): SqlUsersUpdateRequest {
    return SqlUsersUpdateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlUsersUpdateRequest>): SqlUsersUpdateRequest {
    const message = createBaseSqlUsersUpdateRequest();
    message.host = object.host ?? "";
    message.instance = object.instance ?? "";
    message.name = object.name ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null) ? User.fromPartial(object.body) : undefined;
    return message;
  },
};

function createBaseUserPasswordValidationPolicy(): UserPasswordValidationPolicy {
  return {
    allowedFailedAttempts: 0,
    passwordExpirationDuration: undefined,
    enableFailedAttemptsCheck: false,
    status: undefined,
    enablePasswordVerification: false,
  };
}

export const UserPasswordValidationPolicy: MessageFns<UserPasswordValidationPolicy> = {
  encode(message: UserPasswordValidationPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allowedFailedAttempts !== 0) {
      writer.uint32(8).int32(message.allowedFailedAttempts);
    }
    if (message.passwordExpirationDuration !== undefined) {
      Duration.encode(message.passwordExpirationDuration, writer.uint32(18).fork()).join();
    }
    if (message.enableFailedAttemptsCheck !== false) {
      writer.uint32(24).bool(message.enableFailedAttemptsCheck);
    }
    if (message.status !== undefined) {
      PasswordStatus.encode(message.status, writer.uint32(34).fork()).join();
    }
    if (message.enablePasswordVerification !== false) {
      writer.uint32(40).bool(message.enablePasswordVerification);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserPasswordValidationPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserPasswordValidationPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.allowedFailedAttempts = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.passwordExpirationDuration = Duration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.enableFailedAttemptsCheck = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.status = PasswordStatus.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.enablePasswordVerification = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserPasswordValidationPolicy {
    return {
      allowedFailedAttempts: isSet(object.allowedFailedAttempts) ? globalThis.Number(object.allowedFailedAttempts) : 0,
      passwordExpirationDuration: isSet(object.passwordExpirationDuration)
        ? Duration.fromJSON(object.passwordExpirationDuration)
        : undefined,
      enableFailedAttemptsCheck: isSet(object.enableFailedAttemptsCheck)
        ? globalThis.Boolean(object.enableFailedAttemptsCheck)
        : false,
      status: isSet(object.status) ? PasswordStatus.fromJSON(object.status) : undefined,
      enablePasswordVerification: isSet(object.enablePasswordVerification)
        ? globalThis.Boolean(object.enablePasswordVerification)
        : false,
    };
  },

  toJSON(message: UserPasswordValidationPolicy): unknown {
    const obj: any = {};
    if (message.allowedFailedAttempts !== 0) {
      obj.allowedFailedAttempts = Math.round(message.allowedFailedAttempts);
    }
    if (message.passwordExpirationDuration !== undefined) {
      obj.passwordExpirationDuration = Duration.toJSON(message.passwordExpirationDuration);
    }
    if (message.enableFailedAttemptsCheck !== false) {
      obj.enableFailedAttemptsCheck = message.enableFailedAttemptsCheck;
    }
    if (message.status !== undefined) {
      obj.status = PasswordStatus.toJSON(message.status);
    }
    if (message.enablePasswordVerification !== false) {
      obj.enablePasswordVerification = message.enablePasswordVerification;
    }
    return obj;
  },

  create(base?: DeepPartial<UserPasswordValidationPolicy>): UserPasswordValidationPolicy {
    return UserPasswordValidationPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserPasswordValidationPolicy>): UserPasswordValidationPolicy {
    const message = createBaseUserPasswordValidationPolicy();
    message.allowedFailedAttempts = object.allowedFailedAttempts ?? 0;
    message.passwordExpirationDuration =
      (object.passwordExpirationDuration !== undefined && object.passwordExpirationDuration !== null)
        ? Duration.fromPartial(object.passwordExpirationDuration)
        : undefined;
    message.enableFailedAttemptsCheck = object.enableFailedAttemptsCheck ?? false;
    message.status = (object.status !== undefined && object.status !== null)
      ? PasswordStatus.fromPartial(object.status)
      : undefined;
    message.enablePasswordVerification = object.enablePasswordVerification ?? false;
    return message;
  },
};

function createBasePasswordStatus(): PasswordStatus {
  return { locked: false, passwordExpirationTime: undefined };
}

export const PasswordStatus: MessageFns<PasswordStatus> = {
  encode(message: PasswordStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locked !== false) {
      writer.uint32(8).bool(message.locked);
    }
    if (message.passwordExpirationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.passwordExpirationTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PasswordStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePasswordStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.locked = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.passwordExpirationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PasswordStatus {
    return {
      locked: isSet(object.locked) ? globalThis.Boolean(object.locked) : false,
      passwordExpirationTime: isSet(object.passwordExpirationTime)
        ? fromJsonTimestamp(object.passwordExpirationTime)
        : undefined,
    };
  },

  toJSON(message: PasswordStatus): unknown {
    const obj: any = {};
    if (message.locked !== false) {
      obj.locked = message.locked;
    }
    if (message.passwordExpirationTime !== undefined) {
      obj.passwordExpirationTime = message.passwordExpirationTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<PasswordStatus>): PasswordStatus {
    return PasswordStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PasswordStatus>): PasswordStatus {
    const message = createBasePasswordStatus();
    message.locked = object.locked ?? false;
    message.passwordExpirationTime = object.passwordExpirationTime ?? undefined;
    return message;
  },
};

function createBaseUser(): User {
  return {
    kind: "",
    password: "",
    etag: "",
    name: "",
    host: "",
    instance: "",
    project: "",
    type: 0,
    sqlserverUserDetails: undefined,
    passwordPolicy: undefined,
    dualPasswordType: undefined,
  };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kind !== "") {
      writer.uint32(10).string(message.kind);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    if (message.etag !== "") {
      writer.uint32(26).string(message.etag);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.host !== "") {
      writer.uint32(42).string(message.host);
    }
    if (message.instance !== "") {
      writer.uint32(50).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(58).string(message.project);
    }
    if (message.type !== 0) {
      writer.uint32(64).int32(message.type);
    }
    if (message.sqlserverUserDetails !== undefined) {
      SqlServerUserDetails.encode(message.sqlserverUserDetails, writer.uint32(74).fork()).join();
    }
    if (message.passwordPolicy !== undefined) {
      UserPasswordValidationPolicy.encode(message.passwordPolicy, writer.uint32(98).fork()).join();
    }
    if (message.dualPasswordType !== undefined) {
      writer.uint32(104).int32(message.dualPasswordType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.host = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.project = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.sqlserverUserDetails = SqlServerUserDetails.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.passwordPolicy = UserPasswordValidationPolicy.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.dualPasswordType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      type: isSet(object.type) ? user_SqlUserTypeFromJSON(object.type) : 0,
      sqlserverUserDetails: isSet(object.sqlserverUserDetails)
        ? SqlServerUserDetails.fromJSON(object.sqlserverUserDetails)
        : undefined,
      passwordPolicy: isSet(object.passwordPolicy)
        ? UserPasswordValidationPolicy.fromJSON(object.passwordPolicy)
        : undefined,
      dualPasswordType: isSet(object.dualPasswordType)
        ? user_DualPasswordTypeFromJSON(object.dualPasswordType)
        : undefined,
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.type !== 0) {
      obj.type = user_SqlUserTypeToJSON(message.type);
    }
    if (message.sqlserverUserDetails !== undefined) {
      obj.sqlserverUserDetails = SqlServerUserDetails.toJSON(message.sqlserverUserDetails);
    }
    if (message.passwordPolicy !== undefined) {
      obj.passwordPolicy = UserPasswordValidationPolicy.toJSON(message.passwordPolicy);
    }
    if (message.dualPasswordType !== undefined) {
      obj.dualPasswordType = user_DualPasswordTypeToJSON(message.dualPasswordType);
    }
    return obj;
  },

  create(base?: DeepPartial<User>): User {
    return User.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<User>): User {
    const message = createBaseUser();
    message.kind = object.kind ?? "";
    message.password = object.password ?? "";
    message.etag = object.etag ?? "";
    message.name = object.name ?? "";
    message.host = object.host ?? "";
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.type = object.type ?? 0;
    message.sqlserverUserDetails = (object.sqlserverUserDetails !== undefined && object.sqlserverUserDetails !== null)
      ? SqlServerUserDetails.fromPartial(object.sqlserverUserDetails)
      : undefined;
    message.passwordPolicy = (object.passwordPolicy !== undefined && object.passwordPolicy !== null)
      ? UserPasswordValidationPolicy.fromPartial(object.passwordPolicy)
      : undefined;
    message.dualPasswordType = object.dualPasswordType ?? undefined;
    return message;
  },
};

function createBaseSqlServerUserDetails(): SqlServerUserDetails {
  return { disabled: false, serverRoles: [] };
}

export const SqlServerUserDetails: MessageFns<SqlServerUserDetails> = {
  encode(message: SqlServerUserDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.disabled !== false) {
      writer.uint32(8).bool(message.disabled);
    }
    for (const v of message.serverRoles) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlServerUserDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlServerUserDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.disabled = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serverRoles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlServerUserDetails {
    return {
      disabled: isSet(object.disabled) ? globalThis.Boolean(object.disabled) : false,
      serverRoles: globalThis.Array.isArray(object?.serverRoles)
        ? object.serverRoles.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SqlServerUserDetails): unknown {
    const obj: any = {};
    if (message.disabled !== false) {
      obj.disabled = message.disabled;
    }
    if (message.serverRoles?.length) {
      obj.serverRoles = message.serverRoles;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlServerUserDetails>): SqlServerUserDetails {
    return SqlServerUserDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlServerUserDetails>): SqlServerUserDetails {
    const message = createBaseSqlServerUserDetails();
    message.disabled = object.disabled ?? false;
    message.serverRoles = object.serverRoles?.map((e) => e) || [];
    return message;
  },
};

function createBaseUsersListResponse(): UsersListResponse {
  return { kind: "", items: [], nextPageToken: "" };
}

export const UsersListResponse: MessageFns<UsersListResponse> = {
  encode(message: UsersListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kind !== "") {
      writer.uint32(10).string(message.kind);
    }
    for (const v of message.items) {
      User.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(26).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsersListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsersListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.items.push(User.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsersListResponse {
    return {
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => User.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: UsersListResponse): unknown {
    const obj: any = {};
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => User.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<UsersListResponse>): UsersListResponse {
    return UsersListResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UsersListResponse>): UsersListResponse {
    const message = createBaseUsersListResponse();
    message.kind = object.kind ?? "";
    message.items = object.items?.map((e) => User.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** Cloud SQL users service. */
export type SqlUsersServiceDefinition = typeof SqlUsersServiceDefinition;
export const SqlUsersServiceDefinition = {
  name: "SqlUsersService",
  fullName: "google.cloud.sql.v1.SqlUsersService",
  methods: {
    /** Deletes a user from a Cloud SQL instance. */
    delete: {
      name: "Delete",
      requestType: SqlUsersDeleteRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              51,
              42,
              49,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              117,
              115,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves a resource containing information about a user. */
    get: {
      name: "Get",
      requestType: SqlUsersGetRequest,
      requestStream: false,
      responseType: User,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              110,
              97,
              109,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new user in a Cloud SQL instance. */
    insert: {
      name: "Insert",
      requestType: SqlUsersInsertRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              57,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              49,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              117,
              115,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists users in the specified Cloud SQL instance. */
    list: {
      name: "List",
      requestType: SqlUsersListRequest,
      requestStream: false,
      responseType: UsersListResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              117,
              115,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an existing user in a Cloud SQL instance. */
    update: {
      name: "Update",
      requestType: SqlUsersUpdateRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              57,
              58,
              4,
              98,
              111,
              100,
              121,
              26,
              49,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              117,
              115,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SqlUsersServiceImplementation<CallContextExt = {}> {
  /** Deletes a user from a Cloud SQL instance. */
  delete(request: SqlUsersDeleteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Retrieves a resource containing information about a user. */
  get(request: SqlUsersGetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<User>>;
  /** Creates a new user in a Cloud SQL instance. */
  insert(request: SqlUsersInsertRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Lists users in the specified Cloud SQL instance. */
  list(request: SqlUsersListRequest, context: CallContext & CallContextExt): Promise<DeepPartial<UsersListResponse>>;
  /** Updates an existing user in a Cloud SQL instance. */
  update(request: SqlUsersUpdateRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface SqlUsersServiceClient<CallOptionsExt = {}> {
  /** Deletes a user from a Cloud SQL instance. */
  delete(request: DeepPartial<SqlUsersDeleteRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Retrieves a resource containing information about a user. */
  get(request: DeepPartial<SqlUsersGetRequest>, options?: CallOptions & CallOptionsExt): Promise<User>;
  /** Creates a new user in a Cloud SQL instance. */
  insert(request: DeepPartial<SqlUsersInsertRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Lists users in the specified Cloud SQL instance. */
  list(request: DeepPartial<SqlUsersListRequest>, options?: CallOptions & CallOptionsExt): Promise<UsersListResponse>;
  /** Updates an existing user in a Cloud SQL instance. */
  update(request: DeepPartial<SqlUsersUpdateRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
