// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/sql/v1/cloud_sql_flags.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { BoolValue, Int64Value } from "../../../protobuf/wrappers.js";
import { SqlDatabaseVersion, sqlDatabaseVersionFromJSON, sqlDatabaseVersionToJSON } from "./cloud_sql_resources.js";

export const protobufPackage = "google.cloud.sql.v1";

export enum SqlFlagType {
  /** SQL_FLAG_TYPE_UNSPECIFIED - This is an unknown flag type. */
  SQL_FLAG_TYPE_UNSPECIFIED = 0,
  /** BOOLEAN - Boolean type flag. */
  BOOLEAN = 1,
  /** STRING - String type flag. */
  STRING = 2,
  /** INTEGER - Integer type flag. */
  INTEGER = 3,
  /** NONE - Flag type used for a server startup option. */
  NONE = 4,
  /**
   * MYSQL_TIMEZONE_OFFSET - Type introduced specially for MySQL TimeZone offset. Accept a string value
   * with the format [-12:59, 13:00].
   */
  MYSQL_TIMEZONE_OFFSET = 5,
  /** FLOAT - Float type flag. */
  FLOAT = 6,
  /** REPEATED_STRING - Comma-separated list of the strings in a SqlFlagType enum. */
  REPEATED_STRING = 7,
  UNRECOGNIZED = -1,
}

export function sqlFlagTypeFromJSON(object: any): SqlFlagType {
  switch (object) {
    case 0:
    case "SQL_FLAG_TYPE_UNSPECIFIED":
      return SqlFlagType.SQL_FLAG_TYPE_UNSPECIFIED;
    case 1:
    case "BOOLEAN":
      return SqlFlagType.BOOLEAN;
    case 2:
    case "STRING":
      return SqlFlagType.STRING;
    case 3:
    case "INTEGER":
      return SqlFlagType.INTEGER;
    case 4:
    case "NONE":
      return SqlFlagType.NONE;
    case 5:
    case "MYSQL_TIMEZONE_OFFSET":
      return SqlFlagType.MYSQL_TIMEZONE_OFFSET;
    case 6:
    case "FLOAT":
      return SqlFlagType.FLOAT;
    case 7:
    case "REPEATED_STRING":
      return SqlFlagType.REPEATED_STRING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SqlFlagType.UNRECOGNIZED;
  }
}

export function sqlFlagTypeToJSON(object: SqlFlagType): string {
  switch (object) {
    case SqlFlagType.SQL_FLAG_TYPE_UNSPECIFIED:
      return "SQL_FLAG_TYPE_UNSPECIFIED";
    case SqlFlagType.BOOLEAN:
      return "BOOLEAN";
    case SqlFlagType.STRING:
      return "STRING";
    case SqlFlagType.INTEGER:
      return "INTEGER";
    case SqlFlagType.NONE:
      return "NONE";
    case SqlFlagType.MYSQL_TIMEZONE_OFFSET:
      return "MYSQL_TIMEZONE_OFFSET";
    case SqlFlagType.FLOAT:
      return "FLOAT";
    case SqlFlagType.REPEATED_STRING:
      return "REPEATED_STRING";
    case SqlFlagType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Flags list request. */
export interface SqlFlagsListRequest {
  /**
   * Database type and version you want to retrieve flags for. By default, this
   * method returns flags for all database types and versions.
   */
  databaseVersion: string;
}

/** Flags list response. */
export interface FlagsListResponse {
  /** This is always `sql#flagsList`. */
  kind: string;
  /** List of flags. */
  items: Flag[];
}

/** A flag resource. */
export interface Flag {
  /**
   * This is the name of the flag. Flag names always use underscores, not
   * hyphens, for example: `max_allowed_packet`
   */
  name: string;
  /**
   * The type of the flag. Flags are typed to being `BOOLEAN`, `STRING`,
   * `INTEGER` or `NONE`. `NONE` is used for flags that do not take a
   * value, such as `skip_grant_tables`.
   */
  type: SqlFlagType;
  /**
   * The database version this flag applies to. Can be
   * MySQL instances: `MYSQL_8_0`, `MYSQL_8_0_18`, `MYSQL_8_0_26`, `MYSQL_5_7`,
   * or `MYSQL_5_6`. PostgreSQL instances: `POSTGRES_9_6`, `POSTGRES_10`,
   * `POSTGRES_11` or `POSTGRES_12`. SQL Server instances:
   * `SQLSERVER_2017_STANDARD`, `SQLSERVER_2017_ENTERPRISE`,
   * `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`, `SQLSERVER_2019_STANDARD`,
   * `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`, or
   * `SQLSERVER_2019_WEB`.
   * See [the complete
   * list](/sql/docs/mysql/admin-api/rest/v1/SqlDatabaseVersion).
   */
  appliesTo: SqlDatabaseVersion[];
  /** For `STRING` flags, a list of strings that the value can be set to. */
  allowedStringValues: string[];
  /** For `INTEGER` flags, the minimum allowed value. */
  minValue:
    | Long
    | undefined;
  /** For `INTEGER` flags, the maximum allowed value. */
  maxValue:
    | Long
    | undefined;
  /**
   * Indicates whether changing this flag will trigger a database restart. Only
   * applicable to Second Generation instances.
   */
  requiresRestart:
    | boolean
    | undefined;
  /** This is always `sql#flag`. */
  kind: string;
  /** Whether or not the flag is considered in beta. */
  inBeta:
    | boolean
    | undefined;
  /**
   * Use this field if only certain integers are accepted. Can be combined
   * with min_value and max_value to add additional values.
   */
  allowedIntValues: Long[];
}

function createBaseSqlFlagsListRequest(): SqlFlagsListRequest {
  return { databaseVersion: "" };
}

export const SqlFlagsListRequest: MessageFns<SqlFlagsListRequest> = {
  encode(message: SqlFlagsListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.databaseVersion !== "") {
      writer.uint32(10).string(message.databaseVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlFlagsListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlFlagsListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.databaseVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlFlagsListRequest {
    return { databaseVersion: isSet(object.databaseVersion) ? globalThis.String(object.databaseVersion) : "" };
  },

  toJSON(message: SqlFlagsListRequest): unknown {
    const obj: any = {};
    if (message.databaseVersion !== "") {
      obj.databaseVersion = message.databaseVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlFlagsListRequest>): SqlFlagsListRequest {
    return SqlFlagsListRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlFlagsListRequest>): SqlFlagsListRequest {
    const message = createBaseSqlFlagsListRequest();
    message.databaseVersion = object.databaseVersion ?? "";
    return message;
  },
};

function createBaseFlagsListResponse(): FlagsListResponse {
  return { kind: "", items: [] };
}

export const FlagsListResponse: MessageFns<FlagsListResponse> = {
  encode(message: FlagsListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kind !== "") {
      writer.uint32(10).string(message.kind);
    }
    for (const v of message.items) {
      Flag.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlagsListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlagsListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.items.push(Flag.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FlagsListResponse {
    return {
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => Flag.fromJSON(e)) : [],
    };
  },

  toJSON(message: FlagsListResponse): unknown {
    const obj: any = {};
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => Flag.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FlagsListResponse>): FlagsListResponse {
    return FlagsListResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FlagsListResponse>): FlagsListResponse {
    const message = createBaseFlagsListResponse();
    message.kind = object.kind ?? "";
    message.items = object.items?.map((e) => Flag.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFlag(): Flag {
  return {
    name: "",
    type: 0,
    appliesTo: [],
    allowedStringValues: [],
    minValue: undefined,
    maxValue: undefined,
    requiresRestart: undefined,
    kind: "",
    inBeta: undefined,
    allowedIntValues: [],
  };
}

export const Flag: MessageFns<Flag> = {
  encode(message: Flag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    writer.uint32(26).fork();
    for (const v of message.appliesTo) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.allowedStringValues) {
      writer.uint32(34).string(v!);
    }
    if (message.minValue !== undefined) {
      Int64Value.encode({ value: message.minValue! }, writer.uint32(42).fork()).join();
    }
    if (message.maxValue !== undefined) {
      Int64Value.encode({ value: message.maxValue! }, writer.uint32(50).fork()).join();
    }
    if (message.requiresRestart !== undefined) {
      BoolValue.encode({ value: message.requiresRestart! }, writer.uint32(58).fork()).join();
    }
    if (message.kind !== "") {
      writer.uint32(66).string(message.kind);
    }
    if (message.inBeta !== undefined) {
      BoolValue.encode({ value: message.inBeta! }, writer.uint32(74).fork()).join();
    }
    writer.uint32(82).fork();
    for (const v of message.allowedIntValues) {
      writer.int64(v.toString());
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Flag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag === 24) {
            message.appliesTo.push(reader.int32() as any);

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.appliesTo.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.allowedStringValues.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.minValue = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.maxValue = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.requiresRestart = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.inBeta = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 10:
          if (tag === 80) {
            message.allowedIntValues.push(Long.fromString(reader.int64().toString()));

            continue;
          }

          if (tag === 82) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.allowedIntValues.push(Long.fromString(reader.int64().toString()));
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Flag {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? sqlFlagTypeFromJSON(object.type) : 0,
      appliesTo: globalThis.Array.isArray(object?.appliesTo)
        ? object.appliesTo.map((e: any) => sqlDatabaseVersionFromJSON(e))
        : [],
      allowedStringValues: globalThis.Array.isArray(object?.allowedStringValues)
        ? object.allowedStringValues.map((e: any) => globalThis.String(e))
        : [],
      minValue: isSet(object.minValue) ? Long.fromValue(object.minValue) : undefined,
      maxValue: isSet(object.maxValue) ? Long.fromValue(object.maxValue) : undefined,
      requiresRestart: isSet(object.requiresRestart) ? Boolean(object.requiresRestart) : undefined,
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
      inBeta: isSet(object.inBeta) ? Boolean(object.inBeta) : undefined,
      allowedIntValues: globalThis.Array.isArray(object?.allowedIntValues)
        ? object.allowedIntValues.map((e: any) => Long.fromValue(e))
        : [],
    };
  },

  toJSON(message: Flag): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = sqlFlagTypeToJSON(message.type);
    }
    if (message.appliesTo?.length) {
      obj.appliesTo = message.appliesTo.map((e) => sqlDatabaseVersionToJSON(e));
    }
    if (message.allowedStringValues?.length) {
      obj.allowedStringValues = message.allowedStringValues;
    }
    if (message.minValue !== undefined) {
      obj.minValue = message.minValue;
    }
    if (message.maxValue !== undefined) {
      obj.maxValue = message.maxValue;
    }
    if (message.requiresRestart !== undefined) {
      obj.requiresRestart = message.requiresRestart;
    }
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (message.inBeta !== undefined) {
      obj.inBeta = message.inBeta;
    }
    if (message.allowedIntValues?.length) {
      obj.allowedIntValues = message.allowedIntValues.map((e) => (e || Long.ZERO).toString());
    }
    return obj;
  },

  create(base?: DeepPartial<Flag>): Flag {
    return Flag.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Flag>): Flag {
    const message = createBaseFlag();
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    message.appliesTo = object.appliesTo?.map((e) => e) || [];
    message.allowedStringValues = object.allowedStringValues?.map((e) => e) || [];
    message.minValue = (object.minValue !== undefined && object.minValue !== null)
      ? Long.fromValue(object.minValue)
      : undefined;
    message.maxValue = (object.maxValue !== undefined && object.maxValue !== null)
      ? Long.fromValue(object.maxValue)
      : undefined;
    message.requiresRestart = object.requiresRestart ?? undefined;
    message.kind = object.kind ?? "";
    message.inBeta = object.inBeta ?? undefined;
    message.allowedIntValues = object.allowedIntValues?.map((e) => Long.fromValue(e)) || [];
    return message;
  },
};

/** Service to manage database flags for Cloud SQL instances. */
export type SqlFlagsServiceDefinition = typeof SqlFlagsServiceDefinition;
export const SqlFlagsServiceDefinition = {
  name: "SqlFlagsService",
  fullName: "google.cloud.sql.v1.SqlFlagsService",
  methods: {
    /** Lists all available database flags for Cloud SQL instances. */
    list: {
      name: "List",
      requestType: SqlFlagsListRequest,
      requestStream: false,
      responseType: FlagsListResponse,
      responseStream: false,
      options: { _unknownFields: { 578365826: [Buffer.from([11, 18, 9, 47, 118, 49, 47, 102, 108, 97, 103, 115])] } },
    },
  },
} as const;

export interface SqlFlagsServiceImplementation<CallContextExt = {}> {
  /** Lists all available database flags for Cloud SQL instances. */
  list(request: SqlFlagsListRequest, context: CallContext & CallContextExt): Promise<DeepPartial<FlagsListResponse>>;
}

export interface SqlFlagsServiceClient<CallOptionsExt = {}> {
  /** Lists all available database flags for Cloud SQL instances. */
  list(request: DeepPartial<SqlFlagsListRequest>, options?: CallOptions & CallOptionsExt): Promise<FlagsListResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
