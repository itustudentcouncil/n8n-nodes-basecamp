// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/resourcesettings/v1/resource_settings.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "google.cloud.resourcesettings.v1";

/** View options for Settings. */
export enum SettingView {
  /**
   * SETTING_VIEW_UNSPECIFIED - The default / unset value.
   * The API will default to the SETTING_VIEW_BASIC view.
   */
  SETTING_VIEW_UNSPECIFIED = 0,
  /**
   * SETTING_VIEW_BASIC - Include
   * [Setting.metadata][google.cloud.resourcesettings.v1.Setting.metadata], but
   * nothing else. This is the default value (for both ListSettings and
   * GetSetting).
   */
  SETTING_VIEW_BASIC = 1,
  /**
   * SETTING_VIEW_EFFECTIVE_VALUE - Include
   * [Setting.effective_value][google.cloud.resourcesettings.v1.Setting.effective_value],
   * but nothing else.
   */
  SETTING_VIEW_EFFECTIVE_VALUE = 2,
  /**
   * SETTING_VIEW_LOCAL_VALUE - Include
   * [Setting.local_value][google.cloud.resourcesettings.v1.Setting.local_value],
   * but nothing else.
   */
  SETTING_VIEW_LOCAL_VALUE = 3,
  UNRECOGNIZED = -1,
}

export function settingViewFromJSON(object: any): SettingView {
  switch (object) {
    case 0:
    case "SETTING_VIEW_UNSPECIFIED":
      return SettingView.SETTING_VIEW_UNSPECIFIED;
    case 1:
    case "SETTING_VIEW_BASIC":
      return SettingView.SETTING_VIEW_BASIC;
    case 2:
    case "SETTING_VIEW_EFFECTIVE_VALUE":
      return SettingView.SETTING_VIEW_EFFECTIVE_VALUE;
    case 3:
    case "SETTING_VIEW_LOCAL_VALUE":
      return SettingView.SETTING_VIEW_LOCAL_VALUE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SettingView.UNRECOGNIZED;
  }
}

export function settingViewToJSON(object: SettingView): string {
  switch (object) {
    case SettingView.SETTING_VIEW_UNSPECIFIED:
      return "SETTING_VIEW_UNSPECIFIED";
    case SettingView.SETTING_VIEW_BASIC:
      return "SETTING_VIEW_BASIC";
    case SettingView.SETTING_VIEW_EFFECTIVE_VALUE:
      return "SETTING_VIEW_EFFECTIVE_VALUE";
    case SettingView.SETTING_VIEW_LOCAL_VALUE:
      return "SETTING_VIEW_LOCAL_VALUE";
    case SettingView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The schema for settings. */
export interface Setting {
  /**
   * The resource name of the setting. Must be in one of the following forms:
   *
   * * `projects/{project_number}/settings/{setting_name}`
   * * `folders/{folder_id}/settings/{setting_name}`
   * * `organizations/{organization_id}/settings/{setting_name}`
   *
   * For example, "/projects/123/settings/gcp-enableMyFeature"
   */
  name: string;
  /**
   * Output only. Metadata about a setting which is not editable by the end
   * user.
   */
  metadata:
    | SettingMetadata
    | undefined;
  /**
   * The configured value of the setting at the given parent resource (ignoring
   * the resource hierarchy). The data type of
   * [Value][google.cloud.resourcesettings.v1.Value] must always be consistent
   * with the data type defined in
   * [Setting.metadata][google.cloud.resourcesettings.v1.Setting.metadata].
   */
  localValue:
    | Value
    | undefined;
  /**
   * Output only. The computed effective value of the setting at the given
   * parent resource (based on the resource hierarchy).
   *
   * The effective value evaluates to one of the following options in the given
   * order (the next option is used if the previous one does not exist):
   *
   * 1. the local setting value on the given resource:
   * [Setting.local_value][google.cloud.resourcesettings.v1.Setting.local_value]
   * 2. if one of the given resource's ancestors have a local setting value,
   *    the local value at the nearest such ancestor
   * 3. the setting's default value:
   * [SettingMetadata.default_value][google.cloud.resourcesettings.v1.SettingMetadata.default_value]
   * 4. an empty value (defined as a `Value` with all fields unset)
   *
   * The data type of [Value][google.cloud.resourcesettings.v1.Value] must
   * always be consistent with the data type defined in
   * [Setting.metadata][google.cloud.resourcesettings.v1.Setting.metadata].
   */
  effectiveValue:
    | Value
    | undefined;
  /**
   * A fingerprint used for optimistic concurrency. See
   * [UpdateSetting][google.cloud.resourcesettings.v1.ResourceSettingsService.UpdateSetting]
   * for more details.
   */
  etag: string;
}

/** Metadata about a setting which is not editable by the end user. */
export interface SettingMetadata {
  /** The human readable name for this setting. */
  displayName: string;
  /** A detailed description of what this setting does. */
  description: string;
  /**
   * A flag indicating that values of this setting cannot be modified (see
   * documentation of the specific setting for updates and reasons).
   */
  readOnly: boolean;
  /** The data type for this setting. */
  dataType: SettingMetadata_DataType;
  /**
   * The value provided by
   * [Setting.effective_value][google.cloud.resourcesettings.v1.Setting.effective_value]
   * if no setting value is explicitly set.
   *
   * Note: not all settings have a default value.
   */
  defaultValue: Value | undefined;
}

/**
 * The data type for setting values of this setting. See
 * [Value][google.cloud.resourcesettings.v1.Value] for more details on the
 * available data types.
 */
export enum SettingMetadata_DataType {
  /** DATA_TYPE_UNSPECIFIED - Unspecified data type. */
  DATA_TYPE_UNSPECIFIED = 0,
  /** BOOLEAN - A boolean setting. */
  BOOLEAN = 1,
  /** STRING - A string setting. */
  STRING = 2,
  /** STRING_SET - A string set setting. */
  STRING_SET = 3,
  /** ENUM_VALUE - A Enum setting */
  ENUM_VALUE = 4,
  UNRECOGNIZED = -1,
}

export function settingMetadata_DataTypeFromJSON(object: any): SettingMetadata_DataType {
  switch (object) {
    case 0:
    case "DATA_TYPE_UNSPECIFIED":
      return SettingMetadata_DataType.DATA_TYPE_UNSPECIFIED;
    case 1:
    case "BOOLEAN":
      return SettingMetadata_DataType.BOOLEAN;
    case 2:
    case "STRING":
      return SettingMetadata_DataType.STRING;
    case 3:
    case "STRING_SET":
      return SettingMetadata_DataType.STRING_SET;
    case 4:
    case "ENUM_VALUE":
      return SettingMetadata_DataType.ENUM_VALUE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SettingMetadata_DataType.UNRECOGNIZED;
  }
}

export function settingMetadata_DataTypeToJSON(object: SettingMetadata_DataType): string {
  switch (object) {
    case SettingMetadata_DataType.DATA_TYPE_UNSPECIFIED:
      return "DATA_TYPE_UNSPECIFIED";
    case SettingMetadata_DataType.BOOLEAN:
      return "BOOLEAN";
    case SettingMetadata_DataType.STRING:
      return "STRING";
    case SettingMetadata_DataType.STRING_SET:
      return "STRING_SET";
    case SettingMetadata_DataType.ENUM_VALUE:
      return "ENUM_VALUE";
    case SettingMetadata_DataType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The data in a setting value. */
export interface Value {
  /** Defines this value as being a boolean value. */
  booleanValue?:
    | boolean
    | undefined;
  /** Defines this value as being a string value. */
  stringValue?:
    | string
    | undefined;
  /** Defines this value as being a StringSet. */
  stringSetValue?:
    | Value_StringSet
    | undefined;
  /** Defines this value as being a Enum. */
  enumValue?: Value_EnumValue | undefined;
}

/**
 * A string set value that can hold a set of strings. The maximum length of
 * each string is 200 characters and there can be a maximum of 50 strings in
 * the string set.
 */
export interface Value_StringSet {
  /** The strings in the set */
  values: string[];
}

/**
 * A enum value that can hold any enum type setting values.
 * Each enum type is represented by a number, this representation
 * is stored in the definitions.
 */
export interface Value_EnumValue {
  /** The value of this enum */
  value: string;
}

/** The request for ListSettings. */
export interface ListSettingsRequest {
  /**
   * Required. The Cloud resource that parents the setting. Must be in one of
   * the following forms:
   *
   * * `projects/{project_number}`
   * * `projects/{project_id}`
   * * `folders/{folder_id}`
   * * `organizations/{organization_id}`
   */
  parent: string;
  /** Unused. The size of the page to be returned. */
  pageSize: number;
  /** Unused. A page token used to retrieve the next page. */
  pageToken: string;
  /** The SettingView for this request. */
  view: SettingView;
}

/** The response from ListSettings. */
export interface ListSettingsResponse {
  /** A list of settings that are available at the specified Cloud resource. */
  settings: Setting[];
  /** Unused. A page token used to retrieve the next page. */
  nextPageToken: string;
}

/** The request for GetSetting. */
export interface GetSettingRequest {
  /**
   * Required. The name of the setting to get. See
   * [Setting][google.cloud.resourcesettings.v1.Setting] for naming
   * requirements.
   */
  name: string;
  /** The SettingView for this request. */
  view: SettingView;
}

/** The request for UpdateSetting. */
export interface UpdateSettingRequest {
  /**
   * Required. The setting to update. See
   * [Setting][google.cloud.resourcesettings.v1.Setting] for field requirements.
   */
  setting: Setting | undefined;
}

function createBaseSetting(): Setting {
  return { name: "", metadata: undefined, localValue: undefined, effectiveValue: undefined, etag: "" };
}

export const Setting: MessageFns<Setting> = {
  encode(message: Setting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.metadata !== undefined) {
      SettingMetadata.encode(message.metadata, writer.uint32(58).fork()).join();
    }
    if (message.localValue !== undefined) {
      Value.encode(message.localValue, writer.uint32(66).fork()).join();
    }
    if (message.effectiveValue !== undefined) {
      Value.encode(message.effectiveValue, writer.uint32(74).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(82).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Setting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.metadata = SettingMetadata.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.localValue = Value.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.effectiveValue = Value.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Setting {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      metadata: isSet(object.metadata) ? SettingMetadata.fromJSON(object.metadata) : undefined,
      localValue: isSet(object.localValue) ? Value.fromJSON(object.localValue) : undefined,
      effectiveValue: isSet(object.effectiveValue) ? Value.fromJSON(object.effectiveValue) : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: Setting): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.metadata !== undefined) {
      obj.metadata = SettingMetadata.toJSON(message.metadata);
    }
    if (message.localValue !== undefined) {
      obj.localValue = Value.toJSON(message.localValue);
    }
    if (message.effectiveValue !== undefined) {
      obj.effectiveValue = Value.toJSON(message.effectiveValue);
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<Setting>): Setting {
    return Setting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Setting>): Setting {
    const message = createBaseSetting();
    message.name = object.name ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? SettingMetadata.fromPartial(object.metadata)
      : undefined;
    message.localValue = (object.localValue !== undefined && object.localValue !== null)
      ? Value.fromPartial(object.localValue)
      : undefined;
    message.effectiveValue = (object.effectiveValue !== undefined && object.effectiveValue !== null)
      ? Value.fromPartial(object.effectiveValue)
      : undefined;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseSettingMetadata(): SettingMetadata {
  return { displayName: "", description: "", readOnly: false, dataType: 0, defaultValue: undefined };
}

export const SettingMetadata: MessageFns<SettingMetadata> = {
  encode(message: SettingMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.readOnly !== false) {
      writer.uint32(24).bool(message.readOnly);
    }
    if (message.dataType !== 0) {
      writer.uint32(32).int32(message.dataType);
    }
    if (message.defaultValue !== undefined) {
      Value.encode(message.defaultValue, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SettingMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSettingMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.readOnly = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.dataType = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.defaultValue = Value.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SettingMetadata {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      readOnly: isSet(object.readOnly) ? globalThis.Boolean(object.readOnly) : false,
      dataType: isSet(object.dataType) ? settingMetadata_DataTypeFromJSON(object.dataType) : 0,
      defaultValue: isSet(object.defaultValue) ? Value.fromJSON(object.defaultValue) : undefined,
    };
  },

  toJSON(message: SettingMetadata): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.readOnly !== false) {
      obj.readOnly = message.readOnly;
    }
    if (message.dataType !== 0) {
      obj.dataType = settingMetadata_DataTypeToJSON(message.dataType);
    }
    if (message.defaultValue !== undefined) {
      obj.defaultValue = Value.toJSON(message.defaultValue);
    }
    return obj;
  },

  create(base?: DeepPartial<SettingMetadata>): SettingMetadata {
    return SettingMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SettingMetadata>): SettingMetadata {
    const message = createBaseSettingMetadata();
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.readOnly = object.readOnly ?? false;
    message.dataType = object.dataType ?? 0;
    message.defaultValue = (object.defaultValue !== undefined && object.defaultValue !== null)
      ? Value.fromPartial(object.defaultValue)
      : undefined;
    return message;
  },
};

function createBaseValue(): Value {
  return { booleanValue: undefined, stringValue: undefined, stringSetValue: undefined, enumValue: undefined };
}

export const Value: MessageFns<Value> = {
  encode(message: Value, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.booleanValue !== undefined) {
      writer.uint32(8).bool(message.booleanValue);
    }
    if (message.stringValue !== undefined) {
      writer.uint32(18).string(message.stringValue);
    }
    if (message.stringSetValue !== undefined) {
      Value_StringSet.encode(message.stringSetValue, writer.uint32(26).fork()).join();
    }
    if (message.enumValue !== undefined) {
      Value_EnumValue.encode(message.enumValue, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Value {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.booleanValue = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stringSetValue = Value_StringSet.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.enumValue = Value_EnumValue.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Value {
    return {
      booleanValue: isSet(object.booleanValue) ? globalThis.Boolean(object.booleanValue) : undefined,
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : undefined,
      stringSetValue: isSet(object.stringSetValue) ? Value_StringSet.fromJSON(object.stringSetValue) : undefined,
      enumValue: isSet(object.enumValue) ? Value_EnumValue.fromJSON(object.enumValue) : undefined,
    };
  },

  toJSON(message: Value): unknown {
    const obj: any = {};
    if (message.booleanValue !== undefined) {
      obj.booleanValue = message.booleanValue;
    }
    if (message.stringValue !== undefined) {
      obj.stringValue = message.stringValue;
    }
    if (message.stringSetValue !== undefined) {
      obj.stringSetValue = Value_StringSet.toJSON(message.stringSetValue);
    }
    if (message.enumValue !== undefined) {
      obj.enumValue = Value_EnumValue.toJSON(message.enumValue);
    }
    return obj;
  },

  create(base?: DeepPartial<Value>): Value {
    return Value.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Value>): Value {
    const message = createBaseValue();
    message.booleanValue = object.booleanValue ?? undefined;
    message.stringValue = object.stringValue ?? undefined;
    message.stringSetValue = (object.stringSetValue !== undefined && object.stringSetValue !== null)
      ? Value_StringSet.fromPartial(object.stringSetValue)
      : undefined;
    message.enumValue = (object.enumValue !== undefined && object.enumValue !== null)
      ? Value_EnumValue.fromPartial(object.enumValue)
      : undefined;
    return message;
  },
};

function createBaseValue_StringSet(): Value_StringSet {
  return { values: [] };
}

export const Value_StringSet: MessageFns<Value_StringSet> = {
  encode(message: Value_StringSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Value_StringSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValue_StringSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.values.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Value_StringSet {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Value_StringSet): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create(base?: DeepPartial<Value_StringSet>): Value_StringSet {
    return Value_StringSet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Value_StringSet>): Value_StringSet {
    const message = createBaseValue_StringSet();
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseValue_EnumValue(): Value_EnumValue {
  return { value: "" };
}

export const Value_EnumValue: MessageFns<Value_EnumValue> = {
  encode(message: Value_EnumValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Value_EnumValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValue_EnumValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Value_EnumValue {
    return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: Value_EnumValue): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Value_EnumValue>): Value_EnumValue {
    return Value_EnumValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Value_EnumValue>): Value_EnumValue {
    const message = createBaseValue_EnumValue();
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListSettingsRequest(): ListSettingsRequest {
  return { parent: "", pageSize: 0, pageToken: "", view: 0 };
}

export const ListSettingsRequest: MessageFns<ListSettingsRequest> = {
  encode(message: ListSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.view !== 0) {
      writer.uint32(32).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSettingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      view: isSet(object.view) ? settingViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: ListSettingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.view !== 0) {
      obj.view = settingViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<ListSettingsRequest>): ListSettingsRequest {
    return ListSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSettingsRequest>): ListSettingsRequest {
    const message = createBaseListSettingsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseListSettingsResponse(): ListSettingsResponse {
  return { settings: [], nextPageToken: "" };
}

export const ListSettingsResponse: MessageFns<ListSettingsResponse> = {
  encode(message: ListSettingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.settings) {
      Setting.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSettingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.settings.push(Setting.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSettingsResponse {
    return {
      settings: globalThis.Array.isArray(object?.settings) ? object.settings.map((e: any) => Setting.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSettingsResponse): unknown {
    const obj: any = {};
    if (message.settings?.length) {
      obj.settings = message.settings.map((e) => Setting.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSettingsResponse>): ListSettingsResponse {
    return ListSettingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSettingsResponse>): ListSettingsResponse {
    const message = createBaseListSettingsResponse();
    message.settings = object.settings?.map((e) => Setting.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetSettingRequest(): GetSettingRequest {
  return { name: "", view: 0 };
}

export const GetSettingRequest: MessageFns<GetSettingRequest> = {
  encode(message: GetSettingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.view !== 0) {
      writer.uint32(16).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSettingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSettingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSettingRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      view: isSet(object.view) ? settingViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: GetSettingRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.view !== 0) {
      obj.view = settingViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<GetSettingRequest>): GetSettingRequest {
    return GetSettingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSettingRequest>): GetSettingRequest {
    const message = createBaseGetSettingRequest();
    message.name = object.name ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseUpdateSettingRequest(): UpdateSettingRequest {
  return { setting: undefined };
}

export const UpdateSettingRequest: MessageFns<UpdateSettingRequest> = {
  encode(message: UpdateSettingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.setting !== undefined) {
      Setting.encode(message.setting, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSettingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSettingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.setting = Setting.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSettingRequest {
    return { setting: isSet(object.setting) ? Setting.fromJSON(object.setting) : undefined };
  },

  toJSON(message: UpdateSettingRequest): unknown {
    const obj: any = {};
    if (message.setting !== undefined) {
      obj.setting = Setting.toJSON(message.setting);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSettingRequest>): UpdateSettingRequest {
    return UpdateSettingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSettingRequest>): UpdateSettingRequest {
    const message = createBaseUpdateSettingRequest();
    message.setting = (object.setting !== undefined && object.setting !== null)
      ? Setting.fromPartial(object.setting)
      : undefined;
    return message;
  },
};

/**
 * An interface to interact with resource settings and setting values throughout
 * the resource hierarchy.
 *
 * Services may surface a number of settings for users to control how their
 * resources behave. Values of settings applied on a given Cloud resource are
 * evaluated hierarchically and inherited by all descendants of that resource.
 *
 * For all requests, returns a `google.rpc.Status` with
 * `google.rpc.Code.PERMISSION_DENIED` if the IAM check fails or the `parent`
 * resource is not in a Cloud Organization.
 * For all requests, returns a `google.rpc.Status` with
 * `google.rpc.Code.INVALID_ARGUMENT` if the request is malformed.
 * (== deprecation_description Resource Settings is deprecated. As of November
 * 7, 2023, no organizations will be onboarded for any of the enabled settings,
 * and the service will be shut down on October 1, 2024. ==)
 *
 * @deprecated
 */
export type ResourceSettingsServiceDefinition = typeof ResourceSettingsServiceDefinition;
export const ResourceSettingsServiceDefinition = {
  name: "ResourceSettingsService",
  fullName: "google.cloud.resourcesettings.v1.ResourceSettingsService",
  methods: {
    /** Lists all the settings that are available on the Cloud resource `parent`. */
    listSettings: {
      name: "ListSettings",
      requestType: ListSettingsRequest,
      requestStream: false,
      responseType: ListSettingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              110,
              90,
              33,
              18,
              31,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              90,
              34,
              18,
              32,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              37,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets a setting.
     *
     * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
     * setting does not exist.
     */
    getSetting: {
      name: "GetSetting",
      requestType: GetSettingRequest,
      requestStream: false,
      responseType: Setting,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              110,
              90,
              33,
              18,
              31,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              90,
              34,
              18,
              32,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              18,
              37,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a setting.
     *
     * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
     * setting does not exist.
     * Returns a `google.rpc.Status` with `google.rpc.Code.FAILED_PRECONDITION` if
     * the setting is flagged as read only.
     * Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
     * supplied in the request does not match the persisted etag of the setting
     * value.
     *
     * On success, the response will contain only `name`, `local_value` and
     * `etag`.  The `metadata` and `effective_value` cannot be updated through
     * this API.
     *
     * Note: the supplied setting will perform a full overwrite of the
     * `local_value` field.
     */
    updateSetting: {
      name: "UpdateSetting",
      requestType: UpdateSettingRequest,
      requestStream: false,
      responseType: Setting,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              161,
              1,
              58,
              7,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              90,
              50,
              58,
              7,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              50,
              39,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              90,
              51,
              58,
              7,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              50,
              40,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              50,
              45,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ResourceSettingsServiceImplementation<CallContextExt = {}> {
  /** Lists all the settings that are available on the Cloud resource `parent`. */
  listSettings(
    request: ListSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSettingsResponse>>;
  /**
   * Gets a setting.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * setting does not exist.
   */
  getSetting(request: GetSettingRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Setting>>;
  /**
   * Updates a setting.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * setting does not exist.
   * Returns a `google.rpc.Status` with `google.rpc.Code.FAILED_PRECONDITION` if
   * the setting is flagged as read only.
   * Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
   * supplied in the request does not match the persisted etag of the setting
   * value.
   *
   * On success, the response will contain only `name`, `local_value` and
   * `etag`.  The `metadata` and `effective_value` cannot be updated through
   * this API.
   *
   * Note: the supplied setting will perform a full overwrite of the
   * `local_value` field.
   */
  updateSetting(request: UpdateSettingRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Setting>>;
}

export interface ResourceSettingsServiceClient<CallOptionsExt = {}> {
  /** Lists all the settings that are available on the Cloud resource `parent`. */
  listSettings(
    request: DeepPartial<ListSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSettingsResponse>;
  /**
   * Gets a setting.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * setting does not exist.
   */
  getSetting(request: DeepPartial<GetSettingRequest>, options?: CallOptions & CallOptionsExt): Promise<Setting>;
  /**
   * Updates a setting.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * setting does not exist.
   * Returns a `google.rpc.Status` with `google.rpc.Code.FAILED_PRECONDITION` if
   * the setting is flagged as read only.
   * Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
   * supplied in the request does not match the persisted etag of the setting
   * value.
   *
   * On success, the response will contain only `name`, `local_value` and
   * `etag`.  The `metadata` and `effective_value` cannot be updated through
   * this API.
   *
   * Note: the supplied setting will perform a full overwrite of the
   * `local_value` field.
   */
  updateSetting(request: DeepPartial<UpdateSettingRequest>, options?: CallOptions & CallOptionsExt): Promise<Setting>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
