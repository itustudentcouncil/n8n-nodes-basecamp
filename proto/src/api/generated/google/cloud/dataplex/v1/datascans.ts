// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dataplex/v1/datascans.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { DataProfileResult, DataProfileSpec } from "./data_profile.js";
import { DataQualityResult, DataQualityRule, DataQualitySpec } from "./data_quality.js";
import { DataSource, Trigger } from "./processing.js";
import { State, stateFromJSON, stateToJSON } from "./resources.js";

export const protobufPackage = "google.cloud.dataplex.v1";

/** The type of DataScan. */
export enum DataScanType {
  /** DATA_SCAN_TYPE_UNSPECIFIED - The DataScan type is unspecified. */
  DATA_SCAN_TYPE_UNSPECIFIED = 0,
  /** DATA_QUALITY - Data Quality scan. */
  DATA_QUALITY = 1,
  /** DATA_PROFILE - Data Profile scan. */
  DATA_PROFILE = 2,
  UNRECOGNIZED = -1,
}

export function dataScanTypeFromJSON(object: any): DataScanType {
  switch (object) {
    case 0:
    case "DATA_SCAN_TYPE_UNSPECIFIED":
      return DataScanType.DATA_SCAN_TYPE_UNSPECIFIED;
    case 1:
    case "DATA_QUALITY":
      return DataScanType.DATA_QUALITY;
    case 2:
    case "DATA_PROFILE":
      return DataScanType.DATA_PROFILE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataScanType.UNRECOGNIZED;
  }
}

export function dataScanTypeToJSON(object: DataScanType): string {
  switch (object) {
    case DataScanType.DATA_SCAN_TYPE_UNSPECIFIED:
      return "DATA_SCAN_TYPE_UNSPECIFIED";
    case DataScanType.DATA_QUALITY:
      return "DATA_QUALITY";
    case DataScanType.DATA_PROFILE:
      return "DATA_PROFILE";
    case DataScanType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Create dataScan request. */
export interface CreateDataScanRequest {
  /**
   * Required. The resource name of the parent location:
   * `projects/{project}/locations/{location_id}`
   * where `project` refers to a *project_id* or *project_number* and
   * `location_id` refers to a GCP region.
   */
  parent: string;
  /** Required. DataScan resource. */
  dataScan:
    | DataScan
    | undefined;
  /**
   * Required. DataScan identifier.
   *
   * * Must contain only lowercase letters, numbers and hyphens.
   * * Must start with a letter.
   * * Must end with a number or a letter.
   * * Must be between 1-63 characters.
   * * Must be unique within the customer project / location.
   */
  dataScanId: string;
  /**
   * Optional. Only validate the request, but do not perform mutations.
   * The default is `false`.
   */
  validateOnly: boolean;
}

/** Update dataScan request. */
export interface UpdateDataScanRequest {
  /**
   * Required. DataScan resource to be updated.
   *
   * Only fields specified in `update_mask` are updated.
   */
  dataScan:
    | DataScan
    | undefined;
  /** Required. Mask of fields to update. */
  updateMask:
    | string[]
    | undefined;
  /**
   * Optional. Only validate the request, but do not perform mutations.
   * The default is `false`.
   */
  validateOnly: boolean;
}

/** Delete dataScan request. */
export interface DeleteDataScanRequest {
  /**
   * Required. The resource name of the dataScan:
   * `projects/{project}/locations/{location_id}/dataScans/{data_scan_id}`
   * where `project` refers to a *project_id* or *project_number* and
   * `location_id` refers to a GCP region.
   */
  name: string;
}

/** Get dataScan request. */
export interface GetDataScanRequest {
  /**
   * Required. The resource name of the dataScan:
   * `projects/{project}/locations/{location_id}/dataScans/{data_scan_id}`
   * where `project` refers to a *project_id* or *project_number* and
   * `location_id` refers to a GCP region.
   */
  name: string;
  /** Optional. Select the DataScan view to return. Defaults to `BASIC`. */
  view: GetDataScanRequest_DataScanView;
}

/** DataScan view options. */
export enum GetDataScanRequest_DataScanView {
  /** DATA_SCAN_VIEW_UNSPECIFIED - The API will default to the `BASIC` view. */
  DATA_SCAN_VIEW_UNSPECIFIED = 0,
  /** BASIC - Basic view that does not include *spec* and *result*. */
  BASIC = 1,
  /** FULL - Include everything. */
  FULL = 10,
  UNRECOGNIZED = -1,
}

export function getDataScanRequest_DataScanViewFromJSON(object: any): GetDataScanRequest_DataScanView {
  switch (object) {
    case 0:
    case "DATA_SCAN_VIEW_UNSPECIFIED":
      return GetDataScanRequest_DataScanView.DATA_SCAN_VIEW_UNSPECIFIED;
    case 1:
    case "BASIC":
      return GetDataScanRequest_DataScanView.BASIC;
    case 10:
    case "FULL":
      return GetDataScanRequest_DataScanView.FULL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GetDataScanRequest_DataScanView.UNRECOGNIZED;
  }
}

export function getDataScanRequest_DataScanViewToJSON(object: GetDataScanRequest_DataScanView): string {
  switch (object) {
    case GetDataScanRequest_DataScanView.DATA_SCAN_VIEW_UNSPECIFIED:
      return "DATA_SCAN_VIEW_UNSPECIFIED";
    case GetDataScanRequest_DataScanView.BASIC:
      return "BASIC";
    case GetDataScanRequest_DataScanView.FULL:
      return "FULL";
    case GetDataScanRequest_DataScanView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** List dataScans request. */
export interface ListDataScansRequest {
  /**
   * Required. The resource name of the parent location:
   * `projects/{project}/locations/{location_id}`
   * where `project` refers to a *project_id* or *project_number* and
   * `location_id` refers to a GCP region.
   */
  parent: string;
  /**
   * Optional. Maximum number of dataScans to return. The service may return
   * fewer than this value. If unspecified, at most 500 scans will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. Page token received from a previous `ListDataScans` call. Provide
   * this to retrieve the subsequent page. When paginating, all other parameters
   * provided to `ListDataScans` must match the call that provided the
   * page token.
   */
  pageToken: string;
  /** Optional. Filter request. */
  filter: string;
  /**
   * Optional. Order by fields (`name` or `create_time`) for the result.
   * If not specified, the ordering is undefined.
   */
  orderBy: string;
}

/** List dataScans response. */
export interface ListDataScansResponse {
  /** DataScans (`BASIC` view only) under the given parent location. */
  dataScans: DataScan[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Run DataScan Request */
export interface RunDataScanRequest {
  /**
   * Required. The resource name of the DataScan:
   * `projects/{project}/locations/{location_id}/dataScans/{data_scan_id}`.
   * where `project` refers to a *project_id* or *project_number* and
   * `location_id` refers to a GCP region.
   *
   * Only **OnDemand** data scans are allowed.
   */
  name: string;
}

/** Run DataScan Response. */
export interface RunDataScanResponse {
  /** DataScanJob created by RunDataScan request. */
  job: DataScanJob | undefined;
}

/** Get DataScanJob request. */
export interface GetDataScanJobRequest {
  /**
   * Required. The resource name of the DataScanJob:
   * `projects/{project}/locations/{location_id}/dataScans/{data_scan_id}/jobs/{data_scan_job_id}`
   * where `project` refers to a *project_id* or *project_number* and
   * `location_id` refers to a GCP region.
   */
  name: string;
  /** Optional. Select the DataScanJob view to return. Defaults to `BASIC`. */
  view: GetDataScanJobRequest_DataScanJobView;
}

/** DataScanJob view options. */
export enum GetDataScanJobRequest_DataScanJobView {
  /** DATA_SCAN_JOB_VIEW_UNSPECIFIED - The API will default to the `BASIC` view. */
  DATA_SCAN_JOB_VIEW_UNSPECIFIED = 0,
  /** BASIC - Basic view that does not include *spec* and *result*. */
  BASIC = 1,
  /** FULL - Include everything. */
  FULL = 10,
  UNRECOGNIZED = -1,
}

export function getDataScanJobRequest_DataScanJobViewFromJSON(object: any): GetDataScanJobRequest_DataScanJobView {
  switch (object) {
    case 0:
    case "DATA_SCAN_JOB_VIEW_UNSPECIFIED":
      return GetDataScanJobRequest_DataScanJobView.DATA_SCAN_JOB_VIEW_UNSPECIFIED;
    case 1:
    case "BASIC":
      return GetDataScanJobRequest_DataScanJobView.BASIC;
    case 10:
    case "FULL":
      return GetDataScanJobRequest_DataScanJobView.FULL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GetDataScanJobRequest_DataScanJobView.UNRECOGNIZED;
  }
}

export function getDataScanJobRequest_DataScanJobViewToJSON(object: GetDataScanJobRequest_DataScanJobView): string {
  switch (object) {
    case GetDataScanJobRequest_DataScanJobView.DATA_SCAN_JOB_VIEW_UNSPECIFIED:
      return "DATA_SCAN_JOB_VIEW_UNSPECIFIED";
    case GetDataScanJobRequest_DataScanJobView.BASIC:
      return "BASIC";
    case GetDataScanJobRequest_DataScanJobView.FULL:
      return "FULL";
    case GetDataScanJobRequest_DataScanJobView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** List DataScanJobs request. */
export interface ListDataScanJobsRequest {
  /**
   * Required. The resource name of the parent environment:
   * `projects/{project}/locations/{location_id}/dataScans/{data_scan_id}`
   * where `project` refers to a *project_id* or *project_number* and
   * `location_id` refers to a GCP region.
   */
  parent: string;
  /**
   * Optional. Maximum number of DataScanJobs to return. The service may return
   * fewer than this value. If unspecified, at most 10 DataScanJobs will be
   * returned. The maximum value is 1000; values above 1000 will be coerced to
   * 1000.
   */
  pageSize: number;
  /**
   * Optional. Page token received from a previous `ListDataScanJobs` call.
   * Provide this to retrieve the subsequent page. When paginating, all other
   * parameters provided to `ListDataScanJobs` must match the call that provided
   * the page token.
   */
  pageToken: string;
  /**
   * Optional. An expression for filtering the results of the ListDataScanJobs
   * request.
   *
   * If unspecified, all datascan jobs will be returned. Multiple filters can be
   * applied (with `AND`, `OR` logical operators). Filters are case-sensitive.
   *
   * Allowed fields are:
   *
   * - `start_time`
   * - `end_time`
   *
   * `start_time` and `end_time` expect RFC-3339 formatted strings (e.g.
   * 2018-10-08T18:30:00-07:00).
   *
   * For instance, 'start_time > 2018-10-08T00:00:00.123456789Z AND end_time <
   * 2018-10-09T00:00:00.123456789Z' limits results to DataScanJobs between
   * specified start and end times.
   */
  filter: string;
}

/** List DataScanJobs response. */
export interface ListDataScanJobsResponse {
  /** DataScanJobs (`BASIC` view only) under a given dataScan. */
  dataScanJobs: DataScanJob[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/** Request details for generating data quality rule recommendations. */
export interface GenerateDataQualityRulesRequest {
  /**
   * Required. The name must be one of the following:
   *
   * * The name of a data scan with at least one successful, completed data
   * profiling job
   * * The name of a successful, completed data profiling job (a data scan job
   * where the job type is data profiling)
   */
  name: string;
}

/** Response details for data quality rule recommendations. */
export interface GenerateDataQualityRulesResponse {
  /**
   * The data quality rules that Dataplex generates based on the results
   * of a data profiling scan.
   */
  rule: DataQualityRule[];
}

/**
 * Represents a user-visible job which provides the insights for the related
 * data source.
 *
 * For example:
 *
 * * Data Quality: generates queries based on the rules and runs against the
 *   data to get data quality check results.
 * * Data Profile: analyzes the data in table(s) and generates insights about
 *   the structure, content and relationships (such as null percent,
 *   cardinality, min/max/mean, etc).
 */
export interface DataScan {
  /**
   * Output only. The relative resource name of the scan, of the form:
   * `projects/{project}/locations/{location_id}/dataScans/{datascan_id}`,
   * where `project` refers to a *project_id* or *project_number* and
   * `location_id` refers to a GCP region.
   */
  name: string;
  /**
   * Output only. System generated globally unique ID for the scan. This ID will
   * be different if the scan is deleted and re-created with the same name.
   */
  uid: string;
  /**
   * Optional. Description of the scan.
   *
   * * Must be between 1-1024 characters.
   */
  description: string;
  /**
   * Optional. User friendly display name.
   *
   * * Must be between 1-256 characters.
   */
  displayName: string;
  /** Optional. User-defined labels for the scan. */
  labels: { [key: string]: string };
  /** Output only. Current state of the DataScan. */
  state: State;
  /** Output only. The time when the scan was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time when the scan was last updated. */
  updateTime:
    | Date
    | undefined;
  /** Required. The data source for DataScan. */
  data:
    | DataSource
    | undefined;
  /**
   * Optional. DataScan execution settings.
   *
   * If not specified, the fields in it will use their default values.
   */
  executionSpec:
    | DataScan_ExecutionSpec
    | undefined;
  /** Output only. Status of the data scan execution. */
  executionStatus:
    | DataScan_ExecutionStatus
    | undefined;
  /** Output only. The type of DataScan. */
  type: DataScanType;
  /** DataQualityScan related setting. */
  dataQualitySpec?:
    | DataQualitySpec
    | undefined;
  /** DataProfileScan related setting. */
  dataProfileSpec?:
    | DataProfileSpec
    | undefined;
  /** Output only. The result of the data quality scan. */
  dataQualityResult?:
    | DataQualityResult
    | undefined;
  /** Output only. The result of the data profile scan. */
  dataProfileResult?: DataProfileResult | undefined;
}

/** DataScan execution settings. */
export interface DataScan_ExecutionSpec {
  /**
   * Optional. Spec related to how often and when a scan should be triggered.
   *
   * If not specified, the default is `OnDemand`, which means the scan will
   * not run until the user calls `RunDataScan` API.
   */
  trigger:
    | Trigger
    | undefined;
  /**
   * Immutable. The unnested field (of type *Date* or *Timestamp*) that
   * contains values which monotonically increase over time.
   *
   * If not specified, a data scan will run for all data in the table.
   */
  field?: string | undefined;
}

/** Status of the data scan execution. */
export interface DataScan_ExecutionStatus {
  /** The time when the latest DataScanJob started. */
  latestJobStartTime:
    | Date
    | undefined;
  /** The time when the latest DataScanJob ended. */
  latestJobEndTime:
    | Date
    | undefined;
  /** Optional. The time when the DataScanJob execution was created. */
  latestJobCreateTime: Date | undefined;
}

export interface DataScan_LabelsEntry {
  key: string;
  value: string;
}

/** A DataScanJob represents an instance of DataScan execution. */
export interface DataScanJob {
  /**
   * Output only. The relative resource name of the DataScanJob, of the form:
   * `projects/{project}/locations/{location_id}/dataScans/{datascan_id}/jobs/{job_id}`,
   * where `project` refers to a *project_id* or *project_number* and
   * `location_id` refers to a GCP region.
   */
  name: string;
  /** Output only. System generated globally unique ID for the DataScanJob. */
  uid: string;
  /** Output only. The time when the DataScanJob was started. */
  startTime:
    | Date
    | undefined;
  /** Output only. The time when the DataScanJob ended. */
  endTime:
    | Date
    | undefined;
  /** Output only. Execution state for the DataScanJob. */
  state: DataScanJob_State;
  /** Output only. Additional information about the current state. */
  message: string;
  /** Output only. The type of the parent DataScan. */
  type: DataScanType;
  /** Output only. DataQualityScan related setting. */
  dataQualitySpec?:
    | DataQualitySpec
    | undefined;
  /** Output only. DataProfileScan related setting. */
  dataProfileSpec?:
    | DataProfileSpec
    | undefined;
  /** Output only. The result of the data quality scan. */
  dataQualityResult?:
    | DataQualityResult
    | undefined;
  /** Output only. The result of the data profile scan. */
  dataProfileResult?: DataProfileResult | undefined;
}

/** Execution state for the DataScanJob. */
export enum DataScanJob_State {
  /** STATE_UNSPECIFIED - The DataScanJob state is unspecified. */
  STATE_UNSPECIFIED = 0,
  /** RUNNING - The DataScanJob is running. */
  RUNNING = 1,
  /** CANCELING - The DataScanJob is canceling. */
  CANCELING = 2,
  /** CANCELLED - The DataScanJob cancellation was successful. */
  CANCELLED = 3,
  /** SUCCEEDED - The DataScanJob completed successfully. */
  SUCCEEDED = 4,
  /** FAILED - The DataScanJob is no longer running due to an error. */
  FAILED = 5,
  /** PENDING - The DataScanJob has been created but not started to run yet. */
  PENDING = 7,
  UNRECOGNIZED = -1,
}

export function dataScanJob_StateFromJSON(object: any): DataScanJob_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return DataScanJob_State.STATE_UNSPECIFIED;
    case 1:
    case "RUNNING":
      return DataScanJob_State.RUNNING;
    case 2:
    case "CANCELING":
      return DataScanJob_State.CANCELING;
    case 3:
    case "CANCELLED":
      return DataScanJob_State.CANCELLED;
    case 4:
    case "SUCCEEDED":
      return DataScanJob_State.SUCCEEDED;
    case 5:
    case "FAILED":
      return DataScanJob_State.FAILED;
    case 7:
    case "PENDING":
      return DataScanJob_State.PENDING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataScanJob_State.UNRECOGNIZED;
  }
}

export function dataScanJob_StateToJSON(object: DataScanJob_State): string {
  switch (object) {
    case DataScanJob_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case DataScanJob_State.RUNNING:
      return "RUNNING";
    case DataScanJob_State.CANCELING:
      return "CANCELING";
    case DataScanJob_State.CANCELLED:
      return "CANCELLED";
    case DataScanJob_State.SUCCEEDED:
      return "SUCCEEDED";
    case DataScanJob_State.FAILED:
      return "FAILED";
    case DataScanJob_State.PENDING:
      return "PENDING";
    case DataScanJob_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCreateDataScanRequest(): CreateDataScanRequest {
  return { parent: "", dataScan: undefined, dataScanId: "", validateOnly: false };
}

export const CreateDataScanRequest: MessageFns<CreateDataScanRequest> = {
  encode(message: CreateDataScanRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.dataScan !== undefined) {
      DataScan.encode(message.dataScan, writer.uint32(18).fork()).join();
    }
    if (message.dataScanId !== "") {
      writer.uint32(26).string(message.dataScanId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDataScanRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDataScanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataScan = DataScan.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dataScanId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDataScanRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dataScan: isSet(object.dataScan) ? DataScan.fromJSON(object.dataScan) : undefined,
      dataScanId: isSet(object.dataScanId) ? globalThis.String(object.dataScanId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateDataScanRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dataScan !== undefined) {
      obj.dataScan = DataScan.toJSON(message.dataScan);
    }
    if (message.dataScanId !== "") {
      obj.dataScanId = message.dataScanId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDataScanRequest>): CreateDataScanRequest {
    return CreateDataScanRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDataScanRequest>): CreateDataScanRequest {
    const message = createBaseCreateDataScanRequest();
    message.parent = object.parent ?? "";
    message.dataScan = (object.dataScan !== undefined && object.dataScan !== null)
      ? DataScan.fromPartial(object.dataScan)
      : undefined;
    message.dataScanId = object.dataScanId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateDataScanRequest(): UpdateDataScanRequest {
  return { dataScan: undefined, updateMask: undefined, validateOnly: false };
}

export const UpdateDataScanRequest: MessageFns<UpdateDataScanRequest> = {
  encode(message: UpdateDataScanRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataScan !== undefined) {
      DataScan.encode(message.dataScan, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDataScanRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDataScanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataScan = DataScan.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDataScanRequest {
    return {
      dataScan: isSet(object.dataScan) ? DataScan.fromJSON(object.dataScan) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: UpdateDataScanRequest): unknown {
    const obj: any = {};
    if (message.dataScan !== undefined) {
      obj.dataScan = DataScan.toJSON(message.dataScan);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDataScanRequest>): UpdateDataScanRequest {
    return UpdateDataScanRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDataScanRequest>): UpdateDataScanRequest {
    const message = createBaseUpdateDataScanRequest();
    message.dataScan = (object.dataScan !== undefined && object.dataScan !== null)
      ? DataScan.fromPartial(object.dataScan)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseDeleteDataScanRequest(): DeleteDataScanRequest {
  return { name: "" };
}

export const DeleteDataScanRequest: MessageFns<DeleteDataScanRequest> = {
  encode(message: DeleteDataScanRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDataScanRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDataScanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDataScanRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDataScanRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDataScanRequest>): DeleteDataScanRequest {
    return DeleteDataScanRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDataScanRequest>): DeleteDataScanRequest {
    const message = createBaseDeleteDataScanRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetDataScanRequest(): GetDataScanRequest {
  return { name: "", view: 0 };
}

export const GetDataScanRequest: MessageFns<GetDataScanRequest> = {
  encode(message: GetDataScanRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.view !== 0) {
      writer.uint32(16).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataScanRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataScanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataScanRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      view: isSet(object.view) ? getDataScanRequest_DataScanViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: GetDataScanRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.view !== 0) {
      obj.view = getDataScanRequest_DataScanViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataScanRequest>): GetDataScanRequest {
    return GetDataScanRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataScanRequest>): GetDataScanRequest {
    const message = createBaseGetDataScanRequest();
    message.name = object.name ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseListDataScansRequest(): ListDataScansRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListDataScansRequest: MessageFns<ListDataScansRequest> = {
  encode(message: ListDataScansRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataScansRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataScansRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataScansRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListDataScansRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataScansRequest>): ListDataScansRequest {
    return ListDataScansRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataScansRequest>): ListDataScansRequest {
    const message = createBaseListDataScansRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListDataScansResponse(): ListDataScansResponse {
  return { dataScans: [], nextPageToken: "", unreachable: [] };
}

export const ListDataScansResponse: MessageFns<ListDataScansResponse> = {
  encode(message: ListDataScansResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataScans) {
      DataScan.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataScansResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataScansResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataScans.push(DataScan.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataScansResponse {
    return {
      dataScans: globalThis.Array.isArray(object?.dataScans)
        ? object.dataScans.map((e: any) => DataScan.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListDataScansResponse): unknown {
    const obj: any = {};
    if (message.dataScans?.length) {
      obj.dataScans = message.dataScans.map((e) => DataScan.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataScansResponse>): ListDataScansResponse {
    return ListDataScansResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataScansResponse>): ListDataScansResponse {
    const message = createBaseListDataScansResponse();
    message.dataScans = object.dataScans?.map((e) => DataScan.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseRunDataScanRequest(): RunDataScanRequest {
  return { name: "" };
}

export const RunDataScanRequest: MessageFns<RunDataScanRequest> = {
  encode(message: RunDataScanRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunDataScanRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunDataScanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunDataScanRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: RunDataScanRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<RunDataScanRequest>): RunDataScanRequest {
    return RunDataScanRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RunDataScanRequest>): RunDataScanRequest {
    const message = createBaseRunDataScanRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseRunDataScanResponse(): RunDataScanResponse {
  return { job: undefined };
}

export const RunDataScanResponse: MessageFns<RunDataScanResponse> = {
  encode(message: RunDataScanResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.job !== undefined) {
      DataScanJob.encode(message.job, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunDataScanResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunDataScanResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.job = DataScanJob.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunDataScanResponse {
    return { job: isSet(object.job) ? DataScanJob.fromJSON(object.job) : undefined };
  },

  toJSON(message: RunDataScanResponse): unknown {
    const obj: any = {};
    if (message.job !== undefined) {
      obj.job = DataScanJob.toJSON(message.job);
    }
    return obj;
  },

  create(base?: DeepPartial<RunDataScanResponse>): RunDataScanResponse {
    return RunDataScanResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RunDataScanResponse>): RunDataScanResponse {
    const message = createBaseRunDataScanResponse();
    message.job = (object.job !== undefined && object.job !== null) ? DataScanJob.fromPartial(object.job) : undefined;
    return message;
  },
};

function createBaseGetDataScanJobRequest(): GetDataScanJobRequest {
  return { name: "", view: 0 };
}

export const GetDataScanJobRequest: MessageFns<GetDataScanJobRequest> = {
  encode(message: GetDataScanJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.view !== 0) {
      writer.uint32(16).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataScanJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataScanJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataScanJobRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      view: isSet(object.view) ? getDataScanJobRequest_DataScanJobViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: GetDataScanJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.view !== 0) {
      obj.view = getDataScanJobRequest_DataScanJobViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataScanJobRequest>): GetDataScanJobRequest {
    return GetDataScanJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataScanJobRequest>): GetDataScanJobRequest {
    const message = createBaseGetDataScanJobRequest();
    message.name = object.name ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseListDataScanJobsRequest(): ListDataScanJobsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListDataScanJobsRequest: MessageFns<ListDataScanJobsRequest> = {
  encode(message: ListDataScanJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataScanJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataScanJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataScanJobsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListDataScanJobsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataScanJobsRequest>): ListDataScanJobsRequest {
    return ListDataScanJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataScanJobsRequest>): ListDataScanJobsRequest {
    const message = createBaseListDataScanJobsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListDataScanJobsResponse(): ListDataScanJobsResponse {
  return { dataScanJobs: [], nextPageToken: "" };
}

export const ListDataScanJobsResponse: MessageFns<ListDataScanJobsResponse> = {
  encode(message: ListDataScanJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataScanJobs) {
      DataScanJob.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataScanJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataScanJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataScanJobs.push(DataScanJob.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataScanJobsResponse {
    return {
      dataScanJobs: globalThis.Array.isArray(object?.dataScanJobs)
        ? object.dataScanJobs.map((e: any) => DataScanJob.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDataScanJobsResponse): unknown {
    const obj: any = {};
    if (message.dataScanJobs?.length) {
      obj.dataScanJobs = message.dataScanJobs.map((e) => DataScanJob.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataScanJobsResponse>): ListDataScanJobsResponse {
    return ListDataScanJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataScanJobsResponse>): ListDataScanJobsResponse {
    const message = createBaseListDataScanJobsResponse();
    message.dataScanJobs = object.dataScanJobs?.map((e) => DataScanJob.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGenerateDataQualityRulesRequest(): GenerateDataQualityRulesRequest {
  return { name: "" };
}

export const GenerateDataQualityRulesRequest: MessageFns<GenerateDataQualityRulesRequest> = {
  encode(message: GenerateDataQualityRulesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateDataQualityRulesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateDataQualityRulesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateDataQualityRulesRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GenerateDataQualityRulesRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateDataQualityRulesRequest>): GenerateDataQualityRulesRequest {
    return GenerateDataQualityRulesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateDataQualityRulesRequest>): GenerateDataQualityRulesRequest {
    const message = createBaseGenerateDataQualityRulesRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGenerateDataQualityRulesResponse(): GenerateDataQualityRulesResponse {
  return { rule: [] };
}

export const GenerateDataQualityRulesResponse: MessageFns<GenerateDataQualityRulesResponse> = {
  encode(message: GenerateDataQualityRulesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rule) {
      DataQualityRule.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateDataQualityRulesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateDataQualityRulesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rule.push(DataQualityRule.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateDataQualityRulesResponse {
    return {
      rule: globalThis.Array.isArray(object?.rule) ? object.rule.map((e: any) => DataQualityRule.fromJSON(e)) : [],
    };
  },

  toJSON(message: GenerateDataQualityRulesResponse): unknown {
    const obj: any = {};
    if (message.rule?.length) {
      obj.rule = message.rule.map((e) => DataQualityRule.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateDataQualityRulesResponse>): GenerateDataQualityRulesResponse {
    return GenerateDataQualityRulesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateDataQualityRulesResponse>): GenerateDataQualityRulesResponse {
    const message = createBaseGenerateDataQualityRulesResponse();
    message.rule = object.rule?.map((e) => DataQualityRule.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDataScan(): DataScan {
  return {
    name: "",
    uid: "",
    description: "",
    displayName: "",
    labels: {},
    state: 0,
    createTime: undefined,
    updateTime: undefined,
    data: undefined,
    executionSpec: undefined,
    executionStatus: undefined,
    type: 0,
    dataQualitySpec: undefined,
    dataProfileSpec: undefined,
    dataQualityResult: undefined,
    dataProfileResult: undefined,
  };
}

export const DataScan: MessageFns<DataScan> = {
  encode(message: DataScan, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uid !== "") {
      writer.uint32(18).string(message.uid);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      DataScan_LabelsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.state !== 0) {
      writer.uint32(48).int32(message.state);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(58).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(66).fork()).join();
    }
    if (message.data !== undefined) {
      DataSource.encode(message.data, writer.uint32(74).fork()).join();
    }
    if (message.executionSpec !== undefined) {
      DataScan_ExecutionSpec.encode(message.executionSpec, writer.uint32(82).fork()).join();
    }
    if (message.executionStatus !== undefined) {
      DataScan_ExecutionStatus.encode(message.executionStatus, writer.uint32(90).fork()).join();
    }
    if (message.type !== 0) {
      writer.uint32(96).int32(message.type);
    }
    if (message.dataQualitySpec !== undefined) {
      DataQualitySpec.encode(message.dataQualitySpec, writer.uint32(802).fork()).join();
    }
    if (message.dataProfileSpec !== undefined) {
      DataProfileSpec.encode(message.dataProfileSpec, writer.uint32(810).fork()).join();
    }
    if (message.dataQualityResult !== undefined) {
      DataQualityResult.encode(message.dataQualityResult, writer.uint32(1602).fork()).join();
    }
    if (message.dataProfileResult !== undefined) {
      DataProfileResult.encode(message.dataProfileResult, writer.uint32(1610).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataScan {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataScan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = DataScan_LabelsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.labels[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.data = DataSource.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.executionSpec = DataScan_ExecutionSpec.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.executionStatus = DataScan_ExecutionStatus.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.dataQualitySpec = DataQualitySpec.decode(reader, reader.uint32());
          continue;
        case 101:
          if (tag !== 810) {
            break;
          }

          message.dataProfileSpec = DataProfileSpec.decode(reader, reader.uint32());
          continue;
        case 200:
          if (tag !== 1602) {
            break;
          }

          message.dataQualityResult = DataQualityResult.decode(reader, reader.uint32());
          continue;
        case 201:
          if (tag !== 1610) {
            break;
          }

          message.dataProfileResult = DataProfileResult.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataScan {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      state: isSet(object.state) ? stateFromJSON(object.state) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      data: isSet(object.data) ? DataSource.fromJSON(object.data) : undefined,
      executionSpec: isSet(object.executionSpec) ? DataScan_ExecutionSpec.fromJSON(object.executionSpec) : undefined,
      executionStatus: isSet(object.executionStatus)
        ? DataScan_ExecutionStatus.fromJSON(object.executionStatus)
        : undefined,
      type: isSet(object.type) ? dataScanTypeFromJSON(object.type) : 0,
      dataQualitySpec: isSet(object.dataQualitySpec) ? DataQualitySpec.fromJSON(object.dataQualitySpec) : undefined,
      dataProfileSpec: isSet(object.dataProfileSpec) ? DataProfileSpec.fromJSON(object.dataProfileSpec) : undefined,
      dataQualityResult: isSet(object.dataQualityResult)
        ? DataQualityResult.fromJSON(object.dataQualityResult)
        : undefined,
      dataProfileResult: isSet(object.dataProfileResult)
        ? DataProfileResult.fromJSON(object.dataProfileResult)
        : undefined,
    };
  },

  toJSON(message: DataScan): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.state !== 0) {
      obj.state = stateToJSON(message.state);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.data !== undefined) {
      obj.data = DataSource.toJSON(message.data);
    }
    if (message.executionSpec !== undefined) {
      obj.executionSpec = DataScan_ExecutionSpec.toJSON(message.executionSpec);
    }
    if (message.executionStatus !== undefined) {
      obj.executionStatus = DataScan_ExecutionStatus.toJSON(message.executionStatus);
    }
    if (message.type !== 0) {
      obj.type = dataScanTypeToJSON(message.type);
    }
    if (message.dataQualitySpec !== undefined) {
      obj.dataQualitySpec = DataQualitySpec.toJSON(message.dataQualitySpec);
    }
    if (message.dataProfileSpec !== undefined) {
      obj.dataProfileSpec = DataProfileSpec.toJSON(message.dataProfileSpec);
    }
    if (message.dataQualityResult !== undefined) {
      obj.dataQualityResult = DataQualityResult.toJSON(message.dataQualityResult);
    }
    if (message.dataProfileResult !== undefined) {
      obj.dataProfileResult = DataProfileResult.toJSON(message.dataProfileResult);
    }
    return obj;
  },

  create(base?: DeepPartial<DataScan>): DataScan {
    return DataScan.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataScan>): DataScan {
    const message = createBaseDataScan();
    message.name = object.name ?? "";
    message.uid = object.uid ?? "";
    message.description = object.description ?? "";
    message.displayName = object.displayName ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.state = object.state ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.data = (object.data !== undefined && object.data !== null)
      ? DataSource.fromPartial(object.data)
      : undefined;
    message.executionSpec = (object.executionSpec !== undefined && object.executionSpec !== null)
      ? DataScan_ExecutionSpec.fromPartial(object.executionSpec)
      : undefined;
    message.executionStatus = (object.executionStatus !== undefined && object.executionStatus !== null)
      ? DataScan_ExecutionStatus.fromPartial(object.executionStatus)
      : undefined;
    message.type = object.type ?? 0;
    message.dataQualitySpec = (object.dataQualitySpec !== undefined && object.dataQualitySpec !== null)
      ? DataQualitySpec.fromPartial(object.dataQualitySpec)
      : undefined;
    message.dataProfileSpec = (object.dataProfileSpec !== undefined && object.dataProfileSpec !== null)
      ? DataProfileSpec.fromPartial(object.dataProfileSpec)
      : undefined;
    message.dataQualityResult = (object.dataQualityResult !== undefined && object.dataQualityResult !== null)
      ? DataQualityResult.fromPartial(object.dataQualityResult)
      : undefined;
    message.dataProfileResult = (object.dataProfileResult !== undefined && object.dataProfileResult !== null)
      ? DataProfileResult.fromPartial(object.dataProfileResult)
      : undefined;
    return message;
  },
};

function createBaseDataScan_ExecutionSpec(): DataScan_ExecutionSpec {
  return { trigger: undefined, field: undefined };
}

export const DataScan_ExecutionSpec: MessageFns<DataScan_ExecutionSpec> = {
  encode(message: DataScan_ExecutionSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trigger !== undefined) {
      Trigger.encode(message.trigger, writer.uint32(10).fork()).join();
    }
    if (message.field !== undefined) {
      writer.uint32(802).string(message.field);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataScan_ExecutionSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataScan_ExecutionSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.trigger = Trigger.decode(reader, reader.uint32());
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.field = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataScan_ExecutionSpec {
    return {
      trigger: isSet(object.trigger) ? Trigger.fromJSON(object.trigger) : undefined,
      field: isSet(object.field) ? globalThis.String(object.field) : undefined,
    };
  },

  toJSON(message: DataScan_ExecutionSpec): unknown {
    const obj: any = {};
    if (message.trigger !== undefined) {
      obj.trigger = Trigger.toJSON(message.trigger);
    }
    if (message.field !== undefined) {
      obj.field = message.field;
    }
    return obj;
  },

  create(base?: DeepPartial<DataScan_ExecutionSpec>): DataScan_ExecutionSpec {
    return DataScan_ExecutionSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataScan_ExecutionSpec>): DataScan_ExecutionSpec {
    const message = createBaseDataScan_ExecutionSpec();
    message.trigger = (object.trigger !== undefined && object.trigger !== null)
      ? Trigger.fromPartial(object.trigger)
      : undefined;
    message.field = object.field ?? undefined;
    return message;
  },
};

function createBaseDataScan_ExecutionStatus(): DataScan_ExecutionStatus {
  return { latestJobStartTime: undefined, latestJobEndTime: undefined, latestJobCreateTime: undefined };
}

export const DataScan_ExecutionStatus: MessageFns<DataScan_ExecutionStatus> = {
  encode(message: DataScan_ExecutionStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.latestJobStartTime !== undefined) {
      Timestamp.encode(toTimestamp(message.latestJobStartTime), writer.uint32(34).fork()).join();
    }
    if (message.latestJobEndTime !== undefined) {
      Timestamp.encode(toTimestamp(message.latestJobEndTime), writer.uint32(42).fork()).join();
    }
    if (message.latestJobCreateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.latestJobCreateTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataScan_ExecutionStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataScan_ExecutionStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.latestJobStartTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.latestJobEndTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.latestJobCreateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataScan_ExecutionStatus {
    return {
      latestJobStartTime: isSet(object.latestJobStartTime) ? fromJsonTimestamp(object.latestJobStartTime) : undefined,
      latestJobEndTime: isSet(object.latestJobEndTime) ? fromJsonTimestamp(object.latestJobEndTime) : undefined,
      latestJobCreateTime: isSet(object.latestJobCreateTime)
        ? fromJsonTimestamp(object.latestJobCreateTime)
        : undefined,
    };
  },

  toJSON(message: DataScan_ExecutionStatus): unknown {
    const obj: any = {};
    if (message.latestJobStartTime !== undefined) {
      obj.latestJobStartTime = message.latestJobStartTime.toISOString();
    }
    if (message.latestJobEndTime !== undefined) {
      obj.latestJobEndTime = message.latestJobEndTime.toISOString();
    }
    if (message.latestJobCreateTime !== undefined) {
      obj.latestJobCreateTime = message.latestJobCreateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<DataScan_ExecutionStatus>): DataScan_ExecutionStatus {
    return DataScan_ExecutionStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataScan_ExecutionStatus>): DataScan_ExecutionStatus {
    const message = createBaseDataScan_ExecutionStatus();
    message.latestJobStartTime = object.latestJobStartTime ?? undefined;
    message.latestJobEndTime = object.latestJobEndTime ?? undefined;
    message.latestJobCreateTime = object.latestJobCreateTime ?? undefined;
    return message;
  },
};

function createBaseDataScan_LabelsEntry(): DataScan_LabelsEntry {
  return { key: "", value: "" };
}

export const DataScan_LabelsEntry: MessageFns<DataScan_LabelsEntry> = {
  encode(message: DataScan_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataScan_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataScan_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataScan_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DataScan_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<DataScan_LabelsEntry>): DataScan_LabelsEntry {
    return DataScan_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataScan_LabelsEntry>): DataScan_LabelsEntry {
    const message = createBaseDataScan_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseDataScanJob(): DataScanJob {
  return {
    name: "",
    uid: "",
    startTime: undefined,
    endTime: undefined,
    state: 0,
    message: "",
    type: 0,
    dataQualitySpec: undefined,
    dataProfileSpec: undefined,
    dataQualityResult: undefined,
    dataProfileResult: undefined,
  };
}

export const DataScanJob: MessageFns<DataScanJob> = {
  encode(message: DataScanJob, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uid !== "") {
      writer.uint32(18).string(message.uid);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(26).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(34).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(40).int32(message.state);
    }
    if (message.message !== "") {
      writer.uint32(50).string(message.message);
    }
    if (message.type !== 0) {
      writer.uint32(56).int32(message.type);
    }
    if (message.dataQualitySpec !== undefined) {
      DataQualitySpec.encode(message.dataQualitySpec, writer.uint32(802).fork()).join();
    }
    if (message.dataProfileSpec !== undefined) {
      DataProfileSpec.encode(message.dataProfileSpec, writer.uint32(810).fork()).join();
    }
    if (message.dataQualityResult !== undefined) {
      DataQualityResult.encode(message.dataQualityResult, writer.uint32(1602).fork()).join();
    }
    if (message.dataProfileResult !== undefined) {
      DataProfileResult.encode(message.dataProfileResult, writer.uint32(1610).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataScanJob {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataScanJob();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.message = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.dataQualitySpec = DataQualitySpec.decode(reader, reader.uint32());
          continue;
        case 101:
          if (tag !== 810) {
            break;
          }

          message.dataProfileSpec = DataProfileSpec.decode(reader, reader.uint32());
          continue;
        case 200:
          if (tag !== 1602) {
            break;
          }

          message.dataQualityResult = DataQualityResult.decode(reader, reader.uint32());
          continue;
        case 201:
          if (tag !== 1610) {
            break;
          }

          message.dataProfileResult = DataProfileResult.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataScanJob {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      state: isSet(object.state) ? dataScanJob_StateFromJSON(object.state) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      type: isSet(object.type) ? dataScanTypeFromJSON(object.type) : 0,
      dataQualitySpec: isSet(object.dataQualitySpec) ? DataQualitySpec.fromJSON(object.dataQualitySpec) : undefined,
      dataProfileSpec: isSet(object.dataProfileSpec) ? DataProfileSpec.fromJSON(object.dataProfileSpec) : undefined,
      dataQualityResult: isSet(object.dataQualityResult)
        ? DataQualityResult.fromJSON(object.dataQualityResult)
        : undefined,
      dataProfileResult: isSet(object.dataProfileResult)
        ? DataProfileResult.fromJSON(object.dataProfileResult)
        : undefined,
    };
  },

  toJSON(message: DataScanJob): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = dataScanJob_StateToJSON(message.state);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.type !== 0) {
      obj.type = dataScanTypeToJSON(message.type);
    }
    if (message.dataQualitySpec !== undefined) {
      obj.dataQualitySpec = DataQualitySpec.toJSON(message.dataQualitySpec);
    }
    if (message.dataProfileSpec !== undefined) {
      obj.dataProfileSpec = DataProfileSpec.toJSON(message.dataProfileSpec);
    }
    if (message.dataQualityResult !== undefined) {
      obj.dataQualityResult = DataQualityResult.toJSON(message.dataQualityResult);
    }
    if (message.dataProfileResult !== undefined) {
      obj.dataProfileResult = DataProfileResult.toJSON(message.dataProfileResult);
    }
    return obj;
  },

  create(base?: DeepPartial<DataScanJob>): DataScanJob {
    return DataScanJob.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataScanJob>): DataScanJob {
    const message = createBaseDataScanJob();
    message.name = object.name ?? "";
    message.uid = object.uid ?? "";
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.state = object.state ?? 0;
    message.message = object.message ?? "";
    message.type = object.type ?? 0;
    message.dataQualitySpec = (object.dataQualitySpec !== undefined && object.dataQualitySpec !== null)
      ? DataQualitySpec.fromPartial(object.dataQualitySpec)
      : undefined;
    message.dataProfileSpec = (object.dataProfileSpec !== undefined && object.dataProfileSpec !== null)
      ? DataProfileSpec.fromPartial(object.dataProfileSpec)
      : undefined;
    message.dataQualityResult = (object.dataQualityResult !== undefined && object.dataQualityResult !== null)
      ? DataQualityResult.fromPartial(object.dataQualityResult)
      : undefined;
    message.dataProfileResult = (object.dataProfileResult !== undefined && object.dataProfileResult !== null)
      ? DataProfileResult.fromPartial(object.dataProfileResult)
      : undefined;
    return message;
  },
};

/**
 * DataScanService manages DataScan resources which can be configured to run
 * various types of data scanning workload and generate enriched metadata (e.g.
 * Data Profile, Data Quality) for the data source.
 */
export type DataScanServiceDefinition = typeof DataScanServiceDefinition;
export const DataScanServiceDefinition = {
  name: "DataScanService",
  fullName: "google.cloud.dataplex.v1.DataScanService",
  methods: {
    /** Creates a DataScan resource. */
    createDataScan: {
      name: "CreateDataScan",
      requestType: CreateDataScanRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              68,
              97,
              116,
              97,
              83,
              99,
              97,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              29,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              97,
              116,
              97,
              95,
              115,
              99,
              97,
              110,
              44,
              100,
              97,
              116,
              97,
              95,
              115,
              99,
              97,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              58,
              58,
              9,
              100,
              97,
              116,
              97,
              95,
              115,
              99,
              97,
              110,
              34,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              83,
              99,
              97,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a DataScan resource. */
    updateDataScan: {
      name: "UpdateDataScan",
      requestType: UpdateDataScanRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              68,
              97,
              116,
              97,
              83,
              99,
              97,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              21,
              100,
              97,
              116,
              97,
              95,
              115,
              99,
              97,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              68,
              58,
              9,
              100,
              97,
              116,
              97,
              95,
              115,
              99,
              97,
              110,
              50,
              55,
              47,
              118,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              115,
              99,
              97,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              99,
              97,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a DataScan resource. */
    deleteDataScan: {
      name: "DeleteDataScan",
      requestType: DeleteDataScanRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              42,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              99,
              97,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a DataScan resource. */
    getDataScan: {
      name: "GetDataScan",
      requestType: GetDataScanRequest,
      requestStream: false,
      responseType: DataScan,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              99,
              97,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists DataScans. */
    listDataScans: {
      name: "ListDataScans",
      requestType: ListDataScansRequest,
      requestStream: false,
      responseType: ListDataScansResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              83,
              99,
              97,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Runs an on-demand execution of a DataScan */
    runDataScan: {
      name: "RunDataScan",
      requestType: RunDataScanRequest,
      requestStream: false,
      responseType: RunDataScanResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              54,
              58,
              1,
              42,
              34,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              99,
              97,
              110,
              115,
              47,
              42,
              125,
              58,
              114,
              117,
              110,
            ]),
          ],
        },
      },
    },
    /** Gets a DataScanJob resource. */
    getDataScanJob: {
      name: "GetDataScanJob",
      requestType: GetDataScanJobRequest,
      requestStream: false,
      responseType: DataScanJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              54,
              18,
              52,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              99,
              97,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists DataScanJobs under the given DataScan. */
    listDataScanJobs: {
      name: "ListDataScanJobs",
      requestType: ListDataScanJobsRequest,
      requestStream: false,
      responseType: ListDataScanJobsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              54,
              18,
              52,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              99,
              97,
              110,
              115,
              47,
              42,
              125,
              47,
              106,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Generates recommended data quality rules based on the results of a data
     * profiling scan.
     *
     * Use the recommendations to build rules for a data quality scan.
     */
    generateDataQualityRules: {
      name: "GenerateDataQualityRules",
      requestType: GenerateDataQualityRulesRequest,
      requestStream: false,
      responseType: GenerateDataQualityRulesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              159,
              1,
              58,
              1,
              42,
              90,
              82,
              58,
              1,
              42,
              34,
              77,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              99,
              97,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              68,
              97,
              116,
              97,
              81,
              117,
              97,
              108,
              105,
              116,
              121,
              82,
              117,
              108,
              101,
              115,
              34,
              70,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              99,
              97,
              110,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              68,
              97,
              116,
              97,
              81,
              117,
              97,
              108,
              105,
              116,
              121,
              82,
              117,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DataScanServiceImplementation<CallContextExt = {}> {
  /** Creates a DataScan resource. */
  createDataScan(
    request: CreateDataScanRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates a DataScan resource. */
  updateDataScan(
    request: UpdateDataScanRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a DataScan resource. */
  deleteDataScan(
    request: DeleteDataScanRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a DataScan resource. */
  getDataScan(request: GetDataScanRequest, context: CallContext & CallContextExt): Promise<DeepPartial<DataScan>>;
  /** Lists DataScans. */
  listDataScans(
    request: ListDataScansRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDataScansResponse>>;
  /** Runs an on-demand execution of a DataScan */
  runDataScan(
    request: RunDataScanRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RunDataScanResponse>>;
  /** Gets a DataScanJob resource. */
  getDataScanJob(
    request: GetDataScanJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataScanJob>>;
  /** Lists DataScanJobs under the given DataScan. */
  listDataScanJobs(
    request: ListDataScanJobsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDataScanJobsResponse>>;
  /**
   * Generates recommended data quality rules based on the results of a data
   * profiling scan.
   *
   * Use the recommendations to build rules for a data quality scan.
   */
  generateDataQualityRules(
    request: GenerateDataQualityRulesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateDataQualityRulesResponse>>;
}

export interface DataScanServiceClient<CallOptionsExt = {}> {
  /** Creates a DataScan resource. */
  createDataScan(
    request: DeepPartial<CreateDataScanRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates a DataScan resource. */
  updateDataScan(
    request: DeepPartial<UpdateDataScanRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a DataScan resource. */
  deleteDataScan(
    request: DeepPartial<DeleteDataScanRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a DataScan resource. */
  getDataScan(request: DeepPartial<GetDataScanRequest>, options?: CallOptions & CallOptionsExt): Promise<DataScan>;
  /** Lists DataScans. */
  listDataScans(
    request: DeepPartial<ListDataScansRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDataScansResponse>;
  /** Runs an on-demand execution of a DataScan */
  runDataScan(
    request: DeepPartial<RunDataScanRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RunDataScanResponse>;
  /** Gets a DataScanJob resource. */
  getDataScanJob(
    request: DeepPartial<GetDataScanJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataScanJob>;
  /** Lists DataScanJobs under the given DataScan. */
  listDataScanJobs(
    request: DeepPartial<ListDataScanJobsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDataScanJobsResponse>;
  /**
   * Generates recommended data quality rules based on the results of a data
   * profiling scan.
   *
   * Use the recommendations to build rules for a data quality scan.
   */
  generateDataQualityRules(
    request: DeepPartial<GenerateDataQualityRulesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateDataQualityRulesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
