// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dataplex/v1/data_profile.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ScannedData } from "./processing.js";

export const protobufPackage = "google.cloud.dataplex.v1";

/** DataProfileScan related setting. */
export interface DataProfileSpec {
  /**
   * Optional. The percentage of the records to be selected from the dataset for
   * DataScan.
   *
   * * Value can range between 0.0 and 100.0 with up to 3 significant decimal
   * digits.
   * * Sampling is not applied if `sampling_percent` is not specified, 0 or
   * 100.
   */
  samplingPercent: number;
  /**
   * Optional. A filter applied to all rows in a single DataScan job.
   * The filter needs to be a valid SQL expression for a WHERE clause in
   * BigQuery standard SQL syntax.
   * Example: col1 >= 0 AND col2 < 10
   */
  rowFilter: string;
  /** Optional. Actions to take upon job completion.. */
  postScanActions:
    | DataProfileSpec_PostScanActions
    | undefined;
  /**
   * Optional. The fields to include in data profile.
   *
   * If not specified, all fields at the time of profile scan job execution are
   * included, except for ones listed in `exclude_fields`.
   */
  includeFields:
    | DataProfileSpec_SelectedFields
    | undefined;
  /**
   * Optional. The fields to exclude from data profile.
   *
   * If specified, the fields will be excluded from data profile, regardless of
   * `include_fields` value.
   */
  excludeFields: DataProfileSpec_SelectedFields | undefined;
}

/** The configuration of post scan actions of DataProfileScan job. */
export interface DataProfileSpec_PostScanActions {
  /**
   * Optional. If set, results will be exported to the provided BigQuery
   * table.
   */
  bigqueryExport: DataProfileSpec_PostScanActions_BigQueryExport | undefined;
}

/** The configuration of BigQuery export post scan action. */
export interface DataProfileSpec_PostScanActions_BigQueryExport {
  /**
   * Optional. The BigQuery table to export DataProfileScan results to.
   * Format:
   * //bigquery.googleapis.com/projects/PROJECT_ID/datasets/DATASET_ID/tables/TABLE_ID
   */
  resultsTable: string;
}

/** The specification for fields to include or exclude in data profile scan. */
export interface DataProfileSpec_SelectedFields {
  /**
   * Optional. Expected input is a list of fully qualified names of fields as
   * in the schema.
   *
   * Only top-level field names for nested fields are supported.
   * For instance, if 'x' is of nested field type, listing 'x' is supported
   * but 'x.y.z' is not supported. Here 'y' and 'y.z' are nested fields of
   * 'x'.
   */
  fieldNames: string[];
}

/**
 * DataProfileResult defines the output of DataProfileScan. Each field of the
 * table will have field type specific profile result.
 */
export interface DataProfileResult {
  /** The count of rows scanned. */
  rowCount: Long;
  /** The profile information per field. */
  profile:
    | DataProfileResult_Profile
    | undefined;
  /** The data scanned for this result. */
  scannedData:
    | ScannedData
    | undefined;
  /** Output only. The result of post scan actions. */
  postScanActionsResult: DataProfileResult_PostScanActionsResult | undefined;
}

/** Contains name, type, mode and field type specific profile information. */
export interface DataProfileResult_Profile {
  /** List of fields with structural and profile information for each field. */
  fields: DataProfileResult_Profile_Field[];
}

/** A field within a table. */
export interface DataProfileResult_Profile_Field {
  /** The name of the field. */
  name: string;
  /**
   * The data type retrieved from the schema of the data source. For
   * instance, for a BigQuery native table, it is the [BigQuery Table
   * Schema](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#tablefieldschema).
   * For a Dataplex Entity, it is the [Entity
   * Schema](https://cloud.google.com/dataplex/docs/reference/rpc/google.cloud.dataplex.v1#type_3).
   */
  type: string;
  /**
   * The mode of the field. Possible values include:
   *
   * * REQUIRED, if it is a required field.
   * * NULLABLE, if it is an optional field.
   * * REPEATED, if it is a repeated field.
   */
  mode: string;
  /** Profile information for the corresponding field. */
  profile: DataProfileResult_Profile_Field_ProfileInfo | undefined;
}

/** The profile information for each field type. */
export interface DataProfileResult_Profile_Field_ProfileInfo {
  /** Ratio of rows with null value against total scanned rows. */
  nullRatio: number;
  /**
   * Ratio of rows with distinct values against total scanned rows.
   * Not available for complex non-groupable field type RECORD and fields
   * with REPEATABLE mode.
   */
  distinctRatio: number;
  /**
   * The list of top N non-null values, frequency and ratio with which
   * they occur in the scanned data. N is 10 or equal to the number of
   * distinct values in the field, whichever is smaller. Not available for
   * complex non-groupable field type RECORD and fields with REPEATABLE
   * mode.
   */
  topNValues: DataProfileResult_Profile_Field_ProfileInfo_TopNValue[];
  /** String type field information. */
  stringProfile?:
    | DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo
    | undefined;
  /** Integer type field information. */
  integerProfile?:
    | DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo
    | undefined;
  /** Double type field information. */
  doubleProfile?: DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo | undefined;
}

/** The profile information for a string type field. */
export interface DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo {
  /** Minimum length of non-null values in the scanned data. */
  minLength: Long;
  /** Maximum length of non-null values in the scanned data. */
  maxLength: Long;
  /** Average length of non-null values in the scanned data. */
  averageLength: number;
}

/** The profile information for an integer type field. */
export interface DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo {
  /**
   * Average of non-null values in the scanned data. NaN, if the field
   * has a NaN.
   */
  average: number;
  /**
   * Standard deviation of non-null values in the scanned data. NaN, if
   * the field has a NaN.
   */
  standardDeviation: number;
  /**
   * Minimum of non-null values in the scanned data. NaN, if the field
   * has a NaN.
   */
  min: Long;
  /**
   * A quartile divides the number of data points into four parts, or
   * quarters, of more-or-less equal size. Three main quartiles used
   * are: The first quartile (Q1) splits off the lowest 25% of data from
   * the highest 75%. It is also known as the lower or 25th empirical
   * quartile, as 25% of the data is below this point. The second
   * quartile (Q2) is the median of a data set. So, 50% of the data lies
   * below this point. The third quartile (Q3) splits off the highest
   * 25% of data from the lowest 75%. It is known as the upper or 75th
   * empirical quartile, as 75% of the data lies below this point.
   * Here, the quartiles is provided as an ordered list of approximate
   * quartile values for the scanned data, occurring in order Q1,
   * median, Q3.
   */
  quartiles: Long[];
  /**
   * Maximum of non-null values in the scanned data. NaN, if the field
   * has a NaN.
   */
  max: Long;
}

/** The profile information for a double type field. */
export interface DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo {
  /**
   * Average of non-null values in the scanned data. NaN, if the field
   * has a NaN.
   */
  average: number;
  /**
   * Standard deviation of non-null values in the scanned data. NaN, if
   * the field has a NaN.
   */
  standardDeviation: number;
  /**
   * Minimum of non-null values in the scanned data. NaN, if the field
   * has a NaN.
   */
  min: number;
  /**
   * A quartile divides the number of data points into four parts, or
   * quarters, of more-or-less equal size. Three main quartiles used
   * are: The first quartile (Q1) splits off the lowest 25% of data from
   * the highest 75%. It is also known as the lower or 25th empirical
   * quartile, as 25% of the data is below this point. The second
   * quartile (Q2) is the median of a data set. So, 50% of the data lies
   * below this point. The third quartile (Q3) splits off the highest
   * 25% of data from the lowest 75%. It is known as the upper or 75th
   * empirical quartile, as 75% of the data lies below this point.
   * Here, the quartiles is provided as an ordered list of quartile
   * values for the scanned data, occurring in order Q1, median, Q3.
   */
  quartiles: number[];
  /**
   * Maximum of non-null values in the scanned data. NaN, if the field
   * has a NaN.
   */
  max: number;
}

/** Top N non-null values in the scanned data. */
export interface DataProfileResult_Profile_Field_ProfileInfo_TopNValue {
  /** String value of a top N non-null value. */
  value: string;
  /** Count of the corresponding value in the scanned data. */
  count: Long;
  /**
   * Ratio of the corresponding value in the field against the total
   * number of rows in the scanned data.
   */
  ratio: number;
}

/** The result of post scan actions of DataProfileScan job. */
export interface DataProfileResult_PostScanActionsResult {
  /** Output only. The result of BigQuery export post scan action. */
  bigqueryExportResult: DataProfileResult_PostScanActionsResult_BigQueryExportResult | undefined;
}

/** The result of BigQuery export post scan action. */
export interface DataProfileResult_PostScanActionsResult_BigQueryExportResult {
  /** Output only. Execution state for the BigQuery exporting. */
  state: DataProfileResult_PostScanActionsResult_BigQueryExportResult_State;
  /** Output only. Additional information about the BigQuery exporting. */
  message: string;
}

/** Execution state for the exporting. */
export enum DataProfileResult_PostScanActionsResult_BigQueryExportResult_State {
  /** STATE_UNSPECIFIED - The exporting state is unspecified. */
  STATE_UNSPECIFIED = 0,
  /** SUCCEEDED - The exporting completed successfully. */
  SUCCEEDED = 1,
  /** FAILED - The exporting is no longer running due to an error. */
  FAILED = 2,
  /**
   * SKIPPED - The exporting is skipped due to no valid scan result to export
   * (usually caused by scan failed).
   */
  SKIPPED = 3,
  UNRECOGNIZED = -1,
}

export function dataProfileResult_PostScanActionsResult_BigQueryExportResult_StateFromJSON(
  object: any,
): DataProfileResult_PostScanActionsResult_BigQueryExportResult_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return DataProfileResult_PostScanActionsResult_BigQueryExportResult_State.STATE_UNSPECIFIED;
    case 1:
    case "SUCCEEDED":
      return DataProfileResult_PostScanActionsResult_BigQueryExportResult_State.SUCCEEDED;
    case 2:
    case "FAILED":
      return DataProfileResult_PostScanActionsResult_BigQueryExportResult_State.FAILED;
    case 3:
    case "SKIPPED":
      return DataProfileResult_PostScanActionsResult_BigQueryExportResult_State.SKIPPED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataProfileResult_PostScanActionsResult_BigQueryExportResult_State.UNRECOGNIZED;
  }
}

export function dataProfileResult_PostScanActionsResult_BigQueryExportResult_StateToJSON(
  object: DataProfileResult_PostScanActionsResult_BigQueryExportResult_State,
): string {
  switch (object) {
    case DataProfileResult_PostScanActionsResult_BigQueryExportResult_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case DataProfileResult_PostScanActionsResult_BigQueryExportResult_State.SUCCEEDED:
      return "SUCCEEDED";
    case DataProfileResult_PostScanActionsResult_BigQueryExportResult_State.FAILED:
      return "FAILED";
    case DataProfileResult_PostScanActionsResult_BigQueryExportResult_State.SKIPPED:
      return "SKIPPED";
    case DataProfileResult_PostScanActionsResult_BigQueryExportResult_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDataProfileSpec(): DataProfileSpec {
  return {
    samplingPercent: 0,
    rowFilter: "",
    postScanActions: undefined,
    includeFields: undefined,
    excludeFields: undefined,
  };
}

export const DataProfileSpec: MessageFns<DataProfileSpec> = {
  encode(message: DataProfileSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.samplingPercent !== 0) {
      writer.uint32(21).float(message.samplingPercent);
    }
    if (message.rowFilter !== "") {
      writer.uint32(26).string(message.rowFilter);
    }
    if (message.postScanActions !== undefined) {
      DataProfileSpec_PostScanActions.encode(message.postScanActions, writer.uint32(34).fork()).join();
    }
    if (message.includeFields !== undefined) {
      DataProfileSpec_SelectedFields.encode(message.includeFields, writer.uint32(42).fork()).join();
    }
    if (message.excludeFields !== undefined) {
      DataProfileSpec_SelectedFields.encode(message.excludeFields, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataProfileSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataProfileSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 21) {
            break;
          }

          message.samplingPercent = reader.float();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rowFilter = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.postScanActions = DataProfileSpec_PostScanActions.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.includeFields = DataProfileSpec_SelectedFields.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.excludeFields = DataProfileSpec_SelectedFields.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataProfileSpec {
    return {
      samplingPercent: isSet(object.samplingPercent) ? globalThis.Number(object.samplingPercent) : 0,
      rowFilter: isSet(object.rowFilter) ? globalThis.String(object.rowFilter) : "",
      postScanActions: isSet(object.postScanActions)
        ? DataProfileSpec_PostScanActions.fromJSON(object.postScanActions)
        : undefined,
      includeFields: isSet(object.includeFields)
        ? DataProfileSpec_SelectedFields.fromJSON(object.includeFields)
        : undefined,
      excludeFields: isSet(object.excludeFields)
        ? DataProfileSpec_SelectedFields.fromJSON(object.excludeFields)
        : undefined,
    };
  },

  toJSON(message: DataProfileSpec): unknown {
    const obj: any = {};
    if (message.samplingPercent !== 0) {
      obj.samplingPercent = message.samplingPercent;
    }
    if (message.rowFilter !== "") {
      obj.rowFilter = message.rowFilter;
    }
    if (message.postScanActions !== undefined) {
      obj.postScanActions = DataProfileSpec_PostScanActions.toJSON(message.postScanActions);
    }
    if (message.includeFields !== undefined) {
      obj.includeFields = DataProfileSpec_SelectedFields.toJSON(message.includeFields);
    }
    if (message.excludeFields !== undefined) {
      obj.excludeFields = DataProfileSpec_SelectedFields.toJSON(message.excludeFields);
    }
    return obj;
  },

  create(base?: DeepPartial<DataProfileSpec>): DataProfileSpec {
    return DataProfileSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataProfileSpec>): DataProfileSpec {
    const message = createBaseDataProfileSpec();
    message.samplingPercent = object.samplingPercent ?? 0;
    message.rowFilter = object.rowFilter ?? "";
    message.postScanActions = (object.postScanActions !== undefined && object.postScanActions !== null)
      ? DataProfileSpec_PostScanActions.fromPartial(object.postScanActions)
      : undefined;
    message.includeFields = (object.includeFields !== undefined && object.includeFields !== null)
      ? DataProfileSpec_SelectedFields.fromPartial(object.includeFields)
      : undefined;
    message.excludeFields = (object.excludeFields !== undefined && object.excludeFields !== null)
      ? DataProfileSpec_SelectedFields.fromPartial(object.excludeFields)
      : undefined;
    return message;
  },
};

function createBaseDataProfileSpec_PostScanActions(): DataProfileSpec_PostScanActions {
  return { bigqueryExport: undefined };
}

export const DataProfileSpec_PostScanActions: MessageFns<DataProfileSpec_PostScanActions> = {
  encode(message: DataProfileSpec_PostScanActions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bigqueryExport !== undefined) {
      DataProfileSpec_PostScanActions_BigQueryExport.encode(message.bigqueryExport, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataProfileSpec_PostScanActions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataProfileSpec_PostScanActions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bigqueryExport = DataProfileSpec_PostScanActions_BigQueryExport.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataProfileSpec_PostScanActions {
    return {
      bigqueryExport: isSet(object.bigqueryExport)
        ? DataProfileSpec_PostScanActions_BigQueryExport.fromJSON(object.bigqueryExport)
        : undefined,
    };
  },

  toJSON(message: DataProfileSpec_PostScanActions): unknown {
    const obj: any = {};
    if (message.bigqueryExport !== undefined) {
      obj.bigqueryExport = DataProfileSpec_PostScanActions_BigQueryExport.toJSON(message.bigqueryExport);
    }
    return obj;
  },

  create(base?: DeepPartial<DataProfileSpec_PostScanActions>): DataProfileSpec_PostScanActions {
    return DataProfileSpec_PostScanActions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataProfileSpec_PostScanActions>): DataProfileSpec_PostScanActions {
    const message = createBaseDataProfileSpec_PostScanActions();
    message.bigqueryExport = (object.bigqueryExport !== undefined && object.bigqueryExport !== null)
      ? DataProfileSpec_PostScanActions_BigQueryExport.fromPartial(object.bigqueryExport)
      : undefined;
    return message;
  },
};

function createBaseDataProfileSpec_PostScanActions_BigQueryExport(): DataProfileSpec_PostScanActions_BigQueryExport {
  return { resultsTable: "" };
}

export const DataProfileSpec_PostScanActions_BigQueryExport: MessageFns<
  DataProfileSpec_PostScanActions_BigQueryExport
> = {
  encode(
    message: DataProfileSpec_PostScanActions_BigQueryExport,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.resultsTable !== "") {
      writer.uint32(10).string(message.resultsTable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataProfileSpec_PostScanActions_BigQueryExport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataProfileSpec_PostScanActions_BigQueryExport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resultsTable = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataProfileSpec_PostScanActions_BigQueryExport {
    return { resultsTable: isSet(object.resultsTable) ? globalThis.String(object.resultsTable) : "" };
  },

  toJSON(message: DataProfileSpec_PostScanActions_BigQueryExport): unknown {
    const obj: any = {};
    if (message.resultsTable !== "") {
      obj.resultsTable = message.resultsTable;
    }
    return obj;
  },

  create(
    base?: DeepPartial<DataProfileSpec_PostScanActions_BigQueryExport>,
  ): DataProfileSpec_PostScanActions_BigQueryExport {
    return DataProfileSpec_PostScanActions_BigQueryExport.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DataProfileSpec_PostScanActions_BigQueryExport>,
  ): DataProfileSpec_PostScanActions_BigQueryExport {
    const message = createBaseDataProfileSpec_PostScanActions_BigQueryExport();
    message.resultsTable = object.resultsTable ?? "";
    return message;
  },
};

function createBaseDataProfileSpec_SelectedFields(): DataProfileSpec_SelectedFields {
  return { fieldNames: [] };
}

export const DataProfileSpec_SelectedFields: MessageFns<DataProfileSpec_SelectedFields> = {
  encode(message: DataProfileSpec_SelectedFields, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.fieldNames) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataProfileSpec_SelectedFields {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataProfileSpec_SelectedFields();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fieldNames.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataProfileSpec_SelectedFields {
    return {
      fieldNames: globalThis.Array.isArray(object?.fieldNames)
        ? object.fieldNames.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: DataProfileSpec_SelectedFields): unknown {
    const obj: any = {};
    if (message.fieldNames?.length) {
      obj.fieldNames = message.fieldNames;
    }
    return obj;
  },

  create(base?: DeepPartial<DataProfileSpec_SelectedFields>): DataProfileSpec_SelectedFields {
    return DataProfileSpec_SelectedFields.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataProfileSpec_SelectedFields>): DataProfileSpec_SelectedFields {
    const message = createBaseDataProfileSpec_SelectedFields();
    message.fieldNames = object.fieldNames?.map((e) => e) || [];
    return message;
  },
};

function createBaseDataProfileResult(): DataProfileResult {
  return { rowCount: Long.ZERO, profile: undefined, scannedData: undefined, postScanActionsResult: undefined };
}

export const DataProfileResult: MessageFns<DataProfileResult> = {
  encode(message: DataProfileResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.rowCount.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.rowCount.toString());
    }
    if (message.profile !== undefined) {
      DataProfileResult_Profile.encode(message.profile, writer.uint32(34).fork()).join();
    }
    if (message.scannedData !== undefined) {
      ScannedData.encode(message.scannedData, writer.uint32(42).fork()).join();
    }
    if (message.postScanActionsResult !== undefined) {
      DataProfileResult_PostScanActionsResult.encode(message.postScanActionsResult, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataProfileResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataProfileResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }

          message.rowCount = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.profile = DataProfileResult_Profile.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scannedData = ScannedData.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.postScanActionsResult = DataProfileResult_PostScanActionsResult.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataProfileResult {
    return {
      rowCount: isSet(object.rowCount) ? Long.fromValue(object.rowCount) : Long.ZERO,
      profile: isSet(object.profile) ? DataProfileResult_Profile.fromJSON(object.profile) : undefined,
      scannedData: isSet(object.scannedData) ? ScannedData.fromJSON(object.scannedData) : undefined,
      postScanActionsResult: isSet(object.postScanActionsResult)
        ? DataProfileResult_PostScanActionsResult.fromJSON(object.postScanActionsResult)
        : undefined,
    };
  },

  toJSON(message: DataProfileResult): unknown {
    const obj: any = {};
    if (!message.rowCount.equals(Long.ZERO)) {
      obj.rowCount = (message.rowCount || Long.ZERO).toString();
    }
    if (message.profile !== undefined) {
      obj.profile = DataProfileResult_Profile.toJSON(message.profile);
    }
    if (message.scannedData !== undefined) {
      obj.scannedData = ScannedData.toJSON(message.scannedData);
    }
    if (message.postScanActionsResult !== undefined) {
      obj.postScanActionsResult = DataProfileResult_PostScanActionsResult.toJSON(message.postScanActionsResult);
    }
    return obj;
  },

  create(base?: DeepPartial<DataProfileResult>): DataProfileResult {
    return DataProfileResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataProfileResult>): DataProfileResult {
    const message = createBaseDataProfileResult();
    message.rowCount = (object.rowCount !== undefined && object.rowCount !== null)
      ? Long.fromValue(object.rowCount)
      : Long.ZERO;
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? DataProfileResult_Profile.fromPartial(object.profile)
      : undefined;
    message.scannedData = (object.scannedData !== undefined && object.scannedData !== null)
      ? ScannedData.fromPartial(object.scannedData)
      : undefined;
    message.postScanActionsResult =
      (object.postScanActionsResult !== undefined && object.postScanActionsResult !== null)
        ? DataProfileResult_PostScanActionsResult.fromPartial(object.postScanActionsResult)
        : undefined;
    return message;
  },
};

function createBaseDataProfileResult_Profile(): DataProfileResult_Profile {
  return { fields: [] };
}

export const DataProfileResult_Profile: MessageFns<DataProfileResult_Profile> = {
  encode(message: DataProfileResult_Profile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.fields) {
      DataProfileResult_Profile_Field.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataProfileResult_Profile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataProfileResult_Profile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fields.push(DataProfileResult_Profile_Field.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataProfileResult_Profile {
    return {
      fields: globalThis.Array.isArray(object?.fields)
        ? object.fields.map((e: any) => DataProfileResult_Profile_Field.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DataProfileResult_Profile): unknown {
    const obj: any = {};
    if (message.fields?.length) {
      obj.fields = message.fields.map((e) => DataProfileResult_Profile_Field.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DataProfileResult_Profile>): DataProfileResult_Profile {
    return DataProfileResult_Profile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataProfileResult_Profile>): DataProfileResult_Profile {
    const message = createBaseDataProfileResult_Profile();
    message.fields = object.fields?.map((e) => DataProfileResult_Profile_Field.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDataProfileResult_Profile_Field(): DataProfileResult_Profile_Field {
  return { name: "", type: "", mode: "", profile: undefined };
}

export const DataProfileResult_Profile_Field: MessageFns<DataProfileResult_Profile_Field> = {
  encode(message: DataProfileResult_Profile_Field, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.mode !== "") {
      writer.uint32(26).string(message.mode);
    }
    if (message.profile !== undefined) {
      DataProfileResult_Profile_Field_ProfileInfo.encode(message.profile, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataProfileResult_Profile_Field {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataProfileResult_Profile_Field();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.mode = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.profile = DataProfileResult_Profile_Field_ProfileInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataProfileResult_Profile_Field {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      mode: isSet(object.mode) ? globalThis.String(object.mode) : "",
      profile: isSet(object.profile) ? DataProfileResult_Profile_Field_ProfileInfo.fromJSON(object.profile) : undefined,
    };
  },

  toJSON(message: DataProfileResult_Profile_Field): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.mode !== "") {
      obj.mode = message.mode;
    }
    if (message.profile !== undefined) {
      obj.profile = DataProfileResult_Profile_Field_ProfileInfo.toJSON(message.profile);
    }
    return obj;
  },

  create(base?: DeepPartial<DataProfileResult_Profile_Field>): DataProfileResult_Profile_Field {
    return DataProfileResult_Profile_Field.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataProfileResult_Profile_Field>): DataProfileResult_Profile_Field {
    const message = createBaseDataProfileResult_Profile_Field();
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    message.mode = object.mode ?? "";
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? DataProfileResult_Profile_Field_ProfileInfo.fromPartial(object.profile)
      : undefined;
    return message;
  },
};

function createBaseDataProfileResult_Profile_Field_ProfileInfo(): DataProfileResult_Profile_Field_ProfileInfo {
  return {
    nullRatio: 0,
    distinctRatio: 0,
    topNValues: [],
    stringProfile: undefined,
    integerProfile: undefined,
    doubleProfile: undefined,
  };
}

export const DataProfileResult_Profile_Field_ProfileInfo: MessageFns<DataProfileResult_Profile_Field_ProfileInfo> = {
  encode(
    message: DataProfileResult_Profile_Field_ProfileInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.nullRatio !== 0) {
      writer.uint32(17).double(message.nullRatio);
    }
    if (message.distinctRatio !== 0) {
      writer.uint32(25).double(message.distinctRatio);
    }
    for (const v of message.topNValues) {
      DataProfileResult_Profile_Field_ProfileInfo_TopNValue.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.stringProfile !== undefined) {
      DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo.encode(
        message.stringProfile,
        writer.uint32(810).fork(),
      ).join();
    }
    if (message.integerProfile !== undefined) {
      DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo.encode(
        message.integerProfile,
        writer.uint32(818).fork(),
      ).join();
    }
    if (message.doubleProfile !== undefined) {
      DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo.encode(
        message.doubleProfile,
        writer.uint32(826).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataProfileResult_Profile_Field_ProfileInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataProfileResult_Profile_Field_ProfileInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 17) {
            break;
          }

          message.nullRatio = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.distinctRatio = reader.double();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.topNValues.push(
            DataProfileResult_Profile_Field_ProfileInfo_TopNValue.decode(reader, reader.uint32()),
          );
          continue;
        case 101:
          if (tag !== 810) {
            break;
          }

          message.stringProfile = DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 102:
          if (tag !== 818) {
            break;
          }

          message.integerProfile = DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 103:
          if (tag !== 826) {
            break;
          }

          message.doubleProfile = DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataProfileResult_Profile_Field_ProfileInfo {
    return {
      nullRatio: isSet(object.nullRatio) ? globalThis.Number(object.nullRatio) : 0,
      distinctRatio: isSet(object.distinctRatio) ? globalThis.Number(object.distinctRatio) : 0,
      topNValues: globalThis.Array.isArray(object?.topNValues)
        ? object.topNValues.map((e: any) => DataProfileResult_Profile_Field_ProfileInfo_TopNValue.fromJSON(e))
        : [],
      stringProfile: isSet(object.stringProfile)
        ? DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo.fromJSON(object.stringProfile)
        : undefined,
      integerProfile: isSet(object.integerProfile)
        ? DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo.fromJSON(object.integerProfile)
        : undefined,
      doubleProfile: isSet(object.doubleProfile)
        ? DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo.fromJSON(object.doubleProfile)
        : undefined,
    };
  },

  toJSON(message: DataProfileResult_Profile_Field_ProfileInfo): unknown {
    const obj: any = {};
    if (message.nullRatio !== 0) {
      obj.nullRatio = message.nullRatio;
    }
    if (message.distinctRatio !== 0) {
      obj.distinctRatio = message.distinctRatio;
    }
    if (message.topNValues?.length) {
      obj.topNValues = message.topNValues.map((e) => DataProfileResult_Profile_Field_ProfileInfo_TopNValue.toJSON(e));
    }
    if (message.stringProfile !== undefined) {
      obj.stringProfile = DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo.toJSON(message.stringProfile);
    }
    if (message.integerProfile !== undefined) {
      obj.integerProfile = DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo.toJSON(message.integerProfile);
    }
    if (message.doubleProfile !== undefined) {
      obj.doubleProfile = DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo.toJSON(message.doubleProfile);
    }
    return obj;
  },

  create(base?: DeepPartial<DataProfileResult_Profile_Field_ProfileInfo>): DataProfileResult_Profile_Field_ProfileInfo {
    return DataProfileResult_Profile_Field_ProfileInfo.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DataProfileResult_Profile_Field_ProfileInfo>,
  ): DataProfileResult_Profile_Field_ProfileInfo {
    const message = createBaseDataProfileResult_Profile_Field_ProfileInfo();
    message.nullRatio = object.nullRatio ?? 0;
    message.distinctRatio = object.distinctRatio ?? 0;
    message.topNValues =
      object.topNValues?.map((e) => DataProfileResult_Profile_Field_ProfileInfo_TopNValue.fromPartial(e)) || [];
    message.stringProfile = (object.stringProfile !== undefined && object.stringProfile !== null)
      ? DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo.fromPartial(object.stringProfile)
      : undefined;
    message.integerProfile = (object.integerProfile !== undefined && object.integerProfile !== null)
      ? DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo.fromPartial(object.integerProfile)
      : undefined;
    message.doubleProfile = (object.doubleProfile !== undefined && object.doubleProfile !== null)
      ? DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo.fromPartial(object.doubleProfile)
      : undefined;
    return message;
  },
};

function createBaseDataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo(): DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo {
  return { minLength: Long.ZERO, maxLength: Long.ZERO, averageLength: 0 };
}

export const DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo: MessageFns<
  DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo
> = {
  encode(
    message: DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (!message.minLength.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.minLength.toString());
    }
    if (!message.maxLength.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.maxLength.toString());
    }
    if (message.averageLength !== 0) {
      writer.uint32(25).double(message.averageLength);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.minLength = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxLength = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.averageLength = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo {
    return {
      minLength: isSet(object.minLength) ? Long.fromValue(object.minLength) : Long.ZERO,
      maxLength: isSet(object.maxLength) ? Long.fromValue(object.maxLength) : Long.ZERO,
      averageLength: isSet(object.averageLength) ? globalThis.Number(object.averageLength) : 0,
    };
  },

  toJSON(message: DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo): unknown {
    const obj: any = {};
    if (!message.minLength.equals(Long.ZERO)) {
      obj.minLength = (message.minLength || Long.ZERO).toString();
    }
    if (!message.maxLength.equals(Long.ZERO)) {
      obj.maxLength = (message.maxLength || Long.ZERO).toString();
    }
    if (message.averageLength !== 0) {
      obj.averageLength = message.averageLength;
    }
    return obj;
  },

  create(
    base?: DeepPartial<DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo>,
  ): DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo {
    return DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo>,
  ): DataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo {
    const message = createBaseDataProfileResult_Profile_Field_ProfileInfo_StringFieldInfo();
    message.minLength = (object.minLength !== undefined && object.minLength !== null)
      ? Long.fromValue(object.minLength)
      : Long.ZERO;
    message.maxLength = (object.maxLength !== undefined && object.maxLength !== null)
      ? Long.fromValue(object.maxLength)
      : Long.ZERO;
    message.averageLength = object.averageLength ?? 0;
    return message;
  },
};

function createBaseDataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo(): DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo {
  return { average: 0, standardDeviation: 0, min: Long.ZERO, quartiles: [], max: Long.ZERO };
}

export const DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo: MessageFns<
  DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo
> = {
  encode(
    message: DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.average !== 0) {
      writer.uint32(9).double(message.average);
    }
    if (message.standardDeviation !== 0) {
      writer.uint32(25).double(message.standardDeviation);
    }
    if (!message.min.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.min.toString());
    }
    writer.uint32(50).fork();
    for (const v of message.quartiles) {
      writer.int64(v.toString());
    }
    writer.join();
    if (!message.max.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.max.toString());
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.average = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.standardDeviation = reader.double();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.min = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag === 48) {
            message.quartiles.push(Long.fromString(reader.int64().toString()));

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.quartiles.push(Long.fromString(reader.int64().toString()));
            }

            continue;
          }

          break;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.max = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo {
    return {
      average: isSet(object.average) ? globalThis.Number(object.average) : 0,
      standardDeviation: isSet(object.standardDeviation) ? globalThis.Number(object.standardDeviation) : 0,
      min: isSet(object.min) ? Long.fromValue(object.min) : Long.ZERO,
      quartiles: globalThis.Array.isArray(object?.quartiles) ? object.quartiles.map((e: any) => Long.fromValue(e)) : [],
      max: isSet(object.max) ? Long.fromValue(object.max) : Long.ZERO,
    };
  },

  toJSON(message: DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo): unknown {
    const obj: any = {};
    if (message.average !== 0) {
      obj.average = message.average;
    }
    if (message.standardDeviation !== 0) {
      obj.standardDeviation = message.standardDeviation;
    }
    if (!message.min.equals(Long.ZERO)) {
      obj.min = (message.min || Long.ZERO).toString();
    }
    if (message.quartiles?.length) {
      obj.quartiles = message.quartiles.map((e) => (e || Long.ZERO).toString());
    }
    if (!message.max.equals(Long.ZERO)) {
      obj.max = (message.max || Long.ZERO).toString();
    }
    return obj;
  },

  create(
    base?: DeepPartial<DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo>,
  ): DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo {
    return DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo>,
  ): DataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo {
    const message = createBaseDataProfileResult_Profile_Field_ProfileInfo_IntegerFieldInfo();
    message.average = object.average ?? 0;
    message.standardDeviation = object.standardDeviation ?? 0;
    message.min = (object.min !== undefined && object.min !== null) ? Long.fromValue(object.min) : Long.ZERO;
    message.quartiles = object.quartiles?.map((e) => Long.fromValue(e)) || [];
    message.max = (object.max !== undefined && object.max !== null) ? Long.fromValue(object.max) : Long.ZERO;
    return message;
  },
};

function createBaseDataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo(): DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo {
  return { average: 0, standardDeviation: 0, min: 0, quartiles: [], max: 0 };
}

export const DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo: MessageFns<
  DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo
> = {
  encode(
    message: DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.average !== 0) {
      writer.uint32(9).double(message.average);
    }
    if (message.standardDeviation !== 0) {
      writer.uint32(25).double(message.standardDeviation);
    }
    if (message.min !== 0) {
      writer.uint32(33).double(message.min);
    }
    writer.uint32(50).fork();
    for (const v of message.quartiles) {
      writer.double(v);
    }
    writer.join();
    if (message.max !== 0) {
      writer.uint32(41).double(message.max);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.average = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.standardDeviation = reader.double();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.min = reader.double();
          continue;
        case 6:
          if (tag === 49) {
            message.quartiles.push(reader.double());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.quartiles.push(reader.double());
            }

            continue;
          }

          break;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.max = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo {
    return {
      average: isSet(object.average) ? globalThis.Number(object.average) : 0,
      standardDeviation: isSet(object.standardDeviation) ? globalThis.Number(object.standardDeviation) : 0,
      min: isSet(object.min) ? globalThis.Number(object.min) : 0,
      quartiles: globalThis.Array.isArray(object?.quartiles)
        ? object.quartiles.map((e: any) => globalThis.Number(e))
        : [],
      max: isSet(object.max) ? globalThis.Number(object.max) : 0,
    };
  },

  toJSON(message: DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo): unknown {
    const obj: any = {};
    if (message.average !== 0) {
      obj.average = message.average;
    }
    if (message.standardDeviation !== 0) {
      obj.standardDeviation = message.standardDeviation;
    }
    if (message.min !== 0) {
      obj.min = message.min;
    }
    if (message.quartiles?.length) {
      obj.quartiles = message.quartiles;
    }
    if (message.max !== 0) {
      obj.max = message.max;
    }
    return obj;
  },

  create(
    base?: DeepPartial<DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo>,
  ): DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo {
    return DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo>,
  ): DataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo {
    const message = createBaseDataProfileResult_Profile_Field_ProfileInfo_DoubleFieldInfo();
    message.average = object.average ?? 0;
    message.standardDeviation = object.standardDeviation ?? 0;
    message.min = object.min ?? 0;
    message.quartiles = object.quartiles?.map((e) => e) || [];
    message.max = object.max ?? 0;
    return message;
  },
};

function createBaseDataProfileResult_Profile_Field_ProfileInfo_TopNValue(): DataProfileResult_Profile_Field_ProfileInfo_TopNValue {
  return { value: "", count: Long.ZERO, ratio: 0 };
}

export const DataProfileResult_Profile_Field_ProfileInfo_TopNValue: MessageFns<
  DataProfileResult_Profile_Field_ProfileInfo_TopNValue
> = {
  encode(
    message: DataProfileResult_Profile_Field_ProfileInfo_TopNValue,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    if (!message.count.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.count.toString());
    }
    if (message.ratio !== 0) {
      writer.uint32(25).double(message.ratio);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataProfileResult_Profile_Field_ProfileInfo_TopNValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataProfileResult_Profile_Field_ProfileInfo_TopNValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.count = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.ratio = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataProfileResult_Profile_Field_ProfileInfo_TopNValue {
    return {
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      count: isSet(object.count) ? Long.fromValue(object.count) : Long.ZERO,
      ratio: isSet(object.ratio) ? globalThis.Number(object.ratio) : 0,
    };
  },

  toJSON(message: DataProfileResult_Profile_Field_ProfileInfo_TopNValue): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (!message.count.equals(Long.ZERO)) {
      obj.count = (message.count || Long.ZERO).toString();
    }
    if (message.ratio !== 0) {
      obj.ratio = message.ratio;
    }
    return obj;
  },

  create(
    base?: DeepPartial<DataProfileResult_Profile_Field_ProfileInfo_TopNValue>,
  ): DataProfileResult_Profile_Field_ProfileInfo_TopNValue {
    return DataProfileResult_Profile_Field_ProfileInfo_TopNValue.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DataProfileResult_Profile_Field_ProfileInfo_TopNValue>,
  ): DataProfileResult_Profile_Field_ProfileInfo_TopNValue {
    const message = createBaseDataProfileResult_Profile_Field_ProfileInfo_TopNValue();
    message.value = object.value ?? "";
    message.count = (object.count !== undefined && object.count !== null) ? Long.fromValue(object.count) : Long.ZERO;
    message.ratio = object.ratio ?? 0;
    return message;
  },
};

function createBaseDataProfileResult_PostScanActionsResult(): DataProfileResult_PostScanActionsResult {
  return { bigqueryExportResult: undefined };
}

export const DataProfileResult_PostScanActionsResult: MessageFns<DataProfileResult_PostScanActionsResult> = {
  encode(message: DataProfileResult_PostScanActionsResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bigqueryExportResult !== undefined) {
      DataProfileResult_PostScanActionsResult_BigQueryExportResult.encode(
        message.bigqueryExportResult,
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataProfileResult_PostScanActionsResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataProfileResult_PostScanActionsResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bigqueryExportResult = DataProfileResult_PostScanActionsResult_BigQueryExportResult.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataProfileResult_PostScanActionsResult {
    return {
      bigqueryExportResult: isSet(object.bigqueryExportResult)
        ? DataProfileResult_PostScanActionsResult_BigQueryExportResult.fromJSON(object.bigqueryExportResult)
        : undefined,
    };
  },

  toJSON(message: DataProfileResult_PostScanActionsResult): unknown {
    const obj: any = {};
    if (message.bigqueryExportResult !== undefined) {
      obj.bigqueryExportResult = DataProfileResult_PostScanActionsResult_BigQueryExportResult.toJSON(
        message.bigqueryExportResult,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<DataProfileResult_PostScanActionsResult>): DataProfileResult_PostScanActionsResult {
    return DataProfileResult_PostScanActionsResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataProfileResult_PostScanActionsResult>): DataProfileResult_PostScanActionsResult {
    const message = createBaseDataProfileResult_PostScanActionsResult();
    message.bigqueryExportResult = (object.bigqueryExportResult !== undefined && object.bigqueryExportResult !== null)
      ? DataProfileResult_PostScanActionsResult_BigQueryExportResult.fromPartial(object.bigqueryExportResult)
      : undefined;
    return message;
  },
};

function createBaseDataProfileResult_PostScanActionsResult_BigQueryExportResult(): DataProfileResult_PostScanActionsResult_BigQueryExportResult {
  return { state: 0, message: "" };
}

export const DataProfileResult_PostScanActionsResult_BigQueryExportResult: MessageFns<
  DataProfileResult_PostScanActionsResult_BigQueryExportResult
> = {
  encode(
    message: DataProfileResult_PostScanActionsResult_BigQueryExportResult,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DataProfileResult_PostScanActionsResult_BigQueryExportResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataProfileResult_PostScanActionsResult_BigQueryExportResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataProfileResult_PostScanActionsResult_BigQueryExportResult {
    return {
      state: isSet(object.state)
        ? dataProfileResult_PostScanActionsResult_BigQueryExportResult_StateFromJSON(object.state)
        : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: DataProfileResult_PostScanActionsResult_BigQueryExportResult): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = dataProfileResult_PostScanActionsResult_BigQueryExportResult_StateToJSON(message.state);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(
    base?: DeepPartial<DataProfileResult_PostScanActionsResult_BigQueryExportResult>,
  ): DataProfileResult_PostScanActionsResult_BigQueryExportResult {
    return DataProfileResult_PostScanActionsResult_BigQueryExportResult.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DataProfileResult_PostScanActionsResult_BigQueryExportResult>,
  ): DataProfileResult_PostScanActionsResult_BigQueryExportResult {
    const message = createBaseDataProfileResult_PostScanActionsResult_BigQueryExportResult();
    message.state = object.state ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
