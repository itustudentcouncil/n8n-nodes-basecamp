// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/oracledatabase/v1/autonomous_db_backup.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.oracledatabase.v1";

/**
 * Details of the Autonomous Database Backup resource.
 * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/AutonomousDatabaseBackup/
 */
export interface AutonomousDatabaseBackup {
  /**
   * Identifier. The name of the Autonomous Database Backup resource with the
   * format:
   * projects/{project}/locations/{region}/autonomousDatabaseBackups/{autonomous_database_backup}
   */
  name: string;
  /**
   * Required. The name of the Autonomous Database resource for which the backup
   * is being created. Format:
   * projects/{project}/locations/{region}/autonomousDatabases/{autonomous_database}
   */
  autonomousDatabase: string;
  /**
   * Optional. User friendly name for the Backup. The name does not have to be
   * unique.
   */
  displayName: string;
  /** Optional. Various properties of the backup. */
  properties:
    | AutonomousDatabaseBackupProperties
    | undefined;
  /** Optional. labels or tags associated with the resource. */
  labels: { [key: string]: string };
}

export interface AutonomousDatabaseBackup_LabelsEntry {
  key: string;
  value: string;
}

/** Properties of the Autonomous Database Backup resource. */
export interface AutonomousDatabaseBackupProperties {
  /**
   * Output only. OCID of the Autonomous Database backup.
   * https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
   */
  ocid: string;
  /** Optional. Retention period in days for the backup. */
  retentionPeriodDays: number;
  /** Output only. The OCID of the compartment. */
  compartmentId: string;
  /** Output only. The quantity of data in the database, in terabytes. */
  databaseSizeTb: number;
  /** Output only. A valid Oracle Database version for Autonomous Database. */
  dbVersion: string;
  /** Output only. Indicates if the backup is long term backup. */
  isLongTermBackup: boolean;
  /** Output only. Indicates if the backup is automatic or user initiated. */
  isAutomaticBackup: boolean;
  /**
   * Output only. Indicates if the backup can be used to restore the Autonomous
   * Database.
   */
  isRestorable: boolean;
  /** Optional. The OCID of the key store of Oracle Vault. */
  keyStoreId: string;
  /** Optional. The wallet name for Oracle Key Vault. */
  keyStoreWallet: string;
  /**
   * Optional. The OCID of the key container that is used as the master
   * encryption key in database transparent data encryption (TDE) operations.
   */
  kmsKeyId: string;
  /**
   * Optional. The OCID of the key container version that is used in database
   * transparent data encryption (TDE) operations KMS Key can have multiple key
   * versions. If none is specified, the current key version (latest) of the Key
   * Id is used for the operation. Autonomous Database Serverless does not use
   * key versions, hence is not applicable for Autonomous Database Serverless
   * instances.
   */
  kmsKeyVersionId: string;
  /** Output only. Additional information about the current lifecycle state. */
  lifecycleDetails: string;
  /** Output only. The lifecycle state of the backup. */
  lifecycleState: AutonomousDatabaseBackupProperties_State;
  /** Output only. The backup size in terabytes. */
  sizeTb: number;
  /** Output only. Timestamp until when the backup will be available. */
  availableTillTime:
    | Date
    | undefined;
  /** Output only. The date and time the backup completed. */
  endTime:
    | Date
    | undefined;
  /** Output only. The date and time the backup started. */
  startTime:
    | Date
    | undefined;
  /** Output only. The type of the backup. */
  type: AutonomousDatabaseBackupProperties_Type;
  /** Optional. The OCID of the vault. */
  vaultId: string;
}

/** // The various lifecycle states of the Autonomous Database Backup. */
export enum AutonomousDatabaseBackupProperties_State {
  /** STATE_UNSPECIFIED - Default unspecified value. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - Indicates that the resource is in creating state. */
  CREATING = 1,
  /** ACTIVE - Indicates that the resource is in active state. */
  ACTIVE = 2,
  /** DELETING - Indicates that the resource is in deleting state. */
  DELETING = 3,
  /** DELETED - Indicates that the resource is in deleted state. */
  DELETED = 4,
  /** FAILED - Indicates that the resource is in failed state. */
  FAILED = 6,
  /** UPDATING - Indicates that the resource is in updating state. */
  UPDATING = 7,
  UNRECOGNIZED = -1,
}

export function autonomousDatabaseBackupProperties_StateFromJSON(
  object: any,
): AutonomousDatabaseBackupProperties_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return AutonomousDatabaseBackupProperties_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return AutonomousDatabaseBackupProperties_State.CREATING;
    case 2:
    case "ACTIVE":
      return AutonomousDatabaseBackupProperties_State.ACTIVE;
    case 3:
    case "DELETING":
      return AutonomousDatabaseBackupProperties_State.DELETING;
    case 4:
    case "DELETED":
      return AutonomousDatabaseBackupProperties_State.DELETED;
    case 6:
    case "FAILED":
      return AutonomousDatabaseBackupProperties_State.FAILED;
    case 7:
    case "UPDATING":
      return AutonomousDatabaseBackupProperties_State.UPDATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AutonomousDatabaseBackupProperties_State.UNRECOGNIZED;
  }
}

export function autonomousDatabaseBackupProperties_StateToJSON(
  object: AutonomousDatabaseBackupProperties_State,
): string {
  switch (object) {
    case AutonomousDatabaseBackupProperties_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case AutonomousDatabaseBackupProperties_State.CREATING:
      return "CREATING";
    case AutonomousDatabaseBackupProperties_State.ACTIVE:
      return "ACTIVE";
    case AutonomousDatabaseBackupProperties_State.DELETING:
      return "DELETING";
    case AutonomousDatabaseBackupProperties_State.DELETED:
      return "DELETED";
    case AutonomousDatabaseBackupProperties_State.FAILED:
      return "FAILED";
    case AutonomousDatabaseBackupProperties_State.UPDATING:
      return "UPDATING";
    case AutonomousDatabaseBackupProperties_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The type of the backup. */
export enum AutonomousDatabaseBackupProperties_Type {
  /** TYPE_UNSPECIFIED - Default unspecified value. */
  TYPE_UNSPECIFIED = 0,
  /** INCREMENTAL - Incremental backups. */
  INCREMENTAL = 1,
  /** FULL - Full backups. */
  FULL = 2,
  /** LONG_TERM - Long term backups. */
  LONG_TERM = 3,
  UNRECOGNIZED = -1,
}

export function autonomousDatabaseBackupProperties_TypeFromJSON(object: any): AutonomousDatabaseBackupProperties_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return AutonomousDatabaseBackupProperties_Type.TYPE_UNSPECIFIED;
    case 1:
    case "INCREMENTAL":
      return AutonomousDatabaseBackupProperties_Type.INCREMENTAL;
    case 2:
    case "FULL":
      return AutonomousDatabaseBackupProperties_Type.FULL;
    case 3:
    case "LONG_TERM":
      return AutonomousDatabaseBackupProperties_Type.LONG_TERM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AutonomousDatabaseBackupProperties_Type.UNRECOGNIZED;
  }
}

export function autonomousDatabaseBackupProperties_TypeToJSON(object: AutonomousDatabaseBackupProperties_Type): string {
  switch (object) {
    case AutonomousDatabaseBackupProperties_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case AutonomousDatabaseBackupProperties_Type.INCREMENTAL:
      return "INCREMENTAL";
    case AutonomousDatabaseBackupProperties_Type.FULL:
      return "FULL";
    case AutonomousDatabaseBackupProperties_Type.LONG_TERM:
      return "LONG_TERM";
    case AutonomousDatabaseBackupProperties_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAutonomousDatabaseBackup(): AutonomousDatabaseBackup {
  return { name: "", autonomousDatabase: "", displayName: "", properties: undefined, labels: {} };
}

export const AutonomousDatabaseBackup: MessageFns<AutonomousDatabaseBackup> = {
  encode(message: AutonomousDatabaseBackup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.autonomousDatabase !== "") {
      writer.uint32(18).string(message.autonomousDatabase);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.properties !== undefined) {
      AutonomousDatabaseBackupProperties.encode(message.properties, writer.uint32(34).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      AutonomousDatabaseBackup_LabelsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutonomousDatabaseBackup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutonomousDatabaseBackup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.autonomousDatabase = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.properties = AutonomousDatabaseBackupProperties.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = AutonomousDatabaseBackup_LabelsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.labels[entry5.key] = entry5.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutonomousDatabaseBackup {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      autonomousDatabase: isSet(object.autonomousDatabase) ? globalThis.String(object.autonomousDatabase) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      properties: isSet(object.properties) ? AutonomousDatabaseBackupProperties.fromJSON(object.properties) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: AutonomousDatabaseBackup): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.autonomousDatabase !== "") {
      obj.autonomousDatabase = message.autonomousDatabase;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.properties !== undefined) {
      obj.properties = AutonomousDatabaseBackupProperties.toJSON(message.properties);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<AutonomousDatabaseBackup>): AutonomousDatabaseBackup {
    return AutonomousDatabaseBackup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutonomousDatabaseBackup>): AutonomousDatabaseBackup {
    const message = createBaseAutonomousDatabaseBackup();
    message.name = object.name ?? "";
    message.autonomousDatabase = object.autonomousDatabase ?? "";
    message.displayName = object.displayName ?? "";
    message.properties = (object.properties !== undefined && object.properties !== null)
      ? AutonomousDatabaseBackupProperties.fromPartial(object.properties)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseAutonomousDatabaseBackup_LabelsEntry(): AutonomousDatabaseBackup_LabelsEntry {
  return { key: "", value: "" };
}

export const AutonomousDatabaseBackup_LabelsEntry: MessageFns<AutonomousDatabaseBackup_LabelsEntry> = {
  encode(message: AutonomousDatabaseBackup_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutonomousDatabaseBackup_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutonomousDatabaseBackup_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutonomousDatabaseBackup_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AutonomousDatabaseBackup_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<AutonomousDatabaseBackup_LabelsEntry>): AutonomousDatabaseBackup_LabelsEntry {
    return AutonomousDatabaseBackup_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutonomousDatabaseBackup_LabelsEntry>): AutonomousDatabaseBackup_LabelsEntry {
    const message = createBaseAutonomousDatabaseBackup_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAutonomousDatabaseBackupProperties(): AutonomousDatabaseBackupProperties {
  return {
    ocid: "",
    retentionPeriodDays: 0,
    compartmentId: "",
    databaseSizeTb: 0,
    dbVersion: "",
    isLongTermBackup: false,
    isAutomaticBackup: false,
    isRestorable: false,
    keyStoreId: "",
    keyStoreWallet: "",
    kmsKeyId: "",
    kmsKeyVersionId: "",
    lifecycleDetails: "",
    lifecycleState: 0,
    sizeTb: 0,
    availableTillTime: undefined,
    endTime: undefined,
    startTime: undefined,
    type: 0,
    vaultId: "",
  };
}

export const AutonomousDatabaseBackupProperties: MessageFns<AutonomousDatabaseBackupProperties> = {
  encode(message: AutonomousDatabaseBackupProperties, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ocid !== "") {
      writer.uint32(10).string(message.ocid);
    }
    if (message.retentionPeriodDays !== 0) {
      writer.uint32(16).int32(message.retentionPeriodDays);
    }
    if (message.compartmentId !== "") {
      writer.uint32(26).string(message.compartmentId);
    }
    if (message.databaseSizeTb !== 0) {
      writer.uint32(37).float(message.databaseSizeTb);
    }
    if (message.dbVersion !== "") {
      writer.uint32(42).string(message.dbVersion);
    }
    if (message.isLongTermBackup !== false) {
      writer.uint32(48).bool(message.isLongTermBackup);
    }
    if (message.isAutomaticBackup !== false) {
      writer.uint32(56).bool(message.isAutomaticBackup);
    }
    if (message.isRestorable !== false) {
      writer.uint32(64).bool(message.isRestorable);
    }
    if (message.keyStoreId !== "") {
      writer.uint32(74).string(message.keyStoreId);
    }
    if (message.keyStoreWallet !== "") {
      writer.uint32(82).string(message.keyStoreWallet);
    }
    if (message.kmsKeyId !== "") {
      writer.uint32(90).string(message.kmsKeyId);
    }
    if (message.kmsKeyVersionId !== "") {
      writer.uint32(98).string(message.kmsKeyVersionId);
    }
    if (message.lifecycleDetails !== "") {
      writer.uint32(106).string(message.lifecycleDetails);
    }
    if (message.lifecycleState !== 0) {
      writer.uint32(112).int32(message.lifecycleState);
    }
    if (message.sizeTb !== 0) {
      writer.uint32(125).float(message.sizeTb);
    }
    if (message.availableTillTime !== undefined) {
      Timestamp.encode(toTimestamp(message.availableTillTime), writer.uint32(130).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(138).fork()).join();
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(146).fork()).join();
    }
    if (message.type !== 0) {
      writer.uint32(152).int32(message.type);
    }
    if (message.vaultId !== "") {
      writer.uint32(162).string(message.vaultId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutonomousDatabaseBackupProperties {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutonomousDatabaseBackupProperties();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ocid = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.retentionPeriodDays = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.compartmentId = reader.string();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.databaseSizeTb = reader.float();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.dbVersion = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.isLongTermBackup = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.isAutomaticBackup = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.isRestorable = reader.bool();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.keyStoreId = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.keyStoreWallet = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.kmsKeyId = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.kmsKeyVersionId = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.lifecycleDetails = reader.string();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.lifecycleState = reader.int32() as any;
          continue;
        case 15:
          if (tag !== 125) {
            break;
          }

          message.sizeTb = reader.float();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.availableTillTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.vaultId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutonomousDatabaseBackupProperties {
    return {
      ocid: isSet(object.ocid) ? globalThis.String(object.ocid) : "",
      retentionPeriodDays: isSet(object.retentionPeriodDays) ? globalThis.Number(object.retentionPeriodDays) : 0,
      compartmentId: isSet(object.compartmentId) ? globalThis.String(object.compartmentId) : "",
      databaseSizeTb: isSet(object.databaseSizeTb) ? globalThis.Number(object.databaseSizeTb) : 0,
      dbVersion: isSet(object.dbVersion) ? globalThis.String(object.dbVersion) : "",
      isLongTermBackup: isSet(object.isLongTermBackup) ? globalThis.Boolean(object.isLongTermBackup) : false,
      isAutomaticBackup: isSet(object.isAutomaticBackup) ? globalThis.Boolean(object.isAutomaticBackup) : false,
      isRestorable: isSet(object.isRestorable) ? globalThis.Boolean(object.isRestorable) : false,
      keyStoreId: isSet(object.keyStoreId) ? globalThis.String(object.keyStoreId) : "",
      keyStoreWallet: isSet(object.keyStoreWallet) ? globalThis.String(object.keyStoreWallet) : "",
      kmsKeyId: isSet(object.kmsKeyId) ? globalThis.String(object.kmsKeyId) : "",
      kmsKeyVersionId: isSet(object.kmsKeyVersionId) ? globalThis.String(object.kmsKeyVersionId) : "",
      lifecycleDetails: isSet(object.lifecycleDetails) ? globalThis.String(object.lifecycleDetails) : "",
      lifecycleState: isSet(object.lifecycleState)
        ? autonomousDatabaseBackupProperties_StateFromJSON(object.lifecycleState)
        : 0,
      sizeTb: isSet(object.sizeTb) ? globalThis.Number(object.sizeTb) : 0,
      availableTillTime: isSet(object.availableTillTime) ? fromJsonTimestamp(object.availableTillTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      type: isSet(object.type) ? autonomousDatabaseBackupProperties_TypeFromJSON(object.type) : 0,
      vaultId: isSet(object.vaultId) ? globalThis.String(object.vaultId) : "",
    };
  },

  toJSON(message: AutonomousDatabaseBackupProperties): unknown {
    const obj: any = {};
    if (message.ocid !== "") {
      obj.ocid = message.ocid;
    }
    if (message.retentionPeriodDays !== 0) {
      obj.retentionPeriodDays = Math.round(message.retentionPeriodDays);
    }
    if (message.compartmentId !== "") {
      obj.compartmentId = message.compartmentId;
    }
    if (message.databaseSizeTb !== 0) {
      obj.databaseSizeTb = message.databaseSizeTb;
    }
    if (message.dbVersion !== "") {
      obj.dbVersion = message.dbVersion;
    }
    if (message.isLongTermBackup !== false) {
      obj.isLongTermBackup = message.isLongTermBackup;
    }
    if (message.isAutomaticBackup !== false) {
      obj.isAutomaticBackup = message.isAutomaticBackup;
    }
    if (message.isRestorable !== false) {
      obj.isRestorable = message.isRestorable;
    }
    if (message.keyStoreId !== "") {
      obj.keyStoreId = message.keyStoreId;
    }
    if (message.keyStoreWallet !== "") {
      obj.keyStoreWallet = message.keyStoreWallet;
    }
    if (message.kmsKeyId !== "") {
      obj.kmsKeyId = message.kmsKeyId;
    }
    if (message.kmsKeyVersionId !== "") {
      obj.kmsKeyVersionId = message.kmsKeyVersionId;
    }
    if (message.lifecycleDetails !== "") {
      obj.lifecycleDetails = message.lifecycleDetails;
    }
    if (message.lifecycleState !== 0) {
      obj.lifecycleState = autonomousDatabaseBackupProperties_StateToJSON(message.lifecycleState);
    }
    if (message.sizeTb !== 0) {
      obj.sizeTb = message.sizeTb;
    }
    if (message.availableTillTime !== undefined) {
      obj.availableTillTime = message.availableTillTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.type !== 0) {
      obj.type = autonomousDatabaseBackupProperties_TypeToJSON(message.type);
    }
    if (message.vaultId !== "") {
      obj.vaultId = message.vaultId;
    }
    return obj;
  },

  create(base?: DeepPartial<AutonomousDatabaseBackupProperties>): AutonomousDatabaseBackupProperties {
    return AutonomousDatabaseBackupProperties.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutonomousDatabaseBackupProperties>): AutonomousDatabaseBackupProperties {
    const message = createBaseAutonomousDatabaseBackupProperties();
    message.ocid = object.ocid ?? "";
    message.retentionPeriodDays = object.retentionPeriodDays ?? 0;
    message.compartmentId = object.compartmentId ?? "";
    message.databaseSizeTb = object.databaseSizeTb ?? 0;
    message.dbVersion = object.dbVersion ?? "";
    message.isLongTermBackup = object.isLongTermBackup ?? false;
    message.isAutomaticBackup = object.isAutomaticBackup ?? false;
    message.isRestorable = object.isRestorable ?? false;
    message.keyStoreId = object.keyStoreId ?? "";
    message.keyStoreWallet = object.keyStoreWallet ?? "";
    message.kmsKeyId = object.kmsKeyId ?? "";
    message.kmsKeyVersionId = object.kmsKeyVersionId ?? "";
    message.lifecycleDetails = object.lifecycleDetails ?? "";
    message.lifecycleState = object.lifecycleState ?? 0;
    message.sizeTb = object.sizeTb ?? 0;
    message.availableTillTime = object.availableTillTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.startTime = object.startTime ?? undefined;
    message.type = object.type ?? 0;
    message.vaultId = object.vaultId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
