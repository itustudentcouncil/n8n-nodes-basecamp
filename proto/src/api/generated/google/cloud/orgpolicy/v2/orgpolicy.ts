// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/orgpolicy/v2/orgpolicy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Expr } from "../../../type/expr.js";
import { Constraint, CustomConstraint } from "./constraint.js";

export const protobufPackage = "google.cloud.orgpolicy.v2";

/**
 * Defines an organization policy which is used to specify constraints
 * for configurations of Google Cloud resources.
 */
export interface Policy {
  /**
   * Immutable. The resource name of the policy. Must be one of the following
   * forms, where `constraint_name` is the name of the constraint which this
   * policy configures:
   *
   * * `projects/{project_number}/policies/{constraint_name}`
   * * `folders/{folder_id}/policies/{constraint_name}`
   * * `organizations/{organization_id}/policies/{constraint_name}`
   *
   * For example, `projects/123/policies/compute.disableSerialPortAccess`.
   *
   * Note: `projects/{project_id}/policies/{constraint_name}` is also an
   * acceptable name for API requests, but responses will return the name using
   * the equivalent project number.
   */
  name: string;
  /** Basic information about the Organization Policy. */
  spec:
    | PolicySpec
    | undefined;
  /**
   * Deprecated.
   *
   * @deprecated
   */
  alternate:
    | AlternatePolicySpec
    | undefined;
  /**
   * Dry-run policy.
   * Audit-only policy, can be used to monitor how the policy would have
   * impacted the existing and future resources if it's enforced.
   */
  dryRunSpec:
    | PolicySpec
    | undefined;
  /**
   * Optional. An opaque tag indicating the current state of the policy, used
   * for concurrency control. This 'etag' is computed by the server based on the
   * value of other fields, and may be sent on update and delete requests to
   * ensure the client has an up-to-date value before proceeding.
   */
  etag: string;
}

/**
 * Similar to PolicySpec but with an extra 'launch' field for launch reference.
 * The PolicySpec here is specific for dry-run/darklaunch.
 */
export interface AlternatePolicySpec {
  /**
   * Reference to the launch that will be used while audit logging and to
   * control the launch.
   * Should be set only in the alternate policy.
   */
  launch: string;
  /** Specify constraint for configurations of Google Cloud resources. */
  spec: PolicySpec | undefined;
}

/**
 * Defines a Google Cloud policy specification which is used to specify
 * constraints for configurations of Google Cloud resources.
 */
export interface PolicySpec {
  /**
   * An opaque tag indicating the current version of the policySpec, used for
   * concurrency control.
   *
   * This field is ignored if used in a `CreatePolicy` request.
   *
   * When the policy is returned from either a `GetPolicy` or a
   * `ListPolicies` request, this `etag` indicates the version of the
   * current policySpec to use when executing a read-modify-write loop.
   *
   * When the policy is returned from a `GetEffectivePolicy` request, the
   * `etag` will be unset.
   */
  etag: string;
  /**
   * Output only. The time stamp this was previously updated. This
   * represents the last time a call to `CreatePolicy` or `UpdatePolicy` was
   * made for that policy.
   */
  updateTime:
    | Date
    | undefined;
  /**
   * In policies for boolean constraints, the following requirements apply:
   *
   *   - There must be one and only one policy rule where condition is unset.
   *   - Boolean policy rules with conditions must set `enforced` to the
   *     opposite of the policy rule without a condition.
   *   - During policy evaluation, policy rules with conditions that are
   *     true for a target resource take precedence.
   */
  rules: PolicySpec_PolicyRule[];
  /**
   * Determines the inheritance behavior for this policy.
   *
   * If `inherit_from_parent` is true, policy rules set higher up in the
   * hierarchy (up to the closest root) are inherited and present in the
   * effective policy. If it is false, then no rules are inherited, and this
   * policy becomes the new root for evaluation.
   * This field can be set only for policies which configure list constraints.
   */
  inheritFromParent: boolean;
  /**
   * Ignores policies set above this resource and restores the
   * `constraint_default` enforcement behavior of the specific constraint at
   * this resource.
   * This field can be set in policies for either list or boolean
   * constraints. If set, `rules` must be empty and `inherit_from_parent`
   * must be set to false.
   */
  reset: boolean;
}

/** A rule used to express this policy. */
export interface PolicySpec_PolicyRule {
  /**
   * List of values to be used for this policy rule. This field can be set
   * only in policies for list constraints.
   */
  values?:
    | PolicySpec_PolicyRule_StringValues
    | undefined;
  /**
   * Setting this to true means that all values are allowed. This field can
   * be set only in policies for list constraints.
   */
  allowAll?:
    | boolean
    | undefined;
  /**
   * Setting this to true means that all values are denied. This field can
   * be set only in policies for list constraints.
   */
  denyAll?:
    | boolean
    | undefined;
  /**
   * If `true`, then the policy is enforced. If `false`, then any
   * configuration is acceptable.
   * This field can be set only in policies for boolean constraints.
   */
  enforce?:
    | boolean
    | undefined;
  /**
   * A condition which determines whether this rule is used
   * in the evaluation of the policy. When set, the `expression` field in
   * the `Expr' must include from 1 to 10 subexpressions, joined by the "||"
   * or "&&" operators. Each subexpression must be of the form
   * "resource.matchTag('<ORG_ID>/tag_key_short_name,
   * 'tag_value_short_name')". or "resource.matchTagId('tagKeys/key_id',
   * 'tagValues/value_id')". where key_name and value_name are the resource
   * names for Label Keys and Values. These names are available from the Tag
   * Manager Service. An example expression is:
   * "resource.matchTag('123456789/environment,
   * 'prod')". or "resource.matchTagId('tagKeys/123',
   * 'tagValues/456')".
   */
  condition: Expr | undefined;
}

/**
 * A message that holds specific allowed and denied values.
 * This message can define specific values and subtrees of the Resource
 * Manager resource hierarchy (`Organizations`, `Folders`, `Projects`) that
 * are allowed or denied. This is achieved by using the `under:` and
 * optional `is:` prefixes.
 * The `under:` prefix is used to denote resource subtree values.
 * The `is:` prefix is used to denote specific values, and is required only
 * if the value contains a ":". Values prefixed with "is:" are treated the
 * same as values with no prefix.
 * Ancestry subtrees must be in one of the following formats:
 *
 * - `projects/<project-id>` (for example, `projects/tokyo-rain-123`)
 * - `folders/<folder-id>` (for example, `folders/1234`)
 * - `organizations/<organization-id>` (for example, `organizations/1234`)
 *
 * The `supports_under` field of the associated `Constraint`  defines
 * whether ancestry prefixes can be used.
 */
export interface PolicySpec_PolicyRule_StringValues {
  /** List of values allowed at this resource. */
  allowedValues: string[];
  /** List of values denied at this resource. */
  deniedValues: string[];
}

/**
 * The request sent to the [ListConstraints]
 * [google.cloud.orgpolicy.v2.OrgPolicy.ListConstraints] method.
 */
export interface ListConstraintsRequest {
  /**
   * Required. The Google Cloud resource that parents the constraint. Must be in
   * one of the following forms:
   *
   * * `projects/{project_number}`
   * * `projects/{project_id}`
   * * `folders/{folder_id}`
   * * `organizations/{organization_id}`
   */
  parent: string;
  /**
   * Size of the pages to be returned. This is currently unsupported and will
   * be ignored. The server may at any point start using this field to limit
   * page size.
   */
  pageSize: number;
  /**
   * Page token used to retrieve the next page. This is currently unsupported
   * and will be ignored. The server may at any point start using this field.
   */
  pageToken: string;
}

/**
 * The response returned from the [ListConstraints]
 * [google.cloud.orgpolicy.v2.OrgPolicy.ListConstraints] method.
 */
export interface ListConstraintsResponse {
  /** The collection of constraints that are available on the targeted resource. */
  constraints: Constraint[];
  /** Page token used to retrieve the next page. This is currently not used. */
  nextPageToken: string;
}

/**
 * The request sent to the [ListPolicies]
 * [google.cloud.orgpolicy.v2.OrgPolicy.ListPolicies] method.
 */
export interface ListPoliciesRequest {
  /**
   * Required. The target Google Cloud resource that parents the set of
   * constraints and policies that will be returned from this call. Must be in
   * one of the following forms:
   *
   * * `projects/{project_number}`
   * * `projects/{project_id}`
   * * `folders/{folder_id}`
   * * `organizations/{organization_id}`
   */
  parent: string;
  /**
   * Size of the pages to be returned. This is currently unsupported and will
   * be ignored. The server may at any point start using this field to limit
   * page size.
   */
  pageSize: number;
  /**
   * Page token used to retrieve the next page. This is currently unsupported
   * and will be ignored. The server may at any point start using this field.
   */
  pageToken: string;
}

/**
 * The response returned from the [ListPolicies]
 * [google.cloud.orgpolicy.v2.OrgPolicy.ListPolicies] method. It will be empty
 * if no policies are set on the resource.
 */
export interface ListPoliciesResponse {
  /**
   * All policies that exist on the resource. It will be empty if no
   * policies are set.
   */
  policies: Policy[];
  /**
   * Page token used to retrieve the next page. This is currently not used, but
   * the server may at any point start supplying a valid token.
   */
  nextPageToken: string;
}

/**
 * The request sent to the [GetPolicy]
 * [google.cloud.orgpolicy.v2.OrgPolicy.GetPolicy] method.
 */
export interface GetPolicyRequest {
  /**
   * Required. Resource name of the policy. See
   * [Policy][google.cloud.orgpolicy.v2.Policy] for naming requirements.
   */
  name: string;
}

/**
 * The request sent to the [GetEffectivePolicy]
 * [google.cloud.orgpolicy.v2.OrgPolicy.GetEffectivePolicy] method.
 */
export interface GetEffectivePolicyRequest {
  /**
   * Required. The effective policy to compute. See
   * [Policy][google.cloud.orgpolicy.v2.Policy] for naming requirements.
   */
  name: string;
}

/**
 * The request sent to the [CreatePolicyRequest]
 * [google.cloud.orgpolicy.v2.OrgPolicy.CreatePolicy] method.
 */
export interface CreatePolicyRequest {
  /**
   * Required. The Google Cloud resource that will parent the new policy. Must
   * be in one of the following forms:
   *
   * * `projects/{project_number}`
   * * `projects/{project_id}`
   * * `folders/{folder_id}`
   * * `organizations/{organization_id}`
   */
  parent: string;
  /** Required. Policy to create. */
  policy: Policy | undefined;
}

/**
 * The request sent to the [UpdatePolicyRequest]
 * [google.cloud.orgpolicy.v2.OrgPolicy.UpdatePolicy] method.
 */
export interface UpdatePolicyRequest {
  /** Required. Policy to update. */
  policy:
    | Policy
    | undefined;
  /**
   * Field mask used to specify the fields to be overwritten in the policy
   * by the set. The fields specified in the update_mask are relative to the
   * policy, not the full request.
   */
  updateMask: string[] | undefined;
}

/**
 * The request sent to the [DeletePolicy]
 * [google.cloud.orgpolicy.v2.OrgPolicy.DeletePolicy] method.
 */
export interface DeletePolicyRequest {
  /**
   * Required. Name of the policy to delete.
   * See the policy entry for naming rules.
   */
  name: string;
  /**
   * Optional. The current etag of policy. If an etag is provided and does not
   * match the current etag of the policy, deletion will be blocked and an
   * ABORTED error will be returned.
   */
  etag: string;
}

/**
 * The request sent to the [CreateCustomConstraintRequest]
 * [google.cloud.orgpolicy.v2.OrgPolicy.CreateCustomConstraint] method.
 */
export interface CreateCustomConstraintRequest {
  /**
   * Required. Must be in the following form:
   *
   * * `organizations/{organization_id}`
   */
  parent: string;
  /** Required. Custom constraint to create. */
  customConstraint: CustomConstraint | undefined;
}

/**
 * The request sent to the [GetCustomConstraint]
 * [google.cloud.orgpolicy.v2.OrgPolicy.GetCustomConstraint] method.
 */
export interface GetCustomConstraintRequest {
  /**
   * Required. Resource name of the custom constraint. See the custom constraint
   * entry for naming requirements.
   */
  name: string;
}

/**
 * The request sent to the [ListCustomConstraints]
 * [google.cloud.orgpolicy.v2.OrgPolicy.ListCustomConstraints] method.
 */
export interface ListCustomConstraintsRequest {
  /**
   * Required. The target Google Cloud resource that parents the set of custom
   * constraints that will be returned from this call. Must be in one of the
   * following forms:
   *
   * * `organizations/{organization_id}`
   */
  parent: string;
  /**
   * Size of the pages to be returned. This is currently unsupported and will
   * be ignored. The server may at any point start using this field to limit
   * page size.
   */
  pageSize: number;
  /**
   * Page token used to retrieve the next page. This is currently unsupported
   * and will be ignored. The server may at any point start using this field.
   */
  pageToken: string;
}

/**
 * The response returned from the [ListCustomConstraints]
 * [google.cloud.orgpolicy.v2.OrgPolicy.ListCustomConstraints] method. It will
 * be empty if no custom constraints are set on the organization resource.
 */
export interface ListCustomConstraintsResponse {
  /**
   * All custom constraints that exist on the organization resource. It will be
   * empty if no custom constraints are set.
   */
  customConstraints: CustomConstraint[];
  /**
   * Page token used to retrieve the next page. This is currently not used, but
   * the server may at any point start supplying a valid token.
   */
  nextPageToken: string;
}

/**
 * The request sent to the [UpdateCustomConstraintRequest]
 * [google.cloud.orgpolicy.v2.OrgPolicy.UpdateCustomConstraint] method.
 */
export interface UpdateCustomConstraintRequest {
  /** Required. `CustomConstraint` to update. */
  customConstraint: CustomConstraint | undefined;
}

/**
 * The request sent to the [DeleteCustomConstraint]
 * [google.cloud.orgpolicy.v2.OrgPolicy.DeleteCustomConstraint] method.
 */
export interface DeleteCustomConstraintRequest {
  /**
   * Required. Name of the custom constraint to delete.
   * See the custom constraint entry for naming rules.
   */
  name: string;
}

function createBasePolicy(): Policy {
  return { name: "", spec: undefined, alternate: undefined, dryRunSpec: undefined, etag: "" };
}

export const Policy: MessageFns<Policy> = {
  encode(message: Policy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.spec !== undefined) {
      PolicySpec.encode(message.spec, writer.uint32(18).fork()).join();
    }
    if (message.alternate !== undefined) {
      AlternatePolicySpec.encode(message.alternate, writer.uint32(26).fork()).join();
    }
    if (message.dryRunSpec !== undefined) {
      PolicySpec.encode(message.dryRunSpec, writer.uint32(34).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(42).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Policy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.spec = PolicySpec.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.alternate = AlternatePolicySpec.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dryRunSpec = PolicySpec.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Policy {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      spec: isSet(object.spec) ? PolicySpec.fromJSON(object.spec) : undefined,
      alternate: isSet(object.alternate) ? AlternatePolicySpec.fromJSON(object.alternate) : undefined,
      dryRunSpec: isSet(object.dryRunSpec) ? PolicySpec.fromJSON(object.dryRunSpec) : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: Policy): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.spec !== undefined) {
      obj.spec = PolicySpec.toJSON(message.spec);
    }
    if (message.alternate !== undefined) {
      obj.alternate = AlternatePolicySpec.toJSON(message.alternate);
    }
    if (message.dryRunSpec !== undefined) {
      obj.dryRunSpec = PolicySpec.toJSON(message.dryRunSpec);
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<Policy>): Policy {
    return Policy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Policy>): Policy {
    const message = createBasePolicy();
    message.name = object.name ?? "";
    message.spec = (object.spec !== undefined && object.spec !== null)
      ? PolicySpec.fromPartial(object.spec)
      : undefined;
    message.alternate = (object.alternate !== undefined && object.alternate !== null)
      ? AlternatePolicySpec.fromPartial(object.alternate)
      : undefined;
    message.dryRunSpec = (object.dryRunSpec !== undefined && object.dryRunSpec !== null)
      ? PolicySpec.fromPartial(object.dryRunSpec)
      : undefined;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseAlternatePolicySpec(): AlternatePolicySpec {
  return { launch: "", spec: undefined };
}

export const AlternatePolicySpec: MessageFns<AlternatePolicySpec> = {
  encode(message: AlternatePolicySpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.launch !== "") {
      writer.uint32(10).string(message.launch);
    }
    if (message.spec !== undefined) {
      PolicySpec.encode(message.spec, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AlternatePolicySpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlternatePolicySpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.launch = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.spec = PolicySpec.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlternatePolicySpec {
    return {
      launch: isSet(object.launch) ? globalThis.String(object.launch) : "",
      spec: isSet(object.spec) ? PolicySpec.fromJSON(object.spec) : undefined,
    };
  },

  toJSON(message: AlternatePolicySpec): unknown {
    const obj: any = {};
    if (message.launch !== "") {
      obj.launch = message.launch;
    }
    if (message.spec !== undefined) {
      obj.spec = PolicySpec.toJSON(message.spec);
    }
    return obj;
  },

  create(base?: DeepPartial<AlternatePolicySpec>): AlternatePolicySpec {
    return AlternatePolicySpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AlternatePolicySpec>): AlternatePolicySpec {
    const message = createBaseAlternatePolicySpec();
    message.launch = object.launch ?? "";
    message.spec = (object.spec !== undefined && object.spec !== null)
      ? PolicySpec.fromPartial(object.spec)
      : undefined;
    return message;
  },
};

function createBasePolicySpec(): PolicySpec {
  return { etag: "", updateTime: undefined, rules: [], inheritFromParent: false, reset: false };
}

export const PolicySpec: MessageFns<PolicySpec> = {
  encode(message: PolicySpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.etag !== "") {
      writer.uint32(10).string(message.etag);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    for (const v of message.rules) {
      PolicySpec_PolicyRule.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.inheritFromParent !== false) {
      writer.uint32(32).bool(message.inheritFromParent);
    }
    if (message.reset !== false) {
      writer.uint32(40).bool(message.reset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PolicySpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicySpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rules.push(PolicySpec_PolicyRule.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.inheritFromParent = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.reset = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PolicySpec {
    return {
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      rules: globalThis.Array.isArray(object?.rules)
        ? object.rules.map((e: any) => PolicySpec_PolicyRule.fromJSON(e))
        : [],
      inheritFromParent: isSet(object.inheritFromParent) ? globalThis.Boolean(object.inheritFromParent) : false,
      reset: isSet(object.reset) ? globalThis.Boolean(object.reset) : false,
    };
  },

  toJSON(message: PolicySpec): unknown {
    const obj: any = {};
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.rules?.length) {
      obj.rules = message.rules.map((e) => PolicySpec_PolicyRule.toJSON(e));
    }
    if (message.inheritFromParent !== false) {
      obj.inheritFromParent = message.inheritFromParent;
    }
    if (message.reset !== false) {
      obj.reset = message.reset;
    }
    return obj;
  },

  create(base?: DeepPartial<PolicySpec>): PolicySpec {
    return PolicySpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PolicySpec>): PolicySpec {
    const message = createBasePolicySpec();
    message.etag = object.etag ?? "";
    message.updateTime = object.updateTime ?? undefined;
    message.rules = object.rules?.map((e) => PolicySpec_PolicyRule.fromPartial(e)) || [];
    message.inheritFromParent = object.inheritFromParent ?? false;
    message.reset = object.reset ?? false;
    return message;
  },
};

function createBasePolicySpec_PolicyRule(): PolicySpec_PolicyRule {
  return { values: undefined, allowAll: undefined, denyAll: undefined, enforce: undefined, condition: undefined };
}

export const PolicySpec_PolicyRule: MessageFns<PolicySpec_PolicyRule> = {
  encode(message: PolicySpec_PolicyRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.values !== undefined) {
      PolicySpec_PolicyRule_StringValues.encode(message.values, writer.uint32(10).fork()).join();
    }
    if (message.allowAll !== undefined) {
      writer.uint32(16).bool(message.allowAll);
    }
    if (message.denyAll !== undefined) {
      writer.uint32(24).bool(message.denyAll);
    }
    if (message.enforce !== undefined) {
      writer.uint32(32).bool(message.enforce);
    }
    if (message.condition !== undefined) {
      Expr.encode(message.condition, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PolicySpec_PolicyRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicySpec_PolicyRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.values = PolicySpec_PolicyRule_StringValues.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.allowAll = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.denyAll = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.enforce = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.condition = Expr.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PolicySpec_PolicyRule {
    return {
      values: isSet(object.values) ? PolicySpec_PolicyRule_StringValues.fromJSON(object.values) : undefined,
      allowAll: isSet(object.allowAll) ? globalThis.Boolean(object.allowAll) : undefined,
      denyAll: isSet(object.denyAll) ? globalThis.Boolean(object.denyAll) : undefined,
      enforce: isSet(object.enforce) ? globalThis.Boolean(object.enforce) : undefined,
      condition: isSet(object.condition) ? Expr.fromJSON(object.condition) : undefined,
    };
  },

  toJSON(message: PolicySpec_PolicyRule): unknown {
    const obj: any = {};
    if (message.values !== undefined) {
      obj.values = PolicySpec_PolicyRule_StringValues.toJSON(message.values);
    }
    if (message.allowAll !== undefined) {
      obj.allowAll = message.allowAll;
    }
    if (message.denyAll !== undefined) {
      obj.denyAll = message.denyAll;
    }
    if (message.enforce !== undefined) {
      obj.enforce = message.enforce;
    }
    if (message.condition !== undefined) {
      obj.condition = Expr.toJSON(message.condition);
    }
    return obj;
  },

  create(base?: DeepPartial<PolicySpec_PolicyRule>): PolicySpec_PolicyRule {
    return PolicySpec_PolicyRule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PolicySpec_PolicyRule>): PolicySpec_PolicyRule {
    const message = createBasePolicySpec_PolicyRule();
    message.values = (object.values !== undefined && object.values !== null)
      ? PolicySpec_PolicyRule_StringValues.fromPartial(object.values)
      : undefined;
    message.allowAll = object.allowAll ?? undefined;
    message.denyAll = object.denyAll ?? undefined;
    message.enforce = object.enforce ?? undefined;
    message.condition = (object.condition !== undefined && object.condition !== null)
      ? Expr.fromPartial(object.condition)
      : undefined;
    return message;
  },
};

function createBasePolicySpec_PolicyRule_StringValues(): PolicySpec_PolicyRule_StringValues {
  return { allowedValues: [], deniedValues: [] };
}

export const PolicySpec_PolicyRule_StringValues: MessageFns<PolicySpec_PolicyRule_StringValues> = {
  encode(message: PolicySpec_PolicyRule_StringValues, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.allowedValues) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.deniedValues) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PolicySpec_PolicyRule_StringValues {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicySpec_PolicyRule_StringValues();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.allowedValues.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deniedValues.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PolicySpec_PolicyRule_StringValues {
    return {
      allowedValues: globalThis.Array.isArray(object?.allowedValues)
        ? object.allowedValues.map((e: any) => globalThis.String(e))
        : [],
      deniedValues: globalThis.Array.isArray(object?.deniedValues)
        ? object.deniedValues.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: PolicySpec_PolicyRule_StringValues): unknown {
    const obj: any = {};
    if (message.allowedValues?.length) {
      obj.allowedValues = message.allowedValues;
    }
    if (message.deniedValues?.length) {
      obj.deniedValues = message.deniedValues;
    }
    return obj;
  },

  create(base?: DeepPartial<PolicySpec_PolicyRule_StringValues>): PolicySpec_PolicyRule_StringValues {
    return PolicySpec_PolicyRule_StringValues.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PolicySpec_PolicyRule_StringValues>): PolicySpec_PolicyRule_StringValues {
    const message = createBasePolicySpec_PolicyRule_StringValues();
    message.allowedValues = object.allowedValues?.map((e) => e) || [];
    message.deniedValues = object.deniedValues?.map((e) => e) || [];
    return message;
  },
};

function createBaseListConstraintsRequest(): ListConstraintsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListConstraintsRequest: MessageFns<ListConstraintsRequest> = {
  encode(message: ListConstraintsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConstraintsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConstraintsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConstraintsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListConstraintsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConstraintsRequest>): ListConstraintsRequest {
    return ListConstraintsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConstraintsRequest>): ListConstraintsRequest {
    const message = createBaseListConstraintsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListConstraintsResponse(): ListConstraintsResponse {
  return { constraints: [], nextPageToken: "" };
}

export const ListConstraintsResponse: MessageFns<ListConstraintsResponse> = {
  encode(message: ListConstraintsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.constraints) {
      Constraint.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConstraintsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConstraintsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.constraints.push(Constraint.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConstraintsResponse {
    return {
      constraints: globalThis.Array.isArray(object?.constraints)
        ? object.constraints.map((e: any) => Constraint.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListConstraintsResponse): unknown {
    const obj: any = {};
    if (message.constraints?.length) {
      obj.constraints = message.constraints.map((e) => Constraint.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConstraintsResponse>): ListConstraintsResponse {
    return ListConstraintsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConstraintsResponse>): ListConstraintsResponse {
    const message = createBaseListConstraintsResponse();
    message.constraints = object.constraints?.map((e) => Constraint.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListPoliciesRequest(): ListPoliciesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListPoliciesRequest: MessageFns<ListPoliciesRequest> = {
  encode(message: ListPoliciesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPoliciesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPoliciesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPoliciesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListPoliciesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPoliciesRequest>): ListPoliciesRequest {
    return ListPoliciesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPoliciesRequest>): ListPoliciesRequest {
    const message = createBaseListPoliciesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListPoliciesResponse(): ListPoliciesResponse {
  return { policies: [], nextPageToken: "" };
}

export const ListPoliciesResponse: MessageFns<ListPoliciesResponse> = {
  encode(message: ListPoliciesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.policies) {
      Policy.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPoliciesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPoliciesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policies.push(Policy.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPoliciesResponse {
    return {
      policies: globalThis.Array.isArray(object?.policies) ? object.policies.map((e: any) => Policy.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListPoliciesResponse): unknown {
    const obj: any = {};
    if (message.policies?.length) {
      obj.policies = message.policies.map((e) => Policy.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPoliciesResponse>): ListPoliciesResponse {
    return ListPoliciesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPoliciesResponse>): ListPoliciesResponse {
    const message = createBaseListPoliciesResponse();
    message.policies = object.policies?.map((e) => Policy.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetPolicyRequest(): GetPolicyRequest {
  return { name: "" };
}

export const GetPolicyRequest: MessageFns<GetPolicyRequest> = {
  encode(message: GetPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPolicyRequest>): GetPolicyRequest {
    return GetPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPolicyRequest>): GetPolicyRequest {
    const message = createBaseGetPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetEffectivePolicyRequest(): GetEffectivePolicyRequest {
  return { name: "" };
}

export const GetEffectivePolicyRequest: MessageFns<GetEffectivePolicyRequest> = {
  encode(message: GetEffectivePolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEffectivePolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEffectivePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEffectivePolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEffectivePolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEffectivePolicyRequest>): GetEffectivePolicyRequest {
    return GetEffectivePolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEffectivePolicyRequest>): GetEffectivePolicyRequest {
    const message = createBaseGetEffectivePolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreatePolicyRequest(): CreatePolicyRequest {
  return { parent: "", policy: undefined };
}

export const CreatePolicyRequest: MessageFns<CreatePolicyRequest> = {
  encode(message: CreatePolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.policy !== undefined) {
      Policy.encode(message.policy, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.policy = Policy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePolicyRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      policy: isSet(object.policy) ? Policy.fromJSON(object.policy) : undefined,
    };
  },

  toJSON(message: CreatePolicyRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.policy !== undefined) {
      obj.policy = Policy.toJSON(message.policy);
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePolicyRequest>): CreatePolicyRequest {
    return CreatePolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePolicyRequest>): CreatePolicyRequest {
    const message = createBaseCreatePolicyRequest();
    message.parent = object.parent ?? "";
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? Policy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdatePolicyRequest(): UpdatePolicyRequest {
  return { policy: undefined, updateMask: undefined };
}

export const UpdatePolicyRequest: MessageFns<UpdatePolicyRequest> = {
  encode(message: UpdatePolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      Policy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = Policy.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePolicyRequest {
    return {
      policy: isSet(object.policy) ? Policy.fromJSON(object.policy) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdatePolicyRequest): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = Policy.toJSON(message.policy);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePolicyRequest>): UpdatePolicyRequest {
    return UpdatePolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePolicyRequest>): UpdatePolicyRequest {
    const message = createBaseUpdatePolicyRequest();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? Policy.fromPartial(object.policy)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeletePolicyRequest(): DeletePolicyRequest {
  return { name: "", etag: "" };
}

export const DeletePolicyRequest: MessageFns<DeletePolicyRequest> = {
  encode(message: DeletePolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePolicyRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeletePolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePolicyRequest>): DeletePolicyRequest {
    return DeletePolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePolicyRequest>): DeletePolicyRequest {
    const message = createBaseDeletePolicyRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseCreateCustomConstraintRequest(): CreateCustomConstraintRequest {
  return { parent: "", customConstraint: undefined };
}

export const CreateCustomConstraintRequest: MessageFns<CreateCustomConstraintRequest> = {
  encode(message: CreateCustomConstraintRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.customConstraint !== undefined) {
      CustomConstraint.encode(message.customConstraint, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCustomConstraintRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCustomConstraintRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customConstraint = CustomConstraint.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCustomConstraintRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      customConstraint: isSet(object.customConstraint) ? CustomConstraint.fromJSON(object.customConstraint) : undefined,
    };
  },

  toJSON(message: CreateCustomConstraintRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.customConstraint !== undefined) {
      obj.customConstraint = CustomConstraint.toJSON(message.customConstraint);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCustomConstraintRequest>): CreateCustomConstraintRequest {
    return CreateCustomConstraintRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCustomConstraintRequest>): CreateCustomConstraintRequest {
    const message = createBaseCreateCustomConstraintRequest();
    message.parent = object.parent ?? "";
    message.customConstraint = (object.customConstraint !== undefined && object.customConstraint !== null)
      ? CustomConstraint.fromPartial(object.customConstraint)
      : undefined;
    return message;
  },
};

function createBaseGetCustomConstraintRequest(): GetCustomConstraintRequest {
  return { name: "" };
}

export const GetCustomConstraintRequest: MessageFns<GetCustomConstraintRequest> = {
  encode(message: GetCustomConstraintRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomConstraintRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomConstraintRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomConstraintRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCustomConstraintRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomConstraintRequest>): GetCustomConstraintRequest {
    return GetCustomConstraintRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomConstraintRequest>): GetCustomConstraintRequest {
    const message = createBaseGetCustomConstraintRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListCustomConstraintsRequest(): ListCustomConstraintsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListCustomConstraintsRequest: MessageFns<ListCustomConstraintsRequest> = {
  encode(message: ListCustomConstraintsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomConstraintsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomConstraintsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomConstraintsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListCustomConstraintsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomConstraintsRequest>): ListCustomConstraintsRequest {
    return ListCustomConstraintsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomConstraintsRequest>): ListCustomConstraintsRequest {
    const message = createBaseListCustomConstraintsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListCustomConstraintsResponse(): ListCustomConstraintsResponse {
  return { customConstraints: [], nextPageToken: "" };
}

export const ListCustomConstraintsResponse: MessageFns<ListCustomConstraintsResponse> = {
  encode(message: ListCustomConstraintsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.customConstraints) {
      CustomConstraint.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomConstraintsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomConstraintsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customConstraints.push(CustomConstraint.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomConstraintsResponse {
    return {
      customConstraints: globalThis.Array.isArray(object?.customConstraints)
        ? object.customConstraints.map((e: any) => CustomConstraint.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCustomConstraintsResponse): unknown {
    const obj: any = {};
    if (message.customConstraints?.length) {
      obj.customConstraints = message.customConstraints.map((e) => CustomConstraint.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomConstraintsResponse>): ListCustomConstraintsResponse {
    return ListCustomConstraintsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomConstraintsResponse>): ListCustomConstraintsResponse {
    const message = createBaseListCustomConstraintsResponse();
    message.customConstraints = object.customConstraints?.map((e) => CustomConstraint.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateCustomConstraintRequest(): UpdateCustomConstraintRequest {
  return { customConstraint: undefined };
}

export const UpdateCustomConstraintRequest: MessageFns<UpdateCustomConstraintRequest> = {
  encode(message: UpdateCustomConstraintRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customConstraint !== undefined) {
      CustomConstraint.encode(message.customConstraint, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCustomConstraintRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomConstraintRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customConstraint = CustomConstraint.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomConstraintRequest {
    return {
      customConstraint: isSet(object.customConstraint) ? CustomConstraint.fromJSON(object.customConstraint) : undefined,
    };
  },

  toJSON(message: UpdateCustomConstraintRequest): unknown {
    const obj: any = {};
    if (message.customConstraint !== undefined) {
      obj.customConstraint = CustomConstraint.toJSON(message.customConstraint);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCustomConstraintRequest>): UpdateCustomConstraintRequest {
    return UpdateCustomConstraintRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomConstraintRequest>): UpdateCustomConstraintRequest {
    const message = createBaseUpdateCustomConstraintRequest();
    message.customConstraint = (object.customConstraint !== undefined && object.customConstraint !== null)
      ? CustomConstraint.fromPartial(object.customConstraint)
      : undefined;
    return message;
  },
};

function createBaseDeleteCustomConstraintRequest(): DeleteCustomConstraintRequest {
  return { name: "" };
}

export const DeleteCustomConstraintRequest: MessageFns<DeleteCustomConstraintRequest> = {
  encode(message: DeleteCustomConstraintRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCustomConstraintRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCustomConstraintRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCustomConstraintRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteCustomConstraintRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteCustomConstraintRequest>): DeleteCustomConstraintRequest {
    return DeleteCustomConstraintRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCustomConstraintRequest>): DeleteCustomConstraintRequest {
    const message = createBaseDeleteCustomConstraintRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * An interface for managing organization policies.
 *
 * The Organization Policy Service provides a simple mechanism for
 * organizations to restrict the allowed configurations across their entire
 * resource hierarchy.
 *
 * You can use a policy to configure restrictions on resources. For
 * example, you can enforce a policy that restricts which Google
 * Cloud APIs can be activated in a certain part of your resource
 * hierarchy, or prevents serial port access to VM instances in a
 * particular folder.
 *
 * Policies are inherited down through the resource hierarchy. A policy
 * applied to a parent resource automatically applies to all its child resources
 * unless overridden with a policy lower in the hierarchy.
 *
 * A constraint defines an aspect of a resource's configuration that can be
 * controlled by an organization's policy administrator. Policies are a
 * collection of constraints that defines their allowable configuration on a
 * particular resource and its child resources.
 */
export type OrgPolicyDefinition = typeof OrgPolicyDefinition;
export const OrgPolicyDefinition = {
  name: "OrgPolicy",
  fullName: "google.cloud.orgpolicy.v2.OrgPolicy",
  methods: {
    /** Lists constraints that could be applied on the specified resource. */
    listConstraints: {
      name: "ListConstraints",
      requestType: ListConstraintsRequest,
      requestStream: false,
      responseType: ListConstraintsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              119,
              90,
              36,
              18,
              34,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              115,
              116,
              114,
              97,
              105,
              110,
              116,
              115,
              90,
              42,
              18,
              40,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              115,
              116,
              114,
              97,
              105,
              110,
              116,
              115,
              18,
              35,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              115,
              116,
              114,
              97,
              105,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves all of the policies that exist on a particular resource. */
    listPolicies: {
      name: "ListPolicies",
      requestType: ListPoliciesRequest,
      requestStream: false,
      responseType: ListPoliciesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              110,
              90,
              33,
              18,
              31,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              90,
              39,
              18,
              37,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              18,
              32,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets a policy on a resource.
     *
     * If no policy is set on the resource, `NOT_FOUND` is returned. The
     * `etag` value can be used with `UpdatePolicy()` to update a
     * policy during read-modify-write.
     */
    getPolicy: {
      name: "GetPolicy",
      requestType: GetPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              110,
              90,
              33,
              18,
              31,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              90,
              39,
              18,
              37,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              18,
              32,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the effective policy on a resource. This is the result of merging
     * policies in the resource hierarchy and evaluating conditions. The
     * returned policy will not have an `etag` or `condition` set because it is
     * an evaluated policy across multiple resources.
     * Subtrees of Resource Manager resource hierarchy with 'under:' prefix will
     * not be expanded.
     */
    getEffectivePolicy: {
      name: "GetEffectivePolicy",
      requestType: GetEffectivePolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              167,
              1,
              90,
              52,
              18,
              50,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              69,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              80,
              111,
              108,
              105,
              99,
              121,
              90,
              58,
              18,
              56,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              69,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              80,
              111,
              108,
              105,
              99,
              121,
              18,
              51,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              69,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a policy.
     *
     * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
     * constraint does not exist.
     * Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the
     * policy already exists on the given Google Cloud resource.
     */
    createPolicy: {
      name: "CreatePolicy",
      requestType: CreatePolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 112, 111, 108, 105, 99, 121])],
          578365826: [
            Buffer.from([
              134,
              1,
              58,
              6,
              112,
              111,
              108,
              105,
              99,
              121,
              90,
              41,
              58,
              6,
              112,
              111,
              108,
              105,
              99,
              121,
              34,
              31,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              90,
              47,
              58,
              6,
              112,
              111,
              108,
              105,
              99,
              121,
              34,
              37,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              34,
              32,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a policy.
     *
     * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
     * constraint or the policy do not exist.
     * Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
     * supplied in the request does not match the persisted etag of the policy
     *
     * Note: the supplied policy will perform a full overwrite of all
     * fields.
     */
    updatePolicy: {
      name: "UpdatePolicy",
      requestType: UpdatePolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 111, 108, 105, 99, 121])],
          578365826: [
            Buffer.from([
              155,
              1,
              58,
              6,
              112,
              111,
              108,
              105,
              99,
              121,
              90,
              48,
              58,
              6,
              112,
              111,
              108,
              105,
              99,
              121,
              50,
              38,
              47,
              118,
              50,
              47,
              123,
              112,
              111,
              108,
              105,
              99,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              90,
              54,
              58,
              6,
              112,
              111,
              108,
              105,
              99,
              121,
              50,
              44,
              47,
              118,
              50,
              47,
              123,
              112,
              111,
              108,
              105,
              99,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              50,
              39,
              47,
              118,
              50,
              47,
              123,
              112,
              111,
              108,
              105,
              99,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a policy.
     *
     * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
     * constraint or organization policy does not exist.
     */
    deletePolicy: {
      name: "DeletePolicy",
      requestType: DeletePolicyRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              110,
              90,
              33,
              42,
              31,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              90,
              39,
              42,
              37,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              42,
              32,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a custom constraint.
     *
     * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
     * organization does not exist.
     * Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the
     * constraint already exists on the given organization.
     */
    createCustomConstraint: {
      name: "CreateCustomConstraint",
      requestType: CreateCustomConstraintRequest,
      requestStream: false,
      responseType: CustomConstraint,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              99,
              111,
              110,
              115,
              116,
              114,
              97,
              105,
              110,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              67,
              58,
              17,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              99,
              111,
              110,
              115,
              116,
              114,
              97,
              105,
              110,
              116,
              34,
              46,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              67,
              111,
              110,
              115,
              116,
              114,
              97,
              105,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a custom constraint.
     *
     * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
     * constraint does not exist.
     *
     * Note: the supplied policy will perform a full overwrite of all
     * fields.
     */
    updateCustomConstraint: {
      name: "UpdateCustomConstraint",
      requestType: UpdateCustomConstraintRequest,
      requestStream: false,
      responseType: CustomConstraint,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 99, 117, 115, 116, 111, 109, 95, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116])],
          578365826: [
            Buffer.from([
              85,
              58,
              17,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              99,
              111,
              110,
              115,
              116,
              114,
              97,
              105,
              110,
              116,
              50,
              64,
              47,
              118,
              50,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              99,
              111,
              110,
              115,
              116,
              114,
              97,
              105,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              67,
              111,
              110,
              115,
              116,
              114,
              97,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets a custom constraint.
     *
     * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
     * custom constraint does not exist.
     */
    getCustomConstraint: {
      name: "GetCustomConstraint",
      requestType: GetCustomConstraintRequest,
      requestStream: false,
      responseType: CustomConstraint,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              67,
              111,
              110,
              115,
              116,
              114,
              97,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves all of the custom constraints that exist on a particular
     * organization resource.
     */
    listCustomConstraints: {
      name: "ListCustomConstraints",
      requestType: ListCustomConstraintsRequest,
      requestStream: false,
      responseType: ListCustomConstraintsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              67,
              111,
              110,
              115,
              116,
              114,
              97,
              105,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a custom constraint.
     *
     * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
     * constraint does not exist.
     */
    deleteCustomConstraint: {
      name: "DeleteCustomConstraint",
      requestType: DeleteCustomConstraintRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              42,
              46,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              67,
              111,
              110,
              115,
              116,
              114,
              97,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface OrgPolicyServiceImplementation<CallContextExt = {}> {
  /** Lists constraints that could be applied on the specified resource. */
  listConstraints(
    request: ListConstraintsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListConstraintsResponse>>;
  /** Retrieves all of the policies that exist on a particular resource. */
  listPolicies(
    request: ListPoliciesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPoliciesResponse>>;
  /**
   * Gets a policy on a resource.
   *
   * If no policy is set on the resource, `NOT_FOUND` is returned. The
   * `etag` value can be used with `UpdatePolicy()` to update a
   * policy during read-modify-write.
   */
  getPolicy(request: GetPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Gets the effective policy on a resource. This is the result of merging
   * policies in the resource hierarchy and evaluating conditions. The
   * returned policy will not have an `etag` or `condition` set because it is
   * an evaluated policy across multiple resources.
   * Subtrees of Resource Manager resource hierarchy with 'under:' prefix will
   * not be expanded.
   */
  getEffectivePolicy(
    request: GetEffectivePolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Policy>>;
  /**
   * Creates a policy.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * constraint does not exist.
   * Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the
   * policy already exists on the given Google Cloud resource.
   */
  createPolicy(request: CreatePolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Updates a policy.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * constraint or the policy do not exist.
   * Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
   * supplied in the request does not match the persisted etag of the policy
   *
   * Note: the supplied policy will perform a full overwrite of all
   * fields.
   */
  updatePolicy(request: UpdatePolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Deletes a policy.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * constraint or organization policy does not exist.
   */
  deletePolicy(request: DeletePolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Creates a custom constraint.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * organization does not exist.
   * Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the
   * constraint already exists on the given organization.
   */
  createCustomConstraint(
    request: CreateCustomConstraintRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomConstraint>>;
  /**
   * Updates a custom constraint.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * constraint does not exist.
   *
   * Note: the supplied policy will perform a full overwrite of all
   * fields.
   */
  updateCustomConstraint(
    request: UpdateCustomConstraintRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomConstraint>>;
  /**
   * Gets a custom constraint.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * custom constraint does not exist.
   */
  getCustomConstraint(
    request: GetCustomConstraintRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomConstraint>>;
  /**
   * Retrieves all of the custom constraints that exist on a particular
   * organization resource.
   */
  listCustomConstraints(
    request: ListCustomConstraintsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCustomConstraintsResponse>>;
  /**
   * Deletes a custom constraint.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * constraint does not exist.
   */
  deleteCustomConstraint(
    request: DeleteCustomConstraintRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface OrgPolicyClient<CallOptionsExt = {}> {
  /** Lists constraints that could be applied on the specified resource. */
  listConstraints(
    request: DeepPartial<ListConstraintsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListConstraintsResponse>;
  /** Retrieves all of the policies that exist on a particular resource. */
  listPolicies(
    request: DeepPartial<ListPoliciesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPoliciesResponse>;
  /**
   * Gets a policy on a resource.
   *
   * If no policy is set on the resource, `NOT_FOUND` is returned. The
   * `etag` value can be used with `UpdatePolicy()` to update a
   * policy during read-modify-write.
   */
  getPolicy(request: DeepPartial<GetPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Gets the effective policy on a resource. This is the result of merging
   * policies in the resource hierarchy and evaluating conditions. The
   * returned policy will not have an `etag` or `condition` set because it is
   * an evaluated policy across multiple resources.
   * Subtrees of Resource Manager resource hierarchy with 'under:' prefix will
   * not be expanded.
   */
  getEffectivePolicy(
    request: DeepPartial<GetEffectivePolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Policy>;
  /**
   * Creates a policy.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * constraint does not exist.
   * Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the
   * policy already exists on the given Google Cloud resource.
   */
  createPolicy(request: DeepPartial<CreatePolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Updates a policy.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * constraint or the policy do not exist.
   * Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
   * supplied in the request does not match the persisted etag of the policy
   *
   * Note: the supplied policy will perform a full overwrite of all
   * fields.
   */
  updatePolicy(request: DeepPartial<UpdatePolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Deletes a policy.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * constraint or organization policy does not exist.
   */
  deletePolicy(request: DeepPartial<DeletePolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Creates a custom constraint.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * organization does not exist.
   * Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the
   * constraint already exists on the given organization.
   */
  createCustomConstraint(
    request: DeepPartial<CreateCustomConstraintRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomConstraint>;
  /**
   * Updates a custom constraint.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * constraint does not exist.
   *
   * Note: the supplied policy will perform a full overwrite of all
   * fields.
   */
  updateCustomConstraint(
    request: DeepPartial<UpdateCustomConstraintRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomConstraint>;
  /**
   * Gets a custom constraint.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * custom constraint does not exist.
   */
  getCustomConstraint(
    request: DeepPartial<GetCustomConstraintRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomConstraint>;
  /**
   * Retrieves all of the custom constraints that exist on a particular
   * organization resource.
   */
  listCustomConstraints(
    request: DeepPartial<ListCustomConstraintsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCustomConstraintsResponse>;
  /**
   * Deletes a custom constraint.
   *
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * constraint does not exist.
   */
  deleteCustomConstraint(
    request: DeepPartial<DeleteCustomConstraintRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
