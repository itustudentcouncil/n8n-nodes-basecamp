// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/compute/v1small/compute_small.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "google.cloud.compute.v1small";

/**
 * Messages
 *
 * Use global external addresses for GFE-based external HTTP(S) load balancers in Premium Tier.
 *
 * Use global internal addresses for reserved peering network range.
 *
 * Use regional external addresses for the following resources:
 *
 * - External IP addresses for VM instances - Regional external forwarding rules - Cloud NAT external IP addresses - GFE based LBs in Standard Tier - Network LBs in Premium or Standard Tier - Cloud VPN gateways (both Classic and HA)
 *
 * Use regional internal IP addresses for subnet IP ranges (primary and secondary). This includes:
 *
 * - Internal IP addresses for VM instances - Alias IP ranges of VM instances (/32 only) - Regional internal forwarding rules - Internal TCP/UDP load balancer addresses - Internal HTTP(S) load balancer addresses - Cloud DNS inbound forwarding IP addresses
 *
 * For more information, read reserved IP address.
 *
 * (== resource_for {$api_version}.addresses ==) (== resource_for {$api_version}.globalAddresses ==)
 */
export interface Address {
  /** The static IP address represented by this resource. */
  address?:
    | string
    | undefined;
  /**
   * The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.
   * Check the AddressType enum for the list of possible values.
   */
  addressType?:
    | string
    | undefined;
  /** [Output Only] Creation timestamp in RFC3339 text format. */
  creationTimestamp?:
    | string
    | undefined;
  /** An optional description of this resource. Provide this field when you create the resource. */
  description?:
    | string
    | undefined;
  /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
  id?:
    | Long
    | undefined;
  /**
   * The IP version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address.
   * Check the IpVersion enum for the list of possible values.
   */
  ipVersion?:
    | string
    | undefined;
  /** [Output Only] Type of the resource. Always compute#address for addresses. */
  kind?:
    | string
    | undefined;
  /** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit. */
  name?:
    | string
    | undefined;
  /** The URL of the network in which to reserve the address. This field can only be used with INTERNAL type with the VPC_PEERING purpose. */
  network?:
    | string
    | undefined;
  /**
   * This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Global forwarding rules can only be Premium Tier. Regional forwarding rules can be either Premium or Standard Tier. Standard Tier addresses applied to regional forwarding rules can be used with any external load balancer. Regional forwarding rules in Premium Tier can only be used with a network load balancer.
   *
   * If this field is not specified, it is assumed to be PREMIUM.
   * Check the NetworkTier enum for the list of possible values.
   */
  networkTier?:
    | string
    | undefined;
  /** The prefix length if the resource reprensents an IP range. */
  prefixLength?:
    | number
    | undefined;
  /**
   * The purpose of this resource, which can be one of the following values:
   * - `GCE_ENDPOINT` for addresses that are used by VM instances, alias IP ranges, internal load balancers, and similar resources.
   * - `DNS_RESOLVER` for a DNS resolver address in a subnetwork
   * - `VPC_PEERING` for addresses that are reserved for VPC peer networks.
   * - `NAT_AUTO` for addresses that are external IP addresses automatically reserved for Cloud NAT.
   * Check the Purpose enum for the list of possible values.
   */
  purpose?:
    | string
    | undefined;
  /** [Output Only] The URL of the region where the regional address resides. This field is not applicable to global addresses. You must specify this field as part of the HTTP request URL. */
  region?:
    | string
    | undefined;
  /** [Output Only] Server-defined URL for the resource. */
  selfLink?:
    | string
    | undefined;
  /**
   * [Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available.
   * Check the Status enum for the list of possible values.
   */
  status?:
    | string
    | undefined;
  /** The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the subnetwork's IP range. This field can only be used with INTERNAL type with a GCE_ENDPOINT or DNS_RESOLVER purpose. */
  subnetwork?:
    | string
    | undefined;
  /** [Output Only] The URLs of the resources that are using this address. */
  users: string[];
}

/** The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL. */
export enum Address_AddressType {
  /** UNDEFINED_ADDRESS_TYPE - A value indicating that the enum field is not set. */
  UNDEFINED_ADDRESS_TYPE = 0,
  EXTERNAL = 35607499,
  INTERNAL = 279295677,
  UNSPECIFIED_TYPE = 53933922,
  UNRECOGNIZED = -1,
}

export function address_AddressTypeFromJSON(object: any): Address_AddressType {
  switch (object) {
    case 0:
    case "UNDEFINED_ADDRESS_TYPE":
      return Address_AddressType.UNDEFINED_ADDRESS_TYPE;
    case 35607499:
    case "EXTERNAL":
      return Address_AddressType.EXTERNAL;
    case 279295677:
    case "INTERNAL":
      return Address_AddressType.INTERNAL;
    case 53933922:
    case "UNSPECIFIED_TYPE":
      return Address_AddressType.UNSPECIFIED_TYPE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Address_AddressType.UNRECOGNIZED;
  }
}

export function address_AddressTypeToJSON(object: Address_AddressType): string {
  switch (object) {
    case Address_AddressType.UNDEFINED_ADDRESS_TYPE:
      return "UNDEFINED_ADDRESS_TYPE";
    case Address_AddressType.EXTERNAL:
      return "EXTERNAL";
    case Address_AddressType.INTERNAL:
      return "INTERNAL";
    case Address_AddressType.UNSPECIFIED_TYPE:
      return "UNSPECIFIED_TYPE";
    case Address_AddressType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The IP version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address. */
export enum Address_IpVersion {
  /** UNDEFINED_IP_VERSION - A value indicating that the enum field is not set. */
  UNDEFINED_IP_VERSION = 0,
  IPV4 = 2254341,
  IPV6 = 2254343,
  UNSPECIFIED_VERSION = 21850000,
  UNRECOGNIZED = -1,
}

export function address_IpVersionFromJSON(object: any): Address_IpVersion {
  switch (object) {
    case 0:
    case "UNDEFINED_IP_VERSION":
      return Address_IpVersion.UNDEFINED_IP_VERSION;
    case 2254341:
    case "IPV4":
      return Address_IpVersion.IPV4;
    case 2254343:
    case "IPV6":
      return Address_IpVersion.IPV6;
    case 21850000:
    case "UNSPECIFIED_VERSION":
      return Address_IpVersion.UNSPECIFIED_VERSION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Address_IpVersion.UNRECOGNIZED;
  }
}

export function address_IpVersionToJSON(object: Address_IpVersion): string {
  switch (object) {
    case Address_IpVersion.UNDEFINED_IP_VERSION:
      return "UNDEFINED_IP_VERSION";
    case Address_IpVersion.IPV4:
      return "IPV4";
    case Address_IpVersion.IPV6:
      return "IPV6";
    case Address_IpVersion.UNSPECIFIED_VERSION:
      return "UNSPECIFIED_VERSION";
    case Address_IpVersion.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Global forwarding rules can only be Premium Tier. Regional forwarding rules can be either Premium or Standard Tier. Standard Tier addresses applied to regional forwarding rules can be used with any external load balancer. Regional forwarding rules in Premium Tier can only be used with a network load balancer.
 *
 * If this field is not specified, it is assumed to be PREMIUM.
 */
export enum Address_NetworkTier {
  /** UNDEFINED_NETWORK_TIER - A value indicating that the enum field is not set. */
  UNDEFINED_NETWORK_TIER = 0,
  PREMIUM = 399530551,
  STANDARD = 484642493,
  UNRECOGNIZED = -1,
}

export function address_NetworkTierFromJSON(object: any): Address_NetworkTier {
  switch (object) {
    case 0:
    case "UNDEFINED_NETWORK_TIER":
      return Address_NetworkTier.UNDEFINED_NETWORK_TIER;
    case 399530551:
    case "PREMIUM":
      return Address_NetworkTier.PREMIUM;
    case 484642493:
    case "STANDARD":
      return Address_NetworkTier.STANDARD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Address_NetworkTier.UNRECOGNIZED;
  }
}

export function address_NetworkTierToJSON(object: Address_NetworkTier): string {
  switch (object) {
    case Address_NetworkTier.UNDEFINED_NETWORK_TIER:
      return "UNDEFINED_NETWORK_TIER";
    case Address_NetworkTier.PREMIUM:
      return "PREMIUM";
    case Address_NetworkTier.STANDARD:
      return "STANDARD";
    case Address_NetworkTier.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The purpose of this resource, which can be one of the following values:
 * - `GCE_ENDPOINT` for addresses that are used by VM instances, alias IP ranges, internal load balancers, and similar resources.
 * - `DNS_RESOLVER` for a DNS resolver address in a subnetwork
 * - `VPC_PEERING` for addresses that are reserved for VPC peer networks.
 * - `NAT_AUTO` for addresses that are external IP addresses automatically reserved for Cloud NAT.
 */
export enum Address_Purpose {
  /** UNDEFINED_PURPOSE - A value indicating that the enum field is not set. */
  UNDEFINED_PURPOSE = 0,
  DNS_RESOLVER = 476114556,
  GCE_ENDPOINT = 230515243,
  NAT_AUTO = 163666477,
  VPC_PEERING = 400800170,
  UNRECOGNIZED = -1,
}

export function address_PurposeFromJSON(object: any): Address_Purpose {
  switch (object) {
    case 0:
    case "UNDEFINED_PURPOSE":
      return Address_Purpose.UNDEFINED_PURPOSE;
    case 476114556:
    case "DNS_RESOLVER":
      return Address_Purpose.DNS_RESOLVER;
    case 230515243:
    case "GCE_ENDPOINT":
      return Address_Purpose.GCE_ENDPOINT;
    case 163666477:
    case "NAT_AUTO":
      return Address_Purpose.NAT_AUTO;
    case 400800170:
    case "VPC_PEERING":
      return Address_Purpose.VPC_PEERING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Address_Purpose.UNRECOGNIZED;
  }
}

export function address_PurposeToJSON(object: Address_Purpose): string {
  switch (object) {
    case Address_Purpose.UNDEFINED_PURPOSE:
      return "UNDEFINED_PURPOSE";
    case Address_Purpose.DNS_RESOLVER:
      return "DNS_RESOLVER";
    case Address_Purpose.GCE_ENDPOINT:
      return "GCE_ENDPOINT";
    case Address_Purpose.NAT_AUTO:
      return "NAT_AUTO";
    case Address_Purpose.VPC_PEERING:
      return "VPC_PEERING";
    case Address_Purpose.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** [Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available. */
export enum Address_Status {
  /** UNDEFINED_STATUS - A value indicating that the enum field is not set. */
  UNDEFINED_STATUS = 0,
  IN_USE = 17393485,
  RESERVED = 432241448,
  RESERVING = 514587225,
  UNRECOGNIZED = -1,
}

export function address_StatusFromJSON(object: any): Address_Status {
  switch (object) {
    case 0:
    case "UNDEFINED_STATUS":
      return Address_Status.UNDEFINED_STATUS;
    case 17393485:
    case "IN_USE":
      return Address_Status.IN_USE;
    case 432241448:
    case "RESERVED":
      return Address_Status.RESERVED;
    case 514587225:
    case "RESERVING":
      return Address_Status.RESERVING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Address_Status.UNRECOGNIZED;
  }
}

export function address_StatusToJSON(object: Address_Status): string {
  switch (object) {
    case Address_Status.UNDEFINED_STATUS:
      return "UNDEFINED_STATUS";
    case Address_Status.IN_USE:
      return "IN_USE";
    case Address_Status.RESERVED:
      return "RESERVED";
    case Address_Status.RESERVING:
      return "RESERVING";
    case Address_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**  */
export interface AddressAggregatedList {
  /** [Output Only] Unique identifier for the resource; defined by the server. */
  id?:
    | string
    | undefined;
  /** A list of AddressesScopedList resources. */
  items: { [key: string]: AddressesScopedList };
  /** [Output Only] Type of resource. Always compute#addressAggregatedList for aggregated lists of addresses. */
  kind?:
    | string
    | undefined;
  /** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
  nextPageToken?:
    | string
    | undefined;
  /** [Output Only] Server-defined URL for this resource. */
  selfLink?:
    | string
    | undefined;
  /** [Output Only] Informational warning message. */
  warning?: Warning | undefined;
}

export interface AddressAggregatedList_ItemsEntry {
  key: string;
  value: AddressesScopedList | undefined;
}

/** Contains a list of addresses. */
export interface AddressList {
  /** [Output Only] Unique identifier for the resource; defined by the server. */
  id?:
    | string
    | undefined;
  /** A list of Address resources. */
  items: Address[];
  /** [Output Only] Type of resource. Always compute#addressList for lists of addresses. */
  kind?:
    | string
    | undefined;
  /** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
  nextPageToken?:
    | string
    | undefined;
  /** [Output Only] Server-defined URL for this resource. */
  selfLink?:
    | string
    | undefined;
  /** [Output Only] Informational warning message. */
  warning?: Warning | undefined;
}

/**  */
export interface AddressesScopedList {
  /** [Output Only] A list of addresses contained in this scope. */
  addresses: Address[];
  /** [Output Only] Informational warning which replaces the list of addresses when the list is empty. */
  warning?: Warning | undefined;
}

/** A request message for Addresses.AggregatedList. See the method description for details. */
export interface AggregatedListAddressesRequest {
  /**
   * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
   *
   * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
   *
   * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
   *
   * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
   */
  filter?:
    | string
    | undefined;
  /** Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included. */
  includeAllScopes?:
    | boolean
    | undefined;
  /** The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`) */
  maxResults?:
    | number
    | undefined;
  /**
   * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
   *
   * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
   *
   * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
   */
  orderBy?:
    | string
    | undefined;
  /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
  pageToken?:
    | string
    | undefined;
  /** Project ID for this request. */
  project: string;
}

/**  */
export interface Data {
  /** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
  key?:
    | string
    | undefined;
  /** [Output Only] A warning data value corresponding to the key. */
  value?: string | undefined;
}

/** A request message for Addresses.Delete. See the method description for details. */
export interface DeleteAddressRequest {
  /** Name of the address resource to delete. */
  address: string;
  /** Project ID for this request. */
  project: string;
  /** Name of the region for this request. */
  region: string;
  /**
   * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
   *
   * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId?: string | undefined;
}

/** [Output Only] If errors are generated during processing of the operation, this field will be populated. */
export interface Error {
  /** [Output Only] The array of errors encountered while processing this operation. */
  errors: Errors[];
}

/**  */
export interface Errors {
  /** [Output Only] The error type identifier for this error. */
  code?:
    | string
    | undefined;
  /** [Output Only] Indicates the field in the request that caused the error. This property is optional. */
  location?:
    | string
    | undefined;
  /** [Output Only] An optional, human-readable error message. */
  message?: string | undefined;
}

/** A request message for RegionOperations.Get. See the method description for details. */
export interface GetRegionOperationRequest {
  /** Name of the Operations resource to return. */
  operation: string;
  /** Project ID for this request. */
  project: string;
  /** Name of the region for this request. */
  region: string;
}

/** A request message for Addresses.Insert. See the method description for details. */
export interface InsertAddressRequest {
  /** The body resource for this request */
  addressResource:
    | Address
    | undefined;
  /** Project ID for this request. */
  project: string;
  /** Name of the region for this request. */
  region: string;
  /**
   * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
   *
   * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId?: string | undefined;
}

/** A request message for Addresses.List. See the method description for details. */
export interface ListAddressesRequest {
  /**
   * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.
   *
   * For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.
   *
   * You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
   *
   * To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
   */
  filter?:
    | string
    | undefined;
  /** The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500) */
  maxResults?:
    | number
    | undefined;
  /**
   * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
   *
   * You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
   *
   * Currently, only sorting by name or creationTimestamp desc is supported.
   */
  orderBy: string;
  /** Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results. */
  pageToken?:
    | string
    | undefined;
  /** Project ID for this request. */
  project: string;
  /** Name of the region for this request. */
  region: string;
}

/**
 * Represents an Operation resource.
 *
 * Google Compute Engine has three Operation resources:
 *
 * * [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations)
 *
 * You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses.
 *
 * Operations can be global, regional or zonal.
 * - For global operations, use the globalOperations resource.
 * - For regional operations, use the regionOperations resource.
 * - For zonal operations, use the zoneOperations resource.
 *
 * For more information, read  Global, Regional, and Zonal Resources. (== resource_for {$api_version}.globalOperations ==) (== resource_for {$api_version}.regionOperations ==) (== resource_for {$api_version}.zoneOperations ==)
 */
export interface Operation {
  /** [Output Only] The value of `requestId` if you provided it in the request. Not present otherwise. */
  clientOperationId?:
    | string
    | undefined;
  /** [Deprecated] This field is deprecated. */
  creationTimestamp?:
    | string
    | undefined;
  /** [Output Only] A textual description of the operation, which is set when the operation is created. */
  description?:
    | string
    | undefined;
  /** [Output Only] The time that this operation was completed. This value is in RFC3339 text format. */
  endTime?:
    | string
    | undefined;
  /** [Output Only] If errors are generated during processing of the operation, this field will be populated. */
  error?:
    | Error
    | undefined;
  /** [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as NOT FOUND. */
  httpErrorMessage?:
    | string
    | undefined;
  /** [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a 404 means the resource was not found. */
  httpErrorStatusCode?:
    | number
    | undefined;
  /** [Output Only] The unique identifier for the operation. This identifier is defined by the server. */
  id?:
    | Long
    | undefined;
  /** [Output Only] The time that this operation was requested. This value is in RFC3339 text format. */
  insertTime?:
    | string
    | undefined;
  /** [Output Only] Type of the resource. Always compute#operation for Operation resources. */
  kind?:
    | string
    | undefined;
  /** [Output Only] Name of the operation. */
  name?:
    | string
    | undefined;
  /** [Output Only] The type of operation, such as insert, update, or delete, and so on. */
  operationType?:
    | string
    | undefined;
  /** [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses. */
  progress?:
    | number
    | undefined;
  /** [Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations. */
  region?:
    | string
    | undefined;
  /** [Output Only] Server-defined URL for the resource. */
  selfLink?:
    | string
    | undefined;
  /** [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format. */
  startTime?:
    | string
    | undefined;
  /** [Output Only] The status of the operation, which can be one of the following: PENDING, RUNNING, or DONE. */
  status?:
    | Operation_Status
    | undefined;
  /** [Output Only] An optional textual description of the current status of the operation. */
  statusMessage?:
    | string
    | undefined;
  /** [Output Only] The unique target ID, which identifies a specific incarnation of the target resource. */
  targetId?:
    | Long
    | undefined;
  /** [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from. */
  targetLink?:
    | string
    | undefined;
  /** [Output Only] User who requested the operation, for example: user@example.com. */
  user?:
    | string
    | undefined;
  /** [Output Only] If warning messages are generated during processing of the operation, this field will be populated. */
  warnings: Warnings[];
  /** [Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations. */
  zone?: string | undefined;
}

/** [Output Only] The status of the operation, which can be one of the following: PENDING, RUNNING, or DONE. */
export enum Operation_Status {
  /** UNDEFINED_STATUS - A value indicating that the enum field is not set. */
  UNDEFINED_STATUS = 0,
  DONE = 2104194,
  PENDING = 35394935,
  RUNNING = 121282975,
  UNRECOGNIZED = -1,
}

export function operation_StatusFromJSON(object: any): Operation_Status {
  switch (object) {
    case 0:
    case "UNDEFINED_STATUS":
      return Operation_Status.UNDEFINED_STATUS;
    case 2104194:
    case "DONE":
      return Operation_Status.DONE;
    case 35394935:
    case "PENDING":
      return Operation_Status.PENDING;
    case 121282975:
    case "RUNNING":
      return Operation_Status.RUNNING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Operation_Status.UNRECOGNIZED;
  }
}

export function operation_StatusToJSON(object: Operation_Status): string {
  switch (object) {
    case Operation_Status.UNDEFINED_STATUS:
      return "UNDEFINED_STATUS";
    case Operation_Status.DONE:
      return "DONE";
    case Operation_Status.PENDING:
      return "PENDING";
    case Operation_Status.RUNNING:
      return "RUNNING";
    case Operation_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A request message for RegionOperations.Wait. See the method description for details. */
export interface WaitRegionOperationRequest {
  /** Name of the Operations resource to return. */
  operation: string;
  /** Project ID for this request. */
  project: string;
  /** Name of the region for this request. */
  region: string;
}

/** [Output Only] Informational warning message. */
export interface Warning {
  /**
   * [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
   * Check the Code enum for the list of possible values.
   */
  code?:
    | string
    | undefined;
  /**
   * [Output Only] Metadata about this warning in key: value format. For example:
   * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
   */
  data: Data[];
  /** [Output Only] A human-readable description of the warning code. */
  message?: string | undefined;
}

/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
export enum Warning_Code {
  /** UNDEFINED_CODE - A value indicating that the enum field is not set. */
  UNDEFINED_CODE = 0,
  CLEANUP_FAILED = 150308440,
  DEPRECATED_RESOURCE_USED = 391835586,
  DEPRECATED_TYPE_USED = 346526230,
  DISK_SIZE_LARGER_THAN_IMAGE_SIZE = 369442967,
  EXPERIMENTAL_TYPE_USED = 451954443,
  EXTERNAL_API_WARNING = 175546307,
  FIELD_VALUE_OVERRIDEN = 329669423,
  INJECTED_KERNELS_DEPRECATED = 417377419,
  MISSING_TYPE_DEPENDENCY = 344505463,
  NEXT_HOP_ADDRESS_NOT_ASSIGNED = 324964999,
  NEXT_HOP_CANNOT_IP_FORWARD = 383382887,
  NEXT_HOP_INSTANCE_NOT_FOUND = 464250446,
  NEXT_HOP_INSTANCE_NOT_ON_NETWORK = 243758146,
  NEXT_HOP_NOT_RUNNING = 417081265,
  NOT_CRITICAL_ERROR = 105763924,
  NO_RESULTS_ON_PAGE = 30036744,
  REQUIRED_TOS_AGREEMENT = 3745539,
  RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING = 496728641,
  RESOURCE_NOT_DELETED = 168598460,
  SCHEMA_VALIDATION_IGNORED = 275245642,
  SINGLE_INSTANCE_PROPERTY_TEMPLATE = 268305617,
  UNDECLARED_PROPERTIES = 390513439,
  UNREACHABLE = 13328052,
  UNRECOGNIZED = -1,
}

export function warning_CodeFromJSON(object: any): Warning_Code {
  switch (object) {
    case 0:
    case "UNDEFINED_CODE":
      return Warning_Code.UNDEFINED_CODE;
    case 150308440:
    case "CLEANUP_FAILED":
      return Warning_Code.CLEANUP_FAILED;
    case 391835586:
    case "DEPRECATED_RESOURCE_USED":
      return Warning_Code.DEPRECATED_RESOURCE_USED;
    case 346526230:
    case "DEPRECATED_TYPE_USED":
      return Warning_Code.DEPRECATED_TYPE_USED;
    case 369442967:
    case "DISK_SIZE_LARGER_THAN_IMAGE_SIZE":
      return Warning_Code.DISK_SIZE_LARGER_THAN_IMAGE_SIZE;
    case 451954443:
    case "EXPERIMENTAL_TYPE_USED":
      return Warning_Code.EXPERIMENTAL_TYPE_USED;
    case 175546307:
    case "EXTERNAL_API_WARNING":
      return Warning_Code.EXTERNAL_API_WARNING;
    case 329669423:
    case "FIELD_VALUE_OVERRIDEN":
      return Warning_Code.FIELD_VALUE_OVERRIDEN;
    case 417377419:
    case "INJECTED_KERNELS_DEPRECATED":
      return Warning_Code.INJECTED_KERNELS_DEPRECATED;
    case 344505463:
    case "MISSING_TYPE_DEPENDENCY":
      return Warning_Code.MISSING_TYPE_DEPENDENCY;
    case 324964999:
    case "NEXT_HOP_ADDRESS_NOT_ASSIGNED":
      return Warning_Code.NEXT_HOP_ADDRESS_NOT_ASSIGNED;
    case 383382887:
    case "NEXT_HOP_CANNOT_IP_FORWARD":
      return Warning_Code.NEXT_HOP_CANNOT_IP_FORWARD;
    case 464250446:
    case "NEXT_HOP_INSTANCE_NOT_FOUND":
      return Warning_Code.NEXT_HOP_INSTANCE_NOT_FOUND;
    case 243758146:
    case "NEXT_HOP_INSTANCE_NOT_ON_NETWORK":
      return Warning_Code.NEXT_HOP_INSTANCE_NOT_ON_NETWORK;
    case 417081265:
    case "NEXT_HOP_NOT_RUNNING":
      return Warning_Code.NEXT_HOP_NOT_RUNNING;
    case 105763924:
    case "NOT_CRITICAL_ERROR":
      return Warning_Code.NOT_CRITICAL_ERROR;
    case 30036744:
    case "NO_RESULTS_ON_PAGE":
      return Warning_Code.NO_RESULTS_ON_PAGE;
    case 3745539:
    case "REQUIRED_TOS_AGREEMENT":
      return Warning_Code.REQUIRED_TOS_AGREEMENT;
    case 496728641:
    case "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING":
      return Warning_Code.RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING;
    case 168598460:
    case "RESOURCE_NOT_DELETED":
      return Warning_Code.RESOURCE_NOT_DELETED;
    case 275245642:
    case "SCHEMA_VALIDATION_IGNORED":
      return Warning_Code.SCHEMA_VALIDATION_IGNORED;
    case 268305617:
    case "SINGLE_INSTANCE_PROPERTY_TEMPLATE":
      return Warning_Code.SINGLE_INSTANCE_PROPERTY_TEMPLATE;
    case 390513439:
    case "UNDECLARED_PROPERTIES":
      return Warning_Code.UNDECLARED_PROPERTIES;
    case 13328052:
    case "UNREACHABLE":
      return Warning_Code.UNREACHABLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Warning_Code.UNRECOGNIZED;
  }
}

export function warning_CodeToJSON(object: Warning_Code): string {
  switch (object) {
    case Warning_Code.UNDEFINED_CODE:
      return "UNDEFINED_CODE";
    case Warning_Code.CLEANUP_FAILED:
      return "CLEANUP_FAILED";
    case Warning_Code.DEPRECATED_RESOURCE_USED:
      return "DEPRECATED_RESOURCE_USED";
    case Warning_Code.DEPRECATED_TYPE_USED:
      return "DEPRECATED_TYPE_USED";
    case Warning_Code.DISK_SIZE_LARGER_THAN_IMAGE_SIZE:
      return "DISK_SIZE_LARGER_THAN_IMAGE_SIZE";
    case Warning_Code.EXPERIMENTAL_TYPE_USED:
      return "EXPERIMENTAL_TYPE_USED";
    case Warning_Code.EXTERNAL_API_WARNING:
      return "EXTERNAL_API_WARNING";
    case Warning_Code.FIELD_VALUE_OVERRIDEN:
      return "FIELD_VALUE_OVERRIDEN";
    case Warning_Code.INJECTED_KERNELS_DEPRECATED:
      return "INJECTED_KERNELS_DEPRECATED";
    case Warning_Code.MISSING_TYPE_DEPENDENCY:
      return "MISSING_TYPE_DEPENDENCY";
    case Warning_Code.NEXT_HOP_ADDRESS_NOT_ASSIGNED:
      return "NEXT_HOP_ADDRESS_NOT_ASSIGNED";
    case Warning_Code.NEXT_HOP_CANNOT_IP_FORWARD:
      return "NEXT_HOP_CANNOT_IP_FORWARD";
    case Warning_Code.NEXT_HOP_INSTANCE_NOT_FOUND:
      return "NEXT_HOP_INSTANCE_NOT_FOUND";
    case Warning_Code.NEXT_HOP_INSTANCE_NOT_ON_NETWORK:
      return "NEXT_HOP_INSTANCE_NOT_ON_NETWORK";
    case Warning_Code.NEXT_HOP_NOT_RUNNING:
      return "NEXT_HOP_NOT_RUNNING";
    case Warning_Code.NOT_CRITICAL_ERROR:
      return "NOT_CRITICAL_ERROR";
    case Warning_Code.NO_RESULTS_ON_PAGE:
      return "NO_RESULTS_ON_PAGE";
    case Warning_Code.REQUIRED_TOS_AGREEMENT:
      return "REQUIRED_TOS_AGREEMENT";
    case Warning_Code.RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING:
      return "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING";
    case Warning_Code.RESOURCE_NOT_DELETED:
      return "RESOURCE_NOT_DELETED";
    case Warning_Code.SCHEMA_VALIDATION_IGNORED:
      return "SCHEMA_VALIDATION_IGNORED";
    case Warning_Code.SINGLE_INSTANCE_PROPERTY_TEMPLATE:
      return "SINGLE_INSTANCE_PROPERTY_TEMPLATE";
    case Warning_Code.UNDECLARED_PROPERTIES:
      return "UNDECLARED_PROPERTIES";
    case Warning_Code.UNREACHABLE:
      return "UNREACHABLE";
    case Warning_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**  */
export interface Warnings {
  /**
   * [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
   * Check the Code enum for the list of possible values.
   */
  code?:
    | string
    | undefined;
  /**
   * [Output Only] Metadata about this warning in key: value format. For example:
   * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
   */
  data: Data[];
  /** [Output Only] A human-readable description of the warning code. */
  message?: string | undefined;
}

/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
export enum Warnings_Code {
  /** UNDEFINED_CODE - A value indicating that the enum field is not set. */
  UNDEFINED_CODE = 0,
  CLEANUP_FAILED = 150308440,
  DEPRECATED_RESOURCE_USED = 391835586,
  DEPRECATED_TYPE_USED = 346526230,
  DISK_SIZE_LARGER_THAN_IMAGE_SIZE = 369442967,
  EXPERIMENTAL_TYPE_USED = 451954443,
  EXTERNAL_API_WARNING = 175546307,
  FIELD_VALUE_OVERRIDEN = 329669423,
  INJECTED_KERNELS_DEPRECATED = 417377419,
  MISSING_TYPE_DEPENDENCY = 344505463,
  NEXT_HOP_ADDRESS_NOT_ASSIGNED = 324964999,
  NEXT_HOP_CANNOT_IP_FORWARD = 383382887,
  NEXT_HOP_INSTANCE_NOT_FOUND = 464250446,
  NEXT_HOP_INSTANCE_NOT_ON_NETWORK = 243758146,
  NEXT_HOP_NOT_RUNNING = 417081265,
  NOT_CRITICAL_ERROR = 105763924,
  NO_RESULTS_ON_PAGE = 30036744,
  REQUIRED_TOS_AGREEMENT = 3745539,
  RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING = 496728641,
  RESOURCE_NOT_DELETED = 168598460,
  SCHEMA_VALIDATION_IGNORED = 275245642,
  SINGLE_INSTANCE_PROPERTY_TEMPLATE = 268305617,
  UNDECLARED_PROPERTIES = 390513439,
  UNREACHABLE = 13328052,
  UNRECOGNIZED = -1,
}

export function warnings_CodeFromJSON(object: any): Warnings_Code {
  switch (object) {
    case 0:
    case "UNDEFINED_CODE":
      return Warnings_Code.UNDEFINED_CODE;
    case 150308440:
    case "CLEANUP_FAILED":
      return Warnings_Code.CLEANUP_FAILED;
    case 391835586:
    case "DEPRECATED_RESOURCE_USED":
      return Warnings_Code.DEPRECATED_RESOURCE_USED;
    case 346526230:
    case "DEPRECATED_TYPE_USED":
      return Warnings_Code.DEPRECATED_TYPE_USED;
    case 369442967:
    case "DISK_SIZE_LARGER_THAN_IMAGE_SIZE":
      return Warnings_Code.DISK_SIZE_LARGER_THAN_IMAGE_SIZE;
    case 451954443:
    case "EXPERIMENTAL_TYPE_USED":
      return Warnings_Code.EXPERIMENTAL_TYPE_USED;
    case 175546307:
    case "EXTERNAL_API_WARNING":
      return Warnings_Code.EXTERNAL_API_WARNING;
    case 329669423:
    case "FIELD_VALUE_OVERRIDEN":
      return Warnings_Code.FIELD_VALUE_OVERRIDEN;
    case 417377419:
    case "INJECTED_KERNELS_DEPRECATED":
      return Warnings_Code.INJECTED_KERNELS_DEPRECATED;
    case 344505463:
    case "MISSING_TYPE_DEPENDENCY":
      return Warnings_Code.MISSING_TYPE_DEPENDENCY;
    case 324964999:
    case "NEXT_HOP_ADDRESS_NOT_ASSIGNED":
      return Warnings_Code.NEXT_HOP_ADDRESS_NOT_ASSIGNED;
    case 383382887:
    case "NEXT_HOP_CANNOT_IP_FORWARD":
      return Warnings_Code.NEXT_HOP_CANNOT_IP_FORWARD;
    case 464250446:
    case "NEXT_HOP_INSTANCE_NOT_FOUND":
      return Warnings_Code.NEXT_HOP_INSTANCE_NOT_FOUND;
    case 243758146:
    case "NEXT_HOP_INSTANCE_NOT_ON_NETWORK":
      return Warnings_Code.NEXT_HOP_INSTANCE_NOT_ON_NETWORK;
    case 417081265:
    case "NEXT_HOP_NOT_RUNNING":
      return Warnings_Code.NEXT_HOP_NOT_RUNNING;
    case 105763924:
    case "NOT_CRITICAL_ERROR":
      return Warnings_Code.NOT_CRITICAL_ERROR;
    case 30036744:
    case "NO_RESULTS_ON_PAGE":
      return Warnings_Code.NO_RESULTS_ON_PAGE;
    case 3745539:
    case "REQUIRED_TOS_AGREEMENT":
      return Warnings_Code.REQUIRED_TOS_AGREEMENT;
    case 496728641:
    case "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING":
      return Warnings_Code.RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING;
    case 168598460:
    case "RESOURCE_NOT_DELETED":
      return Warnings_Code.RESOURCE_NOT_DELETED;
    case 275245642:
    case "SCHEMA_VALIDATION_IGNORED":
      return Warnings_Code.SCHEMA_VALIDATION_IGNORED;
    case 268305617:
    case "SINGLE_INSTANCE_PROPERTY_TEMPLATE":
      return Warnings_Code.SINGLE_INSTANCE_PROPERTY_TEMPLATE;
    case 390513439:
    case "UNDECLARED_PROPERTIES":
      return Warnings_Code.UNDECLARED_PROPERTIES;
    case 13328052:
    case "UNREACHABLE":
      return Warnings_Code.UNREACHABLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Warnings_Code.UNRECOGNIZED;
  }
}

export function warnings_CodeToJSON(object: Warnings_Code): string {
  switch (object) {
    case Warnings_Code.UNDEFINED_CODE:
      return "UNDEFINED_CODE";
    case Warnings_Code.CLEANUP_FAILED:
      return "CLEANUP_FAILED";
    case Warnings_Code.DEPRECATED_RESOURCE_USED:
      return "DEPRECATED_RESOURCE_USED";
    case Warnings_Code.DEPRECATED_TYPE_USED:
      return "DEPRECATED_TYPE_USED";
    case Warnings_Code.DISK_SIZE_LARGER_THAN_IMAGE_SIZE:
      return "DISK_SIZE_LARGER_THAN_IMAGE_SIZE";
    case Warnings_Code.EXPERIMENTAL_TYPE_USED:
      return "EXPERIMENTAL_TYPE_USED";
    case Warnings_Code.EXTERNAL_API_WARNING:
      return "EXTERNAL_API_WARNING";
    case Warnings_Code.FIELD_VALUE_OVERRIDEN:
      return "FIELD_VALUE_OVERRIDEN";
    case Warnings_Code.INJECTED_KERNELS_DEPRECATED:
      return "INJECTED_KERNELS_DEPRECATED";
    case Warnings_Code.MISSING_TYPE_DEPENDENCY:
      return "MISSING_TYPE_DEPENDENCY";
    case Warnings_Code.NEXT_HOP_ADDRESS_NOT_ASSIGNED:
      return "NEXT_HOP_ADDRESS_NOT_ASSIGNED";
    case Warnings_Code.NEXT_HOP_CANNOT_IP_FORWARD:
      return "NEXT_HOP_CANNOT_IP_FORWARD";
    case Warnings_Code.NEXT_HOP_INSTANCE_NOT_FOUND:
      return "NEXT_HOP_INSTANCE_NOT_FOUND";
    case Warnings_Code.NEXT_HOP_INSTANCE_NOT_ON_NETWORK:
      return "NEXT_HOP_INSTANCE_NOT_ON_NETWORK";
    case Warnings_Code.NEXT_HOP_NOT_RUNNING:
      return "NEXT_HOP_NOT_RUNNING";
    case Warnings_Code.NOT_CRITICAL_ERROR:
      return "NOT_CRITICAL_ERROR";
    case Warnings_Code.NO_RESULTS_ON_PAGE:
      return "NO_RESULTS_ON_PAGE";
    case Warnings_Code.REQUIRED_TOS_AGREEMENT:
      return "REQUIRED_TOS_AGREEMENT";
    case Warnings_Code.RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING:
      return "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING";
    case Warnings_Code.RESOURCE_NOT_DELETED:
      return "RESOURCE_NOT_DELETED";
    case Warnings_Code.SCHEMA_VALIDATION_IGNORED:
      return "SCHEMA_VALIDATION_IGNORED";
    case Warnings_Code.SINGLE_INSTANCE_PROPERTY_TEMPLATE:
      return "SINGLE_INSTANCE_PROPERTY_TEMPLATE";
    case Warnings_Code.UNDECLARED_PROPERTIES:
      return "UNDECLARED_PROPERTIES";
    case Warnings_Code.UNREACHABLE:
      return "UNREACHABLE";
    case Warnings_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAddress(): Address {
  return {
    address: undefined,
    addressType: undefined,
    creationTimestamp: undefined,
    description: undefined,
    id: undefined,
    ipVersion: undefined,
    kind: undefined,
    name: undefined,
    network: undefined,
    networkTier: undefined,
    prefixLength: undefined,
    purpose: undefined,
    region: undefined,
    selfLink: undefined,
    status: undefined,
    subnetwork: undefined,
    users: [],
  };
}

export const Address: MessageFns<Address> = {
  encode(message: Address, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== undefined) {
      writer.uint32(3703365538).string(message.address);
    }
    if (message.addressType !== undefined) {
      writer.uint32(2114463018).string(message.addressType);
    }
    if (message.creationTimestamp !== undefined) {
      writer.uint32(244202930).string(message.creationTimestamp);
    }
    if (message.description !== undefined) {
      writer.uint32(3383500770).string(message.description);
    }
    if (message.id !== undefined) {
      writer.uint32(26840).uint64(message.id.toString());
    }
    if (message.ipVersion !== undefined) {
      writer.uint32(2359676418).string(message.ipVersion);
    }
    if (message.kind !== undefined) {
      writer.uint32(26336418).string(message.kind);
    }
    if (message.name !== undefined) {
      writer.uint32(26989658).string(message.name);
    }
    if (message.network !== undefined) {
      writer.uint32(1862979954).string(message.network);
    }
    if (message.networkTier !== undefined) {
      writer.uint32(4139182746).string(message.networkTier);
    }
    if (message.prefixLength !== undefined) {
      writer.uint32(3628525976).int32(message.prefixLength);
    }
    if (message.purpose !== undefined) {
      writer.uint32(2531256562).string(message.purpose);
    }
    if (message.region !== undefined) {
      writer.uint32(1111570338).string(message.region);
    }
    if (message.selfLink !== undefined) {
      writer.uint32(3649718378).string(message.selfLink);
    }
    if (message.status !== undefined) {
      writer.uint32(1450082194).string(message.status);
    }
    if (message.subnetwork !== undefined) {
      writer.uint32(2462621554).string(message.subnetwork);
    }
    for (const v of message.users) {
      writer.uint32(892629058).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Address {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 462920692:
          if (tag !== 3703365538) {
            break;
          }

          message.address = reader.string();
          continue;
        case 264307877:
          if (tag !== 2114463018) {
            break;
          }

          message.addressType = reader.string();
          continue;
        case 30525366:
          if (tag !== 244202930) {
            break;
          }

          message.creationTimestamp = reader.string();
          continue;
        case 422937596:
          if (tag !== 3383500770) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3355:
          if (tag !== 26840) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 294959552:
          if (tag !== 2359676418) {
            break;
          }

          message.ipVersion = reader.string();
          continue;
        case 3292052:
          if (tag !== 26336418) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 3373707:
          if (tag !== 26989658) {
            break;
          }

          message.name = reader.string();
          continue;
        case 232872494:
          if (tag !== 1862979954) {
            break;
          }

          message.network = reader.string();
          continue;
        case 517397843:
          if (tag !== 4139182746) {
            break;
          }

          message.networkTier = reader.string();
          continue;
        case 453565747:
          if (tag !== 3628525976) {
            break;
          }

          message.prefixLength = reader.int32();
          continue;
        case 316407070:
          if (tag !== 2531256562) {
            break;
          }

          message.purpose = reader.string();
          continue;
        case 138946292:
          if (tag !== 1111570338) {
            break;
          }

          message.region = reader.string();
          continue;
        case 456214797:
          if (tag !== 3649718378) {
            break;
          }

          message.selfLink = reader.string();
          continue;
        case 181260274:
          if (tag !== 1450082194) {
            break;
          }

          message.status = reader.string();
          continue;
        case 307827694:
          if (tag !== 2462621554) {
            break;
          }

          message.subnetwork = reader.string();
          continue;
        case 111578632:
          if (tag !== 892629058) {
            break;
          }

          message.users.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Address {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : undefined,
      addressType: isSet(object.addressType) ? globalThis.String(object.addressType) : undefined,
      creationTimestamp: isSet(object.creationTimestamp) ? globalThis.String(object.creationTimestamp) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      ipVersion: isSet(object.ipVersion) ? globalThis.String(object.ipVersion) : undefined,
      kind: isSet(object.kind) ? globalThis.String(object.kind) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      network: isSet(object.network) ? globalThis.String(object.network) : undefined,
      networkTier: isSet(object.networkTier) ? globalThis.String(object.networkTier) : undefined,
      prefixLength: isSet(object.prefixLength) ? globalThis.Number(object.prefixLength) : undefined,
      purpose: isSet(object.purpose) ? globalThis.String(object.purpose) : undefined,
      region: isSet(object.region) ? globalThis.String(object.region) : undefined,
      selfLink: isSet(object.selfLink) ? globalThis.String(object.selfLink) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : undefined,
      subnetwork: isSet(object.subnetwork) ? globalThis.String(object.subnetwork) : undefined,
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Address): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.addressType !== undefined) {
      obj.addressType = message.addressType;
    }
    if (message.creationTimestamp !== undefined) {
      obj.creationTimestamp = message.creationTimestamp;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (message.ipVersion !== undefined) {
      obj.ipVersion = message.ipVersion;
    }
    if (message.kind !== undefined) {
      obj.kind = message.kind;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.network !== undefined) {
      obj.network = message.network;
    }
    if (message.networkTier !== undefined) {
      obj.networkTier = message.networkTier;
    }
    if (message.prefixLength !== undefined) {
      obj.prefixLength = Math.round(message.prefixLength);
    }
    if (message.purpose !== undefined) {
      obj.purpose = message.purpose;
    }
    if (message.region !== undefined) {
      obj.region = message.region;
    }
    if (message.selfLink !== undefined) {
      obj.selfLink = message.selfLink;
    }
    if (message.status !== undefined) {
      obj.status = message.status;
    }
    if (message.subnetwork !== undefined) {
      obj.subnetwork = message.subnetwork;
    }
    if (message.users?.length) {
      obj.users = message.users;
    }
    return obj;
  },

  create(base?: DeepPartial<Address>): Address {
    return Address.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Address>): Address {
    const message = createBaseAddress();
    message.address = object.address ?? undefined;
    message.addressType = object.addressType ?? undefined;
    message.creationTimestamp = object.creationTimestamp ?? undefined;
    message.description = object.description ?? undefined;
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.ipVersion = object.ipVersion ?? undefined;
    message.kind = object.kind ?? undefined;
    message.name = object.name ?? undefined;
    message.network = object.network ?? undefined;
    message.networkTier = object.networkTier ?? undefined;
    message.prefixLength = object.prefixLength ?? undefined;
    message.purpose = object.purpose ?? undefined;
    message.region = object.region ?? undefined;
    message.selfLink = object.selfLink ?? undefined;
    message.status = object.status ?? undefined;
    message.subnetwork = object.subnetwork ?? undefined;
    message.users = object.users?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddressAggregatedList(): AddressAggregatedList {
  return {
    id: undefined,
    items: {},
    kind: undefined,
    nextPageToken: undefined,
    selfLink: undefined,
    warning: undefined,
  };
}

export const AddressAggregatedList: MessageFns<AddressAggregatedList> = {
  encode(message: AddressAggregatedList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(26842).string(message.id);
    }
    Object.entries(message.items).forEach(([key, value]) => {
      AddressAggregatedList_ItemsEntry.encode({ key: key as any, value }, writer.uint32(804208130).fork()).join();
    });
    if (message.kind !== undefined) {
      writer.uint32(26336418).string(message.kind);
    }
    if (message.nextPageToken !== undefined) {
      writer.uint32(638380202).string(message.nextPageToken);
    }
    if (message.selfLink !== undefined) {
      writer.uint32(3649718378).string(message.selfLink);
    }
    if (message.warning !== undefined) {
      Warning.encode(message.warning, writer.uint32(405634274).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddressAggregatedList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddressAggregatedList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3355:
          if (tag !== 26842) {
            break;
          }

          message.id = reader.string();
          continue;
        case 100526016:
          if (tag !== 804208130) {
            break;
          }

          const entry100526016 = AddressAggregatedList_ItemsEntry.decode(reader, reader.uint32());
          if (entry100526016.value !== undefined) {
            message.items[entry100526016.key] = entry100526016.value;
          }
          continue;
        case 3292052:
          if (tag !== 26336418) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 79797525:
          if (tag !== 638380202) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 456214797:
          if (tag !== 3649718378) {
            break;
          }

          message.selfLink = reader.string();
          continue;
        case 50704284:
          if (tag !== 405634274) {
            break;
          }

          message.warning = Warning.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddressAggregatedList {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      items: isObject(object.items)
        ? Object.entries(object.items).reduce<{ [key: string]: AddressesScopedList }>((acc, [key, value]) => {
          acc[key] = AddressesScopedList.fromJSON(value);
          return acc;
        }, {})
        : {},
      kind: isSet(object.kind) ? globalThis.String(object.kind) : undefined,
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : undefined,
      selfLink: isSet(object.selfLink) ? globalThis.String(object.selfLink) : undefined,
      warning: isSet(object.warning) ? Warning.fromJSON(object.warning) : undefined,
    };
  },

  toJSON(message: AddressAggregatedList): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.items) {
      const entries = Object.entries(message.items);
      if (entries.length > 0) {
        obj.items = {};
        entries.forEach(([k, v]) => {
          obj.items[k] = AddressesScopedList.toJSON(v);
        });
      }
    }
    if (message.kind !== undefined) {
      obj.kind = message.kind;
    }
    if (message.nextPageToken !== undefined) {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.selfLink !== undefined) {
      obj.selfLink = message.selfLink;
    }
    if (message.warning !== undefined) {
      obj.warning = Warning.toJSON(message.warning);
    }
    return obj;
  },

  create(base?: DeepPartial<AddressAggregatedList>): AddressAggregatedList {
    return AddressAggregatedList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddressAggregatedList>): AddressAggregatedList {
    const message = createBaseAddressAggregatedList();
    message.id = object.id ?? undefined;
    message.items = Object.entries(object.items ?? {}).reduce<{ [key: string]: AddressesScopedList }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = AddressesScopedList.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.kind = object.kind ?? undefined;
    message.nextPageToken = object.nextPageToken ?? undefined;
    message.selfLink = object.selfLink ?? undefined;
    message.warning = (object.warning !== undefined && object.warning !== null)
      ? Warning.fromPartial(object.warning)
      : undefined;
    return message;
  },
};

function createBaseAddressAggregatedList_ItemsEntry(): AddressAggregatedList_ItemsEntry {
  return { key: "", value: undefined };
}

export const AddressAggregatedList_ItemsEntry: MessageFns<AddressAggregatedList_ItemsEntry> = {
  encode(message: AddressAggregatedList_ItemsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      AddressesScopedList.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddressAggregatedList_ItemsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddressAggregatedList_ItemsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = AddressesScopedList.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddressAggregatedList_ItemsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? AddressesScopedList.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: AddressAggregatedList_ItemsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = AddressesScopedList.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<AddressAggregatedList_ItemsEntry>): AddressAggregatedList_ItemsEntry {
    return AddressAggregatedList_ItemsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddressAggregatedList_ItemsEntry>): AddressAggregatedList_ItemsEntry {
    const message = createBaseAddressAggregatedList_ItemsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? AddressesScopedList.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseAddressList(): AddressList {
  return {
    id: undefined,
    items: [],
    kind: undefined,
    nextPageToken: undefined,
    selfLink: undefined,
    warning: undefined,
  };
}

export const AddressList: MessageFns<AddressList> = {
  encode(message: AddressList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(26842).string(message.id);
    }
    for (const v of message.items) {
      Address.encode(v!, writer.uint32(804208130).fork()).join();
    }
    if (message.kind !== undefined) {
      writer.uint32(26336418).string(message.kind);
    }
    if (message.nextPageToken !== undefined) {
      writer.uint32(638380202).string(message.nextPageToken);
    }
    if (message.selfLink !== undefined) {
      writer.uint32(3649718378).string(message.selfLink);
    }
    if (message.warning !== undefined) {
      Warning.encode(message.warning, writer.uint32(405634274).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddressList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddressList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3355:
          if (tag !== 26842) {
            break;
          }

          message.id = reader.string();
          continue;
        case 100526016:
          if (tag !== 804208130) {
            break;
          }

          message.items.push(Address.decode(reader, reader.uint32()));
          continue;
        case 3292052:
          if (tag !== 26336418) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 79797525:
          if (tag !== 638380202) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 456214797:
          if (tag !== 3649718378) {
            break;
          }

          message.selfLink = reader.string();
          continue;
        case 50704284:
          if (tag !== 405634274) {
            break;
          }

          message.warning = Warning.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddressList {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => Address.fromJSON(e)) : [],
      kind: isSet(object.kind) ? globalThis.String(object.kind) : undefined,
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : undefined,
      selfLink: isSet(object.selfLink) ? globalThis.String(object.selfLink) : undefined,
      warning: isSet(object.warning) ? Warning.fromJSON(object.warning) : undefined,
    };
  },

  toJSON(message: AddressList): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => Address.toJSON(e));
    }
    if (message.kind !== undefined) {
      obj.kind = message.kind;
    }
    if (message.nextPageToken !== undefined) {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.selfLink !== undefined) {
      obj.selfLink = message.selfLink;
    }
    if (message.warning !== undefined) {
      obj.warning = Warning.toJSON(message.warning);
    }
    return obj;
  },

  create(base?: DeepPartial<AddressList>): AddressList {
    return AddressList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddressList>): AddressList {
    const message = createBaseAddressList();
    message.id = object.id ?? undefined;
    message.items = object.items?.map((e) => Address.fromPartial(e)) || [];
    message.kind = object.kind ?? undefined;
    message.nextPageToken = object.nextPageToken ?? undefined;
    message.selfLink = object.selfLink ?? undefined;
    message.warning = (object.warning !== undefined && object.warning !== null)
      ? Warning.fromPartial(object.warning)
      : undefined;
    return message;
  },
};

function createBaseAddressesScopedList(): AddressesScopedList {
  return { addresses: [], warning: undefined };
}

export const AddressesScopedList: MessageFns<AddressesScopedList> = {
  encode(message: AddressesScopedList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.addresses) {
      Address.encode(v!, writer.uint32(2701384978).fork()).join();
    }
    if (message.warning !== undefined) {
      Warning.encode(message.warning, writer.uint32(405634274).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddressesScopedList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddressesScopedList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 337673122:
          if (tag !== 2701384978) {
            break;
          }

          message.addresses.push(Address.decode(reader, reader.uint32()));
          continue;
        case 50704284:
          if (tag !== 405634274) {
            break;
          }

          message.warning = Warning.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddressesScopedList {
    return {
      addresses: globalThis.Array.isArray(object?.addresses)
        ? object.addresses.map((e: any) => Address.fromJSON(e))
        : [],
      warning: isSet(object.warning) ? Warning.fromJSON(object.warning) : undefined,
    };
  },

  toJSON(message: AddressesScopedList): unknown {
    const obj: any = {};
    if (message.addresses?.length) {
      obj.addresses = message.addresses.map((e) => Address.toJSON(e));
    }
    if (message.warning !== undefined) {
      obj.warning = Warning.toJSON(message.warning);
    }
    return obj;
  },

  create(base?: DeepPartial<AddressesScopedList>): AddressesScopedList {
    return AddressesScopedList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddressesScopedList>): AddressesScopedList {
    const message = createBaseAddressesScopedList();
    message.addresses = object.addresses?.map((e) => Address.fromPartial(e)) || [];
    message.warning = (object.warning !== undefined && object.warning !== null)
      ? Warning.fromPartial(object.warning)
      : undefined;
    return message;
  },
};

function createBaseAggregatedListAddressesRequest(): AggregatedListAddressesRequest {
  return {
    filter: undefined,
    includeAllScopes: undefined,
    maxResults: undefined,
    orderBy: undefined,
    pageToken: undefined,
    project: "",
  };
}

export const AggregatedListAddressesRequest: MessageFns<AggregatedListAddressesRequest> = {
  encode(message: AggregatedListAddressesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      writer.uint32(2688965570).string(message.filter);
    }
    if (message.includeAllScopes !== undefined) {
      writer.uint32(3130623904).bool(message.includeAllScopes);
    }
    if (message.maxResults !== undefined) {
      writer.uint32(437723352).uint32(message.maxResults);
    }
    if (message.orderBy !== undefined) {
      writer.uint32(1284503362).string(message.orderBy);
    }
    if (message.pageToken !== undefined) {
      writer.uint32(159957578).string(message.pageToken);
    }
    if (message.project !== "") {
      writer.uint32(1820481738).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AggregatedListAddressesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAggregatedListAddressesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 336120696:
          if (tag !== 2688965570) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 391327988:
          if (tag !== 3130623904) {
            break;
          }

          message.includeAllScopes = reader.bool();
          continue;
        case 54715419:
          if (tag !== 437723352) {
            break;
          }

          message.maxResults = reader.uint32();
          continue;
        case 160562920:
          if (tag !== 1284503362) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 19994697:
          if (tag !== 159957578) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 227560217:
          if (tag !== 1820481738) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AggregatedListAddressesRequest {
    return {
      filter: isSet(object.filter) ? globalThis.String(object.filter) : undefined,
      includeAllScopes: isSet(object.includeAllScopes) ? globalThis.Boolean(object.includeAllScopes) : undefined,
      maxResults: isSet(object.maxResults) ? globalThis.Number(object.maxResults) : undefined,
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : undefined,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : undefined,
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: AggregatedListAddressesRequest): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = message.filter;
    }
    if (message.includeAllScopes !== undefined) {
      obj.includeAllScopes = message.includeAllScopes;
    }
    if (message.maxResults !== undefined) {
      obj.maxResults = Math.round(message.maxResults);
    }
    if (message.orderBy !== undefined) {
      obj.orderBy = message.orderBy;
    }
    if (message.pageToken !== undefined) {
      obj.pageToken = message.pageToken;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<AggregatedListAddressesRequest>): AggregatedListAddressesRequest {
    return AggregatedListAddressesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AggregatedListAddressesRequest>): AggregatedListAddressesRequest {
    const message = createBaseAggregatedListAddressesRequest();
    message.filter = object.filter ?? undefined;
    message.includeAllScopes = object.includeAllScopes ?? undefined;
    message.maxResults = object.maxResults ?? undefined;
    message.orderBy = object.orderBy ?? undefined;
    message.pageToken = object.pageToken ?? undefined;
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseData(): Data {
  return { key: undefined, value: undefined };
}

export const Data: MessageFns<Data> = {
  encode(message: Data, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      writer.uint32(848634).string(message.key);
    }
    if (message.value !== undefined) {
      writer.uint32(895781770).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Data {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 106079:
          if (tag !== 848634) {
            break;
          }

          message.key = reader.string();
          continue;
        case 111972721:
          if (tag !== 895781770) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Data {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : undefined,
      value: isSet(object.value) ? globalThis.String(object.value) : undefined,
    };
  },

  toJSON(message: Data): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Data>): Data {
    return Data.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Data>): Data {
    const message = createBaseData();
    message.key = object.key ?? undefined;
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseDeleteAddressRequest(): DeleteAddressRequest {
  return { address: "", project: "", region: "", requestId: undefined };
}

export const DeleteAddressRequest: MessageFns<DeleteAddressRequest> = {
  encode(message: DeleteAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(3703365538).string(message.address);
    }
    if (message.project !== "") {
      writer.uint32(1820481738).string(message.project);
    }
    if (message.region !== "") {
      writer.uint32(1111570338).string(message.region);
    }
    if (message.requestId !== undefined) {
      writer.uint32(296879706).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 462920692:
          if (tag !== 3703365538) {
            break;
          }

          message.address = reader.string();
          continue;
        case 227560217:
          if (tag !== 1820481738) {
            break;
          }

          message.project = reader.string();
          continue;
        case 138946292:
          if (tag !== 1111570338) {
            break;
          }

          message.region = reader.string();
          continue;
        case 37109963:
          if (tag !== 296879706) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAddressRequest {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : undefined,
    };
  },

  toJSON(message: DeleteAddressRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.requestId !== undefined) {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAddressRequest>): DeleteAddressRequest {
    return DeleteAddressRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAddressRequest>): DeleteAddressRequest {
    const message = createBaseDeleteAddressRequest();
    message.address = object.address ?? "";
    message.project = object.project ?? "";
    message.region = object.region ?? "";
    message.requestId = object.requestId ?? undefined;
    return message;
  },
};

function createBaseError(): Error {
  return { errors: [] };
}

export const Error: MessageFns<Error> = {
  encode(message: Error, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.errors) {
      Errors.encode(v!, writer.uint32(2527820634).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Error {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 315977579:
          if (tag !== 2527820634) {
            break;
          }

          message.errors.push(Errors.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Error {
    return {
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => Errors.fromJSON(e)) : [],
    };
  },

  toJSON(message: Error): unknown {
    const obj: any = {};
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => Errors.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Error>): Error {
    return Error.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Error>): Error {
    const message = createBaseError();
    message.errors = object.errors?.map((e) => Errors.fromPartial(e)) || [];
    return message;
  },
};

function createBaseErrors(): Errors {
  return { code: undefined, location: undefined, message: undefined };
}

export const Errors: MessageFns<Errors> = {
  encode(message: Errors, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== undefined) {
      writer.uint32(24473450).string(message.code);
    }
    if (message.location !== undefined) {
      writer.uint32(2323447210).string(message.location);
    }
    if (message.message !== undefined) {
      writer.uint32(3344433210).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Errors {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrors();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3059181:
          if (tag !== 24473450) {
            break;
          }

          message.code = reader.string();
          continue;
        case 290430901:
          if (tag !== 2323447210) {
            break;
          }

          message.location = reader.string();
          continue;
        case 418054151:
          if (tag !== 3344433210) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Errors {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : undefined,
      location: isSet(object.location) ? globalThis.String(object.location) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
    };
  },

  toJSON(message: Errors): unknown {
    const obj: any = {};
    if (message.code !== undefined) {
      obj.code = message.code;
    }
    if (message.location !== undefined) {
      obj.location = message.location;
    }
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<Errors>): Errors {
    return Errors.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Errors>): Errors {
    const message = createBaseErrors();
    message.code = object.code ?? undefined;
    message.location = object.location ?? undefined;
    message.message = object.message ?? undefined;
    return message;
  },
};

function createBaseGetRegionOperationRequest(): GetRegionOperationRequest {
  return { operation: "", project: "", region: "" };
}

export const GetRegionOperationRequest: MessageFns<GetRegionOperationRequest> = {
  encode(message: GetRegionOperationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operation !== "") {
      writer.uint32(416721722).string(message.operation);
    }
    if (message.project !== "") {
      writer.uint32(1820481738).string(message.project);
    }
    if (message.region !== "") {
      writer.uint32(1111570338).string(message.region);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRegionOperationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRegionOperationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 52090215:
          if (tag !== 416721722) {
            break;
          }

          message.operation = reader.string();
          continue;
        case 227560217:
          if (tag !== 1820481738) {
            break;
          }

          message.project = reader.string();
          continue;
        case 138946292:
          if (tag !== 1111570338) {
            break;
          }

          message.region = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRegionOperationRequest {
    return {
      operation: isSet(object.operation) ? globalThis.String(object.operation) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
    };
  },

  toJSON(message: GetRegionOperationRequest): unknown {
    const obj: any = {};
    if (message.operation !== "") {
      obj.operation = message.operation;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRegionOperationRequest>): GetRegionOperationRequest {
    return GetRegionOperationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRegionOperationRequest>): GetRegionOperationRequest {
    const message = createBaseGetRegionOperationRequest();
    message.operation = object.operation ?? "";
    message.project = object.project ?? "";
    message.region = object.region ?? "";
    return message;
  },
};

function createBaseInsertAddressRequest(): InsertAddressRequest {
  return { addressResource: undefined, project: "", region: "", requestId: undefined };
}

export const InsertAddressRequest: MessageFns<InsertAddressRequest> = {
  encode(message: InsertAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.addressResource !== undefined) {
      Address.encode(message.addressResource, writer.uint32(3871104970).fork()).join();
    }
    if (message.project !== "") {
      writer.uint32(1820481738).string(message.project);
    }
    if (message.region !== "") {
      writer.uint32(1111570338).string(message.region);
    }
    if (message.requestId !== undefined) {
      writer.uint32(296879706).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsertAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 483888121:
          if (tag !== 3871104970) {
            break;
          }

          message.addressResource = Address.decode(reader, reader.uint32());
          continue;
        case 227560217:
          if (tag !== 1820481738) {
            break;
          }

          message.project = reader.string();
          continue;
        case 138946292:
          if (tag !== 1111570338) {
            break;
          }

          message.region = reader.string();
          continue;
        case 37109963:
          if (tag !== 296879706) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsertAddressRequest {
    return {
      addressResource: isSet(object.addressResource) ? Address.fromJSON(object.addressResource) : undefined,
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : undefined,
    };
  },

  toJSON(message: InsertAddressRequest): unknown {
    const obj: any = {};
    if (message.addressResource !== undefined) {
      obj.addressResource = Address.toJSON(message.addressResource);
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.requestId !== undefined) {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<InsertAddressRequest>): InsertAddressRequest {
    return InsertAddressRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsertAddressRequest>): InsertAddressRequest {
    const message = createBaseInsertAddressRequest();
    message.addressResource = (object.addressResource !== undefined && object.addressResource !== null)
      ? Address.fromPartial(object.addressResource)
      : undefined;
    message.project = object.project ?? "";
    message.region = object.region ?? "";
    message.requestId = object.requestId ?? undefined;
    return message;
  },
};

function createBaseListAddressesRequest(): ListAddressesRequest {
  return { filter: undefined, maxResults: undefined, orderBy: "", pageToken: undefined, project: "", region: "" };
}

export const ListAddressesRequest: MessageFns<ListAddressesRequest> = {
  encode(message: ListAddressesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      writer.uint32(2688965570).string(message.filter);
    }
    if (message.maxResults !== undefined) {
      writer.uint32(437723352).uint32(message.maxResults);
    }
    if (message.orderBy !== "") {
      writer.uint32(1284503362).string(message.orderBy);
    }
    if (message.pageToken !== undefined) {
      writer.uint32(159957578).string(message.pageToken);
    }
    if (message.project !== "") {
      writer.uint32(1820481738).string(message.project);
    }
    if (message.region !== "") {
      writer.uint32(1111570338).string(message.region);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAddressesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAddressesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 336120696:
          if (tag !== 2688965570) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 54715419:
          if (tag !== 437723352) {
            break;
          }

          message.maxResults = reader.uint32();
          continue;
        case 160562920:
          if (tag !== 1284503362) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 19994697:
          if (tag !== 159957578) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 227560217:
          if (tag !== 1820481738) {
            break;
          }

          message.project = reader.string();
          continue;
        case 138946292:
          if (tag !== 1111570338) {
            break;
          }

          message.region = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAddressesRequest {
    return {
      filter: isSet(object.filter) ? globalThis.String(object.filter) : undefined,
      maxResults: isSet(object.maxResults) ? globalThis.Number(object.maxResults) : undefined,
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : undefined,
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
    };
  },

  toJSON(message: ListAddressesRequest): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = message.filter;
    }
    if (message.maxResults !== undefined) {
      obj.maxResults = Math.round(message.maxResults);
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.pageToken !== undefined) {
      obj.pageToken = message.pageToken;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAddressesRequest>): ListAddressesRequest {
    return ListAddressesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAddressesRequest>): ListAddressesRequest {
    const message = createBaseListAddressesRequest();
    message.filter = object.filter ?? undefined;
    message.maxResults = object.maxResults ?? undefined;
    message.orderBy = object.orderBy ?? "";
    message.pageToken = object.pageToken ?? undefined;
    message.project = object.project ?? "";
    message.region = object.region ?? "";
    return message;
  },
};

function createBaseOperation(): Operation {
  return {
    clientOperationId: undefined,
    creationTimestamp: undefined,
    description: undefined,
    endTime: undefined,
    error: undefined,
    httpErrorMessage: undefined,
    httpErrorStatusCode: undefined,
    id: undefined,
    insertTime: undefined,
    kind: undefined,
    name: undefined,
    operationType: undefined,
    progress: undefined,
    region: undefined,
    selfLink: undefined,
    startTime: undefined,
    status: undefined,
    statusMessage: undefined,
    targetId: undefined,
    targetLink: undefined,
    user: undefined,
    warnings: [],
    zone: undefined,
  };
}

export const Operation: MessageFns<Operation> = {
  encode(message: Operation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientOperationId !== undefined) {
      writer.uint32(2377922362).string(message.clientOperationId);
    }
    if (message.creationTimestamp !== undefined) {
      writer.uint32(244202930).string(message.creationTimestamp);
    }
    if (message.description !== undefined) {
      writer.uint32(3383500770).string(message.description);
    }
    if (message.endTime !== undefined) {
      writer.uint32(919510410).string(message.endTime);
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(774279234).fork()).join();
    }
    if (message.httpErrorMessage !== undefined) {
      writer.uint32(1620175562).string(message.httpErrorMessage);
    }
    if (message.httpErrorStatusCode !== undefined) {
      writer.uint32(2498761568).int32(message.httpErrorStatusCode);
    }
    if (message.id !== undefined) {
      writer.uint32(26840).uint64(message.id.toString());
    }
    if (message.insertTime !== undefined) {
      writer.uint32(3469780122).string(message.insertTime);
    }
    if (message.kind !== undefined) {
      writer.uint32(26336418).string(message.kind);
    }
    if (message.name !== undefined) {
      writer.uint32(26989658).string(message.name);
    }
    if (message.operationType !== undefined) {
      writer.uint32(1421203602).string(message.operationType);
    }
    if (message.progress !== undefined) {
      writer.uint32(581308776).int32(message.progress);
    }
    if (message.region !== undefined) {
      writer.uint32(1111570338).string(message.region);
    }
    if (message.selfLink !== undefined) {
      writer.uint32(3649718378).string(message.selfLink);
    }
    if (message.startTime !== undefined) {
      writer.uint32(299738194).string(message.startTime);
    }
    if (message.status !== undefined) {
      writer.uint32(1450082192).int32(message.status);
    }
    if (message.statusMessage !== undefined) {
      writer.uint32(2379425234).string(message.statusMessage);
    }
    if (message.targetId !== undefined) {
      writer.uint32(2065323080).uint64(message.targetId.toString());
    }
    if (message.targetLink !== undefined) {
      writer.uint32(501370690).string(message.targetLink);
    }
    if (message.user !== undefined) {
      writer.uint32(28794458).string(message.user);
    }
    for (const v of message.warnings) {
      Warnings.encode(v!, writer.uint32(3984728762).fork()).join();
    }
    if (message.zone !== undefined) {
      writer.uint32(29957474).string(message.zone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Operation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 297240295:
          if (tag !== 2377922362) {
            break;
          }

          message.clientOperationId = reader.string();
          continue;
        case 30525366:
          if (tag !== 244202930) {
            break;
          }

          message.creationTimestamp = reader.string();
          continue;
        case 422937596:
          if (tag !== 3383500770) {
            break;
          }

          message.description = reader.string();
          continue;
        case 114938801:
          if (tag !== 919510410) {
            break;
          }

          message.endTime = reader.string();
          continue;
        case 96784904:
          if (tag !== 774279234) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        case 202521945:
          if (tag !== 1620175562) {
            break;
          }

          message.httpErrorMessage = reader.string();
          continue;
        case 312345196:
          if (tag !== 2498761568) {
            break;
          }

          message.httpErrorStatusCode = reader.int32();
          continue;
        case 3355:
          if (tag !== 26840) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 433722515:
          if (tag !== 3469780122) {
            break;
          }

          message.insertTime = reader.string();
          continue;
        case 3292052:
          if (tag !== 26336418) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 3373707:
          if (tag !== 26989658) {
            break;
          }

          message.name = reader.string();
          continue;
        case 177650450:
          if (tag !== 1421203602) {
            break;
          }

          message.operationType = reader.string();
          continue;
        case 72663597:
          if (tag !== 581308776) {
            break;
          }

          message.progress = reader.int32();
          continue;
        case 138946292:
          if (tag !== 1111570338) {
            break;
          }

          message.region = reader.string();
          continue;
        case 456214797:
          if (tag !== 3649718378) {
            break;
          }

          message.selfLink = reader.string();
          continue;
        case 37467274:
          if (tag !== 299738194) {
            break;
          }

          message.startTime = reader.string();
          continue;
        case 181260274:
          if (tag !== 1450082192) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 297428154:
          if (tag !== 2379425234) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 258165385:
          if (tag !== 2065323080) {
            break;
          }

          message.targetId = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 62671336:
          if (tag !== 501370690) {
            break;
          }

          message.targetLink = reader.string();
          continue;
        case 3599307:
          if (tag !== 28794458) {
            break;
          }

          message.user = reader.string();
          continue;
        case 498091095:
          if (tag !== 3984728762) {
            break;
          }

          message.warnings.push(Warnings.decode(reader, reader.uint32()));
          continue;
        case 3744684:
          if (tag !== 29957474) {
            break;
          }

          message.zone = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Operation {
    return {
      clientOperationId: isSet(object.clientOperationId) ? globalThis.String(object.clientOperationId) : undefined,
      creationTimestamp: isSet(object.creationTimestamp) ? globalThis.String(object.creationTimestamp) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
      httpErrorMessage: isSet(object.httpErrorMessage) ? globalThis.String(object.httpErrorMessage) : undefined,
      httpErrorStatusCode: isSet(object.httpErrorStatusCode)
        ? globalThis.Number(object.httpErrorStatusCode)
        : undefined,
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      insertTime: isSet(object.insertTime) ? globalThis.String(object.insertTime) : undefined,
      kind: isSet(object.kind) ? globalThis.String(object.kind) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      operationType: isSet(object.operationType) ? globalThis.String(object.operationType) : undefined,
      progress: isSet(object.progress) ? globalThis.Number(object.progress) : undefined,
      region: isSet(object.region) ? globalThis.String(object.region) : undefined,
      selfLink: isSet(object.selfLink) ? globalThis.String(object.selfLink) : undefined,
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : undefined,
      status: isSet(object.status) ? operation_StatusFromJSON(object.status) : undefined,
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : undefined,
      targetId: isSet(object.targetId) ? Long.fromValue(object.targetId) : undefined,
      targetLink: isSet(object.targetLink) ? globalThis.String(object.targetLink) : undefined,
      user: isSet(object.user) ? globalThis.String(object.user) : undefined,
      warnings: globalThis.Array.isArray(object?.warnings) ? object.warnings.map((e: any) => Warnings.fromJSON(e)) : [],
      zone: isSet(object.zone) ? globalThis.String(object.zone) : undefined,
    };
  },

  toJSON(message: Operation): unknown {
    const obj: any = {};
    if (message.clientOperationId !== undefined) {
      obj.clientOperationId = message.clientOperationId;
    }
    if (message.creationTimestamp !== undefined) {
      obj.creationTimestamp = message.creationTimestamp;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime;
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    if (message.httpErrorMessage !== undefined) {
      obj.httpErrorMessage = message.httpErrorMessage;
    }
    if (message.httpErrorStatusCode !== undefined) {
      obj.httpErrorStatusCode = Math.round(message.httpErrorStatusCode);
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (message.insertTime !== undefined) {
      obj.insertTime = message.insertTime;
    }
    if (message.kind !== undefined) {
      obj.kind = message.kind;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.operationType !== undefined) {
      obj.operationType = message.operationType;
    }
    if (message.progress !== undefined) {
      obj.progress = Math.round(message.progress);
    }
    if (message.region !== undefined) {
      obj.region = message.region;
    }
    if (message.selfLink !== undefined) {
      obj.selfLink = message.selfLink;
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime;
    }
    if (message.status !== undefined) {
      obj.status = operation_StatusToJSON(message.status);
    }
    if (message.statusMessage !== undefined) {
      obj.statusMessage = message.statusMessage;
    }
    if (message.targetId !== undefined) {
      obj.targetId = (message.targetId || Long.UZERO).toString();
    }
    if (message.targetLink !== undefined) {
      obj.targetLink = message.targetLink;
    }
    if (message.user !== undefined) {
      obj.user = message.user;
    }
    if (message.warnings?.length) {
      obj.warnings = message.warnings.map((e) => Warnings.toJSON(e));
    }
    if (message.zone !== undefined) {
      obj.zone = message.zone;
    }
    return obj;
  },

  create(base?: DeepPartial<Operation>): Operation {
    return Operation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Operation>): Operation {
    const message = createBaseOperation();
    message.clientOperationId = object.clientOperationId ?? undefined;
    message.creationTimestamp = object.creationTimestamp ?? undefined;
    message.description = object.description ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    message.httpErrorMessage = object.httpErrorMessage ?? undefined;
    message.httpErrorStatusCode = object.httpErrorStatusCode ?? undefined;
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.insertTime = object.insertTime ?? undefined;
    message.kind = object.kind ?? undefined;
    message.name = object.name ?? undefined;
    message.operationType = object.operationType ?? undefined;
    message.progress = object.progress ?? undefined;
    message.region = object.region ?? undefined;
    message.selfLink = object.selfLink ?? undefined;
    message.startTime = object.startTime ?? undefined;
    message.status = object.status ?? undefined;
    message.statusMessage = object.statusMessage ?? undefined;
    message.targetId = (object.targetId !== undefined && object.targetId !== null)
      ? Long.fromValue(object.targetId)
      : undefined;
    message.targetLink = object.targetLink ?? undefined;
    message.user = object.user ?? undefined;
    message.warnings = object.warnings?.map((e) => Warnings.fromPartial(e)) || [];
    message.zone = object.zone ?? undefined;
    return message;
  },
};

function createBaseWaitRegionOperationRequest(): WaitRegionOperationRequest {
  return { operation: "", project: "", region: "" };
}

export const WaitRegionOperationRequest: MessageFns<WaitRegionOperationRequest> = {
  encode(message: WaitRegionOperationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operation !== "") {
      writer.uint32(416721722).string(message.operation);
    }
    if (message.project !== "") {
      writer.uint32(1820481738).string(message.project);
    }
    if (message.region !== "") {
      writer.uint32(1111570338).string(message.region);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WaitRegionOperationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWaitRegionOperationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 52090215:
          if (tag !== 416721722) {
            break;
          }

          message.operation = reader.string();
          continue;
        case 227560217:
          if (tag !== 1820481738) {
            break;
          }

          message.project = reader.string();
          continue;
        case 138946292:
          if (tag !== 1111570338) {
            break;
          }

          message.region = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WaitRegionOperationRequest {
    return {
      operation: isSet(object.operation) ? globalThis.String(object.operation) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
    };
  },

  toJSON(message: WaitRegionOperationRequest): unknown {
    const obj: any = {};
    if (message.operation !== "") {
      obj.operation = message.operation;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    return obj;
  },

  create(base?: DeepPartial<WaitRegionOperationRequest>): WaitRegionOperationRequest {
    return WaitRegionOperationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WaitRegionOperationRequest>): WaitRegionOperationRequest {
    const message = createBaseWaitRegionOperationRequest();
    message.operation = object.operation ?? "";
    message.project = object.project ?? "";
    message.region = object.region ?? "";
    return message;
  },
};

function createBaseWarning(): Warning {
  return { code: undefined, data: [], message: undefined };
}

export const Warning: MessageFns<Warning> = {
  encode(message: Warning, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== undefined) {
      writer.uint32(24473450).string(message.code);
    }
    for (const v of message.data) {
      Data.encode(v!, writer.uint32(24608082).fork()).join();
    }
    if (message.message !== undefined) {
      writer.uint32(3344433210).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Warning {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWarning();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3059181:
          if (tag !== 24473450) {
            break;
          }

          message.code = reader.string();
          continue;
        case 3076010:
          if (tag !== 24608082) {
            break;
          }

          message.data.push(Data.decode(reader, reader.uint32()));
          continue;
        case 418054151:
          if (tag !== 3344433210) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Warning {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : undefined,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => Data.fromJSON(e)) : [],
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
    };
  },

  toJSON(message: Warning): unknown {
    const obj: any = {};
    if (message.code !== undefined) {
      obj.code = message.code;
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => Data.toJSON(e));
    }
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<Warning>): Warning {
    return Warning.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Warning>): Warning {
    const message = createBaseWarning();
    message.code = object.code ?? undefined;
    message.data = object.data?.map((e) => Data.fromPartial(e)) || [];
    message.message = object.message ?? undefined;
    return message;
  },
};

function createBaseWarnings(): Warnings {
  return { code: undefined, data: [], message: undefined };
}

export const Warnings: MessageFns<Warnings> = {
  encode(message: Warnings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== undefined) {
      writer.uint32(24473450).string(message.code);
    }
    for (const v of message.data) {
      Data.encode(v!, writer.uint32(24608082).fork()).join();
    }
    if (message.message !== undefined) {
      writer.uint32(3344433210).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Warnings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWarnings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3059181:
          if (tag !== 24473450) {
            break;
          }

          message.code = reader.string();
          continue;
        case 3076010:
          if (tag !== 24608082) {
            break;
          }

          message.data.push(Data.decode(reader, reader.uint32()));
          continue;
        case 418054151:
          if (tag !== 3344433210) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Warnings {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : undefined,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => Data.fromJSON(e)) : [],
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
    };
  },

  toJSON(message: Warnings): unknown {
    const obj: any = {};
    if (message.code !== undefined) {
      obj.code = message.code;
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => Data.toJSON(e));
    }
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<Warnings>): Warnings {
    return Warnings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Warnings>): Warnings {
    const message = createBaseWarnings();
    message.code = object.code ?? undefined;
    message.data = object.data?.map((e) => Data.fromPartial(e)) || [];
    message.message = object.message ?? undefined;
    return message;
  },
};

/**
 * Services
 *
 * The Addresses API.
 */
export type AddressesDefinition = typeof AddressesDefinition;
export const AddressesDefinition = {
  name: "Addresses",
  fullName: "google.cloud.compute.v1small.Addresses",
  methods: {
    /** Retrieves an aggregated list of addresses. */
    aggregatedList: {
      name: "AggregatedList",
      requestType: AggregatedListAddressesRequest,
      requestStream: false,
      responseType: AddressAggregatedList,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([7, 112, 114, 111, 106, 101, 99, 116])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              99,
              111,
              109,
              112,
              117,
              116,
              101,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              97,
              103,
              103,
              114,
              101,
              103,
              97,
              116,
              101,
              100,
              47,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes the specified address resource. */
    delete: {
      name: "Delete",
      requestType: DeleteAddressRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              44,
              114,
              101,
              103,
              105,
              111,
              110,
              44,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
            ]),
          ],
          9994: [Buffer.from([16, 82, 101, 103, 105, 111, 110, 79, 112, 101, 114, 97, 116, 105, 111, 110, 115])],
          578365826: [
            Buffer.from([
              69,
              42,
              67,
              47,
              99,
              111,
              109,
              112,
              117,
              116,
              101,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
              47,
              123,
              114,
              101,
              103,
              105,
              111,
              110,
              125,
              47,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              101,
              115,
              47,
              123,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates an address resource in the specified project by using the data included in the request. */
    insert: {
      name: "Insert",
      requestType: InsertAddressRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              31,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              44,
              114,
              101,
              103,
              105,
              111,
              110,
              44,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              95,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
            ]),
          ],
          9994: [Buffer.from([16, 82, 101, 103, 105, 111, 110, 79, 112, 101, 114, 97, 116, 105, 111, 110, 115])],
          578365826: [
            Buffer.from([
              77,
              58,
              16,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              95,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              57,
              47,
              99,
              111,
              109,
              112,
              117,
              116,
              101,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
              47,
              123,
              114,
              101,
              103,
              105,
              111,
              110,
              125,
              47,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves a list of addresses contained within the specified region. */
    list: {
      name: "List",
      requestType: ListAddressesRequest,
      requestStream: false,
      responseType: AddressList,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              44,
              114,
              101,
              103,
              105,
              111,
              110,
              44,
              111,
              114,
              100,
              101,
              114,
              95,
              98,
              121,
            ]),
          ],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              99,
              111,
              109,
              112,
              117,
              116,
              101,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
              47,
              123,
              114,
              101,
              103,
              105,
              111,
              110,
              125,
              47,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AddressesServiceImplementation<CallContextExt = {}> {
  /** Retrieves an aggregated list of addresses. */
  aggregatedList(
    request: AggregatedListAddressesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddressAggregatedList>>;
  /** Deletes the specified address resource. */
  delete(request: DeleteAddressRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Creates an address resource in the specified project by using the data included in the request. */
  insert(request: InsertAddressRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Retrieves a list of addresses contained within the specified region. */
  list(request: ListAddressesRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AddressList>>;
}

export interface AddressesClient<CallOptionsExt = {}> {
  /** Retrieves an aggregated list of addresses. */
  aggregatedList(
    request: DeepPartial<AggregatedListAddressesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddressAggregatedList>;
  /** Deletes the specified address resource. */
  delete(request: DeepPartial<DeleteAddressRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Creates an address resource in the specified project by using the data included in the request. */
  insert(request: DeepPartial<InsertAddressRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Retrieves a list of addresses contained within the specified region. */
  list(request: DeepPartial<ListAddressesRequest>, options?: CallOptions & CallOptionsExt): Promise<AddressList>;
}

/** The RegionOperations API. */
export type RegionOperationsDefinition = typeof RegionOperationsDefinition;
export const RegionOperationsDefinition = {
  name: "RegionOperations",
  fullName: "google.cloud.compute.v1small.RegionOperations",
  methods: {
    /** Retrieves the specified region-specific Operations resource. */
    get: {
      name: "Get",
      requestType: GetRegionOperationRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              44,
              114,
              101,
              103,
              105,
              111,
              110,
              44,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
          10000: [Buffer.from([1])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              99,
              111,
              109,
              112,
              117,
              116,
              101,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
              47,
              123,
              114,
              101,
              103,
              105,
              111,
              110,
              125,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
     *
     * This method is called on a best-effort basis. Specifically:
     * - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
     * - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
     */
    wait: {
      name: "Wait",
      requestType: WaitRegionOperationRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              44,
              114,
              101,
              103,
              105,
              111,
              110,
              44,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              86,
              34,
              84,
              47,
              99,
              111,
              109,
              112,
              117,
              116,
              101,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
              47,
              123,
              114,
              101,
              103,
              105,
              111,
              110,
              125,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              125,
              47,
              119,
              97,
              105,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface RegionOperationsServiceImplementation<CallContextExt = {}> {
  /** Retrieves the specified region-specific Operations resource. */
  get(request: GetRegionOperationRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
   *
   * This method is called on a best-effort basis. Specifically:
   * - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
   * - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
   */
  wait(request: WaitRegionOperationRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface RegionOperationsClient<CallOptionsExt = {}> {
  /** Retrieves the specified region-specific Operations resource. */
  get(request: DeepPartial<GetRegionOperationRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
   *
   * This method is called on a best-effort basis. Specifically:
   * - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
   * - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
   */
  wait(request: DeepPartial<WaitRegionOperationRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
