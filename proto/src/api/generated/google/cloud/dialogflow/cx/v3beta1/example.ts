// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3beta1/example.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Struct } from "../../../../protobuf/struct.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.dialogflow.cx.v3beta1";

/** Output state. */
export enum OutputState {
  /** OUTPUT_STATE_UNSPECIFIED - Unspecified output. */
  OUTPUT_STATE_UNSPECIFIED = 0,
  /** OUTPUT_STATE_OK - Succeeded. */
  OUTPUT_STATE_OK = 1,
  /** OUTPUT_STATE_CANCELLED - Cancelled. */
  OUTPUT_STATE_CANCELLED = 2,
  /** OUTPUT_STATE_FAILED - Failed. */
  OUTPUT_STATE_FAILED = 3,
  /** OUTPUT_STATE_ESCALATED - Escalated. */
  OUTPUT_STATE_ESCALATED = 4,
  /** OUTPUT_STATE_PENDING - Pending. */
  OUTPUT_STATE_PENDING = 5,
  UNRECOGNIZED = -1,
}

export function outputStateFromJSON(object: any): OutputState {
  switch (object) {
    case 0:
    case "OUTPUT_STATE_UNSPECIFIED":
      return OutputState.OUTPUT_STATE_UNSPECIFIED;
    case 1:
    case "OUTPUT_STATE_OK":
      return OutputState.OUTPUT_STATE_OK;
    case 2:
    case "OUTPUT_STATE_CANCELLED":
      return OutputState.OUTPUT_STATE_CANCELLED;
    case 3:
    case "OUTPUT_STATE_FAILED":
      return OutputState.OUTPUT_STATE_FAILED;
    case 4:
    case "OUTPUT_STATE_ESCALATED":
      return OutputState.OUTPUT_STATE_ESCALATED;
    case 5:
    case "OUTPUT_STATE_PENDING":
      return OutputState.OUTPUT_STATE_PENDING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OutputState.UNRECOGNIZED;
  }
}

export function outputStateToJSON(object: OutputState): string {
  switch (object) {
    case OutputState.OUTPUT_STATE_UNSPECIFIED:
      return "OUTPUT_STATE_UNSPECIFIED";
    case OutputState.OUTPUT_STATE_OK:
      return "OUTPUT_STATE_OK";
    case OutputState.OUTPUT_STATE_CANCELLED:
      return "OUTPUT_STATE_CANCELLED";
    case OutputState.OUTPUT_STATE_FAILED:
      return "OUTPUT_STATE_FAILED";
    case OutputState.OUTPUT_STATE_ESCALATED:
      return "OUTPUT_STATE_ESCALATED";
    case OutputState.OUTPUT_STATE_PENDING:
      return "OUTPUT_STATE_PENDING";
    case OutputState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The request message for
 * [Examples.CreateExample][google.cloud.dialogflow.cx.v3beta1.Examples.CreateExample].
 */
export interface CreateExampleRequest {
  /**
   * Required. The playbook to create an example for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/playbooks/<Playbook ID>`.
   */
  parent: string;
  /** Required. The example to create. */
  example: Example | undefined;
}

/**
 * The request message for
 * [Examples.DeleteExample][google.cloud.dialogflow.cx.v3beta1.Examples.DeleteExample].
 */
export interface DeleteExampleRequest {
  /**
   * Required. The name of the example to delete.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/playbooks/<Playbook ID>/examples/<Example ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [Examples.ListExamples][google.cloud.dialogflow.cx.v3beta1.Examples.ListExamples].
 */
export interface ListExamplesRequest {
  /**
   * Required. The playbook to list the examples from.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/playbooks/<Playbook ID>`.
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return in a single page. By
   * default 100 and at most 1000.
   */
  pageSize: number;
  /**
   * Optional. The [next_page_token][ListExampleResponse.next_page_token] value
   * returned from a previous list request.
   */
  pageToken: string;
  /**
   * Optional. The language to list examples for.
   * If not specified, the agent's default language is used.
   * Note: languages must be enabled in the agent before they can be used.
   */
  languageCode: string;
}

/**
 * The response message for
 * [Examples.ListExamples][google.cloud.dialogflow.cx.v3beta1.Examples.ListExamples].
 */
export interface ListExamplesResponse {
  /**
   * The list of examples. There will be a maximum number of items returned
   * based on the
   * [page_size][google.cloud.dialogflow.cx.v3beta1.ListExamplesRequest.page_size]
   * field in the request.
   */
  examples: Example[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [Examples.GetExample][google.cloud.dialogflow.cx.v3beta1.Examples.GetExample].
 */
export interface GetExampleRequest {
  /**
   * Required. The name of the example.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/playbooks/<Playbook ID>/examples/<Example ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [Examples.UpdateExample][google.cloud.dialogflow.cx.v3beta1.Examples.UpdateExample].
 */
export interface UpdateExampleRequest {
  /** Required. The example to update. */
  example:
    | Example
    | undefined;
  /**
   * Optional. The mask to control which fields get updated. If the mask is not
   * present, all fields will be updated.
   */
  updateMask: string[] | undefined;
}

/**
 * Example represents a sample execution of the playbook in the conversation.
 *
 * An example consists of a list of ordered actions performed by end user
 * or Dialogflow agent according the playbook instructions to fulfill the task.
 */
export interface Example {
  /**
   * The unique identifier of the playbook example.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/playbooks/<Playbook ID>/examples/<Example ID>`.
   */
  name: string;
  /** Optional. The input to the playbook in the example. */
  playbookInput:
    | PlaybookInput
    | undefined;
  /** Optional. The output of the playbook in the example. */
  playbookOutput:
    | PlaybookOutput
    | undefined;
  /**
   * Required. The ordered list of actions performed by the end user and the
   * Dialogflow agent.
   */
  actions: Action[];
  /** Required. The display name of the example. */
  displayName: string;
  /**
   * Optional. The high level concise description of the example. The max number
   * of characters is 200.
   */
  description: string;
  /**
   * Output only. Estimated number of tokes current example takes when sent to
   * the LLM.
   */
  tokenCount: Long;
  /** Output only. The timestamp of initial example creation. */
  createTime:
    | Date
    | undefined;
  /** Output only. Last time the example was updated. */
  updateTime:
    | Date
    | undefined;
  /** Required. Example's output state. */
  conversationState: OutputState;
  /**
   * Optional. The language code of the example.
   * If not specified, the agent's default language is used.
   * Note: languages must be enabled in the agent before they can be used.
   */
  languageCode: string;
}

/** Input of the playbook. */
export interface PlaybookInput {
  /**
   * Optional. Summary string of the preceding conversation for the child
   * playbook invocation.
   */
  precedingConversationSummary: string;
  /** Optional. A list of input parameters for the action. */
  actionParameters: { [key: string]: any } | undefined;
}

/** Output of the playbook. */
export interface PlaybookOutput {
  /** Optional. Summary string of the execution result of the child playbook. */
  executionSummary: string;
  /** Optional. A Struct object of output parameters for the action. */
  actionParameters: { [key: string]: any } | undefined;
}

/** Action performed by end user or Dialogflow agent in the conversation. */
export interface Action {
  /** Optional. Agent obtained a message from the customer. */
  userUtterance?:
    | UserUtterance
    | undefined;
  /** Optional. Action performed by the agent as a message. */
  agentUtterance?:
    | AgentUtterance
    | undefined;
  /**
   * Optional. Action performed on behalf of the agent by calling a plugin
   * tool.
   */
  toolUse?:
    | ToolUse
    | undefined;
  /**
   * Optional. Action performed on behalf of the agent by invoking a child
   * playbook.
   */
  playbookInvocation?:
    | PlaybookInvocation
    | undefined;
  /** Optional. Action performed on behalf of the agent by invoking a CX flow. */
  flowInvocation?: FlowInvocation | undefined;
}

/** UserUtterance represents one message sent by the customer. */
export interface UserUtterance {
  /** Required. Message content in text. */
  text: string;
}

/** AgentUtterance represents one message sent by the agent. */
export interface AgentUtterance {
  /** Required. Message content in text. */
  text: string;
}

/** Stores metadata of the invocation of an action supported by a tool. */
export interface ToolUse {
  /**
   * Required. The [tool][google.cloud.dialogflow.cx.v3beta1.Tool] that should
   * be used. Format: `projects/<Project ID>/locations/<Location
   * ID>/agents/<Agent ID>/tools/<Tool ID>`.
   */
  tool: string;
  /** Optional. Name of the action to be called during the tool use. */
  action: string;
  /** Optional. A list of input parameters for the action. */
  inputActionParameters:
    | { [key: string]: any }
    | undefined;
  /** Optional. A list of output parameters generated by the action. */
  outputActionParameters: { [key: string]: any } | undefined;
}

/**
 * Stores metadata of the invocation of a child playbook.
 * Next Id: 5
 */
export interface PlaybookInvocation {
  /**
   * Required. The unique identifier of the playbook.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/playbooks/<Playbook ID>`.
   */
  playbook: string;
  /** Optional. Input of the child playbook invocation. */
  playbookInput:
    | PlaybookInput
    | undefined;
  /** Optional. Output of the child playbook invocation. */
  playbookOutput:
    | PlaybookOutput
    | undefined;
  /** Required. Playbook invocation's output state. */
  playbookState: OutputState;
}

/**
 * Stores metadata of the invocation of a CX flow.
 * Next Id: 7
 */
export interface FlowInvocation {
  /**
   * Required. The unique identifier of the flow.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * flows/<Flow ID>`.
   */
  flow: string;
  /** Optional. A list of input parameters for the flow. */
  inputActionParameters:
    | { [key: string]: any }
    | undefined;
  /** Optional. A list of output parameters generated by the flow invocation. */
  outputActionParameters:
    | { [key: string]: any }
    | undefined;
  /** Required. Flow invocation's output state. */
  flowState: OutputState;
}

function createBaseCreateExampleRequest(): CreateExampleRequest {
  return { parent: "", example: undefined };
}

export const CreateExampleRequest: MessageFns<CreateExampleRequest> = {
  encode(message: CreateExampleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.example !== undefined) {
      Example.encode(message.example, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateExampleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateExampleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.example = Example.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateExampleRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      example: isSet(object.example) ? Example.fromJSON(object.example) : undefined,
    };
  },

  toJSON(message: CreateExampleRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.example !== undefined) {
      obj.example = Example.toJSON(message.example);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateExampleRequest>): CreateExampleRequest {
    return CreateExampleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateExampleRequest>): CreateExampleRequest {
    const message = createBaseCreateExampleRequest();
    message.parent = object.parent ?? "";
    message.example = (object.example !== undefined && object.example !== null)
      ? Example.fromPartial(object.example)
      : undefined;
    return message;
  },
};

function createBaseDeleteExampleRequest(): DeleteExampleRequest {
  return { name: "" };
}

export const DeleteExampleRequest: MessageFns<DeleteExampleRequest> = {
  encode(message: DeleteExampleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteExampleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteExampleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteExampleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteExampleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteExampleRequest>): DeleteExampleRequest {
    return DeleteExampleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteExampleRequest>): DeleteExampleRequest {
    const message = createBaseDeleteExampleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListExamplesRequest(): ListExamplesRequest {
  return { parent: "", pageSize: 0, pageToken: "", languageCode: "" };
}

export const ListExamplesRequest: MessageFns<ListExamplesRequest> = {
  encode(message: ListExamplesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.languageCode !== "") {
      writer.uint32(34).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExamplesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExamplesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExamplesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: ListExamplesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExamplesRequest>): ListExamplesRequest {
    return ListExamplesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExamplesRequest>): ListExamplesRequest {
    const message = createBaseListExamplesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseListExamplesResponse(): ListExamplesResponse {
  return { examples: [], nextPageToken: "" };
}

export const ListExamplesResponse: MessageFns<ListExamplesResponse> = {
  encode(message: ListExamplesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.examples) {
      Example.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExamplesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExamplesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.examples.push(Example.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExamplesResponse {
    return {
      examples: globalThis.Array.isArray(object?.examples) ? object.examples.map((e: any) => Example.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListExamplesResponse): unknown {
    const obj: any = {};
    if (message.examples?.length) {
      obj.examples = message.examples.map((e) => Example.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExamplesResponse>): ListExamplesResponse {
    return ListExamplesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExamplesResponse>): ListExamplesResponse {
    const message = createBaseListExamplesResponse();
    message.examples = object.examples?.map((e) => Example.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetExampleRequest(): GetExampleRequest {
  return { name: "" };
}

export const GetExampleRequest: MessageFns<GetExampleRequest> = {
  encode(message: GetExampleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetExampleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetExampleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetExampleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetExampleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetExampleRequest>): GetExampleRequest {
    return GetExampleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetExampleRequest>): GetExampleRequest {
    const message = createBaseGetExampleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateExampleRequest(): UpdateExampleRequest {
  return { example: undefined, updateMask: undefined };
}

export const UpdateExampleRequest: MessageFns<UpdateExampleRequest> = {
  encode(message: UpdateExampleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.example !== undefined) {
      Example.encode(message.example, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateExampleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateExampleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.example = Example.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateExampleRequest {
    return {
      example: isSet(object.example) ? Example.fromJSON(object.example) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateExampleRequest): unknown {
    const obj: any = {};
    if (message.example !== undefined) {
      obj.example = Example.toJSON(message.example);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateExampleRequest>): UpdateExampleRequest {
    return UpdateExampleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateExampleRequest>): UpdateExampleRequest {
    const message = createBaseUpdateExampleRequest();
    message.example = (object.example !== undefined && object.example !== null)
      ? Example.fromPartial(object.example)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseExample(): Example {
  return {
    name: "",
    playbookInput: undefined,
    playbookOutput: undefined,
    actions: [],
    displayName: "",
    description: "",
    tokenCount: Long.ZERO,
    createTime: undefined,
    updateTime: undefined,
    conversationState: 0,
    languageCode: "",
  };
}

export const Example: MessageFns<Example> = {
  encode(message: Example, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.playbookInput !== undefined) {
      PlaybookInput.encode(message.playbookInput, writer.uint32(26).fork()).join();
    }
    if (message.playbookOutput !== undefined) {
      PlaybookOutput.encode(message.playbookOutput, writer.uint32(34).fork()).join();
    }
    for (const v of message.actions) {
      Action.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.displayName !== "") {
      writer.uint32(50).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(66).string(message.description);
    }
    if (!message.tokenCount.equals(Long.ZERO)) {
      writer.uint32(72).int64(message.tokenCount.toString());
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(82).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(90).fork()).join();
    }
    if (message.conversationState !== 0) {
      writer.uint32(96).int32(message.conversationState);
    }
    if (message.languageCode !== "") {
      writer.uint32(106).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Example {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExample();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.playbookInput = PlaybookInput.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.playbookOutput = PlaybookOutput.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.actions.push(Action.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.description = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.tokenCount = Long.fromString(reader.int64().toString());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.conversationState = reader.int32() as any;
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Example {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      playbookInput: isSet(object.playbookInput) ? PlaybookInput.fromJSON(object.playbookInput) : undefined,
      playbookOutput: isSet(object.playbookOutput) ? PlaybookOutput.fromJSON(object.playbookOutput) : undefined,
      actions: globalThis.Array.isArray(object?.actions) ? object.actions.map((e: any) => Action.fromJSON(e)) : [],
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      tokenCount: isSet(object.tokenCount) ? Long.fromValue(object.tokenCount) : Long.ZERO,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      conversationState: isSet(object.conversationState) ? outputStateFromJSON(object.conversationState) : 0,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: Example): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.playbookInput !== undefined) {
      obj.playbookInput = PlaybookInput.toJSON(message.playbookInput);
    }
    if (message.playbookOutput !== undefined) {
      obj.playbookOutput = PlaybookOutput.toJSON(message.playbookOutput);
    }
    if (message.actions?.length) {
      obj.actions = message.actions.map((e) => Action.toJSON(e));
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (!message.tokenCount.equals(Long.ZERO)) {
      obj.tokenCount = (message.tokenCount || Long.ZERO).toString();
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.conversationState !== 0) {
      obj.conversationState = outputStateToJSON(message.conversationState);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<Example>): Example {
    return Example.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Example>): Example {
    const message = createBaseExample();
    message.name = object.name ?? "";
    message.playbookInput = (object.playbookInput !== undefined && object.playbookInput !== null)
      ? PlaybookInput.fromPartial(object.playbookInput)
      : undefined;
    message.playbookOutput = (object.playbookOutput !== undefined && object.playbookOutput !== null)
      ? PlaybookOutput.fromPartial(object.playbookOutput)
      : undefined;
    message.actions = object.actions?.map((e) => Action.fromPartial(e)) || [];
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.tokenCount = (object.tokenCount !== undefined && object.tokenCount !== null)
      ? Long.fromValue(object.tokenCount)
      : Long.ZERO;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.conversationState = object.conversationState ?? 0;
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBasePlaybookInput(): PlaybookInput {
  return { precedingConversationSummary: "", actionParameters: undefined };
}

export const PlaybookInput: MessageFns<PlaybookInput> = {
  encode(message: PlaybookInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.precedingConversationSummary !== "") {
      writer.uint32(10).string(message.precedingConversationSummary);
    }
    if (message.actionParameters !== undefined) {
      Struct.encode(Struct.wrap(message.actionParameters), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaybookInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaybookInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.precedingConversationSummary = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.actionParameters = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaybookInput {
    return {
      precedingConversationSummary: isSet(object.precedingConversationSummary)
        ? globalThis.String(object.precedingConversationSummary)
        : "",
      actionParameters: isObject(object.actionParameters) ? object.actionParameters : undefined,
    };
  },

  toJSON(message: PlaybookInput): unknown {
    const obj: any = {};
    if (message.precedingConversationSummary !== "") {
      obj.precedingConversationSummary = message.precedingConversationSummary;
    }
    if (message.actionParameters !== undefined) {
      obj.actionParameters = message.actionParameters;
    }
    return obj;
  },

  create(base?: DeepPartial<PlaybookInput>): PlaybookInput {
    return PlaybookInput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlaybookInput>): PlaybookInput {
    const message = createBasePlaybookInput();
    message.precedingConversationSummary = object.precedingConversationSummary ?? "";
    message.actionParameters = object.actionParameters ?? undefined;
    return message;
  },
};

function createBasePlaybookOutput(): PlaybookOutput {
  return { executionSummary: "", actionParameters: undefined };
}

export const PlaybookOutput: MessageFns<PlaybookOutput> = {
  encode(message: PlaybookOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.executionSummary !== "") {
      writer.uint32(10).string(message.executionSummary);
    }
    if (message.actionParameters !== undefined) {
      Struct.encode(Struct.wrap(message.actionParameters), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaybookOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaybookOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.executionSummary = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.actionParameters = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaybookOutput {
    return {
      executionSummary: isSet(object.executionSummary) ? globalThis.String(object.executionSummary) : "",
      actionParameters: isObject(object.actionParameters) ? object.actionParameters : undefined,
    };
  },

  toJSON(message: PlaybookOutput): unknown {
    const obj: any = {};
    if (message.executionSummary !== "") {
      obj.executionSummary = message.executionSummary;
    }
    if (message.actionParameters !== undefined) {
      obj.actionParameters = message.actionParameters;
    }
    return obj;
  },

  create(base?: DeepPartial<PlaybookOutput>): PlaybookOutput {
    return PlaybookOutput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlaybookOutput>): PlaybookOutput {
    const message = createBasePlaybookOutput();
    message.executionSummary = object.executionSummary ?? "";
    message.actionParameters = object.actionParameters ?? undefined;
    return message;
  },
};

function createBaseAction(): Action {
  return {
    userUtterance: undefined,
    agentUtterance: undefined,
    toolUse: undefined,
    playbookInvocation: undefined,
    flowInvocation: undefined,
  };
}

export const Action: MessageFns<Action> = {
  encode(message: Action, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userUtterance !== undefined) {
      UserUtterance.encode(message.userUtterance, writer.uint32(10).fork()).join();
    }
    if (message.agentUtterance !== undefined) {
      AgentUtterance.encode(message.agentUtterance, writer.uint32(18).fork()).join();
    }
    if (message.toolUse !== undefined) {
      ToolUse.encode(message.toolUse, writer.uint32(26).fork()).join();
    }
    if (message.playbookInvocation !== undefined) {
      PlaybookInvocation.encode(message.playbookInvocation, writer.uint32(34).fork()).join();
    }
    if (message.flowInvocation !== undefined) {
      FlowInvocation.encode(message.flowInvocation, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Action {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userUtterance = UserUtterance.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.agentUtterance = AgentUtterance.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.toolUse = ToolUse.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.playbookInvocation = PlaybookInvocation.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.flowInvocation = FlowInvocation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Action {
    return {
      userUtterance: isSet(object.userUtterance) ? UserUtterance.fromJSON(object.userUtterance) : undefined,
      agentUtterance: isSet(object.agentUtterance) ? AgentUtterance.fromJSON(object.agentUtterance) : undefined,
      toolUse: isSet(object.toolUse) ? ToolUse.fromJSON(object.toolUse) : undefined,
      playbookInvocation: isSet(object.playbookInvocation)
        ? PlaybookInvocation.fromJSON(object.playbookInvocation)
        : undefined,
      flowInvocation: isSet(object.flowInvocation) ? FlowInvocation.fromJSON(object.flowInvocation) : undefined,
    };
  },

  toJSON(message: Action): unknown {
    const obj: any = {};
    if (message.userUtterance !== undefined) {
      obj.userUtterance = UserUtterance.toJSON(message.userUtterance);
    }
    if (message.agentUtterance !== undefined) {
      obj.agentUtterance = AgentUtterance.toJSON(message.agentUtterance);
    }
    if (message.toolUse !== undefined) {
      obj.toolUse = ToolUse.toJSON(message.toolUse);
    }
    if (message.playbookInvocation !== undefined) {
      obj.playbookInvocation = PlaybookInvocation.toJSON(message.playbookInvocation);
    }
    if (message.flowInvocation !== undefined) {
      obj.flowInvocation = FlowInvocation.toJSON(message.flowInvocation);
    }
    return obj;
  },

  create(base?: DeepPartial<Action>): Action {
    return Action.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Action>): Action {
    const message = createBaseAction();
    message.userUtterance = (object.userUtterance !== undefined && object.userUtterance !== null)
      ? UserUtterance.fromPartial(object.userUtterance)
      : undefined;
    message.agentUtterance = (object.agentUtterance !== undefined && object.agentUtterance !== null)
      ? AgentUtterance.fromPartial(object.agentUtterance)
      : undefined;
    message.toolUse = (object.toolUse !== undefined && object.toolUse !== null)
      ? ToolUse.fromPartial(object.toolUse)
      : undefined;
    message.playbookInvocation = (object.playbookInvocation !== undefined && object.playbookInvocation !== null)
      ? PlaybookInvocation.fromPartial(object.playbookInvocation)
      : undefined;
    message.flowInvocation = (object.flowInvocation !== undefined && object.flowInvocation !== null)
      ? FlowInvocation.fromPartial(object.flowInvocation)
      : undefined;
    return message;
  },
};

function createBaseUserUtterance(): UserUtterance {
  return { text: "" };
}

export const UserUtterance: MessageFns<UserUtterance> = {
  encode(message: UserUtterance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserUtterance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserUtterance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserUtterance {
    return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
  },

  toJSON(message: UserUtterance): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create(base?: DeepPartial<UserUtterance>): UserUtterance {
    return UserUtterance.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserUtterance>): UserUtterance {
    const message = createBaseUserUtterance();
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseAgentUtterance(): AgentUtterance {
  return { text: "" };
}

export const AgentUtterance: MessageFns<AgentUtterance> = {
  encode(message: AgentUtterance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentUtterance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentUtterance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentUtterance {
    return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
  },

  toJSON(message: AgentUtterance): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create(base?: DeepPartial<AgentUtterance>): AgentUtterance {
    return AgentUtterance.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AgentUtterance>): AgentUtterance {
    const message = createBaseAgentUtterance();
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseToolUse(): ToolUse {
  return { tool: "", action: "", inputActionParameters: undefined, outputActionParameters: undefined };
}

export const ToolUse: MessageFns<ToolUse> = {
  encode(message: ToolUse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tool !== "") {
      writer.uint32(10).string(message.tool);
    }
    if (message.action !== "") {
      writer.uint32(18).string(message.action);
    }
    if (message.inputActionParameters !== undefined) {
      Struct.encode(Struct.wrap(message.inputActionParameters), writer.uint32(42).fork()).join();
    }
    if (message.outputActionParameters !== undefined) {
      Struct.encode(Struct.wrap(message.outputActionParameters), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ToolUse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToolUse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tool = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.action = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.inputActionParameters = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.outputActionParameters = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToolUse {
    return {
      tool: isSet(object.tool) ? globalThis.String(object.tool) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      inputActionParameters: isObject(object.inputActionParameters) ? object.inputActionParameters : undefined,
      outputActionParameters: isObject(object.outputActionParameters) ? object.outputActionParameters : undefined,
    };
  },

  toJSON(message: ToolUse): unknown {
    const obj: any = {};
    if (message.tool !== "") {
      obj.tool = message.tool;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.inputActionParameters !== undefined) {
      obj.inputActionParameters = message.inputActionParameters;
    }
    if (message.outputActionParameters !== undefined) {
      obj.outputActionParameters = message.outputActionParameters;
    }
    return obj;
  },

  create(base?: DeepPartial<ToolUse>): ToolUse {
    return ToolUse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ToolUse>): ToolUse {
    const message = createBaseToolUse();
    message.tool = object.tool ?? "";
    message.action = object.action ?? "";
    message.inputActionParameters = object.inputActionParameters ?? undefined;
    message.outputActionParameters = object.outputActionParameters ?? undefined;
    return message;
  },
};

function createBasePlaybookInvocation(): PlaybookInvocation {
  return { playbook: "", playbookInput: undefined, playbookOutput: undefined, playbookState: 0 };
}

export const PlaybookInvocation: MessageFns<PlaybookInvocation> = {
  encode(message: PlaybookInvocation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playbook !== "") {
      writer.uint32(10).string(message.playbook);
    }
    if (message.playbookInput !== undefined) {
      PlaybookInput.encode(message.playbookInput, writer.uint32(18).fork()).join();
    }
    if (message.playbookOutput !== undefined) {
      PlaybookOutput.encode(message.playbookOutput, writer.uint32(26).fork()).join();
    }
    if (message.playbookState !== 0) {
      writer.uint32(32).int32(message.playbookState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaybookInvocation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaybookInvocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.playbook = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.playbookInput = PlaybookInput.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.playbookOutput = PlaybookOutput.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.playbookState = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaybookInvocation {
    return {
      playbook: isSet(object.playbook) ? globalThis.String(object.playbook) : "",
      playbookInput: isSet(object.playbookInput) ? PlaybookInput.fromJSON(object.playbookInput) : undefined,
      playbookOutput: isSet(object.playbookOutput) ? PlaybookOutput.fromJSON(object.playbookOutput) : undefined,
      playbookState: isSet(object.playbookState) ? outputStateFromJSON(object.playbookState) : 0,
    };
  },

  toJSON(message: PlaybookInvocation): unknown {
    const obj: any = {};
    if (message.playbook !== "") {
      obj.playbook = message.playbook;
    }
    if (message.playbookInput !== undefined) {
      obj.playbookInput = PlaybookInput.toJSON(message.playbookInput);
    }
    if (message.playbookOutput !== undefined) {
      obj.playbookOutput = PlaybookOutput.toJSON(message.playbookOutput);
    }
    if (message.playbookState !== 0) {
      obj.playbookState = outputStateToJSON(message.playbookState);
    }
    return obj;
  },

  create(base?: DeepPartial<PlaybookInvocation>): PlaybookInvocation {
    return PlaybookInvocation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlaybookInvocation>): PlaybookInvocation {
    const message = createBasePlaybookInvocation();
    message.playbook = object.playbook ?? "";
    message.playbookInput = (object.playbookInput !== undefined && object.playbookInput !== null)
      ? PlaybookInput.fromPartial(object.playbookInput)
      : undefined;
    message.playbookOutput = (object.playbookOutput !== undefined && object.playbookOutput !== null)
      ? PlaybookOutput.fromPartial(object.playbookOutput)
      : undefined;
    message.playbookState = object.playbookState ?? 0;
    return message;
  },
};

function createBaseFlowInvocation(): FlowInvocation {
  return { flow: "", inputActionParameters: undefined, outputActionParameters: undefined, flowState: 0 };
}

export const FlowInvocation: MessageFns<FlowInvocation> = {
  encode(message: FlowInvocation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.flow !== "") {
      writer.uint32(10).string(message.flow);
    }
    if (message.inputActionParameters !== undefined) {
      Struct.encode(Struct.wrap(message.inputActionParameters), writer.uint32(42).fork()).join();
    }
    if (message.outputActionParameters !== undefined) {
      Struct.encode(Struct.wrap(message.outputActionParameters), writer.uint32(50).fork()).join();
    }
    if (message.flowState !== 0) {
      writer.uint32(32).int32(message.flowState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlowInvocation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlowInvocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.flow = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.inputActionParameters = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.outputActionParameters = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.flowState = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FlowInvocation {
    return {
      flow: isSet(object.flow) ? globalThis.String(object.flow) : "",
      inputActionParameters: isObject(object.inputActionParameters) ? object.inputActionParameters : undefined,
      outputActionParameters: isObject(object.outputActionParameters) ? object.outputActionParameters : undefined,
      flowState: isSet(object.flowState) ? outputStateFromJSON(object.flowState) : 0,
    };
  },

  toJSON(message: FlowInvocation): unknown {
    const obj: any = {};
    if (message.flow !== "") {
      obj.flow = message.flow;
    }
    if (message.inputActionParameters !== undefined) {
      obj.inputActionParameters = message.inputActionParameters;
    }
    if (message.outputActionParameters !== undefined) {
      obj.outputActionParameters = message.outputActionParameters;
    }
    if (message.flowState !== 0) {
      obj.flowState = outputStateToJSON(message.flowState);
    }
    return obj;
  },

  create(base?: DeepPartial<FlowInvocation>): FlowInvocation {
    return FlowInvocation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FlowInvocation>): FlowInvocation {
    const message = createBaseFlowInvocation();
    message.flow = object.flow ?? "";
    message.inputActionParameters = object.inputActionParameters ?? undefined;
    message.outputActionParameters = object.outputActionParameters ?? undefined;
    message.flowState = object.flowState ?? 0;
    return message;
  },
};

/** Service for managing [Examples][google.cloud.dialogflow.cx.v3beta1.Example]. */
export type ExamplesDefinition = typeof ExamplesDefinition;
export const ExamplesDefinition = {
  name: "Examples",
  fullName: "google.cloud.dialogflow.cx.v3beta1.Examples",
  methods: {
    /** Creates an example in the specified playbook. */
    createExample: {
      name: "CreateExample",
      requestType: CreateExampleRequest,
      requestStream: false,
      responseType: Example,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 101, 120, 97, 109, 112, 108, 101])],
          578365826: [
            Buffer.from([
              81,
              58,
              7,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              34,
              70,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes the specified example. */
    deleteExample: {
      name: "DeleteExample",
      requestType: DeleteExampleRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              72,
              42,
              70,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              115,
              47,
              42,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Returns a list of examples in the specified playbook. */
    listExamples: {
      name: "ListExamples",
      requestType: ListExamplesRequest,
      requestStream: false,
      responseType: ListExamplesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves the specified example. */
    getExample: {
      name: "GetExample",
      requestType: GetExampleRequest,
      requestStream: false,
      responseType: Example,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              115,
              47,
              42,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Update the specified example. */
    updateExample: {
      name: "UpdateExample",
      requestType: UpdateExampleRequest,
      requestStream: false,
      responseType: Example,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 101, 120, 97, 109, 112, 108, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              89,
              58,
              7,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              50,
              78,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              115,
              47,
              42,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ExamplesServiceImplementation<CallContextExt = {}> {
  /** Creates an example in the specified playbook. */
  createExample(request: CreateExampleRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Example>>;
  /** Deletes the specified example. */
  deleteExample(request: DeleteExampleRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Returns a list of examples in the specified playbook. */
  listExamples(
    request: ListExamplesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListExamplesResponse>>;
  /** Retrieves the specified example. */
  getExample(request: GetExampleRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Example>>;
  /** Update the specified example. */
  updateExample(request: UpdateExampleRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Example>>;
}

export interface ExamplesClient<CallOptionsExt = {}> {
  /** Creates an example in the specified playbook. */
  createExample(request: DeepPartial<CreateExampleRequest>, options?: CallOptions & CallOptionsExt): Promise<Example>;
  /** Deletes the specified example. */
  deleteExample(request: DeepPartial<DeleteExampleRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Returns a list of examples in the specified playbook. */
  listExamples(
    request: DeepPartial<ListExamplesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListExamplesResponse>;
  /** Retrieves the specified example. */
  getExample(request: DeepPartial<GetExampleRequest>, options?: CallOptions & CallOptionsExt): Promise<Example>;
  /** Update the specified example. */
  updateExample(request: DeepPartial<UpdateExampleRequest>, options?: CallOptions & CallOptionsExt): Promise<Example>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
