// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3/flow.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { AdvancedSettings } from "./advanced_settings.js";
import { ImportStrategy, importStrategyFromJSON, importStrategyToJSON } from "./import_strategy.js";
import { EventHandler, KnowledgeConnectorSettings, TransitionRoute } from "./page.js";
import { ValidationMessage } from "./validation_message.js";

export const protobufPackage = "google.cloud.dialogflow.cx.v3";

/** Settings related to NLU. */
export interface NluSettings {
  /** Indicates the type of NLU model. */
  modelType: NluSettings_ModelType;
  /**
   * To filter out false positive results and still get variety in matched
   * natural language inputs for your agent, you can tune the machine learning
   * classification threshold. If the returned score value is less than the
   * threshold value, then a no-match event will be triggered. The score values
   * range from 0.0 (completely uncertain) to 1.0 (completely certain). If set
   * to 0.0, the default of 0.3 is used.
   */
  classificationThreshold: number;
  /** Indicates NLU model training mode. */
  modelTrainingMode: NluSettings_ModelTrainingMode;
}

/** NLU model type. */
export enum NluSettings_ModelType {
  /** MODEL_TYPE_UNSPECIFIED - Not specified. `MODEL_TYPE_STANDARD` will be used. */
  MODEL_TYPE_UNSPECIFIED = 0,
  /** MODEL_TYPE_STANDARD - Use standard NLU model. */
  MODEL_TYPE_STANDARD = 1,
  /** MODEL_TYPE_ADVANCED - Use advanced NLU model. */
  MODEL_TYPE_ADVANCED = 3,
  UNRECOGNIZED = -1,
}

export function nluSettings_ModelTypeFromJSON(object: any): NluSettings_ModelType {
  switch (object) {
    case 0:
    case "MODEL_TYPE_UNSPECIFIED":
      return NluSettings_ModelType.MODEL_TYPE_UNSPECIFIED;
    case 1:
    case "MODEL_TYPE_STANDARD":
      return NluSettings_ModelType.MODEL_TYPE_STANDARD;
    case 3:
    case "MODEL_TYPE_ADVANCED":
      return NluSettings_ModelType.MODEL_TYPE_ADVANCED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NluSettings_ModelType.UNRECOGNIZED;
  }
}

export function nluSettings_ModelTypeToJSON(object: NluSettings_ModelType): string {
  switch (object) {
    case NluSettings_ModelType.MODEL_TYPE_UNSPECIFIED:
      return "MODEL_TYPE_UNSPECIFIED";
    case NluSettings_ModelType.MODEL_TYPE_STANDARD:
      return "MODEL_TYPE_STANDARD";
    case NluSettings_ModelType.MODEL_TYPE_ADVANCED:
      return "MODEL_TYPE_ADVANCED";
    case NluSettings_ModelType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** NLU model training mode. */
export enum NluSettings_ModelTrainingMode {
  /** MODEL_TRAINING_MODE_UNSPECIFIED - Not specified. `MODEL_TRAINING_MODE_AUTOMATIC` will be used. */
  MODEL_TRAINING_MODE_UNSPECIFIED = 0,
  /**
   * MODEL_TRAINING_MODE_AUTOMATIC - NLU model training is automatically triggered when a flow gets modified.
   * User can also manually trigger model training in this mode.
   */
  MODEL_TRAINING_MODE_AUTOMATIC = 1,
  /**
   * MODEL_TRAINING_MODE_MANUAL - User needs to manually trigger NLU model training. Best for large flows
   * whose models take long time to train.
   */
  MODEL_TRAINING_MODE_MANUAL = 2,
  UNRECOGNIZED = -1,
}

export function nluSettings_ModelTrainingModeFromJSON(object: any): NluSettings_ModelTrainingMode {
  switch (object) {
    case 0:
    case "MODEL_TRAINING_MODE_UNSPECIFIED":
      return NluSettings_ModelTrainingMode.MODEL_TRAINING_MODE_UNSPECIFIED;
    case 1:
    case "MODEL_TRAINING_MODE_AUTOMATIC":
      return NluSettings_ModelTrainingMode.MODEL_TRAINING_MODE_AUTOMATIC;
    case 2:
    case "MODEL_TRAINING_MODE_MANUAL":
      return NluSettings_ModelTrainingMode.MODEL_TRAINING_MODE_MANUAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NluSettings_ModelTrainingMode.UNRECOGNIZED;
  }
}

export function nluSettings_ModelTrainingModeToJSON(object: NluSettings_ModelTrainingMode): string {
  switch (object) {
    case NluSettings_ModelTrainingMode.MODEL_TRAINING_MODE_UNSPECIFIED:
      return "MODEL_TRAINING_MODE_UNSPECIFIED";
    case NluSettings_ModelTrainingMode.MODEL_TRAINING_MODE_AUTOMATIC:
      return "MODEL_TRAINING_MODE_AUTOMATIC";
    case NluSettings_ModelTrainingMode.MODEL_TRAINING_MODE_MANUAL:
      return "MODEL_TRAINING_MODE_MANUAL";
    case NluSettings_ModelTrainingMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Flows represents the conversation flows when you build your chatbot agent.
 *
 * A flow consists of many pages connected by the transition routes.
 * Conversations always start with the built-in Start Flow (with an all-0 ID).
 * Transition routes can direct the conversation session from the current flow
 * (parent flow) to another flow (sub flow). When the sub flow is finished,
 * Dialogflow will bring the session back to the parent flow, where the sub flow
 * is started.
 *
 * Usually, when a transition route is followed by a matched intent, the intent
 * will be "consumed". This means the intent won't activate more transition
 * routes. However, when the followed transition route moves the conversation
 * session into a different flow, the matched intent can be carried over and to
 * be consumed in the target flow.
 */
export interface Flow {
  /**
   * The unique identifier of the flow.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>`.
   */
  name: string;
  /** Required. The human-readable name of the flow. */
  displayName: string;
  /**
   * The description of the flow. The maximum length is 500 characters. If
   * exceeded, the request is rejected.
   */
  description: string;
  /**
   * A flow's transition routes serve two purposes:
   *
   * *   They are responsible for matching the user's first utterances in the
   * flow.
   * *   They are inherited by every page's [transition
   * routes][Page.transition_routes] and can support use cases such as the user
   * saying "help" or "can I talk to a human?", which can be handled in a common
   * way regardless of the current page. Transition routes defined in the page
   * have higher priority than those defined in the flow.
   *
   * TransitionRoutes are evalauted in the following order:
   *
   * *   TransitionRoutes with intent specified.
   * *   TransitionRoutes with only condition specified.
   *
   * TransitionRoutes with intent specified are inherited by pages in the flow.
   */
  transitionRoutes: TransitionRoute[];
  /**
   * A flow's event handlers serve two purposes:
   *
   * *   They are responsible for handling events (e.g. no match,
   * webhook errors) in the flow.
   * *   They are inherited by every page's [event
   * handlers][Page.event_handlers], which can be used to handle common events
   * regardless of the current page. Event handlers defined in the page
   * have higher priority than those defined in the flow.
   *
   * Unlike
   * [transition_routes][google.cloud.dialogflow.cx.v3.Flow.transition_routes],
   * these handlers are evaluated on a first-match basis. The first one that
   * matches the event get executed, with the rest being ignored.
   */
  eventHandlers: EventHandler[];
  /**
   * A flow's transition route group serve two purposes:
   *
   * *   They are responsible for matching the user's first utterances in the
   * flow.
   * *   They are inherited by every page's [transition
   * route groups][Page.transition_route_groups]. Transition route groups
   * defined in the page have higher priority than those defined in the flow.
   *
   * Format:`projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>`
   * or `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/transitionRouteGroups/<TransitionRouteGroup ID>` for agent-level
   * groups.
   */
  transitionRouteGroups: string[];
  /** NLU related settings of the flow. */
  nluSettings:
    | NluSettings
    | undefined;
  /**
   * Hierarchical advanced settings for this flow. The settings exposed at the
   * lower level overrides the settings exposed at the higher level.
   */
  advancedSettings:
    | AdvancedSettings
    | undefined;
  /** Optional. Knowledge connector configuration. */
  knowledgeConnectorSettings:
    | KnowledgeConnectorSettings
    | undefined;
  /** Optional. Multi-lingual agent settings for this flow. */
  multiLanguageSettings:
    | Flow_MultiLanguageSettings
    | undefined;
  /**
   * Indicates whether the flow is locked for changes. If the flow is locked,
   * modifications to the flow will be rejected.
   */
  locked: boolean;
}

/** Settings for multi-lingual agents. */
export interface Flow_MultiLanguageSettings {
  /**
   * Optional. Enable multi-language detection for this flow. This can be set
   * only if [agent level multi language
   * setting][Agent.enable_multi_language_training] is enabled.
   */
  enableMultiLanguageDetection: boolean;
  /**
   * Optional. Agent will respond in the detected language if the detected
   * language code is in the supported resolved languages for this flow. This
   * will be used only if multi-language training is enabled in the
   * [agent][google.cloud.dialogflow.cx.v3.Agent.enable_multi_language_training]
   * and multi-language detection is enabled in the
   * [flow][google.cloud.dialogflow.cx.v3.Flow.MultiLanguageSettings.enable_multi_language_detection].
   * The supported languages must be a subset of the languages supported by
   * the agent.
   */
  supportedResponseLanguageCodes: string[];
}

/**
 * The request message for
 * [Flows.CreateFlow][google.cloud.dialogflow.cx.v3.Flows.CreateFlow].
 */
export interface CreateFlowRequest {
  /**
   * Required. The agent to create a flow for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   */
  parent: string;
  /** Required. The flow to create. */
  flow:
    | Flow
    | undefined;
  /**
   * The language of the following fields in `flow`:
   *
   * *  `Flow.event_handlers.trigger_fulfillment.messages`
   * *  `Flow.event_handlers.trigger_fulfillment.conditional_cases`
   * *  `Flow.transition_routes.trigger_fulfillment.messages`
   * *  `Flow.transition_routes.trigger_fulfillment.conditional_cases`
   *
   * If not specified, the agent's default language is used.
   * [Many
   * languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
   * are supported.
   * Note: languages must be enabled in the agent before they can be used.
   */
  languageCode: string;
}

/**
 * The request message for
 * [Flows.DeleteFlow][google.cloud.dialogflow.cx.v3.Flows.DeleteFlow].
 */
export interface DeleteFlowRequest {
  /**
   * Required. The name of the flow to delete.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>`.
   */
  name: string;
  /**
   * This field has no effect for flows with no incoming transitions.
   * For flows with incoming transitions:
   *
   * *  If `force` is set to false, an error will be returned with message
   *    indicating the incoming transitions.
   * *  If `force` is set to true, Dialogflow will remove the flow, as well as
   *    any transitions to the flow (i.e. [Target
   *    flow][EventHandler.target_flow] in event handlers or [Target
   *    flow][TransitionRoute.target_flow] in transition routes that point to
   *    this flow will be cleared).
   */
  force: boolean;
}

/**
 * The request message for
 * [Flows.ListFlows][google.cloud.dialogflow.cx.v3.Flows.ListFlows].
 */
export interface ListFlowsRequest {
  /**
   * Required. The agent containing the flows.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   */
  parent: string;
  /**
   * The maximum number of items to return in a single page. By default 100 and
   * at most 1000.
   */
  pageSize: number;
  /** The next_page_token value returned from a previous list request. */
  pageToken: string;
  /**
   * The language to list flows for. The following fields are language
   * dependent:
   *
   * *  `Flow.event_handlers.trigger_fulfillment.messages`
   * *  `Flow.event_handlers.trigger_fulfillment.conditional_cases`
   * *  `Flow.transition_routes.trigger_fulfillment.messages`
   * *  `Flow.transition_routes.trigger_fulfillment.conditional_cases`
   *
   * If not specified, the agent's default language is used.
   * [Many
   * languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
   * are supported.
   * Note: languages must be enabled in the agent before they can be used.
   */
  languageCode: string;
}

/**
 * The response message for
 * [Flows.ListFlows][google.cloud.dialogflow.cx.v3.Flows.ListFlows].
 */
export interface ListFlowsResponse {
  /**
   * The list of flows. There will be a maximum number of items returned based
   * on the page_size field in the request.
   */
  flows: Flow[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/**
 * The response message for
 * [Flows.GetFlow][google.cloud.dialogflow.cx.v3.Flows.GetFlow].
 */
export interface GetFlowRequest {
  /**
   * Required. The name of the flow to get.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>`.
   */
  name: string;
  /**
   * The language to retrieve the flow for. The following fields are language
   * dependent:
   *
   * *  `Flow.event_handlers.trigger_fulfillment.messages`
   * *  `Flow.event_handlers.trigger_fulfillment.conditional_cases`
   * *  `Flow.transition_routes.trigger_fulfillment.messages`
   * *  `Flow.transition_routes.trigger_fulfillment.conditional_cases`
   *
   * If not specified, the agent's default language is used.
   * [Many
   * languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
   * are supported.
   * Note: languages must be enabled in the agent before they can be used.
   */
  languageCode: string;
}

/**
 * The request message for
 * [Flows.UpdateFlow][google.cloud.dialogflow.cx.v3.Flows.UpdateFlow].
 */
export interface UpdateFlowRequest {
  /** Required. The flow to update. */
  flow:
    | Flow
    | undefined;
  /**
   * The mask to control which fields get updated. If the mask is not present,
   * all fields will be updated.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * The language of the following fields in `flow`:
   *
   * *  `Flow.event_handlers.trigger_fulfillment.messages`
   * *  `Flow.event_handlers.trigger_fulfillment.conditional_cases`
   * *  `Flow.transition_routes.trigger_fulfillment.messages`
   * *  `Flow.transition_routes.trigger_fulfillment.conditional_cases`
   *
   * If not specified, the agent's default language is used.
   * [Many
   * languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
   * are supported.
   * Note: languages must be enabled in the agent before they can be used.
   */
  languageCode: string;
}

/**
 * The request message for
 * [Flows.TrainFlow][google.cloud.dialogflow.cx.v3.Flows.TrainFlow].
 */
export interface TrainFlowRequest {
  /**
   * Required. The flow to train.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [Flows.ValidateFlow][google.cloud.dialogflow.cx.v3.Flows.ValidateFlow].
 */
export interface ValidateFlowRequest {
  /**
   * Required. The flow to validate.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>`.
   */
  name: string;
  /** If not specified, the agent's default language is used. */
  languageCode: string;
}

/**
 * The request message for
 * [Flows.GetFlowValidationResult][google.cloud.dialogflow.cx.v3.Flows.GetFlowValidationResult].
 */
export interface GetFlowValidationResultRequest {
  /**
   * Required. The flow name.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>/validationResult`.
   */
  name: string;
  /** If not specified, the agent's default language is used. */
  languageCode: string;
}

/**
 * The response message for
 * [Flows.GetFlowValidationResult][google.cloud.dialogflow.cx.v3.Flows.GetFlowValidationResult].
 */
export interface FlowValidationResult {
  /**
   * The unique identifier of the flow validation result.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>/validationResult`.
   */
  name: string;
  /** Contains all validation messages. */
  validationMessages: ValidationMessage[];
  /** Last time the flow was validated. */
  updateTime: Date | undefined;
}

/**
 * The request message for
 * [Flows.ImportFlow][google.cloud.dialogflow.cx.v3.Flows.ImportFlow].
 */
export interface ImportFlowRequest {
  /**
   * Required. The agent to import the flow into.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   */
  parent: string;
  /**
   * The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI
   * to import flow from. The format of this URI must be
   * `gs://<bucket-name>/<object-name>`.
   *
   * Dialogflow performs a read operation for the Cloud Storage object
   * on the caller's behalf, so your request authentication must
   * have read permissions for the object. For more information, see
   * [Dialogflow access
   * control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
   */
  flowUri?:
    | string
    | undefined;
  /** Uncompressed raw byte content for flow. */
  flowContent?:
    | Buffer
    | undefined;
  /** Flow import mode. If not specified, `KEEP` is assumed. */
  importOption: ImportFlowRequest_ImportOption;
  /**
   * Optional. Specifies the import strategy used when resolving resource
   * conflicts.
   */
  flowImportStrategy: FlowImportStrategy | undefined;
}

/** Import option. */
export enum ImportFlowRequest_ImportOption {
  /** IMPORT_OPTION_UNSPECIFIED - Unspecified. Treated as `KEEP`. */
  IMPORT_OPTION_UNSPECIFIED = 0,
  /**
   * KEEP - Always respect settings in exported flow content. It may cause a
   * import failure if some settings (e.g. custom NLU) are not supported in
   * the agent to import into.
   */
  KEEP = 1,
  /**
   * FALLBACK - Fallback to default settings if some settings are not supported in the
   * agent to import into. E.g. Standard NLU will be used if custom NLU is
   * not available.
   */
  FALLBACK = 2,
  UNRECOGNIZED = -1,
}

export function importFlowRequest_ImportOptionFromJSON(object: any): ImportFlowRequest_ImportOption {
  switch (object) {
    case 0:
    case "IMPORT_OPTION_UNSPECIFIED":
      return ImportFlowRequest_ImportOption.IMPORT_OPTION_UNSPECIFIED;
    case 1:
    case "KEEP":
      return ImportFlowRequest_ImportOption.KEEP;
    case 2:
    case "FALLBACK":
      return ImportFlowRequest_ImportOption.FALLBACK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ImportFlowRequest_ImportOption.UNRECOGNIZED;
  }
}

export function importFlowRequest_ImportOptionToJSON(object: ImportFlowRequest_ImportOption): string {
  switch (object) {
    case ImportFlowRequest_ImportOption.IMPORT_OPTION_UNSPECIFIED:
      return "IMPORT_OPTION_UNSPECIFIED";
    case ImportFlowRequest_ImportOption.KEEP:
      return "KEEP";
    case ImportFlowRequest_ImportOption.FALLBACK:
      return "FALLBACK";
    case ImportFlowRequest_ImportOption.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The flow import strategy used for resource conflict resolution associated
 * with an [ImportFlowRequest][google.cloud.dialogflow.cx.v3.ImportFlowRequest].
 */
export interface FlowImportStrategy {
  /**
   * Optional. Import strategy for resource conflict resolution, applied
   * globally throughout the flow. It will be applied for all display name
   * conflicts in the imported content. If not specified, 'CREATE_NEW' is
   * assumed.
   */
  globalImportStrategy: ImportStrategy;
}

/**
 * The response message for
 * [Flows.ImportFlow][google.cloud.dialogflow.cx.v3.Flows.ImportFlow].
 */
export interface ImportFlowResponse {
  /**
   * The unique identifier of the new flow.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>`.
   */
  flow: string;
}

/**
 * The request message for
 * [Flows.ExportFlow][google.cloud.dialogflow.cx.v3.Flows.ExportFlow].
 */
export interface ExportFlowRequest {
  /**
   * Required. The name of the flow to export.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>`.
   */
  name: string;
  /**
   * Optional. The [Google Cloud
   * Storage](https://cloud.google.com/storage/docs/) URI to export the flow to.
   * The format of this URI must be `gs://<bucket-name>/<object-name>`. If left
   * unspecified, the serialized flow is returned inline.
   *
   * Dialogflow performs a write operation for the Cloud Storage object
   * on the caller's behalf, so your request authentication must
   * have write permissions for the object. For more information, see
   * [Dialogflow access
   * control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
   */
  flowUri: string;
  /** Optional. Whether to export flows referenced by the specified flow. */
  includeReferencedFlows: boolean;
}

/**
 * The response message for
 * [Flows.ExportFlow][google.cloud.dialogflow.cx.v3.Flows.ExportFlow].
 */
export interface ExportFlowResponse {
  /**
   * The URI to a file containing the exported flow. This field is populated
   * only if `flow_uri` is specified in
   * [ExportFlowRequest][google.cloud.dialogflow.cx.v3.ExportFlowRequest].
   */
  flowUri?:
    | string
    | undefined;
  /** Uncompressed raw byte content for flow. */
  flowContent?: Buffer | undefined;
}

function createBaseNluSettings(): NluSettings {
  return { modelType: 0, classificationThreshold: 0, modelTrainingMode: 0 };
}

export const NluSettings: MessageFns<NluSettings> = {
  encode(message: NluSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modelType !== 0) {
      writer.uint32(8).int32(message.modelType);
    }
    if (message.classificationThreshold !== 0) {
      writer.uint32(29).float(message.classificationThreshold);
    }
    if (message.modelTrainingMode !== 0) {
      writer.uint32(32).int32(message.modelTrainingMode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NluSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNluSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.modelType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.classificationThreshold = reader.float();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.modelTrainingMode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NluSettings {
    return {
      modelType: isSet(object.modelType) ? nluSettings_ModelTypeFromJSON(object.modelType) : 0,
      classificationThreshold: isSet(object.classificationThreshold)
        ? globalThis.Number(object.classificationThreshold)
        : 0,
      modelTrainingMode: isSet(object.modelTrainingMode)
        ? nluSettings_ModelTrainingModeFromJSON(object.modelTrainingMode)
        : 0,
    };
  },

  toJSON(message: NluSettings): unknown {
    const obj: any = {};
    if (message.modelType !== 0) {
      obj.modelType = nluSettings_ModelTypeToJSON(message.modelType);
    }
    if (message.classificationThreshold !== 0) {
      obj.classificationThreshold = message.classificationThreshold;
    }
    if (message.modelTrainingMode !== 0) {
      obj.modelTrainingMode = nluSettings_ModelTrainingModeToJSON(message.modelTrainingMode);
    }
    return obj;
  },

  create(base?: DeepPartial<NluSettings>): NluSettings {
    return NluSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NluSettings>): NluSettings {
    const message = createBaseNluSettings();
    message.modelType = object.modelType ?? 0;
    message.classificationThreshold = object.classificationThreshold ?? 0;
    message.modelTrainingMode = object.modelTrainingMode ?? 0;
    return message;
  },
};

function createBaseFlow(): Flow {
  return {
    name: "",
    displayName: "",
    description: "",
    transitionRoutes: [],
    eventHandlers: [],
    transitionRouteGroups: [],
    nluSettings: undefined,
    advancedSettings: undefined,
    knowledgeConnectorSettings: undefined,
    multiLanguageSettings: undefined,
    locked: false,
  };
}

export const Flow: MessageFns<Flow> = {
  encode(message: Flow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.transitionRoutes) {
      TransitionRoute.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.eventHandlers) {
      EventHandler.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.transitionRouteGroups) {
      writer.uint32(122).string(v!);
    }
    if (message.nluSettings !== undefined) {
      NluSettings.encode(message.nluSettings, writer.uint32(90).fork()).join();
    }
    if (message.advancedSettings !== undefined) {
      AdvancedSettings.encode(message.advancedSettings, writer.uint32(114).fork()).join();
    }
    if (message.knowledgeConnectorSettings !== undefined) {
      KnowledgeConnectorSettings.encode(message.knowledgeConnectorSettings, writer.uint32(146).fork()).join();
    }
    if (message.multiLanguageSettings !== undefined) {
      Flow_MultiLanguageSettings.encode(message.multiLanguageSettings, writer.uint32(226).fork()).join();
    }
    if (message.locked !== false) {
      writer.uint32(240).bool(message.locked);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Flow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.transitionRoutes.push(TransitionRoute.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.eventHandlers.push(EventHandler.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.transitionRouteGroups.push(reader.string());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.nluSettings = NluSettings.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.advancedSettings = AdvancedSettings.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.knowledgeConnectorSettings = KnowledgeConnectorSettings.decode(reader, reader.uint32());
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.multiLanguageSettings = Flow_MultiLanguageSettings.decode(reader, reader.uint32());
          continue;
        case 30:
          if (tag !== 240) {
            break;
          }

          message.locked = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Flow {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      transitionRoutes: globalThis.Array.isArray(object?.transitionRoutes)
        ? object.transitionRoutes.map((e: any) => TransitionRoute.fromJSON(e))
        : [],
      eventHandlers: globalThis.Array.isArray(object?.eventHandlers)
        ? object.eventHandlers.map((e: any) => EventHandler.fromJSON(e))
        : [],
      transitionRouteGroups: globalThis.Array.isArray(object?.transitionRouteGroups)
        ? object.transitionRouteGroups.map((e: any) => globalThis.String(e))
        : [],
      nluSettings: isSet(object.nluSettings) ? NluSettings.fromJSON(object.nluSettings) : undefined,
      advancedSettings: isSet(object.advancedSettings) ? AdvancedSettings.fromJSON(object.advancedSettings) : undefined,
      knowledgeConnectorSettings: isSet(object.knowledgeConnectorSettings)
        ? KnowledgeConnectorSettings.fromJSON(object.knowledgeConnectorSettings)
        : undefined,
      multiLanguageSettings: isSet(object.multiLanguageSettings)
        ? Flow_MultiLanguageSettings.fromJSON(object.multiLanguageSettings)
        : undefined,
      locked: isSet(object.locked) ? globalThis.Boolean(object.locked) : false,
    };
  },

  toJSON(message: Flow): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.transitionRoutes?.length) {
      obj.transitionRoutes = message.transitionRoutes.map((e) => TransitionRoute.toJSON(e));
    }
    if (message.eventHandlers?.length) {
      obj.eventHandlers = message.eventHandlers.map((e) => EventHandler.toJSON(e));
    }
    if (message.transitionRouteGroups?.length) {
      obj.transitionRouteGroups = message.transitionRouteGroups;
    }
    if (message.nluSettings !== undefined) {
      obj.nluSettings = NluSettings.toJSON(message.nluSettings);
    }
    if (message.advancedSettings !== undefined) {
      obj.advancedSettings = AdvancedSettings.toJSON(message.advancedSettings);
    }
    if (message.knowledgeConnectorSettings !== undefined) {
      obj.knowledgeConnectorSettings = KnowledgeConnectorSettings.toJSON(message.knowledgeConnectorSettings);
    }
    if (message.multiLanguageSettings !== undefined) {
      obj.multiLanguageSettings = Flow_MultiLanguageSettings.toJSON(message.multiLanguageSettings);
    }
    if (message.locked !== false) {
      obj.locked = message.locked;
    }
    return obj;
  },

  create(base?: DeepPartial<Flow>): Flow {
    return Flow.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Flow>): Flow {
    const message = createBaseFlow();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.transitionRoutes = object.transitionRoutes?.map((e) => TransitionRoute.fromPartial(e)) || [];
    message.eventHandlers = object.eventHandlers?.map((e) => EventHandler.fromPartial(e)) || [];
    message.transitionRouteGroups = object.transitionRouteGroups?.map((e) => e) || [];
    message.nluSettings = (object.nluSettings !== undefined && object.nluSettings !== null)
      ? NluSettings.fromPartial(object.nluSettings)
      : undefined;
    message.advancedSettings = (object.advancedSettings !== undefined && object.advancedSettings !== null)
      ? AdvancedSettings.fromPartial(object.advancedSettings)
      : undefined;
    message.knowledgeConnectorSettings =
      (object.knowledgeConnectorSettings !== undefined && object.knowledgeConnectorSettings !== null)
        ? KnowledgeConnectorSettings.fromPartial(object.knowledgeConnectorSettings)
        : undefined;
    message.multiLanguageSettings =
      (object.multiLanguageSettings !== undefined && object.multiLanguageSettings !== null)
        ? Flow_MultiLanguageSettings.fromPartial(object.multiLanguageSettings)
        : undefined;
    message.locked = object.locked ?? false;
    return message;
  },
};

function createBaseFlow_MultiLanguageSettings(): Flow_MultiLanguageSettings {
  return { enableMultiLanguageDetection: false, supportedResponseLanguageCodes: [] };
}

export const Flow_MultiLanguageSettings: MessageFns<Flow_MultiLanguageSettings> = {
  encode(message: Flow_MultiLanguageSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enableMultiLanguageDetection !== false) {
      writer.uint32(8).bool(message.enableMultiLanguageDetection);
    }
    for (const v of message.supportedResponseLanguageCodes) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Flow_MultiLanguageSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlow_MultiLanguageSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enableMultiLanguageDetection = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.supportedResponseLanguageCodes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Flow_MultiLanguageSettings {
    return {
      enableMultiLanguageDetection: isSet(object.enableMultiLanguageDetection)
        ? globalThis.Boolean(object.enableMultiLanguageDetection)
        : false,
      supportedResponseLanguageCodes: globalThis.Array.isArray(object?.supportedResponseLanguageCodes)
        ? object.supportedResponseLanguageCodes.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Flow_MultiLanguageSettings): unknown {
    const obj: any = {};
    if (message.enableMultiLanguageDetection !== false) {
      obj.enableMultiLanguageDetection = message.enableMultiLanguageDetection;
    }
    if (message.supportedResponseLanguageCodes?.length) {
      obj.supportedResponseLanguageCodes = message.supportedResponseLanguageCodes;
    }
    return obj;
  },

  create(base?: DeepPartial<Flow_MultiLanguageSettings>): Flow_MultiLanguageSettings {
    return Flow_MultiLanguageSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Flow_MultiLanguageSettings>): Flow_MultiLanguageSettings {
    const message = createBaseFlow_MultiLanguageSettings();
    message.enableMultiLanguageDetection = object.enableMultiLanguageDetection ?? false;
    message.supportedResponseLanguageCodes = object.supportedResponseLanguageCodes?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateFlowRequest(): CreateFlowRequest {
  return { parent: "", flow: undefined, languageCode: "" };
}

export const CreateFlowRequest: MessageFns<CreateFlowRequest> = {
  encode(message: CreateFlowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.flow !== undefined) {
      Flow.encode(message.flow, writer.uint32(18).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFlowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFlowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.flow = Flow.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFlowRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      flow: isSet(object.flow) ? Flow.fromJSON(object.flow) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: CreateFlowRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.flow !== undefined) {
      obj.flow = Flow.toJSON(message.flow);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateFlowRequest>): CreateFlowRequest {
    return CreateFlowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateFlowRequest>): CreateFlowRequest {
    const message = createBaseCreateFlowRequest();
    message.parent = object.parent ?? "";
    message.flow = (object.flow !== undefined && object.flow !== null) ? Flow.fromPartial(object.flow) : undefined;
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseDeleteFlowRequest(): DeleteFlowRequest {
  return { name: "", force: false };
}

export const DeleteFlowRequest: MessageFns<DeleteFlowRequest> = {
  encode(message: DeleteFlowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFlowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFlowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteFlowRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteFlowRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteFlowRequest>): DeleteFlowRequest {
    return DeleteFlowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteFlowRequest>): DeleteFlowRequest {
    const message = createBaseDeleteFlowRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseListFlowsRequest(): ListFlowsRequest {
  return { parent: "", pageSize: 0, pageToken: "", languageCode: "" };
}

export const ListFlowsRequest: MessageFns<ListFlowsRequest> = {
  encode(message: ListFlowsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.languageCode !== "") {
      writer.uint32(34).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFlowsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFlowsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFlowsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: ListFlowsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFlowsRequest>): ListFlowsRequest {
    return ListFlowsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFlowsRequest>): ListFlowsRequest {
    const message = createBaseListFlowsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseListFlowsResponse(): ListFlowsResponse {
  return { flows: [], nextPageToken: "" };
}

export const ListFlowsResponse: MessageFns<ListFlowsResponse> = {
  encode(message: ListFlowsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.flows) {
      Flow.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFlowsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFlowsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.flows.push(Flow.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFlowsResponse {
    return {
      flows: globalThis.Array.isArray(object?.flows) ? object.flows.map((e: any) => Flow.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListFlowsResponse): unknown {
    const obj: any = {};
    if (message.flows?.length) {
      obj.flows = message.flows.map((e) => Flow.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFlowsResponse>): ListFlowsResponse {
    return ListFlowsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFlowsResponse>): ListFlowsResponse {
    const message = createBaseListFlowsResponse();
    message.flows = object.flows?.map((e) => Flow.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetFlowRequest(): GetFlowRequest {
  return { name: "", languageCode: "" };
}

export const GetFlowRequest: MessageFns<GetFlowRequest> = {
  encode(message: GetFlowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFlowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFlowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFlowRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: GetFlowRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<GetFlowRequest>): GetFlowRequest {
    return GetFlowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFlowRequest>): GetFlowRequest {
    const message = createBaseGetFlowRequest();
    message.name = object.name ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseUpdateFlowRequest(): UpdateFlowRequest {
  return { flow: undefined, updateMask: undefined, languageCode: "" };
}

export const UpdateFlowRequest: MessageFns<UpdateFlowRequest> = {
  encode(message: UpdateFlowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.flow !== undefined) {
      Flow.encode(message.flow, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFlowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFlowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.flow = Flow.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFlowRequest {
    return {
      flow: isSet(object.flow) ? Flow.fromJSON(object.flow) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: UpdateFlowRequest): unknown {
    const obj: any = {};
    if (message.flow !== undefined) {
      obj.flow = Flow.toJSON(message.flow);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateFlowRequest>): UpdateFlowRequest {
    return UpdateFlowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateFlowRequest>): UpdateFlowRequest {
    const message = createBaseUpdateFlowRequest();
    message.flow = (object.flow !== undefined && object.flow !== null) ? Flow.fromPartial(object.flow) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseTrainFlowRequest(): TrainFlowRequest {
  return { name: "" };
}

export const TrainFlowRequest: MessageFns<TrainFlowRequest> = {
  encode(message: TrainFlowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrainFlowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrainFlowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrainFlowRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: TrainFlowRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<TrainFlowRequest>): TrainFlowRequest {
    return TrainFlowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrainFlowRequest>): TrainFlowRequest {
    const message = createBaseTrainFlowRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseValidateFlowRequest(): ValidateFlowRequest {
  return { name: "", languageCode: "" };
}

export const ValidateFlowRequest: MessageFns<ValidateFlowRequest> = {
  encode(message: ValidateFlowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateFlowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateFlowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateFlowRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: ValidateFlowRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<ValidateFlowRequest>): ValidateFlowRequest {
    return ValidateFlowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidateFlowRequest>): ValidateFlowRequest {
    const message = createBaseValidateFlowRequest();
    message.name = object.name ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseGetFlowValidationResultRequest(): GetFlowValidationResultRequest {
  return { name: "", languageCode: "" };
}

export const GetFlowValidationResultRequest: MessageFns<GetFlowValidationResultRequest> = {
  encode(message: GetFlowValidationResultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFlowValidationResultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFlowValidationResultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFlowValidationResultRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: GetFlowValidationResultRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<GetFlowValidationResultRequest>): GetFlowValidationResultRequest {
    return GetFlowValidationResultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFlowValidationResultRequest>): GetFlowValidationResultRequest {
    const message = createBaseGetFlowValidationResultRequest();
    message.name = object.name ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseFlowValidationResult(): FlowValidationResult {
  return { name: "", validationMessages: [], updateTime: undefined };
}

export const FlowValidationResult: MessageFns<FlowValidationResult> = {
  encode(message: FlowValidationResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.validationMessages) {
      ValidationMessage.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlowValidationResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlowValidationResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.validationMessages.push(ValidationMessage.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FlowValidationResult {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      validationMessages: globalThis.Array.isArray(object?.validationMessages)
        ? object.validationMessages.map((e: any) => ValidationMessage.fromJSON(e))
        : [],
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: FlowValidationResult): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.validationMessages?.length) {
      obj.validationMessages = message.validationMessages.map((e) => ValidationMessage.toJSON(e));
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<FlowValidationResult>): FlowValidationResult {
    return FlowValidationResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FlowValidationResult>): FlowValidationResult {
    const message = createBaseFlowValidationResult();
    message.name = object.name ?? "";
    message.validationMessages = object.validationMessages?.map((e) => ValidationMessage.fromPartial(e)) || [];
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseImportFlowRequest(): ImportFlowRequest {
  return { parent: "", flowUri: undefined, flowContent: undefined, importOption: 0, flowImportStrategy: undefined };
}

export const ImportFlowRequest: MessageFns<ImportFlowRequest> = {
  encode(message: ImportFlowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.flowUri !== undefined) {
      writer.uint32(18).string(message.flowUri);
    }
    if (message.flowContent !== undefined) {
      writer.uint32(26).bytes(message.flowContent);
    }
    if (message.importOption !== 0) {
      writer.uint32(32).int32(message.importOption);
    }
    if (message.flowImportStrategy !== undefined) {
      FlowImportStrategy.encode(message.flowImportStrategy, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportFlowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportFlowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.flowUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.flowContent = Buffer.from(reader.bytes());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.importOption = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.flowImportStrategy = FlowImportStrategy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportFlowRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      flowUri: isSet(object.flowUri) ? globalThis.String(object.flowUri) : undefined,
      flowContent: isSet(object.flowContent) ? Buffer.from(bytesFromBase64(object.flowContent)) : undefined,
      importOption: isSet(object.importOption) ? importFlowRequest_ImportOptionFromJSON(object.importOption) : 0,
      flowImportStrategy: isSet(object.flowImportStrategy)
        ? FlowImportStrategy.fromJSON(object.flowImportStrategy)
        : undefined,
    };
  },

  toJSON(message: ImportFlowRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.flowUri !== undefined) {
      obj.flowUri = message.flowUri;
    }
    if (message.flowContent !== undefined) {
      obj.flowContent = base64FromBytes(message.flowContent);
    }
    if (message.importOption !== 0) {
      obj.importOption = importFlowRequest_ImportOptionToJSON(message.importOption);
    }
    if (message.flowImportStrategy !== undefined) {
      obj.flowImportStrategy = FlowImportStrategy.toJSON(message.flowImportStrategy);
    }
    return obj;
  },

  create(base?: DeepPartial<ImportFlowRequest>): ImportFlowRequest {
    return ImportFlowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportFlowRequest>): ImportFlowRequest {
    const message = createBaseImportFlowRequest();
    message.parent = object.parent ?? "";
    message.flowUri = object.flowUri ?? undefined;
    message.flowContent = object.flowContent ?? undefined;
    message.importOption = object.importOption ?? 0;
    message.flowImportStrategy = (object.flowImportStrategy !== undefined && object.flowImportStrategy !== null)
      ? FlowImportStrategy.fromPartial(object.flowImportStrategy)
      : undefined;
    return message;
  },
};

function createBaseFlowImportStrategy(): FlowImportStrategy {
  return { globalImportStrategy: 0 };
}

export const FlowImportStrategy: MessageFns<FlowImportStrategy> = {
  encode(message: FlowImportStrategy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.globalImportStrategy !== 0) {
      writer.uint32(8).int32(message.globalImportStrategy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlowImportStrategy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlowImportStrategy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.globalImportStrategy = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FlowImportStrategy {
    return {
      globalImportStrategy: isSet(object.globalImportStrategy)
        ? importStrategyFromJSON(object.globalImportStrategy)
        : 0,
    };
  },

  toJSON(message: FlowImportStrategy): unknown {
    const obj: any = {};
    if (message.globalImportStrategy !== 0) {
      obj.globalImportStrategy = importStrategyToJSON(message.globalImportStrategy);
    }
    return obj;
  },

  create(base?: DeepPartial<FlowImportStrategy>): FlowImportStrategy {
    return FlowImportStrategy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FlowImportStrategy>): FlowImportStrategy {
    const message = createBaseFlowImportStrategy();
    message.globalImportStrategy = object.globalImportStrategy ?? 0;
    return message;
  },
};

function createBaseImportFlowResponse(): ImportFlowResponse {
  return { flow: "" };
}

export const ImportFlowResponse: MessageFns<ImportFlowResponse> = {
  encode(message: ImportFlowResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.flow !== "") {
      writer.uint32(10).string(message.flow);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportFlowResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportFlowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.flow = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportFlowResponse {
    return { flow: isSet(object.flow) ? globalThis.String(object.flow) : "" };
  },

  toJSON(message: ImportFlowResponse): unknown {
    const obj: any = {};
    if (message.flow !== "") {
      obj.flow = message.flow;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportFlowResponse>): ImportFlowResponse {
    return ImportFlowResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportFlowResponse>): ImportFlowResponse {
    const message = createBaseImportFlowResponse();
    message.flow = object.flow ?? "";
    return message;
  },
};

function createBaseExportFlowRequest(): ExportFlowRequest {
  return { name: "", flowUri: "", includeReferencedFlows: false };
}

export const ExportFlowRequest: MessageFns<ExportFlowRequest> = {
  encode(message: ExportFlowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.flowUri !== "") {
      writer.uint32(18).string(message.flowUri);
    }
    if (message.includeReferencedFlows !== false) {
      writer.uint32(32).bool(message.includeReferencedFlows);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportFlowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportFlowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.flowUri = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.includeReferencedFlows = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportFlowRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      flowUri: isSet(object.flowUri) ? globalThis.String(object.flowUri) : "",
      includeReferencedFlows: isSet(object.includeReferencedFlows)
        ? globalThis.Boolean(object.includeReferencedFlows)
        : false,
    };
  },

  toJSON(message: ExportFlowRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.flowUri !== "") {
      obj.flowUri = message.flowUri;
    }
    if (message.includeReferencedFlows !== false) {
      obj.includeReferencedFlows = message.includeReferencedFlows;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportFlowRequest>): ExportFlowRequest {
    return ExportFlowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportFlowRequest>): ExportFlowRequest {
    const message = createBaseExportFlowRequest();
    message.name = object.name ?? "";
    message.flowUri = object.flowUri ?? "";
    message.includeReferencedFlows = object.includeReferencedFlows ?? false;
    return message;
  },
};

function createBaseExportFlowResponse(): ExportFlowResponse {
  return { flowUri: undefined, flowContent: undefined };
}

export const ExportFlowResponse: MessageFns<ExportFlowResponse> = {
  encode(message: ExportFlowResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.flowUri !== undefined) {
      writer.uint32(10).string(message.flowUri);
    }
    if (message.flowContent !== undefined) {
      writer.uint32(18).bytes(message.flowContent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportFlowResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportFlowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.flowUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.flowContent = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportFlowResponse {
    return {
      flowUri: isSet(object.flowUri) ? globalThis.String(object.flowUri) : undefined,
      flowContent: isSet(object.flowContent) ? Buffer.from(bytesFromBase64(object.flowContent)) : undefined,
    };
  },

  toJSON(message: ExportFlowResponse): unknown {
    const obj: any = {};
    if (message.flowUri !== undefined) {
      obj.flowUri = message.flowUri;
    }
    if (message.flowContent !== undefined) {
      obj.flowContent = base64FromBytes(message.flowContent);
    }
    return obj;
  },

  create(base?: DeepPartial<ExportFlowResponse>): ExportFlowResponse {
    return ExportFlowResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportFlowResponse>): ExportFlowResponse {
    const message = createBaseExportFlowResponse();
    message.flowUri = object.flowUri ?? undefined;
    message.flowContent = object.flowContent ?? undefined;
    return message;
  },
};

/** Service for managing [Flows][google.cloud.dialogflow.cx.v3.Flow]. */
export type FlowsDefinition = typeof FlowsDefinition;
export const FlowsDefinition = {
  name: "Flows",
  fullName: "google.cloud.dialogflow.cx.v3.Flows",
  methods: {
    /**
     * Creates a flow in the specified agent.
     *
     * Note: You should always train a flow prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     */
    createFlow: {
      name: "CreateFlow",
      requestType: CreateFlowRequest,
      requestStream: false,
      responseType: Flow,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 112, 97, 114, 101, 110, 116, 44, 102, 108, 111, 119])],
          578365826: [
            Buffer.from([
              58,
              58,
              4,
              102,
              108,
              111,
              119,
              34,
              50,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              102,
              108,
              111,
              119,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a specified flow. */
    deleteFlow: {
      name: "DeleteFlow",
      requestType: DeleteFlowRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              42,
              50,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Returns the list of all flows in the specified agent. */
    listFlows: {
      name: "ListFlows",
      requestType: ListFlowsRequest,
      requestStream: false,
      responseType: ListFlowsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              102,
              108,
              111,
              119,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves the specified flow. */
    getFlow: {
      name: "GetFlow",
      requestType: GetFlowRequest,
      requestStream: false,
      responseType: Flow,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified flow.
     *
     * Note: You should always train a flow prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     */
    updateFlow: {
      name: "UpdateFlow",
      requestType: UpdateFlowRequest,
      requestStream: false,
      responseType: Flow,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 102, 108, 111, 119, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              63,
              58,
              4,
              102,
              108,
              111,
              119,
              50,
              55,
              47,
              118,
              51,
              47,
              123,
              102,
              108,
              111,
              119,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Trains the specified flow. Note that only the flow in 'draft' environment
     * is trained.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`: An [Empty
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
     *
     * Note: You should always train a flow prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     */
    trainFlow: {
      name: "TrainFlow",
      requestType: TrainFlowRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              47,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
              58,
              116,
              114,
              97,
              105,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Validates the specified flow and creates or updates validation results.
     * Please call this API after the training is completed to get the complete
     * validation results.
     */
    validateFlow: {
      name: "ValidateFlow",
      requestType: ValidateFlowRequest,
      requestStream: false,
      responseType: FlowValidationResult,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              64,
              58,
              1,
              42,
              34,
              59,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
              58,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the latest flow validation result. Flow validation is performed
     * when ValidateFlow is called.
     */
    getFlowValidationResult: {
      name: "GetFlowValidationResult",
      requestType: GetFlowValidationResultRequest,
      requestStream: false,
      responseType: FlowValidationResult,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              69,
              18,
              67,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              82,
              101,
              115,
              117,
              108,
              116,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Imports the specified flow to the specified agent from a binary file.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`:
     * [ImportFlowResponse][google.cloud.dialogflow.cx.v3.ImportFlowResponse]
     *
     * Note: You should always train a flow prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     */
    importFlow: {
      name: "ImportFlow",
      requestType: ImportFlowRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              44,
              10,
              18,
              73,
              109,
              112,
              111,
              114,
              116,
              70,
              108,
              111,
              119,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              102,
              108,
              111,
              119,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Exports the specified flow to a binary file.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`:
     * [ExportFlowResponse][google.cloud.dialogflow.cx.v3.ExportFlowResponse]
     *
     * Note that resources (e.g. intents, entities, webhooks) that the flow
     * references will also be exported.
     */
    exportFlow: {
      name: "ExportFlow",
      requestType: ExportFlowRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              44,
              10,
              18,
              69,
              120,
              112,
              111,
              114,
              116,
              70,
              108,
              111,
              119,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface FlowsServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a flow in the specified agent.
   *
   * Note: You should always train a flow prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  createFlow(request: CreateFlowRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Flow>>;
  /** Deletes a specified flow. */
  deleteFlow(request: DeleteFlowRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Returns the list of all flows in the specified agent. */
  listFlows(request: ListFlowsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListFlowsResponse>>;
  /** Retrieves the specified flow. */
  getFlow(request: GetFlowRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Flow>>;
  /**
   * Updates the specified flow.
   *
   * Note: You should always train a flow prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  updateFlow(request: UpdateFlowRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Flow>>;
  /**
   * Trains the specified flow. Note that only the flow in 'draft' environment
   * is trained.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * Note: You should always train a flow prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  trainFlow(request: TrainFlowRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Validates the specified flow and creates or updates validation results.
   * Please call this API after the training is completed to get the complete
   * validation results.
   */
  validateFlow(
    request: ValidateFlowRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FlowValidationResult>>;
  /**
   * Gets the latest flow validation result. Flow validation is performed
   * when ValidateFlow is called.
   */
  getFlowValidationResult(
    request: GetFlowValidationResultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FlowValidationResult>>;
  /**
   * Imports the specified flow to the specified agent from a binary file.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`:
   * [ImportFlowResponse][google.cloud.dialogflow.cx.v3.ImportFlowResponse]
   *
   * Note: You should always train a flow prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  importFlow(request: ImportFlowRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Exports the specified flow to a binary file.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`:
   * [ExportFlowResponse][google.cloud.dialogflow.cx.v3.ExportFlowResponse]
   *
   * Note that resources (e.g. intents, entities, webhooks) that the flow
   * references will also be exported.
   */
  exportFlow(request: ExportFlowRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface FlowsClient<CallOptionsExt = {}> {
  /**
   * Creates a flow in the specified agent.
   *
   * Note: You should always train a flow prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  createFlow(request: DeepPartial<CreateFlowRequest>, options?: CallOptions & CallOptionsExt): Promise<Flow>;
  /** Deletes a specified flow. */
  deleteFlow(request: DeepPartial<DeleteFlowRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Returns the list of all flows in the specified agent. */
  listFlows(request: DeepPartial<ListFlowsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListFlowsResponse>;
  /** Retrieves the specified flow. */
  getFlow(request: DeepPartial<GetFlowRequest>, options?: CallOptions & CallOptionsExt): Promise<Flow>;
  /**
   * Updates the specified flow.
   *
   * Note: You should always train a flow prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  updateFlow(request: DeepPartial<UpdateFlowRequest>, options?: CallOptions & CallOptionsExt): Promise<Flow>;
  /**
   * Trains the specified flow. Note that only the flow in 'draft' environment
   * is trained.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * Note: You should always train a flow prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  trainFlow(request: DeepPartial<TrainFlowRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Validates the specified flow and creates or updates validation results.
   * Please call this API after the training is completed to get the complete
   * validation results.
   */
  validateFlow(
    request: DeepPartial<ValidateFlowRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FlowValidationResult>;
  /**
   * Gets the latest flow validation result. Flow validation is performed
   * when ValidateFlow is called.
   */
  getFlowValidationResult(
    request: DeepPartial<GetFlowValidationResultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FlowValidationResult>;
  /**
   * Imports the specified flow to the specified agent from a binary file.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`:
   * [ImportFlowResponse][google.cloud.dialogflow.cx.v3.ImportFlowResponse]
   *
   * Note: You should always train a flow prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  importFlow(request: DeepPartial<ImportFlowRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Exports the specified flow to a binary file.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`:
   * [ExportFlowResponse][google.cloud.dialogflow.cx.v3.ExportFlowResponse]
   *
   * Note that resources (e.g. intents, entities, webhooks) that the flow
   * references will also be exported.
   */
  exportFlow(request: DeepPartial<ExportFlowRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
