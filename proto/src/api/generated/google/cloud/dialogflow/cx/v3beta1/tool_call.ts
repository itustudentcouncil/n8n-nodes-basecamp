// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3beta1/tool_call.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../../../protobuf/struct.js";

export const protobufPackage = "google.cloud.dialogflow.cx.v3beta1";

/** Represents a call of a specific tool's action with the specified inputs. */
export interface ToolCall {
  /**
   * The [tool][Tool] associated with this call.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/tools/<Tool ID>`.
   */
  tool: string;
  /** The name of the tool's action associated with this call. */
  action: string;
  /** The action's input parameters. */
  inputParameters: { [key: string]: any } | undefined;
}

/** The result of calling a tool's action that has been executed by the client. */
export interface ToolCallResult {
  /**
   * The [tool][Tool] associated with this call.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/tools/<Tool ID>`.
   */
  tool: string;
  /** The name of the tool's action associated with this call. */
  action: string;
  /** The tool call's error. */
  error?:
    | ToolCallResult_Error
    | undefined;
  /** The tool call's output parameters. */
  outputParameters?: { [key: string]: any } | undefined;
}

/** An error produced by the tool call. */
export interface ToolCallResult_Error {
  /** The error message of the function. */
  message: string;
}

function createBaseToolCall(): ToolCall {
  return { tool: "", action: "", inputParameters: undefined };
}

export const ToolCall: MessageFns<ToolCall> = {
  encode(message: ToolCall, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tool !== "") {
      writer.uint32(10).string(message.tool);
    }
    if (message.action !== "") {
      writer.uint32(18).string(message.action);
    }
    if (message.inputParameters !== undefined) {
      Struct.encode(Struct.wrap(message.inputParameters), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ToolCall {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToolCall();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tool = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.action = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.inputParameters = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToolCall {
    return {
      tool: isSet(object.tool) ? globalThis.String(object.tool) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      inputParameters: isObject(object.inputParameters) ? object.inputParameters : undefined,
    };
  },

  toJSON(message: ToolCall): unknown {
    const obj: any = {};
    if (message.tool !== "") {
      obj.tool = message.tool;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.inputParameters !== undefined) {
      obj.inputParameters = message.inputParameters;
    }
    return obj;
  },

  create(base?: DeepPartial<ToolCall>): ToolCall {
    return ToolCall.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ToolCall>): ToolCall {
    const message = createBaseToolCall();
    message.tool = object.tool ?? "";
    message.action = object.action ?? "";
    message.inputParameters = object.inputParameters ?? undefined;
    return message;
  },
};

function createBaseToolCallResult(): ToolCallResult {
  return { tool: "", action: "", error: undefined, outputParameters: undefined };
}

export const ToolCallResult: MessageFns<ToolCallResult> = {
  encode(message: ToolCallResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tool !== "") {
      writer.uint32(10).string(message.tool);
    }
    if (message.action !== "") {
      writer.uint32(18).string(message.action);
    }
    if (message.error !== undefined) {
      ToolCallResult_Error.encode(message.error, writer.uint32(26).fork()).join();
    }
    if (message.outputParameters !== undefined) {
      Struct.encode(Struct.wrap(message.outputParameters), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ToolCallResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToolCallResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tool = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.action = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.error = ToolCallResult_Error.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.outputParameters = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToolCallResult {
    return {
      tool: isSet(object.tool) ? globalThis.String(object.tool) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      error: isSet(object.error) ? ToolCallResult_Error.fromJSON(object.error) : undefined,
      outputParameters: isObject(object.outputParameters) ? object.outputParameters : undefined,
    };
  },

  toJSON(message: ToolCallResult): unknown {
    const obj: any = {};
    if (message.tool !== "") {
      obj.tool = message.tool;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.error !== undefined) {
      obj.error = ToolCallResult_Error.toJSON(message.error);
    }
    if (message.outputParameters !== undefined) {
      obj.outputParameters = message.outputParameters;
    }
    return obj;
  },

  create(base?: DeepPartial<ToolCallResult>): ToolCallResult {
    return ToolCallResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ToolCallResult>): ToolCallResult {
    const message = createBaseToolCallResult();
    message.tool = object.tool ?? "";
    message.action = object.action ?? "";
    message.error = (object.error !== undefined && object.error !== null)
      ? ToolCallResult_Error.fromPartial(object.error)
      : undefined;
    message.outputParameters = object.outputParameters ?? undefined;
    return message;
  },
};

function createBaseToolCallResult_Error(): ToolCallResult_Error {
  return { message: "" };
}

export const ToolCallResult_Error: MessageFns<ToolCallResult_Error> = {
  encode(message: ToolCallResult_Error, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ToolCallResult_Error {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToolCallResult_Error();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToolCallResult_Error {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: ToolCallResult_Error): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<ToolCallResult_Error>): ToolCallResult_Error {
    return ToolCallResult_Error.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ToolCallResult_Error>): ToolCallResult_Error {
    const message = createBaseToolCallResult_Error();
    message.message = object.message ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
