// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3/inline.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.dialogflow.cx.v3";

/**
 * Inline destination for a Dialogflow operation that writes or exports objects
 * (e.g. [intents][google.cloud.dialogflow.cx.v3.Intent]) outside of Dialogflow.
 */
export interface InlineDestination {
  /**
   * Output only. The uncompressed byte content for the objects.
   * Only populated in responses.
   */
  content: Buffer;
}

/**
 * Inline source for a Dialogflow operation that reads or imports objects
 * (e.g. [intents][google.cloud.dialogflow.cx.v3.Intent]) into Dialogflow.
 */
export interface InlineSource {
  /** The uncompressed byte content for the objects. */
  content: Buffer;
}

function createBaseInlineDestination(): InlineDestination {
  return { content: Buffer.alloc(0) };
}

export const InlineDestination: MessageFns<InlineDestination> = {
  encode(message: InlineDestination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content.length !== 0) {
      writer.uint32(10).bytes(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InlineDestination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInlineDestination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.content = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InlineDestination {
    return { content: isSet(object.content) ? Buffer.from(bytesFromBase64(object.content)) : Buffer.alloc(0) };
  },

  toJSON(message: InlineDestination): unknown {
    const obj: any = {};
    if (message.content.length !== 0) {
      obj.content = base64FromBytes(message.content);
    }
    return obj;
  },

  create(base?: DeepPartial<InlineDestination>): InlineDestination {
    return InlineDestination.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InlineDestination>): InlineDestination {
    const message = createBaseInlineDestination();
    message.content = object.content ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseInlineSource(): InlineSource {
  return { content: Buffer.alloc(0) };
}

export const InlineSource: MessageFns<InlineSource> = {
  encode(message: InlineSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content.length !== 0) {
      writer.uint32(10).bytes(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InlineSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInlineSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.content = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InlineSource {
    return { content: isSet(object.content) ? Buffer.from(bytesFromBase64(object.content)) : Buffer.alloc(0) };
  },

  toJSON(message: InlineSource): unknown {
    const obj: any = {};
    if (message.content.length !== 0) {
      obj.content = base64FromBytes(message.content);
    }
    return obj;
  },

  create(base?: DeepPartial<InlineSource>): InlineSource {
    return InlineSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InlineSource>): InlineSource {
    const message = createBaseInlineSource();
    message.content = object.content ?? Buffer.alloc(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
