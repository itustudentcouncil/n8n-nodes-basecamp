// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3beta1/response_message.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../../../protobuf/struct.js";
import { ToolCall } from "./tool_call.js";

export const protobufPackage = "google.cloud.dialogflow.cx.v3beta1";

/**
 * Represents a response message that can be returned by a conversational agent.
 *
 * Response messages are also used for output audio synthesis. The approach is
 * as follows:
 *
 * * If at least one OutputAudioText response is present, then all
 *   OutputAudioText responses are linearly concatenated, and the result is used
 *   for output audio synthesis.
 * * If the OutputAudioText responses are a mixture of text and SSML, then the
 *   concatenated result is treated as SSML; otherwise, the result is treated as
 *   either text or SSML as appropriate. The agent designer should ideally use
 *   either text or SSML consistently throughout the bot design.
 * * Otherwise, all Text responses are linearly concatenated, and the result is
 *   used for output audio synthesis.
 *
 * This approach allows for more sophisticated user experience scenarios, where
 * the text displayed to the user may differ from what is heard.
 */
export interface ResponseMessage {
  /** Returns a text response. */
  text?:
    | ResponseMessage_Text
    | undefined;
  /** Returns a response containing a custom, platform-specific payload. */
  payload?:
    | { [key: string]: any }
    | undefined;
  /** Indicates that the conversation succeeded. */
  conversationSuccess?:
    | ResponseMessage_ConversationSuccess
    | undefined;
  /**
   * A text or ssml response that is preferentially used for TTS output audio
   * synthesis, as described in the comment on the ResponseMessage message.
   */
  outputAudioText?:
    | ResponseMessage_OutputAudioText
    | undefined;
  /** Hands off conversation to a human agent. */
  liveAgentHandoff?:
    | ResponseMessage_LiveAgentHandoff
    | undefined;
  /**
   * Output only. A signal that indicates the interaction with the Dialogflow
   * agent has ended. This message is generated by Dialogflow only when the
   * conversation reaches `END_SESSION` page. It is not supposed to be defined
   * by the user.
   *
   * It's guaranteed that there is at most one such message in each response.
   */
  endInteraction?:
    | ResponseMessage_EndInteraction
    | undefined;
  /**
   * Signal that the client should play an audio clip hosted at a
   * client-specific URI. Dialogflow uses this to construct
   * [mixed_audio][google.cloud.dialogflow.cx.v3beta1.ResponseMessage.mixed_audio].
   * However, Dialogflow itself does not try to read or process the URI in any
   * way.
   */
  playAudio?:
    | ResponseMessage_PlayAudio
    | undefined;
  /**
   * Output only. An audio response message composed of both the synthesized
   * Dialogflow agent responses and responses defined via
   * [play_audio][google.cloud.dialogflow.cx.v3beta1.ResponseMessage.play_audio].
   * This message is generated by Dialogflow only and not supposed to be
   * defined by the user.
   */
  mixedAudio?:
    | ResponseMessage_MixedAudio
    | undefined;
  /**
   * A signal that the client should transfer the phone call connected to
   * this agent to a third-party endpoint.
   */
  telephonyTransferCall?:
    | ResponseMessage_TelephonyTransferCall
    | undefined;
  /**
   * Represents info card for knowledge answers, to be better rendered in
   * Dialogflow Messenger.
   */
  knowledgeInfoCard?:
    | ResponseMessage_KnowledgeInfoCard
    | undefined;
  /**
   * Returns the definition of a tool call that should be executed by the
   * client.
   */
  toolCall?:
    | ToolCall
    | undefined;
  /**
   * The channel which the response is associated with. Clients can specify the
   * channel via
   * [QueryParameters.channel][google.cloud.dialogflow.cx.v3beta1.QueryParameters.channel],
   * and only associated channel response will be returned.
   */
  channel: string;
}

/** The text response message. */
export interface ResponseMessage_Text {
  /** Required. A collection of text responses. */
  text: string[];
  /**
   * Output only. Whether the playback of this message can be interrupted by
   * the end user's speech and the client can then starts the next Dialogflow
   * request.
   */
  allowPlaybackInterruption: boolean;
}

/**
 * Indicates that the conversation should be handed off to a live agent.
 *
 * Dialogflow only uses this to determine which conversations were handed off
 * to a human agent for measurement purposes. What else to do with this signal
 * is up to you and your handoff procedures.
 *
 * You may set this, for example:
 * * In the
 * [entry_fulfillment][google.cloud.dialogflow.cx.v3beta1.Page.entry_fulfillment]
 * of a [Page][google.cloud.dialogflow.cx.v3beta1.Page] if
 *   entering the page indicates something went extremely wrong in the
 *   conversation.
 * * In a webhook response when you determine that the customer issue can only
 *   be handled by a human.
 */
export interface ResponseMessage_LiveAgentHandoff {
  /**
   * Custom metadata for your handoff procedure. Dialogflow doesn't impose
   * any structure on this.
   */
  metadata: { [key: string]: any } | undefined;
}

/**
 * Indicates that the conversation succeeded, i.e., the bot handled the issue
 * that the customer talked to it about.
 *
 * Dialogflow only uses this to determine which conversations should be
 * counted as successful and doesn't process the metadata in this message in
 * any way. Note that Dialogflow also considers conversations that get to the
 * conversation end page as successful even if they don't return
 * [ConversationSuccess][google.cloud.dialogflow.cx.v3beta1.ResponseMessage.ConversationSuccess].
 *
 * You may set this, for example:
 * * In the
 * [entry_fulfillment][google.cloud.dialogflow.cx.v3beta1.Page.entry_fulfillment]
 * of a [Page][google.cloud.dialogflow.cx.v3beta1.Page] if
 *   entering the page indicates that the conversation succeeded.
 * * In a webhook response when you determine that you handled the customer
 *   issue.
 */
export interface ResponseMessage_ConversationSuccess {
  /** Custom metadata. Dialogflow doesn't impose any structure on this. */
  metadata: { [key: string]: any } | undefined;
}

/**
 * A text or ssml response that is preferentially used for TTS output audio
 * synthesis, as described in the comment on the ResponseMessage message.
 */
export interface ResponseMessage_OutputAudioText {
  /** The raw text to be synthesized. */
  text?:
    | string
    | undefined;
  /**
   * The SSML text to be synthesized. For more information, see
   * [SSML](/speech/text-to-speech/docs/ssml).
   */
  ssml?:
    | string
    | undefined;
  /**
   * Output only. Whether the playback of this message can be interrupted by
   * the end user's speech and the client can then starts the next Dialogflow
   * request.
   */
  allowPlaybackInterruption: boolean;
}

/**
 * Indicates that interaction with the Dialogflow agent has ended.
 * This message is generated by Dialogflow only and not supposed to be
 * defined by the user.
 */
export interface ResponseMessage_EndInteraction {
}

/** Specifies an audio clip to be played by the client as part of the response. */
export interface ResponseMessage_PlayAudio {
  /**
   * Required. URI of the audio clip. Dialogflow does not impose any
   * validation on this value. It is specific to the client that reads it.
   */
  audioUri: string;
  /**
   * Output only. Whether the playback of this message can be interrupted by
   * the end user's speech and the client can then starts the next Dialogflow
   * request.
   */
  allowPlaybackInterruption: boolean;
}

/**
 * Represents an audio message that is composed of both segments
 * synthesized from the Dialogflow agent prompts and ones hosted externally
 * at the specified URIs.
 * The external URIs are specified via
 * [play_audio][google.cloud.dialogflow.cx.v3beta1.ResponseMessage.play_audio].
 * This message is generated by Dialogflow only and not supposed to be
 * defined by the user.
 */
export interface ResponseMessage_MixedAudio {
  /** Segments this audio response is composed of. */
  segments: ResponseMessage_MixedAudio_Segment[];
}

/** Represents one segment of audio. */
export interface ResponseMessage_MixedAudio_Segment {
  /**
   * Raw audio synthesized from the Dialogflow agent's response using
   * the output config specified in the request.
   */
  audio?:
    | Buffer
    | undefined;
  /**
   * Client-specific URI that points to an audio clip accessible to the
   * client. Dialogflow does not impose any validation on it.
   */
  uri?:
    | string
    | undefined;
  /**
   * Output only. Whether the playback of this segment can be interrupted by
   * the end user's speech and the client should then start the next
   * Dialogflow request.
   */
  allowPlaybackInterruption: boolean;
}

/**
 * Represents the signal that telles the client to transfer the phone call
 * connected to the agent to a third-party endpoint.
 */
export interface ResponseMessage_TelephonyTransferCall {
  /**
   * Transfer the call to a phone number
   * in [E.164 format](https://en.wikipedia.org/wiki/E.164).
   */
  phoneNumber?: string | undefined;
}

/**
 * Represents info card response. If the response contains generative
 * knowledge prediction, Dialogflow will return a payload with Infobot
 * Messenger compatible info card.
 *
 * Otherwise, the info card response is skipped.
 */
export interface ResponseMessage_KnowledgeInfoCard {
}

function createBaseResponseMessage(): ResponseMessage {
  return {
    text: undefined,
    payload: undefined,
    conversationSuccess: undefined,
    outputAudioText: undefined,
    liveAgentHandoff: undefined,
    endInteraction: undefined,
    playAudio: undefined,
    mixedAudio: undefined,
    telephonyTransferCall: undefined,
    knowledgeInfoCard: undefined,
    toolCall: undefined,
    channel: "",
  };
}

export const ResponseMessage: MessageFns<ResponseMessage> = {
  encode(message: ResponseMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      ResponseMessage_Text.encode(message.text, writer.uint32(10).fork()).join();
    }
    if (message.payload !== undefined) {
      Struct.encode(Struct.wrap(message.payload), writer.uint32(18).fork()).join();
    }
    if (message.conversationSuccess !== undefined) {
      ResponseMessage_ConversationSuccess.encode(message.conversationSuccess, writer.uint32(74).fork()).join();
    }
    if (message.outputAudioText !== undefined) {
      ResponseMessage_OutputAudioText.encode(message.outputAudioText, writer.uint32(66).fork()).join();
    }
    if (message.liveAgentHandoff !== undefined) {
      ResponseMessage_LiveAgentHandoff.encode(message.liveAgentHandoff, writer.uint32(82).fork()).join();
    }
    if (message.endInteraction !== undefined) {
      ResponseMessage_EndInteraction.encode(message.endInteraction, writer.uint32(90).fork()).join();
    }
    if (message.playAudio !== undefined) {
      ResponseMessage_PlayAudio.encode(message.playAudio, writer.uint32(98).fork()).join();
    }
    if (message.mixedAudio !== undefined) {
      ResponseMessage_MixedAudio.encode(message.mixedAudio, writer.uint32(106).fork()).join();
    }
    if (message.telephonyTransferCall !== undefined) {
      ResponseMessage_TelephonyTransferCall.encode(message.telephonyTransferCall, writer.uint32(146).fork()).join();
    }
    if (message.knowledgeInfoCard !== undefined) {
      ResponseMessage_KnowledgeInfoCard.encode(message.knowledgeInfoCard, writer.uint32(162).fork()).join();
    }
    if (message.toolCall !== undefined) {
      ToolCall.encode(message.toolCall, writer.uint32(178).fork()).join();
    }
    if (message.channel !== "") {
      writer.uint32(154).string(message.channel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = ResponseMessage_Text.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payload = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.conversationSuccess = ResponseMessage_ConversationSuccess.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.outputAudioText = ResponseMessage_OutputAudioText.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.liveAgentHandoff = ResponseMessage_LiveAgentHandoff.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.endInteraction = ResponseMessage_EndInteraction.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.playAudio = ResponseMessage_PlayAudio.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.mixedAudio = ResponseMessage_MixedAudio.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.telephonyTransferCall = ResponseMessage_TelephonyTransferCall.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.knowledgeInfoCard = ResponseMessage_KnowledgeInfoCard.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.toolCall = ToolCall.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.channel = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseMessage {
    return {
      text: isSet(object.text) ? ResponseMessage_Text.fromJSON(object.text) : undefined,
      payload: isObject(object.payload) ? object.payload : undefined,
      conversationSuccess: isSet(object.conversationSuccess)
        ? ResponseMessage_ConversationSuccess.fromJSON(object.conversationSuccess)
        : undefined,
      outputAudioText: isSet(object.outputAudioText)
        ? ResponseMessage_OutputAudioText.fromJSON(object.outputAudioText)
        : undefined,
      liveAgentHandoff: isSet(object.liveAgentHandoff)
        ? ResponseMessage_LiveAgentHandoff.fromJSON(object.liveAgentHandoff)
        : undefined,
      endInteraction: isSet(object.endInteraction)
        ? ResponseMessage_EndInteraction.fromJSON(object.endInteraction)
        : undefined,
      playAudio: isSet(object.playAudio) ? ResponseMessage_PlayAudio.fromJSON(object.playAudio) : undefined,
      mixedAudio: isSet(object.mixedAudio) ? ResponseMessage_MixedAudio.fromJSON(object.mixedAudio) : undefined,
      telephonyTransferCall: isSet(object.telephonyTransferCall)
        ? ResponseMessage_TelephonyTransferCall.fromJSON(object.telephonyTransferCall)
        : undefined,
      knowledgeInfoCard: isSet(object.knowledgeInfoCard)
        ? ResponseMessage_KnowledgeInfoCard.fromJSON(object.knowledgeInfoCard)
        : undefined,
      toolCall: isSet(object.toolCall) ? ToolCall.fromJSON(object.toolCall) : undefined,
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
    };
  },

  toJSON(message: ResponseMessage): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = ResponseMessage_Text.toJSON(message.text);
    }
    if (message.payload !== undefined) {
      obj.payload = message.payload;
    }
    if (message.conversationSuccess !== undefined) {
      obj.conversationSuccess = ResponseMessage_ConversationSuccess.toJSON(message.conversationSuccess);
    }
    if (message.outputAudioText !== undefined) {
      obj.outputAudioText = ResponseMessage_OutputAudioText.toJSON(message.outputAudioText);
    }
    if (message.liveAgentHandoff !== undefined) {
      obj.liveAgentHandoff = ResponseMessage_LiveAgentHandoff.toJSON(message.liveAgentHandoff);
    }
    if (message.endInteraction !== undefined) {
      obj.endInteraction = ResponseMessage_EndInteraction.toJSON(message.endInteraction);
    }
    if (message.playAudio !== undefined) {
      obj.playAudio = ResponseMessage_PlayAudio.toJSON(message.playAudio);
    }
    if (message.mixedAudio !== undefined) {
      obj.mixedAudio = ResponseMessage_MixedAudio.toJSON(message.mixedAudio);
    }
    if (message.telephonyTransferCall !== undefined) {
      obj.telephonyTransferCall = ResponseMessage_TelephonyTransferCall.toJSON(message.telephonyTransferCall);
    }
    if (message.knowledgeInfoCard !== undefined) {
      obj.knowledgeInfoCard = ResponseMessage_KnowledgeInfoCard.toJSON(message.knowledgeInfoCard);
    }
    if (message.toolCall !== undefined) {
      obj.toolCall = ToolCall.toJSON(message.toolCall);
    }
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseMessage>): ResponseMessage {
    return ResponseMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseMessage>): ResponseMessage {
    const message = createBaseResponseMessage();
    message.text = (object.text !== undefined && object.text !== null)
      ? ResponseMessage_Text.fromPartial(object.text)
      : undefined;
    message.payload = object.payload ?? undefined;
    message.conversationSuccess = (object.conversationSuccess !== undefined && object.conversationSuccess !== null)
      ? ResponseMessage_ConversationSuccess.fromPartial(object.conversationSuccess)
      : undefined;
    message.outputAudioText = (object.outputAudioText !== undefined && object.outputAudioText !== null)
      ? ResponseMessage_OutputAudioText.fromPartial(object.outputAudioText)
      : undefined;
    message.liveAgentHandoff = (object.liveAgentHandoff !== undefined && object.liveAgentHandoff !== null)
      ? ResponseMessage_LiveAgentHandoff.fromPartial(object.liveAgentHandoff)
      : undefined;
    message.endInteraction = (object.endInteraction !== undefined && object.endInteraction !== null)
      ? ResponseMessage_EndInteraction.fromPartial(object.endInteraction)
      : undefined;
    message.playAudio = (object.playAudio !== undefined && object.playAudio !== null)
      ? ResponseMessage_PlayAudio.fromPartial(object.playAudio)
      : undefined;
    message.mixedAudio = (object.mixedAudio !== undefined && object.mixedAudio !== null)
      ? ResponseMessage_MixedAudio.fromPartial(object.mixedAudio)
      : undefined;
    message.telephonyTransferCall =
      (object.telephonyTransferCall !== undefined && object.telephonyTransferCall !== null)
        ? ResponseMessage_TelephonyTransferCall.fromPartial(object.telephonyTransferCall)
        : undefined;
    message.knowledgeInfoCard = (object.knowledgeInfoCard !== undefined && object.knowledgeInfoCard !== null)
      ? ResponseMessage_KnowledgeInfoCard.fromPartial(object.knowledgeInfoCard)
      : undefined;
    message.toolCall = (object.toolCall !== undefined && object.toolCall !== null)
      ? ToolCall.fromPartial(object.toolCall)
      : undefined;
    message.channel = object.channel ?? "";
    return message;
  },
};

function createBaseResponseMessage_Text(): ResponseMessage_Text {
  return { text: [], allowPlaybackInterruption: false };
}

export const ResponseMessage_Text: MessageFns<ResponseMessage_Text> = {
  encode(message: ResponseMessage_Text, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.text) {
      writer.uint32(10).string(v!);
    }
    if (message.allowPlaybackInterruption !== false) {
      writer.uint32(16).bool(message.allowPlaybackInterruption);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseMessage_Text {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseMessage_Text();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text.push(reader.string());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.allowPlaybackInterruption = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseMessage_Text {
    return {
      text: globalThis.Array.isArray(object?.text) ? object.text.map((e: any) => globalThis.String(e)) : [],
      allowPlaybackInterruption: isSet(object.allowPlaybackInterruption)
        ? globalThis.Boolean(object.allowPlaybackInterruption)
        : false,
    };
  },

  toJSON(message: ResponseMessage_Text): unknown {
    const obj: any = {};
    if (message.text?.length) {
      obj.text = message.text;
    }
    if (message.allowPlaybackInterruption !== false) {
      obj.allowPlaybackInterruption = message.allowPlaybackInterruption;
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseMessage_Text>): ResponseMessage_Text {
    return ResponseMessage_Text.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseMessage_Text>): ResponseMessage_Text {
    const message = createBaseResponseMessage_Text();
    message.text = object.text?.map((e) => e) || [];
    message.allowPlaybackInterruption = object.allowPlaybackInterruption ?? false;
    return message;
  },
};

function createBaseResponseMessage_LiveAgentHandoff(): ResponseMessage_LiveAgentHandoff {
  return { metadata: undefined };
}

export const ResponseMessage_LiveAgentHandoff: MessageFns<ResponseMessage_LiveAgentHandoff> = {
  encode(message: ResponseMessage_LiveAgentHandoff, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Struct.encode(Struct.wrap(message.metadata), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseMessage_LiveAgentHandoff {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseMessage_LiveAgentHandoff();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadata = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseMessage_LiveAgentHandoff {
    return { metadata: isObject(object.metadata) ? object.metadata : undefined };
  },

  toJSON(message: ResponseMessage_LiveAgentHandoff): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseMessage_LiveAgentHandoff>): ResponseMessage_LiveAgentHandoff {
    return ResponseMessage_LiveAgentHandoff.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseMessage_LiveAgentHandoff>): ResponseMessage_LiveAgentHandoff {
    const message = createBaseResponseMessage_LiveAgentHandoff();
    message.metadata = object.metadata ?? undefined;
    return message;
  },
};

function createBaseResponseMessage_ConversationSuccess(): ResponseMessage_ConversationSuccess {
  return { metadata: undefined };
}

export const ResponseMessage_ConversationSuccess: MessageFns<ResponseMessage_ConversationSuccess> = {
  encode(message: ResponseMessage_ConversationSuccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Struct.encode(Struct.wrap(message.metadata), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseMessage_ConversationSuccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseMessage_ConversationSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadata = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseMessage_ConversationSuccess {
    return { metadata: isObject(object.metadata) ? object.metadata : undefined };
  },

  toJSON(message: ResponseMessage_ConversationSuccess): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseMessage_ConversationSuccess>): ResponseMessage_ConversationSuccess {
    return ResponseMessage_ConversationSuccess.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseMessage_ConversationSuccess>): ResponseMessage_ConversationSuccess {
    const message = createBaseResponseMessage_ConversationSuccess();
    message.metadata = object.metadata ?? undefined;
    return message;
  },
};

function createBaseResponseMessage_OutputAudioText(): ResponseMessage_OutputAudioText {
  return { text: undefined, ssml: undefined, allowPlaybackInterruption: false };
}

export const ResponseMessage_OutputAudioText: MessageFns<ResponseMessage_OutputAudioText> = {
  encode(message: ResponseMessage_OutputAudioText, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      writer.uint32(10).string(message.text);
    }
    if (message.ssml !== undefined) {
      writer.uint32(18).string(message.ssml);
    }
    if (message.allowPlaybackInterruption !== false) {
      writer.uint32(24).bool(message.allowPlaybackInterruption);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseMessage_OutputAudioText {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseMessage_OutputAudioText();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ssml = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowPlaybackInterruption = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseMessage_OutputAudioText {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
      ssml: isSet(object.ssml) ? globalThis.String(object.ssml) : undefined,
      allowPlaybackInterruption: isSet(object.allowPlaybackInterruption)
        ? globalThis.Boolean(object.allowPlaybackInterruption)
        : false,
    };
  },

  toJSON(message: ResponseMessage_OutputAudioText): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.ssml !== undefined) {
      obj.ssml = message.ssml;
    }
    if (message.allowPlaybackInterruption !== false) {
      obj.allowPlaybackInterruption = message.allowPlaybackInterruption;
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseMessage_OutputAudioText>): ResponseMessage_OutputAudioText {
    return ResponseMessage_OutputAudioText.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseMessage_OutputAudioText>): ResponseMessage_OutputAudioText {
    const message = createBaseResponseMessage_OutputAudioText();
    message.text = object.text ?? undefined;
    message.ssml = object.ssml ?? undefined;
    message.allowPlaybackInterruption = object.allowPlaybackInterruption ?? false;
    return message;
  },
};

function createBaseResponseMessage_EndInteraction(): ResponseMessage_EndInteraction {
  return {};
}

export const ResponseMessage_EndInteraction: MessageFns<ResponseMessage_EndInteraction> = {
  encode(_: ResponseMessage_EndInteraction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseMessage_EndInteraction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseMessage_EndInteraction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ResponseMessage_EndInteraction {
    return {};
  },

  toJSON(_: ResponseMessage_EndInteraction): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ResponseMessage_EndInteraction>): ResponseMessage_EndInteraction {
    return ResponseMessage_EndInteraction.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ResponseMessage_EndInteraction>): ResponseMessage_EndInteraction {
    const message = createBaseResponseMessage_EndInteraction();
    return message;
  },
};

function createBaseResponseMessage_PlayAudio(): ResponseMessage_PlayAudio {
  return { audioUri: "", allowPlaybackInterruption: false };
}

export const ResponseMessage_PlayAudio: MessageFns<ResponseMessage_PlayAudio> = {
  encode(message: ResponseMessage_PlayAudio, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.audioUri !== "") {
      writer.uint32(10).string(message.audioUri);
    }
    if (message.allowPlaybackInterruption !== false) {
      writer.uint32(16).bool(message.allowPlaybackInterruption);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseMessage_PlayAudio {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseMessage_PlayAudio();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.audioUri = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.allowPlaybackInterruption = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseMessage_PlayAudio {
    return {
      audioUri: isSet(object.audioUri) ? globalThis.String(object.audioUri) : "",
      allowPlaybackInterruption: isSet(object.allowPlaybackInterruption)
        ? globalThis.Boolean(object.allowPlaybackInterruption)
        : false,
    };
  },

  toJSON(message: ResponseMessage_PlayAudio): unknown {
    const obj: any = {};
    if (message.audioUri !== "") {
      obj.audioUri = message.audioUri;
    }
    if (message.allowPlaybackInterruption !== false) {
      obj.allowPlaybackInterruption = message.allowPlaybackInterruption;
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseMessage_PlayAudio>): ResponseMessage_PlayAudio {
    return ResponseMessage_PlayAudio.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseMessage_PlayAudio>): ResponseMessage_PlayAudio {
    const message = createBaseResponseMessage_PlayAudio();
    message.audioUri = object.audioUri ?? "";
    message.allowPlaybackInterruption = object.allowPlaybackInterruption ?? false;
    return message;
  },
};

function createBaseResponseMessage_MixedAudio(): ResponseMessage_MixedAudio {
  return { segments: [] };
}

export const ResponseMessage_MixedAudio: MessageFns<ResponseMessage_MixedAudio> = {
  encode(message: ResponseMessage_MixedAudio, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.segments) {
      ResponseMessage_MixedAudio_Segment.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseMessage_MixedAudio {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseMessage_MixedAudio();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.segments.push(ResponseMessage_MixedAudio_Segment.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseMessage_MixedAudio {
    return {
      segments: globalThis.Array.isArray(object?.segments)
        ? object.segments.map((e: any) => ResponseMessage_MixedAudio_Segment.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ResponseMessage_MixedAudio): unknown {
    const obj: any = {};
    if (message.segments?.length) {
      obj.segments = message.segments.map((e) => ResponseMessage_MixedAudio_Segment.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseMessage_MixedAudio>): ResponseMessage_MixedAudio {
    return ResponseMessage_MixedAudio.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseMessage_MixedAudio>): ResponseMessage_MixedAudio {
    const message = createBaseResponseMessage_MixedAudio();
    message.segments = object.segments?.map((e) => ResponseMessage_MixedAudio_Segment.fromPartial(e)) || [];
    return message;
  },
};

function createBaseResponseMessage_MixedAudio_Segment(): ResponseMessage_MixedAudio_Segment {
  return { audio: undefined, uri: undefined, allowPlaybackInterruption: false };
}

export const ResponseMessage_MixedAudio_Segment: MessageFns<ResponseMessage_MixedAudio_Segment> = {
  encode(message: ResponseMessage_MixedAudio_Segment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.audio !== undefined) {
      writer.uint32(10).bytes(message.audio);
    }
    if (message.uri !== undefined) {
      writer.uint32(18).string(message.uri);
    }
    if (message.allowPlaybackInterruption !== false) {
      writer.uint32(24).bool(message.allowPlaybackInterruption);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseMessage_MixedAudio_Segment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseMessage_MixedAudio_Segment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.audio = Buffer.from(reader.bytes());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowPlaybackInterruption = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseMessage_MixedAudio_Segment {
    return {
      audio: isSet(object.audio) ? Buffer.from(bytesFromBase64(object.audio)) : undefined,
      uri: isSet(object.uri) ? globalThis.String(object.uri) : undefined,
      allowPlaybackInterruption: isSet(object.allowPlaybackInterruption)
        ? globalThis.Boolean(object.allowPlaybackInterruption)
        : false,
    };
  },

  toJSON(message: ResponseMessage_MixedAudio_Segment): unknown {
    const obj: any = {};
    if (message.audio !== undefined) {
      obj.audio = base64FromBytes(message.audio);
    }
    if (message.uri !== undefined) {
      obj.uri = message.uri;
    }
    if (message.allowPlaybackInterruption !== false) {
      obj.allowPlaybackInterruption = message.allowPlaybackInterruption;
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseMessage_MixedAudio_Segment>): ResponseMessage_MixedAudio_Segment {
    return ResponseMessage_MixedAudio_Segment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseMessage_MixedAudio_Segment>): ResponseMessage_MixedAudio_Segment {
    const message = createBaseResponseMessage_MixedAudio_Segment();
    message.audio = object.audio ?? undefined;
    message.uri = object.uri ?? undefined;
    message.allowPlaybackInterruption = object.allowPlaybackInterruption ?? false;
    return message;
  },
};

function createBaseResponseMessage_TelephonyTransferCall(): ResponseMessage_TelephonyTransferCall {
  return { phoneNumber: undefined };
}

export const ResponseMessage_TelephonyTransferCall: MessageFns<ResponseMessage_TelephonyTransferCall> = {
  encode(message: ResponseMessage_TelephonyTransferCall, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.phoneNumber !== undefined) {
      writer.uint32(10).string(message.phoneNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseMessage_TelephonyTransferCall {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseMessage_TelephonyTransferCall();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseMessage_TelephonyTransferCall {
    return { phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : undefined };
  },

  toJSON(message: ResponseMessage_TelephonyTransferCall): unknown {
    const obj: any = {};
    if (message.phoneNumber !== undefined) {
      obj.phoneNumber = message.phoneNumber;
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseMessage_TelephonyTransferCall>): ResponseMessage_TelephonyTransferCall {
    return ResponseMessage_TelephonyTransferCall.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseMessage_TelephonyTransferCall>): ResponseMessage_TelephonyTransferCall {
    const message = createBaseResponseMessage_TelephonyTransferCall();
    message.phoneNumber = object.phoneNumber ?? undefined;
    return message;
  },
};

function createBaseResponseMessage_KnowledgeInfoCard(): ResponseMessage_KnowledgeInfoCard {
  return {};
}

export const ResponseMessage_KnowledgeInfoCard: MessageFns<ResponseMessage_KnowledgeInfoCard> = {
  encode(_: ResponseMessage_KnowledgeInfoCard, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseMessage_KnowledgeInfoCard {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseMessage_KnowledgeInfoCard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ResponseMessage_KnowledgeInfoCard {
    return {};
  },

  toJSON(_: ResponseMessage_KnowledgeInfoCard): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ResponseMessage_KnowledgeInfoCard>): ResponseMessage_KnowledgeInfoCard {
    return ResponseMessage_KnowledgeInfoCard.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ResponseMessage_KnowledgeInfoCard>): ResponseMessage_KnowledgeInfoCard {
    const message = createBaseResponseMessage_KnowledgeInfoCard();
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
