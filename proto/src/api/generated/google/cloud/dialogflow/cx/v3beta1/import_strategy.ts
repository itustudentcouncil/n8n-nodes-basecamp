// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3beta1/import_strategy.proto

/* eslint-disable */

export const protobufPackage = "google.cloud.dialogflow.cx.v3beta1";

/**
 * Import strategies for the conflict resolution of resources (i.e. intents,
 * entities, and webhooks) with identical display names during import
 * operations.
 */
export enum ImportStrategy {
  /** IMPORT_STRATEGY_UNSPECIFIED - Unspecified. Treated as 'CREATE_NEW'. */
  IMPORT_STRATEGY_UNSPECIFIED = 0,
  /**
   * IMPORT_STRATEGY_CREATE_NEW - Create a new resource with a numeric suffix appended to the end of the
   * existing display name.
   */
  IMPORT_STRATEGY_CREATE_NEW = 1,
  /**
   * IMPORT_STRATEGY_REPLACE - Replace existing resource with incoming resource in the content to be
   * imported.
   */
  IMPORT_STRATEGY_REPLACE = 2,
  /**
   * IMPORT_STRATEGY_KEEP - Keep existing resource and discard incoming resource in the content to be
   * imported.
   */
  IMPORT_STRATEGY_KEEP = 3,
  /** IMPORT_STRATEGY_MERGE - Combine existing and incoming resources when a conflict is encountered. */
  IMPORT_STRATEGY_MERGE = 4,
  /** IMPORT_STRATEGY_THROW_ERROR - Throw error if a conflict is encountered. */
  IMPORT_STRATEGY_THROW_ERROR = 5,
  UNRECOGNIZED = -1,
}

export function importStrategyFromJSON(object: any): ImportStrategy {
  switch (object) {
    case 0:
    case "IMPORT_STRATEGY_UNSPECIFIED":
      return ImportStrategy.IMPORT_STRATEGY_UNSPECIFIED;
    case 1:
    case "IMPORT_STRATEGY_CREATE_NEW":
      return ImportStrategy.IMPORT_STRATEGY_CREATE_NEW;
    case 2:
    case "IMPORT_STRATEGY_REPLACE":
      return ImportStrategy.IMPORT_STRATEGY_REPLACE;
    case 3:
    case "IMPORT_STRATEGY_KEEP":
      return ImportStrategy.IMPORT_STRATEGY_KEEP;
    case 4:
    case "IMPORT_STRATEGY_MERGE":
      return ImportStrategy.IMPORT_STRATEGY_MERGE;
    case 5:
    case "IMPORT_STRATEGY_THROW_ERROR":
      return ImportStrategy.IMPORT_STRATEGY_THROW_ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ImportStrategy.UNRECOGNIZED;
  }
}

export function importStrategyToJSON(object: ImportStrategy): string {
  switch (object) {
    case ImportStrategy.IMPORT_STRATEGY_UNSPECIFIED:
      return "IMPORT_STRATEGY_UNSPECIFIED";
    case ImportStrategy.IMPORT_STRATEGY_CREATE_NEW:
      return "IMPORT_STRATEGY_CREATE_NEW";
    case ImportStrategy.IMPORT_STRATEGY_REPLACE:
      return "IMPORT_STRATEGY_REPLACE";
    case ImportStrategy.IMPORT_STRATEGY_KEEP:
      return "IMPORT_STRATEGY_KEEP";
    case ImportStrategy.IMPORT_STRATEGY_MERGE:
      return "IMPORT_STRATEGY_MERGE";
    case ImportStrategy.IMPORT_STRATEGY_THROW_ERROR:
      return "IMPORT_STRATEGY_THROW_ERROR";
    case ImportStrategy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
