// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3beta1/environment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { TestError } from "./test_case.js";
import { Webhook } from "./webhook.js";

export const protobufPackage = "google.cloud.dialogflow.cx.v3beta1";

/**
 * Represents an environment for an agent. You can create multiple versions
 * of your agent and publish them to separate environments. When you edit an
 * agent, you are editing the draft agent. At any point, you can save the draft
 * agent as an agent version, which is an immutable snapshot of your agent. When
 * you save the draft agent, it is published to the default environment. When
 * you create agent versions, you can publish them to custom environments. You
 * can create a variety of custom environments for testing, development,
 * production, etc.
 */
export interface Environment {
  /**
   * The name of the environment.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>`.
   */
  name: string;
  /**
   * Required. The human-readable name of the environment (unique in an agent).
   * Limit of 64 characters.
   */
  displayName: string;
  /**
   * The human-readable description of the environment. The maximum length is
   * 500 characters. If exceeded, the request is rejected.
   */
  description: string;
  /**
   * A list of configurations for flow versions. You should include version
   * configs for all flows that are reachable from [`Start
   * Flow`][Agent.start_flow] in the agent. Otherwise, an error will be
   * returned.
   */
  versionConfigs: Environment_VersionConfig[];
  /** Output only. Update time of this environment. */
  updateTime:
    | Date
    | undefined;
  /** The test cases config for continuous tests of this environment. */
  testCasesConfig:
    | Environment_TestCasesConfig
    | undefined;
  /** The webhook configuration for this environment. */
  webhookConfig: Environment_WebhookConfig | undefined;
}

/** Configuration for the version. */
export interface Environment_VersionConfig {
  /**
   * Required. Format: projects/<Project ID>/locations/<Location
   * ID>/agents/<Agent ID>/flows/<Flow ID>/versions/<Version ID>.
   */
  version: string;
}

/** The configuration for continuous tests. */
export interface Environment_TestCasesConfig {
  /**
   * A list of test case names to run. They should be under the same agent.
   * Format of each test case name: `projects/<Project ID>/locations/
   * <Location ID>/agents/<AgentID>/testCases/<TestCase ID>`
   */
  testCases: string[];
  /**
   * Whether to run test cases in
   * [TestCasesConfig.test_cases][google.cloud.dialogflow.cx.v3beta1.Environment.TestCasesConfig.test_cases]
   * periodically. Default false. If set to true, run once a day.
   */
  enableContinuousRun: boolean;
  /**
   * Whether to run test cases in
   * [TestCasesConfig.test_cases][google.cloud.dialogflow.cx.v3beta1.Environment.TestCasesConfig.test_cases]
   * before deploying a flow version to the environment. Default false.
   */
  enablePredeploymentRun: boolean;
}

/** Configuration for webhooks. */
export interface Environment_WebhookConfig {
  /**
   * The list of webhooks to override for the agent environment. The webhook
   * must exist in the agent. You can override fields in
   * [`generic_web_service`][google.cloud.dialogflow.cx.v3beta1.Webhook.generic_web_service]
   * and
   * [`service_directory`][google.cloud.dialogflow.cx.v3beta1.Webhook.service_directory].
   */
  webhookOverrides: Webhook[];
}

/**
 * The request message for
 * [Environments.ListEnvironments][google.cloud.dialogflow.cx.v3beta1.Environments.ListEnvironments].
 */
export interface ListEnvironmentsRequest {
  /**
   * Required. The [Agent][google.cloud.dialogflow.cx.v3beta1.Agent] to list all
   * environments for. Format: `projects/<Project ID>/locations/<Location
   * ID>/agents/<Agent ID>`.
   */
  parent: string;
  /**
   * The maximum number of items to return in a single page. By default 20 and
   * at most 100.
   */
  pageSize: number;
  /** The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [Environments.ListEnvironments][google.cloud.dialogflow.cx.v3beta1.Environments.ListEnvironments].
 */
export interface ListEnvironmentsResponse {
  /**
   * The list of environments. There will be a maximum number of items
   * returned based on the page_size field in the request. The list may in some
   * cases be empty or contain fewer entries than page_size even if this isn't
   * the last page.
   */
  environments: Environment[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [Environments.GetEnvironment][google.cloud.dialogflow.cx.v3beta1.Environments.GetEnvironment].
 */
export interface GetEnvironmentRequest {
  /**
   * Required. The name of the
   * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment]. Format:
   * `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [Environments.CreateEnvironment][google.cloud.dialogflow.cx.v3beta1.Environments.CreateEnvironment].
 */
export interface CreateEnvironmentRequest {
  /**
   * Required. The [Agent][google.cloud.dialogflow.cx.v3beta1.Agent] to create
   * an [Environment][google.cloud.dialogflow.cx.v3beta1.Environment] for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   */
  parent: string;
  /** Required. The environment to create. */
  environment: Environment | undefined;
}

/**
 * The request message for
 * [Environments.UpdateEnvironment][google.cloud.dialogflow.cx.v3beta1.Environments.UpdateEnvironment].
 */
export interface UpdateEnvironmentRequest {
  /** Required. The environment to update. */
  environment:
    | Environment
    | undefined;
  /** Required. The mask to control which fields get updated. */
  updateMask: string[] | undefined;
}

/**
 * The request message for
 * [Environments.DeleteEnvironment][google.cloud.dialogflow.cx.v3beta1.Environments.DeleteEnvironment].
 */
export interface DeleteEnvironmentRequest {
  /**
   * Required. The name of the
   * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment] to delete.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [Environments.LookupEnvironmentHistory][google.cloud.dialogflow.cx.v3beta1.Environments.LookupEnvironmentHistory].
 */
export interface LookupEnvironmentHistoryRequest {
  /**
   * Required. Resource name of the environment to look up the history for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>`.
   */
  name: string;
  /**
   * The maximum number of items to return in a single page. By default 100 and
   * at most 1000.
   */
  pageSize: number;
  /** The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [Environments.LookupEnvironmentHistory][google.cloud.dialogflow.cx.v3beta1.Environments.LookupEnvironmentHistory].
 */
export interface LookupEnvironmentHistoryResponse {
  /**
   * Represents a list of snapshots for an environment. Time of the snapshots is
   * stored in
   * [`update_time`][google.cloud.dialogflow.cx.v3beta1.Environment.update_time].
   */
  environments: Environment[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/** Represents a result from running a test case in an agent environment. */
export interface ContinuousTestResult {
  /**
   * The resource name for the continuous test result. Format:
   * `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment
   * ID>/continuousTestResults/<ContinuousTestResult ID>`.
   */
  name: string;
  /**
   * The result of this continuous test run, i.e. whether all the tests in this
   * continuous test run pass or not.
   */
  result: ContinuousTestResult_AggregatedTestResult;
  /** A list of individual test case results names in this continuous test run. */
  testCaseResults: string[];
  /** Time when the continuous testing run starts. */
  runTime: Date | undefined;
}

/** The overall result for a continuous test run in an agent environment. */
export enum ContinuousTestResult_AggregatedTestResult {
  /** AGGREGATED_TEST_RESULT_UNSPECIFIED - Not specified. Should never be used. */
  AGGREGATED_TEST_RESULT_UNSPECIFIED = 0,
  /** PASSED - All the tests passed. */
  PASSED = 1,
  /** FAILED - At least one test did not pass. */
  FAILED = 2,
  UNRECOGNIZED = -1,
}

export function continuousTestResult_AggregatedTestResultFromJSON(
  object: any,
): ContinuousTestResult_AggregatedTestResult {
  switch (object) {
    case 0:
    case "AGGREGATED_TEST_RESULT_UNSPECIFIED":
      return ContinuousTestResult_AggregatedTestResult.AGGREGATED_TEST_RESULT_UNSPECIFIED;
    case 1:
    case "PASSED":
      return ContinuousTestResult_AggregatedTestResult.PASSED;
    case 2:
    case "FAILED":
      return ContinuousTestResult_AggregatedTestResult.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContinuousTestResult_AggregatedTestResult.UNRECOGNIZED;
  }
}

export function continuousTestResult_AggregatedTestResultToJSON(
  object: ContinuousTestResult_AggregatedTestResult,
): string {
  switch (object) {
    case ContinuousTestResult_AggregatedTestResult.AGGREGATED_TEST_RESULT_UNSPECIFIED:
      return "AGGREGATED_TEST_RESULT_UNSPECIFIED";
    case ContinuousTestResult_AggregatedTestResult.PASSED:
      return "PASSED";
    case ContinuousTestResult_AggregatedTestResult.FAILED:
      return "FAILED";
    case ContinuousTestResult_AggregatedTestResult.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The request message for
 * [Environments.RunContinuousTest][google.cloud.dialogflow.cx.v3beta1.Environments.RunContinuousTest].
 */
export interface RunContinuousTestRequest {
  /**
   * Required. Format: `projects/<Project ID>/locations/<Location
   * ID>/agents/<Agent ID>/environments/<Environment ID>`.
   */
  environment: string;
}

/**
 * The response message for
 * [Environments.RunContinuousTest][google.cloud.dialogflow.cx.v3beta1.Environments.RunContinuousTest].
 */
export interface RunContinuousTestResponse {
  /** The result for a continuous test run. */
  continuousTestResult: ContinuousTestResult | undefined;
}

/**
 * Metadata returned for the
 * [Environments.RunContinuousTest][google.cloud.dialogflow.cx.v3beta1.Environments.RunContinuousTest]
 * long running operation.
 */
export interface RunContinuousTestMetadata {
  /** The test errors. */
  errors: TestError[];
}

/**
 * The request message for
 * [Environments.ListContinuousTestResults][google.cloud.dialogflow.cx.v3beta1.Environments.ListContinuousTestResults].
 */
export interface ListContinuousTestResultsRequest {
  /**
   * Required. The environment to list results for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/
   * environments/<Environment ID>`.
   */
  parent: string;
  /**
   * The maximum number of items to return in a single page. By default 100 and
   * at most 1000.
   */
  pageSize: number;
  /** The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/** The response message for [Environments.ListTestCaseResults][]. */
export interface ListContinuousTestResultsResponse {
  /** The list of continuous test results. */
  continuousTestResults: ContinuousTestResult[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [Environments.DeployFlow][google.cloud.dialogflow.cx.v3beta1.Environments.DeployFlow].
 */
export interface DeployFlowRequest {
  /**
   * Required. The environment to deploy the flow to.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/
   * environments/<Environment ID>`.
   */
  environment: string;
  /**
   * Required. The flow version to deploy.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/
   * flows/<Flow ID>/versions/<Version ID>`.
   */
  flowVersion: string;
}

/**
 * The response message for
 * [Environments.DeployFlow][google.cloud.dialogflow.cx.v3beta1.Environments.DeployFlow].
 */
export interface DeployFlowResponse {
  /** The updated environment where the flow is deployed. */
  environment:
    | Environment
    | undefined;
  /**
   * The name of the flow version deployment.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/
   * environments/<Environment ID>/deployments/<Deployment ID>`.
   */
  deployment: string;
}

/**
 * Metadata returned for the
 * [Environments.DeployFlow][google.cloud.dialogflow.cx.v3beta1.Environments.DeployFlow]
 * long running operation.
 */
export interface DeployFlowMetadata {
  /** Errors of running deployment tests. */
  testErrors: TestError[];
}

function createBaseEnvironment(): Environment {
  return {
    name: "",
    displayName: "",
    description: "",
    versionConfigs: [],
    updateTime: undefined,
    testCasesConfig: undefined,
    webhookConfig: undefined,
  };
}

export const Environment: MessageFns<Environment> = {
  encode(message: Environment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.versionConfigs) {
      Environment_VersionConfig.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(42).fork()).join();
    }
    if (message.testCasesConfig !== undefined) {
      Environment_TestCasesConfig.encode(message.testCasesConfig, writer.uint32(58).fork()).join();
    }
    if (message.webhookConfig !== undefined) {
      Environment_WebhookConfig.encode(message.webhookConfig, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Environment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.versionConfigs.push(Environment_VersionConfig.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.testCasesConfig = Environment_TestCasesConfig.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.webhookConfig = Environment_WebhookConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Environment {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      versionConfigs: globalThis.Array.isArray(object?.versionConfigs)
        ? object.versionConfigs.map((e: any) => Environment_VersionConfig.fromJSON(e))
        : [],
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      testCasesConfig: isSet(object.testCasesConfig)
        ? Environment_TestCasesConfig.fromJSON(object.testCasesConfig)
        : undefined,
      webhookConfig: isSet(object.webhookConfig) ? Environment_WebhookConfig.fromJSON(object.webhookConfig) : undefined,
    };
  },

  toJSON(message: Environment): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.versionConfigs?.length) {
      obj.versionConfigs = message.versionConfigs.map((e) => Environment_VersionConfig.toJSON(e));
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.testCasesConfig !== undefined) {
      obj.testCasesConfig = Environment_TestCasesConfig.toJSON(message.testCasesConfig);
    }
    if (message.webhookConfig !== undefined) {
      obj.webhookConfig = Environment_WebhookConfig.toJSON(message.webhookConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<Environment>): Environment {
    return Environment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Environment>): Environment {
    const message = createBaseEnvironment();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.versionConfigs = object.versionConfigs?.map((e) => Environment_VersionConfig.fromPartial(e)) || [];
    message.updateTime = object.updateTime ?? undefined;
    message.testCasesConfig = (object.testCasesConfig !== undefined && object.testCasesConfig !== null)
      ? Environment_TestCasesConfig.fromPartial(object.testCasesConfig)
      : undefined;
    message.webhookConfig = (object.webhookConfig !== undefined && object.webhookConfig !== null)
      ? Environment_WebhookConfig.fromPartial(object.webhookConfig)
      : undefined;
    return message;
  },
};

function createBaseEnvironment_VersionConfig(): Environment_VersionConfig {
  return { version: "" };
}

export const Environment_VersionConfig: MessageFns<Environment_VersionConfig> = {
  encode(message: Environment_VersionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Environment_VersionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironment_VersionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Environment_VersionConfig {
    return { version: isSet(object.version) ? globalThis.String(object.version) : "" };
  },

  toJSON(message: Environment_VersionConfig): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create(base?: DeepPartial<Environment_VersionConfig>): Environment_VersionConfig {
    return Environment_VersionConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Environment_VersionConfig>): Environment_VersionConfig {
    const message = createBaseEnvironment_VersionConfig();
    message.version = object.version ?? "";
    return message;
  },
};

function createBaseEnvironment_TestCasesConfig(): Environment_TestCasesConfig {
  return { testCases: [], enableContinuousRun: false, enablePredeploymentRun: false };
}

export const Environment_TestCasesConfig: MessageFns<Environment_TestCasesConfig> = {
  encode(message: Environment_TestCasesConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.testCases) {
      writer.uint32(10).string(v!);
    }
    if (message.enableContinuousRun !== false) {
      writer.uint32(16).bool(message.enableContinuousRun);
    }
    if (message.enablePredeploymentRun !== false) {
      writer.uint32(24).bool(message.enablePredeploymentRun);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Environment_TestCasesConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironment_TestCasesConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.testCases.push(reader.string());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.enableContinuousRun = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.enablePredeploymentRun = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Environment_TestCasesConfig {
    return {
      testCases: globalThis.Array.isArray(object?.testCases)
        ? object.testCases.map((e: any) => globalThis.String(e))
        : [],
      enableContinuousRun: isSet(object.enableContinuousRun) ? globalThis.Boolean(object.enableContinuousRun) : false,
      enablePredeploymentRun: isSet(object.enablePredeploymentRun)
        ? globalThis.Boolean(object.enablePredeploymentRun)
        : false,
    };
  },

  toJSON(message: Environment_TestCasesConfig): unknown {
    const obj: any = {};
    if (message.testCases?.length) {
      obj.testCases = message.testCases;
    }
    if (message.enableContinuousRun !== false) {
      obj.enableContinuousRun = message.enableContinuousRun;
    }
    if (message.enablePredeploymentRun !== false) {
      obj.enablePredeploymentRun = message.enablePredeploymentRun;
    }
    return obj;
  },

  create(base?: DeepPartial<Environment_TestCasesConfig>): Environment_TestCasesConfig {
    return Environment_TestCasesConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Environment_TestCasesConfig>): Environment_TestCasesConfig {
    const message = createBaseEnvironment_TestCasesConfig();
    message.testCases = object.testCases?.map((e) => e) || [];
    message.enableContinuousRun = object.enableContinuousRun ?? false;
    message.enablePredeploymentRun = object.enablePredeploymentRun ?? false;
    return message;
  },
};

function createBaseEnvironment_WebhookConfig(): Environment_WebhookConfig {
  return { webhookOverrides: [] };
}

export const Environment_WebhookConfig: MessageFns<Environment_WebhookConfig> = {
  encode(message: Environment_WebhookConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.webhookOverrides) {
      Webhook.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Environment_WebhookConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironment_WebhookConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.webhookOverrides.push(Webhook.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Environment_WebhookConfig {
    return {
      webhookOverrides: globalThis.Array.isArray(object?.webhookOverrides)
        ? object.webhookOverrides.map((e: any) => Webhook.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Environment_WebhookConfig): unknown {
    const obj: any = {};
    if (message.webhookOverrides?.length) {
      obj.webhookOverrides = message.webhookOverrides.map((e) => Webhook.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Environment_WebhookConfig>): Environment_WebhookConfig {
    return Environment_WebhookConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Environment_WebhookConfig>): Environment_WebhookConfig {
    const message = createBaseEnvironment_WebhookConfig();
    message.webhookOverrides = object.webhookOverrides?.map((e) => Webhook.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListEnvironmentsRequest(): ListEnvironmentsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListEnvironmentsRequest: MessageFns<ListEnvironmentsRequest> = {
  encode(message: ListEnvironmentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEnvironmentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEnvironmentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEnvironmentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListEnvironmentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEnvironmentsRequest>): ListEnvironmentsRequest {
    return ListEnvironmentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEnvironmentsRequest>): ListEnvironmentsRequest {
    const message = createBaseListEnvironmentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListEnvironmentsResponse(): ListEnvironmentsResponse {
  return { environments: [], nextPageToken: "" };
}

export const ListEnvironmentsResponse: MessageFns<ListEnvironmentsResponse> = {
  encode(message: ListEnvironmentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.environments) {
      Environment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEnvironmentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEnvironmentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.environments.push(Environment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEnvironmentsResponse {
    return {
      environments: globalThis.Array.isArray(object?.environments)
        ? object.environments.map((e: any) => Environment.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListEnvironmentsResponse): unknown {
    const obj: any = {};
    if (message.environments?.length) {
      obj.environments = message.environments.map((e) => Environment.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEnvironmentsResponse>): ListEnvironmentsResponse {
    return ListEnvironmentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEnvironmentsResponse>): ListEnvironmentsResponse {
    const message = createBaseListEnvironmentsResponse();
    message.environments = object.environments?.map((e) => Environment.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetEnvironmentRequest(): GetEnvironmentRequest {
  return { name: "" };
}

export const GetEnvironmentRequest: MessageFns<GetEnvironmentRequest> = {
  encode(message: GetEnvironmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEnvironmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEnvironmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEnvironmentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEnvironmentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEnvironmentRequest>): GetEnvironmentRequest {
    return GetEnvironmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEnvironmentRequest>): GetEnvironmentRequest {
    const message = createBaseGetEnvironmentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateEnvironmentRequest(): CreateEnvironmentRequest {
  return { parent: "", environment: undefined };
}

export const CreateEnvironmentRequest: MessageFns<CreateEnvironmentRequest> = {
  encode(message: CreateEnvironmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.environment !== undefined) {
      Environment.encode(message.environment, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEnvironmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEnvironmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.environment = Environment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEnvironmentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      environment: isSet(object.environment) ? Environment.fromJSON(object.environment) : undefined,
    };
  },

  toJSON(message: CreateEnvironmentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.environment !== undefined) {
      obj.environment = Environment.toJSON(message.environment);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEnvironmentRequest>): CreateEnvironmentRequest {
    return CreateEnvironmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEnvironmentRequest>): CreateEnvironmentRequest {
    const message = createBaseCreateEnvironmentRequest();
    message.parent = object.parent ?? "";
    message.environment = (object.environment !== undefined && object.environment !== null)
      ? Environment.fromPartial(object.environment)
      : undefined;
    return message;
  },
};

function createBaseUpdateEnvironmentRequest(): UpdateEnvironmentRequest {
  return { environment: undefined, updateMask: undefined };
}

export const UpdateEnvironmentRequest: MessageFns<UpdateEnvironmentRequest> = {
  encode(message: UpdateEnvironmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.environment !== undefined) {
      Environment.encode(message.environment, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEnvironmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEnvironmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.environment = Environment.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEnvironmentRequest {
    return {
      environment: isSet(object.environment) ? Environment.fromJSON(object.environment) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateEnvironmentRequest): unknown {
    const obj: any = {};
    if (message.environment !== undefined) {
      obj.environment = Environment.toJSON(message.environment);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEnvironmentRequest>): UpdateEnvironmentRequest {
    return UpdateEnvironmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEnvironmentRequest>): UpdateEnvironmentRequest {
    const message = createBaseUpdateEnvironmentRequest();
    message.environment = (object.environment !== undefined && object.environment !== null)
      ? Environment.fromPartial(object.environment)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteEnvironmentRequest(): DeleteEnvironmentRequest {
  return { name: "" };
}

export const DeleteEnvironmentRequest: MessageFns<DeleteEnvironmentRequest> = {
  encode(message: DeleteEnvironmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEnvironmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEnvironmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEnvironmentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteEnvironmentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEnvironmentRequest>): DeleteEnvironmentRequest {
    return DeleteEnvironmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEnvironmentRequest>): DeleteEnvironmentRequest {
    const message = createBaseDeleteEnvironmentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseLookupEnvironmentHistoryRequest(): LookupEnvironmentHistoryRequest {
  return { name: "", pageSize: 0, pageToken: "" };
}

export const LookupEnvironmentHistoryRequest: MessageFns<LookupEnvironmentHistoryRequest> = {
  encode(message: LookupEnvironmentHistoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupEnvironmentHistoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupEnvironmentHistoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupEnvironmentHistoryRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: LookupEnvironmentHistoryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<LookupEnvironmentHistoryRequest>): LookupEnvironmentHistoryRequest {
    return LookupEnvironmentHistoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupEnvironmentHistoryRequest>): LookupEnvironmentHistoryRequest {
    const message = createBaseLookupEnvironmentHistoryRequest();
    message.name = object.name ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseLookupEnvironmentHistoryResponse(): LookupEnvironmentHistoryResponse {
  return { environments: [], nextPageToken: "" };
}

export const LookupEnvironmentHistoryResponse: MessageFns<LookupEnvironmentHistoryResponse> = {
  encode(message: LookupEnvironmentHistoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.environments) {
      Environment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupEnvironmentHistoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupEnvironmentHistoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.environments.push(Environment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupEnvironmentHistoryResponse {
    return {
      environments: globalThis.Array.isArray(object?.environments)
        ? object.environments.map((e: any) => Environment.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: LookupEnvironmentHistoryResponse): unknown {
    const obj: any = {};
    if (message.environments?.length) {
      obj.environments = message.environments.map((e) => Environment.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<LookupEnvironmentHistoryResponse>): LookupEnvironmentHistoryResponse {
    return LookupEnvironmentHistoryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupEnvironmentHistoryResponse>): LookupEnvironmentHistoryResponse {
    const message = createBaseLookupEnvironmentHistoryResponse();
    message.environments = object.environments?.map((e) => Environment.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseContinuousTestResult(): ContinuousTestResult {
  return { name: "", result: 0, testCaseResults: [], runTime: undefined };
}

export const ContinuousTestResult: MessageFns<ContinuousTestResult> = {
  encode(message: ContinuousTestResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.result !== 0) {
      writer.uint32(16).int32(message.result);
    }
    for (const v of message.testCaseResults) {
      writer.uint32(26).string(v!);
    }
    if (message.runTime !== undefined) {
      Timestamp.encode(toTimestamp(message.runTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContinuousTestResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContinuousTestResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.result = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.testCaseResults.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.runTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContinuousTestResult {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      result: isSet(object.result) ? continuousTestResult_AggregatedTestResultFromJSON(object.result) : 0,
      testCaseResults: globalThis.Array.isArray(object?.testCaseResults)
        ? object.testCaseResults.map((e: any) => globalThis.String(e))
        : [],
      runTime: isSet(object.runTime) ? fromJsonTimestamp(object.runTime) : undefined,
    };
  },

  toJSON(message: ContinuousTestResult): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.result !== 0) {
      obj.result = continuousTestResult_AggregatedTestResultToJSON(message.result);
    }
    if (message.testCaseResults?.length) {
      obj.testCaseResults = message.testCaseResults;
    }
    if (message.runTime !== undefined) {
      obj.runTime = message.runTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ContinuousTestResult>): ContinuousTestResult {
    return ContinuousTestResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ContinuousTestResult>): ContinuousTestResult {
    const message = createBaseContinuousTestResult();
    message.name = object.name ?? "";
    message.result = object.result ?? 0;
    message.testCaseResults = object.testCaseResults?.map((e) => e) || [];
    message.runTime = object.runTime ?? undefined;
    return message;
  },
};

function createBaseRunContinuousTestRequest(): RunContinuousTestRequest {
  return { environment: "" };
}

export const RunContinuousTestRequest: MessageFns<RunContinuousTestRequest> = {
  encode(message: RunContinuousTestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.environment !== "") {
      writer.uint32(10).string(message.environment);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunContinuousTestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunContinuousTestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.environment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunContinuousTestRequest {
    return { environment: isSet(object.environment) ? globalThis.String(object.environment) : "" };
  },

  toJSON(message: RunContinuousTestRequest): unknown {
    const obj: any = {};
    if (message.environment !== "") {
      obj.environment = message.environment;
    }
    return obj;
  },

  create(base?: DeepPartial<RunContinuousTestRequest>): RunContinuousTestRequest {
    return RunContinuousTestRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RunContinuousTestRequest>): RunContinuousTestRequest {
    const message = createBaseRunContinuousTestRequest();
    message.environment = object.environment ?? "";
    return message;
  },
};

function createBaseRunContinuousTestResponse(): RunContinuousTestResponse {
  return { continuousTestResult: undefined };
}

export const RunContinuousTestResponse: MessageFns<RunContinuousTestResponse> = {
  encode(message: RunContinuousTestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.continuousTestResult !== undefined) {
      ContinuousTestResult.encode(message.continuousTestResult, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunContinuousTestResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunContinuousTestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.continuousTestResult = ContinuousTestResult.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunContinuousTestResponse {
    return {
      continuousTestResult: isSet(object.continuousTestResult)
        ? ContinuousTestResult.fromJSON(object.continuousTestResult)
        : undefined,
    };
  },

  toJSON(message: RunContinuousTestResponse): unknown {
    const obj: any = {};
    if (message.continuousTestResult !== undefined) {
      obj.continuousTestResult = ContinuousTestResult.toJSON(message.continuousTestResult);
    }
    return obj;
  },

  create(base?: DeepPartial<RunContinuousTestResponse>): RunContinuousTestResponse {
    return RunContinuousTestResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RunContinuousTestResponse>): RunContinuousTestResponse {
    const message = createBaseRunContinuousTestResponse();
    message.continuousTestResult = (object.continuousTestResult !== undefined && object.continuousTestResult !== null)
      ? ContinuousTestResult.fromPartial(object.continuousTestResult)
      : undefined;
    return message;
  },
};

function createBaseRunContinuousTestMetadata(): RunContinuousTestMetadata {
  return { errors: [] };
}

export const RunContinuousTestMetadata: MessageFns<RunContinuousTestMetadata> = {
  encode(message: RunContinuousTestMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.errors) {
      TestError.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunContinuousTestMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunContinuousTestMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.errors.push(TestError.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunContinuousTestMetadata {
    return {
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => TestError.fromJSON(e)) : [],
    };
  },

  toJSON(message: RunContinuousTestMetadata): unknown {
    const obj: any = {};
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => TestError.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RunContinuousTestMetadata>): RunContinuousTestMetadata {
    return RunContinuousTestMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RunContinuousTestMetadata>): RunContinuousTestMetadata {
    const message = createBaseRunContinuousTestMetadata();
    message.errors = object.errors?.map((e) => TestError.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListContinuousTestResultsRequest(): ListContinuousTestResultsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListContinuousTestResultsRequest: MessageFns<ListContinuousTestResultsRequest> = {
  encode(message: ListContinuousTestResultsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListContinuousTestResultsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListContinuousTestResultsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListContinuousTestResultsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListContinuousTestResultsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListContinuousTestResultsRequest>): ListContinuousTestResultsRequest {
    return ListContinuousTestResultsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListContinuousTestResultsRequest>): ListContinuousTestResultsRequest {
    const message = createBaseListContinuousTestResultsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListContinuousTestResultsResponse(): ListContinuousTestResultsResponse {
  return { continuousTestResults: [], nextPageToken: "" };
}

export const ListContinuousTestResultsResponse: MessageFns<ListContinuousTestResultsResponse> = {
  encode(message: ListContinuousTestResultsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.continuousTestResults) {
      ContinuousTestResult.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListContinuousTestResultsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListContinuousTestResultsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.continuousTestResults.push(ContinuousTestResult.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListContinuousTestResultsResponse {
    return {
      continuousTestResults: globalThis.Array.isArray(object?.continuousTestResults)
        ? object.continuousTestResults.map((e: any) => ContinuousTestResult.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListContinuousTestResultsResponse): unknown {
    const obj: any = {};
    if (message.continuousTestResults?.length) {
      obj.continuousTestResults = message.continuousTestResults.map((e) => ContinuousTestResult.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListContinuousTestResultsResponse>): ListContinuousTestResultsResponse {
    return ListContinuousTestResultsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListContinuousTestResultsResponse>): ListContinuousTestResultsResponse {
    const message = createBaseListContinuousTestResultsResponse();
    message.continuousTestResults = object.continuousTestResults?.map((e) => ContinuousTestResult.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeployFlowRequest(): DeployFlowRequest {
  return { environment: "", flowVersion: "" };
}

export const DeployFlowRequest: MessageFns<DeployFlowRequest> = {
  encode(message: DeployFlowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.environment !== "") {
      writer.uint32(10).string(message.environment);
    }
    if (message.flowVersion !== "") {
      writer.uint32(18).string(message.flowVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployFlowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployFlowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.environment = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.flowVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployFlowRequest {
    return {
      environment: isSet(object.environment) ? globalThis.String(object.environment) : "",
      flowVersion: isSet(object.flowVersion) ? globalThis.String(object.flowVersion) : "",
    };
  },

  toJSON(message: DeployFlowRequest): unknown {
    const obj: any = {};
    if (message.environment !== "") {
      obj.environment = message.environment;
    }
    if (message.flowVersion !== "") {
      obj.flowVersion = message.flowVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<DeployFlowRequest>): DeployFlowRequest {
    return DeployFlowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployFlowRequest>): DeployFlowRequest {
    const message = createBaseDeployFlowRequest();
    message.environment = object.environment ?? "";
    message.flowVersion = object.flowVersion ?? "";
    return message;
  },
};

function createBaseDeployFlowResponse(): DeployFlowResponse {
  return { environment: undefined, deployment: "" };
}

export const DeployFlowResponse: MessageFns<DeployFlowResponse> = {
  encode(message: DeployFlowResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.environment !== undefined) {
      Environment.encode(message.environment, writer.uint32(10).fork()).join();
    }
    if (message.deployment !== "") {
      writer.uint32(18).string(message.deployment);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployFlowResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployFlowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.environment = Environment.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deployment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployFlowResponse {
    return {
      environment: isSet(object.environment) ? Environment.fromJSON(object.environment) : undefined,
      deployment: isSet(object.deployment) ? globalThis.String(object.deployment) : "",
    };
  },

  toJSON(message: DeployFlowResponse): unknown {
    const obj: any = {};
    if (message.environment !== undefined) {
      obj.environment = Environment.toJSON(message.environment);
    }
    if (message.deployment !== "") {
      obj.deployment = message.deployment;
    }
    return obj;
  },

  create(base?: DeepPartial<DeployFlowResponse>): DeployFlowResponse {
    return DeployFlowResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployFlowResponse>): DeployFlowResponse {
    const message = createBaseDeployFlowResponse();
    message.environment = (object.environment !== undefined && object.environment !== null)
      ? Environment.fromPartial(object.environment)
      : undefined;
    message.deployment = object.deployment ?? "";
    return message;
  },
};

function createBaseDeployFlowMetadata(): DeployFlowMetadata {
  return { testErrors: [] };
}

export const DeployFlowMetadata: MessageFns<DeployFlowMetadata> = {
  encode(message: DeployFlowMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.testErrors) {
      TestError.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployFlowMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployFlowMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.testErrors.push(TestError.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployFlowMetadata {
    return {
      testErrors: globalThis.Array.isArray(object?.testErrors)
        ? object.testErrors.map((e: any) => TestError.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DeployFlowMetadata): unknown {
    const obj: any = {};
    if (message.testErrors?.length) {
      obj.testErrors = message.testErrors.map((e) => TestError.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeployFlowMetadata>): DeployFlowMetadata {
    return DeployFlowMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployFlowMetadata>): DeployFlowMetadata {
    const message = createBaseDeployFlowMetadata();
    message.testErrors = object.testErrors?.map((e) => TestError.fromPartial(e)) || [];
    return message;
  },
};

/**
 * Service for managing
 * [Environments][google.cloud.dialogflow.cx.v3beta1.Environment].
 */
export type EnvironmentsDefinition = typeof EnvironmentsDefinition;
export const EnvironmentsDefinition = {
  name: "Environments",
  fullName: "google.cloud.dialogflow.cx.v3beta1.Environments",
  methods: {
    /**
     * Returns the list of all environments in the specified
     * [Agent][google.cloud.dialogflow.cx.v3beta1.Agent].
     */
    listEnvironments: {
      name: "ListEnvironments",
      requestType: ListEnvironmentsRequest,
      requestStream: false,
      responseType: ListEnvironmentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves the specified
     * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
     */
    getEnvironment: {
      name: "GetEnvironment",
      requestType: GetEnvironmentRequest,
      requestStream: false,
      responseType: Environment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates an [Environment][google.cloud.dialogflow.cx.v3beta1.Environment] in
     * the specified [Agent][google.cloud.dialogflow.cx.v3beta1.Agent].
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`: [Environment][google.cloud.dialogflow.cx.v3beta1.Environment]
     */
    createEnvironment: {
      name: "CreateEnvironment",
      requestType: CreateEnvironmentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              37,
              10,
              11,
              69,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          8410: [
            Buffer.from([18, 112, 97, 114, 101, 110, 116, 44, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116]),
          ],
          578365826: [
            Buffer.from([
              77,
              58,
              11,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              34,
              62,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified
     * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`: [Environment][google.cloud.dialogflow.cx.v3beta1.Environment]
     */
    updateEnvironment: {
      name: "UpdateEnvironment",
      requestType: UpdateEnvironmentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              37,
              10,
              11,
              69,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              89,
              58,
              11,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              50,
              74,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes the specified
     * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
     */
    deleteEnvironment: {
      name: "DeleteEnvironment",
      requestType: DeleteEnvironmentRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              42,
              62,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Looks up the history of the specified
     * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
     */
    lookupEnvironmentHistory: {
      name: "LookupEnvironmentHistory",
      requestType: LookupEnvironmentHistoryRequest,
      requestStream: false,
      responseType: LookupEnvironmentHistoryResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              89,
              18,
              87,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              108,
              111,
              111,
              107,
              117,
              112,
              69,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              72,
              105,
              115,
              116,
              111,
              114,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Kicks off a continuous test under the specified
     * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`:
     * [RunContinuousTestMetadata][google.cloud.dialogflow.cx.v3beta1.RunContinuousTestMetadata]
     * - `response`:
     * [RunContinuousTestResponse][google.cloud.dialogflow.cx.v3beta1.RunContinuousTestResponse]
     */
    runContinuousTest: {
      name: "RunContinuousTest",
      requestType: RunContinuousTestRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              54,
              10,
              25,
              82,
              117,
              110,
              67,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              84,
              101,
              115,
              116,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              25,
              82,
              117,
              110,
              67,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              84,
              101,
              115,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              92,
              58,
              1,
              42,
              34,
              87,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              114,
              117,
              110,
              67,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              84,
              101,
              115,
              116,
            ]),
          ],
        },
      },
    },
    /** Fetches a list of continuous test results for a given environment. */
    listContinuousTestResults: {
      name: "ListContinuousTestResults",
      requestType: ListContinuousTestResultsRequest,
      requestStream: false,
      responseType: ListContinuousTestResultsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              88,
              18,
              86,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              84,
              101,
              115,
              116,
              82,
              101,
              115,
              117,
              108,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deploys a flow to the specified
     * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`:
     * [DeployFlowMetadata][google.cloud.dialogflow.cx.v3beta1.DeployFlowMetadata]
     * - `response`:
     * [DeployFlowResponse][google.cloud.dialogflow.cx.v3beta1.DeployFlowResponse]
     */
    deployFlow: {
      name: "DeployFlow",
      requestType: DeployFlowRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              40,
              10,
              18,
              68,
              101,
              112,
              108,
              111,
              121,
              70,
              108,
              111,
              119,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              18,
              68,
              101,
              112,
              108,
              111,
              121,
              70,
              108,
              111,
              119,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              85,
              58,
              1,
              42,
              34,
              80,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              112,
              108,
              111,
              121,
              70,
              108,
              111,
              119,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface EnvironmentsServiceImplementation<CallContextExt = {}> {
  /**
   * Returns the list of all environments in the specified
   * [Agent][google.cloud.dialogflow.cx.v3beta1.Agent].
   */
  listEnvironments(
    request: ListEnvironmentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEnvironmentsResponse>>;
  /**
   * Retrieves the specified
   * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
   */
  getEnvironment(
    request: GetEnvironmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Environment>>;
  /**
   * Creates an [Environment][google.cloud.dialogflow.cx.v3beta1.Environment] in
   * the specified [Agent][google.cloud.dialogflow.cx.v3beta1.Agent].
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: [Environment][google.cloud.dialogflow.cx.v3beta1.Environment]
   */
  createEnvironment(
    request: CreateEnvironmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates the specified
   * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: [Environment][google.cloud.dialogflow.cx.v3beta1.Environment]
   */
  updateEnvironment(
    request: UpdateEnvironmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes the specified
   * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
   */
  deleteEnvironment(
    request: DeleteEnvironmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Looks up the history of the specified
   * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
   */
  lookupEnvironmentHistory(
    request: LookupEnvironmentHistoryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LookupEnvironmentHistoryResponse>>;
  /**
   * Kicks off a continuous test under the specified
   * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [RunContinuousTestMetadata][google.cloud.dialogflow.cx.v3beta1.RunContinuousTestMetadata]
   * - `response`:
   * [RunContinuousTestResponse][google.cloud.dialogflow.cx.v3beta1.RunContinuousTestResponse]
   */
  runContinuousTest(
    request: RunContinuousTestRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Fetches a list of continuous test results for a given environment. */
  listContinuousTestResults(
    request: ListContinuousTestResultsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListContinuousTestResultsResponse>>;
  /**
   * Deploys a flow to the specified
   * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [DeployFlowMetadata][google.cloud.dialogflow.cx.v3beta1.DeployFlowMetadata]
   * - `response`:
   * [DeployFlowResponse][google.cloud.dialogflow.cx.v3beta1.DeployFlowResponse]
   */
  deployFlow(request: DeployFlowRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface EnvironmentsClient<CallOptionsExt = {}> {
  /**
   * Returns the list of all environments in the specified
   * [Agent][google.cloud.dialogflow.cx.v3beta1.Agent].
   */
  listEnvironments(
    request: DeepPartial<ListEnvironmentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEnvironmentsResponse>;
  /**
   * Retrieves the specified
   * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
   */
  getEnvironment(
    request: DeepPartial<GetEnvironmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Environment>;
  /**
   * Creates an [Environment][google.cloud.dialogflow.cx.v3beta1.Environment] in
   * the specified [Agent][google.cloud.dialogflow.cx.v3beta1.Agent].
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: [Environment][google.cloud.dialogflow.cx.v3beta1.Environment]
   */
  createEnvironment(
    request: DeepPartial<CreateEnvironmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates the specified
   * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: [Environment][google.cloud.dialogflow.cx.v3beta1.Environment]
   */
  updateEnvironment(
    request: DeepPartial<UpdateEnvironmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes the specified
   * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
   */
  deleteEnvironment(
    request: DeepPartial<DeleteEnvironmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Looks up the history of the specified
   * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
   */
  lookupEnvironmentHistory(
    request: DeepPartial<LookupEnvironmentHistoryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LookupEnvironmentHistoryResponse>;
  /**
   * Kicks off a continuous test under the specified
   * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [RunContinuousTestMetadata][google.cloud.dialogflow.cx.v3beta1.RunContinuousTestMetadata]
   * - `response`:
   * [RunContinuousTestResponse][google.cloud.dialogflow.cx.v3beta1.RunContinuousTestResponse]
   */
  runContinuousTest(
    request: DeepPartial<RunContinuousTestRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Fetches a list of continuous test results for a given environment. */
  listContinuousTestResults(
    request: DeepPartial<ListContinuousTestResultsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListContinuousTestResultsResponse>;
  /**
   * Deploys a flow to the specified
   * [Environment][google.cloud.dialogflow.cx.v3beta1.Environment].
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [DeployFlowMetadata][google.cloud.dialogflow.cx.v3beta1.DeployFlowMetadata]
   * - `response`:
   * [DeployFlowResponse][google.cloud.dialogflow.cx.v3beta1.DeployFlowResponse]
   */
  deployFlow(request: DeepPartial<DeployFlowRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
