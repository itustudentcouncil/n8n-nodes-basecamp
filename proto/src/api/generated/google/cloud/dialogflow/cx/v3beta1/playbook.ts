// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3beta1/playbook.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { Example } from "./example.js";
import { LlmModelSettings } from "./generative_settings.js";
import { ParameterDefinition } from "./parameter_definition.js";

export const protobufPackage = "google.cloud.dialogflow.cx.v3beta1";

/**
 * The request message for
 * [Playbooks.CreatePlaybook][google.cloud.dialogflow.cx.v3beta1.Playbooks.CreatePlaybook].
 */
export interface CreatePlaybookRequest {
  /**
   * Required. The agent to create a playbook for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   */
  parent: string;
  /** Required. The playbook to create. */
  playbook: Playbook | undefined;
}

/**
 * The request message for
 * [Playbooks.DeletePlaybook][google.cloud.dialogflow.cx.v3beta1.Playbooks.DeletePlaybook].
 */
export interface DeletePlaybookRequest {
  /**
   * Required. The name of the playbook to delete.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/playbooks/<Playbook ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [Playbooks.ListPlaybooks][google.cloud.dialogflow.cx.v3beta1.Playbooks.ListPlaybooks].
 */
export interface ListPlaybooksRequest {
  /**
   * Required. The agent to list playbooks from.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   */
  parent: string;
  /**
   * The maximum number of items to return in a single page. By default 100 and
   * at most 1000.
   */
  pageSize: number;
  /** The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [Playbooks.ListPlaybooks][google.cloud.dialogflow.cx.v3beta1.Playbooks.ListPlaybooks].
 */
export interface ListPlaybooksResponse {
  /**
   * The list of playbooks. There will be a maximum number of items returned
   * based on the page_size field in the request.
   */
  playbooks: Playbook[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [Playbooks.GetPlaybook][google.cloud.dialogflow.cx.v3beta1.Playbooks.GetPlaybook].
 */
export interface GetPlaybookRequest {
  /**
   * Required. The name of the playbook.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/playbooks/<Playbook ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [Playbooks.UpdatePlaybook][google.cloud.dialogflow.cx.v3beta1.Playbooks.UpdatePlaybook].
 */
export interface UpdatePlaybookRequest {
  /** Required. The playbook to update. */
  playbook:
    | Playbook
    | undefined;
  /**
   * The mask to control which fields get updated. If the mask is not present,
   * all fields will be updated.
   */
  updateMask: string[] | undefined;
}

/**
 * Playbook is the basic building block to instruct the LLM how to execute a
 * certain task.
 *
 * A playbook consists of a goal to accomplish, an optional list of step by step
 * instructions (the step instruction may refers to name of the custom or
 * default plugin tools to use) to perform the task,
 * a list of contextual input data to be passed in at the beginning of the
 * invoked, and a list of output parameters to store the playbook result.
 */
export interface Playbook {
  /**
   * The unique identifier of the playbook.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/playbooks/<Playbook ID>`.
   */
  name: string;
  /** Required. The human-readable name of the playbook, unique within an agent. */
  displayName: string;
  /**
   * Required. High level description of the goal the playbook intend to
   * accomplish.
   */
  goal: string;
  /** Optional. Defined structured input parameters for this playbook. */
  inputParameterDefinitions: ParameterDefinition[];
  /** Optional. Defined structured output parameters for this playbook. */
  outputParameterDefinitions: ParameterDefinition[];
  /** Instruction to accomplish target goal. */
  instruction:
    | Playbook_Instruction
    | undefined;
  /**
   * Output only. Estimated number of tokes current playbook takes when sent to
   * the LLM.
   */
  tokenCount: Long;
  /** Output only. The timestamp of initial playbook creation. */
  createTime:
    | Date
    | undefined;
  /** Output only. Last time the playbook version was updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. The resource name of other playbooks referenced by the current
   * playbook in the instructions.
   */
  referencedPlaybooks: string[];
  /**
   * Output only. The resource name of flows referenced by the current playbook
   * in the instructions.
   */
  referencedFlows: string[];
  /**
   * Optional. The resource name of tools referenced by the current playbook in
   * the instructions. If not provided explicitly, they are will
   * be implied using the tool being referenced in goal and steps.
   */
  referencedTools: string[];
  /** Optional. Llm model settings for the playbook. */
  llmModelSettings: LlmModelSettings | undefined;
}

/** Message of single step execution. */
export interface Playbook_Step {
  /** Step instruction in text format. */
  text?:
    | string
    | undefined;
  /** Sub-processing needed to execute the current step. */
  steps: Playbook_Step[];
}

/** Message of the Instruction of the playbook. */
export interface Playbook_Instruction {
  /**
   * Ordered list of step by step execution instructions to accomplish
   * target goal.
   */
  steps: Playbook_Step[];
}

/**
 * The request message for
 * [Playbooks.CreatePlaybookVersion][google.cloud.dialogflow.cx.v3beta1.Playbooks.CreatePlaybookVersion].
 */
export interface CreatePlaybookVersionRequest {
  /**
   * Required. The playbook to create a version for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/playbooks/<Playbook ID>`.
   */
  parent: string;
  /** Required. The playbook version to create. */
  playbookVersion: PlaybookVersion | undefined;
}

/** Playbook version is a snapshot of the playbook at certain timestamp. */
export interface PlaybookVersion {
  /**
   * The unique identifier of the playbook version.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/playbooks/<Playbook ID>/versions/<Version ID>`.
   */
  name: string;
  /** Optional. The description of the playbook version. */
  description: string;
  /** Output only. Snapshot of the playbook when the playbook version is created. */
  playbook:
    | Playbook
    | undefined;
  /**
   * Output only. Snapshot of the examples belonging to the playbook when the
   * playbook version is created.
   */
  examples: Example[];
  /** Output only. Last time the playbook version was created or modified. */
  updateTime: Date | undefined;
}

/**
 * The request message for
 * [Playbooks.GetPlaybookVersion][google.cloud.dialogflow.cx.v3beta1.Playbooks.GetPlaybookVersion].
 */
export interface GetPlaybookVersionRequest {
  /**
   * Required. The name of the playbook version.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/playbooks/<Playbook ID>/versions/<Version ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [Playbooks.ListPlaybookVersions][google.cloud.dialogflow.cx.v3beta1.Playbooks.ListPlaybookVersions].
 */
export interface ListPlaybookVersionsRequest {
  /**
   * Required. The playbook to list versions for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/playbooks/<Playbook ID>`.
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return in a single page. By
   * default 100 and at most 1000.
   */
  pageSize: number;
  /** Optional. The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [Playbooks.ListPlaybookVersions][google.cloud.dialogflow.cx.v3beta1.Playbooks.ListPlaybookVersions].
 */
export interface ListPlaybookVersionsResponse {
  /**
   * The list of playbook version. There will be a maximum number of items
   * returned based on the page_size field in the request.
   */
  playbookVersions: PlaybookVersion[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [Playbooks.DeletePlaybookVersion][google.cloud.dialogflow.cx.v3beta1.Playbooks.DeletePlaybookVersion].
 */
export interface DeletePlaybookVersionRequest {
  /**
   * Required. The name of the playbook version to delete.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/playbooks/<Playbook ID>/versions/<Version ID>`.
   */
  name: string;
}

function createBaseCreatePlaybookRequest(): CreatePlaybookRequest {
  return { parent: "", playbook: undefined };
}

export const CreatePlaybookRequest: MessageFns<CreatePlaybookRequest> = {
  encode(message: CreatePlaybookRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.playbook !== undefined) {
      Playbook.encode(message.playbook, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePlaybookRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePlaybookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.playbook = Playbook.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePlaybookRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      playbook: isSet(object.playbook) ? Playbook.fromJSON(object.playbook) : undefined,
    };
  },

  toJSON(message: CreatePlaybookRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.playbook !== undefined) {
      obj.playbook = Playbook.toJSON(message.playbook);
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePlaybookRequest>): CreatePlaybookRequest {
    return CreatePlaybookRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePlaybookRequest>): CreatePlaybookRequest {
    const message = createBaseCreatePlaybookRequest();
    message.parent = object.parent ?? "";
    message.playbook = (object.playbook !== undefined && object.playbook !== null)
      ? Playbook.fromPartial(object.playbook)
      : undefined;
    return message;
  },
};

function createBaseDeletePlaybookRequest(): DeletePlaybookRequest {
  return { name: "" };
}

export const DeletePlaybookRequest: MessageFns<DeletePlaybookRequest> = {
  encode(message: DeletePlaybookRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePlaybookRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePlaybookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePlaybookRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeletePlaybookRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePlaybookRequest>): DeletePlaybookRequest {
    return DeletePlaybookRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePlaybookRequest>): DeletePlaybookRequest {
    const message = createBaseDeletePlaybookRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListPlaybooksRequest(): ListPlaybooksRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListPlaybooksRequest: MessageFns<ListPlaybooksRequest> = {
  encode(message: ListPlaybooksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPlaybooksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPlaybooksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPlaybooksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListPlaybooksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPlaybooksRequest>): ListPlaybooksRequest {
    return ListPlaybooksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPlaybooksRequest>): ListPlaybooksRequest {
    const message = createBaseListPlaybooksRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListPlaybooksResponse(): ListPlaybooksResponse {
  return { playbooks: [], nextPageToken: "" };
}

export const ListPlaybooksResponse: MessageFns<ListPlaybooksResponse> = {
  encode(message: ListPlaybooksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.playbooks) {
      Playbook.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPlaybooksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPlaybooksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.playbooks.push(Playbook.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPlaybooksResponse {
    return {
      playbooks: globalThis.Array.isArray(object?.playbooks)
        ? object.playbooks.map((e: any) => Playbook.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListPlaybooksResponse): unknown {
    const obj: any = {};
    if (message.playbooks?.length) {
      obj.playbooks = message.playbooks.map((e) => Playbook.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPlaybooksResponse>): ListPlaybooksResponse {
    return ListPlaybooksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPlaybooksResponse>): ListPlaybooksResponse {
    const message = createBaseListPlaybooksResponse();
    message.playbooks = object.playbooks?.map((e) => Playbook.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetPlaybookRequest(): GetPlaybookRequest {
  return { name: "" };
}

export const GetPlaybookRequest: MessageFns<GetPlaybookRequest> = {
  encode(message: GetPlaybookRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPlaybookRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlaybookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPlaybookRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPlaybookRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPlaybookRequest>): GetPlaybookRequest {
    return GetPlaybookRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPlaybookRequest>): GetPlaybookRequest {
    const message = createBaseGetPlaybookRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdatePlaybookRequest(): UpdatePlaybookRequest {
  return { playbook: undefined, updateMask: undefined };
}

export const UpdatePlaybookRequest: MessageFns<UpdatePlaybookRequest> = {
  encode(message: UpdatePlaybookRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playbook !== undefined) {
      Playbook.encode(message.playbook, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePlaybookRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePlaybookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.playbook = Playbook.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePlaybookRequest {
    return {
      playbook: isSet(object.playbook) ? Playbook.fromJSON(object.playbook) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdatePlaybookRequest): unknown {
    const obj: any = {};
    if (message.playbook !== undefined) {
      obj.playbook = Playbook.toJSON(message.playbook);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePlaybookRequest>): UpdatePlaybookRequest {
    return UpdatePlaybookRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePlaybookRequest>): UpdatePlaybookRequest {
    const message = createBaseUpdatePlaybookRequest();
    message.playbook = (object.playbook !== undefined && object.playbook !== null)
      ? Playbook.fromPartial(object.playbook)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBasePlaybook(): Playbook {
  return {
    name: "",
    displayName: "",
    goal: "",
    inputParameterDefinitions: [],
    outputParameterDefinitions: [],
    instruction: undefined,
    tokenCount: Long.ZERO,
    createTime: undefined,
    updateTime: undefined,
    referencedPlaybooks: [],
    referencedFlows: [],
    referencedTools: [],
    llmModelSettings: undefined,
  };
}

export const Playbook: MessageFns<Playbook> = {
  encode(message: Playbook, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.goal !== "") {
      writer.uint32(26).string(message.goal);
    }
    for (const v of message.inputParameterDefinitions) {
      ParameterDefinition.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.outputParameterDefinitions) {
      ParameterDefinition.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.instruction !== undefined) {
      Playbook_Instruction.encode(message.instruction, writer.uint32(138).fork()).join();
    }
    if (!message.tokenCount.equals(Long.ZERO)) {
      writer.uint32(64).int64(message.tokenCount.toString());
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(74).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(82).fork()).join();
    }
    for (const v of message.referencedPlaybooks) {
      writer.uint32(90).string(v!);
    }
    for (const v of message.referencedFlows) {
      writer.uint32(98).string(v!);
    }
    for (const v of message.referencedTools) {
      writer.uint32(106).string(v!);
    }
    if (message.llmModelSettings !== undefined) {
      LlmModelSettings.encode(message.llmModelSettings, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Playbook {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaybook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.goal = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.inputParameterDefinitions.push(ParameterDefinition.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.outputParameterDefinitions.push(ParameterDefinition.decode(reader, reader.uint32()));
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.instruction = Playbook_Instruction.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.tokenCount = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.referencedPlaybooks.push(reader.string());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.referencedFlows.push(reader.string());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.referencedTools.push(reader.string());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.llmModelSettings = LlmModelSettings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Playbook {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      goal: isSet(object.goal) ? globalThis.String(object.goal) : "",
      inputParameterDefinitions: globalThis.Array.isArray(object?.inputParameterDefinitions)
        ? object.inputParameterDefinitions.map((e: any) => ParameterDefinition.fromJSON(e))
        : [],
      outputParameterDefinitions: globalThis.Array.isArray(object?.outputParameterDefinitions)
        ? object.outputParameterDefinitions.map((e: any) => ParameterDefinition.fromJSON(e))
        : [],
      instruction: isSet(object.instruction) ? Playbook_Instruction.fromJSON(object.instruction) : undefined,
      tokenCount: isSet(object.tokenCount) ? Long.fromValue(object.tokenCount) : Long.ZERO,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      referencedPlaybooks: globalThis.Array.isArray(object?.referencedPlaybooks)
        ? object.referencedPlaybooks.map((e: any) => globalThis.String(e))
        : [],
      referencedFlows: globalThis.Array.isArray(object?.referencedFlows)
        ? object.referencedFlows.map((e: any) => globalThis.String(e))
        : [],
      referencedTools: globalThis.Array.isArray(object?.referencedTools)
        ? object.referencedTools.map((e: any) => globalThis.String(e))
        : [],
      llmModelSettings: isSet(object.llmModelSettings) ? LlmModelSettings.fromJSON(object.llmModelSettings) : undefined,
    };
  },

  toJSON(message: Playbook): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.goal !== "") {
      obj.goal = message.goal;
    }
    if (message.inputParameterDefinitions?.length) {
      obj.inputParameterDefinitions = message.inputParameterDefinitions.map((e) => ParameterDefinition.toJSON(e));
    }
    if (message.outputParameterDefinitions?.length) {
      obj.outputParameterDefinitions = message.outputParameterDefinitions.map((e) => ParameterDefinition.toJSON(e));
    }
    if (message.instruction !== undefined) {
      obj.instruction = Playbook_Instruction.toJSON(message.instruction);
    }
    if (!message.tokenCount.equals(Long.ZERO)) {
      obj.tokenCount = (message.tokenCount || Long.ZERO).toString();
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.referencedPlaybooks?.length) {
      obj.referencedPlaybooks = message.referencedPlaybooks;
    }
    if (message.referencedFlows?.length) {
      obj.referencedFlows = message.referencedFlows;
    }
    if (message.referencedTools?.length) {
      obj.referencedTools = message.referencedTools;
    }
    if (message.llmModelSettings !== undefined) {
      obj.llmModelSettings = LlmModelSettings.toJSON(message.llmModelSettings);
    }
    return obj;
  },

  create(base?: DeepPartial<Playbook>): Playbook {
    return Playbook.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Playbook>): Playbook {
    const message = createBasePlaybook();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.goal = object.goal ?? "";
    message.inputParameterDefinitions =
      object.inputParameterDefinitions?.map((e) => ParameterDefinition.fromPartial(e)) || [];
    message.outputParameterDefinitions =
      object.outputParameterDefinitions?.map((e) => ParameterDefinition.fromPartial(e)) || [];
    message.instruction = (object.instruction !== undefined && object.instruction !== null)
      ? Playbook_Instruction.fromPartial(object.instruction)
      : undefined;
    message.tokenCount = (object.tokenCount !== undefined && object.tokenCount !== null)
      ? Long.fromValue(object.tokenCount)
      : Long.ZERO;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.referencedPlaybooks = object.referencedPlaybooks?.map((e) => e) || [];
    message.referencedFlows = object.referencedFlows?.map((e) => e) || [];
    message.referencedTools = object.referencedTools?.map((e) => e) || [];
    message.llmModelSettings = (object.llmModelSettings !== undefined && object.llmModelSettings !== null)
      ? LlmModelSettings.fromPartial(object.llmModelSettings)
      : undefined;
    return message;
  },
};

function createBasePlaybook_Step(): Playbook_Step {
  return { text: undefined, steps: [] };
}

export const Playbook_Step: MessageFns<Playbook_Step> = {
  encode(message: Playbook_Step, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      writer.uint32(10).string(message.text);
    }
    for (const v of message.steps) {
      Playbook_Step.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Playbook_Step {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaybook_Step();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.steps.push(Playbook_Step.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Playbook_Step {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
      steps: globalThis.Array.isArray(object?.steps) ? object.steps.map((e: any) => Playbook_Step.fromJSON(e)) : [],
    };
  },

  toJSON(message: Playbook_Step): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.steps?.length) {
      obj.steps = message.steps.map((e) => Playbook_Step.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Playbook_Step>): Playbook_Step {
    return Playbook_Step.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Playbook_Step>): Playbook_Step {
    const message = createBasePlaybook_Step();
    message.text = object.text ?? undefined;
    message.steps = object.steps?.map((e) => Playbook_Step.fromPartial(e)) || [];
    return message;
  },
};

function createBasePlaybook_Instruction(): Playbook_Instruction {
  return { steps: [] };
}

export const Playbook_Instruction: MessageFns<Playbook_Instruction> = {
  encode(message: Playbook_Instruction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.steps) {
      Playbook_Step.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Playbook_Instruction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaybook_Instruction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.steps.push(Playbook_Step.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Playbook_Instruction {
    return {
      steps: globalThis.Array.isArray(object?.steps) ? object.steps.map((e: any) => Playbook_Step.fromJSON(e)) : [],
    };
  },

  toJSON(message: Playbook_Instruction): unknown {
    const obj: any = {};
    if (message.steps?.length) {
      obj.steps = message.steps.map((e) => Playbook_Step.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Playbook_Instruction>): Playbook_Instruction {
    return Playbook_Instruction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Playbook_Instruction>): Playbook_Instruction {
    const message = createBasePlaybook_Instruction();
    message.steps = object.steps?.map((e) => Playbook_Step.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreatePlaybookVersionRequest(): CreatePlaybookVersionRequest {
  return { parent: "", playbookVersion: undefined };
}

export const CreatePlaybookVersionRequest: MessageFns<CreatePlaybookVersionRequest> = {
  encode(message: CreatePlaybookVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.playbookVersion !== undefined) {
      PlaybookVersion.encode(message.playbookVersion, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePlaybookVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePlaybookVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.playbookVersion = PlaybookVersion.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePlaybookVersionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      playbookVersion: isSet(object.playbookVersion) ? PlaybookVersion.fromJSON(object.playbookVersion) : undefined,
    };
  },

  toJSON(message: CreatePlaybookVersionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.playbookVersion !== undefined) {
      obj.playbookVersion = PlaybookVersion.toJSON(message.playbookVersion);
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePlaybookVersionRequest>): CreatePlaybookVersionRequest {
    return CreatePlaybookVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePlaybookVersionRequest>): CreatePlaybookVersionRequest {
    const message = createBaseCreatePlaybookVersionRequest();
    message.parent = object.parent ?? "";
    message.playbookVersion = (object.playbookVersion !== undefined && object.playbookVersion !== null)
      ? PlaybookVersion.fromPartial(object.playbookVersion)
      : undefined;
    return message;
  },
};

function createBasePlaybookVersion(): PlaybookVersion {
  return { name: "", description: "", playbook: undefined, examples: [], updateTime: undefined };
}

export const PlaybookVersion: MessageFns<PlaybookVersion> = {
  encode(message: PlaybookVersion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.playbook !== undefined) {
      Playbook.encode(message.playbook, writer.uint32(26).fork()).join();
    }
    for (const v of message.examples) {
      Example.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaybookVersion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaybookVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.playbook = Playbook.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.examples.push(Example.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaybookVersion {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      playbook: isSet(object.playbook) ? Playbook.fromJSON(object.playbook) : undefined,
      examples: globalThis.Array.isArray(object?.examples) ? object.examples.map((e: any) => Example.fromJSON(e)) : [],
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: PlaybookVersion): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.playbook !== undefined) {
      obj.playbook = Playbook.toJSON(message.playbook);
    }
    if (message.examples?.length) {
      obj.examples = message.examples.map((e) => Example.toJSON(e));
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<PlaybookVersion>): PlaybookVersion {
    return PlaybookVersion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlaybookVersion>): PlaybookVersion {
    const message = createBasePlaybookVersion();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.playbook = (object.playbook !== undefined && object.playbook !== null)
      ? Playbook.fromPartial(object.playbook)
      : undefined;
    message.examples = object.examples?.map((e) => Example.fromPartial(e)) || [];
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseGetPlaybookVersionRequest(): GetPlaybookVersionRequest {
  return { name: "" };
}

export const GetPlaybookVersionRequest: MessageFns<GetPlaybookVersionRequest> = {
  encode(message: GetPlaybookVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPlaybookVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlaybookVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPlaybookVersionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPlaybookVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPlaybookVersionRequest>): GetPlaybookVersionRequest {
    return GetPlaybookVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPlaybookVersionRequest>): GetPlaybookVersionRequest {
    const message = createBaseGetPlaybookVersionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListPlaybookVersionsRequest(): ListPlaybookVersionsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListPlaybookVersionsRequest: MessageFns<ListPlaybookVersionsRequest> = {
  encode(message: ListPlaybookVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPlaybookVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPlaybookVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPlaybookVersionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListPlaybookVersionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPlaybookVersionsRequest>): ListPlaybookVersionsRequest {
    return ListPlaybookVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPlaybookVersionsRequest>): ListPlaybookVersionsRequest {
    const message = createBaseListPlaybookVersionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListPlaybookVersionsResponse(): ListPlaybookVersionsResponse {
  return { playbookVersions: [], nextPageToken: "" };
}

export const ListPlaybookVersionsResponse: MessageFns<ListPlaybookVersionsResponse> = {
  encode(message: ListPlaybookVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.playbookVersions) {
      PlaybookVersion.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPlaybookVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPlaybookVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.playbookVersions.push(PlaybookVersion.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPlaybookVersionsResponse {
    return {
      playbookVersions: globalThis.Array.isArray(object?.playbookVersions)
        ? object.playbookVersions.map((e: any) => PlaybookVersion.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListPlaybookVersionsResponse): unknown {
    const obj: any = {};
    if (message.playbookVersions?.length) {
      obj.playbookVersions = message.playbookVersions.map((e) => PlaybookVersion.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPlaybookVersionsResponse>): ListPlaybookVersionsResponse {
    return ListPlaybookVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPlaybookVersionsResponse>): ListPlaybookVersionsResponse {
    const message = createBaseListPlaybookVersionsResponse();
    message.playbookVersions = object.playbookVersions?.map((e) => PlaybookVersion.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeletePlaybookVersionRequest(): DeletePlaybookVersionRequest {
  return { name: "" };
}

export const DeletePlaybookVersionRequest: MessageFns<DeletePlaybookVersionRequest> = {
  encode(message: DeletePlaybookVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePlaybookVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePlaybookVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePlaybookVersionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeletePlaybookVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePlaybookVersionRequest>): DeletePlaybookVersionRequest {
    return DeletePlaybookVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePlaybookVersionRequest>): DeletePlaybookVersionRequest {
    const message = createBaseDeletePlaybookVersionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * Service for managing
 * [Playbooks][google.cloud.dialogflow.cx.v3beta1.Playbook].
 */
export type PlaybooksDefinition = typeof PlaybooksDefinition;
export const PlaybooksDefinition = {
  name: "Playbooks",
  fullName: "google.cloud.dialogflow.cx.v3beta1.Playbooks",
  methods: {
    /** Creates a playbook in a specified agent. */
    createPlaybook: {
      name: "CreatePlaybook",
      requestType: CreatePlaybookRequest,
      requestStream: false,
      responseType: Playbook,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 112, 108, 97, 121, 98, 111, 111, 107])],
          578365826: [
            Buffer.from([
              71,
              58,
              8,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              34,
              59,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a specified playbook. */
    deletePlaybook: {
      name: "DeletePlaybook",
      requestType: DeletePlaybookRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              42,
              59,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Returns a list of playbooks in the specified agent. */
    listPlaybooks: {
      name: "ListPlaybooks",
      requestType: ListPlaybooksRequest,
      requestStream: false,
      responseType: ListPlaybooksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves the specified Playbook. */
    getPlaybook: {
      name: "GetPlaybook",
      requestType: GetPlaybookRequest,
      requestStream: false,
      responseType: Playbook,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates the specified Playbook. */
    updatePlaybook: {
      name: "UpdatePlaybook",
      requestType: UpdatePlaybookRequest,
      requestStream: false,
      responseType: Playbook,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              80,
              58,
              8,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              50,
              68,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a version for the specified Playbook. */
    createPlaybookVersion: {
      name: "CreatePlaybookVersion",
      requestType: CreatePlaybookVersionRequest,
      requestStream: false,
      responseType: PlaybookVersion,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              90,
              58,
              16,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              70,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              115,
              47,
              42,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves the specified version of the Playbook. */
    getPlaybookVersion: {
      name: "GetPlaybookVersion",
      requestType: GetPlaybookVersionRequest,
      requestStream: false,
      responseType: PlaybookVersion,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists versions for the specified Playbook. */
    listPlaybookVersions: {
      name: "ListPlaybookVersions",
      requestType: ListPlaybookVersionsRequest,
      requestStream: false,
      responseType: ListPlaybookVersionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              115,
              47,
              42,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes the specified version of the Playbook. */
    deletePlaybookVersion: {
      name: "DeletePlaybookVersion",
      requestType: DeletePlaybookVersionRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              72,
              42,
              70,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              108,
              97,
              121,
              98,
              111,
              111,
              107,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface PlaybooksServiceImplementation<CallContextExt = {}> {
  /** Creates a playbook in a specified agent. */
  createPlaybook(request: CreatePlaybookRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Playbook>>;
  /** Deletes a specified playbook. */
  deletePlaybook(request: DeletePlaybookRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Returns a list of playbooks in the specified agent. */
  listPlaybooks(
    request: ListPlaybooksRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPlaybooksResponse>>;
  /** Retrieves the specified Playbook. */
  getPlaybook(request: GetPlaybookRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Playbook>>;
  /** Updates the specified Playbook. */
  updatePlaybook(request: UpdatePlaybookRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Playbook>>;
  /** Creates a version for the specified Playbook. */
  createPlaybookVersion(
    request: CreatePlaybookVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PlaybookVersion>>;
  /** Retrieves the specified version of the Playbook. */
  getPlaybookVersion(
    request: GetPlaybookVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PlaybookVersion>>;
  /** Lists versions for the specified Playbook. */
  listPlaybookVersions(
    request: ListPlaybookVersionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPlaybookVersionsResponse>>;
  /** Deletes the specified version of the Playbook. */
  deletePlaybookVersion(
    request: DeletePlaybookVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface PlaybooksClient<CallOptionsExt = {}> {
  /** Creates a playbook in a specified agent. */
  createPlaybook(
    request: DeepPartial<CreatePlaybookRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Playbook>;
  /** Deletes a specified playbook. */
  deletePlaybook(request: DeepPartial<DeletePlaybookRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Returns a list of playbooks in the specified agent. */
  listPlaybooks(
    request: DeepPartial<ListPlaybooksRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPlaybooksResponse>;
  /** Retrieves the specified Playbook. */
  getPlaybook(request: DeepPartial<GetPlaybookRequest>, options?: CallOptions & CallOptionsExt): Promise<Playbook>;
  /** Updates the specified Playbook. */
  updatePlaybook(
    request: DeepPartial<UpdatePlaybookRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Playbook>;
  /** Creates a version for the specified Playbook. */
  createPlaybookVersion(
    request: DeepPartial<CreatePlaybookVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PlaybookVersion>;
  /** Retrieves the specified version of the Playbook. */
  getPlaybookVersion(
    request: DeepPartial<GetPlaybookVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PlaybookVersion>;
  /** Lists versions for the specified Playbook. */
  listPlaybookVersions(
    request: DeepPartial<ListPlaybookVersionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPlaybookVersionsResponse>;
  /** Deletes the specified version of the Playbook. */
  deletePlaybookVersion(
    request: DeepPartial<DeletePlaybookVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
