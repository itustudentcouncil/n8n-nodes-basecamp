// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3/validation_message.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.dialogflow.cx.v3";

/** Agent/flow validation message. */
export interface ValidationMessage {
  /** The type of the resources where the message is found. */
  resourceType: ValidationMessage_ResourceType;
  /**
   * The names of the resources where the message is found.
   *
   * @deprecated
   */
  resources: string[];
  /** The resource names of the resources where the message is found. */
  resourceNames: ResourceName[];
  /** Indicates the severity of the message. */
  severity: ValidationMessage_Severity;
  /** The message detail. */
  detail: string;
}

/** Resource types. */
export enum ValidationMessage_ResourceType {
  /** RESOURCE_TYPE_UNSPECIFIED - Unspecified. */
  RESOURCE_TYPE_UNSPECIFIED = 0,
  /** AGENT - Agent. */
  AGENT = 1,
  /** INTENT - Intent. */
  INTENT = 2,
  /** INTENT_TRAINING_PHRASE - Intent training phrase. */
  INTENT_TRAINING_PHRASE = 8,
  /** INTENT_PARAMETER - Intent parameter. */
  INTENT_PARAMETER = 9,
  /** INTENTS - Multiple intents. */
  INTENTS = 10,
  /** INTENT_TRAINING_PHRASES - Multiple training phrases. */
  INTENT_TRAINING_PHRASES = 11,
  /** ENTITY_TYPE - Entity type. */
  ENTITY_TYPE = 3,
  /** ENTITY_TYPES - Multiple entity types. */
  ENTITY_TYPES = 12,
  /** WEBHOOK - Webhook. */
  WEBHOOK = 4,
  /** FLOW - Flow. */
  FLOW = 5,
  /** PAGE - Page. */
  PAGE = 6,
  /** PAGES - Multiple pages. */
  PAGES = 13,
  /** TRANSITION_ROUTE_GROUP - Transition route group. */
  TRANSITION_ROUTE_GROUP = 7,
  /** AGENT_TRANSITION_ROUTE_GROUP - Agent transition route group. */
  AGENT_TRANSITION_ROUTE_GROUP = 14,
  UNRECOGNIZED = -1,
}

export function validationMessage_ResourceTypeFromJSON(object: any): ValidationMessage_ResourceType {
  switch (object) {
    case 0:
    case "RESOURCE_TYPE_UNSPECIFIED":
      return ValidationMessage_ResourceType.RESOURCE_TYPE_UNSPECIFIED;
    case 1:
    case "AGENT":
      return ValidationMessage_ResourceType.AGENT;
    case 2:
    case "INTENT":
      return ValidationMessage_ResourceType.INTENT;
    case 8:
    case "INTENT_TRAINING_PHRASE":
      return ValidationMessage_ResourceType.INTENT_TRAINING_PHRASE;
    case 9:
    case "INTENT_PARAMETER":
      return ValidationMessage_ResourceType.INTENT_PARAMETER;
    case 10:
    case "INTENTS":
      return ValidationMessage_ResourceType.INTENTS;
    case 11:
    case "INTENT_TRAINING_PHRASES":
      return ValidationMessage_ResourceType.INTENT_TRAINING_PHRASES;
    case 3:
    case "ENTITY_TYPE":
      return ValidationMessage_ResourceType.ENTITY_TYPE;
    case 12:
    case "ENTITY_TYPES":
      return ValidationMessage_ResourceType.ENTITY_TYPES;
    case 4:
    case "WEBHOOK":
      return ValidationMessage_ResourceType.WEBHOOK;
    case 5:
    case "FLOW":
      return ValidationMessage_ResourceType.FLOW;
    case 6:
    case "PAGE":
      return ValidationMessage_ResourceType.PAGE;
    case 13:
    case "PAGES":
      return ValidationMessage_ResourceType.PAGES;
    case 7:
    case "TRANSITION_ROUTE_GROUP":
      return ValidationMessage_ResourceType.TRANSITION_ROUTE_GROUP;
    case 14:
    case "AGENT_TRANSITION_ROUTE_GROUP":
      return ValidationMessage_ResourceType.AGENT_TRANSITION_ROUTE_GROUP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ValidationMessage_ResourceType.UNRECOGNIZED;
  }
}

export function validationMessage_ResourceTypeToJSON(object: ValidationMessage_ResourceType): string {
  switch (object) {
    case ValidationMessage_ResourceType.RESOURCE_TYPE_UNSPECIFIED:
      return "RESOURCE_TYPE_UNSPECIFIED";
    case ValidationMessage_ResourceType.AGENT:
      return "AGENT";
    case ValidationMessage_ResourceType.INTENT:
      return "INTENT";
    case ValidationMessage_ResourceType.INTENT_TRAINING_PHRASE:
      return "INTENT_TRAINING_PHRASE";
    case ValidationMessage_ResourceType.INTENT_PARAMETER:
      return "INTENT_PARAMETER";
    case ValidationMessage_ResourceType.INTENTS:
      return "INTENTS";
    case ValidationMessage_ResourceType.INTENT_TRAINING_PHRASES:
      return "INTENT_TRAINING_PHRASES";
    case ValidationMessage_ResourceType.ENTITY_TYPE:
      return "ENTITY_TYPE";
    case ValidationMessage_ResourceType.ENTITY_TYPES:
      return "ENTITY_TYPES";
    case ValidationMessage_ResourceType.WEBHOOK:
      return "WEBHOOK";
    case ValidationMessage_ResourceType.FLOW:
      return "FLOW";
    case ValidationMessage_ResourceType.PAGE:
      return "PAGE";
    case ValidationMessage_ResourceType.PAGES:
      return "PAGES";
    case ValidationMessage_ResourceType.TRANSITION_ROUTE_GROUP:
      return "TRANSITION_ROUTE_GROUP";
    case ValidationMessage_ResourceType.AGENT_TRANSITION_ROUTE_GROUP:
      return "AGENT_TRANSITION_ROUTE_GROUP";
    case ValidationMessage_ResourceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Severity level. */
export enum ValidationMessage_Severity {
  /** SEVERITY_UNSPECIFIED - Unspecified. */
  SEVERITY_UNSPECIFIED = 0,
  /** INFO - The agent doesn't follow Dialogflow best practices. */
  INFO = 1,
  /** WARNING - The agent may not behave as expected. */
  WARNING = 2,
  /** ERROR - The agent may experience failures. */
  ERROR = 3,
  UNRECOGNIZED = -1,
}

export function validationMessage_SeverityFromJSON(object: any): ValidationMessage_Severity {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return ValidationMessage_Severity.SEVERITY_UNSPECIFIED;
    case 1:
    case "INFO":
      return ValidationMessage_Severity.INFO;
    case 2:
    case "WARNING":
      return ValidationMessage_Severity.WARNING;
    case 3:
    case "ERROR":
      return ValidationMessage_Severity.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ValidationMessage_Severity.UNRECOGNIZED;
  }
}

export function validationMessage_SeverityToJSON(object: ValidationMessage_Severity): string {
  switch (object) {
    case ValidationMessage_Severity.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case ValidationMessage_Severity.INFO:
      return "INFO";
    case ValidationMessage_Severity.WARNING:
      return "WARNING";
    case ValidationMessage_Severity.ERROR:
      return "ERROR";
    case ValidationMessage_Severity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Resource name and display name. */
export interface ResourceName {
  /** Name. */
  name: string;
  /** Display name. */
  displayName: string;
}

function createBaseValidationMessage(): ValidationMessage {
  return { resourceType: 0, resources: [], resourceNames: [], severity: 0, detail: "" };
}

export const ValidationMessage: MessageFns<ValidationMessage> = {
  encode(message: ValidationMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceType !== 0) {
      writer.uint32(8).int32(message.resourceType);
    }
    for (const v of message.resources) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.resourceNames) {
      ResourceName.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.severity !== 0) {
      writer.uint32(24).int32(message.severity);
    }
    if (message.detail !== "") {
      writer.uint32(34).string(message.detail);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidationMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidationMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.resourceType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resources.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.resourceNames.push(ResourceName.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.detail = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidationMessage {
    return {
      resourceType: isSet(object.resourceType) ? validationMessage_ResourceTypeFromJSON(object.resourceType) : 0,
      resources: globalThis.Array.isArray(object?.resources)
        ? object.resources.map((e: any) => globalThis.String(e))
        : [],
      resourceNames: globalThis.Array.isArray(object?.resourceNames)
        ? object.resourceNames.map((e: any) => ResourceName.fromJSON(e))
        : [],
      severity: isSet(object.severity) ? validationMessage_SeverityFromJSON(object.severity) : 0,
      detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
    };
  },

  toJSON(message: ValidationMessage): unknown {
    const obj: any = {};
    if (message.resourceType !== 0) {
      obj.resourceType = validationMessage_ResourceTypeToJSON(message.resourceType);
    }
    if (message.resources?.length) {
      obj.resources = message.resources;
    }
    if (message.resourceNames?.length) {
      obj.resourceNames = message.resourceNames.map((e) => ResourceName.toJSON(e));
    }
    if (message.severity !== 0) {
      obj.severity = validationMessage_SeverityToJSON(message.severity);
    }
    if (message.detail !== "") {
      obj.detail = message.detail;
    }
    return obj;
  },

  create(base?: DeepPartial<ValidationMessage>): ValidationMessage {
    return ValidationMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidationMessage>): ValidationMessage {
    const message = createBaseValidationMessage();
    message.resourceType = object.resourceType ?? 0;
    message.resources = object.resources?.map((e) => e) || [];
    message.resourceNames = object.resourceNames?.map((e) => ResourceName.fromPartial(e)) || [];
    message.severity = object.severity ?? 0;
    message.detail = object.detail ?? "";
    return message;
  },
};

function createBaseResourceName(): ResourceName {
  return { name: "", displayName: "" };
}

export const ResourceName: MessageFns<ResourceName> = {
  encode(message: ResourceName, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourceName {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourceName();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourceName {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: ResourceName): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<ResourceName>): ResourceName {
    return ResourceName.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResourceName>): ResourceName {
    const message = createBaseResourceName();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
