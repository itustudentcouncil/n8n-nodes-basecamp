// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3beta1/security_settings.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";

export const protobufPackage = "google.cloud.dialogflow.cx.v3beta1";

/**
 * The request message for
 * [SecuritySettingsService.GetSecuritySettings][google.cloud.dialogflow.cx.v3beta1.SecuritySettingsService.GetSecuritySettings].
 */
export interface GetSecuritySettingsRequest {
  /**
   * Required. Resource name of the settings.
   * Format: `projects/<Project ID>/locations/<Location
   * ID>/securitySettings/<security settings ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [SecuritySettingsService.UpdateSecuritySettings][google.cloud.dialogflow.cx.v3beta1.SecuritySettingsService.UpdateSecuritySettings].
 */
export interface UpdateSecuritySettingsRequest {
  /**
   * Required. [SecuritySettings] object that contains values for each of the
   * fields to update.
   */
  securitySettings:
    | SecuritySettings
    | undefined;
  /**
   * Required. The mask to control which fields get updated. If the mask is not
   * present, all fields will be updated.
   */
  updateMask: string[] | undefined;
}

/** The request message for [SecuritySettings.ListSecuritySettings][]. */
export interface ListSecuritySettingsRequest {
  /**
   * Required. The location to list all security settings for.
   * Format: `projects/<Project ID>/locations/<Location ID>`.
   */
  parent: string;
  /**
   * The maximum number of items to return in a single page. By default 20 and
   * at most 100.
   */
  pageSize: number;
  /** The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/** The response message for [SecuritySettings.ListSecuritySettings][]. */
export interface ListSecuritySettingsResponse {
  /** The list of security settings. */
  securitySettings: SecuritySettings[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/** The request message for [SecuritySettings.CreateSecuritySettings][]. */
export interface CreateSecuritySettingsRequest {
  /**
   * Required. The location to create an
   * [SecuritySettings][google.cloud.dialogflow.cx.v3beta1.SecuritySettings]
   * for. Format: `projects/<Project ID>/locations/<Location ID>`.
   */
  parent: string;
  /** Required. The security settings to create. */
  securitySettings: SecuritySettings | undefined;
}

/** The request message for [SecuritySettings.DeleteSecuritySettings][]. */
export interface DeleteSecuritySettingsRequest {
  /**
   * Required. The name of the
   * [SecuritySettings][google.cloud.dialogflow.cx.v3beta1.SecuritySettings] to
   * delete. Format: `projects/<Project ID>/locations/<Location
   * ID>/securitySettings/<Security Settings ID>`.
   */
  name: string;
}

/**
 * Represents the settings related to security issues, such as data redaction
 * and data retention. It may take hours for updates on the settings to
 * propagate to all the related components and take effect.
 */
export interface SecuritySettings {
  /**
   * Resource name of the settings.
   * Required for the
   * [SecuritySettingsService.UpdateSecuritySettings][google.cloud.dialogflow.cx.v3beta1.SecuritySettingsService.UpdateSecuritySettings]
   * method.
   * [SecuritySettingsService.CreateSecuritySettings][google.cloud.dialogflow.cx.v3beta1.SecuritySettingsService.CreateSecuritySettings]
   * populates the name automatically. Format: `projects/<Project
   * ID>/locations/<Location ID>/securitySettings/<Security Settings ID>`.
   */
  name: string;
  /**
   * Required. The human-readable name of the security settings, unique within
   * the location.
   */
  displayName: string;
  /** Strategy that defines how we do redaction. */
  redactionStrategy: SecuritySettings_RedactionStrategy;
  /**
   * Defines the data for which Dialogflow applies redaction. Dialogflow does
   * not redact data that it does not have access to â€“ for example, Cloud
   * logging.
   */
  redactionScope: SecuritySettings_RedactionScope;
  /**
   * [DLP](https://cloud.google.com/dlp/docs) inspect template name. Use this
   * template to define inspect base settings.
   *
   * The `DLP Inspect Templates Reader` role is needed on the Dialogflow
   * service identity service account (has the form
   * `service-PROJECT_NUMBER@gcp-sa-dialogflow.iam.gserviceaccount.com`)
   * for your agent's project.
   *
   * If empty, we use the default DLP inspect config.
   *
   * The template name will have one of the following formats:
   * `projects/<Project ID>/locations/<Location ID>/inspectTemplates/<Template
   * ID>` OR `organizations/<Organization ID>/locations/<Location
   * ID>/inspectTemplates/<Template ID>`
   *
   * Note: `inspect_template` must be located in the same region as the
   * `SecuritySettings`.
   */
  inspectTemplate: string;
  /**
   * [DLP](https://cloud.google.com/dlp/docs) deidentify template name. Use this
   * template to define de-identification configuration for the content.
   *
   * The `DLP De-identify Templates Reader` role is needed on the Dialogflow
   * service identity service account (has the form
   * `service-PROJECT_NUMBER@gcp-sa-dialogflow.iam.gserviceaccount.com`)
   * for your agent's project.
   *
   * If empty, Dialogflow replaces sensitive info with `[redacted]` text.
   *
   * The template name will have one of the following formats:
   * `projects/<Project ID>/locations/<Location
   * ID>/deidentifyTemplates/<Template ID>` OR `organizations/<Organization
   * ID>/locations/<Location ID>/deidentifyTemplates/<Template ID>`
   *
   * Note: `deidentify_template` must be located in the same region as the
   * `SecuritySettings`.
   */
  deidentifyTemplate: string;
  /**
   * Retains data in interaction logging for the specified number of days.
   * This does not apply to Cloud logging, which is owned by the user - not
   * Dialogflow.
   * User must set a value lower than Dialogflow's default 365d TTL (30 days
   * for Agent Assist traffic), higher value will be ignored and use default.
   * Setting a value higher than that has no effect. A missing value or
   * setting to 0 also means we use default TTL.
   * When data retention configuration is changed, it only applies to the data
   * created after the change; the TTL of existing data created before the
   * change stays intact.
   */
  retentionWindowDays?:
    | number
    | undefined;
  /**
   * Specifies the retention behavior defined by
   * [SecuritySettings.RetentionStrategy][google.cloud.dialogflow.cx.v3beta1.SecuritySettings.RetentionStrategy].
   */
  retentionStrategy?:
    | SecuritySettings_RetentionStrategy
    | undefined;
  /** List of types of data to remove when retention settings triggers purge. */
  purgeDataTypes: SecuritySettings_PurgeDataType[];
  /**
   * Controls audio export settings for post-conversation analytics when
   * ingesting audio to conversations via [Participants.AnalyzeContent][] or
   * [Participants.StreamingAnalyzeContent][].
   *
   * If
   * [retention_strategy][google.cloud.dialogflow.cx.v3beta1.SecuritySettings.retention_strategy]
   * is set to REMOVE_AFTER_CONVERSATION or [audio_export_settings.gcs_bucket][]
   * is empty, audio export is disabled.
   *
   * If audio export is enabled, audio is recorded and saved to
   * [audio_export_settings.gcs_bucket][], subject to retention policy of
   * [audio_export_settings.gcs_bucket][].
   *
   * This setting won't effect audio input for implicit sessions via
   * [Sessions.DetectIntent][google.cloud.dialogflow.cx.v3beta1.Sessions.DetectIntent]
   * or
   * [Sessions.StreamingDetectIntent][google.cloud.dialogflow.cx.v3beta1.Sessions.StreamingDetectIntent].
   */
  audioExportSettings:
    | SecuritySettings_AudioExportSettings
    | undefined;
  /**
   * Controls conversation exporting settings to Insights after conversation is
   * completed.
   *
   * If
   * [retention_strategy][google.cloud.dialogflow.cx.v3beta1.SecuritySettings.retention_strategy]
   * is set to REMOVE_AFTER_CONVERSATION, Insights export is disabled no matter
   * what you configure here.
   */
  insightsExportSettings: SecuritySettings_InsightsExportSettings | undefined;
}

/** Defines how we redact data. */
export enum SecuritySettings_RedactionStrategy {
  /** REDACTION_STRATEGY_UNSPECIFIED - Do not redact. */
  REDACTION_STRATEGY_UNSPECIFIED = 0,
  /** REDACT_WITH_SERVICE - Call redaction service to clean up the data to be persisted. */
  REDACT_WITH_SERVICE = 1,
  UNRECOGNIZED = -1,
}

export function securitySettings_RedactionStrategyFromJSON(object: any): SecuritySettings_RedactionStrategy {
  switch (object) {
    case 0:
    case "REDACTION_STRATEGY_UNSPECIFIED":
      return SecuritySettings_RedactionStrategy.REDACTION_STRATEGY_UNSPECIFIED;
    case 1:
    case "REDACT_WITH_SERVICE":
      return SecuritySettings_RedactionStrategy.REDACT_WITH_SERVICE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SecuritySettings_RedactionStrategy.UNRECOGNIZED;
  }
}

export function securitySettings_RedactionStrategyToJSON(object: SecuritySettings_RedactionStrategy): string {
  switch (object) {
    case SecuritySettings_RedactionStrategy.REDACTION_STRATEGY_UNSPECIFIED:
      return "REDACTION_STRATEGY_UNSPECIFIED";
    case SecuritySettings_RedactionStrategy.REDACT_WITH_SERVICE:
      return "REDACT_WITH_SERVICE";
    case SecuritySettings_RedactionStrategy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Defines what types of data to redact. */
export enum SecuritySettings_RedactionScope {
  /** REDACTION_SCOPE_UNSPECIFIED - Don't redact any kind of data. */
  REDACTION_SCOPE_UNSPECIFIED = 0,
  /**
   * REDACT_DISK_STORAGE - On data to be written to disk or similar devices that are capable of
   * holding data even if power is disconnected. This includes data that are
   * temporarily saved on disk.
   */
  REDACT_DISK_STORAGE = 2,
  UNRECOGNIZED = -1,
}

export function securitySettings_RedactionScopeFromJSON(object: any): SecuritySettings_RedactionScope {
  switch (object) {
    case 0:
    case "REDACTION_SCOPE_UNSPECIFIED":
      return SecuritySettings_RedactionScope.REDACTION_SCOPE_UNSPECIFIED;
    case 2:
    case "REDACT_DISK_STORAGE":
      return SecuritySettings_RedactionScope.REDACT_DISK_STORAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SecuritySettings_RedactionScope.UNRECOGNIZED;
  }
}

export function securitySettings_RedactionScopeToJSON(object: SecuritySettings_RedactionScope): string {
  switch (object) {
    case SecuritySettings_RedactionScope.REDACTION_SCOPE_UNSPECIFIED:
      return "REDACTION_SCOPE_UNSPECIFIED";
    case SecuritySettings_RedactionScope.REDACT_DISK_STORAGE:
      return "REDACT_DISK_STORAGE";
    case SecuritySettings_RedactionScope.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Defines how long we retain persisted data that contains sensitive info. */
export enum SecuritySettings_RetentionStrategy {
  /** RETENTION_STRATEGY_UNSPECIFIED - Retains the persisted data with Dialogflow's internal default 365d TTLs. */
  RETENTION_STRATEGY_UNSPECIFIED = 0,
  /**
   * REMOVE_AFTER_CONVERSATION - Removes data when the conversation ends. If there is no
   * [Conversation][google.cloud.dialogflow.cx.v3beta1.Conversation]
   * explicitly established, a default conversation ends when the
   * corresponding Dialogflow session ends.
   */
  REMOVE_AFTER_CONVERSATION = 1,
  UNRECOGNIZED = -1,
}

export function securitySettings_RetentionStrategyFromJSON(object: any): SecuritySettings_RetentionStrategy {
  switch (object) {
    case 0:
    case "RETENTION_STRATEGY_UNSPECIFIED":
      return SecuritySettings_RetentionStrategy.RETENTION_STRATEGY_UNSPECIFIED;
    case 1:
    case "REMOVE_AFTER_CONVERSATION":
      return SecuritySettings_RetentionStrategy.REMOVE_AFTER_CONVERSATION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SecuritySettings_RetentionStrategy.UNRECOGNIZED;
  }
}

export function securitySettings_RetentionStrategyToJSON(object: SecuritySettings_RetentionStrategy): string {
  switch (object) {
    case SecuritySettings_RetentionStrategy.RETENTION_STRATEGY_UNSPECIFIED:
      return "RETENTION_STRATEGY_UNSPECIFIED";
    case SecuritySettings_RetentionStrategy.REMOVE_AFTER_CONVERSATION:
      return "REMOVE_AFTER_CONVERSATION";
    case SecuritySettings_RetentionStrategy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Type of data we purge after retention settings triggers purge. */
export enum SecuritySettings_PurgeDataType {
  /** PURGE_DATA_TYPE_UNSPECIFIED - Unspecified. Do not use. */
  PURGE_DATA_TYPE_UNSPECIFIED = 0,
  /**
   * DIALOGFLOW_HISTORY - Dialogflow history. This does not include Cloud logging, which is
   * owned by the user - not Dialogflow.
   */
  DIALOGFLOW_HISTORY = 1,
  UNRECOGNIZED = -1,
}

export function securitySettings_PurgeDataTypeFromJSON(object: any): SecuritySettings_PurgeDataType {
  switch (object) {
    case 0:
    case "PURGE_DATA_TYPE_UNSPECIFIED":
      return SecuritySettings_PurgeDataType.PURGE_DATA_TYPE_UNSPECIFIED;
    case 1:
    case "DIALOGFLOW_HISTORY":
      return SecuritySettings_PurgeDataType.DIALOGFLOW_HISTORY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SecuritySettings_PurgeDataType.UNRECOGNIZED;
  }
}

export function securitySettings_PurgeDataTypeToJSON(object: SecuritySettings_PurgeDataType): string {
  switch (object) {
    case SecuritySettings_PurgeDataType.PURGE_DATA_TYPE_UNSPECIFIED:
      return "PURGE_DATA_TYPE_UNSPECIFIED";
    case SecuritySettings_PurgeDataType.DIALOGFLOW_HISTORY:
      return "DIALOGFLOW_HISTORY";
    case SecuritySettings_PurgeDataType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Settings for exporting audio. */
export interface SecuritySettings_AudioExportSettings {
  /**
   * Cloud Storage bucket to export audio record to.
   * Setting this field would grant the Storage Object Creator role to
   * the Dialogflow Service Agent.
   * API caller that tries to modify this field should have the permission of
   * storage.buckets.setIamPolicy.
   */
  gcsBucket: string;
  /** Filename pattern for exported audio. */
  audioExportPattern: string;
  /**
   * Enable audio redaction if it is true.
   * Note that this only redacts end-user audio data;
   * Synthesised audio from the virtual agent is not redacted.
   */
  enableAudioRedaction: boolean;
  /**
   * File format for exported audio file. Currently only in telephony
   * recordings.
   */
  audioFormat: SecuritySettings_AudioExportSettings_AudioFormat;
  /**
   * Whether to store TTS audio. By default, TTS audio from the virtual agent
   * is not exported.
   */
  storeTtsAudio: boolean;
}

/**
 * File format for exported audio file. Currently only in telephony
 * recordings.
 */
export enum SecuritySettings_AudioExportSettings_AudioFormat {
  /** AUDIO_FORMAT_UNSPECIFIED - Unspecified. Do not use. */
  AUDIO_FORMAT_UNSPECIFIED = 0,
  /** MULAW - G.711 mu-law PCM with 8kHz sample rate. */
  MULAW = 1,
  /** MP3 - MP3 file format. */
  MP3 = 2,
  /** OGG - OGG Vorbis. */
  OGG = 3,
  UNRECOGNIZED = -1,
}

export function securitySettings_AudioExportSettings_AudioFormatFromJSON(
  object: any,
): SecuritySettings_AudioExportSettings_AudioFormat {
  switch (object) {
    case 0:
    case "AUDIO_FORMAT_UNSPECIFIED":
      return SecuritySettings_AudioExportSettings_AudioFormat.AUDIO_FORMAT_UNSPECIFIED;
    case 1:
    case "MULAW":
      return SecuritySettings_AudioExportSettings_AudioFormat.MULAW;
    case 2:
    case "MP3":
      return SecuritySettings_AudioExportSettings_AudioFormat.MP3;
    case 3:
    case "OGG":
      return SecuritySettings_AudioExportSettings_AudioFormat.OGG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SecuritySettings_AudioExportSettings_AudioFormat.UNRECOGNIZED;
  }
}

export function securitySettings_AudioExportSettings_AudioFormatToJSON(
  object: SecuritySettings_AudioExportSettings_AudioFormat,
): string {
  switch (object) {
    case SecuritySettings_AudioExportSettings_AudioFormat.AUDIO_FORMAT_UNSPECIFIED:
      return "AUDIO_FORMAT_UNSPECIFIED";
    case SecuritySettings_AudioExportSettings_AudioFormat.MULAW:
      return "MULAW";
    case SecuritySettings_AudioExportSettings_AudioFormat.MP3:
      return "MP3";
    case SecuritySettings_AudioExportSettings_AudioFormat.OGG:
      return "OGG";
    case SecuritySettings_AudioExportSettings_AudioFormat.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Settings for exporting conversations to
 * [Insights](https://cloud.google.com/contact-center/insights/docs).
 */
export interface SecuritySettings_InsightsExportSettings {
  /**
   * If enabled, we will automatically exports
   * conversations to Insights and Insights runs its analyzers.
   */
  enableInsightsExport: boolean;
}

function createBaseGetSecuritySettingsRequest(): GetSecuritySettingsRequest {
  return { name: "" };
}

export const GetSecuritySettingsRequest: MessageFns<GetSecuritySettingsRequest> = {
  encode(message: GetSecuritySettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSecuritySettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSecuritySettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSecuritySettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSecuritySettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSecuritySettingsRequest>): GetSecuritySettingsRequest {
    return GetSecuritySettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSecuritySettingsRequest>): GetSecuritySettingsRequest {
    const message = createBaseGetSecuritySettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateSecuritySettingsRequest(): UpdateSecuritySettingsRequest {
  return { securitySettings: undefined, updateMask: undefined };
}

export const UpdateSecuritySettingsRequest: MessageFns<UpdateSecuritySettingsRequest> = {
  encode(message: UpdateSecuritySettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.securitySettings !== undefined) {
      SecuritySettings.encode(message.securitySettings, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSecuritySettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSecuritySettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.securitySettings = SecuritySettings.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSecuritySettingsRequest {
    return {
      securitySettings: isSet(object.securitySettings) ? SecuritySettings.fromJSON(object.securitySettings) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSecuritySettingsRequest): unknown {
    const obj: any = {};
    if (message.securitySettings !== undefined) {
      obj.securitySettings = SecuritySettings.toJSON(message.securitySettings);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSecuritySettingsRequest>): UpdateSecuritySettingsRequest {
    return UpdateSecuritySettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSecuritySettingsRequest>): UpdateSecuritySettingsRequest {
    const message = createBaseUpdateSecuritySettingsRequest();
    message.securitySettings = (object.securitySettings !== undefined && object.securitySettings !== null)
      ? SecuritySettings.fromPartial(object.securitySettings)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListSecuritySettingsRequest(): ListSecuritySettingsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListSecuritySettingsRequest: MessageFns<ListSecuritySettingsRequest> = {
  encode(message: ListSecuritySettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSecuritySettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSecuritySettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSecuritySettingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListSecuritySettingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSecuritySettingsRequest>): ListSecuritySettingsRequest {
    return ListSecuritySettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSecuritySettingsRequest>): ListSecuritySettingsRequest {
    const message = createBaseListSecuritySettingsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListSecuritySettingsResponse(): ListSecuritySettingsResponse {
  return { securitySettings: [], nextPageToken: "" };
}

export const ListSecuritySettingsResponse: MessageFns<ListSecuritySettingsResponse> = {
  encode(message: ListSecuritySettingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.securitySettings) {
      SecuritySettings.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSecuritySettingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSecuritySettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.securitySettings.push(SecuritySettings.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSecuritySettingsResponse {
    return {
      securitySettings: globalThis.Array.isArray(object?.securitySettings)
        ? object.securitySettings.map((e: any) => SecuritySettings.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSecuritySettingsResponse): unknown {
    const obj: any = {};
    if (message.securitySettings?.length) {
      obj.securitySettings = message.securitySettings.map((e) => SecuritySettings.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSecuritySettingsResponse>): ListSecuritySettingsResponse {
    return ListSecuritySettingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSecuritySettingsResponse>): ListSecuritySettingsResponse {
    const message = createBaseListSecuritySettingsResponse();
    message.securitySettings = object.securitySettings?.map((e) => SecuritySettings.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateSecuritySettingsRequest(): CreateSecuritySettingsRequest {
  return { parent: "", securitySettings: undefined };
}

export const CreateSecuritySettingsRequest: MessageFns<CreateSecuritySettingsRequest> = {
  encode(message: CreateSecuritySettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.securitySettings !== undefined) {
      SecuritySettings.encode(message.securitySettings, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSecuritySettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSecuritySettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.securitySettings = SecuritySettings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSecuritySettingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      securitySettings: isSet(object.securitySettings) ? SecuritySettings.fromJSON(object.securitySettings) : undefined,
    };
  },

  toJSON(message: CreateSecuritySettingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.securitySettings !== undefined) {
      obj.securitySettings = SecuritySettings.toJSON(message.securitySettings);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSecuritySettingsRequest>): CreateSecuritySettingsRequest {
    return CreateSecuritySettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSecuritySettingsRequest>): CreateSecuritySettingsRequest {
    const message = createBaseCreateSecuritySettingsRequest();
    message.parent = object.parent ?? "";
    message.securitySettings = (object.securitySettings !== undefined && object.securitySettings !== null)
      ? SecuritySettings.fromPartial(object.securitySettings)
      : undefined;
    return message;
  },
};

function createBaseDeleteSecuritySettingsRequest(): DeleteSecuritySettingsRequest {
  return { name: "" };
}

export const DeleteSecuritySettingsRequest: MessageFns<DeleteSecuritySettingsRequest> = {
  encode(message: DeleteSecuritySettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSecuritySettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSecuritySettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSecuritySettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteSecuritySettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSecuritySettingsRequest>): DeleteSecuritySettingsRequest {
    return DeleteSecuritySettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSecuritySettingsRequest>): DeleteSecuritySettingsRequest {
    const message = createBaseDeleteSecuritySettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSecuritySettings(): SecuritySettings {
  return {
    name: "",
    displayName: "",
    redactionStrategy: 0,
    redactionScope: 0,
    inspectTemplate: "",
    deidentifyTemplate: "",
    retentionWindowDays: undefined,
    retentionStrategy: undefined,
    purgeDataTypes: [],
    audioExportSettings: undefined,
    insightsExportSettings: undefined,
  };
}

export const SecuritySettings: MessageFns<SecuritySettings> = {
  encode(message: SecuritySettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.redactionStrategy !== 0) {
      writer.uint32(24).int32(message.redactionStrategy);
    }
    if (message.redactionScope !== 0) {
      writer.uint32(32).int32(message.redactionScope);
    }
    if (message.inspectTemplate !== "") {
      writer.uint32(74).string(message.inspectTemplate);
    }
    if (message.deidentifyTemplate !== "") {
      writer.uint32(138).string(message.deidentifyTemplate);
    }
    if (message.retentionWindowDays !== undefined) {
      writer.uint32(48).int32(message.retentionWindowDays);
    }
    if (message.retentionStrategy !== undefined) {
      writer.uint32(56).int32(message.retentionStrategy);
    }
    writer.uint32(66).fork();
    for (const v of message.purgeDataTypes) {
      writer.int32(v);
    }
    writer.join();
    if (message.audioExportSettings !== undefined) {
      SecuritySettings_AudioExportSettings.encode(message.audioExportSettings, writer.uint32(98).fork()).join();
    }
    if (message.insightsExportSettings !== undefined) {
      SecuritySettings_InsightsExportSettings.encode(message.insightsExportSettings, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecuritySettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecuritySettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.redactionStrategy = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.redactionScope = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.inspectTemplate = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.deidentifyTemplate = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.retentionWindowDays = reader.int32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.retentionStrategy = reader.int32() as any;
          continue;
        case 8:
          if (tag === 64) {
            message.purgeDataTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.purgeDataTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.audioExportSettings = SecuritySettings_AudioExportSettings.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.insightsExportSettings = SecuritySettings_InsightsExportSettings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecuritySettings {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      redactionStrategy: isSet(object.redactionStrategy)
        ? securitySettings_RedactionStrategyFromJSON(object.redactionStrategy)
        : 0,
      redactionScope: isSet(object.redactionScope) ? securitySettings_RedactionScopeFromJSON(object.redactionScope) : 0,
      inspectTemplate: isSet(object.inspectTemplate) ? globalThis.String(object.inspectTemplate) : "",
      deidentifyTemplate: isSet(object.deidentifyTemplate) ? globalThis.String(object.deidentifyTemplate) : "",
      retentionWindowDays: isSet(object.retentionWindowDays)
        ? globalThis.Number(object.retentionWindowDays)
        : undefined,
      retentionStrategy: isSet(object.retentionStrategy)
        ? securitySettings_RetentionStrategyFromJSON(object.retentionStrategy)
        : undefined,
      purgeDataTypes: globalThis.Array.isArray(object?.purgeDataTypes)
        ? object.purgeDataTypes.map((e: any) => securitySettings_PurgeDataTypeFromJSON(e))
        : [],
      audioExportSettings: isSet(object.audioExportSettings)
        ? SecuritySettings_AudioExportSettings.fromJSON(object.audioExportSettings)
        : undefined,
      insightsExportSettings: isSet(object.insightsExportSettings)
        ? SecuritySettings_InsightsExportSettings.fromJSON(object.insightsExportSettings)
        : undefined,
    };
  },

  toJSON(message: SecuritySettings): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.redactionStrategy !== 0) {
      obj.redactionStrategy = securitySettings_RedactionStrategyToJSON(message.redactionStrategy);
    }
    if (message.redactionScope !== 0) {
      obj.redactionScope = securitySettings_RedactionScopeToJSON(message.redactionScope);
    }
    if (message.inspectTemplate !== "") {
      obj.inspectTemplate = message.inspectTemplate;
    }
    if (message.deidentifyTemplate !== "") {
      obj.deidentifyTemplate = message.deidentifyTemplate;
    }
    if (message.retentionWindowDays !== undefined) {
      obj.retentionWindowDays = Math.round(message.retentionWindowDays);
    }
    if (message.retentionStrategy !== undefined) {
      obj.retentionStrategy = securitySettings_RetentionStrategyToJSON(message.retentionStrategy);
    }
    if (message.purgeDataTypes?.length) {
      obj.purgeDataTypes = message.purgeDataTypes.map((e) => securitySettings_PurgeDataTypeToJSON(e));
    }
    if (message.audioExportSettings !== undefined) {
      obj.audioExportSettings = SecuritySettings_AudioExportSettings.toJSON(message.audioExportSettings);
    }
    if (message.insightsExportSettings !== undefined) {
      obj.insightsExportSettings = SecuritySettings_InsightsExportSettings.toJSON(message.insightsExportSettings);
    }
    return obj;
  },

  create(base?: DeepPartial<SecuritySettings>): SecuritySettings {
    return SecuritySettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecuritySettings>): SecuritySettings {
    const message = createBaseSecuritySettings();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.redactionStrategy = object.redactionStrategy ?? 0;
    message.redactionScope = object.redactionScope ?? 0;
    message.inspectTemplate = object.inspectTemplate ?? "";
    message.deidentifyTemplate = object.deidentifyTemplate ?? "";
    message.retentionWindowDays = object.retentionWindowDays ?? undefined;
    message.retentionStrategy = object.retentionStrategy ?? undefined;
    message.purgeDataTypes = object.purgeDataTypes?.map((e) => e) || [];
    message.audioExportSettings = (object.audioExportSettings !== undefined && object.audioExportSettings !== null)
      ? SecuritySettings_AudioExportSettings.fromPartial(object.audioExportSettings)
      : undefined;
    message.insightsExportSettings =
      (object.insightsExportSettings !== undefined && object.insightsExportSettings !== null)
        ? SecuritySettings_InsightsExportSettings.fromPartial(object.insightsExportSettings)
        : undefined;
    return message;
  },
};

function createBaseSecuritySettings_AudioExportSettings(): SecuritySettings_AudioExportSettings {
  return { gcsBucket: "", audioExportPattern: "", enableAudioRedaction: false, audioFormat: 0, storeTtsAudio: false };
}

export const SecuritySettings_AudioExportSettings: MessageFns<SecuritySettings_AudioExportSettings> = {
  encode(message: SecuritySettings_AudioExportSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsBucket !== "") {
      writer.uint32(10).string(message.gcsBucket);
    }
    if (message.audioExportPattern !== "") {
      writer.uint32(18).string(message.audioExportPattern);
    }
    if (message.enableAudioRedaction !== false) {
      writer.uint32(24).bool(message.enableAudioRedaction);
    }
    if (message.audioFormat !== 0) {
      writer.uint32(32).int32(message.audioFormat);
    }
    if (message.storeTtsAudio !== false) {
      writer.uint32(48).bool(message.storeTtsAudio);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecuritySettings_AudioExportSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecuritySettings_AudioExportSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsBucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.audioExportPattern = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.enableAudioRedaction = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.audioFormat = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.storeTtsAudio = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecuritySettings_AudioExportSettings {
    return {
      gcsBucket: isSet(object.gcsBucket) ? globalThis.String(object.gcsBucket) : "",
      audioExportPattern: isSet(object.audioExportPattern) ? globalThis.String(object.audioExportPattern) : "",
      enableAudioRedaction: isSet(object.enableAudioRedaction)
        ? globalThis.Boolean(object.enableAudioRedaction)
        : false,
      audioFormat: isSet(object.audioFormat)
        ? securitySettings_AudioExportSettings_AudioFormatFromJSON(object.audioFormat)
        : 0,
      storeTtsAudio: isSet(object.storeTtsAudio) ? globalThis.Boolean(object.storeTtsAudio) : false,
    };
  },

  toJSON(message: SecuritySettings_AudioExportSettings): unknown {
    const obj: any = {};
    if (message.gcsBucket !== "") {
      obj.gcsBucket = message.gcsBucket;
    }
    if (message.audioExportPattern !== "") {
      obj.audioExportPattern = message.audioExportPattern;
    }
    if (message.enableAudioRedaction !== false) {
      obj.enableAudioRedaction = message.enableAudioRedaction;
    }
    if (message.audioFormat !== 0) {
      obj.audioFormat = securitySettings_AudioExportSettings_AudioFormatToJSON(message.audioFormat);
    }
    if (message.storeTtsAudio !== false) {
      obj.storeTtsAudio = message.storeTtsAudio;
    }
    return obj;
  },

  create(base?: DeepPartial<SecuritySettings_AudioExportSettings>): SecuritySettings_AudioExportSettings {
    return SecuritySettings_AudioExportSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecuritySettings_AudioExportSettings>): SecuritySettings_AudioExportSettings {
    const message = createBaseSecuritySettings_AudioExportSettings();
    message.gcsBucket = object.gcsBucket ?? "";
    message.audioExportPattern = object.audioExportPattern ?? "";
    message.enableAudioRedaction = object.enableAudioRedaction ?? false;
    message.audioFormat = object.audioFormat ?? 0;
    message.storeTtsAudio = object.storeTtsAudio ?? false;
    return message;
  },
};

function createBaseSecuritySettings_InsightsExportSettings(): SecuritySettings_InsightsExportSettings {
  return { enableInsightsExport: false };
}

export const SecuritySettings_InsightsExportSettings: MessageFns<SecuritySettings_InsightsExportSettings> = {
  encode(message: SecuritySettings_InsightsExportSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enableInsightsExport !== false) {
      writer.uint32(8).bool(message.enableInsightsExport);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecuritySettings_InsightsExportSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecuritySettings_InsightsExportSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enableInsightsExport = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecuritySettings_InsightsExportSettings {
    return {
      enableInsightsExport: isSet(object.enableInsightsExport)
        ? globalThis.Boolean(object.enableInsightsExport)
        : false,
    };
  },

  toJSON(message: SecuritySettings_InsightsExportSettings): unknown {
    const obj: any = {};
    if (message.enableInsightsExport !== false) {
      obj.enableInsightsExport = message.enableInsightsExport;
    }
    return obj;
  },

  create(base?: DeepPartial<SecuritySettings_InsightsExportSettings>): SecuritySettings_InsightsExportSettings {
    return SecuritySettings_InsightsExportSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecuritySettings_InsightsExportSettings>): SecuritySettings_InsightsExportSettings {
    const message = createBaseSecuritySettings_InsightsExportSettings();
    message.enableInsightsExport = object.enableInsightsExport ?? false;
    return message;
  },
};

/** Service for managing security settings for Dialogflow. */
export type SecuritySettingsServiceDefinition = typeof SecuritySettingsServiceDefinition;
export const SecuritySettingsServiceDefinition = {
  name: "SecuritySettingsService",
  fullName: "google.cloud.dialogflow.cx.v3beta1.SecuritySettingsService",
  methods: {
    /** Create security settings in the specified location. */
    createSecuritySettings: {
      name: "CreateSecuritySettings",
      requestType: CreateSecuritySettingsRequest,
      requestStream: false,
      responseType: SecuritySettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              78,
              58,
              17,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              57,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves the specified
     * [SecuritySettings][google.cloud.dialogflow.cx.v3beta1.SecuritySettings].
     * The returned settings may be stale by up to 1 minute.
     */
    getSecuritySettings: {
      name: "GetSecuritySettings",
      requestType: GetSecuritySettingsRequest,
      requestStream: false,
      responseType: SecuritySettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified
     * [SecuritySettings][google.cloud.dialogflow.cx.v3beta1.SecuritySettings].
     */
    updateSecuritySettings: {
      name: "UpdateSecuritySettings",
      requestType: UpdateSecuritySettingsRequest,
      requestStream: false,
      responseType: SecuritySettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              29,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              96,
              58,
              17,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              75,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Returns the list of all security settings in the specified location. */
    listSecuritySettings: {
      name: "ListSecuritySettings",
      requestType: ListSecuritySettingsRequest,
      requestStream: false,
      responseType: ListSecuritySettingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes the specified
     * [SecuritySettings][google.cloud.dialogflow.cx.v3beta1.SecuritySettings].
     */
    deleteSecuritySettings: {
      name: "DeleteSecuritySettings",
      requestType: DeleteSecuritySettingsRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              42,
              57,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SecuritySettingsServiceImplementation<CallContextExt = {}> {
  /** Create security settings in the specified location. */
  createSecuritySettings(
    request: CreateSecuritySettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SecuritySettings>>;
  /**
   * Retrieves the specified
   * [SecuritySettings][google.cloud.dialogflow.cx.v3beta1.SecuritySettings].
   * The returned settings may be stale by up to 1 minute.
   */
  getSecuritySettings(
    request: GetSecuritySettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SecuritySettings>>;
  /**
   * Updates the specified
   * [SecuritySettings][google.cloud.dialogflow.cx.v3beta1.SecuritySettings].
   */
  updateSecuritySettings(
    request: UpdateSecuritySettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SecuritySettings>>;
  /** Returns the list of all security settings in the specified location. */
  listSecuritySettings(
    request: ListSecuritySettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSecuritySettingsResponse>>;
  /**
   * Deletes the specified
   * [SecuritySettings][google.cloud.dialogflow.cx.v3beta1.SecuritySettings].
   */
  deleteSecuritySettings(
    request: DeleteSecuritySettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface SecuritySettingsServiceClient<CallOptionsExt = {}> {
  /** Create security settings in the specified location. */
  createSecuritySettings(
    request: DeepPartial<CreateSecuritySettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SecuritySettings>;
  /**
   * Retrieves the specified
   * [SecuritySettings][google.cloud.dialogflow.cx.v3beta1.SecuritySettings].
   * The returned settings may be stale by up to 1 minute.
   */
  getSecuritySettings(
    request: DeepPartial<GetSecuritySettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SecuritySettings>;
  /**
   * Updates the specified
   * [SecuritySettings][google.cloud.dialogflow.cx.v3beta1.SecuritySettings].
   */
  updateSecuritySettings(
    request: DeepPartial<UpdateSecuritySettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SecuritySettings>;
  /** Returns the list of all security settings in the specified location. */
  listSecuritySettings(
    request: DeepPartial<ListSecuritySettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSecuritySettingsResponse>;
  /**
   * Deletes the specified
   * [SecuritySettings][google.cloud.dialogflow.cx.v3beta1.SecuritySettings].
   */
  deleteSecuritySettings(
    request: DeepPartial<DeleteSecuritySettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
