// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3beta1/parameter_definition.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.dialogflow.cx.v3beta1";

/**
 * Defines the properties of a parameter.
 * Used to define parameters used in the agent and the
 * input / output parameters for each fulfillment.
 * (-- Next Id: 4 --)
 * (-- api-linter: core::0123::resource-annotation=disabled
 *     aip.dev/not-precedent: ParameterDefinition is not an exposed resource.
 *     --)
 */
export interface ParameterDefinition {
  /** Name of parameter. */
  name: string;
  /** Type of parameter. */
  type: ParameterDefinition_ParameterType;
  /** Human-readable description of the parameter. Limited to 300 characters. */
  description: string;
}

/**
 * Parameter types are used for validation.
 * These types are consistent with [google.protobuf.Value][].
 */
export enum ParameterDefinition_ParameterType {
  /** PARAMETER_TYPE_UNSPECIFIED - Not specified. No validation will be performed. */
  PARAMETER_TYPE_UNSPECIFIED = 0,
  /** STRING - Represents any string value. */
  STRING = 1,
  /** NUMBER - Represents any number value. */
  NUMBER = 2,
  /** BOOLEAN - Represents a boolean value. */
  BOOLEAN = 3,
  /** NULL - Represents a null value. */
  NULL = 4,
  /** OBJECT - Represents any object value. */
  OBJECT = 5,
  /** LIST - Represents a repeated value. */
  LIST = 6,
  UNRECOGNIZED = -1,
}

export function parameterDefinition_ParameterTypeFromJSON(object: any): ParameterDefinition_ParameterType {
  switch (object) {
    case 0:
    case "PARAMETER_TYPE_UNSPECIFIED":
      return ParameterDefinition_ParameterType.PARAMETER_TYPE_UNSPECIFIED;
    case 1:
    case "STRING":
      return ParameterDefinition_ParameterType.STRING;
    case 2:
    case "NUMBER":
      return ParameterDefinition_ParameterType.NUMBER;
    case 3:
    case "BOOLEAN":
      return ParameterDefinition_ParameterType.BOOLEAN;
    case 4:
    case "NULL":
      return ParameterDefinition_ParameterType.NULL;
    case 5:
    case "OBJECT":
      return ParameterDefinition_ParameterType.OBJECT;
    case 6:
    case "LIST":
      return ParameterDefinition_ParameterType.LIST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ParameterDefinition_ParameterType.UNRECOGNIZED;
  }
}

export function parameterDefinition_ParameterTypeToJSON(object: ParameterDefinition_ParameterType): string {
  switch (object) {
    case ParameterDefinition_ParameterType.PARAMETER_TYPE_UNSPECIFIED:
      return "PARAMETER_TYPE_UNSPECIFIED";
    case ParameterDefinition_ParameterType.STRING:
      return "STRING";
    case ParameterDefinition_ParameterType.NUMBER:
      return "NUMBER";
    case ParameterDefinition_ParameterType.BOOLEAN:
      return "BOOLEAN";
    case ParameterDefinition_ParameterType.NULL:
      return "NULL";
    case ParameterDefinition_ParameterType.OBJECT:
      return "OBJECT";
    case ParameterDefinition_ParameterType.LIST:
      return "LIST";
    case ParameterDefinition_ParameterType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseParameterDefinition(): ParameterDefinition {
  return { name: "", type: 0, description: "" };
}

export const ParameterDefinition: MessageFns<ParameterDefinition> = {
  encode(message: ParameterDefinition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParameterDefinition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParameterDefinition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParameterDefinition {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? parameterDefinition_ParameterTypeFromJSON(object.type) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: ParameterDefinition): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = parameterDefinition_ParameterTypeToJSON(message.type);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<ParameterDefinition>): ParameterDefinition {
    return ParameterDefinition.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ParameterDefinition>): ParameterDefinition {
    const message = createBaseParameterDefinition();
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    message.description = object.description ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
