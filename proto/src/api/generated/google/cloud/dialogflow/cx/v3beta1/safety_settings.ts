// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3beta1/safety_settings.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.dialogflow.cx.v3beta1";

/** Settings for Generative Safety. */
export interface SafetySettings {
  /** Banned phrases for generated text. */
  bannedPhrases: SafetySettings_Phrase[];
}

/** Text input which can be used for prompt or banned phrases. */
export interface SafetySettings_Phrase {
  /** Required. Text input which can be used for prompt or banned phrases. */
  text: string;
  /** Required. Language code of the phrase. */
  languageCode: string;
}

function createBaseSafetySettings(): SafetySettings {
  return { bannedPhrases: [] };
}

export const SafetySettings: MessageFns<SafetySettings> = {
  encode(message: SafetySettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.bannedPhrases) {
      SafetySettings_Phrase.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SafetySettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSafetySettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bannedPhrases.push(SafetySettings_Phrase.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SafetySettings {
    return {
      bannedPhrases: globalThis.Array.isArray(object?.bannedPhrases)
        ? object.bannedPhrases.map((e: any) => SafetySettings_Phrase.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SafetySettings): unknown {
    const obj: any = {};
    if (message.bannedPhrases?.length) {
      obj.bannedPhrases = message.bannedPhrases.map((e) => SafetySettings_Phrase.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SafetySettings>): SafetySettings {
    return SafetySettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SafetySettings>): SafetySettings {
    const message = createBaseSafetySettings();
    message.bannedPhrases = object.bannedPhrases?.map((e) => SafetySettings_Phrase.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSafetySettings_Phrase(): SafetySettings_Phrase {
  return { text: "", languageCode: "" };
}

export const SafetySettings_Phrase: MessageFns<SafetySettings_Phrase> = {
  encode(message: SafetySettings_Phrase, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SafetySettings_Phrase {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSafetySettings_Phrase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SafetySettings_Phrase {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: SafetySettings_Phrase): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<SafetySettings_Phrase>): SafetySettings_Phrase {
    return SafetySettings_Phrase.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SafetySettings_Phrase>): SafetySettings_Phrase {
    const message = createBaseSafetySettings_Phrase();
    message.text = object.text ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
