// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3/deployment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.dialogflow.cx.v3";

/**
 * Represents a deployment in an environment. A deployment happens when a flow
 * version configured to be active in the environment. You can configure running
 * pre-deployment steps, e.g. running validation test cases, experiment
 * auto-rollout, etc.
 */
export interface Deployment {
  /**
   * The name of the deployment.
   * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>/deployments/<Deployment ID>.
   */
  name: string;
  /**
   * The name of the flow version for this deployment.
   * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>/versions/<Verion ID>.
   */
  flowVersion: string;
  /** The current state of the deployment. */
  state: Deployment_State;
  /** Result of the deployment. */
  result:
    | Deployment_Result
    | undefined;
  /** Start time of this deployment. */
  startTime:
    | Date
    | undefined;
  /** End time of this deployment. */
  endTime: Date | undefined;
}

/** The state of the deployment. */
export enum Deployment_State {
  /** STATE_UNSPECIFIED - State unspecified. */
  STATE_UNSPECIFIED = 0,
  /** RUNNING - The deployment is running. */
  RUNNING = 1,
  /** SUCCEEDED - The deployment succeeded. */
  SUCCEEDED = 2,
  /** FAILED - The deployment failed. */
  FAILED = 3,
  UNRECOGNIZED = -1,
}

export function deployment_StateFromJSON(object: any): Deployment_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Deployment_State.STATE_UNSPECIFIED;
    case 1:
    case "RUNNING":
      return Deployment_State.RUNNING;
    case 2:
    case "SUCCEEDED":
      return Deployment_State.SUCCEEDED;
    case 3:
    case "FAILED":
      return Deployment_State.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Deployment_State.UNRECOGNIZED;
  }
}

export function deployment_StateToJSON(object: Deployment_State): string {
  switch (object) {
    case Deployment_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Deployment_State.RUNNING:
      return "RUNNING";
    case Deployment_State.SUCCEEDED:
      return "SUCCEEDED";
    case Deployment_State.FAILED:
      return "FAILED";
    case Deployment_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Result of the deployment. */
export interface Deployment_Result {
  /**
   * Results of test cases running before the deployment.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/testCases/<TestCase ID>/results/<TestCaseResult ID>`.
   */
  deploymentTestResults: string[];
  /**
   * The name of the experiment triggered by this deployment.
   * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>/experiments/<Experiment ID>.
   */
  experiment: string;
}

/**
 * The request message for
 * [Deployments.ListDeployments][google.cloud.dialogflow.cx.v3.Deployments.ListDeployments].
 */
export interface ListDeploymentsRequest {
  /**
   * Required. The [Environment][google.cloud.dialogflow.cx.v3.Environment] to
   * list all environments for. Format: `projects/<Project
   * ID>/locations/<Location ID>/agents/<Agent ID>/environments/<Environment
   * ID>`.
   */
  parent: string;
  /**
   * The maximum number of items to return in a single page. By default 20 and
   * at most 100.
   */
  pageSize: number;
  /** The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [Deployments.ListDeployments][google.cloud.dialogflow.cx.v3.Deployments.ListDeployments].
 */
export interface ListDeploymentsResponse {
  /**
   * The list of deployments. There will be a maximum number of items
   * returned based on the page_size field in the request. The list may in some
   * cases be empty or contain fewer entries than page_size even if this isn't
   * the last page.
   */
  deployments: Deployment[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [Deployments.GetDeployment][google.cloud.dialogflow.cx.v3.Deployments.GetDeployment].
 */
export interface GetDeploymentRequest {
  /**
   * Required. The name of the
   * [Deployment][google.cloud.dialogflow.cx.v3.Deployment]. Format:
   * `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>/deployments/<Deployment ID>`.
   */
  name: string;
}

function createBaseDeployment(): Deployment {
  return { name: "", flowVersion: "", state: 0, result: undefined, startTime: undefined, endTime: undefined };
}

export const Deployment: MessageFns<Deployment> = {
  encode(message: Deployment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.flowVersion !== "") {
      writer.uint32(18).string(message.flowVersion);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.result !== undefined) {
      Deployment_Result.encode(message.result, writer.uint32(34).fork()).join();
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(42).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Deployment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.flowVersion = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.result = Deployment_Result.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Deployment {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      flowVersion: isSet(object.flowVersion) ? globalThis.String(object.flowVersion) : "",
      state: isSet(object.state) ? deployment_StateFromJSON(object.state) : 0,
      result: isSet(object.result) ? Deployment_Result.fromJSON(object.result) : undefined,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
    };
  },

  toJSON(message: Deployment): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.flowVersion !== "") {
      obj.flowVersion = message.flowVersion;
    }
    if (message.state !== 0) {
      obj.state = deployment_StateToJSON(message.state);
    }
    if (message.result !== undefined) {
      obj.result = Deployment_Result.toJSON(message.result);
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Deployment>): Deployment {
    return Deployment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Deployment>): Deployment {
    const message = createBaseDeployment();
    message.name = object.name ?? "";
    message.flowVersion = object.flowVersion ?? "";
    message.state = object.state ?? 0;
    message.result = (object.result !== undefined && object.result !== null)
      ? Deployment_Result.fromPartial(object.result)
      : undefined;
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    return message;
  },
};

function createBaseDeployment_Result(): Deployment_Result {
  return { deploymentTestResults: [], experiment: "" };
}

export const Deployment_Result: MessageFns<Deployment_Result> = {
  encode(message: Deployment_Result, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.deploymentTestResults) {
      writer.uint32(10).string(v!);
    }
    if (message.experiment !== "") {
      writer.uint32(18).string(message.experiment);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Deployment_Result {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployment_Result();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deploymentTestResults.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.experiment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Deployment_Result {
    return {
      deploymentTestResults: globalThis.Array.isArray(object?.deploymentTestResults)
        ? object.deploymentTestResults.map((e: any) => globalThis.String(e))
        : [],
      experiment: isSet(object.experiment) ? globalThis.String(object.experiment) : "",
    };
  },

  toJSON(message: Deployment_Result): unknown {
    const obj: any = {};
    if (message.deploymentTestResults?.length) {
      obj.deploymentTestResults = message.deploymentTestResults;
    }
    if (message.experiment !== "") {
      obj.experiment = message.experiment;
    }
    return obj;
  },

  create(base?: DeepPartial<Deployment_Result>): Deployment_Result {
    return Deployment_Result.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Deployment_Result>): Deployment_Result {
    const message = createBaseDeployment_Result();
    message.deploymentTestResults = object.deploymentTestResults?.map((e) => e) || [];
    message.experiment = object.experiment ?? "";
    return message;
  },
};

function createBaseListDeploymentsRequest(): ListDeploymentsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDeploymentsRequest: MessageFns<ListDeploymentsRequest> = {
  encode(message: ListDeploymentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeploymentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeploymentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDeploymentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDeploymentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDeploymentsRequest>): ListDeploymentsRequest {
    return ListDeploymentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDeploymentsRequest>): ListDeploymentsRequest {
    const message = createBaseListDeploymentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDeploymentsResponse(): ListDeploymentsResponse {
  return { deployments: [], nextPageToken: "" };
}

export const ListDeploymentsResponse: MessageFns<ListDeploymentsResponse> = {
  encode(message: ListDeploymentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.deployments) {
      Deployment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeploymentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeploymentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deployments.push(Deployment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDeploymentsResponse {
    return {
      deployments: globalThis.Array.isArray(object?.deployments)
        ? object.deployments.map((e: any) => Deployment.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDeploymentsResponse): unknown {
    const obj: any = {};
    if (message.deployments?.length) {
      obj.deployments = message.deployments.map((e) => Deployment.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDeploymentsResponse>): ListDeploymentsResponse {
    return ListDeploymentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDeploymentsResponse>): ListDeploymentsResponse {
    const message = createBaseListDeploymentsResponse();
    message.deployments = object.deployments?.map((e) => Deployment.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetDeploymentRequest(): GetDeploymentRequest {
  return { name: "" };
}

export const GetDeploymentRequest: MessageFns<GetDeploymentRequest> = {
  encode(message: GetDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDeploymentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDeploymentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDeploymentRequest>): GetDeploymentRequest {
    return GetDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDeploymentRequest>): GetDeploymentRequest {
    const message = createBaseGetDeploymentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** Service for managing [Deployments][google.cloud.dialogflow.cx.v3.Deployment]. */
export type DeploymentsDefinition = typeof DeploymentsDefinition;
export const DeploymentsDefinition = {
  name: "Deployments",
  fullName: "google.cloud.dialogflow.cx.v3.Deployments",
  methods: {
    /**
     * Returns the list of all deployments in the specified
     * [Environment][google.cloud.dialogflow.cx.v3.Environment].
     */
    listDeployments: {
      name: "ListDeployments",
      requestType: ListDeploymentsRequest,
      requestStream: false,
      responseType: ListDeploymentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves the specified
     * [Deployment][google.cloud.dialogflow.cx.v3.Deployment].
     */
    getDeployment: {
      name: "GetDeployment",
      requestType: GetDeploymentRequest,
      requestStream: false,
      responseType: Deployment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DeploymentsServiceImplementation<CallContextExt = {}> {
  /**
   * Returns the list of all deployments in the specified
   * [Environment][google.cloud.dialogflow.cx.v3.Environment].
   */
  listDeployments(
    request: ListDeploymentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDeploymentsResponse>>;
  /**
   * Retrieves the specified
   * [Deployment][google.cloud.dialogflow.cx.v3.Deployment].
   */
  getDeployment(request: GetDeploymentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Deployment>>;
}

export interface DeploymentsClient<CallOptionsExt = {}> {
  /**
   * Returns the list of all deployments in the specified
   * [Environment][google.cloud.dialogflow.cx.v3.Environment].
   */
  listDeployments(
    request: DeepPartial<ListDeploymentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDeploymentsResponse>;
  /**
   * Retrieves the specified
   * [Deployment][google.cloud.dialogflow.cx.v3.Deployment].
   */
  getDeployment(
    request: DeepPartial<GetDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Deployment>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
