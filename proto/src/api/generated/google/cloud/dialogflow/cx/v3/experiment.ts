// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3/experiment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Duration } from "../../../../protobuf/duration.js";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.dialogflow.cx.v3";

/** Represents an experiment in an environment. */
export interface Experiment {
  /**
   * The name of the experiment.
   * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>/experiments/<Experiment ID>..
   */
  name: string;
  /**
   * Required. The human-readable name of the experiment (unique in an
   * environment). Limit of 64 characters.
   */
  displayName: string;
  /** The human-readable description of the experiment. */
  description: string;
  /**
   * The current state of the experiment.
   * Transition triggered by Experiments.StartExperiment: DRAFT->RUNNING.
   * Transition triggered by Experiments.CancelExperiment: DRAFT->DONE or
   * RUNNING->DONE.
   */
  state: Experiment_State;
  /** The definition of the experiment. */
  definition:
    | Experiment_Definition
    | undefined;
  /**
   * The configuration for auto rollout. If set, there should be exactly two
   * variants in the experiment (control variant being the default version of
   * the flow), the traffic allocation for the non-control variant will
   * gradually increase to 100% when conditions are met, and eventually
   * replace the control variant to become the default version of the flow.
   */
  rolloutConfig:
    | RolloutConfig
    | undefined;
  /** State of the auto rollout process. */
  rolloutState:
    | RolloutState
    | undefined;
  /**
   * The reason why rollout has failed. Should only be set when state is
   * ROLLOUT_FAILED.
   */
  rolloutFailureReason: string;
  /** Inference result of the experiment. */
  result:
    | Experiment_Result
    | undefined;
  /** Creation time of this experiment. */
  createTime:
    | Date
    | undefined;
  /** Start time of this experiment. */
  startTime:
    | Date
    | undefined;
  /** End time of this experiment. */
  endTime:
    | Date
    | undefined;
  /** Last update time of this experiment. */
  lastUpdateTime:
    | Date
    | undefined;
  /**
   * Maximum number of days to run the experiment/rollout. If auto-rollout is
   * not enabled, default value and maximum will be 30 days. If auto-rollout is
   * enabled, default value and maximum will be 6 days.
   */
  experimentLength:
    | Duration
    | undefined;
  /** The history of updates to the experiment variants. */
  variantsHistory: VariantsHistory[];
}

/** The state of the experiment. */
export enum Experiment_State {
  /** STATE_UNSPECIFIED - State unspecified. */
  STATE_UNSPECIFIED = 0,
  /** DRAFT - The experiment is created but not started yet. */
  DRAFT = 1,
  /** RUNNING - The experiment is running. */
  RUNNING = 2,
  /** DONE - The experiment is done. */
  DONE = 3,
  /** ROLLOUT_FAILED - The experiment with auto-rollout enabled has failed. */
  ROLLOUT_FAILED = 4,
  UNRECOGNIZED = -1,
}

export function experiment_StateFromJSON(object: any): Experiment_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Experiment_State.STATE_UNSPECIFIED;
    case 1:
    case "DRAFT":
      return Experiment_State.DRAFT;
    case 2:
    case "RUNNING":
      return Experiment_State.RUNNING;
    case 3:
    case "DONE":
      return Experiment_State.DONE;
    case 4:
    case "ROLLOUT_FAILED":
      return Experiment_State.ROLLOUT_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Experiment_State.UNRECOGNIZED;
  }
}

export function experiment_StateToJSON(object: Experiment_State): string {
  switch (object) {
    case Experiment_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Experiment_State.DRAFT:
      return "DRAFT";
    case Experiment_State.RUNNING:
      return "RUNNING";
    case Experiment_State.DONE:
      return "DONE";
    case Experiment_State.ROLLOUT_FAILED:
      return "ROLLOUT_FAILED";
    case Experiment_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Definition of the experiment. */
export interface Experiment_Definition {
  /**
   * The condition defines which subset of sessions are selected for
   * this experiment. If not specified, all sessions are eligible. E.g.
   * "query_input.language_code=en" See the [conditions
   * reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
   */
  condition: string;
  /** The flow versions as the variants of this experiment. */
  versionVariants?: VersionVariants | undefined;
}

/**
 * The inference result which includes an objective metric to optimize and the
 * confidence interval.
 */
export interface Experiment_Result {
  /** Version variants and metrics. */
  versionMetrics: Experiment_Result_VersionMetrics[];
  /**
   * The last time the experiment's stats data was updated. Will have default
   * value if stats have never been computed for this experiment.
   */
  lastUpdateTime: Date | undefined;
}

/** Types of ratio-based metric for Dialogflow experiment. */
export enum Experiment_Result_MetricType {
  /** METRIC_UNSPECIFIED - Metric unspecified. */
  METRIC_UNSPECIFIED = 0,
  /** CONTAINED_SESSION_NO_CALLBACK_RATE - Percentage of contained sessions without user calling back in 24 hours. */
  CONTAINED_SESSION_NO_CALLBACK_RATE = 1,
  /** LIVE_AGENT_HANDOFF_RATE - Percentage of sessions that were handed to a human agent. */
  LIVE_AGENT_HANDOFF_RATE = 2,
  /** CALLBACK_SESSION_RATE - Percentage of sessions with the same user calling back. */
  CALLBACK_SESSION_RATE = 3,
  /** ABANDONED_SESSION_RATE - Percentage of sessions where user hung up. */
  ABANDONED_SESSION_RATE = 4,
  /**
   * SESSION_END_RATE - Percentage of sessions reached Dialogflow 'END_PAGE' or
   * 'END_SESSION'.
   */
  SESSION_END_RATE = 5,
  UNRECOGNIZED = -1,
}

export function experiment_Result_MetricTypeFromJSON(object: any): Experiment_Result_MetricType {
  switch (object) {
    case 0:
    case "METRIC_UNSPECIFIED":
      return Experiment_Result_MetricType.METRIC_UNSPECIFIED;
    case 1:
    case "CONTAINED_SESSION_NO_CALLBACK_RATE":
      return Experiment_Result_MetricType.CONTAINED_SESSION_NO_CALLBACK_RATE;
    case 2:
    case "LIVE_AGENT_HANDOFF_RATE":
      return Experiment_Result_MetricType.LIVE_AGENT_HANDOFF_RATE;
    case 3:
    case "CALLBACK_SESSION_RATE":
      return Experiment_Result_MetricType.CALLBACK_SESSION_RATE;
    case 4:
    case "ABANDONED_SESSION_RATE":
      return Experiment_Result_MetricType.ABANDONED_SESSION_RATE;
    case 5:
    case "SESSION_END_RATE":
      return Experiment_Result_MetricType.SESSION_END_RATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Experiment_Result_MetricType.UNRECOGNIZED;
  }
}

export function experiment_Result_MetricTypeToJSON(object: Experiment_Result_MetricType): string {
  switch (object) {
    case Experiment_Result_MetricType.METRIC_UNSPECIFIED:
      return "METRIC_UNSPECIFIED";
    case Experiment_Result_MetricType.CONTAINED_SESSION_NO_CALLBACK_RATE:
      return "CONTAINED_SESSION_NO_CALLBACK_RATE";
    case Experiment_Result_MetricType.LIVE_AGENT_HANDOFF_RATE:
      return "LIVE_AGENT_HANDOFF_RATE";
    case Experiment_Result_MetricType.CALLBACK_SESSION_RATE:
      return "CALLBACK_SESSION_RATE";
    case Experiment_Result_MetricType.ABANDONED_SESSION_RATE:
      return "ABANDONED_SESSION_RATE";
    case Experiment_Result_MetricType.SESSION_END_RATE:
      return "SESSION_END_RATE";
    case Experiment_Result_MetricType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Types of count-based metric for Dialogflow experiment. */
export enum Experiment_Result_CountType {
  /** COUNT_TYPE_UNSPECIFIED - Count type unspecified. */
  COUNT_TYPE_UNSPECIFIED = 0,
  /** TOTAL_NO_MATCH_COUNT - Total number of occurrences of a 'NO_MATCH'. */
  TOTAL_NO_MATCH_COUNT = 1,
  /** TOTAL_TURN_COUNT - Total number of turn counts. */
  TOTAL_TURN_COUNT = 2,
  /** AVERAGE_TURN_COUNT - Average turn count in a session. */
  AVERAGE_TURN_COUNT = 3,
  UNRECOGNIZED = -1,
}

export function experiment_Result_CountTypeFromJSON(object: any): Experiment_Result_CountType {
  switch (object) {
    case 0:
    case "COUNT_TYPE_UNSPECIFIED":
      return Experiment_Result_CountType.COUNT_TYPE_UNSPECIFIED;
    case 1:
    case "TOTAL_NO_MATCH_COUNT":
      return Experiment_Result_CountType.TOTAL_NO_MATCH_COUNT;
    case 2:
    case "TOTAL_TURN_COUNT":
      return Experiment_Result_CountType.TOTAL_TURN_COUNT;
    case 3:
    case "AVERAGE_TURN_COUNT":
      return Experiment_Result_CountType.AVERAGE_TURN_COUNT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Experiment_Result_CountType.UNRECOGNIZED;
  }
}

export function experiment_Result_CountTypeToJSON(object: Experiment_Result_CountType): string {
  switch (object) {
    case Experiment_Result_CountType.COUNT_TYPE_UNSPECIFIED:
      return "COUNT_TYPE_UNSPECIFIED";
    case Experiment_Result_CountType.TOTAL_NO_MATCH_COUNT:
      return "TOTAL_NO_MATCH_COUNT";
    case Experiment_Result_CountType.TOTAL_TURN_COUNT:
      return "TOTAL_TURN_COUNT";
    case Experiment_Result_CountType.AVERAGE_TURN_COUNT:
      return "AVERAGE_TURN_COUNT";
    case Experiment_Result_CountType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A confidence interval is a range of possible values for the experiment
 * objective you are trying to measure.
 */
export interface Experiment_Result_ConfidenceInterval {
  /**
   * The confidence level used to construct the interval, i.e. there is X%
   * chance that the true value is within this interval.
   */
  confidenceLevel: number;
  /**
   * The percent change between an experiment metric's value and the value
   * for its control.
   */
  ratio: number;
  /** Lower bound of the interval. */
  lowerBound: number;
  /** Upper bound of the interval. */
  upperBound: number;
}

/** Metric and corresponding confidence intervals. */
export interface Experiment_Result_Metric {
  /**
   * Ratio-based metric type. Only one of type or count_type is specified in
   * each Metric.
   */
  type: Experiment_Result_MetricType;
  /**
   * Count-based metric type. Only one of type or count_type is specified in
   * each Metric.
   */
  countType: Experiment_Result_CountType;
  /** Ratio value of a metric. */
  ratio?:
    | number
    | undefined;
  /** Count value of a metric. */
  count?:
    | number
    | undefined;
  /**
   * The probability that the treatment is better than all other treatments
   * in the experiment
   */
  confidenceInterval: Experiment_Result_ConfidenceInterval | undefined;
}

/** Version variant and associated metrics. */
export interface Experiment_Result_VersionMetrics {
  /**
   * The name of the flow [Version][google.cloud.dialogflow.cx.v3.Version].
   * Format: `projects/<Project ID>/locations/<Location
   * ID>/agents/<Agent ID>/flows/<Flow ID>/versions/<Version ID>`.
   */
  version: string;
  /**
   * The metrics and corresponding confidence intervals in the inference
   * result.
   */
  metrics: Experiment_Result_Metric[];
  /** Number of sessions that were allocated to this version. */
  sessionCount: number;
}

/** A list of flow version variants. */
export interface VersionVariants {
  /** A list of flow version variants. */
  variants: VersionVariants_Variant[];
}

/** A single flow version with specified traffic allocation. */
export interface VersionVariants_Variant {
  /**
   * The name of the flow version.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>/versions/<Version ID>`.
   */
  version: string;
  /**
   * Percentage of the traffic which should be routed to this
   * version of flow. Traffic allocation for a single flow must sum up to 1.0.
   */
  trafficAllocation: number;
  /** Whether the variant is for the control group. */
  isControlGroup: boolean;
}

/** The history of variants update. */
export interface VariantsHistory {
  /** The flow versions as the variants. */
  versionVariants?:
    | VersionVariants
    | undefined;
  /** Update time of the variants. */
  updateTime: Date | undefined;
}

/** The configuration for auto rollout. */
export interface RolloutConfig {
  /**
   * Steps to roll out a flow version. Steps should be sorted by percentage in
   * ascending order.
   */
  rolloutSteps: RolloutConfig_RolloutStep[];
  /**
   * The conditions that are used to evaluate the success of a rollout
   * step. If not specified, all rollout steps will proceed to the next one
   * unless failure conditions are met. E.g. "containment_rate > 60% AND
   * callback_rate < 20%". See the [conditions
   * reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
   */
  rolloutCondition: string;
  /**
   * The conditions that are used to evaluate the failure of a rollout
   * step. If not specified, no rollout steps will fail. E.g. "containment_rate
   * < 10% OR average_turn_count < 3". See the [conditions
   * reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
   */
  failureCondition: string;
}

/** A single rollout step with specified traffic allocation. */
export interface RolloutConfig_RolloutStep {
  /** The name of the rollout step; */
  displayName: string;
  /**
   * The percentage of traffic allocated to the flow version of this rollout
   * step. (0%, 100%].
   */
  trafficPercent: number;
  /**
   * The minimum time that this step should last. Should be longer than 1
   * hour. If not set, the default minimum duration for each step will be 1
   * hour.
   */
  minDuration: Duration | undefined;
}

/** State of the auto-rollout process. */
export interface RolloutState {
  /** Display name of the current auto rollout step. */
  step: string;
  /** Index of the current step in the auto rollout steps list. */
  stepIndex: number;
  /** Start time of the current step. */
  startTime: Date | undefined;
}

/**
 * The request message for
 * [Experiments.ListExperiments][google.cloud.dialogflow.cx.v3.Experiments.ListExperiments].
 */
export interface ListExperimentsRequest {
  /**
   * Required. The [Environment][google.cloud.dialogflow.cx.v3.Environment] to
   * list all environments for. Format: `projects/<Project
   * ID>/locations/<Location ID>/agents/<Agent ID>/environments/<Environment
   * ID>`.
   */
  parent: string;
  /**
   * The maximum number of items to return in a single page. By default 20 and
   * at most 100.
   */
  pageSize: number;
  /** The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [Experiments.ListExperiments][google.cloud.dialogflow.cx.v3.Experiments.ListExperiments].
 */
export interface ListExperimentsResponse {
  /**
   * The list of experiments. There will be a maximum number of items
   * returned based on the page_size field in the request. The list may in some
   * cases be empty or contain fewer entries than page_size even if this isn't
   * the last page.
   */
  experiments: Experiment[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [Experiments.GetExperiment][google.cloud.dialogflow.cx.v3.Experiments.GetExperiment].
 */
export interface GetExperimentRequest {
  /**
   * Required. The name of the
   * [Environment][google.cloud.dialogflow.cx.v3.Environment]. Format:
   * `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>/experiments/<Experiment ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [Experiments.CreateExperiment][google.cloud.dialogflow.cx.v3.Experiments.CreateExperiment].
 */
export interface CreateExperimentRequest {
  /**
   * Required. The [Agent][google.cloud.dialogflow.cx.v3.Agent] to create an
   * [Environment][google.cloud.dialogflow.cx.v3.Environment] for. Format:
   * `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>`.
   */
  parent: string;
  /** Required. The experiment to create. */
  experiment: Experiment | undefined;
}

/**
 * The request message for
 * [Experiments.UpdateExperiment][google.cloud.dialogflow.cx.v3.Experiments.UpdateExperiment].
 */
export interface UpdateExperimentRequest {
  /** Required. The experiment to update. */
  experiment:
    | Experiment
    | undefined;
  /** Required. The mask to control which fields get updated. */
  updateMask: string[] | undefined;
}

/**
 * The request message for
 * [Experiments.DeleteExperiment][google.cloud.dialogflow.cx.v3.Experiments.DeleteExperiment].
 */
export interface DeleteExperimentRequest {
  /**
   * Required. The name of the
   * [Environment][google.cloud.dialogflow.cx.v3.Environment] to delete. Format:
   * `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>/experiments/<Experiment ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [Experiments.StartExperiment][google.cloud.dialogflow.cx.v3.Experiments.StartExperiment].
 */
export interface StartExperimentRequest {
  /**
   * Required. Resource name of the experiment to start.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>/experiments/<Experiment ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [Experiments.StopExperiment][google.cloud.dialogflow.cx.v3.Experiments.StopExperiment].
 */
export interface StopExperimentRequest {
  /**
   * Required. Resource name of the experiment to stop.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>/experiments/<Experiment ID>`.
   */
  name: string;
}

function createBaseExperiment(): Experiment {
  return {
    name: "",
    displayName: "",
    description: "",
    state: 0,
    definition: undefined,
    rolloutConfig: undefined,
    rolloutState: undefined,
    rolloutFailureReason: "",
    result: undefined,
    createTime: undefined,
    startTime: undefined,
    endTime: undefined,
    lastUpdateTime: undefined,
    experimentLength: undefined,
    variantsHistory: [],
  };
}

export const Experiment: MessageFns<Experiment> = {
  encode(message: Experiment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.definition !== undefined) {
      Experiment_Definition.encode(message.definition, writer.uint32(42).fork()).join();
    }
    if (message.rolloutConfig !== undefined) {
      RolloutConfig.encode(message.rolloutConfig, writer.uint32(114).fork()).join();
    }
    if (message.rolloutState !== undefined) {
      RolloutState.encode(message.rolloutState, writer.uint32(122).fork()).join();
    }
    if (message.rolloutFailureReason !== "") {
      writer.uint32(130).string(message.rolloutFailureReason);
    }
    if (message.result !== undefined) {
      Experiment_Result.encode(message.result, writer.uint32(50).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(58).fork()).join();
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(66).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(74).fork()).join();
    }
    if (message.lastUpdateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastUpdateTime), writer.uint32(82).fork()).join();
    }
    if (message.experimentLength !== undefined) {
      Duration.encode(message.experimentLength, writer.uint32(90).fork()).join();
    }
    for (const v of message.variantsHistory) {
      VariantsHistory.encode(v!, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Experiment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperiment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.definition = Experiment_Definition.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.rolloutConfig = RolloutConfig.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.rolloutState = RolloutState.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.rolloutFailureReason = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.result = Experiment_Result.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.lastUpdateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.experimentLength = Duration.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.variantsHistory.push(VariantsHistory.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Experiment {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      state: isSet(object.state) ? experiment_StateFromJSON(object.state) : 0,
      definition: isSet(object.definition) ? Experiment_Definition.fromJSON(object.definition) : undefined,
      rolloutConfig: isSet(object.rolloutConfig) ? RolloutConfig.fromJSON(object.rolloutConfig) : undefined,
      rolloutState: isSet(object.rolloutState) ? RolloutState.fromJSON(object.rolloutState) : undefined,
      rolloutFailureReason: isSet(object.rolloutFailureReason) ? globalThis.String(object.rolloutFailureReason) : "",
      result: isSet(object.result) ? Experiment_Result.fromJSON(object.result) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      lastUpdateTime: isSet(object.lastUpdateTime) ? fromJsonTimestamp(object.lastUpdateTime) : undefined,
      experimentLength: isSet(object.experimentLength) ? Duration.fromJSON(object.experimentLength) : undefined,
      variantsHistory: globalThis.Array.isArray(object?.variantsHistory)
        ? object.variantsHistory.map((e: any) => VariantsHistory.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Experiment): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.state !== 0) {
      obj.state = experiment_StateToJSON(message.state);
    }
    if (message.definition !== undefined) {
      obj.definition = Experiment_Definition.toJSON(message.definition);
    }
    if (message.rolloutConfig !== undefined) {
      obj.rolloutConfig = RolloutConfig.toJSON(message.rolloutConfig);
    }
    if (message.rolloutState !== undefined) {
      obj.rolloutState = RolloutState.toJSON(message.rolloutState);
    }
    if (message.rolloutFailureReason !== "") {
      obj.rolloutFailureReason = message.rolloutFailureReason;
    }
    if (message.result !== undefined) {
      obj.result = Experiment_Result.toJSON(message.result);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.lastUpdateTime !== undefined) {
      obj.lastUpdateTime = message.lastUpdateTime.toISOString();
    }
    if (message.experimentLength !== undefined) {
      obj.experimentLength = Duration.toJSON(message.experimentLength);
    }
    if (message.variantsHistory?.length) {
      obj.variantsHistory = message.variantsHistory.map((e) => VariantsHistory.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Experiment>): Experiment {
    return Experiment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Experiment>): Experiment {
    const message = createBaseExperiment();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.state = object.state ?? 0;
    message.definition = (object.definition !== undefined && object.definition !== null)
      ? Experiment_Definition.fromPartial(object.definition)
      : undefined;
    message.rolloutConfig = (object.rolloutConfig !== undefined && object.rolloutConfig !== null)
      ? RolloutConfig.fromPartial(object.rolloutConfig)
      : undefined;
    message.rolloutState = (object.rolloutState !== undefined && object.rolloutState !== null)
      ? RolloutState.fromPartial(object.rolloutState)
      : undefined;
    message.rolloutFailureReason = object.rolloutFailureReason ?? "";
    message.result = (object.result !== undefined && object.result !== null)
      ? Experiment_Result.fromPartial(object.result)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.lastUpdateTime = object.lastUpdateTime ?? undefined;
    message.experimentLength = (object.experimentLength !== undefined && object.experimentLength !== null)
      ? Duration.fromPartial(object.experimentLength)
      : undefined;
    message.variantsHistory = object.variantsHistory?.map((e) => VariantsHistory.fromPartial(e)) || [];
    return message;
  },
};

function createBaseExperiment_Definition(): Experiment_Definition {
  return { condition: "", versionVariants: undefined };
}

export const Experiment_Definition: MessageFns<Experiment_Definition> = {
  encode(message: Experiment_Definition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.condition !== "") {
      writer.uint32(10).string(message.condition);
    }
    if (message.versionVariants !== undefined) {
      VersionVariants.encode(message.versionVariants, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Experiment_Definition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperiment_Definition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.condition = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.versionVariants = VersionVariants.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Experiment_Definition {
    return {
      condition: isSet(object.condition) ? globalThis.String(object.condition) : "",
      versionVariants: isSet(object.versionVariants) ? VersionVariants.fromJSON(object.versionVariants) : undefined,
    };
  },

  toJSON(message: Experiment_Definition): unknown {
    const obj: any = {};
    if (message.condition !== "") {
      obj.condition = message.condition;
    }
    if (message.versionVariants !== undefined) {
      obj.versionVariants = VersionVariants.toJSON(message.versionVariants);
    }
    return obj;
  },

  create(base?: DeepPartial<Experiment_Definition>): Experiment_Definition {
    return Experiment_Definition.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Experiment_Definition>): Experiment_Definition {
    const message = createBaseExperiment_Definition();
    message.condition = object.condition ?? "";
    message.versionVariants = (object.versionVariants !== undefined && object.versionVariants !== null)
      ? VersionVariants.fromPartial(object.versionVariants)
      : undefined;
    return message;
  },
};

function createBaseExperiment_Result(): Experiment_Result {
  return { versionMetrics: [], lastUpdateTime: undefined };
}

export const Experiment_Result: MessageFns<Experiment_Result> = {
  encode(message: Experiment_Result, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.versionMetrics) {
      Experiment_Result_VersionMetrics.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.lastUpdateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastUpdateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Experiment_Result {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperiment_Result();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.versionMetrics.push(Experiment_Result_VersionMetrics.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lastUpdateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Experiment_Result {
    return {
      versionMetrics: globalThis.Array.isArray(object?.versionMetrics)
        ? object.versionMetrics.map((e: any) => Experiment_Result_VersionMetrics.fromJSON(e))
        : [],
      lastUpdateTime: isSet(object.lastUpdateTime) ? fromJsonTimestamp(object.lastUpdateTime) : undefined,
    };
  },

  toJSON(message: Experiment_Result): unknown {
    const obj: any = {};
    if (message.versionMetrics?.length) {
      obj.versionMetrics = message.versionMetrics.map((e) => Experiment_Result_VersionMetrics.toJSON(e));
    }
    if (message.lastUpdateTime !== undefined) {
      obj.lastUpdateTime = message.lastUpdateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Experiment_Result>): Experiment_Result {
    return Experiment_Result.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Experiment_Result>): Experiment_Result {
    const message = createBaseExperiment_Result();
    message.versionMetrics = object.versionMetrics?.map((e) => Experiment_Result_VersionMetrics.fromPartial(e)) || [];
    message.lastUpdateTime = object.lastUpdateTime ?? undefined;
    return message;
  },
};

function createBaseExperiment_Result_ConfidenceInterval(): Experiment_Result_ConfidenceInterval {
  return { confidenceLevel: 0, ratio: 0, lowerBound: 0, upperBound: 0 };
}

export const Experiment_Result_ConfidenceInterval: MessageFns<Experiment_Result_ConfidenceInterval> = {
  encode(message: Experiment_Result_ConfidenceInterval, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.confidenceLevel !== 0) {
      writer.uint32(9).double(message.confidenceLevel);
    }
    if (message.ratio !== 0) {
      writer.uint32(17).double(message.ratio);
    }
    if (message.lowerBound !== 0) {
      writer.uint32(25).double(message.lowerBound);
    }
    if (message.upperBound !== 0) {
      writer.uint32(33).double(message.upperBound);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Experiment_Result_ConfidenceInterval {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperiment_Result_ConfidenceInterval();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.confidenceLevel = reader.double();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.ratio = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.lowerBound = reader.double();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.upperBound = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Experiment_Result_ConfidenceInterval {
    return {
      confidenceLevel: isSet(object.confidenceLevel) ? globalThis.Number(object.confidenceLevel) : 0,
      ratio: isSet(object.ratio) ? globalThis.Number(object.ratio) : 0,
      lowerBound: isSet(object.lowerBound) ? globalThis.Number(object.lowerBound) : 0,
      upperBound: isSet(object.upperBound) ? globalThis.Number(object.upperBound) : 0,
    };
  },

  toJSON(message: Experiment_Result_ConfidenceInterval): unknown {
    const obj: any = {};
    if (message.confidenceLevel !== 0) {
      obj.confidenceLevel = message.confidenceLevel;
    }
    if (message.ratio !== 0) {
      obj.ratio = message.ratio;
    }
    if (message.lowerBound !== 0) {
      obj.lowerBound = message.lowerBound;
    }
    if (message.upperBound !== 0) {
      obj.upperBound = message.upperBound;
    }
    return obj;
  },

  create(base?: DeepPartial<Experiment_Result_ConfidenceInterval>): Experiment_Result_ConfidenceInterval {
    return Experiment_Result_ConfidenceInterval.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Experiment_Result_ConfidenceInterval>): Experiment_Result_ConfidenceInterval {
    const message = createBaseExperiment_Result_ConfidenceInterval();
    message.confidenceLevel = object.confidenceLevel ?? 0;
    message.ratio = object.ratio ?? 0;
    message.lowerBound = object.lowerBound ?? 0;
    message.upperBound = object.upperBound ?? 0;
    return message;
  },
};

function createBaseExperiment_Result_Metric(): Experiment_Result_Metric {
  return { type: 0, countType: 0, ratio: undefined, count: undefined, confidenceInterval: undefined };
}

export const Experiment_Result_Metric: MessageFns<Experiment_Result_Metric> = {
  encode(message: Experiment_Result_Metric, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.countType !== 0) {
      writer.uint32(40).int32(message.countType);
    }
    if (message.ratio !== undefined) {
      writer.uint32(17).double(message.ratio);
    }
    if (message.count !== undefined) {
      writer.uint32(33).double(message.count);
    }
    if (message.confidenceInterval !== undefined) {
      Experiment_Result_ConfidenceInterval.encode(message.confidenceInterval, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Experiment_Result_Metric {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperiment_Result_Metric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.countType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.ratio = reader.double();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.count = reader.double();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.confidenceInterval = Experiment_Result_ConfidenceInterval.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Experiment_Result_Metric {
    return {
      type: isSet(object.type) ? experiment_Result_MetricTypeFromJSON(object.type) : 0,
      countType: isSet(object.countType) ? experiment_Result_CountTypeFromJSON(object.countType) : 0,
      ratio: isSet(object.ratio) ? globalThis.Number(object.ratio) : undefined,
      count: isSet(object.count) ? globalThis.Number(object.count) : undefined,
      confidenceInterval: isSet(object.confidenceInterval)
        ? Experiment_Result_ConfidenceInterval.fromJSON(object.confidenceInterval)
        : undefined,
    };
  },

  toJSON(message: Experiment_Result_Metric): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = experiment_Result_MetricTypeToJSON(message.type);
    }
    if (message.countType !== 0) {
      obj.countType = experiment_Result_CountTypeToJSON(message.countType);
    }
    if (message.ratio !== undefined) {
      obj.ratio = message.ratio;
    }
    if (message.count !== undefined) {
      obj.count = message.count;
    }
    if (message.confidenceInterval !== undefined) {
      obj.confidenceInterval = Experiment_Result_ConfidenceInterval.toJSON(message.confidenceInterval);
    }
    return obj;
  },

  create(base?: DeepPartial<Experiment_Result_Metric>): Experiment_Result_Metric {
    return Experiment_Result_Metric.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Experiment_Result_Metric>): Experiment_Result_Metric {
    const message = createBaseExperiment_Result_Metric();
    message.type = object.type ?? 0;
    message.countType = object.countType ?? 0;
    message.ratio = object.ratio ?? undefined;
    message.count = object.count ?? undefined;
    message.confidenceInterval = (object.confidenceInterval !== undefined && object.confidenceInterval !== null)
      ? Experiment_Result_ConfidenceInterval.fromPartial(object.confidenceInterval)
      : undefined;
    return message;
  },
};

function createBaseExperiment_Result_VersionMetrics(): Experiment_Result_VersionMetrics {
  return { version: "", metrics: [], sessionCount: 0 };
}

export const Experiment_Result_VersionMetrics: MessageFns<Experiment_Result_VersionMetrics> = {
  encode(message: Experiment_Result_VersionMetrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    for (const v of message.metrics) {
      Experiment_Result_Metric.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.sessionCount !== 0) {
      writer.uint32(24).int32(message.sessionCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Experiment_Result_VersionMetrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperiment_Result_VersionMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metrics.push(Experiment_Result_Metric.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.sessionCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Experiment_Result_VersionMetrics {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      metrics: globalThis.Array.isArray(object?.metrics)
        ? object.metrics.map((e: any) => Experiment_Result_Metric.fromJSON(e))
        : [],
      sessionCount: isSet(object.sessionCount) ? globalThis.Number(object.sessionCount) : 0,
    };
  },

  toJSON(message: Experiment_Result_VersionMetrics): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.metrics?.length) {
      obj.metrics = message.metrics.map((e) => Experiment_Result_Metric.toJSON(e));
    }
    if (message.sessionCount !== 0) {
      obj.sessionCount = Math.round(message.sessionCount);
    }
    return obj;
  },

  create(base?: DeepPartial<Experiment_Result_VersionMetrics>): Experiment_Result_VersionMetrics {
    return Experiment_Result_VersionMetrics.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Experiment_Result_VersionMetrics>): Experiment_Result_VersionMetrics {
    const message = createBaseExperiment_Result_VersionMetrics();
    message.version = object.version ?? "";
    message.metrics = object.metrics?.map((e) => Experiment_Result_Metric.fromPartial(e)) || [];
    message.sessionCount = object.sessionCount ?? 0;
    return message;
  },
};

function createBaseVersionVariants(): VersionVariants {
  return { variants: [] };
}

export const VersionVariants: MessageFns<VersionVariants> = {
  encode(message: VersionVariants, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.variants) {
      VersionVariants_Variant.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VersionVariants {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersionVariants();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.variants.push(VersionVariants_Variant.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VersionVariants {
    return {
      variants: globalThis.Array.isArray(object?.variants)
        ? object.variants.map((e: any) => VersionVariants_Variant.fromJSON(e))
        : [],
    };
  },

  toJSON(message: VersionVariants): unknown {
    const obj: any = {};
    if (message.variants?.length) {
      obj.variants = message.variants.map((e) => VersionVariants_Variant.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<VersionVariants>): VersionVariants {
    return VersionVariants.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VersionVariants>): VersionVariants {
    const message = createBaseVersionVariants();
    message.variants = object.variants?.map((e) => VersionVariants_Variant.fromPartial(e)) || [];
    return message;
  },
};

function createBaseVersionVariants_Variant(): VersionVariants_Variant {
  return { version: "", trafficAllocation: 0, isControlGroup: false };
}

export const VersionVariants_Variant: MessageFns<VersionVariants_Variant> = {
  encode(message: VersionVariants_Variant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    if (message.trafficAllocation !== 0) {
      writer.uint32(21).float(message.trafficAllocation);
    }
    if (message.isControlGroup !== false) {
      writer.uint32(24).bool(message.isControlGroup);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VersionVariants_Variant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersionVariants_Variant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.trafficAllocation = reader.float();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isControlGroup = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VersionVariants_Variant {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      trafficAllocation: isSet(object.trafficAllocation) ? globalThis.Number(object.trafficAllocation) : 0,
      isControlGroup: isSet(object.isControlGroup) ? globalThis.Boolean(object.isControlGroup) : false,
    };
  },

  toJSON(message: VersionVariants_Variant): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.trafficAllocation !== 0) {
      obj.trafficAllocation = message.trafficAllocation;
    }
    if (message.isControlGroup !== false) {
      obj.isControlGroup = message.isControlGroup;
    }
    return obj;
  },

  create(base?: DeepPartial<VersionVariants_Variant>): VersionVariants_Variant {
    return VersionVariants_Variant.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VersionVariants_Variant>): VersionVariants_Variant {
    const message = createBaseVersionVariants_Variant();
    message.version = object.version ?? "";
    message.trafficAllocation = object.trafficAllocation ?? 0;
    message.isControlGroup = object.isControlGroup ?? false;
    return message;
  },
};

function createBaseVariantsHistory(): VariantsHistory {
  return { versionVariants: undefined, updateTime: undefined };
}

export const VariantsHistory: MessageFns<VariantsHistory> = {
  encode(message: VariantsHistory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.versionVariants !== undefined) {
      VersionVariants.encode(message.versionVariants, writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VariantsHistory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVariantsHistory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.versionVariants = VersionVariants.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VariantsHistory {
    return {
      versionVariants: isSet(object.versionVariants) ? VersionVariants.fromJSON(object.versionVariants) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: VariantsHistory): unknown {
    const obj: any = {};
    if (message.versionVariants !== undefined) {
      obj.versionVariants = VersionVariants.toJSON(message.versionVariants);
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<VariantsHistory>): VariantsHistory {
    return VariantsHistory.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VariantsHistory>): VariantsHistory {
    const message = createBaseVariantsHistory();
    message.versionVariants = (object.versionVariants !== undefined && object.versionVariants !== null)
      ? VersionVariants.fromPartial(object.versionVariants)
      : undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseRolloutConfig(): RolloutConfig {
  return { rolloutSteps: [], rolloutCondition: "", failureCondition: "" };
}

export const RolloutConfig: MessageFns<RolloutConfig> = {
  encode(message: RolloutConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rolloutSteps) {
      RolloutConfig_RolloutStep.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.rolloutCondition !== "") {
      writer.uint32(18).string(message.rolloutCondition);
    }
    if (message.failureCondition !== "") {
      writer.uint32(26).string(message.failureCondition);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RolloutConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRolloutConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rolloutSteps.push(RolloutConfig_RolloutStep.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rolloutCondition = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.failureCondition = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RolloutConfig {
    return {
      rolloutSteps: globalThis.Array.isArray(object?.rolloutSteps)
        ? object.rolloutSteps.map((e: any) => RolloutConfig_RolloutStep.fromJSON(e))
        : [],
      rolloutCondition: isSet(object.rolloutCondition) ? globalThis.String(object.rolloutCondition) : "",
      failureCondition: isSet(object.failureCondition) ? globalThis.String(object.failureCondition) : "",
    };
  },

  toJSON(message: RolloutConfig): unknown {
    const obj: any = {};
    if (message.rolloutSteps?.length) {
      obj.rolloutSteps = message.rolloutSteps.map((e) => RolloutConfig_RolloutStep.toJSON(e));
    }
    if (message.rolloutCondition !== "") {
      obj.rolloutCondition = message.rolloutCondition;
    }
    if (message.failureCondition !== "") {
      obj.failureCondition = message.failureCondition;
    }
    return obj;
  },

  create(base?: DeepPartial<RolloutConfig>): RolloutConfig {
    return RolloutConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RolloutConfig>): RolloutConfig {
    const message = createBaseRolloutConfig();
    message.rolloutSteps = object.rolloutSteps?.map((e) => RolloutConfig_RolloutStep.fromPartial(e)) || [];
    message.rolloutCondition = object.rolloutCondition ?? "";
    message.failureCondition = object.failureCondition ?? "";
    return message;
  },
};

function createBaseRolloutConfig_RolloutStep(): RolloutConfig_RolloutStep {
  return { displayName: "", trafficPercent: 0, minDuration: undefined };
}

export const RolloutConfig_RolloutStep: MessageFns<RolloutConfig_RolloutStep> = {
  encode(message: RolloutConfig_RolloutStep, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    if (message.trafficPercent !== 0) {
      writer.uint32(16).int32(message.trafficPercent);
    }
    if (message.minDuration !== undefined) {
      Duration.encode(message.minDuration, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RolloutConfig_RolloutStep {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRolloutConfig_RolloutStep();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.trafficPercent = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.minDuration = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RolloutConfig_RolloutStep {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      trafficPercent: isSet(object.trafficPercent) ? globalThis.Number(object.trafficPercent) : 0,
      minDuration: isSet(object.minDuration) ? Duration.fromJSON(object.minDuration) : undefined,
    };
  },

  toJSON(message: RolloutConfig_RolloutStep): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.trafficPercent !== 0) {
      obj.trafficPercent = Math.round(message.trafficPercent);
    }
    if (message.minDuration !== undefined) {
      obj.minDuration = Duration.toJSON(message.minDuration);
    }
    return obj;
  },

  create(base?: DeepPartial<RolloutConfig_RolloutStep>): RolloutConfig_RolloutStep {
    return RolloutConfig_RolloutStep.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RolloutConfig_RolloutStep>): RolloutConfig_RolloutStep {
    const message = createBaseRolloutConfig_RolloutStep();
    message.displayName = object.displayName ?? "";
    message.trafficPercent = object.trafficPercent ?? 0;
    message.minDuration = (object.minDuration !== undefined && object.minDuration !== null)
      ? Duration.fromPartial(object.minDuration)
      : undefined;
    return message;
  },
};

function createBaseRolloutState(): RolloutState {
  return { step: "", stepIndex: 0, startTime: undefined };
}

export const RolloutState: MessageFns<RolloutState> = {
  encode(message: RolloutState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.step !== "") {
      writer.uint32(10).string(message.step);
    }
    if (message.stepIndex !== 0) {
      writer.uint32(24).int32(message.stepIndex);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RolloutState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRolloutState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.step = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.stepIndex = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RolloutState {
    return {
      step: isSet(object.step) ? globalThis.String(object.step) : "",
      stepIndex: isSet(object.stepIndex) ? globalThis.Number(object.stepIndex) : 0,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
    };
  },

  toJSON(message: RolloutState): unknown {
    const obj: any = {};
    if (message.step !== "") {
      obj.step = message.step;
    }
    if (message.stepIndex !== 0) {
      obj.stepIndex = Math.round(message.stepIndex);
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<RolloutState>): RolloutState {
    return RolloutState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RolloutState>): RolloutState {
    const message = createBaseRolloutState();
    message.step = object.step ?? "";
    message.stepIndex = object.stepIndex ?? 0;
    message.startTime = object.startTime ?? undefined;
    return message;
  },
};

function createBaseListExperimentsRequest(): ListExperimentsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListExperimentsRequest: MessageFns<ListExperimentsRequest> = {
  encode(message: ListExperimentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExperimentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExperimentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExperimentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListExperimentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExperimentsRequest>): ListExperimentsRequest {
    return ListExperimentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExperimentsRequest>): ListExperimentsRequest {
    const message = createBaseListExperimentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListExperimentsResponse(): ListExperimentsResponse {
  return { experiments: [], nextPageToken: "" };
}

export const ListExperimentsResponse: MessageFns<ListExperimentsResponse> = {
  encode(message: ListExperimentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.experiments) {
      Experiment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExperimentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExperimentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.experiments.push(Experiment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExperimentsResponse {
    return {
      experiments: globalThis.Array.isArray(object?.experiments)
        ? object.experiments.map((e: any) => Experiment.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListExperimentsResponse): unknown {
    const obj: any = {};
    if (message.experiments?.length) {
      obj.experiments = message.experiments.map((e) => Experiment.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExperimentsResponse>): ListExperimentsResponse {
    return ListExperimentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExperimentsResponse>): ListExperimentsResponse {
    const message = createBaseListExperimentsResponse();
    message.experiments = object.experiments?.map((e) => Experiment.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetExperimentRequest(): GetExperimentRequest {
  return { name: "" };
}

export const GetExperimentRequest: MessageFns<GetExperimentRequest> = {
  encode(message: GetExperimentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetExperimentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetExperimentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetExperimentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetExperimentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetExperimentRequest>): GetExperimentRequest {
    return GetExperimentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetExperimentRequest>): GetExperimentRequest {
    const message = createBaseGetExperimentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateExperimentRequest(): CreateExperimentRequest {
  return { parent: "", experiment: undefined };
}

export const CreateExperimentRequest: MessageFns<CreateExperimentRequest> = {
  encode(message: CreateExperimentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.experiment !== undefined) {
      Experiment.encode(message.experiment, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateExperimentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateExperimentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.experiment = Experiment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateExperimentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      experiment: isSet(object.experiment) ? Experiment.fromJSON(object.experiment) : undefined,
    };
  },

  toJSON(message: CreateExperimentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.experiment !== undefined) {
      obj.experiment = Experiment.toJSON(message.experiment);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateExperimentRequest>): CreateExperimentRequest {
    return CreateExperimentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateExperimentRequest>): CreateExperimentRequest {
    const message = createBaseCreateExperimentRequest();
    message.parent = object.parent ?? "";
    message.experiment = (object.experiment !== undefined && object.experiment !== null)
      ? Experiment.fromPartial(object.experiment)
      : undefined;
    return message;
  },
};

function createBaseUpdateExperimentRequest(): UpdateExperimentRequest {
  return { experiment: undefined, updateMask: undefined };
}

export const UpdateExperimentRequest: MessageFns<UpdateExperimentRequest> = {
  encode(message: UpdateExperimentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.experiment !== undefined) {
      Experiment.encode(message.experiment, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateExperimentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateExperimentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.experiment = Experiment.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateExperimentRequest {
    return {
      experiment: isSet(object.experiment) ? Experiment.fromJSON(object.experiment) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateExperimentRequest): unknown {
    const obj: any = {};
    if (message.experiment !== undefined) {
      obj.experiment = Experiment.toJSON(message.experiment);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateExperimentRequest>): UpdateExperimentRequest {
    return UpdateExperimentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateExperimentRequest>): UpdateExperimentRequest {
    const message = createBaseUpdateExperimentRequest();
    message.experiment = (object.experiment !== undefined && object.experiment !== null)
      ? Experiment.fromPartial(object.experiment)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteExperimentRequest(): DeleteExperimentRequest {
  return { name: "" };
}

export const DeleteExperimentRequest: MessageFns<DeleteExperimentRequest> = {
  encode(message: DeleteExperimentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteExperimentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteExperimentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteExperimentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteExperimentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteExperimentRequest>): DeleteExperimentRequest {
    return DeleteExperimentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteExperimentRequest>): DeleteExperimentRequest {
    const message = createBaseDeleteExperimentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseStartExperimentRequest(): StartExperimentRequest {
  return { name: "" };
}

export const StartExperimentRequest: MessageFns<StartExperimentRequest> = {
  encode(message: StartExperimentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartExperimentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartExperimentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartExperimentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: StartExperimentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<StartExperimentRequest>): StartExperimentRequest {
    return StartExperimentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartExperimentRequest>): StartExperimentRequest {
    const message = createBaseStartExperimentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseStopExperimentRequest(): StopExperimentRequest {
  return { name: "" };
}

export const StopExperimentRequest: MessageFns<StopExperimentRequest> = {
  encode(message: StopExperimentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopExperimentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopExperimentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopExperimentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: StopExperimentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<StopExperimentRequest>): StopExperimentRequest {
    return StopExperimentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StopExperimentRequest>): StopExperimentRequest {
    const message = createBaseStopExperimentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** Service for managing [Experiments][google.cloud.dialogflow.cx.v3.Experiment]. */
export type ExperimentsDefinition = typeof ExperimentsDefinition;
export const ExperimentsDefinition = {
  name: "Experiments",
  fullName: "google.cloud.dialogflow.cx.v3.Experiments",
  methods: {
    /**
     * Returns the list of all experiments in the specified
     * [Environment][google.cloud.dialogflow.cx.v3.Environment].
     */
    listExperiments: {
      name: "ListExperiments",
      requestType: ListExperimentsRequest,
      requestStream: false,
      responseType: ListExperimentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves the specified
     * [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
     */
    getExperiment: {
      name: "GetExperiment",
      requestType: GetExperimentRequest,
      requestStream: false,
      responseType: Experiment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates an [Experiment][google.cloud.dialogflow.cx.v3.Experiment] in the
     * specified [Environment][google.cloud.dialogflow.cx.v3.Environment].
     */
    createExperiment: {
      name: "CreateExperiment",
      requestType: CreateExperimentRequest,
      requestStream: false,
      responseType: Experiment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 112, 97, 114, 101, 110, 116, 44, 101, 120, 112, 101, 114, 105, 109, 101, 110, 116])],
          578365826: [
            Buffer.from([
              85,
              58,
              10,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              34,
              71,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified
     * [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
     */
    updateExperiment: {
      name: "UpdateExperiment",
      requestType: UpdateExperimentRequest,
      requestStream: false,
      responseType: Experiment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              96,
              58,
              10,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              50,
              82,
              47,
              118,
              51,
              47,
              123,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes the specified
     * [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
     */
    deleteExperiment: {
      name: "DeleteExperiment",
      requestType: DeleteExperimentRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              73,
              42,
              71,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Starts the specified
     * [Experiment][google.cloud.dialogflow.cx.v3.Experiment]. This rpc only
     * changes the state of experiment from PENDING to RUNNING.
     */
    startExperiment: {
      name: "StartExperiment",
      requestType: StartExperimentRequest,
      requestStream: false,
      responseType: Experiment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              82,
              58,
              1,
              42,
              34,
              77,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              97,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Stops the specified [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
     * This rpc only changes the state of experiment from RUNNING to DONE.
     */
    stopExperiment: {
      name: "StopExperiment",
      requestType: StopExperimentRequest,
      requestStream: false,
      responseType: Experiment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              81,
              58,
              1,
              42,
              34,
              76,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              111,
              112,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ExperimentsServiceImplementation<CallContextExt = {}> {
  /**
   * Returns the list of all experiments in the specified
   * [Environment][google.cloud.dialogflow.cx.v3.Environment].
   */
  listExperiments(
    request: ListExperimentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListExperimentsResponse>>;
  /**
   * Retrieves the specified
   * [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
   */
  getExperiment(request: GetExperimentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Experiment>>;
  /**
   * Creates an [Experiment][google.cloud.dialogflow.cx.v3.Experiment] in the
   * specified [Environment][google.cloud.dialogflow.cx.v3.Environment].
   */
  createExperiment(
    request: CreateExperimentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Experiment>>;
  /**
   * Updates the specified
   * [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
   */
  updateExperiment(
    request: UpdateExperimentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Experiment>>;
  /**
   * Deletes the specified
   * [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
   */
  deleteExperiment(
    request: DeleteExperimentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Starts the specified
   * [Experiment][google.cloud.dialogflow.cx.v3.Experiment]. This rpc only
   * changes the state of experiment from PENDING to RUNNING.
   */
  startExperiment(
    request: StartExperimentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Experiment>>;
  /**
   * Stops the specified [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
   * This rpc only changes the state of experiment from RUNNING to DONE.
   */
  stopExperiment(
    request: StopExperimentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Experiment>>;
}

export interface ExperimentsClient<CallOptionsExt = {}> {
  /**
   * Returns the list of all experiments in the specified
   * [Environment][google.cloud.dialogflow.cx.v3.Environment].
   */
  listExperiments(
    request: DeepPartial<ListExperimentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListExperimentsResponse>;
  /**
   * Retrieves the specified
   * [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
   */
  getExperiment(
    request: DeepPartial<GetExperimentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Experiment>;
  /**
   * Creates an [Experiment][google.cloud.dialogflow.cx.v3.Experiment] in the
   * specified [Environment][google.cloud.dialogflow.cx.v3.Environment].
   */
  createExperiment(
    request: DeepPartial<CreateExperimentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Experiment>;
  /**
   * Updates the specified
   * [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
   */
  updateExperiment(
    request: DeepPartial<UpdateExperimentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Experiment>;
  /**
   * Deletes the specified
   * [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
   */
  deleteExperiment(
    request: DeepPartial<DeleteExperimentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Starts the specified
   * [Experiment][google.cloud.dialogflow.cx.v3.Experiment]. This rpc only
   * changes the state of experiment from PENDING to RUNNING.
   */
  startExperiment(
    request: DeepPartial<StartExperimentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Experiment>;
  /**
   * Stops the specified [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
   * This rpc only changes the state of experiment from RUNNING to DONE.
   */
  stopExperiment(
    request: DeepPartial<StopExperimentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Experiment>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
