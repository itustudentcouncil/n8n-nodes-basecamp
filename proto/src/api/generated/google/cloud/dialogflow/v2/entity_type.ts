// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/v2/entity_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";

export const protobufPackage = "google.cloud.dialogflow.v2";

/**
 * Each intent parameter has a type, called the entity type, which dictates
 * exactly how data from an end-user expression is extracted.
 *
 * Dialogflow provides predefined system entities that can match many common
 * types of data. For example, there are system entities for matching dates,
 * times, colors, email addresses, and so on. You can also create your own
 * custom entities for matching custom data. For example, you could define a
 * vegetable entity that can match the types of vegetables available for
 * purchase with a grocery store agent.
 *
 * For more information, see the
 * [Entity guide](https://cloud.google.com/dialogflow/docs/entities-overview).
 */
export interface EntityType {
  /**
   * The unique identifier of the entity type.
   * Required for
   * [EntityTypes.UpdateEntityType][google.cloud.dialogflow.v2.EntityTypes.UpdateEntityType]
   * and
   * [EntityTypes.BatchUpdateEntityTypes][google.cloud.dialogflow.v2.EntityTypes.BatchUpdateEntityTypes]
   * methods. Format: `projects/<Project ID>/agent/entityTypes/<Entity Type
   * ID>`.
   */
  name: string;
  /** Required. The name of the entity type. */
  displayName: string;
  /** Required. Indicates the kind of entity type. */
  kind: EntityType_Kind;
  /**
   * Optional. Indicates whether the entity type can be automatically
   * expanded.
   */
  autoExpansionMode: EntityType_AutoExpansionMode;
  /** Optional. The collection of entity entries associated with the entity type. */
  entities: EntityType_Entity[];
  /** Optional. Enables fuzzy entity extraction during classification. */
  enableFuzzyExtraction: boolean;
}

/** Represents kinds of entities. */
export enum EntityType_Kind {
  /** KIND_UNSPECIFIED - Not specified. This value should be never used. */
  KIND_UNSPECIFIED = 0,
  /**
   * KIND_MAP - Map entity types allow mapping of a group of synonyms to a reference
   * value.
   */
  KIND_MAP = 1,
  /**
   * KIND_LIST - List entity types contain a set of entries that do not map to reference
   * values. However, list entity types can contain references to other entity
   * types (with or without aliases).
   */
  KIND_LIST = 2,
  /**
   * KIND_REGEXP - Regexp entity types allow to specify regular expressions in entries
   * values.
   */
  KIND_REGEXP = 3,
  UNRECOGNIZED = -1,
}

export function entityType_KindFromJSON(object: any): EntityType_Kind {
  switch (object) {
    case 0:
    case "KIND_UNSPECIFIED":
      return EntityType_Kind.KIND_UNSPECIFIED;
    case 1:
    case "KIND_MAP":
      return EntityType_Kind.KIND_MAP;
    case 2:
    case "KIND_LIST":
      return EntityType_Kind.KIND_LIST;
    case 3:
    case "KIND_REGEXP":
      return EntityType_Kind.KIND_REGEXP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EntityType_Kind.UNRECOGNIZED;
  }
}

export function entityType_KindToJSON(object: EntityType_Kind): string {
  switch (object) {
    case EntityType_Kind.KIND_UNSPECIFIED:
      return "KIND_UNSPECIFIED";
    case EntityType_Kind.KIND_MAP:
      return "KIND_MAP";
    case EntityType_Kind.KIND_LIST:
      return "KIND_LIST";
    case EntityType_Kind.KIND_REGEXP:
      return "KIND_REGEXP";
    case EntityType_Kind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Represents different entity type expansion modes. Automated expansion
 * allows an agent to recognize values that have not been explicitly listed in
 * the entity (for example, new kinds of shopping list items).
 */
export enum EntityType_AutoExpansionMode {
  /** AUTO_EXPANSION_MODE_UNSPECIFIED - Auto expansion disabled for the entity. */
  AUTO_EXPANSION_MODE_UNSPECIFIED = 0,
  /**
   * AUTO_EXPANSION_MODE_DEFAULT - Allows an agent to recognize values that have not been explicitly
   * listed in the entity.
   */
  AUTO_EXPANSION_MODE_DEFAULT = 1,
  UNRECOGNIZED = -1,
}

export function entityType_AutoExpansionModeFromJSON(object: any): EntityType_AutoExpansionMode {
  switch (object) {
    case 0:
    case "AUTO_EXPANSION_MODE_UNSPECIFIED":
      return EntityType_AutoExpansionMode.AUTO_EXPANSION_MODE_UNSPECIFIED;
    case 1:
    case "AUTO_EXPANSION_MODE_DEFAULT":
      return EntityType_AutoExpansionMode.AUTO_EXPANSION_MODE_DEFAULT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EntityType_AutoExpansionMode.UNRECOGNIZED;
  }
}

export function entityType_AutoExpansionModeToJSON(object: EntityType_AutoExpansionMode): string {
  switch (object) {
    case EntityType_AutoExpansionMode.AUTO_EXPANSION_MODE_UNSPECIFIED:
      return "AUTO_EXPANSION_MODE_UNSPECIFIED";
    case EntityType_AutoExpansionMode.AUTO_EXPANSION_MODE_DEFAULT:
      return "AUTO_EXPANSION_MODE_DEFAULT";
    case EntityType_AutoExpansionMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** An **entity entry** for an associated entity type. */
export interface EntityType_Entity {
  /**
   * Required. The primary value associated with this entity entry.
   * For example, if the entity type is *vegetable*, the value could be
   * *scallions*.
   *
   * For `KIND_MAP` entity types:
   *
   * *   A reference value to be used in place of synonyms.
   *
   * For `KIND_LIST` entity types:
   *
   * *   A string that can contain references to other entity types (with or
   *     without aliases).
   */
  value: string;
  /**
   * Required. A collection of value synonyms. For example, if the entity type
   * is *vegetable*, and `value` is *scallions*, a synonym could be *green
   * onions*.
   *
   * For `KIND_LIST` entity types:
   *
   * *   This collection must contain exactly one synonym equal to `value`.
   */
  synonyms: string[];
}

/**
 * The request message for
 * [EntityTypes.ListEntityTypes][google.cloud.dialogflow.v2.EntityTypes.ListEntityTypes].
 */
export interface ListEntityTypesRequest {
  /**
   * Required. The agent to list all entity types from.
   * Format: `projects/<Project ID>/agent`.
   */
  parent: string;
  /**
   * Optional. The language used to access language-specific data.
   * If not specified, the agent's default language is used.
   * For more information, see
   * [Multilingual intent and entity
   * data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
   */
  languageCode: string;
  /**
   * Optional. The maximum number of items to return in a single page. By
   * default 100 and at most 1000.
   */
  pageSize: number;
  /** Optional. The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [EntityTypes.ListEntityTypes][google.cloud.dialogflow.v2.EntityTypes.ListEntityTypes].
 */
export interface ListEntityTypesResponse {
  /**
   * The list of agent entity types. There will be a maximum number of items
   * returned based on the page_size field in the request.
   */
  entityTypes: EntityType[];
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [EntityTypes.GetEntityType][google.cloud.dialogflow.v2.EntityTypes.GetEntityType].
 */
export interface GetEntityTypeRequest {
  /**
   * Required. The name of the entity type.
   * Format: `projects/<Project ID>/agent/entityTypes/<EntityType ID>`.
   */
  name: string;
  /**
   * Optional. The language used to access language-specific data.
   * If not specified, the agent's default language is used.
   * For more information, see
   * [Multilingual intent and entity
   * data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
   */
  languageCode: string;
}

/**
 * The request message for
 * [EntityTypes.CreateEntityType][google.cloud.dialogflow.v2.EntityTypes.CreateEntityType].
 */
export interface CreateEntityTypeRequest {
  /**
   * Required. The agent to create a entity type for.
   * Format: `projects/<Project ID>/agent`.
   */
  parent: string;
  /** Required. The entity type to create. */
  entityType:
    | EntityType
    | undefined;
  /**
   * Optional. The language used to access language-specific data.
   * If not specified, the agent's default language is used.
   * For more information, see
   * [Multilingual intent and entity
   * data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
   */
  languageCode: string;
}

/**
 * The request message for
 * [EntityTypes.UpdateEntityType][google.cloud.dialogflow.v2.EntityTypes.UpdateEntityType].
 */
export interface UpdateEntityTypeRequest {
  /** Required. The entity type to update. */
  entityType:
    | EntityType
    | undefined;
  /**
   * Optional. The language used to access language-specific data.
   * If not specified, the agent's default language is used.
   * For more information, see
   * [Multilingual intent and entity
   * data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
   */
  languageCode: string;
  /** Optional. The mask to control which fields get updated. */
  updateMask: string[] | undefined;
}

/**
 * The request message for
 * [EntityTypes.DeleteEntityType][google.cloud.dialogflow.v2.EntityTypes.DeleteEntityType].
 */
export interface DeleteEntityTypeRequest {
  /**
   * Required. The name of the entity type to delete.
   * Format: `projects/<Project ID>/agent/entityTypes/<EntityType ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [EntityTypes.BatchUpdateEntityTypes][google.cloud.dialogflow.v2.EntityTypes.BatchUpdateEntityTypes].
 */
export interface BatchUpdateEntityTypesRequest {
  /**
   * Required. The name of the agent to update or create entity types in.
   * Format: `projects/<Project ID>/agent`.
   */
  parent: string;
  /**
   * The URI to a Google Cloud Storage file containing entity types to update
   * or create. The file format can either be a serialized proto (of
   * EntityBatch type) or a JSON object. Note: The URI must start with
   * "gs://".
   */
  entityTypeBatchUri?:
    | string
    | undefined;
  /** The collection of entity types to update or create. */
  entityTypeBatchInline?:
    | EntityTypeBatch
    | undefined;
  /**
   * Optional. The language used to access language-specific data.
   * If not specified, the agent's default language is used.
   * For more information, see
   * [Multilingual intent and entity
   * data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
   */
  languageCode: string;
  /** Optional. The mask to control which fields get updated. */
  updateMask: string[] | undefined;
}

/**
 * The response message for
 * [EntityTypes.BatchUpdateEntityTypes][google.cloud.dialogflow.v2.EntityTypes.BatchUpdateEntityTypes].
 */
export interface BatchUpdateEntityTypesResponse {
  /** The collection of updated or created entity types. */
  entityTypes: EntityType[];
}

/**
 * The request message for
 * [EntityTypes.BatchDeleteEntityTypes][google.cloud.dialogflow.v2.EntityTypes.BatchDeleteEntityTypes].
 */
export interface BatchDeleteEntityTypesRequest {
  /**
   * Required. The name of the agent to delete all entities types for. Format:
   * `projects/<Project ID>/agent`.
   */
  parent: string;
  /**
   * Required. The names entity types to delete. All names must point to the
   * same agent as `parent`.
   */
  entityTypeNames: string[];
}

/**
 * The request message for
 * [EntityTypes.BatchCreateEntities][google.cloud.dialogflow.v2.EntityTypes.BatchCreateEntities].
 */
export interface BatchCreateEntitiesRequest {
  /**
   * Required. The name of the entity type to create entities in. Format:
   * `projects/<Project ID>/agent/entityTypes/<Entity Type ID>`.
   */
  parent: string;
  /** Required. The entities to create. */
  entities: EntityType_Entity[];
  /**
   * Optional. The language used to access language-specific data.
   * If not specified, the agent's default language is used.
   * For more information, see
   * [Multilingual intent and entity
   * data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
   */
  languageCode: string;
}

/**
 * The request message for
 * [EntityTypes.BatchUpdateEntities][google.cloud.dialogflow.v2.EntityTypes.BatchUpdateEntities].
 */
export interface BatchUpdateEntitiesRequest {
  /**
   * Required. The name of the entity type to update or create entities in.
   * Format: `projects/<Project ID>/agent/entityTypes/<Entity Type ID>`.
   */
  parent: string;
  /** Required. The entities to update or create. */
  entities: EntityType_Entity[];
  /**
   * Optional. The language used to access language-specific data.
   * If not specified, the agent's default language is used.
   * For more information, see
   * [Multilingual intent and entity
   * data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
   */
  languageCode: string;
  /** Optional. The mask to control which fields get updated. */
  updateMask: string[] | undefined;
}

/**
 * The request message for
 * [EntityTypes.BatchDeleteEntities][google.cloud.dialogflow.v2.EntityTypes.BatchDeleteEntities].
 */
export interface BatchDeleteEntitiesRequest {
  /**
   * Required. The name of the entity type to delete entries for. Format:
   * `projects/<Project ID>/agent/entityTypes/<Entity Type ID>`.
   */
  parent: string;
  /**
   * Required. The reference `values` of the entities to delete. Note that
   * these are not fully-qualified names, i.e. they don't start with
   * `projects/<Project ID>`.
   */
  entityValues: string[];
  /**
   * Optional. The language used to access language-specific data.
   * If not specified, the agent's default language is used.
   * For more information, see
   * [Multilingual intent and entity
   * data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
   */
  languageCode: string;
}

/** This message is a wrapper around a collection of entity types. */
export interface EntityTypeBatch {
  /** A collection of entity types. */
  entityTypes: EntityType[];
}

function createBaseEntityType(): EntityType {
  return { name: "", displayName: "", kind: 0, autoExpansionMode: 0, entities: [], enableFuzzyExtraction: false };
}

export const EntityType: MessageFns<EntityType> = {
  encode(message: EntityType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.kind !== 0) {
      writer.uint32(24).int32(message.kind);
    }
    if (message.autoExpansionMode !== 0) {
      writer.uint32(32).int32(message.autoExpansionMode);
    }
    for (const v of message.entities) {
      EntityType_Entity.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.enableFuzzyExtraction !== false) {
      writer.uint32(56).bool(message.enableFuzzyExtraction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.autoExpansionMode = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.entities.push(EntityType_Entity.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.enableFuzzyExtraction = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityType {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      kind: isSet(object.kind) ? entityType_KindFromJSON(object.kind) : 0,
      autoExpansionMode: isSet(object.autoExpansionMode)
        ? entityType_AutoExpansionModeFromJSON(object.autoExpansionMode)
        : 0,
      entities: globalThis.Array.isArray(object?.entities)
        ? object.entities.map((e: any) => EntityType_Entity.fromJSON(e))
        : [],
      enableFuzzyExtraction: isSet(object.enableFuzzyExtraction)
        ? globalThis.Boolean(object.enableFuzzyExtraction)
        : false,
    };
  },

  toJSON(message: EntityType): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.kind !== 0) {
      obj.kind = entityType_KindToJSON(message.kind);
    }
    if (message.autoExpansionMode !== 0) {
      obj.autoExpansionMode = entityType_AutoExpansionModeToJSON(message.autoExpansionMode);
    }
    if (message.entities?.length) {
      obj.entities = message.entities.map((e) => EntityType_Entity.toJSON(e));
    }
    if (message.enableFuzzyExtraction !== false) {
      obj.enableFuzzyExtraction = message.enableFuzzyExtraction;
    }
    return obj;
  },

  create(base?: DeepPartial<EntityType>): EntityType {
    return EntityType.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EntityType>): EntityType {
    const message = createBaseEntityType();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.kind = object.kind ?? 0;
    message.autoExpansionMode = object.autoExpansionMode ?? 0;
    message.entities = object.entities?.map((e) => EntityType_Entity.fromPartial(e)) || [];
    message.enableFuzzyExtraction = object.enableFuzzyExtraction ?? false;
    return message;
  },
};

function createBaseEntityType_Entity(): EntityType_Entity {
  return { value: "", synonyms: [] };
}

export const EntityType_Entity: MessageFns<EntityType_Entity> = {
  encode(message: EntityType_Entity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    for (const v of message.synonyms) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityType_Entity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityType_Entity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.synonyms.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityType_Entity {
    return {
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      synonyms: globalThis.Array.isArray(object?.synonyms) ? object.synonyms.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: EntityType_Entity): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.synonyms?.length) {
      obj.synonyms = message.synonyms;
    }
    return obj;
  },

  create(base?: DeepPartial<EntityType_Entity>): EntityType_Entity {
    return EntityType_Entity.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EntityType_Entity>): EntityType_Entity {
    const message = createBaseEntityType_Entity();
    message.value = object.value ?? "";
    message.synonyms = object.synonyms?.map((e) => e) || [];
    return message;
  },
};

function createBaseListEntityTypesRequest(): ListEntityTypesRequest {
  return { parent: "", languageCode: "", pageSize: 0, pageToken: "" };
}

export const ListEntityTypesRequest: MessageFns<ListEntityTypesRequest> = {
  encode(message: ListEntityTypesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEntityTypesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEntityTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEntityTypesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListEntityTypesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEntityTypesRequest>): ListEntityTypesRequest {
    return ListEntityTypesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEntityTypesRequest>): ListEntityTypesRequest {
    const message = createBaseListEntityTypesRequest();
    message.parent = object.parent ?? "";
    message.languageCode = object.languageCode ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListEntityTypesResponse(): ListEntityTypesResponse {
  return { entityTypes: [], nextPageToken: "" };
}

export const ListEntityTypesResponse: MessageFns<ListEntityTypesResponse> = {
  encode(message: ListEntityTypesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entityTypes) {
      EntityType.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEntityTypesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEntityTypesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entityTypes.push(EntityType.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEntityTypesResponse {
    return {
      entityTypes: globalThis.Array.isArray(object?.entityTypes)
        ? object.entityTypes.map((e: any) => EntityType.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListEntityTypesResponse): unknown {
    const obj: any = {};
    if (message.entityTypes?.length) {
      obj.entityTypes = message.entityTypes.map((e) => EntityType.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEntityTypesResponse>): ListEntityTypesResponse {
    return ListEntityTypesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEntityTypesResponse>): ListEntityTypesResponse {
    const message = createBaseListEntityTypesResponse();
    message.entityTypes = object.entityTypes?.map((e) => EntityType.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetEntityTypeRequest(): GetEntityTypeRequest {
  return { name: "", languageCode: "" };
}

export const GetEntityTypeRequest: MessageFns<GetEntityTypeRequest> = {
  encode(message: GetEntityTypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEntityTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEntityTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEntityTypeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: GetEntityTypeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEntityTypeRequest>): GetEntityTypeRequest {
    return GetEntityTypeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEntityTypeRequest>): GetEntityTypeRequest {
    const message = createBaseGetEntityTypeRequest();
    message.name = object.name ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseCreateEntityTypeRequest(): CreateEntityTypeRequest {
  return { parent: "", entityType: undefined, languageCode: "" };
}

export const CreateEntityTypeRequest: MessageFns<CreateEntityTypeRequest> = {
  encode(message: CreateEntityTypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.entityType !== undefined) {
      EntityType.encode(message.entityType, writer.uint32(18).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEntityTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEntityTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entityType = EntityType.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEntityTypeRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      entityType: isSet(object.entityType) ? EntityType.fromJSON(object.entityType) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: CreateEntityTypeRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.entityType !== undefined) {
      obj.entityType = EntityType.toJSON(message.entityType);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEntityTypeRequest>): CreateEntityTypeRequest {
    return CreateEntityTypeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEntityTypeRequest>): CreateEntityTypeRequest {
    const message = createBaseCreateEntityTypeRequest();
    message.parent = object.parent ?? "";
    message.entityType = (object.entityType !== undefined && object.entityType !== null)
      ? EntityType.fromPartial(object.entityType)
      : undefined;
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseUpdateEntityTypeRequest(): UpdateEntityTypeRequest {
  return { entityType: undefined, languageCode: "", updateMask: undefined };
}

export const UpdateEntityTypeRequest: MessageFns<UpdateEntityTypeRequest> = {
  encode(message: UpdateEntityTypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entityType !== undefined) {
      EntityType.encode(message.entityType, writer.uint32(10).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEntityTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEntityTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entityType = EntityType.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEntityTypeRequest {
    return {
      entityType: isSet(object.entityType) ? EntityType.fromJSON(object.entityType) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateEntityTypeRequest): unknown {
    const obj: any = {};
    if (message.entityType !== undefined) {
      obj.entityType = EntityType.toJSON(message.entityType);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEntityTypeRequest>): UpdateEntityTypeRequest {
    return UpdateEntityTypeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEntityTypeRequest>): UpdateEntityTypeRequest {
    const message = createBaseUpdateEntityTypeRequest();
    message.entityType = (object.entityType !== undefined && object.entityType !== null)
      ? EntityType.fromPartial(object.entityType)
      : undefined;
    message.languageCode = object.languageCode ?? "";
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteEntityTypeRequest(): DeleteEntityTypeRequest {
  return { name: "" };
}

export const DeleteEntityTypeRequest: MessageFns<DeleteEntityTypeRequest> = {
  encode(message: DeleteEntityTypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEntityTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEntityTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEntityTypeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteEntityTypeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEntityTypeRequest>): DeleteEntityTypeRequest {
    return DeleteEntityTypeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEntityTypeRequest>): DeleteEntityTypeRequest {
    const message = createBaseDeleteEntityTypeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseBatchUpdateEntityTypesRequest(): BatchUpdateEntityTypesRequest {
  return {
    parent: "",
    entityTypeBatchUri: undefined,
    entityTypeBatchInline: undefined,
    languageCode: "",
    updateMask: undefined,
  };
}

export const BatchUpdateEntityTypesRequest: MessageFns<BatchUpdateEntityTypesRequest> = {
  encode(message: BatchUpdateEntityTypesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.entityTypeBatchUri !== undefined) {
      writer.uint32(18).string(message.entityTypeBatchUri);
    }
    if (message.entityTypeBatchInline !== undefined) {
      EntityTypeBatch.encode(message.entityTypeBatchInline, writer.uint32(26).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(34).string(message.languageCode);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchUpdateEntityTypesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchUpdateEntityTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entityTypeBatchUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.entityTypeBatchInline = EntityTypeBatch.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchUpdateEntityTypesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      entityTypeBatchUri: isSet(object.entityTypeBatchUri) ? globalThis.String(object.entityTypeBatchUri) : undefined,
      entityTypeBatchInline: isSet(object.entityTypeBatchInline)
        ? EntityTypeBatch.fromJSON(object.entityTypeBatchInline)
        : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: BatchUpdateEntityTypesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.entityTypeBatchUri !== undefined) {
      obj.entityTypeBatchUri = message.entityTypeBatchUri;
    }
    if (message.entityTypeBatchInline !== undefined) {
      obj.entityTypeBatchInline = EntityTypeBatch.toJSON(message.entityTypeBatchInline);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchUpdateEntityTypesRequest>): BatchUpdateEntityTypesRequest {
    return BatchUpdateEntityTypesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchUpdateEntityTypesRequest>): BatchUpdateEntityTypesRequest {
    const message = createBaseBatchUpdateEntityTypesRequest();
    message.parent = object.parent ?? "";
    message.entityTypeBatchUri = object.entityTypeBatchUri ?? undefined;
    message.entityTypeBatchInline =
      (object.entityTypeBatchInline !== undefined && object.entityTypeBatchInline !== null)
        ? EntityTypeBatch.fromPartial(object.entityTypeBatchInline)
        : undefined;
    message.languageCode = object.languageCode ?? "";
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseBatchUpdateEntityTypesResponse(): BatchUpdateEntityTypesResponse {
  return { entityTypes: [] };
}

export const BatchUpdateEntityTypesResponse: MessageFns<BatchUpdateEntityTypesResponse> = {
  encode(message: BatchUpdateEntityTypesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entityTypes) {
      EntityType.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchUpdateEntityTypesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchUpdateEntityTypesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entityTypes.push(EntityType.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchUpdateEntityTypesResponse {
    return {
      entityTypes: globalThis.Array.isArray(object?.entityTypes)
        ? object.entityTypes.map((e: any) => EntityType.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchUpdateEntityTypesResponse): unknown {
    const obj: any = {};
    if (message.entityTypes?.length) {
      obj.entityTypes = message.entityTypes.map((e) => EntityType.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchUpdateEntityTypesResponse>): BatchUpdateEntityTypesResponse {
    return BatchUpdateEntityTypesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchUpdateEntityTypesResponse>): BatchUpdateEntityTypesResponse {
    const message = createBaseBatchUpdateEntityTypesResponse();
    message.entityTypes = object.entityTypes?.map((e) => EntityType.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBatchDeleteEntityTypesRequest(): BatchDeleteEntityTypesRequest {
  return { parent: "", entityTypeNames: [] };
}

export const BatchDeleteEntityTypesRequest: MessageFns<BatchDeleteEntityTypesRequest> = {
  encode(message: BatchDeleteEntityTypesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.entityTypeNames) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchDeleteEntityTypesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchDeleteEntityTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entityTypeNames.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchDeleteEntityTypesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      entityTypeNames: globalThis.Array.isArray(object?.entityTypeNames)
        ? object.entityTypeNames.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: BatchDeleteEntityTypesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.entityTypeNames?.length) {
      obj.entityTypeNames = message.entityTypeNames;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchDeleteEntityTypesRequest>): BatchDeleteEntityTypesRequest {
    return BatchDeleteEntityTypesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchDeleteEntityTypesRequest>): BatchDeleteEntityTypesRequest {
    const message = createBaseBatchDeleteEntityTypesRequest();
    message.parent = object.parent ?? "";
    message.entityTypeNames = object.entityTypeNames?.map((e) => e) || [];
    return message;
  },
};

function createBaseBatchCreateEntitiesRequest(): BatchCreateEntitiesRequest {
  return { parent: "", entities: [], languageCode: "" };
}

export const BatchCreateEntitiesRequest: MessageFns<BatchCreateEntitiesRequest> = {
  encode(message: BatchCreateEntitiesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.entities) {
      EntityType_Entity.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateEntitiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateEntitiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entities.push(EntityType_Entity.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateEntitiesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      entities: globalThis.Array.isArray(object?.entities)
        ? object.entities.map((e: any) => EntityType_Entity.fromJSON(e))
        : [],
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: BatchCreateEntitiesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.entities?.length) {
      obj.entities = message.entities.map((e) => EntityType_Entity.toJSON(e));
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateEntitiesRequest>): BatchCreateEntitiesRequest {
    return BatchCreateEntitiesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateEntitiesRequest>): BatchCreateEntitiesRequest {
    const message = createBaseBatchCreateEntitiesRequest();
    message.parent = object.parent ?? "";
    message.entities = object.entities?.map((e) => EntityType_Entity.fromPartial(e)) || [];
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseBatchUpdateEntitiesRequest(): BatchUpdateEntitiesRequest {
  return { parent: "", entities: [], languageCode: "", updateMask: undefined };
}

export const BatchUpdateEntitiesRequest: MessageFns<BatchUpdateEntitiesRequest> = {
  encode(message: BatchUpdateEntitiesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.entities) {
      EntityType_Entity.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchUpdateEntitiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchUpdateEntitiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entities.push(EntityType_Entity.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchUpdateEntitiesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      entities: globalThis.Array.isArray(object?.entities)
        ? object.entities.map((e: any) => EntityType_Entity.fromJSON(e))
        : [],
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: BatchUpdateEntitiesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.entities?.length) {
      obj.entities = message.entities.map((e) => EntityType_Entity.toJSON(e));
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchUpdateEntitiesRequest>): BatchUpdateEntitiesRequest {
    return BatchUpdateEntitiesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchUpdateEntitiesRequest>): BatchUpdateEntitiesRequest {
    const message = createBaseBatchUpdateEntitiesRequest();
    message.parent = object.parent ?? "";
    message.entities = object.entities?.map((e) => EntityType_Entity.fromPartial(e)) || [];
    message.languageCode = object.languageCode ?? "";
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseBatchDeleteEntitiesRequest(): BatchDeleteEntitiesRequest {
  return { parent: "", entityValues: [], languageCode: "" };
}

export const BatchDeleteEntitiesRequest: MessageFns<BatchDeleteEntitiesRequest> = {
  encode(message: BatchDeleteEntitiesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.entityValues) {
      writer.uint32(18).string(v!);
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchDeleteEntitiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchDeleteEntitiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entityValues.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchDeleteEntitiesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      entityValues: globalThis.Array.isArray(object?.entityValues)
        ? object.entityValues.map((e: any) => globalThis.String(e))
        : [],
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: BatchDeleteEntitiesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.entityValues?.length) {
      obj.entityValues = message.entityValues;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchDeleteEntitiesRequest>): BatchDeleteEntitiesRequest {
    return BatchDeleteEntitiesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchDeleteEntitiesRequest>): BatchDeleteEntitiesRequest {
    const message = createBaseBatchDeleteEntitiesRequest();
    message.parent = object.parent ?? "";
    message.entityValues = object.entityValues?.map((e) => e) || [];
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseEntityTypeBatch(): EntityTypeBatch {
  return { entityTypes: [] };
}

export const EntityTypeBatch: MessageFns<EntityTypeBatch> = {
  encode(message: EntityTypeBatch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entityTypes) {
      EntityType.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityTypeBatch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityTypeBatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entityTypes.push(EntityType.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityTypeBatch {
    return {
      entityTypes: globalThis.Array.isArray(object?.entityTypes)
        ? object.entityTypes.map((e: any) => EntityType.fromJSON(e))
        : [],
    };
  },

  toJSON(message: EntityTypeBatch): unknown {
    const obj: any = {};
    if (message.entityTypes?.length) {
      obj.entityTypes = message.entityTypes.map((e) => EntityType.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<EntityTypeBatch>): EntityTypeBatch {
    return EntityTypeBatch.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EntityTypeBatch>): EntityTypeBatch {
    const message = createBaseEntityTypeBatch();
    message.entityTypes = object.entityTypes?.map((e) => EntityType.fromPartial(e)) || [];
    return message;
  },
};

/** Service for managing [EntityTypes][google.cloud.dialogflow.v2.EntityType]. */
export type EntityTypesDefinition = typeof EntityTypesDefinition;
export const EntityTypesDefinition = {
  name: "EntityTypes",
  fullName: "google.cloud.dialogflow.v2.EntityTypes",
  methods: {
    /** Returns the list of all entity types in the specified agent. */
    listEntityTypes: {
      name: "ListEntityTypes",
      requestType: ListEntityTypesRequest,
      requestStream: false,
      responseType: ListEntityTypesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([6, 112, 97, 114, 101, 110, 116]),
            Buffer.from([
              20,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              95,
              99,
              111,
              100,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              100,
              90,
              55,
              18,
              53,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              18,
              41,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves the specified entity type. */
    getEntityType: {
      name: "GetEntityType",
      requestType: GetEntityTypeRequest,
      requestStream: false,
      responseType: EntityType,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([4, 110, 97, 109, 101]),
            Buffer.from([18, 110, 97, 109, 101, 44, 108, 97, 110, 103, 117, 97, 103, 101, 95, 99, 111, 100, 101]),
          ],
          578365826: [
            Buffer.from([
              100,
              90,
              55,
              18,
              53,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              18,
              41,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates an entity type in the specified agent.
     *
     * Note: You should always train an agent prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/es/docs/training).
     */
    createEntityType: {
      name: "CreateEntityType",
      requestType: CreateEntityTypeRequest,
      requestStream: false,
      responseType: EntityType,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([18, 112, 97, 114, 101, 110, 116, 44, 101, 110, 116, 105, 116, 121, 95, 116, 121, 112, 101]),
            Buffer.from([
              32,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              44,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              95,
              99,
              111,
              100,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              126,
              58,
              11,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              90,
              68,
              58,
              11,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              34,
              53,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              34,
              41,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified entity type.
     *
     * Note: You should always train an agent prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/es/docs/training).
     */
    updateEntityType: {
      name: "UpdateEntityType",
      requestType: UpdateEntityTypeRequest,
      requestStream: false,
      responseType: EntityType,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([11, 101, 110, 116, 105, 116, 121, 95, 116, 121, 112, 101]),
            Buffer.from([
              25,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              44,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              95,
              99,
              111,
              100,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              150,
              1,
              58,
              11,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              90,
              80,
              58,
              11,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              50,
              65,
              47,
              118,
              50,
              47,
              123,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              50,
              53,
              47,
              118,
              50,
              47,
              123,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes the specified entity type.
     *
     * Note: You should always train an agent prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/es/docs/training).
     */
    deleteEntityType: {
      name: "DeleteEntityType",
      requestType: DeleteEntityTypeRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              100,
              90,
              55,
              42,
              53,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              42,
              41,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates/Creates multiple entity types in the specified agent.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`:
     * [BatchUpdateEntityTypesResponse][google.cloud.dialogflow.v2.BatchUpdateEntityTypesResponse]
     *
     * Note: You should always train an agent prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/es/docs/training).
     */
    batchUpdateEntityTypes: {
      name: "BatchUpdateEntityTypes",
      requestType: BatchUpdateEntityTypesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              83,
              10,
              57,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              97,
              108,
              111,
              103,
              102,
              108,
              111,
              119,
              46,
              118,
              50,
              46,
              66,
              97,
              116,
              99,
              104,
              85,
              112,
              100,
              97,
              116,
              101,
              69,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              130,
              1,
              58,
              1,
              42,
              90,
              70,
              58,
              1,
              42,
              34,
              65,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              85,
              112,
              100,
              97,
              116,
              101,
              34,
              53,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              85,
              112,
              100,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes entity types in the specified agent.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`: An [Empty
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
     *
     * Note: You should always train an agent prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/es/docs/training).
     */
    batchDeleteEntityTypes: {
      name: "BatchDeleteEntityTypes",
      requestType: BatchDeleteEntityTypesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              47,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          8410: [
            Buffer.from([
              24,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              95,
              110,
              97,
              109,
              101,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              130,
              1,
              58,
              1,
              42,
              90,
              70,
              58,
              1,
              42,
              34,
              65,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              68,
              101,
              108,
              101,
              116,
              101,
              34,
              53,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              68,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Creates multiple new entities in the specified entity type.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`: An [Empty
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
     *
     * Note: You should always train an agent prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/es/docs/training).
     */
    batchCreateEntities: {
      name: "BatchCreateEntities",
      requestType: BatchCreateEntitiesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              47,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          8410: [
            Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 101, 110, 116, 105, 116, 105, 101, 115]),
            Buffer.from([
              29,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              110,
              116,
              105,
              116,
              105,
              101,
              115,
              44,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              95,
              99,
              111,
              100,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              152,
              1,
              58,
              1,
              42,
              90,
              81,
              58,
              1,
              42,
              34,
              76,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              105,
              101,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              67,
              114,
              101,
              97,
              116,
              101,
              34,
              64,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              105,
              101,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              67,
              114,
              101,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Updates or creates multiple entities in the specified entity type. This
     * method does not affect entities in the entity type that aren't explicitly
     * specified in the request.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`: An [Empty
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
     *
     * Note: You should always train an agent prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/es/docs/training).
     */
    batchUpdateEntities: {
      name: "BatchUpdateEntities",
      requestType: BatchUpdateEntitiesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              47,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          8410: [
            Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 101, 110, 116, 105, 116, 105, 101, 115]),
            Buffer.from([
              29,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              110,
              116,
              105,
              116,
              105,
              101,
              115,
              44,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              95,
              99,
              111,
              100,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              152,
              1,
              58,
              1,
              42,
              90,
              81,
              58,
              1,
              42,
              34,
              76,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              105,
              101,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              85,
              112,
              100,
              97,
              116,
              101,
              34,
              64,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              105,
              101,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              85,
              112,
              100,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes entities in the specified entity type.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`: An [Empty
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
     *
     * Note: You should always train an agent prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/es/docs/training).
     */
    batchDeleteEntities: {
      name: "BatchDeleteEntities",
      requestType: BatchDeleteEntitiesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              47,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          8410: [
            Buffer.from([
              20,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              118,
              97,
              108,
              117,
              101,
              115,
            ]),
            Buffer.from([
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              118,
              97,
              108,
              117,
              101,
              115,
              44,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              95,
              99,
              111,
              100,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              152,
              1,
              58,
              1,
              42,
              90,
              81,
              58,
              1,
              42,
              34,
              76,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              105,
              101,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              68,
              101,
              108,
              101,
              116,
              101,
              34,
              64,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              105,
              101,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              68,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface EntityTypesServiceImplementation<CallContextExt = {}> {
  /** Returns the list of all entity types in the specified agent. */
  listEntityTypes(
    request: ListEntityTypesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEntityTypesResponse>>;
  /** Retrieves the specified entity type. */
  getEntityType(request: GetEntityTypeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<EntityType>>;
  /**
   * Creates an entity type in the specified agent.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  createEntityType(
    request: CreateEntityTypeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EntityType>>;
  /**
   * Updates the specified entity type.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  updateEntityType(
    request: UpdateEntityTypeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EntityType>>;
  /**
   * Deletes the specified entity type.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  deleteEntityType(
    request: DeleteEntityTypeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Updates/Creates multiple entity types in the specified agent.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`:
   * [BatchUpdateEntityTypesResponse][google.cloud.dialogflow.v2.BatchUpdateEntityTypesResponse]
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  batchUpdateEntityTypes(
    request: BatchUpdateEntityTypesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes entity types in the specified agent.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  batchDeleteEntityTypes(
    request: BatchDeleteEntityTypesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Creates multiple new entities in the specified entity type.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  batchCreateEntities(
    request: BatchCreateEntitiesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates or creates multiple entities in the specified entity type. This
   * method does not affect entities in the entity type that aren't explicitly
   * specified in the request.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  batchUpdateEntities(
    request: BatchUpdateEntitiesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes entities in the specified entity type.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  batchDeleteEntities(
    request: BatchDeleteEntitiesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface EntityTypesClient<CallOptionsExt = {}> {
  /** Returns the list of all entity types in the specified agent. */
  listEntityTypes(
    request: DeepPartial<ListEntityTypesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEntityTypesResponse>;
  /** Retrieves the specified entity type. */
  getEntityType(
    request: DeepPartial<GetEntityTypeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EntityType>;
  /**
   * Creates an entity type in the specified agent.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  createEntityType(
    request: DeepPartial<CreateEntityTypeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EntityType>;
  /**
   * Updates the specified entity type.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  updateEntityType(
    request: DeepPartial<UpdateEntityTypeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EntityType>;
  /**
   * Deletes the specified entity type.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  deleteEntityType(
    request: DeepPartial<DeleteEntityTypeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Updates/Creates multiple entity types in the specified agent.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`:
   * [BatchUpdateEntityTypesResponse][google.cloud.dialogflow.v2.BatchUpdateEntityTypesResponse]
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  batchUpdateEntityTypes(
    request: DeepPartial<BatchUpdateEntityTypesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes entity types in the specified agent.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  batchDeleteEntityTypes(
    request: DeepPartial<BatchDeleteEntityTypesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Creates multiple new entities in the specified entity type.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  batchCreateEntities(
    request: DeepPartial<BatchCreateEntitiesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates or creates multiple entities in the specified entity type. This
   * method does not affect entities in the entity type that aren't explicitly
   * specified in the request.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  batchUpdateEntities(
    request: DeepPartial<BatchUpdateEntitiesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes entities in the specified entity type.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  batchDeleteEntities(
    request: DeepPartial<BatchDeleteEntitiesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
