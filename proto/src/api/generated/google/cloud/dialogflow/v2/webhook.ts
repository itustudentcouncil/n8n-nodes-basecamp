// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/v2/webhook.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../../protobuf/struct.js";
import { Context } from "./context.js";
import { Intent_Message } from "./intent.js";
import { EventInput, QueryResult } from "./session.js";
import { SessionEntityType } from "./session_entity_type.js";

export const protobufPackage = "google.cloud.dialogflow.v2";

/** The request message for a webhook call. */
export interface WebhookRequest {
  /**
   * The unique identifier of detectIntent request session.
   * Can be used to identify end-user inside webhook implementation.
   * Format: `projects/<Project ID>/agent/sessions/<Session ID>`, or
   * `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
   * ID>/sessions/<Session ID>`.
   */
  session: string;
  /**
   * The unique identifier of the response. Contains the same value as
   * `[Streaming]DetectIntentResponse.response_id`.
   */
  responseId: string;
  /**
   * The result of the conversational query or event processing. Contains the
   * same value as `[Streaming]DetectIntentResponse.query_result`.
   */
  queryResult:
    | QueryResult
    | undefined;
  /**
   * Optional. The contents of the original request that was passed to
   * `[Streaming]DetectIntent` call.
   */
  originalDetectIntentRequest: OriginalDetectIntentRequest | undefined;
}

/**
 * The response message for a webhook call.
 *
 * This response is validated by the Dialogflow server. If validation fails,
 * an error will be returned in the
 * [QueryResult.diagnostic_info][google.cloud.dialogflow.v2.QueryResult.diagnostic_info]
 * field. Setting JSON fields to an empty value with the wrong type is a common
 * error. To avoid this error:
 *
 * - Use `""` for empty strings
 * - Use `{}` or `null` for empty objects
 * - Use `[]` or `null` for empty arrays
 *
 * For more information, see the
 * [Protocol Buffers Language
 * Guide](https://developers.google.com/protocol-buffers/docs/proto3#json).
 */
export interface WebhookResponse {
  /**
   * Optional. The text response message intended for the end-user.
   * It is recommended to use `fulfillment_messages.text.text[0]` instead.
   * When provided, Dialogflow uses this field to populate
   * [QueryResult.fulfillment_text][google.cloud.dialogflow.v2.QueryResult.fulfillment_text]
   * sent to the integration or API caller.
   */
  fulfillmentText: string;
  /**
   * Optional. The rich response messages intended for the end-user.
   * When provided, Dialogflow uses this field to populate
   * [QueryResult.fulfillment_messages][google.cloud.dialogflow.v2.QueryResult.fulfillment_messages]
   * sent to the integration or API caller.
   */
  fulfillmentMessages: Intent_Message[];
  /**
   * Optional. A custom field used to identify the webhook source.
   * Arbitrary strings are supported.
   * When provided, Dialogflow uses this field to populate
   * [QueryResult.webhook_source][google.cloud.dialogflow.v2.QueryResult.webhook_source]
   * sent to the integration or API caller.
   */
  source: string;
  /**
   * Optional. This field can be used to pass custom data from your webhook to
   * the integration or API caller. Arbitrary JSON objects are supported. When
   * provided, Dialogflow uses this field to populate
   * [QueryResult.webhook_payload][google.cloud.dialogflow.v2.QueryResult.webhook_payload]
   * sent to the integration or API caller. This field is also used by the
   * [Google Assistant
   * integration](https://cloud.google.com/dialogflow/docs/integrations/aog)
   * for rich response messages.
   * See the format definition at [Google Assistant Dialogflow webhook
   * format](https://developers.google.com/assistant/actions/build/json/dialogflow-webhook-json)
   */
  payload:
    | { [key: string]: any }
    | undefined;
  /**
   * Optional. The collection of output contexts that will overwrite currently
   * active contexts for the session and reset their lifespans.
   * When provided, Dialogflow uses this field to populate
   * [QueryResult.output_contexts][google.cloud.dialogflow.v2.QueryResult.output_contexts]
   * sent to the integration or API caller.
   */
  outputContexts: Context[];
  /**
   * Optional. Invokes the supplied events.
   * When this field is set, Dialogflow ignores the `fulfillment_text`,
   * `fulfillment_messages`, and `payload` fields.
   */
  followupEventInput:
    | EventInput
    | undefined;
  /**
   * Optional. Additional session entity types to replace or extend developer
   * entity types with. The entity synonyms apply to all languages and persist
   * for the session. Setting this data from a webhook overwrites
   * the session entity types that have been set using `detectIntent`,
   * `streamingDetectIntent` or
   * [SessionEntityType][google.cloud.dialogflow.v2.SessionEntityType]
   * management methods.
   */
  sessionEntityTypes: SessionEntityType[];
}

/**
 * Represents the contents of the original request that was passed to
 * the `[Streaming]DetectIntent` call.
 */
export interface OriginalDetectIntentRequest {
  /**
   * The source of this request, e.g., `google`, `facebook`, `slack`. It is set
   * by Dialogflow-owned servers.
   */
  source: string;
  /**
   * Optional. The version of the protocol used for this request.
   * This field is AoG-specific.
   */
  version: string;
  /**
   * Optional. This field is set to the value of the `QueryParameters.payload`
   * field passed in the request. Some integrations that query a Dialogflow
   * agent may provide additional information in the payload.
   *
   * In particular, for the Dialogflow Phone Gateway integration, this field has
   * the form:
   * <pre>{
   *  "telephony": {
   *    "caller_id": "+18558363987"
   *  }
   * }</pre>
   * Note: The caller ID field (`caller_id`) will be redacted for Trial
   * Edition agents and populated with the caller ID in [E.164
   * format](https://en.wikipedia.org/wiki/E.164) for Essentials Edition agents.
   */
  payload: { [key: string]: any } | undefined;
}

function createBaseWebhookRequest(): WebhookRequest {
  return { session: "", responseId: "", queryResult: undefined, originalDetectIntentRequest: undefined };
}

export const WebhookRequest: MessageFns<WebhookRequest> = {
  encode(message: WebhookRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.session !== "") {
      writer.uint32(34).string(message.session);
    }
    if (message.responseId !== "") {
      writer.uint32(10).string(message.responseId);
    }
    if (message.queryResult !== undefined) {
      QueryResult.encode(message.queryResult, writer.uint32(18).fork()).join();
    }
    if (message.originalDetectIntentRequest !== undefined) {
      OriginalDetectIntentRequest.encode(message.originalDetectIntentRequest, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebhookRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebhookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.session = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.responseId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queryResult = QueryResult.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.originalDetectIntentRequest = OriginalDetectIntentRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebhookRequest {
    return {
      session: isSet(object.session) ? globalThis.String(object.session) : "",
      responseId: isSet(object.responseId) ? globalThis.String(object.responseId) : "",
      queryResult: isSet(object.queryResult) ? QueryResult.fromJSON(object.queryResult) : undefined,
      originalDetectIntentRequest: isSet(object.originalDetectIntentRequest)
        ? OriginalDetectIntentRequest.fromJSON(object.originalDetectIntentRequest)
        : undefined,
    };
  },

  toJSON(message: WebhookRequest): unknown {
    const obj: any = {};
    if (message.session !== "") {
      obj.session = message.session;
    }
    if (message.responseId !== "") {
      obj.responseId = message.responseId;
    }
    if (message.queryResult !== undefined) {
      obj.queryResult = QueryResult.toJSON(message.queryResult);
    }
    if (message.originalDetectIntentRequest !== undefined) {
      obj.originalDetectIntentRequest = OriginalDetectIntentRequest.toJSON(message.originalDetectIntentRequest);
    }
    return obj;
  },

  create(base?: DeepPartial<WebhookRequest>): WebhookRequest {
    return WebhookRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WebhookRequest>): WebhookRequest {
    const message = createBaseWebhookRequest();
    message.session = object.session ?? "";
    message.responseId = object.responseId ?? "";
    message.queryResult = (object.queryResult !== undefined && object.queryResult !== null)
      ? QueryResult.fromPartial(object.queryResult)
      : undefined;
    message.originalDetectIntentRequest =
      (object.originalDetectIntentRequest !== undefined && object.originalDetectIntentRequest !== null)
        ? OriginalDetectIntentRequest.fromPartial(object.originalDetectIntentRequest)
        : undefined;
    return message;
  },
};

function createBaseWebhookResponse(): WebhookResponse {
  return {
    fulfillmentText: "",
    fulfillmentMessages: [],
    source: "",
    payload: undefined,
    outputContexts: [],
    followupEventInput: undefined,
    sessionEntityTypes: [],
  };
}

export const WebhookResponse: MessageFns<WebhookResponse> = {
  encode(message: WebhookResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fulfillmentText !== "") {
      writer.uint32(10).string(message.fulfillmentText);
    }
    for (const v of message.fulfillmentMessages) {
      Intent_Message.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.source !== "") {
      writer.uint32(26).string(message.source);
    }
    if (message.payload !== undefined) {
      Struct.encode(Struct.wrap(message.payload), writer.uint32(34).fork()).join();
    }
    for (const v of message.outputContexts) {
      Context.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.followupEventInput !== undefined) {
      EventInput.encode(message.followupEventInput, writer.uint32(50).fork()).join();
    }
    for (const v of message.sessionEntityTypes) {
      SessionEntityType.encode(v!, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebhookResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebhookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fulfillmentText = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fulfillmentMessages.push(Intent_Message.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.source = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.payload = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.outputContexts.push(Context.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.followupEventInput = EventInput.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.sessionEntityTypes.push(SessionEntityType.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebhookResponse {
    return {
      fulfillmentText: isSet(object.fulfillmentText) ? globalThis.String(object.fulfillmentText) : "",
      fulfillmentMessages: globalThis.Array.isArray(object?.fulfillmentMessages)
        ? object.fulfillmentMessages.map((e: any) => Intent_Message.fromJSON(e))
        : [],
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      payload: isObject(object.payload) ? object.payload : undefined,
      outputContexts: globalThis.Array.isArray(object?.outputContexts)
        ? object.outputContexts.map((e: any) => Context.fromJSON(e))
        : [],
      followupEventInput: isSet(object.followupEventInput) ? EventInput.fromJSON(object.followupEventInput) : undefined,
      sessionEntityTypes: globalThis.Array.isArray(object?.sessionEntityTypes)
        ? object.sessionEntityTypes.map((e: any) => SessionEntityType.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WebhookResponse): unknown {
    const obj: any = {};
    if (message.fulfillmentText !== "") {
      obj.fulfillmentText = message.fulfillmentText;
    }
    if (message.fulfillmentMessages?.length) {
      obj.fulfillmentMessages = message.fulfillmentMessages.map((e) => Intent_Message.toJSON(e));
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.payload !== undefined) {
      obj.payload = message.payload;
    }
    if (message.outputContexts?.length) {
      obj.outputContexts = message.outputContexts.map((e) => Context.toJSON(e));
    }
    if (message.followupEventInput !== undefined) {
      obj.followupEventInput = EventInput.toJSON(message.followupEventInput);
    }
    if (message.sessionEntityTypes?.length) {
      obj.sessionEntityTypes = message.sessionEntityTypes.map((e) => SessionEntityType.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<WebhookResponse>): WebhookResponse {
    return WebhookResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WebhookResponse>): WebhookResponse {
    const message = createBaseWebhookResponse();
    message.fulfillmentText = object.fulfillmentText ?? "";
    message.fulfillmentMessages = object.fulfillmentMessages?.map((e) => Intent_Message.fromPartial(e)) || [];
    message.source = object.source ?? "";
    message.payload = object.payload ?? undefined;
    message.outputContexts = object.outputContexts?.map((e) => Context.fromPartial(e)) || [];
    message.followupEventInput = (object.followupEventInput !== undefined && object.followupEventInput !== null)
      ? EventInput.fromPartial(object.followupEventInput)
      : undefined;
    message.sessionEntityTypes = object.sessionEntityTypes?.map((e) => SessionEntityType.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOriginalDetectIntentRequest(): OriginalDetectIntentRequest {
  return { source: "", version: "", payload: undefined };
}

export const OriginalDetectIntentRequest: MessageFns<OriginalDetectIntentRequest> = {
  encode(message: OriginalDetectIntentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.source !== "") {
      writer.uint32(10).string(message.source);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.payload !== undefined) {
      Struct.encode(Struct.wrap(message.payload), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OriginalDetectIntentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOriginalDetectIntentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.source = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.payload = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OriginalDetectIntentRequest {
    return {
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      payload: isObject(object.payload) ? object.payload : undefined,
    };
  },

  toJSON(message: OriginalDetectIntentRequest): unknown {
    const obj: any = {};
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.payload !== undefined) {
      obj.payload = message.payload;
    }
    return obj;
  },

  create(base?: DeepPartial<OriginalDetectIntentRequest>): OriginalDetectIntentRequest {
    return OriginalDetectIntentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OriginalDetectIntentRequest>): OriginalDetectIntentRequest {
    const message = createBaseOriginalDetectIntentRequest();
    message.source = object.source ?? "";
    message.version = object.version ?? "";
    message.payload = object.payload ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
