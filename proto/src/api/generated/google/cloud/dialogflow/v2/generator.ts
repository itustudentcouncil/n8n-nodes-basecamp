// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/v2/generator.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.dialogflow.v2";

/** The event that triggers the generator and LLM execution. */
export enum TriggerEvent {
  /** TRIGGER_EVENT_UNSPECIFIED - Default value for TriggerEvent. */
  TRIGGER_EVENT_UNSPECIFIED = 0,
  /** END_OF_UTTERANCE - Triggers when each chat message or voice utterance ends. */
  END_OF_UTTERANCE = 1,
  /**
   * MANUAL_CALL - Triggers on the conversation manually by API calls, such as
   * Conversations.GenerateStatelessSuggestion and
   * Conversations.GenerateSuggestions.
   */
  MANUAL_CALL = 2,
  UNRECOGNIZED = -1,
}

export function triggerEventFromJSON(object: any): TriggerEvent {
  switch (object) {
    case 0:
    case "TRIGGER_EVENT_UNSPECIFIED":
      return TriggerEvent.TRIGGER_EVENT_UNSPECIFIED;
    case 1:
    case "END_OF_UTTERANCE":
      return TriggerEvent.END_OF_UTTERANCE;
    case 2:
    case "MANUAL_CALL":
      return TriggerEvent.MANUAL_CALL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TriggerEvent.UNRECOGNIZED;
  }
}

export function triggerEventToJSON(object: TriggerEvent): string {
  switch (object) {
    case TriggerEvent.TRIGGER_EVENT_UNSPECIFIED:
      return "TRIGGER_EVENT_UNSPECIFIED";
    case TriggerEvent.END_OF_UTTERANCE:
      return "END_OF_UTTERANCE";
    case TriggerEvent.MANUAL_CALL:
      return "MANUAL_CALL";
    case TriggerEvent.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request message of CreateGenerator. */
export interface CreateGeneratorRequest {
  /**
   * Required. The project/location to create generator for. Format:
   * `projects/<Project ID>/locations/<Location ID>`
   */
  parent: string;
  /** Required. The generator to create. */
  generator:
    | Generator
    | undefined;
  /**
   * Optional. The ID to use for the generator, which will become the final
   * component of the generator's resource name.
   *
   * The generator ID must be compliant with the regression fomula
   * `[a-zA-Z][a-zA-Z0-9_-]*` with the characters length in range of [3,64].
   * If the field is not provided, an Id will be auto-generated.
   * If the field is provided, the caller is resposible for
   * 1. the uniqueness of the ID, otherwise the request will be rejected.
   * 2. the consistency for whether to use custom ID or not under a project to
   * better ensure uniqueness.
   */
  generatorId: string;
}

/** Request message of GetGenerator. */
export interface GetGeneratorRequest {
  /**
   * Required. The generator resource name to retrieve. Format:
   * `projects/<Project ID>/locations/<Location ID>`/generators/<Generator ID>`
   */
  name: string;
}

/** Request message of ListGenerators. */
export interface ListGeneratorsRequest {
  /**
   * Required. The project/location to list generators for. Format:
   * `projects/<Project ID>/locations/<Location ID>`
   */
  parent: string;
  /**
   * Optional. Maximum number of conversation models to return in a single page.
   * Default to 10.
   */
  pageSize: number;
  /** Optional. The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/** Response of ListGenerators. */
export interface ListGeneratorsResponse {
  /** List of generators retrieved. */
  generators: Generator[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/** Request of DeleteGenerator. */
export interface DeleteGeneratorRequest {
  /**
   * Required. The generator resource name to delete. Format:
   * `projects/<Project ID>/locations/<Location ID>/generators/<Generator ID>`
   */
  name: string;
}

/** Request of UpdateGenerator. */
export interface UpdateGeneratorRequest {
  /**
   * Required. The generator to update.
   * The name field of generator is to identify the generator to update.
   */
  generator:
    | Generator
    | undefined;
  /** Optional. The list of fields to update. */
  updateMask: string[] | undefined;
}

/** Represents a message entry of a conversation. */
export interface MessageEntry {
  /** Optional. Participant role of the message. */
  role: MessageEntry_Role;
  /** Optional. Transcript content of the message. */
  text: string;
  /**
   * Optional. The language of the text. See [Language
   * Support](https://cloud.google.com/dialogflow/docs/reference/language) for a
   * list of the currently supported language codes.
   */
  languageCode: string;
  /** Optional. Create time of the message entry. */
  createTime: Date | undefined;
}

/** Enumeration of the roles a participant can play in a conversation. */
export enum MessageEntry_Role {
  /** ROLE_UNSPECIFIED - Participant role not set. */
  ROLE_UNSPECIFIED = 0,
  /** HUMAN_AGENT - Participant is a human agent. */
  HUMAN_AGENT = 1,
  /** AUTOMATED_AGENT - Participant is an automated agent, such as a Dialogflow agent. */
  AUTOMATED_AGENT = 2,
  /**
   * END_USER - Participant is an end user that has called or chatted with
   * Dialogflow services.
   */
  END_USER = 3,
  UNRECOGNIZED = -1,
}

export function messageEntry_RoleFromJSON(object: any): MessageEntry_Role {
  switch (object) {
    case 0:
    case "ROLE_UNSPECIFIED":
      return MessageEntry_Role.ROLE_UNSPECIFIED;
    case 1:
    case "HUMAN_AGENT":
      return MessageEntry_Role.HUMAN_AGENT;
    case 2:
    case "AUTOMATED_AGENT":
      return MessageEntry_Role.AUTOMATED_AGENT;
    case 3:
    case "END_USER":
      return MessageEntry_Role.END_USER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MessageEntry_Role.UNRECOGNIZED;
  }
}

export function messageEntry_RoleToJSON(object: MessageEntry_Role): string {
  switch (object) {
    case MessageEntry_Role.ROLE_UNSPECIFIED:
      return "ROLE_UNSPECIFIED";
    case MessageEntry_Role.HUMAN_AGENT:
      return "HUMAN_AGENT";
    case MessageEntry_Role.AUTOMATED_AGENT:
      return "AUTOMATED_AGENT";
    case MessageEntry_Role.END_USER:
      return "END_USER";
    case MessageEntry_Role.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Context of the conversation, including transcripts. */
export interface ConversationContext {
  /** Optional. List of message transcripts in the conversation. */
  messageEntries: MessageEntry[];
}

/** List of summarization sections. */
export interface SummarizationSectionList {
  /** Optional. Summarization sections. */
  summarizationSections: SummarizationSection[];
}

/**
 * Providing examples in the generator (i.e. building a few-shot generator)
 * helps convey the desired format of the LLM response.
 * NEXT_ID: 10
 */
export interface FewShotExample {
  /** Optional. Conversation transcripts. */
  conversationContext:
    | ConversationContext
    | undefined;
  /**
   * Optional. Key is the placeholder field name in input, value is the value of
   * the placeholder. E.g. instruction contains "@price", and ingested data has
   * <"price", "10">
   */
  extraInfo: { [key: string]: string };
  /** Summarization sections. */
  summarizationSectionList?:
    | SummarizationSectionList
    | undefined;
  /** Required. Example output of the model. */
  output: GeneratorSuggestion | undefined;
}

export interface FewShotExample_ExtraInfoEntry {
  key: string;
  value: string;
}

/** The parameters of inference. */
export interface InferenceParameter {
  /** Optional. Maximum number of the output tokens for the generator. */
  maxOutputTokens?:
    | number
    | undefined;
  /**
   * Optional. Controls the randomness of LLM predictions.
   * Low temperature = less random. High temperature = more random.
   * If unset (or 0), uses a default value of 0.
   */
  temperature?:
    | number
    | undefined;
  /**
   * Optional. Top-k changes how the model selects tokens for output. A top-k of
   * 1 means the selected token is the most probable among all tokens in the
   * model's vocabulary (also called greedy decoding), while a top-k of 3 means
   * that the next token is selected from among the 3 most probable tokens
   * (using temperature). For each token selection step, the top K tokens with
   * the highest probabilities are sampled. Then tokens are further filtered
   * based on topP with the final token selected using temperature sampling.
   * Specify a lower value for less random responses and a higher value for more
   * random responses. Acceptable value is [1, 40], default to 40.
   */
  topK?:
    | number
    | undefined;
  /**
   * Optional. Top-p changes how the model selects tokens for output. Tokens are
   * selected from most K (see topK parameter) probable to least until the sum
   * of their probabilities equals the top-p value. For example, if tokens A, B,
   * and C have a probability of 0.3, 0.2, and 0.1 and the top-p value is 0.5,
   * then the model will select either A or B as the next token (using
   * temperature) and doesn't consider C. The default top-p value is 0.95.
   * Specify a lower value for less random responses and a higher value for more
   * random responses. Acceptable value is [0.0, 1.0], default to 0.95.
   */
  topP?: number | undefined;
}

/** Represents the section of summarization. */
export interface SummarizationSection {
  /** Optional. Name of the section, for example, "situation". */
  key: string;
  /**
   * Optional. Definition of the section, for example, "what the customer needs
   * help with or has question about."
   */
  definition: string;
  /** Optional. Type of the summarization section. */
  type: SummarizationSection_Type;
}

/** Type enum of the summarization sections. */
export enum SummarizationSection_Type {
  /** TYPE_UNSPECIFIED - Undefined section type, does not return anything. */
  TYPE_UNSPECIFIED = 0,
  /**
   * SITUATION - What the customer needs help with or has question about.
   * Section name: "situation".
   */
  SITUATION = 1,
  /**
   * ACTION - What the agent does to help the customer.
   * Section name: "action".
   */
  ACTION = 2,
  /**
   * RESOLUTION - Result of the customer service. A single word describing the result
   * of the conversation.
   * Section name: "resolution".
   */
  RESOLUTION = 3,
  /**
   * REASON_FOR_CANCELLATION - Reason for cancellation if the customer requests for a cancellation.
   * "N/A" otherwise.
   * Section name: "reason_for_cancellation".
   */
  REASON_FOR_CANCELLATION = 4,
  /**
   * CUSTOMER_SATISFACTION - "Unsatisfied" or "Satisfied" depending on the customer's feelings at
   * the end of the conversation.
   * Section name: "customer_satisfaction".
   */
  CUSTOMER_SATISFACTION = 5,
  /**
   * ENTITIES - Key entities extracted from the conversation, such as ticket number,
   * order number, dollar amount, etc.
   * Section names are prefixed by "entities/".
   */
  ENTITIES = 6,
  /** CUSTOMER_DEFINED - Customer defined sections. */
  CUSTOMER_DEFINED = 7,
  UNRECOGNIZED = -1,
}

export function summarizationSection_TypeFromJSON(object: any): SummarizationSection_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return SummarizationSection_Type.TYPE_UNSPECIFIED;
    case 1:
    case "SITUATION":
      return SummarizationSection_Type.SITUATION;
    case 2:
    case "ACTION":
      return SummarizationSection_Type.ACTION;
    case 3:
    case "RESOLUTION":
      return SummarizationSection_Type.RESOLUTION;
    case 4:
    case "REASON_FOR_CANCELLATION":
      return SummarizationSection_Type.REASON_FOR_CANCELLATION;
    case 5:
    case "CUSTOMER_SATISFACTION":
      return SummarizationSection_Type.CUSTOMER_SATISFACTION;
    case 6:
    case "ENTITIES":
      return SummarizationSection_Type.ENTITIES;
    case 7:
    case "CUSTOMER_DEFINED":
      return SummarizationSection_Type.CUSTOMER_DEFINED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SummarizationSection_Type.UNRECOGNIZED;
  }
}

export function summarizationSection_TypeToJSON(object: SummarizationSection_Type): string {
  switch (object) {
    case SummarizationSection_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case SummarizationSection_Type.SITUATION:
      return "SITUATION";
    case SummarizationSection_Type.ACTION:
      return "ACTION";
    case SummarizationSection_Type.RESOLUTION:
      return "RESOLUTION";
    case SummarizationSection_Type.REASON_FOR_CANCELLATION:
      return "REASON_FOR_CANCELLATION";
    case SummarizationSection_Type.CUSTOMER_SATISFACTION:
      return "CUSTOMER_SATISFACTION";
    case SummarizationSection_Type.ENTITIES:
      return "ENTITIES";
    case SummarizationSection_Type.CUSTOMER_DEFINED:
      return "CUSTOMER_DEFINED";
    case SummarizationSection_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Summarization context that customer can configure. */
export interface SummarizationContext {
  /**
   * Optional. List of sections. Note it contains both predefined section sand
   * customer defined sections.
   */
  summarizationSections: SummarizationSection[];
  /** Optional. List of few shot examples. */
  fewShotExamples: FewShotExample[];
  /**
   * Optional. Version of the feature. If not set, default to latest version.
   * Current candidates are ["1.0"].
   */
  version: string;
  /**
   * Optional. The target language of the generated summary. The language code
   * for conversation will be used if this field is empty. Supported 2.0 and
   * later versions.
   */
  outputLanguageCode: string;
}

/** LLM generator. */
export interface Generator {
  /**
   * Output only. Identifier. The resource name of the generator. Format:
   * `projects/<Project ID>/locations/<Location ID>/generators/<Generator ID>`
   */
  name: string;
  /** Optional. Human readable description of the generator. */
  description: string;
  /** Input of prebuilt Summarization feature. */
  summarizationContext?:
    | SummarizationContext
    | undefined;
  /** Optional. Inference parameters for this generator. */
  inferenceParameter:
    | InferenceParameter
    | undefined;
  /**
   * Optional. The trigger event of the generator. It defines when the generator
   * is triggered in a conversation.
   */
  triggerEvent: TriggerEvent;
  /** Output only. Creation time of this generator. */
  createTime:
    | Date
    | undefined;
  /** Output only. Update time of this generator. */
  updateTime: Date | undefined;
}

/** Suggested summary of the conversation. */
export interface SummarySuggestion {
  /** Required. All the parts of generated summary. */
  summarySections: SummarySuggestion_SummarySection[];
}

/** A component of the generated summary. */
export interface SummarySuggestion_SummarySection {
  /** Required. Name of the section. */
  section: string;
  /** Required. Summary text for the section. */
  summary: string;
}

/** Suggestion generated using a Generator. */
export interface GeneratorSuggestion {
  /** Optional. Suggested summary. */
  summarySuggestion?: SummarySuggestion | undefined;
}

function createBaseCreateGeneratorRequest(): CreateGeneratorRequest {
  return { parent: "", generator: undefined, generatorId: "" };
}

export const CreateGeneratorRequest: MessageFns<CreateGeneratorRequest> = {
  encode(message: CreateGeneratorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.generator !== undefined) {
      Generator.encode(message.generator, writer.uint32(18).fork()).join();
    }
    if (message.generatorId !== "") {
      writer.uint32(26).string(message.generatorId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateGeneratorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateGeneratorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.generator = Generator.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.generatorId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateGeneratorRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      generator: isSet(object.generator) ? Generator.fromJSON(object.generator) : undefined,
      generatorId: isSet(object.generatorId) ? globalThis.String(object.generatorId) : "",
    };
  },

  toJSON(message: CreateGeneratorRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.generator !== undefined) {
      obj.generator = Generator.toJSON(message.generator);
    }
    if (message.generatorId !== "") {
      obj.generatorId = message.generatorId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateGeneratorRequest>): CreateGeneratorRequest {
    return CreateGeneratorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateGeneratorRequest>): CreateGeneratorRequest {
    const message = createBaseCreateGeneratorRequest();
    message.parent = object.parent ?? "";
    message.generator = (object.generator !== undefined && object.generator !== null)
      ? Generator.fromPartial(object.generator)
      : undefined;
    message.generatorId = object.generatorId ?? "";
    return message;
  },
};

function createBaseGetGeneratorRequest(): GetGeneratorRequest {
  return { name: "" };
}

export const GetGeneratorRequest: MessageFns<GetGeneratorRequest> = {
  encode(message: GetGeneratorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGeneratorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGeneratorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGeneratorRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetGeneratorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetGeneratorRequest>): GetGeneratorRequest {
    return GetGeneratorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGeneratorRequest>): GetGeneratorRequest {
    const message = createBaseGetGeneratorRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListGeneratorsRequest(): ListGeneratorsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListGeneratorsRequest: MessageFns<ListGeneratorsRequest> = {
  encode(message: ListGeneratorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGeneratorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGeneratorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGeneratorsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListGeneratorsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGeneratorsRequest>): ListGeneratorsRequest {
    return ListGeneratorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGeneratorsRequest>): ListGeneratorsRequest {
    const message = createBaseListGeneratorsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListGeneratorsResponse(): ListGeneratorsResponse {
  return { generators: [], nextPageToken: "" };
}

export const ListGeneratorsResponse: MessageFns<ListGeneratorsResponse> = {
  encode(message: ListGeneratorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.generators) {
      Generator.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGeneratorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGeneratorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.generators.push(Generator.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGeneratorsResponse {
    return {
      generators: globalThis.Array.isArray(object?.generators)
        ? object.generators.map((e: any) => Generator.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListGeneratorsResponse): unknown {
    const obj: any = {};
    if (message.generators?.length) {
      obj.generators = message.generators.map((e) => Generator.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGeneratorsResponse>): ListGeneratorsResponse {
    return ListGeneratorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGeneratorsResponse>): ListGeneratorsResponse {
    const message = createBaseListGeneratorsResponse();
    message.generators = object.generators?.map((e) => Generator.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteGeneratorRequest(): DeleteGeneratorRequest {
  return { name: "" };
}

export const DeleteGeneratorRequest: MessageFns<DeleteGeneratorRequest> = {
  encode(message: DeleteGeneratorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteGeneratorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGeneratorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGeneratorRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteGeneratorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteGeneratorRequest>): DeleteGeneratorRequest {
    return DeleteGeneratorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteGeneratorRequest>): DeleteGeneratorRequest {
    const message = createBaseDeleteGeneratorRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateGeneratorRequest(): UpdateGeneratorRequest {
  return { generator: undefined, updateMask: undefined };
}

export const UpdateGeneratorRequest: MessageFns<UpdateGeneratorRequest> = {
  encode(message: UpdateGeneratorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.generator !== undefined) {
      Generator.encode(message.generator, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGeneratorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGeneratorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.generator = Generator.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGeneratorRequest {
    return {
      generator: isSet(object.generator) ? Generator.fromJSON(object.generator) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateGeneratorRequest): unknown {
    const obj: any = {};
    if (message.generator !== undefined) {
      obj.generator = Generator.toJSON(message.generator);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGeneratorRequest>): UpdateGeneratorRequest {
    return UpdateGeneratorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGeneratorRequest>): UpdateGeneratorRequest {
    const message = createBaseUpdateGeneratorRequest();
    message.generator = (object.generator !== undefined && object.generator !== null)
      ? Generator.fromPartial(object.generator)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseMessageEntry(): MessageEntry {
  return { role: 0, text: "", languageCode: "", createTime: undefined };
}

export const MessageEntry: MessageFns<MessageEntry> = {
  encode(message: MessageEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.role !== 0) {
      writer.uint32(8).int32(message.role);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageEntry {
    return {
      role: isSet(object.role) ? messageEntry_RoleFromJSON(object.role) : 0,
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: MessageEntry): unknown {
    const obj: any = {};
    if (message.role !== 0) {
      obj.role = messageEntry_RoleToJSON(message.role);
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<MessageEntry>): MessageEntry {
    return MessageEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MessageEntry>): MessageEntry {
    const message = createBaseMessageEntry();
    message.role = object.role ?? 0;
    message.text = object.text ?? "";
    message.languageCode = object.languageCode ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBaseConversationContext(): ConversationContext {
  return { messageEntries: [] };
}

export const ConversationContext: MessageFns<ConversationContext> = {
  encode(message: ConversationContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.messageEntries) {
      MessageEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConversationContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversationContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.messageEntries.push(MessageEntry.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConversationContext {
    return {
      messageEntries: globalThis.Array.isArray(object?.messageEntries)
        ? object.messageEntries.map((e: any) => MessageEntry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ConversationContext): unknown {
    const obj: any = {};
    if (message.messageEntries?.length) {
      obj.messageEntries = message.messageEntries.map((e) => MessageEntry.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ConversationContext>): ConversationContext {
    return ConversationContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConversationContext>): ConversationContext {
    const message = createBaseConversationContext();
    message.messageEntries = object.messageEntries?.map((e) => MessageEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSummarizationSectionList(): SummarizationSectionList {
  return { summarizationSections: [] };
}

export const SummarizationSectionList: MessageFns<SummarizationSectionList> = {
  encode(message: SummarizationSectionList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.summarizationSections) {
      SummarizationSection.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SummarizationSectionList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSummarizationSectionList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.summarizationSections.push(SummarizationSection.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SummarizationSectionList {
    return {
      summarizationSections: globalThis.Array.isArray(object?.summarizationSections)
        ? object.summarizationSections.map((e: any) => SummarizationSection.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SummarizationSectionList): unknown {
    const obj: any = {};
    if (message.summarizationSections?.length) {
      obj.summarizationSections = message.summarizationSections.map((e) => SummarizationSection.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SummarizationSectionList>): SummarizationSectionList {
    return SummarizationSectionList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SummarizationSectionList>): SummarizationSectionList {
    const message = createBaseSummarizationSectionList();
    message.summarizationSections = object.summarizationSections?.map((e) => SummarizationSection.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFewShotExample(): FewShotExample {
  return { conversationContext: undefined, extraInfo: {}, summarizationSectionList: undefined, output: undefined };
}

export const FewShotExample: MessageFns<FewShotExample> = {
  encode(message: FewShotExample, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversationContext !== undefined) {
      ConversationContext.encode(message.conversationContext, writer.uint32(26).fork()).join();
    }
    Object.entries(message.extraInfo).forEach(([key, value]) => {
      FewShotExample_ExtraInfoEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.summarizationSectionList !== undefined) {
      SummarizationSectionList.encode(message.summarizationSectionList, writer.uint32(50).fork()).join();
    }
    if (message.output !== undefined) {
      GeneratorSuggestion.encode(message.output, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FewShotExample {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFewShotExample();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.conversationContext = ConversationContext.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = FewShotExample_ExtraInfoEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.extraInfo[entry4.key] = entry4.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.summarizationSectionList = SummarizationSectionList.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.output = GeneratorSuggestion.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FewShotExample {
    return {
      conversationContext: isSet(object.conversationContext)
        ? ConversationContext.fromJSON(object.conversationContext)
        : undefined,
      extraInfo: isObject(object.extraInfo)
        ? Object.entries(object.extraInfo).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      summarizationSectionList: isSet(object.summarizationSectionList)
        ? SummarizationSectionList.fromJSON(object.summarizationSectionList)
        : undefined,
      output: isSet(object.output) ? GeneratorSuggestion.fromJSON(object.output) : undefined,
    };
  },

  toJSON(message: FewShotExample): unknown {
    const obj: any = {};
    if (message.conversationContext !== undefined) {
      obj.conversationContext = ConversationContext.toJSON(message.conversationContext);
    }
    if (message.extraInfo) {
      const entries = Object.entries(message.extraInfo);
      if (entries.length > 0) {
        obj.extraInfo = {};
        entries.forEach(([k, v]) => {
          obj.extraInfo[k] = v;
        });
      }
    }
    if (message.summarizationSectionList !== undefined) {
      obj.summarizationSectionList = SummarizationSectionList.toJSON(message.summarizationSectionList);
    }
    if (message.output !== undefined) {
      obj.output = GeneratorSuggestion.toJSON(message.output);
    }
    return obj;
  },

  create(base?: DeepPartial<FewShotExample>): FewShotExample {
    return FewShotExample.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FewShotExample>): FewShotExample {
    const message = createBaseFewShotExample();
    message.conversationContext = (object.conversationContext !== undefined && object.conversationContext !== null)
      ? ConversationContext.fromPartial(object.conversationContext)
      : undefined;
    message.extraInfo = Object.entries(object.extraInfo ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.summarizationSectionList =
      (object.summarizationSectionList !== undefined && object.summarizationSectionList !== null)
        ? SummarizationSectionList.fromPartial(object.summarizationSectionList)
        : undefined;
    message.output = (object.output !== undefined && object.output !== null)
      ? GeneratorSuggestion.fromPartial(object.output)
      : undefined;
    return message;
  },
};

function createBaseFewShotExample_ExtraInfoEntry(): FewShotExample_ExtraInfoEntry {
  return { key: "", value: "" };
}

export const FewShotExample_ExtraInfoEntry: MessageFns<FewShotExample_ExtraInfoEntry> = {
  encode(message: FewShotExample_ExtraInfoEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FewShotExample_ExtraInfoEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFewShotExample_ExtraInfoEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FewShotExample_ExtraInfoEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: FewShotExample_ExtraInfoEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<FewShotExample_ExtraInfoEntry>): FewShotExample_ExtraInfoEntry {
    return FewShotExample_ExtraInfoEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FewShotExample_ExtraInfoEntry>): FewShotExample_ExtraInfoEntry {
    const message = createBaseFewShotExample_ExtraInfoEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseInferenceParameter(): InferenceParameter {
  return { maxOutputTokens: undefined, temperature: undefined, topK: undefined, topP: undefined };
}

export const InferenceParameter: MessageFns<InferenceParameter> = {
  encode(message: InferenceParameter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxOutputTokens !== undefined) {
      writer.uint32(8).int32(message.maxOutputTokens);
    }
    if (message.temperature !== undefined) {
      writer.uint32(17).double(message.temperature);
    }
    if (message.topK !== undefined) {
      writer.uint32(24).int32(message.topK);
    }
    if (message.topP !== undefined) {
      writer.uint32(33).double(message.topP);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InferenceParameter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInferenceParameter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxOutputTokens = reader.int32();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.temperature = reader.double();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.topK = reader.int32();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.topP = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InferenceParameter {
    return {
      maxOutputTokens: isSet(object.maxOutputTokens) ? globalThis.Number(object.maxOutputTokens) : undefined,
      temperature: isSet(object.temperature) ? globalThis.Number(object.temperature) : undefined,
      topK: isSet(object.topK) ? globalThis.Number(object.topK) : undefined,
      topP: isSet(object.topP) ? globalThis.Number(object.topP) : undefined,
    };
  },

  toJSON(message: InferenceParameter): unknown {
    const obj: any = {};
    if (message.maxOutputTokens !== undefined) {
      obj.maxOutputTokens = Math.round(message.maxOutputTokens);
    }
    if (message.temperature !== undefined) {
      obj.temperature = message.temperature;
    }
    if (message.topK !== undefined) {
      obj.topK = Math.round(message.topK);
    }
    if (message.topP !== undefined) {
      obj.topP = message.topP;
    }
    return obj;
  },

  create(base?: DeepPartial<InferenceParameter>): InferenceParameter {
    return InferenceParameter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InferenceParameter>): InferenceParameter {
    const message = createBaseInferenceParameter();
    message.maxOutputTokens = object.maxOutputTokens ?? undefined;
    message.temperature = object.temperature ?? undefined;
    message.topK = object.topK ?? undefined;
    message.topP = object.topP ?? undefined;
    return message;
  },
};

function createBaseSummarizationSection(): SummarizationSection {
  return { key: "", definition: "", type: 0 };
}

export const SummarizationSection: MessageFns<SummarizationSection> = {
  encode(message: SummarizationSection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.definition !== "") {
      writer.uint32(18).string(message.definition);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SummarizationSection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSummarizationSection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.definition = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SummarizationSection {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      definition: isSet(object.definition) ? globalThis.String(object.definition) : "",
      type: isSet(object.type) ? summarizationSection_TypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: SummarizationSection): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.definition !== "") {
      obj.definition = message.definition;
    }
    if (message.type !== 0) {
      obj.type = summarizationSection_TypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<SummarizationSection>): SummarizationSection {
    return SummarizationSection.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SummarizationSection>): SummarizationSection {
    const message = createBaseSummarizationSection();
    message.key = object.key ?? "";
    message.definition = object.definition ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseSummarizationContext(): SummarizationContext {
  return { summarizationSections: [], fewShotExamples: [], version: "", outputLanguageCode: "" };
}

export const SummarizationContext: MessageFns<SummarizationContext> = {
  encode(message: SummarizationContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.summarizationSections) {
      SummarizationSection.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.fewShotExamples) {
      FewShotExample.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.version !== "") {
      writer.uint32(26).string(message.version);
    }
    if (message.outputLanguageCode !== "") {
      writer.uint32(50).string(message.outputLanguageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SummarizationContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSummarizationContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.summarizationSections.push(SummarizationSection.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fewShotExamples.push(FewShotExample.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.version = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.outputLanguageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SummarizationContext {
    return {
      summarizationSections: globalThis.Array.isArray(object?.summarizationSections)
        ? object.summarizationSections.map((e: any) => SummarizationSection.fromJSON(e))
        : [],
      fewShotExamples: globalThis.Array.isArray(object?.fewShotExamples)
        ? object.fewShotExamples.map((e: any) => FewShotExample.fromJSON(e))
        : [],
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      outputLanguageCode: isSet(object.outputLanguageCode) ? globalThis.String(object.outputLanguageCode) : "",
    };
  },

  toJSON(message: SummarizationContext): unknown {
    const obj: any = {};
    if (message.summarizationSections?.length) {
      obj.summarizationSections = message.summarizationSections.map((e) => SummarizationSection.toJSON(e));
    }
    if (message.fewShotExamples?.length) {
      obj.fewShotExamples = message.fewShotExamples.map((e) => FewShotExample.toJSON(e));
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.outputLanguageCode !== "") {
      obj.outputLanguageCode = message.outputLanguageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<SummarizationContext>): SummarizationContext {
    return SummarizationContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SummarizationContext>): SummarizationContext {
    const message = createBaseSummarizationContext();
    message.summarizationSections = object.summarizationSections?.map((e) => SummarizationSection.fromPartial(e)) || [];
    message.fewShotExamples = object.fewShotExamples?.map((e) => FewShotExample.fromPartial(e)) || [];
    message.version = object.version ?? "";
    message.outputLanguageCode = object.outputLanguageCode ?? "";
    return message;
  },
};

function createBaseGenerator(): Generator {
  return {
    name: "",
    description: "",
    summarizationContext: undefined,
    inferenceParameter: undefined,
    triggerEvent: 0,
    createTime: undefined,
    updateTime: undefined,
  };
}

export const Generator: MessageFns<Generator> = {
  encode(message: Generator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.summarizationContext !== undefined) {
      SummarizationContext.encode(message.summarizationContext, writer.uint32(106).fork()).join();
    }
    if (message.inferenceParameter !== undefined) {
      InferenceParameter.encode(message.inferenceParameter, writer.uint32(34).fork()).join();
    }
    if (message.triggerEvent !== 0) {
      writer.uint32(40).int32(message.triggerEvent);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(66).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Generator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.summarizationContext = SummarizationContext.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.inferenceParameter = InferenceParameter.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.triggerEvent = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Generator {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      summarizationContext: isSet(object.summarizationContext)
        ? SummarizationContext.fromJSON(object.summarizationContext)
        : undefined,
      inferenceParameter: isSet(object.inferenceParameter)
        ? InferenceParameter.fromJSON(object.inferenceParameter)
        : undefined,
      triggerEvent: isSet(object.triggerEvent) ? triggerEventFromJSON(object.triggerEvent) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: Generator): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.summarizationContext !== undefined) {
      obj.summarizationContext = SummarizationContext.toJSON(message.summarizationContext);
    }
    if (message.inferenceParameter !== undefined) {
      obj.inferenceParameter = InferenceParameter.toJSON(message.inferenceParameter);
    }
    if (message.triggerEvent !== 0) {
      obj.triggerEvent = triggerEventToJSON(message.triggerEvent);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Generator>): Generator {
    return Generator.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Generator>): Generator {
    const message = createBaseGenerator();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.summarizationContext = (object.summarizationContext !== undefined && object.summarizationContext !== null)
      ? SummarizationContext.fromPartial(object.summarizationContext)
      : undefined;
    message.inferenceParameter = (object.inferenceParameter !== undefined && object.inferenceParameter !== null)
      ? InferenceParameter.fromPartial(object.inferenceParameter)
      : undefined;
    message.triggerEvent = object.triggerEvent ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseSummarySuggestion(): SummarySuggestion {
  return { summarySections: [] };
}

export const SummarySuggestion: MessageFns<SummarySuggestion> = {
  encode(message: SummarySuggestion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.summarySections) {
      SummarySuggestion_SummarySection.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SummarySuggestion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSummarySuggestion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.summarySections.push(SummarySuggestion_SummarySection.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SummarySuggestion {
    return {
      summarySections: globalThis.Array.isArray(object?.summarySections)
        ? object.summarySections.map((e: any) => SummarySuggestion_SummarySection.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SummarySuggestion): unknown {
    const obj: any = {};
    if (message.summarySections?.length) {
      obj.summarySections = message.summarySections.map((e) => SummarySuggestion_SummarySection.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SummarySuggestion>): SummarySuggestion {
    return SummarySuggestion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SummarySuggestion>): SummarySuggestion {
    const message = createBaseSummarySuggestion();
    message.summarySections = object.summarySections?.map((e) => SummarySuggestion_SummarySection.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSummarySuggestion_SummarySection(): SummarySuggestion_SummarySection {
  return { section: "", summary: "" };
}

export const SummarySuggestion_SummarySection: MessageFns<SummarySuggestion_SummarySection> = {
  encode(message: SummarySuggestion_SummarySection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.section !== "") {
      writer.uint32(10).string(message.section);
    }
    if (message.summary !== "") {
      writer.uint32(18).string(message.summary);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SummarySuggestion_SummarySection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSummarySuggestion_SummarySection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.section = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.summary = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SummarySuggestion_SummarySection {
    return {
      section: isSet(object.section) ? globalThis.String(object.section) : "",
      summary: isSet(object.summary) ? globalThis.String(object.summary) : "",
    };
  },

  toJSON(message: SummarySuggestion_SummarySection): unknown {
    const obj: any = {};
    if (message.section !== "") {
      obj.section = message.section;
    }
    if (message.summary !== "") {
      obj.summary = message.summary;
    }
    return obj;
  },

  create(base?: DeepPartial<SummarySuggestion_SummarySection>): SummarySuggestion_SummarySection {
    return SummarySuggestion_SummarySection.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SummarySuggestion_SummarySection>): SummarySuggestion_SummarySection {
    const message = createBaseSummarySuggestion_SummarySection();
    message.section = object.section ?? "";
    message.summary = object.summary ?? "";
    return message;
  },
};

function createBaseGeneratorSuggestion(): GeneratorSuggestion {
  return { summarySuggestion: undefined };
}

export const GeneratorSuggestion: MessageFns<GeneratorSuggestion> = {
  encode(message: GeneratorSuggestion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.summarySuggestion !== undefined) {
      SummarySuggestion.encode(message.summarySuggestion, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GeneratorSuggestion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGeneratorSuggestion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.summarySuggestion = SummarySuggestion.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GeneratorSuggestion {
    return {
      summarySuggestion: isSet(object.summarySuggestion)
        ? SummarySuggestion.fromJSON(object.summarySuggestion)
        : undefined,
    };
  },

  toJSON(message: GeneratorSuggestion): unknown {
    const obj: any = {};
    if (message.summarySuggestion !== undefined) {
      obj.summarySuggestion = SummarySuggestion.toJSON(message.summarySuggestion);
    }
    return obj;
  },

  create(base?: DeepPartial<GeneratorSuggestion>): GeneratorSuggestion {
    return GeneratorSuggestion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GeneratorSuggestion>): GeneratorSuggestion {
    const message = createBaseGeneratorSuggestion();
    message.summarySuggestion = (object.summarySuggestion !== undefined && object.summarySuggestion !== null)
      ? SummarySuggestion.fromPartial(object.summarySuggestion)
      : undefined;
    return message;
  },
};

/**
 * Generator Service for LLM powered Agent Assist. This service manages the
 * configurations of user owned Generators, such as description, context and
 * instruction, input/output format, etc. The generator resources will be used
 * inside a conversation and will be triggered by TriggerEvent to query LLM for
 * answers.
 */
export type GeneratorsDefinition = typeof GeneratorsDefinition;
export const GeneratorsDefinition = {
  name: "Generators",
  fullName: "google.cloud.dialogflow.v2.Generators",
  methods: {
    /** Creates a generator. */
    createGenerator: {
      name: "CreateGenerator",
      requestType: CreateGeneratorRequest,
      requestStream: false,
      responseType: Generator,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              29,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              44,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              108,
              58,
              9,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              90,
              47,
              58,
              9,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              34,
              34,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
              34,
              46,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves a generator. */
    getGenerator: {
      name: "GetGenerator",
      requestType: GetGeneratorRequest,
      requestStream: false,
      responseType: Generator,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists generators. */
    listGenerators: {
      name: "ListGenerators",
      requestType: ListGeneratorsRequest,
      requestStream: false,
      responseType: ListGeneratorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              86,
              90,
              36,
              18,
              34,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              46,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a generator. */
    deleteGenerator: {
      name: "DeleteGenerator",
      requestType: DeleteGeneratorRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              42,
              46,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a generator. */
    updateGenerator: {
      name: "UpdateGenerator",
      requestType: UpdateGeneratorRequest,
      requestStream: false,
      responseType: Generator,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              69,
              58,
              9,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              50,
              56,
              47,
              118,
              50,
              47,
              123,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface GeneratorsServiceImplementation<CallContextExt = {}> {
  /** Creates a generator. */
  createGenerator(
    request: CreateGeneratorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Generator>>;
  /** Retrieves a generator. */
  getGenerator(request: GetGeneratorRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Generator>>;
  /** Lists generators. */
  listGenerators(
    request: ListGeneratorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListGeneratorsResponse>>;
  /** Deletes a generator. */
  deleteGenerator(request: DeleteGeneratorRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Updates a generator. */
  updateGenerator(
    request: UpdateGeneratorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Generator>>;
}

export interface GeneratorsClient<CallOptionsExt = {}> {
  /** Creates a generator. */
  createGenerator(
    request: DeepPartial<CreateGeneratorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Generator>;
  /** Retrieves a generator. */
  getGenerator(request: DeepPartial<GetGeneratorRequest>, options?: CallOptions & CallOptionsExt): Promise<Generator>;
  /** Lists generators. */
  listGenerators(
    request: DeepPartial<ListGeneratorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListGeneratorsResponse>;
  /** Deletes a generator. */
  deleteGenerator(request: DeepPartial<DeleteGeneratorRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Updates a generator. */
  updateGenerator(
    request: DeepPartial<UpdateGeneratorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Generator>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
