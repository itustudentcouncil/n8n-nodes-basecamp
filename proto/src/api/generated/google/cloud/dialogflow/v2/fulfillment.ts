// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/v2/fulfillment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../protobuf/field_mask.js";

export const protobufPackage = "google.cloud.dialogflow.v2";

/**
 * By default, your agent responds to a matched intent with a static response.
 * As an alternative, you can provide a more dynamic response by using
 * fulfillment. When you enable fulfillment for an intent, Dialogflow responds
 * to that intent by calling a service that you define. For example, if an
 * end-user wants to schedule a haircut on Friday, your service can check your
 * database and respond to the end-user with availability information for
 * Friday.
 *
 * For more information, see the [fulfillment
 * guide](https://cloud.google.com/dialogflow/docs/fulfillment-overview).
 */
export interface Fulfillment {
  /**
   * Required. The unique identifier of the fulfillment.
   * Supported formats:
   *
   * - `projects/<Project ID>/agent/fulfillment`
   * - `projects/<Project ID>/locations/<Location ID>/agent/fulfillment`
   *
   * This field is not used for Fulfillment in an Environment.
   */
  name: string;
  /**
   * Optional. The human-readable name of the fulfillment, unique within the
   * agent.
   *
   * This field is not used for Fulfillment in an Environment.
   */
  displayName: string;
  /** Configuration for a generic web service. */
  genericWebService?:
    | Fulfillment_GenericWebService
    | undefined;
  /** Optional. Whether fulfillment is enabled. */
  enabled: boolean;
  /**
   * Optional. The field defines whether the fulfillment is enabled for certain
   * features.
   */
  features: Fulfillment_Feature[];
}

/**
 * Represents configuration for a generic web service.
 * Dialogflow supports two mechanisms for authentications:
 *
 * - Basic authentication with username and password.
 * - Authentication with additional authentication headers.
 *
 * More information could be found at:
 * https://cloud.google.com/dialogflow/docs/fulfillment-configure.
 */
export interface Fulfillment_GenericWebService {
  /**
   * Required. The fulfillment URI for receiving POST requests.
   * It must use https protocol.
   */
  uri: string;
  /** Optional. The user name for HTTP Basic authentication. */
  username: string;
  /** Optional. The password for HTTP Basic authentication. */
  password: string;
  /**
   * Optional. The HTTP request headers to send together with fulfillment
   * requests.
   */
  requestHeaders: { [key: string]: string };
  /**
   * Optional. Indicates if generic web service is created through Cloud
   * Functions integration. Defaults to false.
   *
   * is_cloud_function is deprecated. Cloud functions can be configured by
   * its uri as a regular web service now.
   *
   * @deprecated
   */
  isCloudFunction: boolean;
}

export interface Fulfillment_GenericWebService_RequestHeadersEntry {
  key: string;
  value: string;
}

/** Whether fulfillment is enabled for the specific feature. */
export interface Fulfillment_Feature {
  /** The type of the feature that enabled for fulfillment. */
  type: Fulfillment_Feature_Type;
}

/** The type of the feature. */
export enum Fulfillment_Feature_Type {
  /** TYPE_UNSPECIFIED - Feature type not specified. */
  TYPE_UNSPECIFIED = 0,
  /** SMALLTALK - Fulfillment is enabled for SmallTalk. */
  SMALLTALK = 1,
  UNRECOGNIZED = -1,
}

export function fulfillment_Feature_TypeFromJSON(object: any): Fulfillment_Feature_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Fulfillment_Feature_Type.TYPE_UNSPECIFIED;
    case 1:
    case "SMALLTALK":
      return Fulfillment_Feature_Type.SMALLTALK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Fulfillment_Feature_Type.UNRECOGNIZED;
  }
}

export function fulfillment_Feature_TypeToJSON(object: Fulfillment_Feature_Type): string {
  switch (object) {
    case Fulfillment_Feature_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Fulfillment_Feature_Type.SMALLTALK:
      return "SMALLTALK";
    case Fulfillment_Feature_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The request message for
 * [Fulfillments.GetFulfillment][google.cloud.dialogflow.v2.Fulfillments.GetFulfillment].
 */
export interface GetFulfillmentRequest {
  /**
   * Required. The name of the fulfillment.
   * Format: `projects/<Project ID>/agent/fulfillment`.
   */
  name: string;
}

/**
 * The request message for
 * [Fulfillments.UpdateFulfillment][google.cloud.dialogflow.v2.Fulfillments.UpdateFulfillment].
 */
export interface UpdateFulfillmentRequest {
  /** Required. The fulfillment to update. */
  fulfillment:
    | Fulfillment
    | undefined;
  /**
   * Required. The mask to control which fields get updated. If the mask is not
   * present, all fields will be updated.
   */
  updateMask: string[] | undefined;
}

function createBaseFulfillment(): Fulfillment {
  return { name: "", displayName: "", genericWebService: undefined, enabled: false, features: [] };
}

export const Fulfillment: MessageFns<Fulfillment> = {
  encode(message: Fulfillment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.genericWebService !== undefined) {
      Fulfillment_GenericWebService.encode(message.genericWebService, writer.uint32(26).fork()).join();
    }
    if (message.enabled !== false) {
      writer.uint32(32).bool(message.enabled);
    }
    for (const v of message.features) {
      Fulfillment_Feature.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Fulfillment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFulfillment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.genericWebService = Fulfillment_GenericWebService.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.features.push(Fulfillment_Feature.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Fulfillment {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      genericWebService: isSet(object.genericWebService)
        ? Fulfillment_GenericWebService.fromJSON(object.genericWebService)
        : undefined,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      features: globalThis.Array.isArray(object?.features)
        ? object.features.map((e: any) => Fulfillment_Feature.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Fulfillment): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.genericWebService !== undefined) {
      obj.genericWebService = Fulfillment_GenericWebService.toJSON(message.genericWebService);
    }
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.features?.length) {
      obj.features = message.features.map((e) => Fulfillment_Feature.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Fulfillment>): Fulfillment {
    return Fulfillment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Fulfillment>): Fulfillment {
    const message = createBaseFulfillment();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.genericWebService = (object.genericWebService !== undefined && object.genericWebService !== null)
      ? Fulfillment_GenericWebService.fromPartial(object.genericWebService)
      : undefined;
    message.enabled = object.enabled ?? false;
    message.features = object.features?.map((e) => Fulfillment_Feature.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFulfillment_GenericWebService(): Fulfillment_GenericWebService {
  return { uri: "", username: "", password: "", requestHeaders: {}, isCloudFunction: false };
}

export const Fulfillment_GenericWebService: MessageFns<Fulfillment_GenericWebService> = {
  encode(message: Fulfillment_GenericWebService, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.password !== "") {
      writer.uint32(26).string(message.password);
    }
    Object.entries(message.requestHeaders).forEach(([key, value]) => {
      Fulfillment_GenericWebService_RequestHeadersEntry.encode({ key: key as any, value }, writer.uint32(34).fork())
        .join();
    });
    if (message.isCloudFunction !== false) {
      writer.uint32(40).bool(message.isCloudFunction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Fulfillment_GenericWebService {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFulfillment_GenericWebService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.password = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Fulfillment_GenericWebService_RequestHeadersEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.requestHeaders[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isCloudFunction = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Fulfillment_GenericWebService {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      requestHeaders: isObject(object.requestHeaders)
        ? Object.entries(object.requestHeaders).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      isCloudFunction: isSet(object.isCloudFunction) ? globalThis.Boolean(object.isCloudFunction) : false,
    };
  },

  toJSON(message: Fulfillment_GenericWebService): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.requestHeaders) {
      const entries = Object.entries(message.requestHeaders);
      if (entries.length > 0) {
        obj.requestHeaders = {};
        entries.forEach(([k, v]) => {
          obj.requestHeaders[k] = v;
        });
      }
    }
    if (message.isCloudFunction !== false) {
      obj.isCloudFunction = message.isCloudFunction;
    }
    return obj;
  },

  create(base?: DeepPartial<Fulfillment_GenericWebService>): Fulfillment_GenericWebService {
    return Fulfillment_GenericWebService.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Fulfillment_GenericWebService>): Fulfillment_GenericWebService {
    const message = createBaseFulfillment_GenericWebService();
    message.uri = object.uri ?? "";
    message.username = object.username ?? "";
    message.password = object.password ?? "";
    message.requestHeaders = Object.entries(object.requestHeaders ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.isCloudFunction = object.isCloudFunction ?? false;
    return message;
  },
};

function createBaseFulfillment_GenericWebService_RequestHeadersEntry(): Fulfillment_GenericWebService_RequestHeadersEntry {
  return { key: "", value: "" };
}

export const Fulfillment_GenericWebService_RequestHeadersEntry: MessageFns<
  Fulfillment_GenericWebService_RequestHeadersEntry
> = {
  encode(
    message: Fulfillment_GenericWebService_RequestHeadersEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Fulfillment_GenericWebService_RequestHeadersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFulfillment_GenericWebService_RequestHeadersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Fulfillment_GenericWebService_RequestHeadersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Fulfillment_GenericWebService_RequestHeadersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<Fulfillment_GenericWebService_RequestHeadersEntry>,
  ): Fulfillment_GenericWebService_RequestHeadersEntry {
    return Fulfillment_GenericWebService_RequestHeadersEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<Fulfillment_GenericWebService_RequestHeadersEntry>,
  ): Fulfillment_GenericWebService_RequestHeadersEntry {
    const message = createBaseFulfillment_GenericWebService_RequestHeadersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseFulfillment_Feature(): Fulfillment_Feature {
  return { type: 0 };
}

export const Fulfillment_Feature: MessageFns<Fulfillment_Feature> = {
  encode(message: Fulfillment_Feature, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Fulfillment_Feature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFulfillment_Feature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Fulfillment_Feature {
    return { type: isSet(object.type) ? fulfillment_Feature_TypeFromJSON(object.type) : 0 };
  },

  toJSON(message: Fulfillment_Feature): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = fulfillment_Feature_TypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<Fulfillment_Feature>): Fulfillment_Feature {
    return Fulfillment_Feature.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Fulfillment_Feature>): Fulfillment_Feature {
    const message = createBaseFulfillment_Feature();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseGetFulfillmentRequest(): GetFulfillmentRequest {
  return { name: "" };
}

export const GetFulfillmentRequest: MessageFns<GetFulfillmentRequest> = {
  encode(message: GetFulfillmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFulfillmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFulfillmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFulfillmentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetFulfillmentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetFulfillmentRequest>): GetFulfillmentRequest {
    return GetFulfillmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFulfillmentRequest>): GetFulfillmentRequest {
    const message = createBaseGetFulfillmentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateFulfillmentRequest(): UpdateFulfillmentRequest {
  return { fulfillment: undefined, updateMask: undefined };
}

export const UpdateFulfillmentRequest: MessageFns<UpdateFulfillmentRequest> = {
  encode(message: UpdateFulfillmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fulfillment !== undefined) {
      Fulfillment.encode(message.fulfillment, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFulfillmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFulfillmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fulfillment = Fulfillment.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFulfillmentRequest {
    return {
      fulfillment: isSet(object.fulfillment) ? Fulfillment.fromJSON(object.fulfillment) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateFulfillmentRequest): unknown {
    const obj: any = {};
    if (message.fulfillment !== undefined) {
      obj.fulfillment = Fulfillment.toJSON(message.fulfillment);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateFulfillmentRequest>): UpdateFulfillmentRequest {
    return UpdateFulfillmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateFulfillmentRequest>): UpdateFulfillmentRequest {
    const message = createBaseUpdateFulfillmentRequest();
    message.fulfillment = (object.fulfillment !== undefined && object.fulfillment !== null)
      ? Fulfillment.fromPartial(object.fulfillment)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

/** Service for managing [Fulfillments][google.cloud.dialogflow.v2.Fulfillment]. */
export type FulfillmentsDefinition = typeof FulfillmentsDefinition;
export const FulfillmentsDefinition = {
  name: "Fulfillments",
  fullName: "google.cloud.dialogflow.v2.Fulfillments",
  methods: {
    /** Retrieves the fulfillment. */
    getFulfillment: {
      name: "GetFulfillment",
      requestType: GetFulfillmentRequest,
      requestStream: false,
      responseType: Fulfillment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              96,
              90,
              53,
              18,
              51,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              102,
              117,
              108,
              102,
              105,
              108,
              108,
              109,
              101,
              110,
              116,
              125,
              18,
              39,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              102,
              117,
              108,
              102,
              105,
              108,
              108,
              109,
              101,
              110,
              116,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates the fulfillment. */
    updateFulfillment: {
      name: "UpdateFulfillment",
      requestType: UpdateFulfillmentRequest,
      requestStream: false,
      responseType: Fulfillment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              102,
              117,
              108,
              102,
              105,
              108,
              108,
              109,
              101,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              146,
              1,
              58,
              11,
              102,
              117,
              108,
              102,
              105,
              108,
              108,
              109,
              101,
              110,
              116,
              90,
              78,
              58,
              11,
              102,
              117,
              108,
              102,
              105,
              108,
              108,
              109,
              101,
              110,
              116,
              50,
              63,
              47,
              118,
              50,
              47,
              123,
              102,
              117,
              108,
              102,
              105,
              108,
              108,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              102,
              117,
              108,
              102,
              105,
              108,
              108,
              109,
              101,
              110,
              116,
              125,
              50,
              51,
              47,
              118,
              50,
              47,
              123,
              102,
              117,
              108,
              102,
              105,
              108,
              108,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              102,
              117,
              108,
              102,
              105,
              108,
              108,
              109,
              101,
              110,
              116,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface FulfillmentsServiceImplementation<CallContextExt = {}> {
  /** Retrieves the fulfillment. */
  getFulfillment(
    request: GetFulfillmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Fulfillment>>;
  /** Updates the fulfillment. */
  updateFulfillment(
    request: UpdateFulfillmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Fulfillment>>;
}

export interface FulfillmentsClient<CallOptionsExt = {}> {
  /** Retrieves the fulfillment. */
  getFulfillment(
    request: DeepPartial<GetFulfillmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Fulfillment>;
  /** Updates the fulfillment. */
  updateFulfillment(
    request: DeepPartial<UpdateFulfillmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Fulfillment>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
