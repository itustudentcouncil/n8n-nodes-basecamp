// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/v2/intent.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Struct } from "../../../protobuf/struct.js";
import { Context } from "./context.js";

export const protobufPackage = "google.cloud.dialogflow.v2";

/**
 * Represents the options for views of an intent.
 * An intent can be a sizable object. Therefore, we provide a resource view that
 * does not return training phrases in the response by default.
 */
export enum IntentView {
  /** INTENT_VIEW_UNSPECIFIED - Training phrases field is not populated in the response. */
  INTENT_VIEW_UNSPECIFIED = 0,
  /** INTENT_VIEW_FULL - All fields are populated. */
  INTENT_VIEW_FULL = 1,
  UNRECOGNIZED = -1,
}

export function intentViewFromJSON(object: any): IntentView {
  switch (object) {
    case 0:
    case "INTENT_VIEW_UNSPECIFIED":
      return IntentView.INTENT_VIEW_UNSPECIFIED;
    case 1:
    case "INTENT_VIEW_FULL":
      return IntentView.INTENT_VIEW_FULL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IntentView.UNRECOGNIZED;
  }
}

export function intentViewToJSON(object: IntentView): string {
  switch (object) {
    case IntentView.INTENT_VIEW_UNSPECIFIED:
      return "INTENT_VIEW_UNSPECIFIED";
    case IntentView.INTENT_VIEW_FULL:
      return "INTENT_VIEW_FULL";
    case IntentView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * An intent categorizes an end-user's intention for one conversation turn. For
 * each agent, you define many intents, where your combined intents can handle a
 * complete conversation. When an end-user writes or says something, referred to
 * as an end-user expression or end-user input, Dialogflow matches the end-user
 * input to the best intent in your agent. Matching an intent is also known as
 * intent classification.
 *
 * For more information, see the [intent
 * guide](https://cloud.google.com/dialogflow/docs/intents-overview).
 */
export interface Intent {
  /**
   * Optional. The unique identifier of this intent.
   * Required for
   * [Intents.UpdateIntent][google.cloud.dialogflow.v2.Intents.UpdateIntent] and
   * [Intents.BatchUpdateIntents][google.cloud.dialogflow.v2.Intents.BatchUpdateIntents]
   * methods.
   * Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
   */
  name: string;
  /** Required. The name of this intent. */
  displayName: string;
  /** Optional. Indicates whether webhooks are enabled for the intent. */
  webhookState: Intent_WebhookState;
  /**
   * Optional. The priority of this intent. Higher numbers represent higher
   * priorities.
   *
   * - If the supplied value is unspecified or 0, the service
   *   translates the value to 500,000, which corresponds to the
   *   `Normal` priority in the console.
   * - If the supplied value is negative, the intent is ignored
   *   in runtime detect intent requests.
   */
  priority: number;
  /** Optional. Indicates whether this is a fallback intent. */
  isFallback: boolean;
  /**
   * Optional. Indicates whether Machine Learning is disabled for the intent.
   * Note: If `ml_disabled` setting is set to true, then this intent is not
   * taken into account during inference in `ML ONLY` match mode. Also,
   * auto-markup in the UI is turned off.
   */
  mlDisabled: boolean;
  /**
   * Optional. Indicates that a live agent should be brought in to handle the
   * interaction with the user. In most cases, when you set this flag to true,
   * you would also want to set end_interaction to true as well. Default is
   * false.
   */
  liveAgentHandoff: boolean;
  /**
   * Optional. Indicates that this intent ends an interaction. Some integrations
   * (e.g., Actions on Google or Dialogflow phone gateway) use this information
   * to close interaction with an end user. Default is false.
   */
  endInteraction: boolean;
  /**
   * Optional. The list of context names required for this intent to be
   * triggered.
   * Format: `projects/<Project ID>/agent/sessions/-/contexts/<Context ID>`.
   */
  inputContextNames: string[];
  /**
   * Optional. The collection of event names that trigger the intent.
   * If the collection of input contexts is not empty, all of the contexts must
   * be present in the active user session for an event to trigger this intent.
   * Event names are limited to 150 characters.
   */
  events: string[];
  /**
   * Optional. The collection of examples that the agent is
   * trained on.
   */
  trainingPhrases: Intent_TrainingPhrase[];
  /**
   * Optional. The name of the action associated with the intent.
   * Note: The action name must not contain whitespaces.
   */
  action: string;
  /**
   * Optional. The collection of contexts that are activated when the intent
   * is matched. Context messages in this collection should not set the
   * parameters field. Setting the `lifespan_count` to 0 will reset the context
   * when the intent is matched.
   * Format: `projects/<Project ID>/agent/sessions/-/contexts/<Context ID>`.
   */
  outputContexts: Context[];
  /**
   * Optional. Indicates whether to delete all contexts in the current
   * session when this intent is matched.
   */
  resetContexts: boolean;
  /** Optional. The collection of parameters associated with the intent. */
  parameters: Intent_Parameter[];
  /**
   * Optional. The collection of rich messages corresponding to the
   * `Response` field in the Dialogflow console.
   */
  messages: Intent_Message[];
  /**
   * Optional. The list of platforms for which the first responses will be
   * copied from the messages in PLATFORM_UNSPECIFIED (i.e. default platform).
   */
  defaultResponsePlatforms: Intent_Message_Platform[];
  /**
   * Output only.
   * Read-only. The unique identifier of the root intent in the chain of
   * followup intents. It identifies the correct followup intents chain for
   * this intent. We populate this field only in the output.
   *
   * Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
   */
  rootFollowupIntentName: string;
  /**
   * Read-only after creation. The unique identifier of the parent intent in the
   * chain of followup intents. You can set this field when creating an intent,
   * for example with
   * [CreateIntent][google.cloud.dialogflow.v2.Intents.CreateIntent] or
   * [BatchUpdateIntents][google.cloud.dialogflow.v2.Intents.BatchUpdateIntents],
   * in order to make this intent a followup intent.
   *
   * It identifies the parent followup intent.
   * Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
   */
  parentFollowupIntentName: string;
  /**
   * Output only. Read-only. Information about all followup intents that have
   * this intent as a direct or indirect parent. We populate this field only in
   * the output.
   */
  followupIntentInfo: Intent_FollowupIntentInfo[];
}

/** Represents the different states that webhooks can be in. */
export enum Intent_WebhookState {
  /** WEBHOOK_STATE_UNSPECIFIED - Webhook is disabled in the agent and in the intent. */
  WEBHOOK_STATE_UNSPECIFIED = 0,
  /** WEBHOOK_STATE_ENABLED - Webhook is enabled in the agent and in the intent. */
  WEBHOOK_STATE_ENABLED = 1,
  /**
   * WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING - Webhook is enabled in the agent and in the intent. Also, each slot
   * filling prompt is forwarded to the webhook.
   */
  WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING = 2,
  UNRECOGNIZED = -1,
}

export function intent_WebhookStateFromJSON(object: any): Intent_WebhookState {
  switch (object) {
    case 0:
    case "WEBHOOK_STATE_UNSPECIFIED":
      return Intent_WebhookState.WEBHOOK_STATE_UNSPECIFIED;
    case 1:
    case "WEBHOOK_STATE_ENABLED":
      return Intent_WebhookState.WEBHOOK_STATE_ENABLED;
    case 2:
    case "WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING":
      return Intent_WebhookState.WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Intent_WebhookState.UNRECOGNIZED;
  }
}

export function intent_WebhookStateToJSON(object: Intent_WebhookState): string {
  switch (object) {
    case Intent_WebhookState.WEBHOOK_STATE_UNSPECIFIED:
      return "WEBHOOK_STATE_UNSPECIFIED";
    case Intent_WebhookState.WEBHOOK_STATE_ENABLED:
      return "WEBHOOK_STATE_ENABLED";
    case Intent_WebhookState.WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING:
      return "WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING";
    case Intent_WebhookState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents an example that the agent is trained on. */
export interface Intent_TrainingPhrase {
  /** Output only. The unique identifier of this training phrase. */
  name: string;
  /** Required. The type of the training phrase. */
  type: Intent_TrainingPhrase_Type;
  /**
   * Required. The ordered list of training phrase parts.
   * The parts are concatenated in order to form the training phrase.
   *
   * Note: The API does not automatically annotate training phrases like the
   * Dialogflow Console does.
   *
   * Note: Do not forget to include whitespace at part boundaries,
   * so the training phrase is well formatted when the parts are concatenated.
   *
   * If the training phrase does not need to be annotated with parameters,
   * you just need a single part with only the
   * [Part.text][google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.text]
   * field set.
   *
   * If you want to annotate the training phrase, you must create multiple
   * parts, where the fields of each part are populated in one of two ways:
   *
   * -   `Part.text` is set to a part of the phrase that has no parameters.
   * -   `Part.text` is set to a part of the phrase that you want to annotate,
   *     and the `entity_type`, `alias`, and `user_defined` fields are all
   *     set.
   */
  parts: Intent_TrainingPhrase_Part[];
  /**
   * Optional. Indicates how many times this example was added to
   * the intent. Each time a developer adds an existing sample by editing an
   * intent or training, this counter is increased.
   */
  timesAddedCount: number;
}

/** Represents different types of training phrases. */
export enum Intent_TrainingPhrase_Type {
  /** TYPE_UNSPECIFIED - Not specified. This value should never be used. */
  TYPE_UNSPECIFIED = 0,
  /**
   * EXAMPLE - Examples do not contain @-prefixed entity type names, but example parts
   * can be annotated with entity types.
   */
  EXAMPLE = 1,
  /**
   * TEMPLATE - Templates are not annotated with entity types, but they can contain
   * @-prefixed entity type names as substrings.
   * Template mode has been deprecated. Example mode is the only supported
   * way to create new training phrases. If you have existing training
   * phrases that you've created in template mode, those will continue to
   * work.
   *
   * @deprecated
   */
  TEMPLATE = 2,
  UNRECOGNIZED = -1,
}

export function intent_TrainingPhrase_TypeFromJSON(object: any): Intent_TrainingPhrase_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Intent_TrainingPhrase_Type.TYPE_UNSPECIFIED;
    case 1:
    case "EXAMPLE":
      return Intent_TrainingPhrase_Type.EXAMPLE;
    case 2:
    case "TEMPLATE":
      return Intent_TrainingPhrase_Type.TEMPLATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Intent_TrainingPhrase_Type.UNRECOGNIZED;
  }
}

export function intent_TrainingPhrase_TypeToJSON(object: Intent_TrainingPhrase_Type): string {
  switch (object) {
    case Intent_TrainingPhrase_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Intent_TrainingPhrase_Type.EXAMPLE:
      return "EXAMPLE";
    case Intent_TrainingPhrase_Type.TEMPLATE:
      return "TEMPLATE";
    case Intent_TrainingPhrase_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents a part of a training phrase. */
export interface Intent_TrainingPhrase_Part {
  /** Required. The text for this part. */
  text: string;
  /**
   * Optional. The entity type name prefixed with `@`.
   * This field is required for annotated parts of the training phrase.
   */
  entityType: string;
  /**
   * Optional. The parameter name for the value extracted from the
   * annotated part of the example.
   * This field is required for annotated parts of the training phrase.
   */
  alias: string;
  /**
   * Optional. Indicates whether the text was manually annotated.
   * This field is set to true when the Dialogflow Console is used to
   * manually annotate the part. When creating an annotated part with the
   * API, you must set this to true.
   */
  userDefined: boolean;
}

/** Represents intent parameters. */
export interface Intent_Parameter {
  /** The unique identifier of this parameter. */
  name: string;
  /** Required. The name of the parameter. */
  displayName: string;
  /**
   * Optional. The definition of the parameter value. It can be:
   *
   * - a constant string,
   * - a parameter value defined as `$parameter_name`,
   * - an original parameter value defined as `$parameter_name.original`,
   * - a parameter value from some context defined as
   *   `#context_name.parameter_name`.
   */
  value: string;
  /**
   * Optional. The default value to use when the `value` yields an empty
   * result.
   * Default values can be extracted from contexts by using the following
   * syntax: `#context_name.parameter_name`.
   */
  defaultValue: string;
  /**
   * Optional. The name of the entity type, prefixed with `@`, that
   * describes values of the parameter. If the parameter is
   * required, this must be provided.
   */
  entityTypeDisplayName: string;
  /**
   * Optional. Indicates whether the parameter is required. That is,
   * whether the intent cannot be completed without collecting the parameter
   * value.
   */
  mandatory: boolean;
  /**
   * Optional. The collection of prompts that the agent can present to the
   * user in order to collect a value for the parameter.
   */
  prompts: string[];
  /** Optional. Indicates whether the parameter represents a list of values. */
  isList: boolean;
}

/**
 * A rich response message.
 * Corresponds to the intent `Response` field in the Dialogflow console.
 * For more information, see
 * [Rich response
 * messages](https://cloud.google.com/dialogflow/docs/intents-rich-messages).
 */
export interface Intent_Message {
  /** The text response. */
  text?:
    | Intent_Message_Text
    | undefined;
  /** The image response. */
  image?:
    | Intent_Message_Image
    | undefined;
  /** The quick replies response. */
  quickReplies?:
    | Intent_Message_QuickReplies
    | undefined;
  /** The card response. */
  card?:
    | Intent_Message_Card
    | undefined;
  /** A custom platform-specific response. */
  payload?:
    | { [key: string]: any }
    | undefined;
  /** The voice and text-only responses for Actions on Google. */
  simpleResponses?:
    | Intent_Message_SimpleResponses
    | undefined;
  /** The basic card response for Actions on Google. */
  basicCard?:
    | Intent_Message_BasicCard
    | undefined;
  /** The suggestion chips for Actions on Google. */
  suggestions?:
    | Intent_Message_Suggestions
    | undefined;
  /** The link out suggestion chip for Actions on Google. */
  linkOutSuggestion?:
    | Intent_Message_LinkOutSuggestion
    | undefined;
  /** The list card response for Actions on Google. */
  listSelect?:
    | Intent_Message_ListSelect
    | undefined;
  /** The carousel card response for Actions on Google. */
  carouselSelect?:
    | Intent_Message_CarouselSelect
    | undefined;
  /** Browse carousel card for Actions on Google. */
  browseCarouselCard?:
    | Intent_Message_BrowseCarouselCard
    | undefined;
  /** Table card for Actions on Google. */
  tableCard?:
    | Intent_Message_TableCard
    | undefined;
  /** The media content card for Actions on Google. */
  mediaContent?:
    | Intent_Message_MediaContent
    | undefined;
  /** Optional. The platform that this message is intended for. */
  platform: Intent_Message_Platform;
}

/**
 * The rich response message integration platform. See
 * [Integrations](https://cloud.google.com/dialogflow/docs/integrations).
 */
export enum Intent_Message_Platform {
  /** PLATFORM_UNSPECIFIED - Default platform. */
  PLATFORM_UNSPECIFIED = 0,
  /** FACEBOOK - Facebook. */
  FACEBOOK = 1,
  /** SLACK - Slack. */
  SLACK = 2,
  /** TELEGRAM - Telegram. */
  TELEGRAM = 3,
  /** KIK - Kik. */
  KIK = 4,
  /** SKYPE - Skype. */
  SKYPE = 5,
  /** LINE - Line. */
  LINE = 6,
  /** VIBER - Viber. */
  VIBER = 7,
  /**
   * ACTIONS_ON_GOOGLE - Google Assistant
   * See [Dialogflow webhook
   * format](https://developers.google.com/assistant/actions/build/json/dialogflow-webhook-json)
   */
  ACTIONS_ON_GOOGLE = 8,
  /** GOOGLE_HANGOUTS - Google Hangouts. */
  GOOGLE_HANGOUTS = 11,
  UNRECOGNIZED = -1,
}

export function intent_Message_PlatformFromJSON(object: any): Intent_Message_Platform {
  switch (object) {
    case 0:
    case "PLATFORM_UNSPECIFIED":
      return Intent_Message_Platform.PLATFORM_UNSPECIFIED;
    case 1:
    case "FACEBOOK":
      return Intent_Message_Platform.FACEBOOK;
    case 2:
    case "SLACK":
      return Intent_Message_Platform.SLACK;
    case 3:
    case "TELEGRAM":
      return Intent_Message_Platform.TELEGRAM;
    case 4:
    case "KIK":
      return Intent_Message_Platform.KIK;
    case 5:
    case "SKYPE":
      return Intent_Message_Platform.SKYPE;
    case 6:
    case "LINE":
      return Intent_Message_Platform.LINE;
    case 7:
    case "VIBER":
      return Intent_Message_Platform.VIBER;
    case 8:
    case "ACTIONS_ON_GOOGLE":
      return Intent_Message_Platform.ACTIONS_ON_GOOGLE;
    case 11:
    case "GOOGLE_HANGOUTS":
      return Intent_Message_Platform.GOOGLE_HANGOUTS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Intent_Message_Platform.UNRECOGNIZED;
  }
}

export function intent_Message_PlatformToJSON(object: Intent_Message_Platform): string {
  switch (object) {
    case Intent_Message_Platform.PLATFORM_UNSPECIFIED:
      return "PLATFORM_UNSPECIFIED";
    case Intent_Message_Platform.FACEBOOK:
      return "FACEBOOK";
    case Intent_Message_Platform.SLACK:
      return "SLACK";
    case Intent_Message_Platform.TELEGRAM:
      return "TELEGRAM";
    case Intent_Message_Platform.KIK:
      return "KIK";
    case Intent_Message_Platform.SKYPE:
      return "SKYPE";
    case Intent_Message_Platform.LINE:
      return "LINE";
    case Intent_Message_Platform.VIBER:
      return "VIBER";
    case Intent_Message_Platform.ACTIONS_ON_GOOGLE:
      return "ACTIONS_ON_GOOGLE";
    case Intent_Message_Platform.GOOGLE_HANGOUTS:
      return "GOOGLE_HANGOUTS";
    case Intent_Message_Platform.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The text response message. */
export interface Intent_Message_Text {
  /** Optional. The collection of the agent's responses. */
  text: string[];
}

/** The image response message. */
export interface Intent_Message_Image {
  /** Optional. The public URI to an image file. */
  imageUri: string;
  /**
   * Optional. A text description of the image to be used for accessibility,
   * e.g., screen readers.
   */
  accessibilityText: string;
}

/** The quick replies response message. */
export interface Intent_Message_QuickReplies {
  /** Optional. The title of the collection of quick replies. */
  title: string;
  /** Optional. The collection of quick replies. */
  quickReplies: string[];
}

/** The card response message. */
export interface Intent_Message_Card {
  /** Optional. The title of the card. */
  title: string;
  /** Optional. The subtitle of the card. */
  subtitle: string;
  /** Optional. The public URI to an image file for the card. */
  imageUri: string;
  /** Optional. The collection of card buttons. */
  buttons: Intent_Message_Card_Button[];
}

/** Contains information about a button. */
export interface Intent_Message_Card_Button {
  /** Optional. The text to show on the button. */
  text: string;
  /**
   * Optional. The text to send back to the Dialogflow API or a URI to
   * open.
   */
  postback: string;
}

/** The simple response message containing speech or text. */
export interface Intent_Message_SimpleResponse {
  /**
   * One of text_to_speech or ssml must be provided. The plain text of the
   * speech output. Mutually exclusive with ssml.
   */
  textToSpeech: string;
  /**
   * One of text_to_speech or ssml must be provided. Structured spoken
   * response to the user in the SSML format. Mutually exclusive with
   * text_to_speech.
   */
  ssml: string;
  /** Optional. The text to display. */
  displayText: string;
}

/**
 * The collection of simple response candidates.
 * This message in `QueryResult.fulfillment_messages` and
 * `WebhookResponse.fulfillment_messages` should contain only one
 * `SimpleResponse`.
 */
export interface Intent_Message_SimpleResponses {
  /** Required. The list of simple responses. */
  simpleResponses: Intent_Message_SimpleResponse[];
}

/** The basic card message. Useful for displaying information. */
export interface Intent_Message_BasicCard {
  /** Optional. The title of the card. */
  title: string;
  /** Optional. The subtitle of the card. */
  subtitle: string;
  /** Required, unless image is present. The body text of the card. */
  formattedText: string;
  /** Optional. The image for the card. */
  image:
    | Intent_Message_Image
    | undefined;
  /** Optional. The collection of card buttons. */
  buttons: Intent_Message_BasicCard_Button[];
}

/** The button object that appears at the bottom of a card. */
export interface Intent_Message_BasicCard_Button {
  /** Required. The title of the button. */
  title: string;
  /** Required. Action to take when a user taps on the button. */
  openUriAction: Intent_Message_BasicCard_Button_OpenUriAction | undefined;
}

/** Opens the given URI. */
export interface Intent_Message_BasicCard_Button_OpenUriAction {
  /** Required. The HTTP or HTTPS scheme URI. */
  uri: string;
}

/**
 * The suggestion chip message that the user can tap to quickly post a reply
 * to the conversation.
 */
export interface Intent_Message_Suggestion {
  /** Required. The text shown the in the suggestion chip. */
  title: string;
}

/** The collection of suggestions. */
export interface Intent_Message_Suggestions {
  /** Required. The list of suggested replies. */
  suggestions: Intent_Message_Suggestion[];
}

/**
 * The suggestion chip message that allows the user to jump out to the app
 * or website associated with this agent.
 */
export interface Intent_Message_LinkOutSuggestion {
  /** Required. The name of the app or site this chip is linking to. */
  destinationName: string;
  /**
   * Required. The URI of the app or site to open when the user taps the
   * suggestion chip.
   */
  uri: string;
}

/** The card for presenting a list of options to select from. */
export interface Intent_Message_ListSelect {
  /** Optional. The overall title of the list. */
  title: string;
  /** Required. List items. */
  items: Intent_Message_ListSelect_Item[];
  /** Optional. Subtitle of the list. */
  subtitle: string;
}

/** An item in the list. */
export interface Intent_Message_ListSelect_Item {
  /** Required. Additional information about this option. */
  info:
    | Intent_Message_SelectItemInfo
    | undefined;
  /** Required. The title of the list item. */
  title: string;
  /** Optional. The main text describing the item. */
  description: string;
  /** Optional. The image to display. */
  image: Intent_Message_Image | undefined;
}

/** The card for presenting a carousel of options to select from. */
export interface Intent_Message_CarouselSelect {
  /** Required. Carousel items. */
  items: Intent_Message_CarouselSelect_Item[];
}

/** An item in the carousel. */
export interface Intent_Message_CarouselSelect_Item {
  /** Required. Additional info about the option item. */
  info:
    | Intent_Message_SelectItemInfo
    | undefined;
  /** Required. Title of the carousel item. */
  title: string;
  /** Optional. The body text of the card. */
  description: string;
  /** Optional. The image to display. */
  image: Intent_Message_Image | undefined;
}

/**
 * Additional info about the select item for when it is triggered in a
 * dialog.
 */
export interface Intent_Message_SelectItemInfo {
  /**
   * Required. A unique key that will be sent back to the agent if this
   * response is given.
   */
  key: string;
  /**
   * Optional. A list of synonyms that can also be used to trigger this
   * item in dialog.
   */
  synonyms: string[];
}

/** The media content card for Actions on Google. */
export interface Intent_Message_MediaContent {
  /** Optional. What type of media is the content (ie "audio"). */
  mediaType: Intent_Message_MediaContent_ResponseMediaType;
  /** Required. List of media objects. */
  mediaObjects: Intent_Message_MediaContent_ResponseMediaObject[];
}

/** Format of response media type. */
export enum Intent_Message_MediaContent_ResponseMediaType {
  /** RESPONSE_MEDIA_TYPE_UNSPECIFIED - Unspecified. */
  RESPONSE_MEDIA_TYPE_UNSPECIFIED = 0,
  /** AUDIO - Response media type is audio. */
  AUDIO = 1,
  UNRECOGNIZED = -1,
}

export function intent_Message_MediaContent_ResponseMediaTypeFromJSON(
  object: any,
): Intent_Message_MediaContent_ResponseMediaType {
  switch (object) {
    case 0:
    case "RESPONSE_MEDIA_TYPE_UNSPECIFIED":
      return Intent_Message_MediaContent_ResponseMediaType.RESPONSE_MEDIA_TYPE_UNSPECIFIED;
    case 1:
    case "AUDIO":
      return Intent_Message_MediaContent_ResponseMediaType.AUDIO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Intent_Message_MediaContent_ResponseMediaType.UNRECOGNIZED;
  }
}

export function intent_Message_MediaContent_ResponseMediaTypeToJSON(
  object: Intent_Message_MediaContent_ResponseMediaType,
): string {
  switch (object) {
    case Intent_Message_MediaContent_ResponseMediaType.RESPONSE_MEDIA_TYPE_UNSPECIFIED:
      return "RESPONSE_MEDIA_TYPE_UNSPECIFIED";
    case Intent_Message_MediaContent_ResponseMediaType.AUDIO:
      return "AUDIO";
    case Intent_Message_MediaContent_ResponseMediaType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Response media object for media content card. */
export interface Intent_Message_MediaContent_ResponseMediaObject {
  /** Required. Name of media card. */
  name: string;
  /** Optional. Description of media card. */
  description: string;
  /** Optional. Image to display above media content. */
  largeImage?:
    | Intent_Message_Image
    | undefined;
  /** Optional. Icon to display above media content. */
  icon?:
    | Intent_Message_Image
    | undefined;
  /** Required. Url where the media is stored. */
  contentUrl: string;
}

/**
 * Browse Carousel Card for Actions on Google.
 * https://developers.google.com/actions/assistant/responses#browsing_carousel
 */
export interface Intent_Message_BrowseCarouselCard {
  /**
   * Required. List of items in the Browse Carousel Card. Minimum of two
   * items, maximum of ten.
   */
  items: Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem[];
  /**
   * Optional. Settings for displaying the image. Applies to every image in
   * [items][google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.items].
   */
  imageDisplayOptions: Intent_Message_BrowseCarouselCard_ImageDisplayOptions;
}

/**
 * Image display options for Actions on Google. This should be used for
 * when the image's aspect ratio does not match the image container's
 * aspect ratio.
 */
export enum Intent_Message_BrowseCarouselCard_ImageDisplayOptions {
  /**
   * IMAGE_DISPLAY_OPTIONS_UNSPECIFIED - Fill the gaps between the image and the image container with gray
   * bars.
   */
  IMAGE_DISPLAY_OPTIONS_UNSPECIFIED = 0,
  /**
   * GRAY - Fill the gaps between the image and the image container with gray
   * bars.
   */
  GRAY = 1,
  /**
   * WHITE - Fill the gaps between the image and the image container with white
   * bars.
   */
  WHITE = 2,
  /**
   * CROPPED - Image is scaled such that the image width and height match or exceed
   * the container dimensions. This may crop the top and bottom of the
   * image if the scaled image height is greater than the container
   * height, or crop the left and right of the image if the scaled image
   * width is greater than the container width. This is similar to "Zoom
   * Mode" on a widescreen TV when playing a 4:3 video.
   */
  CROPPED = 3,
  /**
   * BLURRED_BACKGROUND - Pad the gaps between image and image frame with a blurred copy of the
   * same image.
   */
  BLURRED_BACKGROUND = 4,
  UNRECOGNIZED = -1,
}

export function intent_Message_BrowseCarouselCard_ImageDisplayOptionsFromJSON(
  object: any,
): Intent_Message_BrowseCarouselCard_ImageDisplayOptions {
  switch (object) {
    case 0:
    case "IMAGE_DISPLAY_OPTIONS_UNSPECIFIED":
      return Intent_Message_BrowseCarouselCard_ImageDisplayOptions.IMAGE_DISPLAY_OPTIONS_UNSPECIFIED;
    case 1:
    case "GRAY":
      return Intent_Message_BrowseCarouselCard_ImageDisplayOptions.GRAY;
    case 2:
    case "WHITE":
      return Intent_Message_BrowseCarouselCard_ImageDisplayOptions.WHITE;
    case 3:
    case "CROPPED":
      return Intent_Message_BrowseCarouselCard_ImageDisplayOptions.CROPPED;
    case 4:
    case "BLURRED_BACKGROUND":
      return Intent_Message_BrowseCarouselCard_ImageDisplayOptions.BLURRED_BACKGROUND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Intent_Message_BrowseCarouselCard_ImageDisplayOptions.UNRECOGNIZED;
  }
}

export function intent_Message_BrowseCarouselCard_ImageDisplayOptionsToJSON(
  object: Intent_Message_BrowseCarouselCard_ImageDisplayOptions,
): string {
  switch (object) {
    case Intent_Message_BrowseCarouselCard_ImageDisplayOptions.IMAGE_DISPLAY_OPTIONS_UNSPECIFIED:
      return "IMAGE_DISPLAY_OPTIONS_UNSPECIFIED";
    case Intent_Message_BrowseCarouselCard_ImageDisplayOptions.GRAY:
      return "GRAY";
    case Intent_Message_BrowseCarouselCard_ImageDisplayOptions.WHITE:
      return "WHITE";
    case Intent_Message_BrowseCarouselCard_ImageDisplayOptions.CROPPED:
      return "CROPPED";
    case Intent_Message_BrowseCarouselCard_ImageDisplayOptions.BLURRED_BACKGROUND:
      return "BLURRED_BACKGROUND";
    case Intent_Message_BrowseCarouselCard_ImageDisplayOptions.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Browsing carousel tile */
export interface Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem {
  /** Required. Action to present to the user. */
  openUriAction:
    | Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction
    | undefined;
  /** Required. Title of the carousel item. Maximum of two lines of text. */
  title: string;
  /**
   * Optional. Description of the carousel item. Maximum of four lines of
   * text.
   */
  description: string;
  /** Optional. Hero image for the carousel item. */
  image:
    | Intent_Message_Image
    | undefined;
  /**
   * Optional. Text that appears at the bottom of the Browse Carousel
   * Card. Maximum of one line of text.
   */
  footer: string;
}

/** Actions on Google action to open a given url. */
export interface Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction {
  /** Required. URL */
  url: string;
  /**
   * Optional. Specifies the type of viewer that is used when opening
   * the URL. Defaults to opening via web browser.
   */
  urlTypeHint: Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint;
}

/** Type of the URI. */
export enum Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint {
  /** URL_TYPE_HINT_UNSPECIFIED - Unspecified */
  URL_TYPE_HINT_UNSPECIFIED = 0,
  /** AMP_ACTION - Url would be an amp action */
  AMP_ACTION = 1,
  /**
   * AMP_CONTENT - URL that points directly to AMP content, or to a canonical URL
   * which refers to AMP content via <link rel="amphtml">.
   */
  AMP_CONTENT = 2,
  UNRECOGNIZED = -1,
}

export function intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHintFromJSON(
  object: any,
): Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint {
  switch (object) {
    case 0:
    case "URL_TYPE_HINT_UNSPECIFIED":
      return Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint
        .URL_TYPE_HINT_UNSPECIFIED;
    case 1:
    case "AMP_ACTION":
      return Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint.AMP_ACTION;
    case 2:
    case "AMP_CONTENT":
      return Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint.AMP_CONTENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint.UNRECOGNIZED;
  }
}

export function intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHintToJSON(
  object: Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint,
): string {
  switch (object) {
    case Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint.URL_TYPE_HINT_UNSPECIFIED:
      return "URL_TYPE_HINT_UNSPECIFIED";
    case Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint.AMP_ACTION:
      return "AMP_ACTION";
    case Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint.AMP_CONTENT:
      return "AMP_CONTENT";
    case Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Table card for Actions on Google. */
export interface Intent_Message_TableCard {
  /** Required. Title of the card. */
  title: string;
  /** Optional. Subtitle to the title. */
  subtitle: string;
  /** Optional. Image which should be displayed on the card. */
  image:
    | Intent_Message_Image
    | undefined;
  /** Optional. Display properties for the columns in this table. */
  columnProperties: Intent_Message_ColumnProperties[];
  /** Optional. Rows in this table of data. */
  rows: Intent_Message_TableCardRow[];
  /** Optional. List of buttons for the card. */
  buttons: Intent_Message_BasicCard_Button[];
}

/**
 * Column properties for
 * [TableCard][google.cloud.dialogflow.v2.Intent.Message.TableCard].
 */
export interface Intent_Message_ColumnProperties {
  /** Required. Column heading. */
  header: string;
  /** Optional. Defines text alignment for all cells in this column. */
  horizontalAlignment: Intent_Message_ColumnProperties_HorizontalAlignment;
}

/** Text alignments within a cell. */
export enum Intent_Message_ColumnProperties_HorizontalAlignment {
  /** HORIZONTAL_ALIGNMENT_UNSPECIFIED - Text is aligned to the leading edge of the column. */
  HORIZONTAL_ALIGNMENT_UNSPECIFIED = 0,
  /** LEADING - Text is aligned to the leading edge of the column. */
  LEADING = 1,
  /** CENTER - Text is centered in the column. */
  CENTER = 2,
  /** TRAILING - Text is aligned to the trailing edge of the column. */
  TRAILING = 3,
  UNRECOGNIZED = -1,
}

export function intent_Message_ColumnProperties_HorizontalAlignmentFromJSON(
  object: any,
): Intent_Message_ColumnProperties_HorizontalAlignment {
  switch (object) {
    case 0:
    case "HORIZONTAL_ALIGNMENT_UNSPECIFIED":
      return Intent_Message_ColumnProperties_HorizontalAlignment.HORIZONTAL_ALIGNMENT_UNSPECIFIED;
    case 1:
    case "LEADING":
      return Intent_Message_ColumnProperties_HorizontalAlignment.LEADING;
    case 2:
    case "CENTER":
      return Intent_Message_ColumnProperties_HorizontalAlignment.CENTER;
    case 3:
    case "TRAILING":
      return Intent_Message_ColumnProperties_HorizontalAlignment.TRAILING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Intent_Message_ColumnProperties_HorizontalAlignment.UNRECOGNIZED;
  }
}

export function intent_Message_ColumnProperties_HorizontalAlignmentToJSON(
  object: Intent_Message_ColumnProperties_HorizontalAlignment,
): string {
  switch (object) {
    case Intent_Message_ColumnProperties_HorizontalAlignment.HORIZONTAL_ALIGNMENT_UNSPECIFIED:
      return "HORIZONTAL_ALIGNMENT_UNSPECIFIED";
    case Intent_Message_ColumnProperties_HorizontalAlignment.LEADING:
      return "LEADING";
    case Intent_Message_ColumnProperties_HorizontalAlignment.CENTER:
      return "CENTER";
    case Intent_Message_ColumnProperties_HorizontalAlignment.TRAILING:
      return "TRAILING";
    case Intent_Message_ColumnProperties_HorizontalAlignment.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Row of [TableCard][google.cloud.dialogflow.v2.Intent.Message.TableCard]. */
export interface Intent_Message_TableCardRow {
  /** Optional. List of cells that make up this row. */
  cells: Intent_Message_TableCardCell[];
  /** Optional. Whether to add a visual divider after this row. */
  dividerAfter: boolean;
}

/**
 * Cell of
 * [TableCardRow][google.cloud.dialogflow.v2.Intent.Message.TableCardRow].
 */
export interface Intent_Message_TableCardCell {
  /** Required. Text in this cell. */
  text: string;
}

/** Represents a single followup intent in the chain. */
export interface Intent_FollowupIntentInfo {
  /**
   * The unique identifier of the followup intent.
   * Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
   */
  followupIntentName: string;
  /**
   * The unique identifier of the followup intent's parent.
   * Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
   */
  parentFollowupIntentName: string;
}

/**
 * The request message for
 * [Intents.ListIntents][google.cloud.dialogflow.v2.Intents.ListIntents].
 */
export interface ListIntentsRequest {
  /**
   * Required. The agent to list all intents from.
   * Format: `projects/<Project ID>/agent` or `projects/<Project
   * ID>/locations/<Location ID>/agent`.
   *
   * Alternatively, you can specify the environment to list intents for.
   * Format: `projects/<Project ID>/agent/environments/<Environment ID>`
   * or `projects/<Project ID>/locations/<Location
   * ID>/agent/environments/<Environment ID>`.
   * Note: training phrases of the intents will not be returned for non-draft
   * environment.
   */
  parent: string;
  /**
   * Optional. The language used to access language-specific data.
   * If not specified, the agent's default language is used.
   * For more information, see
   * [Multilingual intent and entity
   * data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
   */
  languageCode: string;
  /** Optional. The resource view to apply to the returned intent. */
  intentView: IntentView;
  /**
   * Optional. The maximum number of items to return in a single page. By
   * default 100 and at most 1000.
   */
  pageSize: number;
  /** Optional. The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [Intents.ListIntents][google.cloud.dialogflow.v2.Intents.ListIntents].
 */
export interface ListIntentsResponse {
  /**
   * The list of agent intents. There will be a maximum number of items
   * returned based on the page_size field in the request.
   */
  intents: Intent[];
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [Intents.GetIntent][google.cloud.dialogflow.v2.Intents.GetIntent].
 */
export interface GetIntentRequest {
  /**
   * Required. The name of the intent.
   * Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
   */
  name: string;
  /**
   * Optional. The language used to access language-specific data.
   * If not specified, the agent's default language is used.
   * For more information, see
   * [Multilingual intent and entity
   * data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
   */
  languageCode: string;
  /** Optional. The resource view to apply to the returned intent. */
  intentView: IntentView;
}

/**
 * The request message for
 * [Intents.CreateIntent][google.cloud.dialogflow.v2.Intents.CreateIntent].
 */
export interface CreateIntentRequest {
  /**
   * Required. The agent to create a intent for.
   * Format: `projects/<Project ID>/agent`.
   */
  parent: string;
  /** Required. The intent to create. */
  intent:
    | Intent
    | undefined;
  /**
   * Optional. The language used to access language-specific data.
   * If not specified, the agent's default language is used.
   * For more information, see
   * [Multilingual intent and entity
   * data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
   */
  languageCode: string;
  /** Optional. The resource view to apply to the returned intent. */
  intentView: IntentView;
}

/**
 * The request message for
 * [Intents.UpdateIntent][google.cloud.dialogflow.v2.Intents.UpdateIntent].
 */
export interface UpdateIntentRequest {
  /** Required. The intent to update. */
  intent:
    | Intent
    | undefined;
  /**
   * Optional. The language used to access language-specific data.
   * If not specified, the agent's default language is used.
   * For more information, see
   * [Multilingual intent and entity
   * data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
   */
  languageCode: string;
  /** Optional. The mask to control which fields get updated. */
  updateMask:
    | string[]
    | undefined;
  /** Optional. The resource view to apply to the returned intent. */
  intentView: IntentView;
}

/**
 * The request message for
 * [Intents.DeleteIntent][google.cloud.dialogflow.v2.Intents.DeleteIntent].
 */
export interface DeleteIntentRequest {
  /**
   * Required. The name of the intent to delete. If this intent has direct or
   * indirect followup intents, we also delete them.
   * Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
   */
  name: string;
}

export interface BatchUpdateIntentsRequest {
  /**
   * Required. The name of the agent to update or create intents in.
   * Format: `projects/<Project ID>/agent`.
   */
  parent: string;
  /**
   * The URI to a Google Cloud Storage file containing intents to update or
   * create. The file format can either be a serialized proto (of IntentBatch
   * type) or JSON object. Note: The URI must start with "gs://".
   */
  intentBatchUri?:
    | string
    | undefined;
  /** The collection of intents to update or create. */
  intentBatchInline?:
    | IntentBatch
    | undefined;
  /**
   * Optional. The language used to access language-specific data.
   * If not specified, the agent's default language is used.
   * For more information, see
   * [Multilingual intent and entity
   * data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
   */
  languageCode: string;
  /** Optional. The mask to control which fields get updated. */
  updateMask:
    | string[]
    | undefined;
  /** Optional. The resource view to apply to the returned intent. */
  intentView: IntentView;
}

/**
 * The response message for
 * [Intents.BatchUpdateIntents][google.cloud.dialogflow.v2.Intents.BatchUpdateIntents].
 */
export interface BatchUpdateIntentsResponse {
  /** The collection of updated or created intents. */
  intents: Intent[];
}

/**
 * The request message for
 * [Intents.BatchDeleteIntents][google.cloud.dialogflow.v2.Intents.BatchDeleteIntents].
 */
export interface BatchDeleteIntentsRequest {
  /**
   * Required. The name of the agent to delete all entities types for. Format:
   * `projects/<Project ID>/agent`.
   */
  parent: string;
  /**
   * Required. The collection of intents to delete. Only intent `name` must be
   * filled in.
   */
  intents: Intent[];
}

/** This message is a wrapper around a collection of intents. */
export interface IntentBatch {
  /** A collection of intents. */
  intents: Intent[];
}

function createBaseIntent(): Intent {
  return {
    name: "",
    displayName: "",
    webhookState: 0,
    priority: 0,
    isFallback: false,
    mlDisabled: false,
    liveAgentHandoff: false,
    endInteraction: false,
    inputContextNames: [],
    events: [],
    trainingPhrases: [],
    action: "",
    outputContexts: [],
    resetContexts: false,
    parameters: [],
    messages: [],
    defaultResponsePlatforms: [],
    rootFollowupIntentName: "",
    parentFollowupIntentName: "",
    followupIntentInfo: [],
  };
}

export const Intent: MessageFns<Intent> = {
  encode(message: Intent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.webhookState !== 0) {
      writer.uint32(48).int32(message.webhookState);
    }
    if (message.priority !== 0) {
      writer.uint32(24).int32(message.priority);
    }
    if (message.isFallback !== false) {
      writer.uint32(32).bool(message.isFallback);
    }
    if (message.mlDisabled !== false) {
      writer.uint32(152).bool(message.mlDisabled);
    }
    if (message.liveAgentHandoff !== false) {
      writer.uint32(160).bool(message.liveAgentHandoff);
    }
    if (message.endInteraction !== false) {
      writer.uint32(168).bool(message.endInteraction);
    }
    for (const v of message.inputContextNames) {
      writer.uint32(58).string(v!);
    }
    for (const v of message.events) {
      writer.uint32(66).string(v!);
    }
    for (const v of message.trainingPhrases) {
      Intent_TrainingPhrase.encode(v!, writer.uint32(74).fork()).join();
    }
    if (message.action !== "") {
      writer.uint32(82).string(message.action);
    }
    for (const v of message.outputContexts) {
      Context.encode(v!, writer.uint32(90).fork()).join();
    }
    if (message.resetContexts !== false) {
      writer.uint32(96).bool(message.resetContexts);
    }
    for (const v of message.parameters) {
      Intent_Parameter.encode(v!, writer.uint32(106).fork()).join();
    }
    for (const v of message.messages) {
      Intent_Message.encode(v!, writer.uint32(114).fork()).join();
    }
    writer.uint32(122).fork();
    for (const v of message.defaultResponsePlatforms) {
      writer.int32(v);
    }
    writer.join();
    if (message.rootFollowupIntentName !== "") {
      writer.uint32(130).string(message.rootFollowupIntentName);
    }
    if (message.parentFollowupIntentName !== "") {
      writer.uint32(138).string(message.parentFollowupIntentName);
    }
    for (const v of message.followupIntentInfo) {
      Intent_FollowupIntentInfo.encode(v!, writer.uint32(146).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.webhookState = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.priority = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isFallback = reader.bool();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.mlDisabled = reader.bool();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.liveAgentHandoff = reader.bool();
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.endInteraction = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.inputContextNames.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.events.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.trainingPhrases.push(Intent_TrainingPhrase.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.action = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.outputContexts.push(Context.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.resetContexts = reader.bool();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.parameters.push(Intent_Parameter.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.messages.push(Intent_Message.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag === 120) {
            message.defaultResponsePlatforms.push(reader.int32() as any);

            continue;
          }

          if (tag === 122) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.defaultResponsePlatforms.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.rootFollowupIntentName = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.parentFollowupIntentName = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.followupIntentInfo.push(Intent_FollowupIntentInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      webhookState: isSet(object.webhookState) ? intent_WebhookStateFromJSON(object.webhookState) : 0,
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
      isFallback: isSet(object.isFallback) ? globalThis.Boolean(object.isFallback) : false,
      mlDisabled: isSet(object.mlDisabled) ? globalThis.Boolean(object.mlDisabled) : false,
      liveAgentHandoff: isSet(object.liveAgentHandoff) ? globalThis.Boolean(object.liveAgentHandoff) : false,
      endInteraction: isSet(object.endInteraction) ? globalThis.Boolean(object.endInteraction) : false,
      inputContextNames: globalThis.Array.isArray(object?.inputContextNames)
        ? object.inputContextNames.map((e: any) => globalThis.String(e))
        : [],
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => globalThis.String(e)) : [],
      trainingPhrases: globalThis.Array.isArray(object?.trainingPhrases)
        ? object.trainingPhrases.map((e: any) => Intent_TrainingPhrase.fromJSON(e))
        : [],
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      outputContexts: globalThis.Array.isArray(object?.outputContexts)
        ? object.outputContexts.map((e: any) => Context.fromJSON(e))
        : [],
      resetContexts: isSet(object.resetContexts) ? globalThis.Boolean(object.resetContexts) : false,
      parameters: globalThis.Array.isArray(object?.parameters)
        ? object.parameters.map((e: any) => Intent_Parameter.fromJSON(e))
        : [],
      messages: globalThis.Array.isArray(object?.messages)
        ? object.messages.map((e: any) => Intent_Message.fromJSON(e))
        : [],
      defaultResponsePlatforms: globalThis.Array.isArray(object?.defaultResponsePlatforms)
        ? object.defaultResponsePlatforms.map((e: any) => intent_Message_PlatformFromJSON(e))
        : [],
      rootFollowupIntentName: isSet(object.rootFollowupIntentName)
        ? globalThis.String(object.rootFollowupIntentName)
        : "",
      parentFollowupIntentName: isSet(object.parentFollowupIntentName)
        ? globalThis.String(object.parentFollowupIntentName)
        : "",
      followupIntentInfo: globalThis.Array.isArray(object?.followupIntentInfo)
        ? object.followupIntentInfo.map((e: any) => Intent_FollowupIntentInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Intent): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.webhookState !== 0) {
      obj.webhookState = intent_WebhookStateToJSON(message.webhookState);
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    if (message.isFallback !== false) {
      obj.isFallback = message.isFallback;
    }
    if (message.mlDisabled !== false) {
      obj.mlDisabled = message.mlDisabled;
    }
    if (message.liveAgentHandoff !== false) {
      obj.liveAgentHandoff = message.liveAgentHandoff;
    }
    if (message.endInteraction !== false) {
      obj.endInteraction = message.endInteraction;
    }
    if (message.inputContextNames?.length) {
      obj.inputContextNames = message.inputContextNames;
    }
    if (message.events?.length) {
      obj.events = message.events;
    }
    if (message.trainingPhrases?.length) {
      obj.trainingPhrases = message.trainingPhrases.map((e) => Intent_TrainingPhrase.toJSON(e));
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.outputContexts?.length) {
      obj.outputContexts = message.outputContexts.map((e) => Context.toJSON(e));
    }
    if (message.resetContexts !== false) {
      obj.resetContexts = message.resetContexts;
    }
    if (message.parameters?.length) {
      obj.parameters = message.parameters.map((e) => Intent_Parameter.toJSON(e));
    }
    if (message.messages?.length) {
      obj.messages = message.messages.map((e) => Intent_Message.toJSON(e));
    }
    if (message.defaultResponsePlatforms?.length) {
      obj.defaultResponsePlatforms = message.defaultResponsePlatforms.map((e) => intent_Message_PlatformToJSON(e));
    }
    if (message.rootFollowupIntentName !== "") {
      obj.rootFollowupIntentName = message.rootFollowupIntentName;
    }
    if (message.parentFollowupIntentName !== "") {
      obj.parentFollowupIntentName = message.parentFollowupIntentName;
    }
    if (message.followupIntentInfo?.length) {
      obj.followupIntentInfo = message.followupIntentInfo.map((e) => Intent_FollowupIntentInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Intent>): Intent {
    return Intent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent>): Intent {
    const message = createBaseIntent();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.webhookState = object.webhookState ?? 0;
    message.priority = object.priority ?? 0;
    message.isFallback = object.isFallback ?? false;
    message.mlDisabled = object.mlDisabled ?? false;
    message.liveAgentHandoff = object.liveAgentHandoff ?? false;
    message.endInteraction = object.endInteraction ?? false;
    message.inputContextNames = object.inputContextNames?.map((e) => e) || [];
    message.events = object.events?.map((e) => e) || [];
    message.trainingPhrases = object.trainingPhrases?.map((e) => Intent_TrainingPhrase.fromPartial(e)) || [];
    message.action = object.action ?? "";
    message.outputContexts = object.outputContexts?.map((e) => Context.fromPartial(e)) || [];
    message.resetContexts = object.resetContexts ?? false;
    message.parameters = object.parameters?.map((e) => Intent_Parameter.fromPartial(e)) || [];
    message.messages = object.messages?.map((e) => Intent_Message.fromPartial(e)) || [];
    message.defaultResponsePlatforms = object.defaultResponsePlatforms?.map((e) => e) || [];
    message.rootFollowupIntentName = object.rootFollowupIntentName ?? "";
    message.parentFollowupIntentName = object.parentFollowupIntentName ?? "";
    message.followupIntentInfo = object.followupIntentInfo?.map((e) => Intent_FollowupIntentInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIntent_TrainingPhrase(): Intent_TrainingPhrase {
  return { name: "", type: 0, parts: [], timesAddedCount: 0 };
}

export const Intent_TrainingPhrase: MessageFns<Intent_TrainingPhrase> = {
  encode(message: Intent_TrainingPhrase, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    for (const v of message.parts) {
      Intent_TrainingPhrase_Part.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.timesAddedCount !== 0) {
      writer.uint32(32).int32(message.timesAddedCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_TrainingPhrase {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_TrainingPhrase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parts.push(Intent_TrainingPhrase_Part.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.timesAddedCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_TrainingPhrase {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? intent_TrainingPhrase_TypeFromJSON(object.type) : 0,
      parts: globalThis.Array.isArray(object?.parts)
        ? object.parts.map((e: any) => Intent_TrainingPhrase_Part.fromJSON(e))
        : [],
      timesAddedCount: isSet(object.timesAddedCount) ? globalThis.Number(object.timesAddedCount) : 0,
    };
  },

  toJSON(message: Intent_TrainingPhrase): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = intent_TrainingPhrase_TypeToJSON(message.type);
    }
    if (message.parts?.length) {
      obj.parts = message.parts.map((e) => Intent_TrainingPhrase_Part.toJSON(e));
    }
    if (message.timesAddedCount !== 0) {
      obj.timesAddedCount = Math.round(message.timesAddedCount);
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_TrainingPhrase>): Intent_TrainingPhrase {
    return Intent_TrainingPhrase.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_TrainingPhrase>): Intent_TrainingPhrase {
    const message = createBaseIntent_TrainingPhrase();
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    message.parts = object.parts?.map((e) => Intent_TrainingPhrase_Part.fromPartial(e)) || [];
    message.timesAddedCount = object.timesAddedCount ?? 0;
    return message;
  },
};

function createBaseIntent_TrainingPhrase_Part(): Intent_TrainingPhrase_Part {
  return { text: "", entityType: "", alias: "", userDefined: false };
}

export const Intent_TrainingPhrase_Part: MessageFns<Intent_TrainingPhrase_Part> = {
  encode(message: Intent_TrainingPhrase_Part, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    if (message.entityType !== "") {
      writer.uint32(18).string(message.entityType);
    }
    if (message.alias !== "") {
      writer.uint32(26).string(message.alias);
    }
    if (message.userDefined !== false) {
      writer.uint32(32).bool(message.userDefined);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_TrainingPhrase_Part {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_TrainingPhrase_Part();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entityType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.alias = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.userDefined = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_TrainingPhrase_Part {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      entityType: isSet(object.entityType) ? globalThis.String(object.entityType) : "",
      alias: isSet(object.alias) ? globalThis.String(object.alias) : "",
      userDefined: isSet(object.userDefined) ? globalThis.Boolean(object.userDefined) : false,
    };
  },

  toJSON(message: Intent_TrainingPhrase_Part): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.entityType !== "") {
      obj.entityType = message.entityType;
    }
    if (message.alias !== "") {
      obj.alias = message.alias;
    }
    if (message.userDefined !== false) {
      obj.userDefined = message.userDefined;
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_TrainingPhrase_Part>): Intent_TrainingPhrase_Part {
    return Intent_TrainingPhrase_Part.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_TrainingPhrase_Part>): Intent_TrainingPhrase_Part {
    const message = createBaseIntent_TrainingPhrase_Part();
    message.text = object.text ?? "";
    message.entityType = object.entityType ?? "";
    message.alias = object.alias ?? "";
    message.userDefined = object.userDefined ?? false;
    return message;
  },
};

function createBaseIntent_Parameter(): Intent_Parameter {
  return {
    name: "",
    displayName: "",
    value: "",
    defaultValue: "",
    entityTypeDisplayName: "",
    mandatory: false,
    prompts: [],
    isList: false,
  };
}

export const Intent_Parameter: MessageFns<Intent_Parameter> = {
  encode(message: Intent_Parameter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.value !== "") {
      writer.uint32(26).string(message.value);
    }
    if (message.defaultValue !== "") {
      writer.uint32(34).string(message.defaultValue);
    }
    if (message.entityTypeDisplayName !== "") {
      writer.uint32(42).string(message.entityTypeDisplayName);
    }
    if (message.mandatory !== false) {
      writer.uint32(48).bool(message.mandatory);
    }
    for (const v of message.prompts) {
      writer.uint32(58).string(v!);
    }
    if (message.isList !== false) {
      writer.uint32(64).bool(message.isList);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Parameter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Parameter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.value = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.defaultValue = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.entityTypeDisplayName = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.mandatory = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.prompts.push(reader.string());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.isList = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Parameter {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      defaultValue: isSet(object.defaultValue) ? globalThis.String(object.defaultValue) : "",
      entityTypeDisplayName: isSet(object.entityTypeDisplayName) ? globalThis.String(object.entityTypeDisplayName) : "",
      mandatory: isSet(object.mandatory) ? globalThis.Boolean(object.mandatory) : false,
      prompts: globalThis.Array.isArray(object?.prompts) ? object.prompts.map((e: any) => globalThis.String(e)) : [],
      isList: isSet(object.isList) ? globalThis.Boolean(object.isList) : false,
    };
  },

  toJSON(message: Intent_Parameter): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.defaultValue !== "") {
      obj.defaultValue = message.defaultValue;
    }
    if (message.entityTypeDisplayName !== "") {
      obj.entityTypeDisplayName = message.entityTypeDisplayName;
    }
    if (message.mandatory !== false) {
      obj.mandatory = message.mandatory;
    }
    if (message.prompts?.length) {
      obj.prompts = message.prompts;
    }
    if (message.isList !== false) {
      obj.isList = message.isList;
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Parameter>): Intent_Parameter {
    return Intent_Parameter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Parameter>): Intent_Parameter {
    const message = createBaseIntent_Parameter();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.value = object.value ?? "";
    message.defaultValue = object.defaultValue ?? "";
    message.entityTypeDisplayName = object.entityTypeDisplayName ?? "";
    message.mandatory = object.mandatory ?? false;
    message.prompts = object.prompts?.map((e) => e) || [];
    message.isList = object.isList ?? false;
    return message;
  },
};

function createBaseIntent_Message(): Intent_Message {
  return {
    text: undefined,
    image: undefined,
    quickReplies: undefined,
    card: undefined,
    payload: undefined,
    simpleResponses: undefined,
    basicCard: undefined,
    suggestions: undefined,
    linkOutSuggestion: undefined,
    listSelect: undefined,
    carouselSelect: undefined,
    browseCarouselCard: undefined,
    tableCard: undefined,
    mediaContent: undefined,
    platform: 0,
  };
}

export const Intent_Message: MessageFns<Intent_Message> = {
  encode(message: Intent_Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      Intent_Message_Text.encode(message.text, writer.uint32(10).fork()).join();
    }
    if (message.image !== undefined) {
      Intent_Message_Image.encode(message.image, writer.uint32(18).fork()).join();
    }
    if (message.quickReplies !== undefined) {
      Intent_Message_QuickReplies.encode(message.quickReplies, writer.uint32(26).fork()).join();
    }
    if (message.card !== undefined) {
      Intent_Message_Card.encode(message.card, writer.uint32(34).fork()).join();
    }
    if (message.payload !== undefined) {
      Struct.encode(Struct.wrap(message.payload), writer.uint32(42).fork()).join();
    }
    if (message.simpleResponses !== undefined) {
      Intent_Message_SimpleResponses.encode(message.simpleResponses, writer.uint32(58).fork()).join();
    }
    if (message.basicCard !== undefined) {
      Intent_Message_BasicCard.encode(message.basicCard, writer.uint32(66).fork()).join();
    }
    if (message.suggestions !== undefined) {
      Intent_Message_Suggestions.encode(message.suggestions, writer.uint32(74).fork()).join();
    }
    if (message.linkOutSuggestion !== undefined) {
      Intent_Message_LinkOutSuggestion.encode(message.linkOutSuggestion, writer.uint32(82).fork()).join();
    }
    if (message.listSelect !== undefined) {
      Intent_Message_ListSelect.encode(message.listSelect, writer.uint32(90).fork()).join();
    }
    if (message.carouselSelect !== undefined) {
      Intent_Message_CarouselSelect.encode(message.carouselSelect, writer.uint32(98).fork()).join();
    }
    if (message.browseCarouselCard !== undefined) {
      Intent_Message_BrowseCarouselCard.encode(message.browseCarouselCard, writer.uint32(178).fork()).join();
    }
    if (message.tableCard !== undefined) {
      Intent_Message_TableCard.encode(message.tableCard, writer.uint32(186).fork()).join();
    }
    if (message.mediaContent !== undefined) {
      Intent_Message_MediaContent.encode(message.mediaContent, writer.uint32(194).fork()).join();
    }
    if (message.platform !== 0) {
      writer.uint32(48).int32(message.platform);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = Intent_Message_Text.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.image = Intent_Message_Image.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.quickReplies = Intent_Message_QuickReplies.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.card = Intent_Message_Card.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.payload = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.simpleResponses = Intent_Message_SimpleResponses.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.basicCard = Intent_Message_BasicCard.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.suggestions = Intent_Message_Suggestions.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.linkOutSuggestion = Intent_Message_LinkOutSuggestion.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.listSelect = Intent_Message_ListSelect.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.carouselSelect = Intent_Message_CarouselSelect.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.browseCarouselCard = Intent_Message_BrowseCarouselCard.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.tableCard = Intent_Message_TableCard.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.mediaContent = Intent_Message_MediaContent.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.platform = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message {
    return {
      text: isSet(object.text) ? Intent_Message_Text.fromJSON(object.text) : undefined,
      image: isSet(object.image) ? Intent_Message_Image.fromJSON(object.image) : undefined,
      quickReplies: isSet(object.quickReplies) ? Intent_Message_QuickReplies.fromJSON(object.quickReplies) : undefined,
      card: isSet(object.card) ? Intent_Message_Card.fromJSON(object.card) : undefined,
      payload: isObject(object.payload) ? object.payload : undefined,
      simpleResponses: isSet(object.simpleResponses)
        ? Intent_Message_SimpleResponses.fromJSON(object.simpleResponses)
        : undefined,
      basicCard: isSet(object.basicCard) ? Intent_Message_BasicCard.fromJSON(object.basicCard) : undefined,
      suggestions: isSet(object.suggestions) ? Intent_Message_Suggestions.fromJSON(object.suggestions) : undefined,
      linkOutSuggestion: isSet(object.linkOutSuggestion)
        ? Intent_Message_LinkOutSuggestion.fromJSON(object.linkOutSuggestion)
        : undefined,
      listSelect: isSet(object.listSelect) ? Intent_Message_ListSelect.fromJSON(object.listSelect) : undefined,
      carouselSelect: isSet(object.carouselSelect)
        ? Intent_Message_CarouselSelect.fromJSON(object.carouselSelect)
        : undefined,
      browseCarouselCard: isSet(object.browseCarouselCard)
        ? Intent_Message_BrowseCarouselCard.fromJSON(object.browseCarouselCard)
        : undefined,
      tableCard: isSet(object.tableCard) ? Intent_Message_TableCard.fromJSON(object.tableCard) : undefined,
      mediaContent: isSet(object.mediaContent) ? Intent_Message_MediaContent.fromJSON(object.mediaContent) : undefined,
      platform: isSet(object.platform) ? intent_Message_PlatformFromJSON(object.platform) : 0,
    };
  },

  toJSON(message: Intent_Message): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = Intent_Message_Text.toJSON(message.text);
    }
    if (message.image !== undefined) {
      obj.image = Intent_Message_Image.toJSON(message.image);
    }
    if (message.quickReplies !== undefined) {
      obj.quickReplies = Intent_Message_QuickReplies.toJSON(message.quickReplies);
    }
    if (message.card !== undefined) {
      obj.card = Intent_Message_Card.toJSON(message.card);
    }
    if (message.payload !== undefined) {
      obj.payload = message.payload;
    }
    if (message.simpleResponses !== undefined) {
      obj.simpleResponses = Intent_Message_SimpleResponses.toJSON(message.simpleResponses);
    }
    if (message.basicCard !== undefined) {
      obj.basicCard = Intent_Message_BasicCard.toJSON(message.basicCard);
    }
    if (message.suggestions !== undefined) {
      obj.suggestions = Intent_Message_Suggestions.toJSON(message.suggestions);
    }
    if (message.linkOutSuggestion !== undefined) {
      obj.linkOutSuggestion = Intent_Message_LinkOutSuggestion.toJSON(message.linkOutSuggestion);
    }
    if (message.listSelect !== undefined) {
      obj.listSelect = Intent_Message_ListSelect.toJSON(message.listSelect);
    }
    if (message.carouselSelect !== undefined) {
      obj.carouselSelect = Intent_Message_CarouselSelect.toJSON(message.carouselSelect);
    }
    if (message.browseCarouselCard !== undefined) {
      obj.browseCarouselCard = Intent_Message_BrowseCarouselCard.toJSON(message.browseCarouselCard);
    }
    if (message.tableCard !== undefined) {
      obj.tableCard = Intent_Message_TableCard.toJSON(message.tableCard);
    }
    if (message.mediaContent !== undefined) {
      obj.mediaContent = Intent_Message_MediaContent.toJSON(message.mediaContent);
    }
    if (message.platform !== 0) {
      obj.platform = intent_Message_PlatformToJSON(message.platform);
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message>): Intent_Message {
    return Intent_Message.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message>): Intent_Message {
    const message = createBaseIntent_Message();
    message.text = (object.text !== undefined && object.text !== null)
      ? Intent_Message_Text.fromPartial(object.text)
      : undefined;
    message.image = (object.image !== undefined && object.image !== null)
      ? Intent_Message_Image.fromPartial(object.image)
      : undefined;
    message.quickReplies = (object.quickReplies !== undefined && object.quickReplies !== null)
      ? Intent_Message_QuickReplies.fromPartial(object.quickReplies)
      : undefined;
    message.card = (object.card !== undefined && object.card !== null)
      ? Intent_Message_Card.fromPartial(object.card)
      : undefined;
    message.payload = object.payload ?? undefined;
    message.simpleResponses = (object.simpleResponses !== undefined && object.simpleResponses !== null)
      ? Intent_Message_SimpleResponses.fromPartial(object.simpleResponses)
      : undefined;
    message.basicCard = (object.basicCard !== undefined && object.basicCard !== null)
      ? Intent_Message_BasicCard.fromPartial(object.basicCard)
      : undefined;
    message.suggestions = (object.suggestions !== undefined && object.suggestions !== null)
      ? Intent_Message_Suggestions.fromPartial(object.suggestions)
      : undefined;
    message.linkOutSuggestion = (object.linkOutSuggestion !== undefined && object.linkOutSuggestion !== null)
      ? Intent_Message_LinkOutSuggestion.fromPartial(object.linkOutSuggestion)
      : undefined;
    message.listSelect = (object.listSelect !== undefined && object.listSelect !== null)
      ? Intent_Message_ListSelect.fromPartial(object.listSelect)
      : undefined;
    message.carouselSelect = (object.carouselSelect !== undefined && object.carouselSelect !== null)
      ? Intent_Message_CarouselSelect.fromPartial(object.carouselSelect)
      : undefined;
    message.browseCarouselCard = (object.browseCarouselCard !== undefined && object.browseCarouselCard !== null)
      ? Intent_Message_BrowseCarouselCard.fromPartial(object.browseCarouselCard)
      : undefined;
    message.tableCard = (object.tableCard !== undefined && object.tableCard !== null)
      ? Intent_Message_TableCard.fromPartial(object.tableCard)
      : undefined;
    message.mediaContent = (object.mediaContent !== undefined && object.mediaContent !== null)
      ? Intent_Message_MediaContent.fromPartial(object.mediaContent)
      : undefined;
    message.platform = object.platform ?? 0;
    return message;
  },
};

function createBaseIntent_Message_Text(): Intent_Message_Text {
  return { text: [] };
}

export const Intent_Message_Text: MessageFns<Intent_Message_Text> = {
  encode(message: Intent_Message_Text, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.text) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_Text {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_Text();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_Text {
    return { text: globalThis.Array.isArray(object?.text) ? object.text.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: Intent_Message_Text): unknown {
    const obj: any = {};
    if (message.text?.length) {
      obj.text = message.text;
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_Text>): Intent_Message_Text {
    return Intent_Message_Text.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_Text>): Intent_Message_Text {
    const message = createBaseIntent_Message_Text();
    message.text = object.text?.map((e) => e) || [];
    return message;
  },
};

function createBaseIntent_Message_Image(): Intent_Message_Image {
  return { imageUri: "", accessibilityText: "" };
}

export const Intent_Message_Image: MessageFns<Intent_Message_Image> = {
  encode(message: Intent_Message_Image, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.imageUri !== "") {
      writer.uint32(10).string(message.imageUri);
    }
    if (message.accessibilityText !== "") {
      writer.uint32(18).string(message.accessibilityText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_Image {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_Image();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.imageUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accessibilityText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_Image {
    return {
      imageUri: isSet(object.imageUri) ? globalThis.String(object.imageUri) : "",
      accessibilityText: isSet(object.accessibilityText) ? globalThis.String(object.accessibilityText) : "",
    };
  },

  toJSON(message: Intent_Message_Image): unknown {
    const obj: any = {};
    if (message.imageUri !== "") {
      obj.imageUri = message.imageUri;
    }
    if (message.accessibilityText !== "") {
      obj.accessibilityText = message.accessibilityText;
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_Image>): Intent_Message_Image {
    return Intent_Message_Image.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_Image>): Intent_Message_Image {
    const message = createBaseIntent_Message_Image();
    message.imageUri = object.imageUri ?? "";
    message.accessibilityText = object.accessibilityText ?? "";
    return message;
  },
};

function createBaseIntent_Message_QuickReplies(): Intent_Message_QuickReplies {
  return { title: "", quickReplies: [] };
}

export const Intent_Message_QuickReplies: MessageFns<Intent_Message_QuickReplies> = {
  encode(message: Intent_Message_QuickReplies, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    for (const v of message.quickReplies) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_QuickReplies {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_QuickReplies();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.quickReplies.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_QuickReplies {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      quickReplies: globalThis.Array.isArray(object?.quickReplies)
        ? object.quickReplies.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Intent_Message_QuickReplies): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.quickReplies?.length) {
      obj.quickReplies = message.quickReplies;
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_QuickReplies>): Intent_Message_QuickReplies {
    return Intent_Message_QuickReplies.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_QuickReplies>): Intent_Message_QuickReplies {
    const message = createBaseIntent_Message_QuickReplies();
    message.title = object.title ?? "";
    message.quickReplies = object.quickReplies?.map((e) => e) || [];
    return message;
  },
};

function createBaseIntent_Message_Card(): Intent_Message_Card {
  return { title: "", subtitle: "", imageUri: "", buttons: [] };
}

export const Intent_Message_Card: MessageFns<Intent_Message_Card> = {
  encode(message: Intent_Message_Card, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.subtitle !== "") {
      writer.uint32(18).string(message.subtitle);
    }
    if (message.imageUri !== "") {
      writer.uint32(26).string(message.imageUri);
    }
    for (const v of message.buttons) {
      Intent_Message_Card_Button.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_Card {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_Card();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.subtitle = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.imageUri = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.buttons.push(Intent_Message_Card_Button.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_Card {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      subtitle: isSet(object.subtitle) ? globalThis.String(object.subtitle) : "",
      imageUri: isSet(object.imageUri) ? globalThis.String(object.imageUri) : "",
      buttons: globalThis.Array.isArray(object?.buttons)
        ? object.buttons.map((e: any) => Intent_Message_Card_Button.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Intent_Message_Card): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.subtitle !== "") {
      obj.subtitle = message.subtitle;
    }
    if (message.imageUri !== "") {
      obj.imageUri = message.imageUri;
    }
    if (message.buttons?.length) {
      obj.buttons = message.buttons.map((e) => Intent_Message_Card_Button.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_Card>): Intent_Message_Card {
    return Intent_Message_Card.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_Card>): Intent_Message_Card {
    const message = createBaseIntent_Message_Card();
    message.title = object.title ?? "";
    message.subtitle = object.subtitle ?? "";
    message.imageUri = object.imageUri ?? "";
    message.buttons = object.buttons?.map((e) => Intent_Message_Card_Button.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIntent_Message_Card_Button(): Intent_Message_Card_Button {
  return { text: "", postback: "" };
}

export const Intent_Message_Card_Button: MessageFns<Intent_Message_Card_Button> = {
  encode(message: Intent_Message_Card_Button, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    if (message.postback !== "") {
      writer.uint32(18).string(message.postback);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_Card_Button {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_Card_Button();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.postback = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_Card_Button {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      postback: isSet(object.postback) ? globalThis.String(object.postback) : "",
    };
  },

  toJSON(message: Intent_Message_Card_Button): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.postback !== "") {
      obj.postback = message.postback;
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_Card_Button>): Intent_Message_Card_Button {
    return Intent_Message_Card_Button.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_Card_Button>): Intent_Message_Card_Button {
    const message = createBaseIntent_Message_Card_Button();
    message.text = object.text ?? "";
    message.postback = object.postback ?? "";
    return message;
  },
};

function createBaseIntent_Message_SimpleResponse(): Intent_Message_SimpleResponse {
  return { textToSpeech: "", ssml: "", displayText: "" };
}

export const Intent_Message_SimpleResponse: MessageFns<Intent_Message_SimpleResponse> = {
  encode(message: Intent_Message_SimpleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.textToSpeech !== "") {
      writer.uint32(10).string(message.textToSpeech);
    }
    if (message.ssml !== "") {
      writer.uint32(18).string(message.ssml);
    }
    if (message.displayText !== "") {
      writer.uint32(26).string(message.displayText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_SimpleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_SimpleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.textToSpeech = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ssml = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_SimpleResponse {
    return {
      textToSpeech: isSet(object.textToSpeech) ? globalThis.String(object.textToSpeech) : "",
      ssml: isSet(object.ssml) ? globalThis.String(object.ssml) : "",
      displayText: isSet(object.displayText) ? globalThis.String(object.displayText) : "",
    };
  },

  toJSON(message: Intent_Message_SimpleResponse): unknown {
    const obj: any = {};
    if (message.textToSpeech !== "") {
      obj.textToSpeech = message.textToSpeech;
    }
    if (message.ssml !== "") {
      obj.ssml = message.ssml;
    }
    if (message.displayText !== "") {
      obj.displayText = message.displayText;
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_SimpleResponse>): Intent_Message_SimpleResponse {
    return Intent_Message_SimpleResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_SimpleResponse>): Intent_Message_SimpleResponse {
    const message = createBaseIntent_Message_SimpleResponse();
    message.textToSpeech = object.textToSpeech ?? "";
    message.ssml = object.ssml ?? "";
    message.displayText = object.displayText ?? "";
    return message;
  },
};

function createBaseIntent_Message_SimpleResponses(): Intent_Message_SimpleResponses {
  return { simpleResponses: [] };
}

export const Intent_Message_SimpleResponses: MessageFns<Intent_Message_SimpleResponses> = {
  encode(message: Intent_Message_SimpleResponses, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.simpleResponses) {
      Intent_Message_SimpleResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_SimpleResponses {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_SimpleResponses();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.simpleResponses.push(Intent_Message_SimpleResponse.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_SimpleResponses {
    return {
      simpleResponses: globalThis.Array.isArray(object?.simpleResponses)
        ? object.simpleResponses.map((e: any) => Intent_Message_SimpleResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Intent_Message_SimpleResponses): unknown {
    const obj: any = {};
    if (message.simpleResponses?.length) {
      obj.simpleResponses = message.simpleResponses.map((e) => Intent_Message_SimpleResponse.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_SimpleResponses>): Intent_Message_SimpleResponses {
    return Intent_Message_SimpleResponses.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_SimpleResponses>): Intent_Message_SimpleResponses {
    const message = createBaseIntent_Message_SimpleResponses();
    message.simpleResponses = object.simpleResponses?.map((e) => Intent_Message_SimpleResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIntent_Message_BasicCard(): Intent_Message_BasicCard {
  return { title: "", subtitle: "", formattedText: "", image: undefined, buttons: [] };
}

export const Intent_Message_BasicCard: MessageFns<Intent_Message_BasicCard> = {
  encode(message: Intent_Message_BasicCard, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.subtitle !== "") {
      writer.uint32(18).string(message.subtitle);
    }
    if (message.formattedText !== "") {
      writer.uint32(26).string(message.formattedText);
    }
    if (message.image !== undefined) {
      Intent_Message_Image.encode(message.image, writer.uint32(34).fork()).join();
    }
    for (const v of message.buttons) {
      Intent_Message_BasicCard_Button.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_BasicCard {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_BasicCard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.subtitle = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.formattedText = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.image = Intent_Message_Image.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.buttons.push(Intent_Message_BasicCard_Button.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_BasicCard {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      subtitle: isSet(object.subtitle) ? globalThis.String(object.subtitle) : "",
      formattedText: isSet(object.formattedText) ? globalThis.String(object.formattedText) : "",
      image: isSet(object.image) ? Intent_Message_Image.fromJSON(object.image) : undefined,
      buttons: globalThis.Array.isArray(object?.buttons)
        ? object.buttons.map((e: any) => Intent_Message_BasicCard_Button.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Intent_Message_BasicCard): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.subtitle !== "") {
      obj.subtitle = message.subtitle;
    }
    if (message.formattedText !== "") {
      obj.formattedText = message.formattedText;
    }
    if (message.image !== undefined) {
      obj.image = Intent_Message_Image.toJSON(message.image);
    }
    if (message.buttons?.length) {
      obj.buttons = message.buttons.map((e) => Intent_Message_BasicCard_Button.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_BasicCard>): Intent_Message_BasicCard {
    return Intent_Message_BasicCard.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_BasicCard>): Intent_Message_BasicCard {
    const message = createBaseIntent_Message_BasicCard();
    message.title = object.title ?? "";
    message.subtitle = object.subtitle ?? "";
    message.formattedText = object.formattedText ?? "";
    message.image = (object.image !== undefined && object.image !== null)
      ? Intent_Message_Image.fromPartial(object.image)
      : undefined;
    message.buttons = object.buttons?.map((e) => Intent_Message_BasicCard_Button.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIntent_Message_BasicCard_Button(): Intent_Message_BasicCard_Button {
  return { title: "", openUriAction: undefined };
}

export const Intent_Message_BasicCard_Button: MessageFns<Intent_Message_BasicCard_Button> = {
  encode(message: Intent_Message_BasicCard_Button, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.openUriAction !== undefined) {
      Intent_Message_BasicCard_Button_OpenUriAction.encode(message.openUriAction, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_BasicCard_Button {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_BasicCard_Button();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.openUriAction = Intent_Message_BasicCard_Button_OpenUriAction.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_BasicCard_Button {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      openUriAction: isSet(object.openUriAction)
        ? Intent_Message_BasicCard_Button_OpenUriAction.fromJSON(object.openUriAction)
        : undefined,
    };
  },

  toJSON(message: Intent_Message_BasicCard_Button): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.openUriAction !== undefined) {
      obj.openUriAction = Intent_Message_BasicCard_Button_OpenUriAction.toJSON(message.openUriAction);
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_BasicCard_Button>): Intent_Message_BasicCard_Button {
    return Intent_Message_BasicCard_Button.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_BasicCard_Button>): Intent_Message_BasicCard_Button {
    const message = createBaseIntent_Message_BasicCard_Button();
    message.title = object.title ?? "";
    message.openUriAction = (object.openUriAction !== undefined && object.openUriAction !== null)
      ? Intent_Message_BasicCard_Button_OpenUriAction.fromPartial(object.openUriAction)
      : undefined;
    return message;
  },
};

function createBaseIntent_Message_BasicCard_Button_OpenUriAction(): Intent_Message_BasicCard_Button_OpenUriAction {
  return { uri: "" };
}

export const Intent_Message_BasicCard_Button_OpenUriAction: MessageFns<Intent_Message_BasicCard_Button_OpenUriAction> =
  {
    encode(
      message: Intent_Message_BasicCard_Button_OpenUriAction,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.uri !== "") {
        writer.uint32(10).string(message.uri);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_BasicCard_Button_OpenUriAction {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseIntent_Message_BasicCard_Button_OpenUriAction();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.uri = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): Intent_Message_BasicCard_Button_OpenUriAction {
      return { uri: isSet(object.uri) ? globalThis.String(object.uri) : "" };
    },

    toJSON(message: Intent_Message_BasicCard_Button_OpenUriAction): unknown {
      const obj: any = {};
      if (message.uri !== "") {
        obj.uri = message.uri;
      }
      return obj;
    },

    create(
      base?: DeepPartial<Intent_Message_BasicCard_Button_OpenUriAction>,
    ): Intent_Message_BasicCard_Button_OpenUriAction {
      return Intent_Message_BasicCard_Button_OpenUriAction.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<Intent_Message_BasicCard_Button_OpenUriAction>,
    ): Intent_Message_BasicCard_Button_OpenUriAction {
      const message = createBaseIntent_Message_BasicCard_Button_OpenUriAction();
      message.uri = object.uri ?? "";
      return message;
    },
  };

function createBaseIntent_Message_Suggestion(): Intent_Message_Suggestion {
  return { title: "" };
}

export const Intent_Message_Suggestion: MessageFns<Intent_Message_Suggestion> = {
  encode(message: Intent_Message_Suggestion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_Suggestion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_Suggestion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_Suggestion {
    return { title: isSet(object.title) ? globalThis.String(object.title) : "" };
  },

  toJSON(message: Intent_Message_Suggestion): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_Suggestion>): Intent_Message_Suggestion {
    return Intent_Message_Suggestion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_Suggestion>): Intent_Message_Suggestion {
    const message = createBaseIntent_Message_Suggestion();
    message.title = object.title ?? "";
    return message;
  },
};

function createBaseIntent_Message_Suggestions(): Intent_Message_Suggestions {
  return { suggestions: [] };
}

export const Intent_Message_Suggestions: MessageFns<Intent_Message_Suggestions> = {
  encode(message: Intent_Message_Suggestions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.suggestions) {
      Intent_Message_Suggestion.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_Suggestions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_Suggestions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.suggestions.push(Intent_Message_Suggestion.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_Suggestions {
    return {
      suggestions: globalThis.Array.isArray(object?.suggestions)
        ? object.suggestions.map((e: any) => Intent_Message_Suggestion.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Intent_Message_Suggestions): unknown {
    const obj: any = {};
    if (message.suggestions?.length) {
      obj.suggestions = message.suggestions.map((e) => Intent_Message_Suggestion.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_Suggestions>): Intent_Message_Suggestions {
    return Intent_Message_Suggestions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_Suggestions>): Intent_Message_Suggestions {
    const message = createBaseIntent_Message_Suggestions();
    message.suggestions = object.suggestions?.map((e) => Intent_Message_Suggestion.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIntent_Message_LinkOutSuggestion(): Intent_Message_LinkOutSuggestion {
  return { destinationName: "", uri: "" };
}

export const Intent_Message_LinkOutSuggestion: MessageFns<Intent_Message_LinkOutSuggestion> = {
  encode(message: Intent_Message_LinkOutSuggestion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationName !== "") {
      writer.uint32(10).string(message.destinationName);
    }
    if (message.uri !== "") {
      writer.uint32(18).string(message.uri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_LinkOutSuggestion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_LinkOutSuggestion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.destinationName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_LinkOutSuggestion {
    return {
      destinationName: isSet(object.destinationName) ? globalThis.String(object.destinationName) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
    };
  },

  toJSON(message: Intent_Message_LinkOutSuggestion): unknown {
    const obj: any = {};
    if (message.destinationName !== "") {
      obj.destinationName = message.destinationName;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_LinkOutSuggestion>): Intent_Message_LinkOutSuggestion {
    return Intent_Message_LinkOutSuggestion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_LinkOutSuggestion>): Intent_Message_LinkOutSuggestion {
    const message = createBaseIntent_Message_LinkOutSuggestion();
    message.destinationName = object.destinationName ?? "";
    message.uri = object.uri ?? "";
    return message;
  },
};

function createBaseIntent_Message_ListSelect(): Intent_Message_ListSelect {
  return { title: "", items: [], subtitle: "" };
}

export const Intent_Message_ListSelect: MessageFns<Intent_Message_ListSelect> = {
  encode(message: Intent_Message_ListSelect, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    for (const v of message.items) {
      Intent_Message_ListSelect_Item.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.subtitle !== "") {
      writer.uint32(26).string(message.subtitle);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_ListSelect {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_ListSelect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.items.push(Intent_Message_ListSelect_Item.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.subtitle = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_ListSelect {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      items: globalThis.Array.isArray(object?.items)
        ? object.items.map((e: any) => Intent_Message_ListSelect_Item.fromJSON(e))
        : [],
      subtitle: isSet(object.subtitle) ? globalThis.String(object.subtitle) : "",
    };
  },

  toJSON(message: Intent_Message_ListSelect): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => Intent_Message_ListSelect_Item.toJSON(e));
    }
    if (message.subtitle !== "") {
      obj.subtitle = message.subtitle;
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_ListSelect>): Intent_Message_ListSelect {
    return Intent_Message_ListSelect.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_ListSelect>): Intent_Message_ListSelect {
    const message = createBaseIntent_Message_ListSelect();
    message.title = object.title ?? "";
    message.items = object.items?.map((e) => Intent_Message_ListSelect_Item.fromPartial(e)) || [];
    message.subtitle = object.subtitle ?? "";
    return message;
  },
};

function createBaseIntent_Message_ListSelect_Item(): Intent_Message_ListSelect_Item {
  return { info: undefined, title: "", description: "", image: undefined };
}

export const Intent_Message_ListSelect_Item: MessageFns<Intent_Message_ListSelect_Item> = {
  encode(message: Intent_Message_ListSelect_Item, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.info !== undefined) {
      Intent_Message_SelectItemInfo.encode(message.info, writer.uint32(10).fork()).join();
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.image !== undefined) {
      Intent_Message_Image.encode(message.image, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_ListSelect_Item {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_ListSelect_Item();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.info = Intent_Message_SelectItemInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.image = Intent_Message_Image.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_ListSelect_Item {
    return {
      info: isSet(object.info) ? Intent_Message_SelectItemInfo.fromJSON(object.info) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      image: isSet(object.image) ? Intent_Message_Image.fromJSON(object.image) : undefined,
    };
  },

  toJSON(message: Intent_Message_ListSelect_Item): unknown {
    const obj: any = {};
    if (message.info !== undefined) {
      obj.info = Intent_Message_SelectItemInfo.toJSON(message.info);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.image !== undefined) {
      obj.image = Intent_Message_Image.toJSON(message.image);
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_ListSelect_Item>): Intent_Message_ListSelect_Item {
    return Intent_Message_ListSelect_Item.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_ListSelect_Item>): Intent_Message_ListSelect_Item {
    const message = createBaseIntent_Message_ListSelect_Item();
    message.info = (object.info !== undefined && object.info !== null)
      ? Intent_Message_SelectItemInfo.fromPartial(object.info)
      : undefined;
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.image = (object.image !== undefined && object.image !== null)
      ? Intent_Message_Image.fromPartial(object.image)
      : undefined;
    return message;
  },
};

function createBaseIntent_Message_CarouselSelect(): Intent_Message_CarouselSelect {
  return { items: [] };
}

export const Intent_Message_CarouselSelect: MessageFns<Intent_Message_CarouselSelect> = {
  encode(message: Intent_Message_CarouselSelect, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      Intent_Message_CarouselSelect_Item.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_CarouselSelect {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_CarouselSelect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.items.push(Intent_Message_CarouselSelect_Item.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_CarouselSelect {
    return {
      items: globalThis.Array.isArray(object?.items)
        ? object.items.map((e: any) => Intent_Message_CarouselSelect_Item.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Intent_Message_CarouselSelect): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => Intent_Message_CarouselSelect_Item.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_CarouselSelect>): Intent_Message_CarouselSelect {
    return Intent_Message_CarouselSelect.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_CarouselSelect>): Intent_Message_CarouselSelect {
    const message = createBaseIntent_Message_CarouselSelect();
    message.items = object.items?.map((e) => Intent_Message_CarouselSelect_Item.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIntent_Message_CarouselSelect_Item(): Intent_Message_CarouselSelect_Item {
  return { info: undefined, title: "", description: "", image: undefined };
}

export const Intent_Message_CarouselSelect_Item: MessageFns<Intent_Message_CarouselSelect_Item> = {
  encode(message: Intent_Message_CarouselSelect_Item, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.info !== undefined) {
      Intent_Message_SelectItemInfo.encode(message.info, writer.uint32(10).fork()).join();
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.image !== undefined) {
      Intent_Message_Image.encode(message.image, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_CarouselSelect_Item {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_CarouselSelect_Item();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.info = Intent_Message_SelectItemInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.image = Intent_Message_Image.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_CarouselSelect_Item {
    return {
      info: isSet(object.info) ? Intent_Message_SelectItemInfo.fromJSON(object.info) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      image: isSet(object.image) ? Intent_Message_Image.fromJSON(object.image) : undefined,
    };
  },

  toJSON(message: Intent_Message_CarouselSelect_Item): unknown {
    const obj: any = {};
    if (message.info !== undefined) {
      obj.info = Intent_Message_SelectItemInfo.toJSON(message.info);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.image !== undefined) {
      obj.image = Intent_Message_Image.toJSON(message.image);
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_CarouselSelect_Item>): Intent_Message_CarouselSelect_Item {
    return Intent_Message_CarouselSelect_Item.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_CarouselSelect_Item>): Intent_Message_CarouselSelect_Item {
    const message = createBaseIntent_Message_CarouselSelect_Item();
    message.info = (object.info !== undefined && object.info !== null)
      ? Intent_Message_SelectItemInfo.fromPartial(object.info)
      : undefined;
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.image = (object.image !== undefined && object.image !== null)
      ? Intent_Message_Image.fromPartial(object.image)
      : undefined;
    return message;
  },
};

function createBaseIntent_Message_SelectItemInfo(): Intent_Message_SelectItemInfo {
  return { key: "", synonyms: [] };
}

export const Intent_Message_SelectItemInfo: MessageFns<Intent_Message_SelectItemInfo> = {
  encode(message: Intent_Message_SelectItemInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    for (const v of message.synonyms) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_SelectItemInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_SelectItemInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.synonyms.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_SelectItemInfo {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      synonyms: globalThis.Array.isArray(object?.synonyms) ? object.synonyms.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Intent_Message_SelectItemInfo): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.synonyms?.length) {
      obj.synonyms = message.synonyms;
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_SelectItemInfo>): Intent_Message_SelectItemInfo {
    return Intent_Message_SelectItemInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_SelectItemInfo>): Intent_Message_SelectItemInfo {
    const message = createBaseIntent_Message_SelectItemInfo();
    message.key = object.key ?? "";
    message.synonyms = object.synonyms?.map((e) => e) || [];
    return message;
  },
};

function createBaseIntent_Message_MediaContent(): Intent_Message_MediaContent {
  return { mediaType: 0, mediaObjects: [] };
}

export const Intent_Message_MediaContent: MessageFns<Intent_Message_MediaContent> = {
  encode(message: Intent_Message_MediaContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mediaType !== 0) {
      writer.uint32(8).int32(message.mediaType);
    }
    for (const v of message.mediaObjects) {
      Intent_Message_MediaContent_ResponseMediaObject.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_MediaContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_MediaContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.mediaType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.mediaObjects.push(Intent_Message_MediaContent_ResponseMediaObject.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_MediaContent {
    return {
      mediaType: isSet(object.mediaType) ? intent_Message_MediaContent_ResponseMediaTypeFromJSON(object.mediaType) : 0,
      mediaObjects: globalThis.Array.isArray(object?.mediaObjects)
        ? object.mediaObjects.map((e: any) => Intent_Message_MediaContent_ResponseMediaObject.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Intent_Message_MediaContent): unknown {
    const obj: any = {};
    if (message.mediaType !== 0) {
      obj.mediaType = intent_Message_MediaContent_ResponseMediaTypeToJSON(message.mediaType);
    }
    if (message.mediaObjects?.length) {
      obj.mediaObjects = message.mediaObjects.map((e) => Intent_Message_MediaContent_ResponseMediaObject.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_MediaContent>): Intent_Message_MediaContent {
    return Intent_Message_MediaContent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_MediaContent>): Intent_Message_MediaContent {
    const message = createBaseIntent_Message_MediaContent();
    message.mediaType = object.mediaType ?? 0;
    message.mediaObjects =
      object.mediaObjects?.map((e) => Intent_Message_MediaContent_ResponseMediaObject.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIntent_Message_MediaContent_ResponseMediaObject(): Intent_Message_MediaContent_ResponseMediaObject {
  return { name: "", description: "", largeImage: undefined, icon: undefined, contentUrl: "" };
}

export const Intent_Message_MediaContent_ResponseMediaObject: MessageFns<
  Intent_Message_MediaContent_ResponseMediaObject
> = {
  encode(
    message: Intent_Message_MediaContent_ResponseMediaObject,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.largeImage !== undefined) {
      Intent_Message_Image.encode(message.largeImage, writer.uint32(26).fork()).join();
    }
    if (message.icon !== undefined) {
      Intent_Message_Image.encode(message.icon, writer.uint32(34).fork()).join();
    }
    if (message.contentUrl !== "") {
      writer.uint32(42).string(message.contentUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_MediaContent_ResponseMediaObject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_MediaContent_ResponseMediaObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.largeImage = Intent_Message_Image.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.icon = Intent_Message_Image.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.contentUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_MediaContent_ResponseMediaObject {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      largeImage: isSet(object.largeImage) ? Intent_Message_Image.fromJSON(object.largeImage) : undefined,
      icon: isSet(object.icon) ? Intent_Message_Image.fromJSON(object.icon) : undefined,
      contentUrl: isSet(object.contentUrl) ? globalThis.String(object.contentUrl) : "",
    };
  },

  toJSON(message: Intent_Message_MediaContent_ResponseMediaObject): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.largeImage !== undefined) {
      obj.largeImage = Intent_Message_Image.toJSON(message.largeImage);
    }
    if (message.icon !== undefined) {
      obj.icon = Intent_Message_Image.toJSON(message.icon);
    }
    if (message.contentUrl !== "") {
      obj.contentUrl = message.contentUrl;
    }
    return obj;
  },

  create(
    base?: DeepPartial<Intent_Message_MediaContent_ResponseMediaObject>,
  ): Intent_Message_MediaContent_ResponseMediaObject {
    return Intent_Message_MediaContent_ResponseMediaObject.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<Intent_Message_MediaContent_ResponseMediaObject>,
  ): Intent_Message_MediaContent_ResponseMediaObject {
    const message = createBaseIntent_Message_MediaContent_ResponseMediaObject();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.largeImage = (object.largeImage !== undefined && object.largeImage !== null)
      ? Intent_Message_Image.fromPartial(object.largeImage)
      : undefined;
    message.icon = (object.icon !== undefined && object.icon !== null)
      ? Intent_Message_Image.fromPartial(object.icon)
      : undefined;
    message.contentUrl = object.contentUrl ?? "";
    return message;
  },
};

function createBaseIntent_Message_BrowseCarouselCard(): Intent_Message_BrowseCarouselCard {
  return { items: [], imageDisplayOptions: 0 };
}

export const Intent_Message_BrowseCarouselCard: MessageFns<Intent_Message_BrowseCarouselCard> = {
  encode(message: Intent_Message_BrowseCarouselCard, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.imageDisplayOptions !== 0) {
      writer.uint32(16).int32(message.imageDisplayOptions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_BrowseCarouselCard {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_BrowseCarouselCard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.items.push(Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.imageDisplayOptions = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_BrowseCarouselCard {
    return {
      items: globalThis.Array.isArray(object?.items)
        ? object.items.map((e: any) => Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem.fromJSON(e))
        : [],
      imageDisplayOptions: isSet(object.imageDisplayOptions)
        ? intent_Message_BrowseCarouselCard_ImageDisplayOptionsFromJSON(object.imageDisplayOptions)
        : 0,
    };
  },

  toJSON(message: Intent_Message_BrowseCarouselCard): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem.toJSON(e));
    }
    if (message.imageDisplayOptions !== 0) {
      obj.imageDisplayOptions = intent_Message_BrowseCarouselCard_ImageDisplayOptionsToJSON(
        message.imageDisplayOptions,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_BrowseCarouselCard>): Intent_Message_BrowseCarouselCard {
    return Intent_Message_BrowseCarouselCard.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_BrowseCarouselCard>): Intent_Message_BrowseCarouselCard {
    const message = createBaseIntent_Message_BrowseCarouselCard();
    message.items = object.items?.map((e) => Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem.fromPartial(e)) ||
      [];
    message.imageDisplayOptions = object.imageDisplayOptions ?? 0;
    return message;
  },
};

function createBaseIntent_Message_BrowseCarouselCard_BrowseCarouselCardItem(): Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem {
  return { openUriAction: undefined, title: "", description: "", image: undefined, footer: "" };
}

export const Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem: MessageFns<
  Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem
> = {
  encode(
    message: Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.openUriAction !== undefined) {
      Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction.encode(
        message.openUriAction,
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.image !== undefined) {
      Intent_Message_Image.encode(message.image, writer.uint32(34).fork()).join();
    }
    if (message.footer !== "") {
      writer.uint32(42).string(message.footer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_BrowseCarouselCard_BrowseCarouselCardItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.openUriAction = Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.image = Intent_Message_Image.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.footer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem {
    return {
      openUriAction: isSet(object.openUriAction)
        ? Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction.fromJSON(object.openUriAction)
        : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      image: isSet(object.image) ? Intent_Message_Image.fromJSON(object.image) : undefined,
      footer: isSet(object.footer) ? globalThis.String(object.footer) : "",
    };
  },

  toJSON(message: Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem): unknown {
    const obj: any = {};
    if (message.openUriAction !== undefined) {
      obj.openUriAction = Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction.toJSON(
        message.openUriAction,
      );
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.image !== undefined) {
      obj.image = Intent_Message_Image.toJSON(message.image);
    }
    if (message.footer !== "") {
      obj.footer = message.footer;
    }
    return obj;
  },

  create(
    base?: DeepPartial<Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem>,
  ): Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem {
    return Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem>,
  ): Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem {
    const message = createBaseIntent_Message_BrowseCarouselCard_BrowseCarouselCardItem();
    message.openUriAction = (object.openUriAction !== undefined && object.openUriAction !== null)
      ? Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction.fromPartial(object.openUriAction)
      : undefined;
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.image = (object.image !== undefined && object.image !== null)
      ? Intent_Message_Image.fromPartial(object.image)
      : undefined;
    message.footer = object.footer ?? "";
    return message;
  },
};

function createBaseIntent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction(): Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction {
  return { url: "", urlTypeHint: 0 };
}

export const Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction: MessageFns<
  Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction
> = {
  encode(
    message: Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.urlTypeHint !== 0) {
      writer.uint32(24).int32(message.urlTypeHint);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.urlTypeHint = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      urlTypeHint: isSet(object.urlTypeHint)
        ? intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHintFromJSON(object.urlTypeHint)
        : 0,
    };
  },

  toJSON(message: Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.urlTypeHint !== 0) {
      obj.urlTypeHint = intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHintToJSON(
        message.urlTypeHint,
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction>,
  ): Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction {
    return Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction>,
  ): Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction {
    const message = createBaseIntent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction();
    message.url = object.url ?? "";
    message.urlTypeHint = object.urlTypeHint ?? 0;
    return message;
  },
};

function createBaseIntent_Message_TableCard(): Intent_Message_TableCard {
  return { title: "", subtitle: "", image: undefined, columnProperties: [], rows: [], buttons: [] };
}

export const Intent_Message_TableCard: MessageFns<Intent_Message_TableCard> = {
  encode(message: Intent_Message_TableCard, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.subtitle !== "") {
      writer.uint32(18).string(message.subtitle);
    }
    if (message.image !== undefined) {
      Intent_Message_Image.encode(message.image, writer.uint32(26).fork()).join();
    }
    for (const v of message.columnProperties) {
      Intent_Message_ColumnProperties.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.rows) {
      Intent_Message_TableCardRow.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.buttons) {
      Intent_Message_BasicCard_Button.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_TableCard {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_TableCard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.subtitle = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.image = Intent_Message_Image.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.columnProperties.push(Intent_Message_ColumnProperties.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.rows.push(Intent_Message_TableCardRow.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.buttons.push(Intent_Message_BasicCard_Button.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_TableCard {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      subtitle: isSet(object.subtitle) ? globalThis.String(object.subtitle) : "",
      image: isSet(object.image) ? Intent_Message_Image.fromJSON(object.image) : undefined,
      columnProperties: globalThis.Array.isArray(object?.columnProperties)
        ? object.columnProperties.map((e: any) => Intent_Message_ColumnProperties.fromJSON(e))
        : [],
      rows: globalThis.Array.isArray(object?.rows)
        ? object.rows.map((e: any) => Intent_Message_TableCardRow.fromJSON(e))
        : [],
      buttons: globalThis.Array.isArray(object?.buttons)
        ? object.buttons.map((e: any) => Intent_Message_BasicCard_Button.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Intent_Message_TableCard): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.subtitle !== "") {
      obj.subtitle = message.subtitle;
    }
    if (message.image !== undefined) {
      obj.image = Intent_Message_Image.toJSON(message.image);
    }
    if (message.columnProperties?.length) {
      obj.columnProperties = message.columnProperties.map((e) => Intent_Message_ColumnProperties.toJSON(e));
    }
    if (message.rows?.length) {
      obj.rows = message.rows.map((e) => Intent_Message_TableCardRow.toJSON(e));
    }
    if (message.buttons?.length) {
      obj.buttons = message.buttons.map((e) => Intent_Message_BasicCard_Button.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_TableCard>): Intent_Message_TableCard {
    return Intent_Message_TableCard.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_TableCard>): Intent_Message_TableCard {
    const message = createBaseIntent_Message_TableCard();
    message.title = object.title ?? "";
    message.subtitle = object.subtitle ?? "";
    message.image = (object.image !== undefined && object.image !== null)
      ? Intent_Message_Image.fromPartial(object.image)
      : undefined;
    message.columnProperties = object.columnProperties?.map((e) => Intent_Message_ColumnProperties.fromPartial(e)) ||
      [];
    message.rows = object.rows?.map((e) => Intent_Message_TableCardRow.fromPartial(e)) || [];
    message.buttons = object.buttons?.map((e) => Intent_Message_BasicCard_Button.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIntent_Message_ColumnProperties(): Intent_Message_ColumnProperties {
  return { header: "", horizontalAlignment: 0 };
}

export const Intent_Message_ColumnProperties: MessageFns<Intent_Message_ColumnProperties> = {
  encode(message: Intent_Message_ColumnProperties, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== "") {
      writer.uint32(10).string(message.header);
    }
    if (message.horizontalAlignment !== 0) {
      writer.uint32(16).int32(message.horizontalAlignment);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_ColumnProperties {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_ColumnProperties();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.horizontalAlignment = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_ColumnProperties {
    return {
      header: isSet(object.header) ? globalThis.String(object.header) : "",
      horizontalAlignment: isSet(object.horizontalAlignment)
        ? intent_Message_ColumnProperties_HorizontalAlignmentFromJSON(object.horizontalAlignment)
        : 0,
    };
  },

  toJSON(message: Intent_Message_ColumnProperties): unknown {
    const obj: any = {};
    if (message.header !== "") {
      obj.header = message.header;
    }
    if (message.horizontalAlignment !== 0) {
      obj.horizontalAlignment = intent_Message_ColumnProperties_HorizontalAlignmentToJSON(message.horizontalAlignment);
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_ColumnProperties>): Intent_Message_ColumnProperties {
    return Intent_Message_ColumnProperties.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_ColumnProperties>): Intent_Message_ColumnProperties {
    const message = createBaseIntent_Message_ColumnProperties();
    message.header = object.header ?? "";
    message.horizontalAlignment = object.horizontalAlignment ?? 0;
    return message;
  },
};

function createBaseIntent_Message_TableCardRow(): Intent_Message_TableCardRow {
  return { cells: [], dividerAfter: false };
}

export const Intent_Message_TableCardRow: MessageFns<Intent_Message_TableCardRow> = {
  encode(message: Intent_Message_TableCardRow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.cells) {
      Intent_Message_TableCardCell.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.dividerAfter !== false) {
      writer.uint32(16).bool(message.dividerAfter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_TableCardRow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_TableCardRow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cells.push(Intent_Message_TableCardCell.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.dividerAfter = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_TableCardRow {
    return {
      cells: globalThis.Array.isArray(object?.cells)
        ? object.cells.map((e: any) => Intent_Message_TableCardCell.fromJSON(e))
        : [],
      dividerAfter: isSet(object.dividerAfter) ? globalThis.Boolean(object.dividerAfter) : false,
    };
  },

  toJSON(message: Intent_Message_TableCardRow): unknown {
    const obj: any = {};
    if (message.cells?.length) {
      obj.cells = message.cells.map((e) => Intent_Message_TableCardCell.toJSON(e));
    }
    if (message.dividerAfter !== false) {
      obj.dividerAfter = message.dividerAfter;
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_TableCardRow>): Intent_Message_TableCardRow {
    return Intent_Message_TableCardRow.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_TableCardRow>): Intent_Message_TableCardRow {
    const message = createBaseIntent_Message_TableCardRow();
    message.cells = object.cells?.map((e) => Intent_Message_TableCardCell.fromPartial(e)) || [];
    message.dividerAfter = object.dividerAfter ?? false;
    return message;
  },
};

function createBaseIntent_Message_TableCardCell(): Intent_Message_TableCardCell {
  return { text: "" };
}

export const Intent_Message_TableCardCell: MessageFns<Intent_Message_TableCardCell> = {
  encode(message: Intent_Message_TableCardCell, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_Message_TableCardCell {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_Message_TableCardCell();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_Message_TableCardCell {
    return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
  },

  toJSON(message: Intent_Message_TableCardCell): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_Message_TableCardCell>): Intent_Message_TableCardCell {
    return Intent_Message_TableCardCell.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_Message_TableCardCell>): Intent_Message_TableCardCell {
    const message = createBaseIntent_Message_TableCardCell();
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseIntent_FollowupIntentInfo(): Intent_FollowupIntentInfo {
  return { followupIntentName: "", parentFollowupIntentName: "" };
}

export const Intent_FollowupIntentInfo: MessageFns<Intent_FollowupIntentInfo> = {
  encode(message: Intent_FollowupIntentInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.followupIntentName !== "") {
      writer.uint32(10).string(message.followupIntentName);
    }
    if (message.parentFollowupIntentName !== "") {
      writer.uint32(18).string(message.parentFollowupIntentName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_FollowupIntentInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_FollowupIntentInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.followupIntentName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parentFollowupIntentName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_FollowupIntentInfo {
    return {
      followupIntentName: isSet(object.followupIntentName) ? globalThis.String(object.followupIntentName) : "",
      parentFollowupIntentName: isSet(object.parentFollowupIntentName)
        ? globalThis.String(object.parentFollowupIntentName)
        : "",
    };
  },

  toJSON(message: Intent_FollowupIntentInfo): unknown {
    const obj: any = {};
    if (message.followupIntentName !== "") {
      obj.followupIntentName = message.followupIntentName;
    }
    if (message.parentFollowupIntentName !== "") {
      obj.parentFollowupIntentName = message.parentFollowupIntentName;
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_FollowupIntentInfo>): Intent_FollowupIntentInfo {
    return Intent_FollowupIntentInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_FollowupIntentInfo>): Intent_FollowupIntentInfo {
    const message = createBaseIntent_FollowupIntentInfo();
    message.followupIntentName = object.followupIntentName ?? "";
    message.parentFollowupIntentName = object.parentFollowupIntentName ?? "";
    return message;
  },
};

function createBaseListIntentsRequest(): ListIntentsRequest {
  return { parent: "", languageCode: "", intentView: 0, pageSize: 0, pageToken: "" };
}

export const ListIntentsRequest: MessageFns<ListIntentsRequest> = {
  encode(message: ListIntentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    if (message.intentView !== 0) {
      writer.uint32(24).int32(message.intentView);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(42).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListIntentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIntentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.intentView = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIntentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      intentView: isSet(object.intentView) ? intentViewFromJSON(object.intentView) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListIntentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.intentView !== 0) {
      obj.intentView = intentViewToJSON(message.intentView);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListIntentsRequest>): ListIntentsRequest {
    return ListIntentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListIntentsRequest>): ListIntentsRequest {
    const message = createBaseListIntentsRequest();
    message.parent = object.parent ?? "";
    message.languageCode = object.languageCode ?? "";
    message.intentView = object.intentView ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListIntentsResponse(): ListIntentsResponse {
  return { intents: [], nextPageToken: "" };
}

export const ListIntentsResponse: MessageFns<ListIntentsResponse> = {
  encode(message: ListIntentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.intents) {
      Intent.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListIntentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIntentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.intents.push(Intent.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIntentsResponse {
    return {
      intents: globalThis.Array.isArray(object?.intents) ? object.intents.map((e: any) => Intent.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListIntentsResponse): unknown {
    const obj: any = {};
    if (message.intents?.length) {
      obj.intents = message.intents.map((e) => Intent.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListIntentsResponse>): ListIntentsResponse {
    return ListIntentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListIntentsResponse>): ListIntentsResponse {
    const message = createBaseListIntentsResponse();
    message.intents = object.intents?.map((e) => Intent.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetIntentRequest(): GetIntentRequest {
  return { name: "", languageCode: "", intentView: 0 };
}

export const GetIntentRequest: MessageFns<GetIntentRequest> = {
  encode(message: GetIntentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    if (message.intentView !== 0) {
      writer.uint32(24).int32(message.intentView);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIntentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIntentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.intentView = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIntentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      intentView: isSet(object.intentView) ? intentViewFromJSON(object.intentView) : 0,
    };
  },

  toJSON(message: GetIntentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.intentView !== 0) {
      obj.intentView = intentViewToJSON(message.intentView);
    }
    return obj;
  },

  create(base?: DeepPartial<GetIntentRequest>): GetIntentRequest {
    return GetIntentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIntentRequest>): GetIntentRequest {
    const message = createBaseGetIntentRequest();
    message.name = object.name ?? "";
    message.languageCode = object.languageCode ?? "";
    message.intentView = object.intentView ?? 0;
    return message;
  },
};

function createBaseCreateIntentRequest(): CreateIntentRequest {
  return { parent: "", intent: undefined, languageCode: "", intentView: 0 };
}

export const CreateIntentRequest: MessageFns<CreateIntentRequest> = {
  encode(message: CreateIntentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.intent !== undefined) {
      Intent.encode(message.intent, writer.uint32(18).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    if (message.intentView !== 0) {
      writer.uint32(32).int32(message.intentView);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateIntentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateIntentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.intent = Intent.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.intentView = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateIntentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      intent: isSet(object.intent) ? Intent.fromJSON(object.intent) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      intentView: isSet(object.intentView) ? intentViewFromJSON(object.intentView) : 0,
    };
  },

  toJSON(message: CreateIntentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.intent !== undefined) {
      obj.intent = Intent.toJSON(message.intent);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.intentView !== 0) {
      obj.intentView = intentViewToJSON(message.intentView);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateIntentRequest>): CreateIntentRequest {
    return CreateIntentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateIntentRequest>): CreateIntentRequest {
    const message = createBaseCreateIntentRequest();
    message.parent = object.parent ?? "";
    message.intent = (object.intent !== undefined && object.intent !== null)
      ? Intent.fromPartial(object.intent)
      : undefined;
    message.languageCode = object.languageCode ?? "";
    message.intentView = object.intentView ?? 0;
    return message;
  },
};

function createBaseUpdateIntentRequest(): UpdateIntentRequest {
  return { intent: undefined, languageCode: "", updateMask: undefined, intentView: 0 };
}

export const UpdateIntentRequest: MessageFns<UpdateIntentRequest> = {
  encode(message: UpdateIntentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.intent !== undefined) {
      Intent.encode(message.intent, writer.uint32(10).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    if (message.intentView !== 0) {
      writer.uint32(32).int32(message.intentView);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIntentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIntentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.intent = Intent.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.intentView = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIntentRequest {
    return {
      intent: isSet(object.intent) ? Intent.fromJSON(object.intent) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      intentView: isSet(object.intentView) ? intentViewFromJSON(object.intentView) : 0,
    };
  },

  toJSON(message: UpdateIntentRequest): unknown {
    const obj: any = {};
    if (message.intent !== undefined) {
      obj.intent = Intent.toJSON(message.intent);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.intentView !== 0) {
      obj.intentView = intentViewToJSON(message.intentView);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateIntentRequest>): UpdateIntentRequest {
    return UpdateIntentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateIntentRequest>): UpdateIntentRequest {
    const message = createBaseUpdateIntentRequest();
    message.intent = (object.intent !== undefined && object.intent !== null)
      ? Intent.fromPartial(object.intent)
      : undefined;
    message.languageCode = object.languageCode ?? "";
    message.updateMask = object.updateMask ?? undefined;
    message.intentView = object.intentView ?? 0;
    return message;
  },
};

function createBaseDeleteIntentRequest(): DeleteIntentRequest {
  return { name: "" };
}

export const DeleteIntentRequest: MessageFns<DeleteIntentRequest> = {
  encode(message: DeleteIntentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteIntentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteIntentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteIntentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteIntentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteIntentRequest>): DeleteIntentRequest {
    return DeleteIntentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteIntentRequest>): DeleteIntentRequest {
    const message = createBaseDeleteIntentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseBatchUpdateIntentsRequest(): BatchUpdateIntentsRequest {
  return {
    parent: "",
    intentBatchUri: undefined,
    intentBatchInline: undefined,
    languageCode: "",
    updateMask: undefined,
    intentView: 0,
  };
}

export const BatchUpdateIntentsRequest: MessageFns<BatchUpdateIntentsRequest> = {
  encode(message: BatchUpdateIntentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.intentBatchUri !== undefined) {
      writer.uint32(18).string(message.intentBatchUri);
    }
    if (message.intentBatchInline !== undefined) {
      IntentBatch.encode(message.intentBatchInline, writer.uint32(26).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(34).string(message.languageCode);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(42).fork()).join();
    }
    if (message.intentView !== 0) {
      writer.uint32(48).int32(message.intentView);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchUpdateIntentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchUpdateIntentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.intentBatchUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.intentBatchInline = IntentBatch.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.intentView = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchUpdateIntentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      intentBatchUri: isSet(object.intentBatchUri) ? globalThis.String(object.intentBatchUri) : undefined,
      intentBatchInline: isSet(object.intentBatchInline) ? IntentBatch.fromJSON(object.intentBatchInline) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      intentView: isSet(object.intentView) ? intentViewFromJSON(object.intentView) : 0,
    };
  },

  toJSON(message: BatchUpdateIntentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.intentBatchUri !== undefined) {
      obj.intentBatchUri = message.intentBatchUri;
    }
    if (message.intentBatchInline !== undefined) {
      obj.intentBatchInline = IntentBatch.toJSON(message.intentBatchInline);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.intentView !== 0) {
      obj.intentView = intentViewToJSON(message.intentView);
    }
    return obj;
  },

  create(base?: DeepPartial<BatchUpdateIntentsRequest>): BatchUpdateIntentsRequest {
    return BatchUpdateIntentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchUpdateIntentsRequest>): BatchUpdateIntentsRequest {
    const message = createBaseBatchUpdateIntentsRequest();
    message.parent = object.parent ?? "";
    message.intentBatchUri = object.intentBatchUri ?? undefined;
    message.intentBatchInline = (object.intentBatchInline !== undefined && object.intentBatchInline !== null)
      ? IntentBatch.fromPartial(object.intentBatchInline)
      : undefined;
    message.languageCode = object.languageCode ?? "";
    message.updateMask = object.updateMask ?? undefined;
    message.intentView = object.intentView ?? 0;
    return message;
  },
};

function createBaseBatchUpdateIntentsResponse(): BatchUpdateIntentsResponse {
  return { intents: [] };
}

export const BatchUpdateIntentsResponse: MessageFns<BatchUpdateIntentsResponse> = {
  encode(message: BatchUpdateIntentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.intents) {
      Intent.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchUpdateIntentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchUpdateIntentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.intents.push(Intent.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchUpdateIntentsResponse {
    return {
      intents: globalThis.Array.isArray(object?.intents) ? object.intents.map((e: any) => Intent.fromJSON(e)) : [],
    };
  },

  toJSON(message: BatchUpdateIntentsResponse): unknown {
    const obj: any = {};
    if (message.intents?.length) {
      obj.intents = message.intents.map((e) => Intent.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchUpdateIntentsResponse>): BatchUpdateIntentsResponse {
    return BatchUpdateIntentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchUpdateIntentsResponse>): BatchUpdateIntentsResponse {
    const message = createBaseBatchUpdateIntentsResponse();
    message.intents = object.intents?.map((e) => Intent.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBatchDeleteIntentsRequest(): BatchDeleteIntentsRequest {
  return { parent: "", intents: [] };
}

export const BatchDeleteIntentsRequest: MessageFns<BatchDeleteIntentsRequest> = {
  encode(message: BatchDeleteIntentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.intents) {
      Intent.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchDeleteIntentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchDeleteIntentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.intents.push(Intent.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchDeleteIntentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      intents: globalThis.Array.isArray(object?.intents) ? object.intents.map((e: any) => Intent.fromJSON(e)) : [],
    };
  },

  toJSON(message: BatchDeleteIntentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.intents?.length) {
      obj.intents = message.intents.map((e) => Intent.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchDeleteIntentsRequest>): BatchDeleteIntentsRequest {
    return BatchDeleteIntentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchDeleteIntentsRequest>): BatchDeleteIntentsRequest {
    const message = createBaseBatchDeleteIntentsRequest();
    message.parent = object.parent ?? "";
    message.intents = object.intents?.map((e) => Intent.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIntentBatch(): IntentBatch {
  return { intents: [] };
}

export const IntentBatch: MessageFns<IntentBatch> = {
  encode(message: IntentBatch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.intents) {
      Intent.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IntentBatch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntentBatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.intents.push(Intent.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IntentBatch {
    return {
      intents: globalThis.Array.isArray(object?.intents) ? object.intents.map((e: any) => Intent.fromJSON(e)) : [],
    };
  },

  toJSON(message: IntentBatch): unknown {
    const obj: any = {};
    if (message.intents?.length) {
      obj.intents = message.intents.map((e) => Intent.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<IntentBatch>): IntentBatch {
    return IntentBatch.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IntentBatch>): IntentBatch {
    const message = createBaseIntentBatch();
    message.intents = object.intents?.map((e) => Intent.fromPartial(e)) || [];
    return message;
  },
};

/** Service for managing [Intents][google.cloud.dialogflow.v2.Intent]. */
export type IntentsDefinition = typeof IntentsDefinition;
export const IntentsDefinition = {
  name: "Intents",
  fullName: "google.cloud.dialogflow.v2.Intents",
  methods: {
    /** Returns the list of all intents in the specified agent. */
    listIntents: {
      name: "ListIntents",
      requestType: ListIntentsRequest,
      requestStream: false,
      responseType: ListIntentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([6, 112, 97, 114, 101, 110, 116]),
            Buffer.from([
              20,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              95,
              99,
              111,
              100,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              216,
              1,
              90,
              51,
              18,
              49,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              90,
              54,
              18,
              52,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              90,
              66,
              18,
              64,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              18,
              37,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves the specified intent. */
    getIntent: {
      name: "GetIntent",
      requestType: GetIntentRequest,
      requestStream: false,
      responseType: Intent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([4, 110, 97, 109, 101]),
            Buffer.from([18, 110, 97, 109, 101, 44, 108, 97, 110, 103, 117, 97, 103, 101, 95, 99, 111, 100, 101]),
          ],
          578365826: [
            Buffer.from([
              92,
              90,
              51,
              18,
              49,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              18,
              37,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates an intent in the specified agent.
     *
     * Note: You should always train an agent prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/es/docs/training).
     */
    createIntent: {
      name: "CreateIntent",
      requestType: CreateIntentRequest,
      requestStream: false,
      responseType: Intent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 105, 110, 116, 101, 110, 116]),
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              105,
              110,
              116,
              101,
              110,
              116,
              44,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              95,
              99,
              111,
              100,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              108,
              58,
              6,
              105,
              110,
              116,
              101,
              110,
              116,
              90,
              59,
              58,
              6,
              105,
              110,
              116,
              101,
              110,
              116,
              34,
              49,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              34,
              37,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified intent.
     *
     * Note: You should always train an agent prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/es/docs/training).
     */
    updateIntent: {
      name: "UpdateIntent",
      requestType: UpdateIntentRequest,
      requestStream: false,
      responseType: Intent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              105,
              110,
              116,
              101,
              110,
              116,
              44,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              95,
              99,
              111,
              100,
              101,
            ]),
            Buffer.from([
              32,
              105,
              110,
              116,
              101,
              110,
              116,
              44,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              95,
              99,
              111,
              100,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              122,
              58,
              6,
              105,
              110,
              116,
              101,
              110,
              116,
              90,
              66,
              58,
              6,
              105,
              110,
              116,
              101,
              110,
              116,
              50,
              56,
              47,
              118,
              50,
              47,
              123,
              105,
              110,
              116,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              50,
              44,
              47,
              118,
              50,
              47,
              123,
              105,
              110,
              116,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes the specified intent and its direct or indirect followup intents.
     *
     * Note: You should always train an agent prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/es/docs/training).
     */
    deleteIntent: {
      name: "DeleteIntent",
      requestType: DeleteIntentRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              92,
              90,
              51,
              42,
              49,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              42,
              37,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates/Creates multiple intents in the specified agent.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`:
     * [BatchUpdateIntentsResponse][google.cloud.dialogflow.v2.BatchUpdateIntentsResponse]
     *
     * Note: You should always train an agent prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/es/docs/training).
     */
    batchUpdateIntents: {
      name: "BatchUpdateIntents",
      requestType: BatchUpdateIntentsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              79,
              10,
              53,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              97,
              108,
              111,
              103,
              102,
              108,
              111,
              119,
              46,
              118,
              50,
              46,
              66,
              97,
              116,
              99,
              104,
              85,
              112,
              100,
              97,
              116,
              101,
              73,
              110,
              116,
              101,
              110,
              116,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              105,
              110,
              116,
              101,
              110,
              116,
              95,
              98,
              97,
              116,
              99,
              104,
              95,
              117,
              114,
              105,
            ]),
            Buffer.from([
              26,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              105,
              110,
              116,
              101,
              110,
              116,
              95,
              98,
              97,
              116,
              99,
              104,
              95,
              105,
              110,
              108,
              105,
              110,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              122,
              58,
              1,
              42,
              90,
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              85,
              112,
              100,
              97,
              116,
              101,
              34,
              49,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              85,
              112,
              100,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes intents in the specified agent.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`: An [Empty
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
     *
     * Note: You should always train an agent prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/es/docs/training).
     */
    batchDeleteIntents: {
      name: "BatchDeleteIntents",
      requestType: BatchDeleteIntentsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              47,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 105, 110, 116, 101, 110, 116, 115])],
          578365826: [
            Buffer.from([
              122,
              58,
              1,
              42,
              90,
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              68,
              101,
              108,
              101,
              116,
              101,
              34,
              49,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              68,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface IntentsServiceImplementation<CallContextExt = {}> {
  /** Returns the list of all intents in the specified agent. */
  listIntents(
    request: ListIntentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListIntentsResponse>>;
  /** Retrieves the specified intent. */
  getIntent(request: GetIntentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Intent>>;
  /**
   * Creates an intent in the specified agent.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  createIntent(request: CreateIntentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Intent>>;
  /**
   * Updates the specified intent.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  updateIntent(request: UpdateIntentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Intent>>;
  /**
   * Deletes the specified intent and its direct or indirect followup intents.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  deleteIntent(request: DeleteIntentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Updates/Creates multiple intents in the specified agent.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`:
   * [BatchUpdateIntentsResponse][google.cloud.dialogflow.v2.BatchUpdateIntentsResponse]
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  batchUpdateIntents(
    request: BatchUpdateIntentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes intents in the specified agent.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  batchDeleteIntents(
    request: BatchDeleteIntentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface IntentsClient<CallOptionsExt = {}> {
  /** Returns the list of all intents in the specified agent. */
  listIntents(
    request: DeepPartial<ListIntentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListIntentsResponse>;
  /** Retrieves the specified intent. */
  getIntent(request: DeepPartial<GetIntentRequest>, options?: CallOptions & CallOptionsExt): Promise<Intent>;
  /**
   * Creates an intent in the specified agent.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  createIntent(request: DeepPartial<CreateIntentRequest>, options?: CallOptions & CallOptionsExt): Promise<Intent>;
  /**
   * Updates the specified intent.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  updateIntent(request: DeepPartial<UpdateIntentRequest>, options?: CallOptions & CallOptionsExt): Promise<Intent>;
  /**
   * Deletes the specified intent and its direct or indirect followup intents.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  deleteIntent(request: DeepPartial<DeleteIntentRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Updates/Creates multiple intents in the specified agent.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`:
   * [BatchUpdateIntentsResponse][google.cloud.dialogflow.v2.BatchUpdateIntentsResponse]
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  batchUpdateIntents(
    request: DeepPartial<BatchUpdateIntentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes intents in the specified agent.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  batchDeleteIntents(
    request: DeepPartial<BatchDeleteIntentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
