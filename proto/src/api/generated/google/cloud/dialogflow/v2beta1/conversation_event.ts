// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/v2beta1/conversation_event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Status } from "../../../rpc/status.js";
import { Message } from "./participant.js";

export const protobufPackage = "google.cloud.dialogflow.v2beta1";

/**
 * Represents a notification sent to Pub/Sub subscribers for conversation
 * lifecycle events.
 */
export interface ConversationEvent {
  /**
   * Required. The unique identifier of the conversation this notification
   * refers to.
   * Format: `projects/<Project ID>/conversations/<Conversation ID>`.
   */
  conversation: string;
  /** Required. The type of the event that this notification refers to. */
  type: ConversationEvent_Type;
  /**
   * Optional. More detailed information about an error. Only set for type
   * UNRECOVERABLE_ERROR_IN_PHONE_CALL.
   */
  errorStatus:
    | Status
    | undefined;
  /** Payload of NEW_MESSAGE event. */
  newMessagePayload?: Message | undefined;
}

/** Enumeration of the types of events available. */
export enum ConversationEvent_Type {
  /** TYPE_UNSPECIFIED - Type not set. */
  TYPE_UNSPECIFIED = 0,
  /**
   * CONVERSATION_STARTED - A new conversation has been opened. This is fired when a telephone call
   * is answered, or a conversation is created via the API.
   */
  CONVERSATION_STARTED = 1,
  /**
   * CONVERSATION_FINISHED - An existing conversation has closed. This is fired when a telephone call
   * is terminated, or a conversation is closed via the API.
   */
  CONVERSATION_FINISHED = 2,
  /**
   * HUMAN_INTERVENTION_NEEDED - An existing conversation has received notification from Dialogflow that
   * human intervention is required.
   */
  HUMAN_INTERVENTION_NEEDED = 3,
  /**
   * NEW_MESSAGE - An existing conversation has received a new message, either from API or
   * telephony. It is configured in
   * [ConversationProfile.new_message_event_notification_config][google.cloud.dialogflow.v2beta1.ConversationProfile.new_message_event_notification_config]
   */
  NEW_MESSAGE = 5,
  /**
   * UNRECOVERABLE_ERROR - Unrecoverable error during a telephone call.
   *
   * In general non-recoverable errors only occur if something was
   * misconfigured in the ConversationProfile corresponding to the call. After
   * a non-recoverable error, Dialogflow may stop responding.
   *
   * We don't fire this event:
   *
   * * in an API call because we can directly return the error, or,
   * * when we can recover from an error.
   */
  UNRECOVERABLE_ERROR = 4,
  UNRECOGNIZED = -1,
}

export function conversationEvent_TypeFromJSON(object: any): ConversationEvent_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return ConversationEvent_Type.TYPE_UNSPECIFIED;
    case 1:
    case "CONVERSATION_STARTED":
      return ConversationEvent_Type.CONVERSATION_STARTED;
    case 2:
    case "CONVERSATION_FINISHED":
      return ConversationEvent_Type.CONVERSATION_FINISHED;
    case 3:
    case "HUMAN_INTERVENTION_NEEDED":
      return ConversationEvent_Type.HUMAN_INTERVENTION_NEEDED;
    case 5:
    case "NEW_MESSAGE":
      return ConversationEvent_Type.NEW_MESSAGE;
    case 4:
    case "UNRECOVERABLE_ERROR":
      return ConversationEvent_Type.UNRECOVERABLE_ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConversationEvent_Type.UNRECOGNIZED;
  }
}

export function conversationEvent_TypeToJSON(object: ConversationEvent_Type): string {
  switch (object) {
    case ConversationEvent_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case ConversationEvent_Type.CONVERSATION_STARTED:
      return "CONVERSATION_STARTED";
    case ConversationEvent_Type.CONVERSATION_FINISHED:
      return "CONVERSATION_FINISHED";
    case ConversationEvent_Type.HUMAN_INTERVENTION_NEEDED:
      return "HUMAN_INTERVENTION_NEEDED";
    case ConversationEvent_Type.NEW_MESSAGE:
      return "NEW_MESSAGE";
    case ConversationEvent_Type.UNRECOVERABLE_ERROR:
      return "UNRECOVERABLE_ERROR";
    case ConversationEvent_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseConversationEvent(): ConversationEvent {
  return { conversation: "", type: 0, errorStatus: undefined, newMessagePayload: undefined };
}

export const ConversationEvent: MessageFns<ConversationEvent> = {
  encode(message: ConversationEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversation !== "") {
      writer.uint32(10).string(message.conversation);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.errorStatus !== undefined) {
      Status.encode(message.errorStatus, writer.uint32(26).fork()).join();
    }
    if (message.newMessagePayload !== undefined) {
      Message.encode(message.newMessagePayload, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConversationEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversationEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversation = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.errorStatus = Status.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.newMessagePayload = Message.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConversationEvent {
    return {
      conversation: isSet(object.conversation) ? globalThis.String(object.conversation) : "",
      type: isSet(object.type) ? conversationEvent_TypeFromJSON(object.type) : 0,
      errorStatus: isSet(object.errorStatus) ? Status.fromJSON(object.errorStatus) : undefined,
      newMessagePayload: isSet(object.newMessagePayload) ? Message.fromJSON(object.newMessagePayload) : undefined,
    };
  },

  toJSON(message: ConversationEvent): unknown {
    const obj: any = {};
    if (message.conversation !== "") {
      obj.conversation = message.conversation;
    }
    if (message.type !== 0) {
      obj.type = conversationEvent_TypeToJSON(message.type);
    }
    if (message.errorStatus !== undefined) {
      obj.errorStatus = Status.toJSON(message.errorStatus);
    }
    if (message.newMessagePayload !== undefined) {
      obj.newMessagePayload = Message.toJSON(message.newMessagePayload);
    }
    return obj;
  },

  create(base?: DeepPartial<ConversationEvent>): ConversationEvent {
    return ConversationEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConversationEvent>): ConversationEvent {
    const message = createBaseConversationEvent();
    message.conversation = object.conversation ?? "";
    message.type = object.type ?? 0;
    message.errorStatus = (object.errorStatus !== undefined && object.errorStatus !== null)
      ? Status.fromPartial(object.errorStatus)
      : undefined;
    message.newMessagePayload = (object.newMessagePayload !== undefined && object.newMessagePayload !== null)
      ? Message.fromPartial(object.newMessagePayload)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
