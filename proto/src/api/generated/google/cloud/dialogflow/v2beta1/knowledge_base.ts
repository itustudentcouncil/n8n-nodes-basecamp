// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/v2beta1/knowledge_base.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";

export const protobufPackage = "google.cloud.dialogflow.v2beta1";

/**
 * A knowledge base represents a collection of knowledge documents that you
 * provide to Dialogflow. Your knowledge documents contain information that may
 * be useful during conversations with end-users. Some Dialogflow features use
 * knowledge bases when looking for a response to an end-user input.
 *
 * For more information, see the [knowledge base
 * guide](https://cloud.google.com/dialogflow/docs/how/knowledge-bases).
 *
 * Note: The `projects.agent.knowledgeBases` resource is deprecated;
 * only use `projects.knowledgeBases`.
 */
export interface KnowledgeBase {
  /**
   * The knowledge base resource name.
   * The name must be empty when creating a knowledge base.
   * Format: `projects/<Project ID>/locations/<Location
   * ID>/knowledgeBases/<Knowledge Base ID>`.
   */
  name: string;
  /**
   * Required. The display name of the knowledge base. The name must be 1024
   * bytes or less; otherwise, the creation request fails.
   */
  displayName: string;
  /**
   * Language which represents the KnowledgeBase. When the KnowledgeBase is
   * created/updated, this is populated for all non en-us languages. If not
   * populated, the default language en-us applies.
   */
  languageCode: string;
}

/**
 * Request message for
 * [KnowledgeBases.ListKnowledgeBases][google.cloud.dialogflow.v2beta1.KnowledgeBases.ListKnowledgeBases].
 */
export interface ListKnowledgeBasesRequest {
  /**
   * Required. The project to list of knowledge bases for.
   * Format: `projects/<Project ID>/locations/<Location ID>`.
   */
  parent: string;
  /**
   * The maximum number of items to return in a single page. By
   * default 10 and at most 100.
   */
  pageSize: number;
  /** The next_page_token value returned from a previous list request. */
  pageToken: string;
  /**
   * The filter expression used to filter knowledge bases returned by the list
   * method. The expression has the following syntax:
   *
   *   <field> <operator> <value> [AND <field> <operator> <value>] ...
   *
   * The following fields and operators are supported:
   *
   * * display_name with has(:) operator
   * * language_code with equals(=) operator
   *
   * Examples:
   *
   * * 'language_code=en-us' matches knowledge bases with en-us language code.
   * * 'display_name:articles' matches knowledge bases whose display name
   *   contains "articles".
   * * 'display_name:"Best Articles"' matches knowledge bases whose display
   *   name contains "Best Articles".
   * * 'language_code=en-gb AND display_name=articles' matches all knowledge
   *   bases whose display name contains "articles" and whose language code is
   *   "en-gb".
   *
   * Note: An empty filter string (i.e. "") is a no-op and will result in no
   * filtering.
   *
   * For more information about filtering, see
   * [API Filtering](https://aip.dev/160).
   */
  filter: string;
}

/**
 * Response message for
 * [KnowledgeBases.ListKnowledgeBases][google.cloud.dialogflow.v2beta1.KnowledgeBases.ListKnowledgeBases].
 */
export interface ListKnowledgeBasesResponse {
  /** The list of knowledge bases. */
  knowledgeBases: KnowledgeBase[];
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [KnowledgeBases.GetKnowledgeBase][google.cloud.dialogflow.v2beta1.KnowledgeBases.GetKnowledgeBase].
 */
export interface GetKnowledgeBaseRequest {
  /**
   * Required. The name of the knowledge base to retrieve.
   * Format `projects/<Project ID>/locations/<Location
   * ID>/knowledgeBases/<Knowledge Base ID>`.
   */
  name: string;
}

/**
 * Request message for
 * [KnowledgeBases.CreateKnowledgeBase][google.cloud.dialogflow.v2beta1.KnowledgeBases.CreateKnowledgeBase].
 */
export interface CreateKnowledgeBaseRequest {
  /**
   * Required. The project to create a knowledge base for.
   * Format: `projects/<Project ID>/locations/<Location ID>`.
   */
  parent: string;
  /** Required. The knowledge base to create. */
  knowledgeBase: KnowledgeBase | undefined;
}

/**
 * Request message for
 * [KnowledgeBases.DeleteKnowledgeBase][google.cloud.dialogflow.v2beta1.KnowledgeBases.DeleteKnowledgeBase].
 */
export interface DeleteKnowledgeBaseRequest {
  /**
   * Required. The name of the knowledge base to delete.
   * Format: `projects/<Project ID>/locations/<Location
   * ID>/knowledgeBases/<Knowledge Base ID>`.
   */
  name: string;
  /**
   * Optional. Force deletes the knowledge base. When set to true, any documents
   * in the knowledge base are also deleted.
   */
  force: boolean;
}

/**
 * Request message for
 * [KnowledgeBases.UpdateKnowledgeBase][google.cloud.dialogflow.v2beta1.KnowledgeBases.UpdateKnowledgeBase].
 */
export interface UpdateKnowledgeBaseRequest {
  /** Required. The knowledge base to update. */
  knowledgeBase:
    | KnowledgeBase
    | undefined;
  /**
   * Optional. Not specified means `update all`.
   * Currently, only `display_name` can be updated, an InvalidArgument will be
   * returned for attempting to update other fields.
   */
  updateMask: string[] | undefined;
}

function createBaseKnowledgeBase(): KnowledgeBase {
  return { name: "", displayName: "", languageCode: "" };
}

export const KnowledgeBase: MessageFns<KnowledgeBase> = {
  encode(message: KnowledgeBase, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.languageCode !== "") {
      writer.uint32(34).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KnowledgeBase {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKnowledgeBase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KnowledgeBase {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: KnowledgeBase): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<KnowledgeBase>): KnowledgeBase {
    return KnowledgeBase.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KnowledgeBase>): KnowledgeBase {
    const message = createBaseKnowledgeBase();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseListKnowledgeBasesRequest(): ListKnowledgeBasesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListKnowledgeBasesRequest: MessageFns<ListKnowledgeBasesRequest> = {
  encode(message: ListKnowledgeBasesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListKnowledgeBasesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListKnowledgeBasesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListKnowledgeBasesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListKnowledgeBasesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListKnowledgeBasesRequest>): ListKnowledgeBasesRequest {
    return ListKnowledgeBasesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListKnowledgeBasesRequest>): ListKnowledgeBasesRequest {
    const message = createBaseListKnowledgeBasesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListKnowledgeBasesResponse(): ListKnowledgeBasesResponse {
  return { knowledgeBases: [], nextPageToken: "" };
}

export const ListKnowledgeBasesResponse: MessageFns<ListKnowledgeBasesResponse> = {
  encode(message: ListKnowledgeBasesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.knowledgeBases) {
      KnowledgeBase.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListKnowledgeBasesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListKnowledgeBasesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.knowledgeBases.push(KnowledgeBase.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListKnowledgeBasesResponse {
    return {
      knowledgeBases: globalThis.Array.isArray(object?.knowledgeBases)
        ? object.knowledgeBases.map((e: any) => KnowledgeBase.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListKnowledgeBasesResponse): unknown {
    const obj: any = {};
    if (message.knowledgeBases?.length) {
      obj.knowledgeBases = message.knowledgeBases.map((e) => KnowledgeBase.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListKnowledgeBasesResponse>): ListKnowledgeBasesResponse {
    return ListKnowledgeBasesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListKnowledgeBasesResponse>): ListKnowledgeBasesResponse {
    const message = createBaseListKnowledgeBasesResponse();
    message.knowledgeBases = object.knowledgeBases?.map((e) => KnowledgeBase.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetKnowledgeBaseRequest(): GetKnowledgeBaseRequest {
  return { name: "" };
}

export const GetKnowledgeBaseRequest: MessageFns<GetKnowledgeBaseRequest> = {
  encode(message: GetKnowledgeBaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetKnowledgeBaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetKnowledgeBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetKnowledgeBaseRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetKnowledgeBaseRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetKnowledgeBaseRequest>): GetKnowledgeBaseRequest {
    return GetKnowledgeBaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetKnowledgeBaseRequest>): GetKnowledgeBaseRequest {
    const message = createBaseGetKnowledgeBaseRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateKnowledgeBaseRequest(): CreateKnowledgeBaseRequest {
  return { parent: "", knowledgeBase: undefined };
}

export const CreateKnowledgeBaseRequest: MessageFns<CreateKnowledgeBaseRequest> = {
  encode(message: CreateKnowledgeBaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.knowledgeBase !== undefined) {
      KnowledgeBase.encode(message.knowledgeBase, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateKnowledgeBaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateKnowledgeBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.knowledgeBase = KnowledgeBase.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateKnowledgeBaseRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      knowledgeBase: isSet(object.knowledgeBase) ? KnowledgeBase.fromJSON(object.knowledgeBase) : undefined,
    };
  },

  toJSON(message: CreateKnowledgeBaseRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.knowledgeBase !== undefined) {
      obj.knowledgeBase = KnowledgeBase.toJSON(message.knowledgeBase);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateKnowledgeBaseRequest>): CreateKnowledgeBaseRequest {
    return CreateKnowledgeBaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateKnowledgeBaseRequest>): CreateKnowledgeBaseRequest {
    const message = createBaseCreateKnowledgeBaseRequest();
    message.parent = object.parent ?? "";
    message.knowledgeBase = (object.knowledgeBase !== undefined && object.knowledgeBase !== null)
      ? KnowledgeBase.fromPartial(object.knowledgeBase)
      : undefined;
    return message;
  },
};

function createBaseDeleteKnowledgeBaseRequest(): DeleteKnowledgeBaseRequest {
  return { name: "", force: false };
}

export const DeleteKnowledgeBaseRequest: MessageFns<DeleteKnowledgeBaseRequest> = {
  encode(message: DeleteKnowledgeBaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteKnowledgeBaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteKnowledgeBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteKnowledgeBaseRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteKnowledgeBaseRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteKnowledgeBaseRequest>): DeleteKnowledgeBaseRequest {
    return DeleteKnowledgeBaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteKnowledgeBaseRequest>): DeleteKnowledgeBaseRequest {
    const message = createBaseDeleteKnowledgeBaseRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseUpdateKnowledgeBaseRequest(): UpdateKnowledgeBaseRequest {
  return { knowledgeBase: undefined, updateMask: undefined };
}

export const UpdateKnowledgeBaseRequest: MessageFns<UpdateKnowledgeBaseRequest> = {
  encode(message: UpdateKnowledgeBaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.knowledgeBase !== undefined) {
      KnowledgeBase.encode(message.knowledgeBase, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateKnowledgeBaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateKnowledgeBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.knowledgeBase = KnowledgeBase.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateKnowledgeBaseRequest {
    return {
      knowledgeBase: isSet(object.knowledgeBase) ? KnowledgeBase.fromJSON(object.knowledgeBase) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateKnowledgeBaseRequest): unknown {
    const obj: any = {};
    if (message.knowledgeBase !== undefined) {
      obj.knowledgeBase = KnowledgeBase.toJSON(message.knowledgeBase);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateKnowledgeBaseRequest>): UpdateKnowledgeBaseRequest {
    return UpdateKnowledgeBaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateKnowledgeBaseRequest>): UpdateKnowledgeBaseRequest {
    const message = createBaseUpdateKnowledgeBaseRequest();
    message.knowledgeBase = (object.knowledgeBase !== undefined && object.knowledgeBase !== null)
      ? KnowledgeBase.fromPartial(object.knowledgeBase)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

/**
 * Service for managing
 * [KnowledgeBases][google.cloud.dialogflow.v2beta1.KnowledgeBase].
 */
export type KnowledgeBasesDefinition = typeof KnowledgeBasesDefinition;
export const KnowledgeBasesDefinition = {
  name: "KnowledgeBases",
  fullName: "google.cloud.dialogflow.v2beta1.KnowledgeBases",
  methods: {
    /**
     * Returns the list of all knowledge bases of the specified agent.
     *
     * Note: The `projects.agent.knowledgeBases` resource is deprecated;
     * only use `projects.knowledgeBases`.
     */
    listKnowledgeBases: {
      name: "ListKnowledgeBases",
      requestType: ListKnowledgeBasesRequest,
      requestStream: false,
      responseType: ListKnowledgeBasesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              157,
              1,
              90,
              57,
              18,
              55,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              90,
              51,
              18,
              49,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              18,
              43,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves the specified knowledge base.
     *
     * Note: The `projects.agent.knowledgeBases` resource is deprecated;
     * only use `projects.knowledgeBases`.
     */
    getKnowledgeBase: {
      name: "GetKnowledgeBase",
      requestType: GetKnowledgeBaseRequest,
      requestStream: false,
      responseType: KnowledgeBase,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              157,
              1,
              90,
              57,
              18,
              55,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              90,
              51,
              18,
              49,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              18,
              43,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a knowledge base.
     *
     * Note: The `projects.agent.knowledgeBases` resource is deprecated;
     * only use `projects.knowledgeBases`.
     */
    createKnowledgeBase: {
      name: "CreateKnowledgeBase",
      requestType: CreateKnowledgeBaseRequest,
      requestStream: false,
      responseType: KnowledgeBase,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              95,
              98,
              97,
              115,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              205,
              1,
              58,
              14,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              95,
              98,
              97,
              115,
              101,
              90,
              73,
              58,
              14,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              95,
              98,
              97,
              115,
              101,
              34,
              55,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              90,
              67,
              58,
              14,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              95,
              98,
              97,
              115,
              101,
              34,
              49,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              34,
              43,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes the specified knowledge base.
     *
     * Note: The `projects.agent.knowledgeBases` resource is deprecated;
     * only use `projects.knowledgeBases`.
     */
    deleteKnowledgeBase: {
      name: "DeleteKnowledgeBase",
      requestType: DeleteKnowledgeBaseRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              157,
              1,
              90,
              57,
              42,
              55,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              90,
              51,
              42,
              49,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              42,
              43,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified knowledge base.
     *
     * Note: The `projects.agent.knowledgeBases` resource is deprecated;
     * only use `projects.knowledgeBases`.
     */
    updateKnowledgeBase: {
      name: "UpdateKnowledgeBase",
      requestType: UpdateKnowledgeBaseRequest,
      requestStream: false,
      responseType: KnowledgeBase,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              26,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              95,
              98,
              97,
              115,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
            Buffer.from([14, 107, 110, 111, 119, 108, 101, 100, 103, 101, 95, 98, 97, 115, 101]),
          ],
          578365826: [
            Buffer.from([
              250,
              1,
              58,
              14,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              95,
              98,
              97,
              115,
              101,
              90,
              88,
              58,
              14,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              95,
              98,
              97,
              115,
              101,
              50,
              70,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              95,
              98,
              97,
              115,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              90,
              82,
              58,
              14,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              95,
              98,
              97,
              115,
              101,
              50,
              64,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              95,
              98,
              97,
              115,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              50,
              58,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              95,
              98,
              97,
              115,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface KnowledgeBasesServiceImplementation<CallContextExt = {}> {
  /**
   * Returns the list of all knowledge bases of the specified agent.
   *
   * Note: The `projects.agent.knowledgeBases` resource is deprecated;
   * only use `projects.knowledgeBases`.
   */
  listKnowledgeBases(
    request: ListKnowledgeBasesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListKnowledgeBasesResponse>>;
  /**
   * Retrieves the specified knowledge base.
   *
   * Note: The `projects.agent.knowledgeBases` resource is deprecated;
   * only use `projects.knowledgeBases`.
   */
  getKnowledgeBase(
    request: GetKnowledgeBaseRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<KnowledgeBase>>;
  /**
   * Creates a knowledge base.
   *
   * Note: The `projects.agent.knowledgeBases` resource is deprecated;
   * only use `projects.knowledgeBases`.
   */
  createKnowledgeBase(
    request: CreateKnowledgeBaseRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<KnowledgeBase>>;
  /**
   * Deletes the specified knowledge base.
   *
   * Note: The `projects.agent.knowledgeBases` resource is deprecated;
   * only use `projects.knowledgeBases`.
   */
  deleteKnowledgeBase(
    request: DeleteKnowledgeBaseRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Updates the specified knowledge base.
   *
   * Note: The `projects.agent.knowledgeBases` resource is deprecated;
   * only use `projects.knowledgeBases`.
   */
  updateKnowledgeBase(
    request: UpdateKnowledgeBaseRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<KnowledgeBase>>;
}

export interface KnowledgeBasesClient<CallOptionsExt = {}> {
  /**
   * Returns the list of all knowledge bases of the specified agent.
   *
   * Note: The `projects.agent.knowledgeBases` resource is deprecated;
   * only use `projects.knowledgeBases`.
   */
  listKnowledgeBases(
    request: DeepPartial<ListKnowledgeBasesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListKnowledgeBasesResponse>;
  /**
   * Retrieves the specified knowledge base.
   *
   * Note: The `projects.agent.knowledgeBases` resource is deprecated;
   * only use `projects.knowledgeBases`.
   */
  getKnowledgeBase(
    request: DeepPartial<GetKnowledgeBaseRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<KnowledgeBase>;
  /**
   * Creates a knowledge base.
   *
   * Note: The `projects.agent.knowledgeBases` resource is deprecated;
   * only use `projects.knowledgeBases`.
   */
  createKnowledgeBase(
    request: DeepPartial<CreateKnowledgeBaseRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<KnowledgeBase>;
  /**
   * Deletes the specified knowledge base.
   *
   * Note: The `projects.agent.knowledgeBases` resource is deprecated;
   * only use `projects.knowledgeBases`.
   */
  deleteKnowledgeBase(
    request: DeepPartial<DeleteKnowledgeBaseRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Updates the specified knowledge base.
   *
   * Note: The `projects.agent.knowledgeBases` resource is deprecated;
   * only use `projects.knowledgeBases`.
   */
  updateKnowledgeBase(
    request: DeepPartial<UpdateKnowledgeBaseRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<KnowledgeBase>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
