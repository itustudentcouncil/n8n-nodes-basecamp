// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/cloudcontrolspartner/v1beta/violations.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Interval } from "../../../type/interval.js";

export const protobufPackage = "google.cloud.cloudcontrolspartner.v1beta";

/** Details of resource Violation */
export interface Violation {
  /**
   * Identifier. Format:
   * `organizations/{organization}/locations/{location}/customers/{customer}/workloads/{workload}/violations/{violation}`
   */
  name: string;
  /**
   * Output only. Description for the Violation.
   * e.g. OrgPolicy gcp.resourceLocations has non compliant value.
   */
  description: string;
  /** Output only. Time of the event which triggered the Violation. */
  beginTime:
    | Date
    | undefined;
  /** Output only. The last time when the Violation record was updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. Time of the event which fixed the Violation.
   * If the violation is ACTIVE this will be empty.
   */
  resolveTime:
    | Date
    | undefined;
  /**
   * Output only. Category under which this violation is mapped.
   * e.g. Location, Service Usage, Access, Encryption, etc.
   */
  category: string;
  /** Output only. State of the violation */
  state: Violation_State;
  /**
   * Output only. Immutable. Name of the OrgPolicy which was modified with
   * non-compliant change and resulted this violation. Format:
   *  `projects/{project_number}/policies/{constraint_name}`
   *  `folders/{folder_id}/policies/{constraint_name}`
   *  `organizations/{organization_id}/policies/{constraint_name}`
   */
  nonCompliantOrgPolicy: string;
  /** The folder_id of the violation */
  folderId: Long;
  /** Output only. Compliance violation remediation */
  remediation: Violation_Remediation | undefined;
}

/** Violation State Values */
export enum Violation_State {
  /** STATE_UNSPECIFIED - Unspecified state. */
  STATE_UNSPECIFIED = 0,
  /** RESOLVED - Violation is resolved. */
  RESOLVED = 1,
  /** UNRESOLVED - Violation is Unresolved */
  UNRESOLVED = 2,
  /** EXCEPTION - Violation is Exception */
  EXCEPTION = 3,
  UNRECOGNIZED = -1,
}

export function violation_StateFromJSON(object: any): Violation_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Violation_State.STATE_UNSPECIFIED;
    case 1:
    case "RESOLVED":
      return Violation_State.RESOLVED;
    case 2:
    case "UNRESOLVED":
      return Violation_State.UNRESOLVED;
    case 3:
    case "EXCEPTION":
      return Violation_State.EXCEPTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Violation_State.UNRECOGNIZED;
  }
}

export function violation_StateToJSON(object: Violation_State): string {
  switch (object) {
    case Violation_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Violation_State.RESOLVED:
      return "RESOLVED";
    case Violation_State.UNRESOLVED:
      return "UNRESOLVED";
    case Violation_State.EXCEPTION:
      return "EXCEPTION";
    case Violation_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Represents remediation guidance to resolve compliance violation for
 * AssuredWorkload
 */
export interface Violation_Remediation {
  /** Required. Remediation instructions to resolve violations */
  instructions:
    | Violation_Remediation_Instructions
    | undefined;
  /**
   * Values that can resolve the violation
   * For example: for list org policy violations, this will either be the list
   * of allowed or denied values
   */
  compliantValues: string[];
  /**
   * Output only. Remediation type based on the type of org policy values
   * violated
   */
  remediationType: Violation_Remediation_RemediationType;
}

/**
 * Classifying remediation into various types based on the kind of
 * violation. For example, violations caused due to changes in boolean org
 * policy requires different remediation instructions compared to violation
 * caused due to changes in allowed values of list org policy.
 */
export enum Violation_Remediation_RemediationType {
  /** REMEDIATION_TYPE_UNSPECIFIED - Unspecified remediation type */
  REMEDIATION_TYPE_UNSPECIFIED = 0,
  /** REMEDIATION_BOOLEAN_ORG_POLICY_VIOLATION - Remediation type for boolean org policy */
  REMEDIATION_BOOLEAN_ORG_POLICY_VIOLATION = 1,
  /**
   * REMEDIATION_LIST_ALLOWED_VALUES_ORG_POLICY_VIOLATION - Remediation type for list org policy which have allowed values in the
   * monitoring rule
   */
  REMEDIATION_LIST_ALLOWED_VALUES_ORG_POLICY_VIOLATION = 2,
  /**
   * REMEDIATION_LIST_DENIED_VALUES_ORG_POLICY_VIOLATION - Remediation type for list org policy which have denied values in the
   * monitoring rule
   */
  REMEDIATION_LIST_DENIED_VALUES_ORG_POLICY_VIOLATION = 3,
  /** REMEDIATION_RESTRICT_CMEK_CRYPTO_KEY_PROJECTS_ORG_POLICY_VIOLATION - Remediation type for gcp.restrictCmekCryptoKeyProjects */
  REMEDIATION_RESTRICT_CMEK_CRYPTO_KEY_PROJECTS_ORG_POLICY_VIOLATION = 4,
  /** REMEDIATION_RESOURCE_VIOLATION - Remediation type for resource violation. */
  REMEDIATION_RESOURCE_VIOLATION = 5,
  UNRECOGNIZED = -1,
}

export function violation_Remediation_RemediationTypeFromJSON(object: any): Violation_Remediation_RemediationType {
  switch (object) {
    case 0:
    case "REMEDIATION_TYPE_UNSPECIFIED":
      return Violation_Remediation_RemediationType.REMEDIATION_TYPE_UNSPECIFIED;
    case 1:
    case "REMEDIATION_BOOLEAN_ORG_POLICY_VIOLATION":
      return Violation_Remediation_RemediationType.REMEDIATION_BOOLEAN_ORG_POLICY_VIOLATION;
    case 2:
    case "REMEDIATION_LIST_ALLOWED_VALUES_ORG_POLICY_VIOLATION":
      return Violation_Remediation_RemediationType.REMEDIATION_LIST_ALLOWED_VALUES_ORG_POLICY_VIOLATION;
    case 3:
    case "REMEDIATION_LIST_DENIED_VALUES_ORG_POLICY_VIOLATION":
      return Violation_Remediation_RemediationType.REMEDIATION_LIST_DENIED_VALUES_ORG_POLICY_VIOLATION;
    case 4:
    case "REMEDIATION_RESTRICT_CMEK_CRYPTO_KEY_PROJECTS_ORG_POLICY_VIOLATION":
      return Violation_Remediation_RemediationType.REMEDIATION_RESTRICT_CMEK_CRYPTO_KEY_PROJECTS_ORG_POLICY_VIOLATION;
    case 5:
    case "REMEDIATION_RESOURCE_VIOLATION":
      return Violation_Remediation_RemediationType.REMEDIATION_RESOURCE_VIOLATION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Violation_Remediation_RemediationType.UNRECOGNIZED;
  }
}

export function violation_Remediation_RemediationTypeToJSON(object: Violation_Remediation_RemediationType): string {
  switch (object) {
    case Violation_Remediation_RemediationType.REMEDIATION_TYPE_UNSPECIFIED:
      return "REMEDIATION_TYPE_UNSPECIFIED";
    case Violation_Remediation_RemediationType.REMEDIATION_BOOLEAN_ORG_POLICY_VIOLATION:
      return "REMEDIATION_BOOLEAN_ORG_POLICY_VIOLATION";
    case Violation_Remediation_RemediationType.REMEDIATION_LIST_ALLOWED_VALUES_ORG_POLICY_VIOLATION:
      return "REMEDIATION_LIST_ALLOWED_VALUES_ORG_POLICY_VIOLATION";
    case Violation_Remediation_RemediationType.REMEDIATION_LIST_DENIED_VALUES_ORG_POLICY_VIOLATION:
      return "REMEDIATION_LIST_DENIED_VALUES_ORG_POLICY_VIOLATION";
    case Violation_Remediation_RemediationType.REMEDIATION_RESTRICT_CMEK_CRYPTO_KEY_PROJECTS_ORG_POLICY_VIOLATION:
      return "REMEDIATION_RESTRICT_CMEK_CRYPTO_KEY_PROJECTS_ORG_POLICY_VIOLATION";
    case Violation_Remediation_RemediationType.REMEDIATION_RESOURCE_VIOLATION:
      return "REMEDIATION_RESOURCE_VIOLATION";
    case Violation_Remediation_RemediationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Instructions to remediate violation */
export interface Violation_Remediation_Instructions {
  /** Remediation instructions to resolve violation via gcloud cli */
  gcloudInstructions:
    | Violation_Remediation_Instructions_Gcloud
    | undefined;
  /** Remediation instructions to resolve violation via cloud console */
  consoleInstructions: Violation_Remediation_Instructions_Console | undefined;
}

/** Remediation instructions to resolve violation via gcloud cli */
export interface Violation_Remediation_Instructions_Gcloud {
  /** Gcloud command to resolve violation */
  gcloudCommands: string[];
  /** Steps to resolve violation via gcloud cli */
  steps: string[];
  /** Additional urls for more information about steps */
  additionalLinks: string[];
}

/** Remediation instructions to resolve violation via cloud console */
export interface Violation_Remediation_Instructions_Console {
  /** Link to console page where violations can be resolved */
  consoleUris: string[];
  /** Steps to resolve violation via cloud console */
  steps: string[];
  /** Additional urls for more information about steps */
  additionalLinks: string[];
}

/** Message for requesting list of Violations */
export interface ListViolationsRequest {
  /**
   * Required. Parent resource
   * Format
   * `organizations/{organization}/locations/{location}/customers/{customer}/workloads/{workload}`
   */
  parent: string;
  /**
   * Optional. The maximum number of customers row to return. The service may
   * return fewer than this value. If unspecified, at most 10 customers will be
   * returned.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListViolations` call.
   * Provide this to retrieve the subsequent page.
   */
  pageToken: string;
  /** Optional. Filtering results */
  filter: string;
  /** Optional. Hint for how to order the results */
  orderBy: string;
  /**
   * Optional. Specifies the interval for retrieving violations.
   * if unspecified, all violations will be returned.
   */
  interval: Interval | undefined;
}

/** Response message for list customer violation requests */
export interface ListViolationsResponse {
  /** List of violation */
  violations: Violation[];
  /**
   * A token that can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /**
   * Workloads that could not be reached due to permission errors or any other
   * error. Ref: https://google.aip.dev/217
   */
  unreachable: string[];
}

/** Message for getting a Violation */
export interface GetViolationRequest {
  /**
   * Required. Format:
   * `organizations/{organization}/locations/{location}/customers/{customer}/workloads/{workload}/violations/{violation}`
   */
  name: string;
}

function createBaseViolation(): Violation {
  return {
    name: "",
    description: "",
    beginTime: undefined,
    updateTime: undefined,
    resolveTime: undefined,
    category: "",
    state: 0,
    nonCompliantOrgPolicy: "",
    folderId: Long.ZERO,
    remediation: undefined,
  };
}

export const Violation: MessageFns<Violation> = {
  encode(message: Violation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.beginTime !== undefined) {
      Timestamp.encode(toTimestamp(message.beginTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.resolveTime !== undefined) {
      Timestamp.encode(toTimestamp(message.resolveTime), writer.uint32(42).fork()).join();
    }
    if (message.category !== "") {
      writer.uint32(50).string(message.category);
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    if (message.nonCompliantOrgPolicy !== "") {
      writer.uint32(66).string(message.nonCompliantOrgPolicy);
    }
    if (!message.folderId.equals(Long.ZERO)) {
      writer.uint32(72).int64(message.folderId.toString());
    }
    if (message.remediation !== undefined) {
      Violation_Remediation.encode(message.remediation, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Violation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViolation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.beginTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.resolveTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.category = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.nonCompliantOrgPolicy = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.folderId = Long.fromString(reader.int64().toString());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.remediation = Violation_Remediation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Violation {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      beginTime: isSet(object.beginTime) ? fromJsonTimestamp(object.beginTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      resolveTime: isSet(object.resolveTime) ? fromJsonTimestamp(object.resolveTime) : undefined,
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      state: isSet(object.state) ? violation_StateFromJSON(object.state) : 0,
      nonCompliantOrgPolicy: isSet(object.nonCompliantOrgPolicy) ? globalThis.String(object.nonCompliantOrgPolicy) : "",
      folderId: isSet(object.folderId) ? Long.fromValue(object.folderId) : Long.ZERO,
      remediation: isSet(object.remediation) ? Violation_Remediation.fromJSON(object.remediation) : undefined,
    };
  },

  toJSON(message: Violation): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.beginTime !== undefined) {
      obj.beginTime = message.beginTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.resolveTime !== undefined) {
      obj.resolveTime = message.resolveTime.toISOString();
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.state !== 0) {
      obj.state = violation_StateToJSON(message.state);
    }
    if (message.nonCompliantOrgPolicy !== "") {
      obj.nonCompliantOrgPolicy = message.nonCompliantOrgPolicy;
    }
    if (!message.folderId.equals(Long.ZERO)) {
      obj.folderId = (message.folderId || Long.ZERO).toString();
    }
    if (message.remediation !== undefined) {
      obj.remediation = Violation_Remediation.toJSON(message.remediation);
    }
    return obj;
  },

  create(base?: DeepPartial<Violation>): Violation {
    return Violation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Violation>): Violation {
    const message = createBaseViolation();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.beginTime = object.beginTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.resolveTime = object.resolveTime ?? undefined;
    message.category = object.category ?? "";
    message.state = object.state ?? 0;
    message.nonCompliantOrgPolicy = object.nonCompliantOrgPolicy ?? "";
    message.folderId = (object.folderId !== undefined && object.folderId !== null)
      ? Long.fromValue(object.folderId)
      : Long.ZERO;
    message.remediation = (object.remediation !== undefined && object.remediation !== null)
      ? Violation_Remediation.fromPartial(object.remediation)
      : undefined;
    return message;
  },
};

function createBaseViolation_Remediation(): Violation_Remediation {
  return { instructions: undefined, compliantValues: [], remediationType: 0 };
}

export const Violation_Remediation: MessageFns<Violation_Remediation> = {
  encode(message: Violation_Remediation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instructions !== undefined) {
      Violation_Remediation_Instructions.encode(message.instructions, writer.uint32(10).fork()).join();
    }
    for (const v of message.compliantValues) {
      writer.uint32(18).string(v!);
    }
    if (message.remediationType !== 0) {
      writer.uint32(24).int32(message.remediationType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Violation_Remediation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViolation_Remediation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instructions = Violation_Remediation_Instructions.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.compliantValues.push(reader.string());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.remediationType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Violation_Remediation {
    return {
      instructions: isSet(object.instructions)
        ? Violation_Remediation_Instructions.fromJSON(object.instructions)
        : undefined,
      compliantValues: globalThis.Array.isArray(object?.compliantValues)
        ? object.compliantValues.map((e: any) => globalThis.String(e))
        : [],
      remediationType: isSet(object.remediationType)
        ? violation_Remediation_RemediationTypeFromJSON(object.remediationType)
        : 0,
    };
  },

  toJSON(message: Violation_Remediation): unknown {
    const obj: any = {};
    if (message.instructions !== undefined) {
      obj.instructions = Violation_Remediation_Instructions.toJSON(message.instructions);
    }
    if (message.compliantValues?.length) {
      obj.compliantValues = message.compliantValues;
    }
    if (message.remediationType !== 0) {
      obj.remediationType = violation_Remediation_RemediationTypeToJSON(message.remediationType);
    }
    return obj;
  },

  create(base?: DeepPartial<Violation_Remediation>): Violation_Remediation {
    return Violation_Remediation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Violation_Remediation>): Violation_Remediation {
    const message = createBaseViolation_Remediation();
    message.instructions = (object.instructions !== undefined && object.instructions !== null)
      ? Violation_Remediation_Instructions.fromPartial(object.instructions)
      : undefined;
    message.compliantValues = object.compliantValues?.map((e) => e) || [];
    message.remediationType = object.remediationType ?? 0;
    return message;
  },
};

function createBaseViolation_Remediation_Instructions(): Violation_Remediation_Instructions {
  return { gcloudInstructions: undefined, consoleInstructions: undefined };
}

export const Violation_Remediation_Instructions: MessageFns<Violation_Remediation_Instructions> = {
  encode(message: Violation_Remediation_Instructions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcloudInstructions !== undefined) {
      Violation_Remediation_Instructions_Gcloud.encode(message.gcloudInstructions, writer.uint32(10).fork()).join();
    }
    if (message.consoleInstructions !== undefined) {
      Violation_Remediation_Instructions_Console.encode(message.consoleInstructions, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Violation_Remediation_Instructions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViolation_Remediation_Instructions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcloudInstructions = Violation_Remediation_Instructions_Gcloud.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.consoleInstructions = Violation_Remediation_Instructions_Console.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Violation_Remediation_Instructions {
    return {
      gcloudInstructions: isSet(object.gcloudInstructions)
        ? Violation_Remediation_Instructions_Gcloud.fromJSON(object.gcloudInstructions)
        : undefined,
      consoleInstructions: isSet(object.consoleInstructions)
        ? Violation_Remediation_Instructions_Console.fromJSON(object.consoleInstructions)
        : undefined,
    };
  },

  toJSON(message: Violation_Remediation_Instructions): unknown {
    const obj: any = {};
    if (message.gcloudInstructions !== undefined) {
      obj.gcloudInstructions = Violation_Remediation_Instructions_Gcloud.toJSON(message.gcloudInstructions);
    }
    if (message.consoleInstructions !== undefined) {
      obj.consoleInstructions = Violation_Remediation_Instructions_Console.toJSON(message.consoleInstructions);
    }
    return obj;
  },

  create(base?: DeepPartial<Violation_Remediation_Instructions>): Violation_Remediation_Instructions {
    return Violation_Remediation_Instructions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Violation_Remediation_Instructions>): Violation_Remediation_Instructions {
    const message = createBaseViolation_Remediation_Instructions();
    message.gcloudInstructions = (object.gcloudInstructions !== undefined && object.gcloudInstructions !== null)
      ? Violation_Remediation_Instructions_Gcloud.fromPartial(object.gcloudInstructions)
      : undefined;
    message.consoleInstructions = (object.consoleInstructions !== undefined && object.consoleInstructions !== null)
      ? Violation_Remediation_Instructions_Console.fromPartial(object.consoleInstructions)
      : undefined;
    return message;
  },
};

function createBaseViolation_Remediation_Instructions_Gcloud(): Violation_Remediation_Instructions_Gcloud {
  return { gcloudCommands: [], steps: [], additionalLinks: [] };
}

export const Violation_Remediation_Instructions_Gcloud: MessageFns<Violation_Remediation_Instructions_Gcloud> = {
  encode(message: Violation_Remediation_Instructions_Gcloud, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.gcloudCommands) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.steps) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.additionalLinks) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Violation_Remediation_Instructions_Gcloud {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViolation_Remediation_Instructions_Gcloud();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcloudCommands.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.steps.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.additionalLinks.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Violation_Remediation_Instructions_Gcloud {
    return {
      gcloudCommands: globalThis.Array.isArray(object?.gcloudCommands)
        ? object.gcloudCommands.map((e: any) => globalThis.String(e))
        : [],
      steps: globalThis.Array.isArray(object?.steps) ? object.steps.map((e: any) => globalThis.String(e)) : [],
      additionalLinks: globalThis.Array.isArray(object?.additionalLinks)
        ? object.additionalLinks.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Violation_Remediation_Instructions_Gcloud): unknown {
    const obj: any = {};
    if (message.gcloudCommands?.length) {
      obj.gcloudCommands = message.gcloudCommands;
    }
    if (message.steps?.length) {
      obj.steps = message.steps;
    }
    if (message.additionalLinks?.length) {
      obj.additionalLinks = message.additionalLinks;
    }
    return obj;
  },

  create(base?: DeepPartial<Violation_Remediation_Instructions_Gcloud>): Violation_Remediation_Instructions_Gcloud {
    return Violation_Remediation_Instructions_Gcloud.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<Violation_Remediation_Instructions_Gcloud>,
  ): Violation_Remediation_Instructions_Gcloud {
    const message = createBaseViolation_Remediation_Instructions_Gcloud();
    message.gcloudCommands = object.gcloudCommands?.map((e) => e) || [];
    message.steps = object.steps?.map((e) => e) || [];
    message.additionalLinks = object.additionalLinks?.map((e) => e) || [];
    return message;
  },
};

function createBaseViolation_Remediation_Instructions_Console(): Violation_Remediation_Instructions_Console {
  return { consoleUris: [], steps: [], additionalLinks: [] };
}

export const Violation_Remediation_Instructions_Console: MessageFns<Violation_Remediation_Instructions_Console> = {
  encode(message: Violation_Remediation_Instructions_Console, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.consoleUris) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.steps) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.additionalLinks) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Violation_Remediation_Instructions_Console {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViolation_Remediation_Instructions_Console();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.consoleUris.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.steps.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.additionalLinks.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Violation_Remediation_Instructions_Console {
    return {
      consoleUris: globalThis.Array.isArray(object?.consoleUris)
        ? object.consoleUris.map((e: any) => globalThis.String(e))
        : [],
      steps: globalThis.Array.isArray(object?.steps) ? object.steps.map((e: any) => globalThis.String(e)) : [],
      additionalLinks: globalThis.Array.isArray(object?.additionalLinks)
        ? object.additionalLinks.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Violation_Remediation_Instructions_Console): unknown {
    const obj: any = {};
    if (message.consoleUris?.length) {
      obj.consoleUris = message.consoleUris;
    }
    if (message.steps?.length) {
      obj.steps = message.steps;
    }
    if (message.additionalLinks?.length) {
      obj.additionalLinks = message.additionalLinks;
    }
    return obj;
  },

  create(base?: DeepPartial<Violation_Remediation_Instructions_Console>): Violation_Remediation_Instructions_Console {
    return Violation_Remediation_Instructions_Console.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<Violation_Remediation_Instructions_Console>,
  ): Violation_Remediation_Instructions_Console {
    const message = createBaseViolation_Remediation_Instructions_Console();
    message.consoleUris = object.consoleUris?.map((e) => e) || [];
    message.steps = object.steps?.map((e) => e) || [];
    message.additionalLinks = object.additionalLinks?.map((e) => e) || [];
    return message;
  },
};

function createBaseListViolationsRequest(): ListViolationsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "", interval: undefined };
}

export const ListViolationsRequest: MessageFns<ListViolationsRequest> = {
  encode(message: ListViolationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    if (message.interval !== undefined) {
      Interval.encode(message.interval, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListViolationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListViolationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.interval = Interval.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListViolationsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      interval: isSet(object.interval) ? Interval.fromJSON(object.interval) : undefined,
    };
  },

  toJSON(message: ListViolationsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.interval !== undefined) {
      obj.interval = Interval.toJSON(message.interval);
    }
    return obj;
  },

  create(base?: DeepPartial<ListViolationsRequest>): ListViolationsRequest {
    return ListViolationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListViolationsRequest>): ListViolationsRequest {
    const message = createBaseListViolationsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    message.interval = (object.interval !== undefined && object.interval !== null)
      ? Interval.fromPartial(object.interval)
      : undefined;
    return message;
  },
};

function createBaseListViolationsResponse(): ListViolationsResponse {
  return { violations: [], nextPageToken: "", unreachable: [] };
}

export const ListViolationsResponse: MessageFns<ListViolationsResponse> = {
  encode(message: ListViolationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.violations) {
      Violation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListViolationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListViolationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.violations.push(Violation.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListViolationsResponse {
    return {
      violations: globalThis.Array.isArray(object?.violations)
        ? object.violations.map((e: any) => Violation.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListViolationsResponse): unknown {
    const obj: any = {};
    if (message.violations?.length) {
      obj.violations = message.violations.map((e) => Violation.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListViolationsResponse>): ListViolationsResponse {
    return ListViolationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListViolationsResponse>): ListViolationsResponse {
    const message = createBaseListViolationsResponse();
    message.violations = object.violations?.map((e) => Violation.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetViolationRequest(): GetViolationRequest {
  return { name: "" };
}

export const GetViolationRequest: MessageFns<GetViolationRequest> = {
  encode(message: GetViolationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetViolationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetViolationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetViolationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetViolationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetViolationRequest>): GetViolationRequest {
    return GetViolationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetViolationRequest>): GetViolationRequest {
    const message = createBaseGetViolationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
