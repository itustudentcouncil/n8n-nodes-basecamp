// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/cloudcontrolspartner/v1beta/partner_permissions.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.cloudcontrolspartner.v1beta";

/** The permissions granted to the partner for a workload */
export interface PartnerPermissions {
  /**
   * Identifier. Format:
   * `organizations/{organization}/locations/{location}/customers/{customer}/workloads/{workload}/partnerPermissions`
   */
  name: string;
  /** The partner permissions granted for the workload */
  partnerPermissions: PartnerPermissions_Permission[];
}

export enum PartnerPermissions_Permission {
  /** PERMISSION_UNSPECIFIED - Unspecified partner permission */
  PERMISSION_UNSPECIFIED = 0,
  /** ACCESS_TRANSPARENCY_AND_EMERGENCY_ACCESS_LOGS - Permission for Access Transparency and emergency logs */
  ACCESS_TRANSPARENCY_AND_EMERGENCY_ACCESS_LOGS = 1,
  /** ASSURED_WORKLOADS_MONITORING - Permission for Assured Workloads monitoring violations */
  ASSURED_WORKLOADS_MONITORING = 2,
  /** ACCESS_APPROVAL_REQUESTS - Permission for Access Approval requests */
  ACCESS_APPROVAL_REQUESTS = 3,
  /** ASSURED_WORKLOADS_EKM_CONNECTION_STATUS - Permission for External Key Manager connection status */
  ASSURED_WORKLOADS_EKM_CONNECTION_STATUS = 4,
  /** ACCESS_TRANSPARENCY_LOGS_SUPPORT_CASE_VIEWER - Permission for support case details for Access Transparency log entries */
  ACCESS_TRANSPARENCY_LOGS_SUPPORT_CASE_VIEWER = 5,
  UNRECOGNIZED = -1,
}

export function partnerPermissions_PermissionFromJSON(object: any): PartnerPermissions_Permission {
  switch (object) {
    case 0:
    case "PERMISSION_UNSPECIFIED":
      return PartnerPermissions_Permission.PERMISSION_UNSPECIFIED;
    case 1:
    case "ACCESS_TRANSPARENCY_AND_EMERGENCY_ACCESS_LOGS":
      return PartnerPermissions_Permission.ACCESS_TRANSPARENCY_AND_EMERGENCY_ACCESS_LOGS;
    case 2:
    case "ASSURED_WORKLOADS_MONITORING":
      return PartnerPermissions_Permission.ASSURED_WORKLOADS_MONITORING;
    case 3:
    case "ACCESS_APPROVAL_REQUESTS":
      return PartnerPermissions_Permission.ACCESS_APPROVAL_REQUESTS;
    case 4:
    case "ASSURED_WORKLOADS_EKM_CONNECTION_STATUS":
      return PartnerPermissions_Permission.ASSURED_WORKLOADS_EKM_CONNECTION_STATUS;
    case 5:
    case "ACCESS_TRANSPARENCY_LOGS_SUPPORT_CASE_VIEWER":
      return PartnerPermissions_Permission.ACCESS_TRANSPARENCY_LOGS_SUPPORT_CASE_VIEWER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PartnerPermissions_Permission.UNRECOGNIZED;
  }
}

export function partnerPermissions_PermissionToJSON(object: PartnerPermissions_Permission): string {
  switch (object) {
    case PartnerPermissions_Permission.PERMISSION_UNSPECIFIED:
      return "PERMISSION_UNSPECIFIED";
    case PartnerPermissions_Permission.ACCESS_TRANSPARENCY_AND_EMERGENCY_ACCESS_LOGS:
      return "ACCESS_TRANSPARENCY_AND_EMERGENCY_ACCESS_LOGS";
    case PartnerPermissions_Permission.ASSURED_WORKLOADS_MONITORING:
      return "ASSURED_WORKLOADS_MONITORING";
    case PartnerPermissions_Permission.ACCESS_APPROVAL_REQUESTS:
      return "ACCESS_APPROVAL_REQUESTS";
    case PartnerPermissions_Permission.ASSURED_WORKLOADS_EKM_CONNECTION_STATUS:
      return "ASSURED_WORKLOADS_EKM_CONNECTION_STATUS";
    case PartnerPermissions_Permission.ACCESS_TRANSPARENCY_LOGS_SUPPORT_CASE_VIEWER:
      return "ACCESS_TRANSPARENCY_LOGS_SUPPORT_CASE_VIEWER";
    case PartnerPermissions_Permission.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request for getting the partner permissions granted for a workload */
export interface GetPartnerPermissionsRequest {
  /**
   * Required. Name of the resource to get in the format:
   * `organizations/{organization}/locations/{location}/customers/{customer}/workloads/{workload}/partnerPermissions`
   */
  name: string;
}

function createBasePartnerPermissions(): PartnerPermissions {
  return { name: "", partnerPermissions: [] };
}

export const PartnerPermissions: MessageFns<PartnerPermissions> = {
  encode(message: PartnerPermissions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    writer.uint32(18).fork();
    for (const v of message.partnerPermissions) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PartnerPermissions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePartnerPermissions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag === 16) {
            message.partnerPermissions.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.partnerPermissions.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PartnerPermissions {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      partnerPermissions: globalThis.Array.isArray(object?.partnerPermissions)
        ? object.partnerPermissions.map((e: any) => partnerPermissions_PermissionFromJSON(e))
        : [],
    };
  },

  toJSON(message: PartnerPermissions): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.partnerPermissions?.length) {
      obj.partnerPermissions = message.partnerPermissions.map((e) => partnerPermissions_PermissionToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PartnerPermissions>): PartnerPermissions {
    return PartnerPermissions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PartnerPermissions>): PartnerPermissions {
    const message = createBasePartnerPermissions();
    message.name = object.name ?? "";
    message.partnerPermissions = object.partnerPermissions?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetPartnerPermissionsRequest(): GetPartnerPermissionsRequest {
  return { name: "" };
}

export const GetPartnerPermissionsRequest: MessageFns<GetPartnerPermissionsRequest> = {
  encode(message: GetPartnerPermissionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPartnerPermissionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPartnerPermissionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPartnerPermissionsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPartnerPermissionsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPartnerPermissionsRequest>): GetPartnerPermissionsRequest {
    return GetPartnerPermissionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPartnerPermissionsRequest>): GetPartnerPermissionsRequest {
    const message = createBaseGetPartnerPermissionsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
