// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/cloudcontrolspartner/v1/core.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { ListAccessApprovalRequestsRequest, ListAccessApprovalRequestsResponse } from "./access_approval_requests.js";
import { GetWorkloadRequest, ListWorkloadsRequest, ListWorkloadsResponse, Workload } from "./customer_workloads.js";
import { Customer, GetCustomerRequest, ListCustomersRequest, ListCustomersResponse } from "./customers.js";
import { EkmConnections, GetEkmConnectionsRequest } from "./ekm_connections.js";
import { GetPartnerPermissionsRequest, PartnerPermissions } from "./partner_permissions.js";
import { GetPartnerRequest, Partner } from "./partners.js";

export const protobufPackage = "google.cloud.cloudcontrolspartner.v1";

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have been cancelled successfully
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

/** Service describing handlers for resources */
export type CloudControlsPartnerCoreDefinition = typeof CloudControlsPartnerCoreDefinition;
export const CloudControlsPartnerCoreDefinition = {
  name: "CloudControlsPartnerCore",
  fullName: "google.cloud.cloudcontrolspartner.v1.CloudControlsPartnerCore",
  methods: {
    /** Gets details of a single workload */
    getWorkload: {
      name: "GetWorkload",
      requestType: GetWorkloadRequest,
      requestStream: false,
      responseType: Workload,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists customer workloads for a given customer org id */
    listWorkloads: {
      name: "ListWorkloads",
      requestType: ListWorkloadsRequest,
      requestStream: false,
      responseType: ListWorkloadsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single customer */
    getCustomer: {
      name: "GetCustomer",
      requestType: GetCustomerRequest,
      requestStream: false,
      responseType: Customer,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists customers of a partner identified by its Google Cloud organization ID */
    listCustomers: {
      name: "ListCustomers",
      requestType: ListCustomersRequest,
      requestStream: false,
      responseType: ListCustomersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets the EKM connections associated with a workload */
    getEkmConnections: {
      name: "GetEkmConnections",
      requestType: GetEkmConnectionsRequest,
      requestStream: false,
      responseType: EkmConnections,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              79,
              18,
              77,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
              47,
              42,
              47,
              101,
              107,
              109,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets the partner permissions granted for a workload */
    getPartnerPermissions: {
      name: "GetPartnerPermissions",
      requestType: GetPartnerPermissionsRequest,
      requestStream: false,
      responseType: PartnerPermissions,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              83,
              18,
              81,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
              47,
              42,
              47,
              112,
              97,
              114,
              116,
              110,
              101,
              114,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deprecated: Only returns access approval requests directly associated with
     * an assured workload folder.
     *
     * @deprecated
     */
    listAccessApprovalRequests: {
      name: "ListAccessApprovalRequests",
      requestType: ListAccessApprovalRequestsRequest,
      requestStream: false,
      responseType: ListAccessApprovalRequestsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              89,
              18,
              87,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              65,
              112,
              112,
              114,
              111,
              118,
              97,
              108,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Get details of a Partner. */
    getPartner: {
      name: "GetPartner",
      requestType: GetPartnerRequest,
      requestStream: false,
      responseType: Partner,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              97,
              114,
              116,
              110,
              101,
              114,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CloudControlsPartnerCoreServiceImplementation<CallContextExt = {}> {
  /** Gets details of a single workload */
  getWorkload(request: GetWorkloadRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Workload>>;
  /** Lists customer workloads for a given customer org id */
  listWorkloads(
    request: ListWorkloadsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListWorkloadsResponse>>;
  /** Gets details of a single customer */
  getCustomer(request: GetCustomerRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Customer>>;
  /** Lists customers of a partner identified by its Google Cloud organization ID */
  listCustomers(
    request: ListCustomersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCustomersResponse>>;
  /** Gets the EKM connections associated with a workload */
  getEkmConnections(
    request: GetEkmConnectionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EkmConnections>>;
  /** Gets the partner permissions granted for a workload */
  getPartnerPermissions(
    request: GetPartnerPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PartnerPermissions>>;
  /**
   * Deprecated: Only returns access approval requests directly associated with
   * an assured workload folder.
   *
   * @deprecated
   */
  listAccessApprovalRequests(
    request: ListAccessApprovalRequestsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAccessApprovalRequestsResponse>>;
  /** Get details of a Partner. */
  getPartner(request: GetPartnerRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Partner>>;
}

export interface CloudControlsPartnerCoreClient<CallOptionsExt = {}> {
  /** Gets details of a single workload */
  getWorkload(request: DeepPartial<GetWorkloadRequest>, options?: CallOptions & CallOptionsExt): Promise<Workload>;
  /** Lists customer workloads for a given customer org id */
  listWorkloads(
    request: DeepPartial<ListWorkloadsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListWorkloadsResponse>;
  /** Gets details of a single customer */
  getCustomer(request: DeepPartial<GetCustomerRequest>, options?: CallOptions & CallOptionsExt): Promise<Customer>;
  /** Lists customers of a partner identified by its Google Cloud organization ID */
  listCustomers(
    request: DeepPartial<ListCustomersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCustomersResponse>;
  /** Gets the EKM connections associated with a workload */
  getEkmConnections(
    request: DeepPartial<GetEkmConnectionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EkmConnections>;
  /** Gets the partner permissions granted for a workload */
  getPartnerPermissions(
    request: DeepPartial<GetPartnerPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PartnerPermissions>;
  /**
   * Deprecated: Only returns access approval requests directly associated with
   * an assured workload folder.
   *
   * @deprecated
   */
  listAccessApprovalRequests(
    request: DeepPartial<ListAccessApprovalRequestsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAccessApprovalRequestsResponse>;
  /** Get details of a Partner. */
  getPartner(request: DeepPartial<GetPartnerRequest>, options?: CallOptions & CallOptionsExt): Promise<Partner>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
