// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/cloudcontrolspartner/v1/customers.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { CompletionState, completionStateFromJSON, completionStateToJSON } from "./completion_state.js";

export const protobufPackage = "google.cloud.cloudcontrolspartner.v1";

/** Contains metadata around a Cloud Controls Partner Customer */
export interface Customer {
  /**
   * Identifier. Format:
   * `organizations/{organization}/locations/{location}/customers/{customer}`
   */
  name: string;
  /** Required. Display name for the customer */
  displayName: string;
  /** Output only. Container for customer onboarding steps */
  customerOnboardingState:
    | CustomerOnboardingState
    | undefined;
  /** Output only. Indicates whether a customer is fully onboarded */
  isOnboarded: boolean;
}

/** Request to list customers */
export interface ListCustomersRequest {
  /**
   * Required. Parent resource
   * Format: `organizations/{organization}/locations/{location}`
   */
  parent: string;
  /**
   * The maximum number of Customers to return. The service may return fewer
   * than this value. If unspecified, at most 500 Customers will be returned.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListCustomers` call.
   * Provide this to retrieve the subsequent page.
   */
  pageToken: string;
  /** Optional. Filtering results */
  filter: string;
  /** Optional. Hint for how to order the results */
  orderBy: string;
}

/** Response message for list customer Customers requests */
export interface ListCustomersResponse {
  /** List of customers */
  customers: Customer[];
  /**
   * A token that can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message for getting a customer */
export interface GetCustomerRequest {
  /**
   * Required. Format:
   * `organizations/{organization}/locations/{location}/customers/{customer}`
   */
  name: string;
}

/** Container for customer onboarding steps */
export interface CustomerOnboardingState {
  /** List of customer onboarding steps */
  onboardingSteps: CustomerOnboardingStep[];
}

/** Container for customer onboarding information */
export interface CustomerOnboardingStep {
  /** The onboarding step */
  step: CustomerOnboardingStep_Step;
  /** The starting time of the onboarding step */
  startTime:
    | Date
    | undefined;
  /** The completion time of the onboarding step */
  completionTime:
    | Date
    | undefined;
  /** Output only. Current state of the step */
  completionState: CompletionState;
}

/** Enum for possible onboarding steps */
export enum CustomerOnboardingStep_Step {
  /** STEP_UNSPECIFIED - Unspecified step */
  STEP_UNSPECIFIED = 0,
  /** KAJ_ENROLLMENT - KAJ Enrollment */
  KAJ_ENROLLMENT = 1,
  /** CUSTOMER_ENVIRONMENT - Customer Environment */
  CUSTOMER_ENVIRONMENT = 2,
  UNRECOGNIZED = -1,
}

export function customerOnboardingStep_StepFromJSON(object: any): CustomerOnboardingStep_Step {
  switch (object) {
    case 0:
    case "STEP_UNSPECIFIED":
      return CustomerOnboardingStep_Step.STEP_UNSPECIFIED;
    case 1:
    case "KAJ_ENROLLMENT":
      return CustomerOnboardingStep_Step.KAJ_ENROLLMENT;
    case 2:
    case "CUSTOMER_ENVIRONMENT":
      return CustomerOnboardingStep_Step.CUSTOMER_ENVIRONMENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CustomerOnboardingStep_Step.UNRECOGNIZED;
  }
}

export function customerOnboardingStep_StepToJSON(object: CustomerOnboardingStep_Step): string {
  switch (object) {
    case CustomerOnboardingStep_Step.STEP_UNSPECIFIED:
      return "STEP_UNSPECIFIED";
    case CustomerOnboardingStep_Step.KAJ_ENROLLMENT:
      return "KAJ_ENROLLMENT";
    case CustomerOnboardingStep_Step.CUSTOMER_ENVIRONMENT:
      return "CUSTOMER_ENVIRONMENT";
    case CustomerOnboardingStep_Step.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCustomer(): Customer {
  return { name: "", displayName: "", customerOnboardingState: undefined, isOnboarded: false };
}

export const Customer: MessageFns<Customer> = {
  encode(message: Customer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.customerOnboardingState !== undefined) {
      CustomerOnboardingState.encode(message.customerOnboardingState, writer.uint32(26).fork()).join();
    }
    if (message.isOnboarded !== false) {
      writer.uint32(32).bool(message.isOnboarded);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Customer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.customerOnboardingState = CustomerOnboardingState.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isOnboarded = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Customer {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      customerOnboardingState: isSet(object.customerOnboardingState)
        ? CustomerOnboardingState.fromJSON(object.customerOnboardingState)
        : undefined,
      isOnboarded: isSet(object.isOnboarded) ? globalThis.Boolean(object.isOnboarded) : false,
    };
  },

  toJSON(message: Customer): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.customerOnboardingState !== undefined) {
      obj.customerOnboardingState = CustomerOnboardingState.toJSON(message.customerOnboardingState);
    }
    if (message.isOnboarded !== false) {
      obj.isOnboarded = message.isOnboarded;
    }
    return obj;
  },

  create(base?: DeepPartial<Customer>): Customer {
    return Customer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Customer>): Customer {
    const message = createBaseCustomer();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.customerOnboardingState =
      (object.customerOnboardingState !== undefined && object.customerOnboardingState !== null)
        ? CustomerOnboardingState.fromPartial(object.customerOnboardingState)
        : undefined;
    message.isOnboarded = object.isOnboarded ?? false;
    return message;
  },
};

function createBaseListCustomersRequest(): ListCustomersRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListCustomersRequest: MessageFns<ListCustomersRequest> = {
  encode(message: ListCustomersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListCustomersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomersRequest>): ListCustomersRequest {
    return ListCustomersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomersRequest>): ListCustomersRequest {
    const message = createBaseListCustomersRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListCustomersResponse(): ListCustomersResponse {
  return { customers: [], nextPageToken: "", unreachable: [] };
}

export const ListCustomersResponse: MessageFns<ListCustomersResponse> = {
  encode(message: ListCustomersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.customers) {
      Customer.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customers.push(Customer.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomersResponse {
    return {
      customers: globalThis.Array.isArray(object?.customers)
        ? object.customers.map((e: any) => Customer.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListCustomersResponse): unknown {
    const obj: any = {};
    if (message.customers?.length) {
      obj.customers = message.customers.map((e) => Customer.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomersResponse>): ListCustomersResponse {
    return ListCustomersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomersResponse>): ListCustomersResponse {
    const message = createBaseListCustomersResponse();
    message.customers = object.customers?.map((e) => Customer.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetCustomerRequest(): GetCustomerRequest {
  return { name: "" };
}

export const GetCustomerRequest: MessageFns<GetCustomerRequest> = {
  encode(message: GetCustomerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomerRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCustomerRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomerRequest>): GetCustomerRequest {
    return GetCustomerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomerRequest>): GetCustomerRequest {
    const message = createBaseGetCustomerRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCustomerOnboardingState(): CustomerOnboardingState {
  return { onboardingSteps: [] };
}

export const CustomerOnboardingState: MessageFns<CustomerOnboardingState> = {
  encode(message: CustomerOnboardingState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.onboardingSteps) {
      CustomerOnboardingStep.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerOnboardingState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerOnboardingState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.onboardingSteps.push(CustomerOnboardingStep.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerOnboardingState {
    return {
      onboardingSteps: globalThis.Array.isArray(object?.onboardingSteps)
        ? object.onboardingSteps.map((e: any) => CustomerOnboardingStep.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CustomerOnboardingState): unknown {
    const obj: any = {};
    if (message.onboardingSteps?.length) {
      obj.onboardingSteps = message.onboardingSteps.map((e) => CustomerOnboardingStep.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerOnboardingState>): CustomerOnboardingState {
    return CustomerOnboardingState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerOnboardingState>): CustomerOnboardingState {
    const message = createBaseCustomerOnboardingState();
    message.onboardingSteps = object.onboardingSteps?.map((e) => CustomerOnboardingStep.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCustomerOnboardingStep(): CustomerOnboardingStep {
  return { step: 0, startTime: undefined, completionTime: undefined, completionState: 0 };
}

export const CustomerOnboardingStep: MessageFns<CustomerOnboardingStep> = {
  encode(message: CustomerOnboardingStep, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.step !== 0) {
      writer.uint32(8).int32(message.step);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(18).fork()).join();
    }
    if (message.completionTime !== undefined) {
      Timestamp.encode(toTimestamp(message.completionTime), writer.uint32(26).fork()).join();
    }
    if (message.completionState !== 0) {
      writer.uint32(32).int32(message.completionState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerOnboardingStep {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerOnboardingStep();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.step = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.completionTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.completionState = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerOnboardingStep {
    return {
      step: isSet(object.step) ? customerOnboardingStep_StepFromJSON(object.step) : 0,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      completionTime: isSet(object.completionTime) ? fromJsonTimestamp(object.completionTime) : undefined,
      completionState: isSet(object.completionState) ? completionStateFromJSON(object.completionState) : 0,
    };
  },

  toJSON(message: CustomerOnboardingStep): unknown {
    const obj: any = {};
    if (message.step !== 0) {
      obj.step = customerOnboardingStep_StepToJSON(message.step);
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.completionTime !== undefined) {
      obj.completionTime = message.completionTime.toISOString();
    }
    if (message.completionState !== 0) {
      obj.completionState = completionStateToJSON(message.completionState);
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerOnboardingStep>): CustomerOnboardingStep {
    return CustomerOnboardingStep.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerOnboardingStep>): CustomerOnboardingStep {
    const message = createBaseCustomerOnboardingStep();
    message.step = object.step ?? 0;
    message.startTime = object.startTime ?? undefined;
    message.completionTime = object.completionTime ?? undefined;
    message.completionState = object.completionState ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
