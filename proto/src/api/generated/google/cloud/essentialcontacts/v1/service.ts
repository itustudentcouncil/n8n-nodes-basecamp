// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/essentialcontacts/v1/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  NotificationCategory,
  notificationCategoryFromJSON,
  notificationCategoryToJSON,
  ValidationState,
  validationStateFromJSON,
  validationStateToJSON,
} from "./enums.js";

export const protobufPackage = "google.cloud.essentialcontacts.v1";

/** A contact that will receive notifications from Google Cloud. */
export interface Contact {
  /**
   * Output only. The identifier for the contact.
   * Format: {resource_type}/{resource_id}/contacts/{contact_id}
   */
  name: string;
  /**
   * Required. The email address to send notifications to. The email address
   * does not need to be a Google Account.
   */
  email: string;
  /**
   * Required. The categories of notifications that the contact will receive
   * communications for.
   */
  notificationCategorySubscriptions: NotificationCategory[];
  /**
   * Required. The preferred language for notifications, as a ISO 639-1 language
   * code. See [Supported
   * languages](https://cloud.google.com/resource-manager/docs/managing-notification-contacts#supported-languages)
   * for a list of supported languages.
   */
  languageTag: string;
  /**
   * The validity of the contact. A contact is considered valid if it is the
   * correct recipient for notifications for a particular resource.
   */
  validationState: ValidationState;
  /**
   * The last time the validation_state was updated, either manually or
   * automatically. A contact is considered stale if its validation state was
   * updated more than 1 year ago.
   */
  validateTime: Date | undefined;
}

/** Request message for the ListContacts method. */
export interface ListContactsRequest {
  /**
   * Required. The parent resource name.
   * Format: organizations/{organization_id}, folders/{folder_id} or
   * projects/{project_id}
   */
  parent: string;
  /**
   * Optional. The maximum number of results to return from this request.
   * Non-positive values are ignored. The presence of `next_page_token` in the
   * response indicates that more results might be available.
   * If not specified, the default page_size is 100.
   */
  pageSize: number;
  /**
   * Optional. If present, retrieves the next batch of results from the
   * preceding call to this method. `page_token` must be the value of
   * `next_page_token` from the previous response. The values of other method
   * parameters should be identical to those in the previous call.
   */
  pageToken: string;
}

/** Response message for the ListContacts method. */
export interface ListContactsResponse {
  /** The contacts for the specified resource. */
  contacts: Contact[];
  /**
   * If there are more results than those appearing in this response, then
   * `next_page_token` is included. To get the next set of results, call this
   * method again using the value of `next_page_token` as `page_token` and the
   * rest of the parameters the same as the original request.
   */
  nextPageToken: string;
}

/** Request message for the GetContact method. */
export interface GetContactRequest {
  /**
   * Required. The name of the contact to retrieve.
   * Format: organizations/{organization_id}/contacts/{contact_id},
   * folders/{folder_id}/contacts/{contact_id} or
   * projects/{project_id}/contacts/{contact_id}
   */
  name: string;
}

/** Request message for the DeleteContact method. */
export interface DeleteContactRequest {
  /**
   * Required. The name of the contact to delete.
   * Format: organizations/{organization_id}/contacts/{contact_id},
   * folders/{folder_id}/contacts/{contact_id} or
   * projects/{project_id}/contacts/{contact_id}
   */
  name: string;
}

/** Request message for the CreateContact method. */
export interface CreateContactRequest {
  /**
   * Required. The resource to save this contact for.
   * Format: organizations/{organization_id}, folders/{folder_id} or
   * projects/{project_id}
   */
  parent: string;
  /**
   * Required. The contact to create. Must specify an email address and language
   * tag.
   */
  contact: Contact | undefined;
}

/** Request message for the UpdateContact method. */
export interface UpdateContactRequest {
  /**
   * Required. The contact resource to replace the existing saved contact. Note:
   * the email address of the contact cannot be modified.
   */
  contact:
    | Contact
    | undefined;
  /**
   * Optional. The update mask applied to the resource. For the `FieldMask`
   * definition, see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   */
  updateMask: string[] | undefined;
}

/** Request message for the ComputeContacts method. */
export interface ComputeContactsRequest {
  /**
   * Required. The name of the resource to compute contacts for.
   * Format: organizations/{organization_id},
   * folders/{folder_id} or projects/{project_id}
   */
  parent: string;
  /**
   * The categories of notifications to compute contacts for. If ALL is included
   * in this list, contacts subscribed to any notification category will be
   * returned.
   */
  notificationCategories: NotificationCategory[];
  /**
   * Optional. The maximum number of results to return from this request.
   * Non-positive values are ignored. The presence of `next_page_token` in the
   * response indicates that more results might be available.
   * If not specified, the default page_size is 100.
   */
  pageSize: number;
  /**
   * Optional. If present, retrieves the next batch of results from the
   * preceding call to this method. `page_token` must be the value of
   * `next_page_token` from the previous response. The values of other method
   * parameters should be identical to those in the previous call.
   */
  pageToken: string;
}

/** Response message for the ComputeContacts method. */
export interface ComputeContactsResponse {
  /**
   * All contacts for the resource that are subscribed to the specified
   * notification categories, including contacts inherited from any parent
   * resources.
   */
  contacts: Contact[];
  /**
   * If there are more results than those appearing in this response, then
   * `next_page_token` is included. To get the next set of results, call this
   * method again using the value of `next_page_token` as `page_token` and the
   * rest of the parameters the same as the original request.
   */
  nextPageToken: string;
}

/** Request message for the SendTestMessage method. */
export interface SendTestMessageRequest {
  /**
   * Required. The list of names of the contacts to send a test message to.
   * Format: organizations/{organization_id}/contacts/{contact_id},
   * folders/{folder_id}/contacts/{contact_id} or
   * projects/{project_id}/contacts/{contact_id}
   */
  contacts: string[];
  /**
   * Required. The name of the resource to send the test message for. All
   * contacts must either be set directly on this resource or inherited from
   * another resource that is an ancestor of this one. Format:
   * organizations/{organization_id}, folders/{folder_id} or
   * projects/{project_id}
   */
  resource: string;
  /**
   * Required. The notification category to send the test message for. All
   * contacts must be subscribed to this category.
   */
  notificationCategory: NotificationCategory;
}

function createBaseContact(): Contact {
  return {
    name: "",
    email: "",
    notificationCategorySubscriptions: [],
    languageTag: "",
    validationState: 0,
    validateTime: undefined,
  };
}

export const Contact: MessageFns<Contact> = {
  encode(message: Contact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    writer.uint32(26).fork();
    for (const v of message.notificationCategorySubscriptions) {
      writer.int32(v);
    }
    writer.join();
    if (message.languageTag !== "") {
      writer.uint32(34).string(message.languageTag);
    }
    if (message.validationState !== 0) {
      writer.uint32(64).int32(message.validationState);
    }
    if (message.validateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.validateTime), writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Contact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        case 3:
          if (tag === 24) {
            message.notificationCategorySubscriptions.push(reader.int32() as any);

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.notificationCategorySubscriptions.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.languageTag = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.validationState = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.validateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Contact {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      notificationCategorySubscriptions: globalThis.Array.isArray(object?.notificationCategorySubscriptions)
        ? object.notificationCategorySubscriptions.map((e: any) => notificationCategoryFromJSON(e))
        : [],
      languageTag: isSet(object.languageTag) ? globalThis.String(object.languageTag) : "",
      validationState: isSet(object.validationState) ? validationStateFromJSON(object.validationState) : 0,
      validateTime: isSet(object.validateTime) ? fromJsonTimestamp(object.validateTime) : undefined,
    };
  },

  toJSON(message: Contact): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.notificationCategorySubscriptions?.length) {
      obj.notificationCategorySubscriptions = message.notificationCategorySubscriptions.map((e) =>
        notificationCategoryToJSON(e)
      );
    }
    if (message.languageTag !== "") {
      obj.languageTag = message.languageTag;
    }
    if (message.validationState !== 0) {
      obj.validationState = validationStateToJSON(message.validationState);
    }
    if (message.validateTime !== undefined) {
      obj.validateTime = message.validateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Contact>): Contact {
    return Contact.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Contact>): Contact {
    const message = createBaseContact();
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.notificationCategorySubscriptions = object.notificationCategorySubscriptions?.map((e) => e) || [];
    message.languageTag = object.languageTag ?? "";
    message.validationState = object.validationState ?? 0;
    message.validateTime = object.validateTime ?? undefined;
    return message;
  },
};

function createBaseListContactsRequest(): ListContactsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListContactsRequest: MessageFns<ListContactsRequest> = {
  encode(message: ListContactsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListContactsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListContactsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListContactsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListContactsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListContactsRequest>): ListContactsRequest {
    return ListContactsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListContactsRequest>): ListContactsRequest {
    const message = createBaseListContactsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListContactsResponse(): ListContactsResponse {
  return { contacts: [], nextPageToken: "" };
}

export const ListContactsResponse: MessageFns<ListContactsResponse> = {
  encode(message: ListContactsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.contacts) {
      Contact.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListContactsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListContactsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contacts.push(Contact.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListContactsResponse {
    return {
      contacts: globalThis.Array.isArray(object?.contacts) ? object.contacts.map((e: any) => Contact.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListContactsResponse): unknown {
    const obj: any = {};
    if (message.contacts?.length) {
      obj.contacts = message.contacts.map((e) => Contact.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListContactsResponse>): ListContactsResponse {
    return ListContactsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListContactsResponse>): ListContactsResponse {
    const message = createBaseListContactsResponse();
    message.contacts = object.contacts?.map((e) => Contact.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetContactRequest(): GetContactRequest {
  return { name: "" };
}

export const GetContactRequest: MessageFns<GetContactRequest> = {
  encode(message: GetContactRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetContactRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetContactRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetContactRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetContactRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetContactRequest>): GetContactRequest {
    return GetContactRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetContactRequest>): GetContactRequest {
    const message = createBaseGetContactRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteContactRequest(): DeleteContactRequest {
  return { name: "" };
}

export const DeleteContactRequest: MessageFns<DeleteContactRequest> = {
  encode(message: DeleteContactRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteContactRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteContactRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteContactRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteContactRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteContactRequest>): DeleteContactRequest {
    return DeleteContactRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteContactRequest>): DeleteContactRequest {
    const message = createBaseDeleteContactRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateContactRequest(): CreateContactRequest {
  return { parent: "", contact: undefined };
}

export const CreateContactRequest: MessageFns<CreateContactRequest> = {
  encode(message: CreateContactRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.contact !== undefined) {
      Contact.encode(message.contact, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateContactRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateContactRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contact = Contact.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateContactRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      contact: isSet(object.contact) ? Contact.fromJSON(object.contact) : undefined,
    };
  },

  toJSON(message: CreateContactRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.contact !== undefined) {
      obj.contact = Contact.toJSON(message.contact);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateContactRequest>): CreateContactRequest {
    return CreateContactRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateContactRequest>): CreateContactRequest {
    const message = createBaseCreateContactRequest();
    message.parent = object.parent ?? "";
    message.contact = (object.contact !== undefined && object.contact !== null)
      ? Contact.fromPartial(object.contact)
      : undefined;
    return message;
  },
};

function createBaseUpdateContactRequest(): UpdateContactRequest {
  return { contact: undefined, updateMask: undefined };
}

export const UpdateContactRequest: MessageFns<UpdateContactRequest> = {
  encode(message: UpdateContactRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contact !== undefined) {
      Contact.encode(message.contact, writer.uint32(18).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateContactRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateContactRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contact = Contact.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateContactRequest {
    return {
      contact: isSet(object.contact) ? Contact.fromJSON(object.contact) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateContactRequest): unknown {
    const obj: any = {};
    if (message.contact !== undefined) {
      obj.contact = Contact.toJSON(message.contact);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateContactRequest>): UpdateContactRequest {
    return UpdateContactRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateContactRequest>): UpdateContactRequest {
    const message = createBaseUpdateContactRequest();
    message.contact = (object.contact !== undefined && object.contact !== null)
      ? Contact.fromPartial(object.contact)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseComputeContactsRequest(): ComputeContactsRequest {
  return { parent: "", notificationCategories: [], pageSize: 0, pageToken: "" };
}

export const ComputeContactsRequest: MessageFns<ComputeContactsRequest> = {
  encode(message: ComputeContactsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    writer.uint32(50).fork();
    for (const v of message.notificationCategories) {
      writer.int32(v);
    }
    writer.join();
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ComputeContactsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComputeContactsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 6:
          if (tag === 48) {
            message.notificationCategories.push(reader.int32() as any);

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.notificationCategories.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ComputeContactsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      notificationCategories: globalThis.Array.isArray(object?.notificationCategories)
        ? object.notificationCategories.map((e: any) => notificationCategoryFromJSON(e))
        : [],
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ComputeContactsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.notificationCategories?.length) {
      obj.notificationCategories = message.notificationCategories.map((e) => notificationCategoryToJSON(e));
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ComputeContactsRequest>): ComputeContactsRequest {
    return ComputeContactsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ComputeContactsRequest>): ComputeContactsRequest {
    const message = createBaseComputeContactsRequest();
    message.parent = object.parent ?? "";
    message.notificationCategories = object.notificationCategories?.map((e) => e) || [];
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseComputeContactsResponse(): ComputeContactsResponse {
  return { contacts: [], nextPageToken: "" };
}

export const ComputeContactsResponse: MessageFns<ComputeContactsResponse> = {
  encode(message: ComputeContactsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.contacts) {
      Contact.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ComputeContactsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComputeContactsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contacts.push(Contact.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ComputeContactsResponse {
    return {
      contacts: globalThis.Array.isArray(object?.contacts) ? object.contacts.map((e: any) => Contact.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ComputeContactsResponse): unknown {
    const obj: any = {};
    if (message.contacts?.length) {
      obj.contacts = message.contacts.map((e) => Contact.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ComputeContactsResponse>): ComputeContactsResponse {
    return ComputeContactsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ComputeContactsResponse>): ComputeContactsResponse {
    const message = createBaseComputeContactsResponse();
    message.contacts = object.contacts?.map((e) => Contact.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseSendTestMessageRequest(): SendTestMessageRequest {
  return { contacts: [], resource: "", notificationCategory: 0 };
}

export const SendTestMessageRequest: MessageFns<SendTestMessageRequest> = {
  encode(message: SendTestMessageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.contacts) {
      writer.uint32(10).string(v!);
    }
    if (message.resource !== "") {
      writer.uint32(18).string(message.resource);
    }
    if (message.notificationCategory !== 0) {
      writer.uint32(24).int32(message.notificationCategory);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendTestMessageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendTestMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contacts.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resource = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.notificationCategory = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendTestMessageRequest {
    return {
      contacts: globalThis.Array.isArray(object?.contacts) ? object.contacts.map((e: any) => globalThis.String(e)) : [],
      resource: isSet(object.resource) ? globalThis.String(object.resource) : "",
      notificationCategory: isSet(object.notificationCategory)
        ? notificationCategoryFromJSON(object.notificationCategory)
        : 0,
    };
  },

  toJSON(message: SendTestMessageRequest): unknown {
    const obj: any = {};
    if (message.contacts?.length) {
      obj.contacts = message.contacts;
    }
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    if (message.notificationCategory !== 0) {
      obj.notificationCategory = notificationCategoryToJSON(message.notificationCategory);
    }
    return obj;
  },

  create(base?: DeepPartial<SendTestMessageRequest>): SendTestMessageRequest {
    return SendTestMessageRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendTestMessageRequest>): SendTestMessageRequest {
    const message = createBaseSendTestMessageRequest();
    message.contacts = object.contacts?.map((e) => e) || [];
    message.resource = object.resource ?? "";
    message.notificationCategory = object.notificationCategory ?? 0;
    return message;
  },
};

/** Manages contacts for important Google Cloud notifications. */
export type EssentialContactsServiceDefinition = typeof EssentialContactsServiceDefinition;
export const EssentialContactsServiceDefinition = {
  name: "EssentialContactsService",
  fullName: "google.cloud.essentialcontacts.v1.EssentialContactsService",
  methods: {
    /** Adds a new contact for a resource. */
    createContact: {
      name: "CreateContact",
      requestType: CreateContactRequest,
      requestStream: false,
      responseType: Contact,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 99, 111, 110, 116, 97, 99, 116])],
          578365826: [
            Buffer.from([
              137,
              1,
              58,
              7,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              90,
              42,
              58,
              7,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              34,
              31,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              90,
              48,
              58,
              7,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              34,
              37,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              34,
              32,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a contact.
     * Note: A contact's email address cannot be changed.
     */
    updateContact: {
      name: "UpdateContact",
      requestType: UpdateContactRequest,
      requestStream: false,
      responseType: Contact,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 99, 111, 110, 116, 97, 99, 116, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              161,
              1,
              58,
              7,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              90,
              50,
              58,
              7,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              50,
              39,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              90,
              56,
              58,
              7,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              50,
              45,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              50,
              40,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists the contacts that have been set on a resource. */
    listContacts: {
      name: "ListContacts",
      requestType: ListContactsRequest,
      requestStream: false,
      responseType: ListContactsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              110,
              90,
              33,
              18,
              31,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              90,
              39,
              18,
              37,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              18,
              32,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a single contact. */
    getContact: {
      name: "GetContact",
      requestType: GetContactRequest,
      requestStream: false,
      responseType: Contact,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              110,
              90,
              33,
              18,
              31,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              90,
              39,
              18,
              37,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              18,
              32,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a contact. */
    deleteContact: {
      name: "DeleteContact",
      requestType: DeleteContactRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              110,
              90,
              33,
              42,
              31,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              90,
              39,
              42,
              37,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              42,
              32,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all contacts for the resource that are subscribed to the
     * specified notification categories, including contacts inherited from
     * any parent resources.
     */
    computeContacts: {
      name: "ComputeContacts",
      requestType: ComputeContactsRequest,
      requestStream: false,
      responseType: ComputeContactsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              134,
              1,
              90,
              41,
              18,
              39,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              58,
              99,
              111,
              109,
              112,
              117,
              116,
              101,
              90,
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              58,
              99,
              111,
              109,
              112,
              117,
              116,
              101,
              18,
              40,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              58,
              99,
              111,
              109,
              112,
              117,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Allows a contact admin to send a test message to contact to verify that it
     * has been configured correctly.
     */
    sendTestMessage: {
      name: "SendTestMessage",
      requestType: SendTestMessageRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              173,
              1,
              58,
              1,
              42,
              90,
              54,
              58,
              1,
              42,
              34,
              49,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              58,
              115,
              101,
              110,
              100,
              84,
              101,
              115,
              116,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              90,
              60,
              58,
              1,
              42,
              34,
              55,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              58,
              115,
              101,
              110,
              100,
              84,
              101,
              115,
              116,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              50,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              97,
              99,
              116,
              115,
              58,
              115,
              101,
              110,
              100,
              84,
              101,
              115,
              116,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface EssentialContactsServiceImplementation<CallContextExt = {}> {
  /** Adds a new contact for a resource. */
  createContact(request: CreateContactRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Contact>>;
  /**
   * Updates a contact.
   * Note: A contact's email address cannot be changed.
   */
  updateContact(request: UpdateContactRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Contact>>;
  /** Lists the contacts that have been set on a resource. */
  listContacts(
    request: ListContactsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListContactsResponse>>;
  /** Gets a single contact. */
  getContact(request: GetContactRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Contact>>;
  /** Deletes a contact. */
  deleteContact(request: DeleteContactRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Lists all contacts for the resource that are subscribed to the
   * specified notification categories, including contacts inherited from
   * any parent resources.
   */
  computeContacts(
    request: ComputeContactsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ComputeContactsResponse>>;
  /**
   * Allows a contact admin to send a test message to contact to verify that it
   * has been configured correctly.
   */
  sendTestMessage(request: SendTestMessageRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface EssentialContactsServiceClient<CallOptionsExt = {}> {
  /** Adds a new contact for a resource. */
  createContact(request: DeepPartial<CreateContactRequest>, options?: CallOptions & CallOptionsExt): Promise<Contact>;
  /**
   * Updates a contact.
   * Note: A contact's email address cannot be changed.
   */
  updateContact(request: DeepPartial<UpdateContactRequest>, options?: CallOptions & CallOptionsExt): Promise<Contact>;
  /** Lists the contacts that have been set on a resource. */
  listContacts(
    request: DeepPartial<ListContactsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListContactsResponse>;
  /** Gets a single contact. */
  getContact(request: DeepPartial<GetContactRequest>, options?: CallOptions & CallOptionsExt): Promise<Contact>;
  /** Deletes a contact. */
  deleteContact(request: DeepPartial<DeleteContactRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Lists all contacts for the resource that are subscribed to the
   * specified notification categories, including contacts inherited from
   * any parent resources.
   */
  computeContacts(
    request: DeepPartial<ComputeContactsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ComputeContactsResponse>;
  /**
   * Allows a contact admin to send a test message to contact to verify that it
   * has been configured correctly.
   */
  sendTestMessage(request: DeepPartial<SendTestMessageRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
