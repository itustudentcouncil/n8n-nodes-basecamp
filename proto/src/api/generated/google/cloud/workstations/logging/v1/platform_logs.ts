// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/workstations/logging/v1/platform_logs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.workstations.logging.v1";

/**
 * JSON payload for the Cloud Logging event:
 * `workstations.googleapis.com%2Fworkstation_events`
 */
export interface WorkstationEvent {
  /** Vm assignment event. */
  vmAssignmentEvent?:
    | VmAssignmentEvent
    | undefined;
  /** Disk assignment event. */
  diskAssignmentEvent?: DiskAssignmentEvent | undefined;
}

/** Vm assignment event. */
export interface VmAssignmentEvent {
  /** Name of the VM assigned to this workstation. */
  vm: string;
}

/** Disk assignment event. */
export interface DiskAssignmentEvent {
  /** Name of the disk assigned to this workstation. */
  disk: string;
}

function createBaseWorkstationEvent(): WorkstationEvent {
  return { vmAssignmentEvent: undefined, diskAssignmentEvent: undefined };
}

export const WorkstationEvent: MessageFns<WorkstationEvent> = {
  encode(message: WorkstationEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vmAssignmentEvent !== undefined) {
      VmAssignmentEvent.encode(message.vmAssignmentEvent, writer.uint32(10).fork()).join();
    }
    if (message.diskAssignmentEvent !== undefined) {
      DiskAssignmentEvent.encode(message.diskAssignmentEvent, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkstationEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkstationEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.vmAssignmentEvent = VmAssignmentEvent.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.diskAssignmentEvent = DiskAssignmentEvent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkstationEvent {
    return {
      vmAssignmentEvent: isSet(object.vmAssignmentEvent)
        ? VmAssignmentEvent.fromJSON(object.vmAssignmentEvent)
        : undefined,
      diskAssignmentEvent: isSet(object.diskAssignmentEvent)
        ? DiskAssignmentEvent.fromJSON(object.diskAssignmentEvent)
        : undefined,
    };
  },

  toJSON(message: WorkstationEvent): unknown {
    const obj: any = {};
    if (message.vmAssignmentEvent !== undefined) {
      obj.vmAssignmentEvent = VmAssignmentEvent.toJSON(message.vmAssignmentEvent);
    }
    if (message.diskAssignmentEvent !== undefined) {
      obj.diskAssignmentEvent = DiskAssignmentEvent.toJSON(message.diskAssignmentEvent);
    }
    return obj;
  },

  create(base?: DeepPartial<WorkstationEvent>): WorkstationEvent {
    return WorkstationEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkstationEvent>): WorkstationEvent {
    const message = createBaseWorkstationEvent();
    message.vmAssignmentEvent = (object.vmAssignmentEvent !== undefined && object.vmAssignmentEvent !== null)
      ? VmAssignmentEvent.fromPartial(object.vmAssignmentEvent)
      : undefined;
    message.diskAssignmentEvent = (object.diskAssignmentEvent !== undefined && object.diskAssignmentEvent !== null)
      ? DiskAssignmentEvent.fromPartial(object.diskAssignmentEvent)
      : undefined;
    return message;
  },
};

function createBaseVmAssignmentEvent(): VmAssignmentEvent {
  return { vm: "" };
}

export const VmAssignmentEvent: MessageFns<VmAssignmentEvent> = {
  encode(message: VmAssignmentEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vm !== "") {
      writer.uint32(10).string(message.vm);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VmAssignmentEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVmAssignmentEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.vm = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VmAssignmentEvent {
    return { vm: isSet(object.vm) ? globalThis.String(object.vm) : "" };
  },

  toJSON(message: VmAssignmentEvent): unknown {
    const obj: any = {};
    if (message.vm !== "") {
      obj.vm = message.vm;
    }
    return obj;
  },

  create(base?: DeepPartial<VmAssignmentEvent>): VmAssignmentEvent {
    return VmAssignmentEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VmAssignmentEvent>): VmAssignmentEvent {
    const message = createBaseVmAssignmentEvent();
    message.vm = object.vm ?? "";
    return message;
  },
};

function createBaseDiskAssignmentEvent(): DiskAssignmentEvent {
  return { disk: "" };
}

export const DiskAssignmentEvent: MessageFns<DiskAssignmentEvent> = {
  encode(message: DiskAssignmentEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.disk !== "") {
      writer.uint32(10).string(message.disk);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiskAssignmentEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiskAssignmentEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.disk = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiskAssignmentEvent {
    return { disk: isSet(object.disk) ? globalThis.String(object.disk) : "" };
  },

  toJSON(message: DiskAssignmentEvent): unknown {
    const obj: any = {};
    if (message.disk !== "") {
      obj.disk = message.disk;
    }
    return obj;
  },

  create(base?: DeepPartial<DiskAssignmentEvent>): DiskAssignmentEvent {
    return DiskAssignmentEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DiskAssignmentEvent>): DiskAssignmentEvent {
    const message = createBaseDiskAssignmentEvent();
    message.disk = object.disk ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
