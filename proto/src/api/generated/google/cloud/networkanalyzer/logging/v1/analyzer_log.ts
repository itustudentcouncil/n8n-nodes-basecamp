// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/networkanalyzer/logging/v1/analyzer_log.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.networkanalyzer.logging.v1";

export enum ReportCauseCode {
  REPORT_CAUSE_CODE_UNSPECIFIED = 0,
  /** ROUTE_INVALID_NEXT_HOP_VM_IP_FORWARDING_DISABLED - VPC Basics */
  ROUTE_INVALID_NEXT_HOP_VM_IP_FORWARDING_DISABLED = 1,
  ROUTE_INVALID_NEXT_HOP_VM_DELETED = 2,
  ROUTE_INVALID_NEXT_HOP_VM_STOPPED = 3,
  ROUTE_INVALID_NEXT_HOP_ILB_MISCONFIGURED = 4,
  ROUTE_INVALID_NEXT_HOP_VPN_TUNNEL_DELETED = 5,
  ROUTE_INVALID_NEXT_HOP_ILB_BACKEND_IP_FORWARDING_DISABLED = 6,
  ROUTE_INVALID_NEXT_HOP_ILB_VIP_NOT_ASSIGNED = 7,
  IP_UTILIZATION_IP_ALLOCATION_RATIO_HIGH = 20,
  /** IP_UTILIZATION_IP_ALLOCATION_SUMMARY - Summary of ip utilization of all subnet ranges in the project. */
  IP_UTILIZATION_IP_ALLOCATION_SUMMARY = 21,
  /** GKE_NODE_TO_CONTROL_PLANE_BLOCKED_BY_ROUTING_ISSUE - Kubernetes Engine */
  GKE_NODE_TO_CONTROL_PLANE_BLOCKED_BY_ROUTING_ISSUE = 201,
  GKE_NODE_TO_CONTROL_PLANE_PUBLIC_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL = 202,
  GKE_NODE_TO_CONTROL_PLANE_PRIVATE_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL = 203,
  GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_ROUTING_ISSUE = 211,
  GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_INGRESS_FIREWALL_ON_NODE = 212,
  GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_HIGH = 221,
  GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_LIMITES_AUTOSCALING = 222,
  GKE_NODE_SERVICE_ACCOUNT_SERVICE_ACCOUNT_DISABLED = 243,
  GKE_NODE_SERVICE_ACCOUNT_DEFAULT_SERVICE_ACCOUNT_USED = 244,
  GKE_NODE_SERVICE_ACCOUNT_BAD_OAUTH_SCOPES = 245,
  /** CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_EGRESS_FIREWALL - Managed Services */
  CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_EGRESS_FIREWALL = 601,
  CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_ROUTING_ISSUE = 602,
  CLOUD_SQL_PRIVATE_IP_INSTANCE_NOT_RUNNING = 603,
  /** DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_SUBNET_ROUTE - Hybrid Connectivity */
  DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_SUBNET_ROUTE = 801,
  DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_SUBNET_ROUTE = 802,
  DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_STATIC_ROUTE = 803,
  DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_STATIC_ROUTE = 804,
  DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_SUBNET_ROUTE = 805,
  DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_SUBNET_ROUTE = 806,
  DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_STATIC_ROUTE = 807,
  DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_STATIC_ROUTE = 808,
  /** LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_FIREWALL_NOT_CONFIGURED - Network Services */
  LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_FIREWALL_NOT_CONFIGURED = 1001,
  LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_BLOCKED = 1002,
  LOAD_BALANCER_HEALTH_CHECK_FIREWALL_FIREWALL_CONFIG_INCONSISTENT = 1003,
  LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_PARTIALLY_BLOCKED = 1004,
  LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_BALANCING_MODE_BREAKS_SESSION_AFFINITY = 1021,
  LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_HEALTH_CHECK_PORT_MISMATCH = 1024,
  UNRECOGNIZED = -1,
}

export function reportCauseCodeFromJSON(object: any): ReportCauseCode {
  switch (object) {
    case 0:
    case "REPORT_CAUSE_CODE_UNSPECIFIED":
      return ReportCauseCode.REPORT_CAUSE_CODE_UNSPECIFIED;
    case 1:
    case "ROUTE_INVALID_NEXT_HOP_VM_IP_FORWARDING_DISABLED":
      return ReportCauseCode.ROUTE_INVALID_NEXT_HOP_VM_IP_FORWARDING_DISABLED;
    case 2:
    case "ROUTE_INVALID_NEXT_HOP_VM_DELETED":
      return ReportCauseCode.ROUTE_INVALID_NEXT_HOP_VM_DELETED;
    case 3:
    case "ROUTE_INVALID_NEXT_HOP_VM_STOPPED":
      return ReportCauseCode.ROUTE_INVALID_NEXT_HOP_VM_STOPPED;
    case 4:
    case "ROUTE_INVALID_NEXT_HOP_ILB_MISCONFIGURED":
      return ReportCauseCode.ROUTE_INVALID_NEXT_HOP_ILB_MISCONFIGURED;
    case 5:
    case "ROUTE_INVALID_NEXT_HOP_VPN_TUNNEL_DELETED":
      return ReportCauseCode.ROUTE_INVALID_NEXT_HOP_VPN_TUNNEL_DELETED;
    case 6:
    case "ROUTE_INVALID_NEXT_HOP_ILB_BACKEND_IP_FORWARDING_DISABLED":
      return ReportCauseCode.ROUTE_INVALID_NEXT_HOP_ILB_BACKEND_IP_FORWARDING_DISABLED;
    case 7:
    case "ROUTE_INVALID_NEXT_HOP_ILB_VIP_NOT_ASSIGNED":
      return ReportCauseCode.ROUTE_INVALID_NEXT_HOP_ILB_VIP_NOT_ASSIGNED;
    case 20:
    case "IP_UTILIZATION_IP_ALLOCATION_RATIO_HIGH":
      return ReportCauseCode.IP_UTILIZATION_IP_ALLOCATION_RATIO_HIGH;
    case 21:
    case "IP_UTILIZATION_IP_ALLOCATION_SUMMARY":
      return ReportCauseCode.IP_UTILIZATION_IP_ALLOCATION_SUMMARY;
    case 201:
    case "GKE_NODE_TO_CONTROL_PLANE_BLOCKED_BY_ROUTING_ISSUE":
      return ReportCauseCode.GKE_NODE_TO_CONTROL_PLANE_BLOCKED_BY_ROUTING_ISSUE;
    case 202:
    case "GKE_NODE_TO_CONTROL_PLANE_PUBLIC_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL":
      return ReportCauseCode.GKE_NODE_TO_CONTROL_PLANE_PUBLIC_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL;
    case 203:
    case "GKE_NODE_TO_CONTROL_PLANE_PRIVATE_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL":
      return ReportCauseCode.GKE_NODE_TO_CONTROL_PLANE_PRIVATE_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL;
    case 211:
    case "GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_ROUTING_ISSUE":
      return ReportCauseCode.GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_ROUTING_ISSUE;
    case 212:
    case "GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_INGRESS_FIREWALL_ON_NODE":
      return ReportCauseCode.GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_INGRESS_FIREWALL_ON_NODE;
    case 221:
    case "GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_HIGH":
      return ReportCauseCode.GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_HIGH;
    case 222:
    case "GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_LIMITES_AUTOSCALING":
      return ReportCauseCode.GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_LIMITES_AUTOSCALING;
    case 243:
    case "GKE_NODE_SERVICE_ACCOUNT_SERVICE_ACCOUNT_DISABLED":
      return ReportCauseCode.GKE_NODE_SERVICE_ACCOUNT_SERVICE_ACCOUNT_DISABLED;
    case 244:
    case "GKE_NODE_SERVICE_ACCOUNT_DEFAULT_SERVICE_ACCOUNT_USED":
      return ReportCauseCode.GKE_NODE_SERVICE_ACCOUNT_DEFAULT_SERVICE_ACCOUNT_USED;
    case 245:
    case "GKE_NODE_SERVICE_ACCOUNT_BAD_OAUTH_SCOPES":
      return ReportCauseCode.GKE_NODE_SERVICE_ACCOUNT_BAD_OAUTH_SCOPES;
    case 601:
    case "CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_EGRESS_FIREWALL":
      return ReportCauseCode.CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_EGRESS_FIREWALL;
    case 602:
    case "CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_ROUTING_ISSUE":
      return ReportCauseCode.CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_ROUTING_ISSUE;
    case 603:
    case "CLOUD_SQL_PRIVATE_IP_INSTANCE_NOT_RUNNING":
      return ReportCauseCode.CLOUD_SQL_PRIVATE_IP_INSTANCE_NOT_RUNNING;
    case 801:
    case "DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_SUBNET_ROUTE":
      return ReportCauseCode.DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_SUBNET_ROUTE;
    case 802:
    case "DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_SUBNET_ROUTE":
      return ReportCauseCode.DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_SUBNET_ROUTE;
    case 803:
    case "DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_STATIC_ROUTE":
      return ReportCauseCode.DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_STATIC_ROUTE;
    case 804:
    case "DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_STATIC_ROUTE":
      return ReportCauseCode.DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_STATIC_ROUTE;
    case 805:
    case "DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_SUBNET_ROUTE":
      return ReportCauseCode.DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_SUBNET_ROUTE;
    case 806:
    case "DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_SUBNET_ROUTE":
      return ReportCauseCode.DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_SUBNET_ROUTE;
    case 807:
    case "DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_STATIC_ROUTE":
      return ReportCauseCode.DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_STATIC_ROUTE;
    case 808:
    case "DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_STATIC_ROUTE":
      return ReportCauseCode.DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_STATIC_ROUTE;
    case 1001:
    case "LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_FIREWALL_NOT_CONFIGURED":
      return ReportCauseCode.LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_FIREWALL_NOT_CONFIGURED;
    case 1002:
    case "LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_BLOCKED":
      return ReportCauseCode.LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_BLOCKED;
    case 1003:
    case "LOAD_BALANCER_HEALTH_CHECK_FIREWALL_FIREWALL_CONFIG_INCONSISTENT":
      return ReportCauseCode.LOAD_BALANCER_HEALTH_CHECK_FIREWALL_FIREWALL_CONFIG_INCONSISTENT;
    case 1004:
    case "LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_PARTIALLY_BLOCKED":
      return ReportCauseCode.LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_PARTIALLY_BLOCKED;
    case 1021:
    case "LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_BALANCING_MODE_BREAKS_SESSION_AFFINITY":
      return ReportCauseCode.LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_BALANCING_MODE_BREAKS_SESSION_AFFINITY;
    case 1024:
    case "LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_HEALTH_CHECK_PORT_MISMATCH":
      return ReportCauseCode.LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_HEALTH_CHECK_PORT_MISMATCH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ReportCauseCode.UNRECOGNIZED;
  }
}

export function reportCauseCodeToJSON(object: ReportCauseCode): string {
  switch (object) {
    case ReportCauseCode.REPORT_CAUSE_CODE_UNSPECIFIED:
      return "REPORT_CAUSE_CODE_UNSPECIFIED";
    case ReportCauseCode.ROUTE_INVALID_NEXT_HOP_VM_IP_FORWARDING_DISABLED:
      return "ROUTE_INVALID_NEXT_HOP_VM_IP_FORWARDING_DISABLED";
    case ReportCauseCode.ROUTE_INVALID_NEXT_HOP_VM_DELETED:
      return "ROUTE_INVALID_NEXT_HOP_VM_DELETED";
    case ReportCauseCode.ROUTE_INVALID_NEXT_HOP_VM_STOPPED:
      return "ROUTE_INVALID_NEXT_HOP_VM_STOPPED";
    case ReportCauseCode.ROUTE_INVALID_NEXT_HOP_ILB_MISCONFIGURED:
      return "ROUTE_INVALID_NEXT_HOP_ILB_MISCONFIGURED";
    case ReportCauseCode.ROUTE_INVALID_NEXT_HOP_VPN_TUNNEL_DELETED:
      return "ROUTE_INVALID_NEXT_HOP_VPN_TUNNEL_DELETED";
    case ReportCauseCode.ROUTE_INVALID_NEXT_HOP_ILB_BACKEND_IP_FORWARDING_DISABLED:
      return "ROUTE_INVALID_NEXT_HOP_ILB_BACKEND_IP_FORWARDING_DISABLED";
    case ReportCauseCode.ROUTE_INVALID_NEXT_HOP_ILB_VIP_NOT_ASSIGNED:
      return "ROUTE_INVALID_NEXT_HOP_ILB_VIP_NOT_ASSIGNED";
    case ReportCauseCode.IP_UTILIZATION_IP_ALLOCATION_RATIO_HIGH:
      return "IP_UTILIZATION_IP_ALLOCATION_RATIO_HIGH";
    case ReportCauseCode.IP_UTILIZATION_IP_ALLOCATION_SUMMARY:
      return "IP_UTILIZATION_IP_ALLOCATION_SUMMARY";
    case ReportCauseCode.GKE_NODE_TO_CONTROL_PLANE_BLOCKED_BY_ROUTING_ISSUE:
      return "GKE_NODE_TO_CONTROL_PLANE_BLOCKED_BY_ROUTING_ISSUE";
    case ReportCauseCode.GKE_NODE_TO_CONTROL_PLANE_PUBLIC_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL:
      return "GKE_NODE_TO_CONTROL_PLANE_PUBLIC_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL";
    case ReportCauseCode.GKE_NODE_TO_CONTROL_PLANE_PRIVATE_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL:
      return "GKE_NODE_TO_CONTROL_PLANE_PRIVATE_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL";
    case ReportCauseCode.GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_ROUTING_ISSUE:
      return "GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_ROUTING_ISSUE";
    case ReportCauseCode.GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_INGRESS_FIREWALL_ON_NODE:
      return "GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_INGRESS_FIREWALL_ON_NODE";
    case ReportCauseCode.GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_HIGH:
      return "GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_HIGH";
    case ReportCauseCode.GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_LIMITES_AUTOSCALING:
      return "GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_LIMITES_AUTOSCALING";
    case ReportCauseCode.GKE_NODE_SERVICE_ACCOUNT_SERVICE_ACCOUNT_DISABLED:
      return "GKE_NODE_SERVICE_ACCOUNT_SERVICE_ACCOUNT_DISABLED";
    case ReportCauseCode.GKE_NODE_SERVICE_ACCOUNT_DEFAULT_SERVICE_ACCOUNT_USED:
      return "GKE_NODE_SERVICE_ACCOUNT_DEFAULT_SERVICE_ACCOUNT_USED";
    case ReportCauseCode.GKE_NODE_SERVICE_ACCOUNT_BAD_OAUTH_SCOPES:
      return "GKE_NODE_SERVICE_ACCOUNT_BAD_OAUTH_SCOPES";
    case ReportCauseCode.CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_EGRESS_FIREWALL:
      return "CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_EGRESS_FIREWALL";
    case ReportCauseCode.CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_ROUTING_ISSUE:
      return "CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_ROUTING_ISSUE";
    case ReportCauseCode.CLOUD_SQL_PRIVATE_IP_INSTANCE_NOT_RUNNING:
      return "CLOUD_SQL_PRIVATE_IP_INSTANCE_NOT_RUNNING";
    case ReportCauseCode.DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_SUBNET_ROUTE:
      return "DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_SUBNET_ROUTE";
    case ReportCauseCode.DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_SUBNET_ROUTE:
      return "DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_SUBNET_ROUTE";
    case ReportCauseCode.DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_STATIC_ROUTE:
      return "DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_STATIC_ROUTE";
    case ReportCauseCode.DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_STATIC_ROUTE:
      return "DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_STATIC_ROUTE";
    case ReportCauseCode.DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_SUBNET_ROUTE:
      return "DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_SUBNET_ROUTE";
    case ReportCauseCode.DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_SUBNET_ROUTE:
      return "DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_SUBNET_ROUTE";
    case ReportCauseCode.DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_STATIC_ROUTE:
      return "DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_STATIC_ROUTE";
    case ReportCauseCode.DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_STATIC_ROUTE:
      return "DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_STATIC_ROUTE";
    case ReportCauseCode.LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_FIREWALL_NOT_CONFIGURED:
      return "LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_FIREWALL_NOT_CONFIGURED";
    case ReportCauseCode.LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_BLOCKED:
      return "LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_BLOCKED";
    case ReportCauseCode.LOAD_BALANCER_HEALTH_CHECK_FIREWALL_FIREWALL_CONFIG_INCONSISTENT:
      return "LOAD_BALANCER_HEALTH_CHECK_FIREWALL_FIREWALL_CONFIG_INCONSISTENT";
    case ReportCauseCode.LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_PARTIALLY_BLOCKED:
      return "LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_PARTIALLY_BLOCKED";
    case ReportCauseCode.LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_BALANCING_MODE_BREAKS_SESSION_AFFINITY:
      return "LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_BALANCING_MODE_BREAKS_SESSION_AFFINITY";
    case ReportCauseCode.LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_HEALTH_CHECK_PORT_MISMATCH:
      return "LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_HEALTH_CHECK_PORT_MISMATCH";
    case ReportCauseCode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface IpUtilizationInfo {
  subnetIpUtilization: IpUtilizationInfo_SubnetIpUtilization[];
}

export interface IpUtilizationInfo_SubnetIpUtilization {
  /** URI of subnet. */
  subnetUri: string;
  /**
   * Secondary range name. If the range is the primary range of the subnet,
   * this field is empty.
   */
  secondaryRangeName: string;
  /** Total number of usable IP addresses in the IP range. */
  totalUsableAddresses: Long;
  /** The ratio of allocated IP addresses from the total usable addresses. */
  allocationRatio: number;
}

/** Log entry that describes a report from Network Analyzer. */
export interface Report {
  /** The unique identifier of the report. */
  id: string;
  /** Priority of the report. */
  priority: Report_Priority;
  /** Type of the report. */
  type: Report_Type;
  /** Status of the report. */
  status: Report_ReportStatus;
  /** The timestamp when the report was first discovered by Network Analyzer. */
  firstReportTime:
    | Date
    | undefined;
  /** Cause code of the report. */
  causeCode: ReportCauseCode;
  /**
   * The resource that are reported with the report.
   * Contains the fully qualified resource name.
   * e.g.,
   * `//compute.googleapis.com/projects/{project_id}/global/networks/{network}`
   */
  resourceName: string;
  /**
   * Location associated with the report. It can be global or GCP regions
   * and zones. e.g., https://cloud.google.com/compute/docs/regions-zones/
   */
  location: string;
  /** URI to the documentation of the report. */
  reportDocumentationUri: string;
  /** The groups of the report. One report may be present in multiple groups. */
  reportGroups: Report_ReportGroup[];
  ipUtilizationInfo?: IpUtilizationInfo | undefined;
}

/** Priority level of an report. */
export enum Report_Priority {
  SEVERITY_UNSPECIFIED = 0,
  CRITICAL = 1,
  HIGH = 2,
  MEDIUM = 3,
  LOW = 4,
  UNRECOGNIZED = -1,
}

export function report_PriorityFromJSON(object: any): Report_Priority {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return Report_Priority.SEVERITY_UNSPECIFIED;
    case 1:
    case "CRITICAL":
      return Report_Priority.CRITICAL;
    case 2:
    case "HIGH":
      return Report_Priority.HIGH;
    case 3:
    case "MEDIUM":
      return Report_Priority.MEDIUM;
    case 4:
    case "LOW":
      return Report_Priority.LOW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Report_Priority.UNRECOGNIZED;
  }
}

export function report_PriorityToJSON(object: Report_Priority): string {
  switch (object) {
    case Report_Priority.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case Report_Priority.CRITICAL:
      return "CRITICAL";
    case Report_Priority.HIGH:
      return "HIGH";
    case Report_Priority.MEDIUM:
      return "MEDIUM";
    case Report_Priority.LOW:
      return "LOW";
    case Report_Priority.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Type of an report. */
export enum Report_Type {
  REPORT_TYPE_UNSPECIFIED = 0,
  INFO = 1,
  WARNING = 2,
  ERROR = 3,
  UNRECOGNIZED = -1,
}

export function report_TypeFromJSON(object: any): Report_Type {
  switch (object) {
    case 0:
    case "REPORT_TYPE_UNSPECIFIED":
      return Report_Type.REPORT_TYPE_UNSPECIFIED;
    case 1:
    case "INFO":
      return Report_Type.INFO;
    case 2:
    case "WARNING":
      return Report_Type.WARNING;
    case 3:
    case "ERROR":
      return Report_Type.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Report_Type.UNRECOGNIZED;
  }
}

export function report_TypeToJSON(object: Report_Type): string {
  switch (object) {
    case Report_Type.REPORT_TYPE_UNSPECIFIED:
      return "REPORT_TYPE_UNSPECIFIED";
    case Report_Type.INFO:
      return "INFO";
    case Report_Type.WARNING:
      return "WARNING";
    case Report_Type.ERROR:
      return "ERROR";
    case Report_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Status of an report. */
export enum Report_ReportStatus {
  REPORT_STATUS_UNSPECIFIED = 0,
  ACTIVE = 1,
  FIXED = 2,
  DISMISSED = 3,
  UNRECOGNIZED = -1,
}

export function report_ReportStatusFromJSON(object: any): Report_ReportStatus {
  switch (object) {
    case 0:
    case "REPORT_STATUS_UNSPECIFIED":
      return Report_ReportStatus.REPORT_STATUS_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return Report_ReportStatus.ACTIVE;
    case 2:
    case "FIXED":
      return Report_ReportStatus.FIXED;
    case 3:
    case "DISMISSED":
      return Report_ReportStatus.DISMISSED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Report_ReportStatus.UNRECOGNIZED;
  }
}

export function report_ReportStatusToJSON(object: Report_ReportStatus): string {
  switch (object) {
    case Report_ReportStatus.REPORT_STATUS_UNSPECIFIED:
      return "REPORT_STATUS_UNSPECIFIED";
    case Report_ReportStatus.ACTIVE:
      return "ACTIVE";
    case Report_ReportStatus.FIXED:
      return "FIXED";
    case Report_ReportStatus.DISMISSED:
      return "DISMISSED";
    case Report_ReportStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Groups of an report. */
export enum Report_ReportGroup {
  CATEGORY_UNSPECIFIED = 0,
  VPC_NETWORK = 1,
  NETWORK_SERVICES = 2,
  KUBERNETES_ENGINE = 3,
  HYBRID_CONNECTIVITY = 4,
  MANAGED_SERVICES = 5,
  UNRECOGNIZED = -1,
}

export function report_ReportGroupFromJSON(object: any): Report_ReportGroup {
  switch (object) {
    case 0:
    case "CATEGORY_UNSPECIFIED":
      return Report_ReportGroup.CATEGORY_UNSPECIFIED;
    case 1:
    case "VPC_NETWORK":
      return Report_ReportGroup.VPC_NETWORK;
    case 2:
    case "NETWORK_SERVICES":
      return Report_ReportGroup.NETWORK_SERVICES;
    case 3:
    case "KUBERNETES_ENGINE":
      return Report_ReportGroup.KUBERNETES_ENGINE;
    case 4:
    case "HYBRID_CONNECTIVITY":
      return Report_ReportGroup.HYBRID_CONNECTIVITY;
    case 5:
    case "MANAGED_SERVICES":
      return Report_ReportGroup.MANAGED_SERVICES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Report_ReportGroup.UNRECOGNIZED;
  }
}

export function report_ReportGroupToJSON(object: Report_ReportGroup): string {
  switch (object) {
    case Report_ReportGroup.CATEGORY_UNSPECIFIED:
      return "CATEGORY_UNSPECIFIED";
    case Report_ReportGroup.VPC_NETWORK:
      return "VPC_NETWORK";
    case Report_ReportGroup.NETWORK_SERVICES:
      return "NETWORK_SERVICES";
    case Report_ReportGroup.KUBERNETES_ENGINE:
      return "KUBERNETES_ENGINE";
    case Report_ReportGroup.HYBRID_CONNECTIVITY:
      return "HYBRID_CONNECTIVITY";
    case Report_ReportGroup.MANAGED_SERVICES:
      return "MANAGED_SERVICES";
    case Report_ReportGroup.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseIpUtilizationInfo(): IpUtilizationInfo {
  return { subnetIpUtilization: [] };
}

export const IpUtilizationInfo: MessageFns<IpUtilizationInfo> = {
  encode(message: IpUtilizationInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.subnetIpUtilization) {
      IpUtilizationInfo_SubnetIpUtilization.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IpUtilizationInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIpUtilizationInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.subnetIpUtilization.push(IpUtilizationInfo_SubnetIpUtilization.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IpUtilizationInfo {
    return {
      subnetIpUtilization: globalThis.Array.isArray(object?.subnetIpUtilization)
        ? object.subnetIpUtilization.map((e: any) => IpUtilizationInfo_SubnetIpUtilization.fromJSON(e))
        : [],
    };
  },

  toJSON(message: IpUtilizationInfo): unknown {
    const obj: any = {};
    if (message.subnetIpUtilization?.length) {
      obj.subnetIpUtilization = message.subnetIpUtilization.map((e) => IpUtilizationInfo_SubnetIpUtilization.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<IpUtilizationInfo>): IpUtilizationInfo {
    return IpUtilizationInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IpUtilizationInfo>): IpUtilizationInfo {
    const message = createBaseIpUtilizationInfo();
    message.subnetIpUtilization =
      object.subnetIpUtilization?.map((e) => IpUtilizationInfo_SubnetIpUtilization.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIpUtilizationInfo_SubnetIpUtilization(): IpUtilizationInfo_SubnetIpUtilization {
  return { subnetUri: "", secondaryRangeName: "", totalUsableAddresses: Long.UZERO, allocationRatio: 0 };
}

export const IpUtilizationInfo_SubnetIpUtilization: MessageFns<IpUtilizationInfo_SubnetIpUtilization> = {
  encode(message: IpUtilizationInfo_SubnetIpUtilization, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subnetUri !== "") {
      writer.uint32(10).string(message.subnetUri);
    }
    if (message.secondaryRangeName !== "") {
      writer.uint32(18).string(message.secondaryRangeName);
    }
    if (!message.totalUsableAddresses.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.totalUsableAddresses.toString());
    }
    if (message.allocationRatio !== 0) {
      writer.uint32(33).double(message.allocationRatio);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IpUtilizationInfo_SubnetIpUtilization {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIpUtilizationInfo_SubnetIpUtilization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.subnetUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.secondaryRangeName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalUsableAddresses = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.allocationRatio = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IpUtilizationInfo_SubnetIpUtilization {
    return {
      subnetUri: isSet(object.subnetUri) ? globalThis.String(object.subnetUri) : "",
      secondaryRangeName: isSet(object.secondaryRangeName) ? globalThis.String(object.secondaryRangeName) : "",
      totalUsableAddresses: isSet(object.totalUsableAddresses)
        ? Long.fromValue(object.totalUsableAddresses)
        : Long.UZERO,
      allocationRatio: isSet(object.allocationRatio) ? globalThis.Number(object.allocationRatio) : 0,
    };
  },

  toJSON(message: IpUtilizationInfo_SubnetIpUtilization): unknown {
    const obj: any = {};
    if (message.subnetUri !== "") {
      obj.subnetUri = message.subnetUri;
    }
    if (message.secondaryRangeName !== "") {
      obj.secondaryRangeName = message.secondaryRangeName;
    }
    if (!message.totalUsableAddresses.equals(Long.UZERO)) {
      obj.totalUsableAddresses = (message.totalUsableAddresses || Long.UZERO).toString();
    }
    if (message.allocationRatio !== 0) {
      obj.allocationRatio = message.allocationRatio;
    }
    return obj;
  },

  create(base?: DeepPartial<IpUtilizationInfo_SubnetIpUtilization>): IpUtilizationInfo_SubnetIpUtilization {
    return IpUtilizationInfo_SubnetIpUtilization.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IpUtilizationInfo_SubnetIpUtilization>): IpUtilizationInfo_SubnetIpUtilization {
    const message = createBaseIpUtilizationInfo_SubnetIpUtilization();
    message.subnetUri = object.subnetUri ?? "";
    message.secondaryRangeName = object.secondaryRangeName ?? "";
    message.totalUsableAddresses = (object.totalUsableAddresses !== undefined && object.totalUsableAddresses !== null)
      ? Long.fromValue(object.totalUsableAddresses)
      : Long.UZERO;
    message.allocationRatio = object.allocationRatio ?? 0;
    return message;
  },
};

function createBaseReport(): Report {
  return {
    id: "",
    priority: 0,
    type: 0,
    status: 0,
    firstReportTime: undefined,
    causeCode: 0,
    resourceName: "",
    location: "",
    reportDocumentationUri: "",
    reportGroups: [],
    ipUtilizationInfo: undefined,
  };
}

export const Report: MessageFns<Report> = {
  encode(message: Report, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.priority !== 0) {
      writer.uint32(16).int32(message.priority);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.firstReportTime !== undefined) {
      Timestamp.encode(toTimestamp(message.firstReportTime), writer.uint32(74).fork()).join();
    }
    if (message.causeCode !== 0) {
      writer.uint32(96).int32(message.causeCode);
    }
    if (message.resourceName !== "") {
      writer.uint32(122).string(message.resourceName);
    }
    if (message.location !== "") {
      writer.uint32(130).string(message.location);
    }
    if (message.reportDocumentationUri !== "") {
      writer.uint32(138).string(message.reportDocumentationUri);
    }
    writer.uint32(146).fork();
    for (const v of message.reportGroups) {
      writer.int32(v);
    }
    writer.join();
    if (message.ipUtilizationInfo !== undefined) {
      IpUtilizationInfo.encode(message.ipUtilizationInfo, writer.uint32(154).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Report {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.priority = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.firstReportTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.causeCode = reader.int32() as any;
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.location = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.reportDocumentationUri = reader.string();
          continue;
        case 18:
          if (tag === 144) {
            message.reportGroups.push(reader.int32() as any);

            continue;
          }

          if (tag === 146) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.reportGroups.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.ipUtilizationInfo = IpUtilizationInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Report {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      priority: isSet(object.priority) ? report_PriorityFromJSON(object.priority) : 0,
      type: isSet(object.type) ? report_TypeFromJSON(object.type) : 0,
      status: isSet(object.status) ? report_ReportStatusFromJSON(object.status) : 0,
      firstReportTime: isSet(object.firstReportTime) ? fromJsonTimestamp(object.firstReportTime) : undefined,
      causeCode: isSet(object.causeCode) ? reportCauseCodeFromJSON(object.causeCode) : 0,
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      reportDocumentationUri: isSet(object.reportDocumentationUri)
        ? globalThis.String(object.reportDocumentationUri)
        : "",
      reportGroups: globalThis.Array.isArray(object?.reportGroups)
        ? object.reportGroups.map((e: any) => report_ReportGroupFromJSON(e))
        : [],
      ipUtilizationInfo: isSet(object.ipUtilizationInfo)
        ? IpUtilizationInfo.fromJSON(object.ipUtilizationInfo)
        : undefined,
    };
  },

  toJSON(message: Report): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.priority !== 0) {
      obj.priority = report_PriorityToJSON(message.priority);
    }
    if (message.type !== 0) {
      obj.type = report_TypeToJSON(message.type);
    }
    if (message.status !== 0) {
      obj.status = report_ReportStatusToJSON(message.status);
    }
    if (message.firstReportTime !== undefined) {
      obj.firstReportTime = message.firstReportTime.toISOString();
    }
    if (message.causeCode !== 0) {
      obj.causeCode = reportCauseCodeToJSON(message.causeCode);
    }
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.reportDocumentationUri !== "") {
      obj.reportDocumentationUri = message.reportDocumentationUri;
    }
    if (message.reportGroups?.length) {
      obj.reportGroups = message.reportGroups.map((e) => report_ReportGroupToJSON(e));
    }
    if (message.ipUtilizationInfo !== undefined) {
      obj.ipUtilizationInfo = IpUtilizationInfo.toJSON(message.ipUtilizationInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<Report>): Report {
    return Report.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Report>): Report {
    const message = createBaseReport();
    message.id = object.id ?? "";
    message.priority = object.priority ?? 0;
    message.type = object.type ?? 0;
    message.status = object.status ?? 0;
    message.firstReportTime = object.firstReportTime ?? undefined;
    message.causeCode = object.causeCode ?? 0;
    message.resourceName = object.resourceName ?? "";
    message.location = object.location ?? "";
    message.reportDocumentationUri = object.reportDocumentationUri ?? "";
    message.reportGroups = object.reportGroups?.map((e) => e) || [];
    message.ipUtilizationInfo = (object.ipUtilizationInfo !== undefined && object.ipUtilizationInfo !== null)
      ? IpUtilizationInfo.fromPartial(object.ipUtilizationInfo)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
