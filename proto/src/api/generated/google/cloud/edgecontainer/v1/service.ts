// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/edgecontainer/v1/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Cluster, Machine, NodePool, ServerConfig, VpnConnection } from "./resources.js";

export const protobufPackage = "google.cloud.edgecontainer.v1";

/** Long-running operation metadata for Edge Container API methods. */
export interface OperationMetadata {
  /** The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Server-defined resource path for the target of the operation. */
  target: string;
  /** The verb executed by the operation. */
  verb: string;
  /** Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Identifies whether the user has requested cancellation of the operation.
   * Operations that have successfully been cancelled have [Operation.error][]
   * value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
   * corresponding to `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** API version used to start the operation. */
  apiVersion: string;
  /**
   * Warnings that do not block the operation, but still hold relevant
   * information for the end user to receive.
   */
  warnings: string[];
}

/** Lists clusters in a location. */
export interface ListClustersRequest {
  /** Required. The parent location, which owns this collection of clusters. */
  parent: string;
  /** The maximum number of resources to list. */
  pageSize: number;
  /**
   * A page token received from previous list request.
   * A page token received from previous list request.
   */
  pageToken: string;
  /** Only resources matching this filter will be listed. */
  filter: string;
  /** Specifies the order in which resources will be listed. */
  orderBy: string;
}

/** List of clusters in a location. */
export interface ListClustersResponse {
  /** Clusters in the location. */
  clusters: Cluster[];
  /** A token to retrieve next page of results. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Gets a cluster. */
export interface GetClusterRequest {
  /** Required. The resource name of the cluster. */
  name: string;
}

/** Creates a cluster. */
export interface CreateClusterRequest {
  /** Required. The parent location where this cluster will be created. */
  parent: string;
  /** Required. A client-specified unique identifier for the cluster. */
  clusterId: string;
  /** Required. The cluster to create. */
  cluster:
    | Cluster
    | undefined;
  /**
   * A unique identifier for this request. Restricted to 36 ASCII characters. A
   * random UUID is recommended. This request is only idempotent if
   * `request_id` is provided.
   */
  requestId: string;
}

/** Updates a cluster. */
export interface UpdateClusterRequest {
  /**
   * Field mask is used to specify the fields to be overwritten in the
   * Cluster resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** The updated cluster. */
  cluster:
    | Cluster
    | undefined;
  /**
   * A unique identifier for this request. Restricted to 36 ASCII characters.
   * A random UUID is recommended.
   * This request is only idempotent if `request_id` is provided.
   */
  requestId: string;
}

/** Upgrades a cluster. */
export interface UpgradeClusterRequest {
  /** Required. The resource name of the cluster. */
  name: string;
  /** Required. The version the cluster is going to be upgraded to. */
  targetVersion: string;
  /** The schedule for the upgrade. */
  schedule: UpgradeClusterRequest_Schedule;
  /**
   * A unique identifier for this request. Restricted to 36 ASCII characters. A
   * random UUID is recommended. This request is only idempotent if
   * `request_id` is provided.
   */
  requestId: string;
}

/** Represents the schedule about when the cluster is going to be upgraded. */
export enum UpgradeClusterRequest_Schedule {
  /**
   * SCHEDULE_UNSPECIFIED - Unspecified. The default is to upgrade the cluster immediately which is
   * the only option today.
   */
  SCHEDULE_UNSPECIFIED = 0,
  /**
   * IMMEDIATELY - The cluster is going to be upgraded immediately after receiving the
   * request.
   */
  IMMEDIATELY = 1,
  UNRECOGNIZED = -1,
}

export function upgradeClusterRequest_ScheduleFromJSON(object: any): UpgradeClusterRequest_Schedule {
  switch (object) {
    case 0:
    case "SCHEDULE_UNSPECIFIED":
      return UpgradeClusterRequest_Schedule.SCHEDULE_UNSPECIFIED;
    case 1:
    case "IMMEDIATELY":
      return UpgradeClusterRequest_Schedule.IMMEDIATELY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UpgradeClusterRequest_Schedule.UNRECOGNIZED;
  }
}

export function upgradeClusterRequest_ScheduleToJSON(object: UpgradeClusterRequest_Schedule): string {
  switch (object) {
    case UpgradeClusterRequest_Schedule.SCHEDULE_UNSPECIFIED:
      return "SCHEDULE_UNSPECIFIED";
    case UpgradeClusterRequest_Schedule.IMMEDIATELY:
      return "IMMEDIATELY";
    case UpgradeClusterRequest_Schedule.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Deletes a cluster. */
export interface DeleteClusterRequest {
  /** Required. The resource name of the cluster. */
  name: string;
  /**
   * A unique identifier for this request. Restricted to 36 ASCII characters. A
   * random UUID is recommended. This request is only idempotent if
   * `request_id` is provided.
   */
  requestId: string;
}

/** Generates an access token for a cluster. */
export interface GenerateAccessTokenRequest {
  /** Required. The resource name of the cluster. */
  cluster: string;
}

/** An access token for a cluster. */
export interface GenerateAccessTokenResponse {
  /** Output only. Access token to authenticate to k8s api-server. */
  accessToken: string;
  /** Output only. Timestamp at which the token will expire. */
  expireTime: Date | undefined;
}

/** Generates an offline credential(offline) for a cluster. */
export interface GenerateOfflineCredentialRequest {
  /** Required. The resource name of the cluster. */
  cluster: string;
}

/** An offline credential for a cluster. */
export interface GenerateOfflineCredentialResponse {
  /** Output only. Client certificate to authenticate to k8s api-server. */
  clientCertificate: string;
  /** Output only. Client private key to authenticate to k8s api-server. */
  clientKey: string;
  /** Output only. Client's identity. */
  userId: string;
  /** Output only. Timestamp at which this credential will expire. */
  expireTime: Date | undefined;
}

/** Lists node pools in a cluster. */
export interface ListNodePoolsRequest {
  /** Required. The parent cluster, which owns this collection of node pools. */
  parent: string;
  /** The maximum number of resources to list. */
  pageSize: number;
  /** A page token received from previous list request. */
  pageToken: string;
  /** Only resources matching this filter will be listed. */
  filter: string;
  /** Specifies the order in which resources will be listed. */
  orderBy: string;
}

/** List of node pools in a cluster. */
export interface ListNodePoolsResponse {
  /** Node pools in the cluster. */
  nodePools: NodePool[];
  /** A token to retrieve next page of results. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Gets a node pool. */
export interface GetNodePoolRequest {
  /** Required. The resource name of the node pool. */
  name: string;
}

/** Creates a node pool. */
export interface CreateNodePoolRequest {
  /** Required. The parent cluster where this node pool will be created. */
  parent: string;
  /** Required. A client-specified unique identifier for the node pool. */
  nodePoolId: string;
  /** Required. The node pool to create. */
  nodePool:
    | NodePool
    | undefined;
  /**
   * A unique identifier for this request. Restricted to 36 ASCII characters. A
   * random UUID is recommended. This request is only idempotent if
   * `request_id` is provided.
   */
  requestId: string;
}

/** Updates a node pool. */
export interface UpdateNodePoolRequest {
  /**
   * Field mask is used to specify the fields to be overwritten in the
   * NodePool resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** The updated node pool. */
  nodePool:
    | NodePool
    | undefined;
  /**
   * A unique identifier for this request. Restricted to 36 ASCII characters. A
   * random UUID is recommended. This request is only idempotent if
   * `request_id` is provided.
   */
  requestId: string;
}

/** Deletes a node pool. */
export interface DeleteNodePoolRequest {
  /** Required. The resource name of the node pool. */
  name: string;
  /**
   * A unique identifier for this request. Restricted to 36 ASCII characters. A
   * random UUID is recommended. This request is only idempotent if
   * `request_id` is provided.
   */
  requestId: string;
}

/** Lists machines in a site. */
export interface ListMachinesRequest {
  /** Required. The parent site, which owns this collection of machines. */
  parent: string;
  /** The maximum number of resources to list. */
  pageSize: number;
  /** A page token received from previous list request. */
  pageToken: string;
  /** Only resources matching this filter will be listed. */
  filter: string;
  /** Specifies the order in which resources will be listed. */
  orderBy: string;
}

/** List of machines in a site. */
export interface ListMachinesResponse {
  /** Machines in the site. */
  machines: Machine[];
  /** A token to retrieve next page of results. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Gets a machine. */
export interface GetMachineRequest {
  /** Required. The resource name of the machine. */
  name: string;
}

/** Lists VPN connections. */
export interface ListVpnConnectionsRequest {
  /**
   * Required. The parent location, which owns this collection of VPN
   * connections.
   */
  parent: string;
  /** The maximum number of resources to list. */
  pageSize: number;
  /** A page token received from previous list request. */
  pageToken: string;
  /** Only resources matching this filter will be listed. */
  filter: string;
  /** Specifies the order in which resources will be listed. */
  orderBy: string;
}

/** List of VPN connections in a location. */
export interface ListVpnConnectionsResponse {
  /** VpnConnections in the location. */
  vpnConnections: VpnConnection[];
  /** A token to retrieve next page of results. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Gets a VPN connection. */
export interface GetVpnConnectionRequest {
  /** Required. The resource name of the vpn connection. */
  name: string;
}

/** Creates a VPN connection. */
export interface CreateVpnConnectionRequest {
  /** Required. The parent location where this vpn connection will be created. */
  parent: string;
  /** Required. The VPN connection identifier. */
  vpnConnectionId: string;
  /** Required. The VPN connection to create. */
  vpnConnection:
    | VpnConnection
    | undefined;
  /**
   * A unique identifier for this request. Restricted to 36 ASCII characters. A
   * random UUID is recommended. This request is only idempotent if
   * `request_id` is provided.
   */
  requestId: string;
}

/** Deletes a vpn connection. */
export interface DeleteVpnConnectionRequest {
  /** Required. The resource name of the vpn connection. */
  name: string;
  /**
   * A unique identifier for this request. Restricted to 36 ASCII characters. A
   * random UUID is recommended. This request is only idempotent if
   * `request_id` is provided.
   */
  requestId: string;
}

/** Gets the server config. */
export interface GetServerConfigRequest {
  /**
   * Required. The name (project and location) of the server config to get,
   * specified in the format `projects/* /locations/*`.
   */
  name: string;
}

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
    warnings: [],
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    for (const v of message.warnings) {
      writer.uint32(66).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.warnings.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
      warnings: globalThis.Array.isArray(object?.warnings) ? object.warnings.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    if (message.warnings?.length) {
      obj.warnings = message.warnings;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    message.warnings = object.warnings?.map((e) => e) || [];
    return message;
  },
};

function createBaseListClustersRequest(): ListClustersRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListClustersRequest: MessageFns<ListClustersRequest> = {
  encode(message: ListClustersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListClustersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListClustersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListClustersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListClustersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListClustersRequest>): ListClustersRequest {
    return ListClustersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListClustersRequest>): ListClustersRequest {
    const message = createBaseListClustersRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListClustersResponse(): ListClustersResponse {
  return { clusters: [], nextPageToken: "", unreachable: [] };
}

export const ListClustersResponse: MessageFns<ListClustersResponse> = {
  encode(message: ListClustersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.clusters) {
      Cluster.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListClustersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListClustersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clusters.push(Cluster.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListClustersResponse {
    return {
      clusters: globalThis.Array.isArray(object?.clusters) ? object.clusters.map((e: any) => Cluster.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListClustersResponse): unknown {
    const obj: any = {};
    if (message.clusters?.length) {
      obj.clusters = message.clusters.map((e) => Cluster.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListClustersResponse>): ListClustersResponse {
    return ListClustersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListClustersResponse>): ListClustersResponse {
    const message = createBaseListClustersResponse();
    message.clusters = object.clusters?.map((e) => Cluster.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetClusterRequest(): GetClusterRequest {
  return { name: "" };
}

export const GetClusterRequest: MessageFns<GetClusterRequest> = {
  encode(message: GetClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetClusterRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetClusterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetClusterRequest>): GetClusterRequest {
    return GetClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetClusterRequest>): GetClusterRequest {
    const message = createBaseGetClusterRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateClusterRequest(): CreateClusterRequest {
  return { parent: "", clusterId: "", cluster: undefined, requestId: "" };
}

export const CreateClusterRequest: MessageFns<CreateClusterRequest> = {
  encode(message: CreateClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.clusterId !== "") {
      writer.uint32(18).string(message.clusterId);
    }
    if (message.cluster !== undefined) {
      Cluster.encode(message.cluster, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clusterId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.cluster = Cluster.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateClusterRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      clusterId: isSet(object.clusterId) ? globalThis.String(object.clusterId) : "",
      cluster: isSet(object.cluster) ? Cluster.fromJSON(object.cluster) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateClusterRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.clusterId !== "") {
      obj.clusterId = message.clusterId;
    }
    if (message.cluster !== undefined) {
      obj.cluster = Cluster.toJSON(message.cluster);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateClusterRequest>): CreateClusterRequest {
    return CreateClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateClusterRequest>): CreateClusterRequest {
    const message = createBaseCreateClusterRequest();
    message.parent = object.parent ?? "";
    message.clusterId = object.clusterId ?? "";
    message.cluster = (object.cluster !== undefined && object.cluster !== null)
      ? Cluster.fromPartial(object.cluster)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateClusterRequest(): UpdateClusterRequest {
  return { updateMask: undefined, cluster: undefined, requestId: "" };
}

export const UpdateClusterRequest: MessageFns<UpdateClusterRequest> = {
  encode(message: UpdateClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.cluster !== undefined) {
      Cluster.encode(message.cluster, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cluster = Cluster.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateClusterRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      cluster: isSet(object.cluster) ? Cluster.fromJSON(object.cluster) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateClusterRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.cluster !== undefined) {
      obj.cluster = Cluster.toJSON(message.cluster);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateClusterRequest>): UpdateClusterRequest {
    return UpdateClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateClusterRequest>): UpdateClusterRequest {
    const message = createBaseUpdateClusterRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.cluster = (object.cluster !== undefined && object.cluster !== null)
      ? Cluster.fromPartial(object.cluster)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpgradeClusterRequest(): UpgradeClusterRequest {
  return { name: "", targetVersion: "", schedule: 0, requestId: "" };
}

export const UpgradeClusterRequest: MessageFns<UpgradeClusterRequest> = {
  encode(message: UpgradeClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.targetVersion !== "") {
      writer.uint32(18).string(message.targetVersion);
    }
    if (message.schedule !== 0) {
      writer.uint32(24).int32(message.schedule);
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpgradeClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpgradeClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.targetVersion = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.schedule = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpgradeClusterRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      targetVersion: isSet(object.targetVersion) ? globalThis.String(object.targetVersion) : "",
      schedule: isSet(object.schedule) ? upgradeClusterRequest_ScheduleFromJSON(object.schedule) : 0,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpgradeClusterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.targetVersion !== "") {
      obj.targetVersion = message.targetVersion;
    }
    if (message.schedule !== 0) {
      obj.schedule = upgradeClusterRequest_ScheduleToJSON(message.schedule);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpgradeClusterRequest>): UpgradeClusterRequest {
    return UpgradeClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpgradeClusterRequest>): UpgradeClusterRequest {
    const message = createBaseUpgradeClusterRequest();
    message.name = object.name ?? "";
    message.targetVersion = object.targetVersion ?? "";
    message.schedule = object.schedule ?? 0;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteClusterRequest(): DeleteClusterRequest {
  return { name: "", requestId: "" };
}

export const DeleteClusterRequest: MessageFns<DeleteClusterRequest> = {
  encode(message: DeleteClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteClusterRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteClusterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteClusterRequest>): DeleteClusterRequest {
    return DeleteClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteClusterRequest>): DeleteClusterRequest {
    const message = createBaseDeleteClusterRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseGenerateAccessTokenRequest(): GenerateAccessTokenRequest {
  return { cluster: "" };
}

export const GenerateAccessTokenRequest: MessageFns<GenerateAccessTokenRequest> = {
  encode(message: GenerateAccessTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cluster !== "") {
      writer.uint32(10).string(message.cluster);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateAccessTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateAccessTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cluster = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateAccessTokenRequest {
    return { cluster: isSet(object.cluster) ? globalThis.String(object.cluster) : "" };
  },

  toJSON(message: GenerateAccessTokenRequest): unknown {
    const obj: any = {};
    if (message.cluster !== "") {
      obj.cluster = message.cluster;
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateAccessTokenRequest>): GenerateAccessTokenRequest {
    return GenerateAccessTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateAccessTokenRequest>): GenerateAccessTokenRequest {
    const message = createBaseGenerateAccessTokenRequest();
    message.cluster = object.cluster ?? "";
    return message;
  },
};

function createBaseGenerateAccessTokenResponse(): GenerateAccessTokenResponse {
  return { accessToken: "", expireTime: undefined };
}

export const GenerateAccessTokenResponse: MessageFns<GenerateAccessTokenResponse> = {
  encode(message: GenerateAccessTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateAccessTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateAccessTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateAccessTokenResponse {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
    };
  },

  toJSON(message: GenerateAccessTokenResponse): unknown {
    const obj: any = {};
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateAccessTokenResponse>): GenerateAccessTokenResponse {
    return GenerateAccessTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateAccessTokenResponse>): GenerateAccessTokenResponse {
    const message = createBaseGenerateAccessTokenResponse();
    message.accessToken = object.accessToken ?? "";
    message.expireTime = object.expireTime ?? undefined;
    return message;
  },
};

function createBaseGenerateOfflineCredentialRequest(): GenerateOfflineCredentialRequest {
  return { cluster: "" };
}

export const GenerateOfflineCredentialRequest: MessageFns<GenerateOfflineCredentialRequest> = {
  encode(message: GenerateOfflineCredentialRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cluster !== "") {
      writer.uint32(10).string(message.cluster);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateOfflineCredentialRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateOfflineCredentialRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cluster = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateOfflineCredentialRequest {
    return { cluster: isSet(object.cluster) ? globalThis.String(object.cluster) : "" };
  },

  toJSON(message: GenerateOfflineCredentialRequest): unknown {
    const obj: any = {};
    if (message.cluster !== "") {
      obj.cluster = message.cluster;
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateOfflineCredentialRequest>): GenerateOfflineCredentialRequest {
    return GenerateOfflineCredentialRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateOfflineCredentialRequest>): GenerateOfflineCredentialRequest {
    const message = createBaseGenerateOfflineCredentialRequest();
    message.cluster = object.cluster ?? "";
    return message;
  },
};

function createBaseGenerateOfflineCredentialResponse(): GenerateOfflineCredentialResponse {
  return { clientCertificate: "", clientKey: "", userId: "", expireTime: undefined };
}

export const GenerateOfflineCredentialResponse: MessageFns<GenerateOfflineCredentialResponse> = {
  encode(message: GenerateOfflineCredentialResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientCertificate !== "") {
      writer.uint32(10).string(message.clientCertificate);
    }
    if (message.clientKey !== "") {
      writer.uint32(18).string(message.clientKey);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateOfflineCredentialResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateOfflineCredentialResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientCertificate = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientKey = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateOfflineCredentialResponse {
    return {
      clientCertificate: isSet(object.clientCertificate) ? globalThis.String(object.clientCertificate) : "",
      clientKey: isSet(object.clientKey) ? globalThis.String(object.clientKey) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
    };
  },

  toJSON(message: GenerateOfflineCredentialResponse): unknown {
    const obj: any = {};
    if (message.clientCertificate !== "") {
      obj.clientCertificate = message.clientCertificate;
    }
    if (message.clientKey !== "") {
      obj.clientKey = message.clientKey;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateOfflineCredentialResponse>): GenerateOfflineCredentialResponse {
    return GenerateOfflineCredentialResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateOfflineCredentialResponse>): GenerateOfflineCredentialResponse {
    const message = createBaseGenerateOfflineCredentialResponse();
    message.clientCertificate = object.clientCertificate ?? "";
    message.clientKey = object.clientKey ?? "";
    message.userId = object.userId ?? "";
    message.expireTime = object.expireTime ?? undefined;
    return message;
  },
};

function createBaseListNodePoolsRequest(): ListNodePoolsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListNodePoolsRequest: MessageFns<ListNodePoolsRequest> = {
  encode(message: ListNodePoolsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNodePoolsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNodePoolsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNodePoolsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListNodePoolsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNodePoolsRequest>): ListNodePoolsRequest {
    return ListNodePoolsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNodePoolsRequest>): ListNodePoolsRequest {
    const message = createBaseListNodePoolsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListNodePoolsResponse(): ListNodePoolsResponse {
  return { nodePools: [], nextPageToken: "", unreachable: [] };
}

export const ListNodePoolsResponse: MessageFns<ListNodePoolsResponse> = {
  encode(message: ListNodePoolsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.nodePools) {
      NodePool.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNodePoolsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNodePoolsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nodePools.push(NodePool.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNodePoolsResponse {
    return {
      nodePools: globalThis.Array.isArray(object?.nodePools)
        ? object.nodePools.map((e: any) => NodePool.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListNodePoolsResponse): unknown {
    const obj: any = {};
    if (message.nodePools?.length) {
      obj.nodePools = message.nodePools.map((e) => NodePool.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNodePoolsResponse>): ListNodePoolsResponse {
    return ListNodePoolsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNodePoolsResponse>): ListNodePoolsResponse {
    const message = createBaseListNodePoolsResponse();
    message.nodePools = object.nodePools?.map((e) => NodePool.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetNodePoolRequest(): GetNodePoolRequest {
  return { name: "" };
}

export const GetNodePoolRequest: MessageFns<GetNodePoolRequest> = {
  encode(message: GetNodePoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNodePoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNodePoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNodePoolRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetNodePoolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetNodePoolRequest>): GetNodePoolRequest {
    return GetNodePoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetNodePoolRequest>): GetNodePoolRequest {
    const message = createBaseGetNodePoolRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateNodePoolRequest(): CreateNodePoolRequest {
  return { parent: "", nodePoolId: "", nodePool: undefined, requestId: "" };
}

export const CreateNodePoolRequest: MessageFns<CreateNodePoolRequest> = {
  encode(message: CreateNodePoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.nodePoolId !== "") {
      writer.uint32(18).string(message.nodePoolId);
    }
    if (message.nodePool !== undefined) {
      NodePool.encode(message.nodePool, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateNodePoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateNodePoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nodePoolId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nodePool = NodePool.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateNodePoolRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      nodePoolId: isSet(object.nodePoolId) ? globalThis.String(object.nodePoolId) : "",
      nodePool: isSet(object.nodePool) ? NodePool.fromJSON(object.nodePool) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateNodePoolRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.nodePoolId !== "") {
      obj.nodePoolId = message.nodePoolId;
    }
    if (message.nodePool !== undefined) {
      obj.nodePool = NodePool.toJSON(message.nodePool);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateNodePoolRequest>): CreateNodePoolRequest {
    return CreateNodePoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateNodePoolRequest>): CreateNodePoolRequest {
    const message = createBaseCreateNodePoolRequest();
    message.parent = object.parent ?? "";
    message.nodePoolId = object.nodePoolId ?? "";
    message.nodePool = (object.nodePool !== undefined && object.nodePool !== null)
      ? NodePool.fromPartial(object.nodePool)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateNodePoolRequest(): UpdateNodePoolRequest {
  return { updateMask: undefined, nodePool: undefined, requestId: "" };
}

export const UpdateNodePoolRequest: MessageFns<UpdateNodePoolRequest> = {
  encode(message: UpdateNodePoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.nodePool !== undefined) {
      NodePool.encode(message.nodePool, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateNodePoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateNodePoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nodePool = NodePool.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateNodePoolRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      nodePool: isSet(object.nodePool) ? NodePool.fromJSON(object.nodePool) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateNodePoolRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.nodePool !== undefined) {
      obj.nodePool = NodePool.toJSON(message.nodePool);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateNodePoolRequest>): UpdateNodePoolRequest {
    return UpdateNodePoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateNodePoolRequest>): UpdateNodePoolRequest {
    const message = createBaseUpdateNodePoolRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.nodePool = (object.nodePool !== undefined && object.nodePool !== null)
      ? NodePool.fromPartial(object.nodePool)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteNodePoolRequest(): DeleteNodePoolRequest {
  return { name: "", requestId: "" };
}

export const DeleteNodePoolRequest: MessageFns<DeleteNodePoolRequest> = {
  encode(message: DeleteNodePoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteNodePoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteNodePoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteNodePoolRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteNodePoolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteNodePoolRequest>): DeleteNodePoolRequest {
    return DeleteNodePoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteNodePoolRequest>): DeleteNodePoolRequest {
    const message = createBaseDeleteNodePoolRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseListMachinesRequest(): ListMachinesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListMachinesRequest: MessageFns<ListMachinesRequest> = {
  encode(message: ListMachinesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMachinesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMachinesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMachinesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListMachinesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMachinesRequest>): ListMachinesRequest {
    return ListMachinesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMachinesRequest>): ListMachinesRequest {
    const message = createBaseListMachinesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListMachinesResponse(): ListMachinesResponse {
  return { machines: [], nextPageToken: "", unreachable: [] };
}

export const ListMachinesResponse: MessageFns<ListMachinesResponse> = {
  encode(message: ListMachinesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.machines) {
      Machine.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMachinesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMachinesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.machines.push(Machine.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMachinesResponse {
    return {
      machines: globalThis.Array.isArray(object?.machines) ? object.machines.map((e: any) => Machine.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListMachinesResponse): unknown {
    const obj: any = {};
    if (message.machines?.length) {
      obj.machines = message.machines.map((e) => Machine.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMachinesResponse>): ListMachinesResponse {
    return ListMachinesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMachinesResponse>): ListMachinesResponse {
    const message = createBaseListMachinesResponse();
    message.machines = object.machines?.map((e) => Machine.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetMachineRequest(): GetMachineRequest {
  return { name: "" };
}

export const GetMachineRequest: MessageFns<GetMachineRequest> = {
  encode(message: GetMachineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMachineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMachineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMachineRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetMachineRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetMachineRequest>): GetMachineRequest {
    return GetMachineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMachineRequest>): GetMachineRequest {
    const message = createBaseGetMachineRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListVpnConnectionsRequest(): ListVpnConnectionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListVpnConnectionsRequest: MessageFns<ListVpnConnectionsRequest> = {
  encode(message: ListVpnConnectionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVpnConnectionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVpnConnectionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVpnConnectionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListVpnConnectionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVpnConnectionsRequest>): ListVpnConnectionsRequest {
    return ListVpnConnectionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVpnConnectionsRequest>): ListVpnConnectionsRequest {
    const message = createBaseListVpnConnectionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListVpnConnectionsResponse(): ListVpnConnectionsResponse {
  return { vpnConnections: [], nextPageToken: "", unreachable: [] };
}

export const ListVpnConnectionsResponse: MessageFns<ListVpnConnectionsResponse> = {
  encode(message: ListVpnConnectionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.vpnConnections) {
      VpnConnection.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVpnConnectionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVpnConnectionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.vpnConnections.push(VpnConnection.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVpnConnectionsResponse {
    return {
      vpnConnections: globalThis.Array.isArray(object?.vpnConnections)
        ? object.vpnConnections.map((e: any) => VpnConnection.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListVpnConnectionsResponse): unknown {
    const obj: any = {};
    if (message.vpnConnections?.length) {
      obj.vpnConnections = message.vpnConnections.map((e) => VpnConnection.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVpnConnectionsResponse>): ListVpnConnectionsResponse {
    return ListVpnConnectionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVpnConnectionsResponse>): ListVpnConnectionsResponse {
    const message = createBaseListVpnConnectionsResponse();
    message.vpnConnections = object.vpnConnections?.map((e) => VpnConnection.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetVpnConnectionRequest(): GetVpnConnectionRequest {
  return { name: "" };
}

export const GetVpnConnectionRequest: MessageFns<GetVpnConnectionRequest> = {
  encode(message: GetVpnConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVpnConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVpnConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVpnConnectionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetVpnConnectionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetVpnConnectionRequest>): GetVpnConnectionRequest {
    return GetVpnConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetVpnConnectionRequest>): GetVpnConnectionRequest {
    const message = createBaseGetVpnConnectionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateVpnConnectionRequest(): CreateVpnConnectionRequest {
  return { parent: "", vpnConnectionId: "", vpnConnection: undefined, requestId: "" };
}

export const CreateVpnConnectionRequest: MessageFns<CreateVpnConnectionRequest> = {
  encode(message: CreateVpnConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.vpnConnectionId !== "") {
      writer.uint32(18).string(message.vpnConnectionId);
    }
    if (message.vpnConnection !== undefined) {
      VpnConnection.encode(message.vpnConnection, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateVpnConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateVpnConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vpnConnectionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.vpnConnection = VpnConnection.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateVpnConnectionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      vpnConnectionId: isSet(object.vpnConnectionId) ? globalThis.String(object.vpnConnectionId) : "",
      vpnConnection: isSet(object.vpnConnection) ? VpnConnection.fromJSON(object.vpnConnection) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateVpnConnectionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.vpnConnectionId !== "") {
      obj.vpnConnectionId = message.vpnConnectionId;
    }
    if (message.vpnConnection !== undefined) {
      obj.vpnConnection = VpnConnection.toJSON(message.vpnConnection);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateVpnConnectionRequest>): CreateVpnConnectionRequest {
    return CreateVpnConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateVpnConnectionRequest>): CreateVpnConnectionRequest {
    const message = createBaseCreateVpnConnectionRequest();
    message.parent = object.parent ?? "";
    message.vpnConnectionId = object.vpnConnectionId ?? "";
    message.vpnConnection = (object.vpnConnection !== undefined && object.vpnConnection !== null)
      ? VpnConnection.fromPartial(object.vpnConnection)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteVpnConnectionRequest(): DeleteVpnConnectionRequest {
  return { name: "", requestId: "" };
}

export const DeleteVpnConnectionRequest: MessageFns<DeleteVpnConnectionRequest> = {
  encode(message: DeleteVpnConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteVpnConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteVpnConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteVpnConnectionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteVpnConnectionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteVpnConnectionRequest>): DeleteVpnConnectionRequest {
    return DeleteVpnConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteVpnConnectionRequest>): DeleteVpnConnectionRequest {
    const message = createBaseDeleteVpnConnectionRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseGetServerConfigRequest(): GetServerConfigRequest {
  return { name: "" };
}

export const GetServerConfigRequest: MessageFns<GetServerConfigRequest> = {
  encode(message: GetServerConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServerConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServerConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServerConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetServerConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetServerConfigRequest>): GetServerConfigRequest {
    return GetServerConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServerConfigRequest>): GetServerConfigRequest {
    const message = createBaseGetServerConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * EdgeContainer API provides management of Kubernetes Clusters on Google Edge
 * Cloud deployments.
 */
export type EdgeContainerDefinition = typeof EdgeContainerDefinition;
export const EdgeContainerDefinition = {
  name: "EdgeContainer",
  fullName: "google.cloud.edgecontainer.v1.EdgeContainer",
  methods: {
    /** Lists Clusters in a given project and location. */
    listClusters: {
      name: "ListClusters",
      requestType: ListClustersRequest,
      requestStream: false,
      responseType: ListClustersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Cluster. */
    getCluster: {
      name: "GetCluster",
      requestType: GetClusterRequest,
      requestStream: false,
      responseType: Cluster,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Cluster in a given project and location. */
    createCluster: {
      name: "CreateCluster",
      requestType: CreateClusterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              44,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              55,
              58,
              7,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              34,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single Cluster. */
    updateCluster: {
      name: "UpdateCluster",
      requestType: UpdateClusterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([19, 99, 108, 117, 115, 116, 101, 114, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              7,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              50,
              52,
              47,
              118,
              49,
              47,
              123,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Upgrades a single cluster. */
    upgradeCluster: {
      name: "UpgradeCluster",
      requestType: UpgradeClusterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              28,
              110,
              97,
              109,
              101,
              44,
              116,
              97,
              114,
              103,
              101,
              116,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              44,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              57,
              58,
              1,
              42,
              34,
              52,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              58,
              117,
              112,
              103,
              114,
              97,
              100,
              101,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Cluster. */
    deleteCluster: {
      name: "DeleteCluster",
      requestType: DeleteClusterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              42,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Generates an access token for a Cluster. */
    generateAccessToken: {
      name: "GenerateAccessToken",
      requestType: GenerateAccessTokenRequest,
      requestStream: false,
      responseType: GenerateAccessTokenResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([7, 99, 108, 117, 115, 116, 101, 114])],
          578365826: [
            Buffer.from([
              69,
              18,
              67,
              47,
              118,
              49,
              47,
              123,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              65,
              99,
              99,
              101,
              115,
              115,
              84,
              111,
              107,
              101,
              110,
            ]),
          ],
        },
      },
    },
    /** Generates an offline credential for a Cluster. */
    generateOfflineCredential: {
      name: "GenerateOfflineCredential",
      requestType: GenerateOfflineCredentialRequest,
      requestStream: false,
      responseType: GenerateOfflineCredentialResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([7, 99, 108, 117, 115, 116, 101, 114])],
          578365826: [
            Buffer.from([
              75,
              18,
              73,
              47,
              118,
              49,
              47,
              123,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              79,
              102,
              102,
              108,
              105,
              110,
              101,
              67,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
            ]),
          ],
        },
      },
    },
    /** Lists NodePools in a given project and location. */
    listNodePools: {
      name: "ListNodePools",
      requestType: ListNodePoolsRequest,
      requestStream: false,
      responseType: ListNodePoolsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              110,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single NodePool. */
    getNodePool: {
      name: "GetNodePool",
      requestType: GetNodePoolRequest,
      requestStream: false,
      responseType: NodePool,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              110,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new NodePool in a given project and location. */
    createNodePool: {
      name: "CreateNodePool",
      requestType: CreateNodePoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              29,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              44,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              69,
              58,
              9,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              34,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              110,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single NodePool. */
    updateNodePool: {
      name: "UpdateNodePool",
      requestType: UpdateNodePoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              78,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              21,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              79,
              58,
              9,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              50,
              66,
              47,
              118,
              49,
              47,
              123,
              110,
              111,
              100,
              101,
              95,
              112,
              111,
              111,
              108,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              110,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single NodePool. */
    deleteNodePool: {
      name: "DeleteNodePool",
      requestType: DeleteNodePoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              42,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              110,
              111,
              100,
              101,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Machines in a given project and location. */
    listMachines: {
      name: "ListMachines",
      requestType: ListMachinesRequest,
      requestStream: false,
      responseType: ListMachinesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              97,
              99,
              104,
              105,
              110,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Machine. */
    getMachine: {
      name: "GetMachine",
      requestType: GetMachineRequest,
      requestStream: false,
      responseType: Machine,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              97,
              99,
              104,
              105,
              110,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists VPN connections in a given project and location. */
    listVpnConnections: {
      name: "ListVpnConnections",
      requestType: ListVpnConnectionsRequest,
      requestStream: false,
      responseType: ListVpnConnectionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              118,
              112,
              110,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single VPN connection. */
    getVpnConnection: {
      name: "GetVpnConnection",
      requestType: GetVpnConnectionRequest,
      requestStream: false,
      responseType: VpnConnection,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              112,
              110,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new VPN connection in a given project and location. */
    createVpnConnection: {
      name: "CreateVpnConnection",
      requestType: CreateVpnConnectionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              34,
              10,
              13,
              86,
              112,
              110,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              39,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              118,
              112,
              110,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              44,
              118,
              112,
              110,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              68,
              58,
              14,
              118,
              112,
              110,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              34,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              118,
              112,
              110,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single VPN connection. */
    deleteVpnConnection: {
      name: "DeleteVpnConnection",
      requestType: DeleteVpnConnectionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              42,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              112,
              110,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets the server config. */
    getServerConfig: {
      name: "GetServerConfig",
      requestType: GetServerConfigRequest,
      requestStream: false,
      responseType: ServerConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface EdgeContainerServiceImplementation<CallContextExt = {}> {
  /** Lists Clusters in a given project and location. */
  listClusters(
    request: ListClustersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListClustersResponse>>;
  /** Gets details of a single Cluster. */
  getCluster(request: GetClusterRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Cluster>>;
  /** Creates a new Cluster in a given project and location. */
  createCluster(request: CreateClusterRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a single Cluster. */
  updateCluster(request: UpdateClusterRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Upgrades a single cluster. */
  upgradeCluster(
    request: UpgradeClusterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single Cluster. */
  deleteCluster(request: DeleteClusterRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Generates an access token for a Cluster. */
  generateAccessToken(
    request: GenerateAccessTokenRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateAccessTokenResponse>>;
  /** Generates an offline credential for a Cluster. */
  generateOfflineCredential(
    request: GenerateOfflineCredentialRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateOfflineCredentialResponse>>;
  /** Lists NodePools in a given project and location. */
  listNodePools(
    request: ListNodePoolsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListNodePoolsResponse>>;
  /** Gets details of a single NodePool. */
  getNodePool(request: GetNodePoolRequest, context: CallContext & CallContextExt): Promise<DeepPartial<NodePool>>;
  /** Creates a new NodePool in a given project and location. */
  createNodePool(
    request: CreateNodePoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a single NodePool. */
  updateNodePool(
    request: UpdateNodePoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single NodePool. */
  deleteNodePool(
    request: DeleteNodePoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists Machines in a given project and location. */
  listMachines(
    request: ListMachinesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListMachinesResponse>>;
  /** Gets details of a single Machine. */
  getMachine(request: GetMachineRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Machine>>;
  /** Lists VPN connections in a given project and location. */
  listVpnConnections(
    request: ListVpnConnectionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListVpnConnectionsResponse>>;
  /** Gets details of a single VPN connection. */
  getVpnConnection(
    request: GetVpnConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<VpnConnection>>;
  /** Creates a new VPN connection in a given project and location. */
  createVpnConnection(
    request: CreateVpnConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single VPN connection. */
  deleteVpnConnection(
    request: DeleteVpnConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets the server config. */
  getServerConfig(
    request: GetServerConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ServerConfig>>;
}

export interface EdgeContainerClient<CallOptionsExt = {}> {
  /** Lists Clusters in a given project and location. */
  listClusters(
    request: DeepPartial<ListClustersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListClustersResponse>;
  /** Gets details of a single Cluster. */
  getCluster(request: DeepPartial<GetClusterRequest>, options?: CallOptions & CallOptionsExt): Promise<Cluster>;
  /** Creates a new Cluster in a given project and location. */
  createCluster(request: DeepPartial<CreateClusterRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Updates the parameters of a single Cluster. */
  updateCluster(request: DeepPartial<UpdateClusterRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Upgrades a single cluster. */
  upgradeCluster(
    request: DeepPartial<UpgradeClusterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single Cluster. */
  deleteCluster(request: DeepPartial<DeleteClusterRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Generates an access token for a Cluster. */
  generateAccessToken(
    request: DeepPartial<GenerateAccessTokenRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateAccessTokenResponse>;
  /** Generates an offline credential for a Cluster. */
  generateOfflineCredential(
    request: DeepPartial<GenerateOfflineCredentialRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateOfflineCredentialResponse>;
  /** Lists NodePools in a given project and location. */
  listNodePools(
    request: DeepPartial<ListNodePoolsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListNodePoolsResponse>;
  /** Gets details of a single NodePool. */
  getNodePool(request: DeepPartial<GetNodePoolRequest>, options?: CallOptions & CallOptionsExt): Promise<NodePool>;
  /** Creates a new NodePool in a given project and location. */
  createNodePool(
    request: DeepPartial<CreateNodePoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the parameters of a single NodePool. */
  updateNodePool(
    request: DeepPartial<UpdateNodePoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single NodePool. */
  deleteNodePool(
    request: DeepPartial<DeleteNodePoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists Machines in a given project and location. */
  listMachines(
    request: DeepPartial<ListMachinesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListMachinesResponse>;
  /** Gets details of a single Machine. */
  getMachine(request: DeepPartial<GetMachineRequest>, options?: CallOptions & CallOptionsExt): Promise<Machine>;
  /** Lists VPN connections in a given project and location. */
  listVpnConnections(
    request: DeepPartial<ListVpnConnectionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListVpnConnectionsResponse>;
  /** Gets details of a single VPN connection. */
  getVpnConnection(
    request: DeepPartial<GetVpnConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<VpnConnection>;
  /** Creates a new VPN connection in a given project and location. */
  createVpnConnection(
    request: DeepPartial<CreateVpnConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single VPN connection. */
  deleteVpnConnection(
    request: DeepPartial<DeleteVpnConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets the server config. */
  getServerConfig(
    request: DeepPartial<GetServerConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ServerConfig>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
