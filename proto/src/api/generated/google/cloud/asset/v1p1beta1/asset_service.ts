// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/asset/v1p1beta1/asset_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { IamPolicySearchResult, StandardResourceMetadata } from "./assets.js";

export const protobufPackage = "google.cloud.asset.v1p1beta1";

/** Search all resources request. */
export interface SearchAllResourcesRequest {
  /**
   * Required. The relative name of an asset. The search is limited to the
   * resources within the `scope`. The allowed value must be:
   *
   * * Organization number (such as "organizations/123")
   * * Folder number (such as "folders/1234")
   * * Project number (such as "projects/12345")
   * * Project ID (such as "projects/abc")
   */
  scope: string;
  /** Optional. The query statement. */
  query: string;
  /**
   * Optional. A list of asset types that this request searches for. If empty,
   * it will search all the supported asset types.
   */
  assetTypes: string[];
  /**
   * Optional. The page size for search result pagination. Page size is capped
   * at 500 even if a larger value is given. If set to zero, server will pick an
   * appropriate default. Returned results may be fewer than requested. When
   * this happens, there could be more results as long as `next_page_token` is
   * returned.
   */
  pageSize: number;
  /**
   * Optional. If present, then retrieve the next batch of results from the
   * preceding call to this method.  `page_token` must be the value of
   * `next_page_token` from the previous response. The values of all other
   * method parameters, must be identical to those in the previous call.
   */
  pageToken: string;
  /**
   * Optional. A comma separated list of fields specifying the sorting order of
   * the results. The default order is ascending. Add ` DESC` after the field
   * name to indicate descending order. Redundant space characters are ignored.
   * For example, `  location DESC ,  name  `.
   */
  orderBy: string;
}

/** Search all resources response. */
export interface SearchAllResourcesResponse {
  /** A list of resource that match the search query. */
  results: StandardResourceMetadata[];
  /**
   * If there are more results than those appearing in this response, then
   * `next_page_token` is included.  To get the next set of results, call this
   * method again using the value of `next_page_token` as `page_token`.
   */
  nextPageToken: string;
}

/** Search all IAM policies request. */
export interface SearchAllIamPoliciesRequest {
  /**
   * Required. The relative name of an asset. The search is limited to the
   * resources within the `scope`. The allowed value must be:
   *
   * * Organization number (such as "organizations/123")
   * * Folder number (such as "folders/1234")
   * * Project number (such as "projects/12345")
   * * Project ID (such as "projects/abc")
   */
  scope: string;
  /**
   * Optional. The query statement. Examples:
   *
   * * "policy:myuser@mydomain.com"
   * * "policy:(myuser@mydomain.com viewer)"
   */
  query: string;
  /**
   * Optional. The page size for search result pagination. Page size is capped
   * at 500 even if a larger value is given. If set to zero, server will pick an
   * appropriate default. Returned results may be fewer than requested. When
   * this happens, there could be more results as long as `next_page_token` is
   * returned.
   */
  pageSize: number;
  /**
   * Optional. If present, retrieve the next batch of results from the preceding
   * call to this method. `page_token` must be the value of `next_page_token`
   * from the previous response. The values of all other method parameters must
   * be identical to those in the previous call.
   */
  pageToken: string;
}

/** Search all IAM policies response. */
export interface SearchAllIamPoliciesResponse {
  /**
   * A list of IAM policies that match the search query. Related information
   * such as the associated resource is returned along with the policy.
   */
  results: IamPolicySearchResult[];
  /**
   * Set if there are more results than those appearing in this response; to get
   * the next set of results, call this method again, using this value as the
   * `page_token`.
   */
  nextPageToken: string;
}

function createBaseSearchAllResourcesRequest(): SearchAllResourcesRequest {
  return { scope: "", query: "", assetTypes: [], pageSize: 0, pageToken: "", orderBy: "" };
}

export const SearchAllResourcesRequest: MessageFns<SearchAllResourcesRequest> = {
  encode(message: SearchAllResourcesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scope !== "") {
      writer.uint32(10).string(message.scope);
    }
    if (message.query !== "") {
      writer.uint32(18).string(message.query);
    }
    for (const v of message.assetTypes) {
      writer.uint32(26).string(v!);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(42).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(82).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchAllResourcesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchAllResourcesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.scope = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.assetTypes.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchAllResourcesRequest {
    return {
      scope: isSet(object.scope) ? globalThis.String(object.scope) : "",
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      assetTypes: globalThis.Array.isArray(object?.assetTypes)
        ? object.assetTypes.map((e: any) => globalThis.String(e))
        : [],
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: SearchAllResourcesRequest): unknown {
    const obj: any = {};
    if (message.scope !== "") {
      obj.scope = message.scope;
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.assetTypes?.length) {
      obj.assetTypes = message.assetTypes;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchAllResourcesRequest>): SearchAllResourcesRequest {
    return SearchAllResourcesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchAllResourcesRequest>): SearchAllResourcesRequest {
    const message = createBaseSearchAllResourcesRequest();
    message.scope = object.scope ?? "";
    message.query = object.query ?? "";
    message.assetTypes = object.assetTypes?.map((e) => e) || [];
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseSearchAllResourcesResponse(): SearchAllResourcesResponse {
  return { results: [], nextPageToken: "" };
}

export const SearchAllResourcesResponse: MessageFns<SearchAllResourcesResponse> = {
  encode(message: SearchAllResourcesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.results) {
      StandardResourceMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchAllResourcesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchAllResourcesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.results.push(StandardResourceMetadata.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchAllResourcesResponse {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => StandardResourceMetadata.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchAllResourcesResponse): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => StandardResourceMetadata.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchAllResourcesResponse>): SearchAllResourcesResponse {
    return SearchAllResourcesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchAllResourcesResponse>): SearchAllResourcesResponse {
    const message = createBaseSearchAllResourcesResponse();
    message.results = object.results?.map((e) => StandardResourceMetadata.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseSearchAllIamPoliciesRequest(): SearchAllIamPoliciesRequest {
  return { scope: "", query: "", pageSize: 0, pageToken: "" };
}

export const SearchAllIamPoliciesRequest: MessageFns<SearchAllIamPoliciesRequest> = {
  encode(message: SearchAllIamPoliciesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scope !== "") {
      writer.uint32(10).string(message.scope);
    }
    if (message.query !== "") {
      writer.uint32(18).string(message.query);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchAllIamPoliciesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchAllIamPoliciesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.scope = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchAllIamPoliciesRequest {
    return {
      scope: isSet(object.scope) ? globalThis.String(object.scope) : "",
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchAllIamPoliciesRequest): unknown {
    const obj: any = {};
    if (message.scope !== "") {
      obj.scope = message.scope;
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchAllIamPoliciesRequest>): SearchAllIamPoliciesRequest {
    return SearchAllIamPoliciesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchAllIamPoliciesRequest>): SearchAllIamPoliciesRequest {
    const message = createBaseSearchAllIamPoliciesRequest();
    message.scope = object.scope ?? "";
    message.query = object.query ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchAllIamPoliciesResponse(): SearchAllIamPoliciesResponse {
  return { results: [], nextPageToken: "" };
}

export const SearchAllIamPoliciesResponse: MessageFns<SearchAllIamPoliciesResponse> = {
  encode(message: SearchAllIamPoliciesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.results) {
      IamPolicySearchResult.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchAllIamPoliciesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchAllIamPoliciesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.results.push(IamPolicySearchResult.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchAllIamPoliciesResponse {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => IamPolicySearchResult.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchAllIamPoliciesResponse): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => IamPolicySearchResult.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchAllIamPoliciesResponse>): SearchAllIamPoliciesResponse {
    return SearchAllIamPoliciesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchAllIamPoliciesResponse>): SearchAllIamPoliciesResponse {
    const message = createBaseSearchAllIamPoliciesResponse();
    message.results = object.results?.map((e) => IamPolicySearchResult.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** Asset service definition. */
export type AssetServiceDefinition = typeof AssetServiceDefinition;
export const AssetServiceDefinition = {
  name: "AssetService",
  fullName: "google.cloud.asset.v1p1beta1.AssetService",
  methods: {
    /**
     * Searches all the resources within a given accessible Resource Manager scope
     * (project/folder/organization). This RPC gives callers especially
     * administrators the ability to search all the resources within a scope, even
     * if they don't have `.get` permission of all the resources. Callers should
     * have `cloudasset.assets.searchAllResources` permission on the requested
     * scope, otherwise the request will be rejected.
     */
    searchAllResources: {
      name: "SearchAllResources",
      requestType: SearchAllResourcesRequest,
      requestStream: false,
      responseType: SearchAllResourcesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              115,
              99,
              111,
              112,
              101,
              44,
              113,
              117,
              101,
              114,
              121,
              44,
              97,
              115,
              115,
              101,
              116,
              95,
              116,
              121,
              112,
              101,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              44,
              18,
              42,
              47,
              118,
              49,
              112,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              115,
              99,
              111,
              112,
              101,
              61,
              42,
              47,
              42,
              125,
              47,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              65,
              108,
              108,
            ]),
          ],
        },
      },
    },
    /**
     * Searches all the IAM policies within a given accessible Resource Manager
     * scope (project/folder/organization). This RPC gives callers especially
     * administrators the ability to search all the IAM policies within a scope,
     * even if they don't have `.getIamPolicy` permission of all the IAM policies.
     * Callers should have `cloudasset.assets.searchAllIamPolicies` permission on
     * the requested scope, otherwise the request will be rejected.
     */
    searchAllIamPolicies: {
      name: "SearchAllIamPolicies",
      requestType: SearchAllIamPoliciesRequest,
      requestStream: false,
      responseType: SearchAllIamPoliciesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 115, 99, 111, 112, 101, 44, 113, 117, 101, 114, 121])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              112,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              115,
              99,
              111,
              112,
              101,
              61,
              42,
              47,
              42,
              125,
              47,
              105,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              65,
              108,
              108,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AssetServiceImplementation<CallContextExt = {}> {
  /**
   * Searches all the resources within a given accessible Resource Manager scope
   * (project/folder/organization). This RPC gives callers especially
   * administrators the ability to search all the resources within a scope, even
   * if they don't have `.get` permission of all the resources. Callers should
   * have `cloudasset.assets.searchAllResources` permission on the requested
   * scope, otherwise the request will be rejected.
   */
  searchAllResources(
    request: SearchAllResourcesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchAllResourcesResponse>>;
  /**
   * Searches all the IAM policies within a given accessible Resource Manager
   * scope (project/folder/organization). This RPC gives callers especially
   * administrators the ability to search all the IAM policies within a scope,
   * even if they don't have `.getIamPolicy` permission of all the IAM policies.
   * Callers should have `cloudasset.assets.searchAllIamPolicies` permission on
   * the requested scope, otherwise the request will be rejected.
   */
  searchAllIamPolicies(
    request: SearchAllIamPoliciesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchAllIamPoliciesResponse>>;
}

export interface AssetServiceClient<CallOptionsExt = {}> {
  /**
   * Searches all the resources within a given accessible Resource Manager scope
   * (project/folder/organization). This RPC gives callers especially
   * administrators the ability to search all the resources within a scope, even
   * if they don't have `.get` permission of all the resources. Callers should
   * have `cloudasset.assets.searchAllResources` permission on the requested
   * scope, otherwise the request will be rejected.
   */
  searchAllResources(
    request: DeepPartial<SearchAllResourcesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchAllResourcesResponse>;
  /**
   * Searches all the IAM policies within a given accessible Resource Manager
   * scope (project/folder/organization). This RPC gives callers especially
   * administrators the ability to search all the IAM policies within a scope,
   * even if they don't have `.getIamPolicy` permission of all the IAM policies.
   * Callers should have `cloudasset.assets.searchAllIamPolicies` permission on
   * the requested scope, otherwise the request will be rejected.
   */
  searchAllIamPolicies(
    request: DeepPartial<SearchAllIamPoliciesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchAllIamPoliciesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
