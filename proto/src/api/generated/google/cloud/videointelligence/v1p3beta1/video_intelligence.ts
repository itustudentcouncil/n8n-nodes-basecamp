// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/videointelligence/v1p3beta1/video_intelligence.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Duration } from "../../../protobuf/duration.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";

export const protobufPackage = "google.cloud.videointelligence.v1p3beta1";

/** Label detection mode. */
export enum LabelDetectionMode {
  /** LABEL_DETECTION_MODE_UNSPECIFIED - Unspecified. */
  LABEL_DETECTION_MODE_UNSPECIFIED = 0,
  /** SHOT_MODE - Detect shot-level labels. */
  SHOT_MODE = 1,
  /** FRAME_MODE - Detect frame-level labels. */
  FRAME_MODE = 2,
  /** SHOT_AND_FRAME_MODE - Detect both shot-level and frame-level labels. */
  SHOT_AND_FRAME_MODE = 3,
  UNRECOGNIZED = -1,
}

export function labelDetectionModeFromJSON(object: any): LabelDetectionMode {
  switch (object) {
    case 0:
    case "LABEL_DETECTION_MODE_UNSPECIFIED":
      return LabelDetectionMode.LABEL_DETECTION_MODE_UNSPECIFIED;
    case 1:
    case "SHOT_MODE":
      return LabelDetectionMode.SHOT_MODE;
    case 2:
    case "FRAME_MODE":
      return LabelDetectionMode.FRAME_MODE;
    case 3:
    case "SHOT_AND_FRAME_MODE":
      return LabelDetectionMode.SHOT_AND_FRAME_MODE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LabelDetectionMode.UNRECOGNIZED;
  }
}

export function labelDetectionModeToJSON(object: LabelDetectionMode): string {
  switch (object) {
    case LabelDetectionMode.LABEL_DETECTION_MODE_UNSPECIFIED:
      return "LABEL_DETECTION_MODE_UNSPECIFIED";
    case LabelDetectionMode.SHOT_MODE:
      return "SHOT_MODE";
    case LabelDetectionMode.FRAME_MODE:
      return "FRAME_MODE";
    case LabelDetectionMode.SHOT_AND_FRAME_MODE:
      return "SHOT_AND_FRAME_MODE";
    case LabelDetectionMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Bucketized representation of likelihood. */
export enum Likelihood {
  /** LIKELIHOOD_UNSPECIFIED - Unspecified likelihood. */
  LIKELIHOOD_UNSPECIFIED = 0,
  /** VERY_UNLIKELY - Very unlikely. */
  VERY_UNLIKELY = 1,
  /** UNLIKELY - Unlikely. */
  UNLIKELY = 2,
  /** POSSIBLE - Possible. */
  POSSIBLE = 3,
  /** LIKELY - Likely. */
  LIKELY = 4,
  /** VERY_LIKELY - Very likely. */
  VERY_LIKELY = 5,
  UNRECOGNIZED = -1,
}

export function likelihoodFromJSON(object: any): Likelihood {
  switch (object) {
    case 0:
    case "LIKELIHOOD_UNSPECIFIED":
      return Likelihood.LIKELIHOOD_UNSPECIFIED;
    case 1:
    case "VERY_UNLIKELY":
      return Likelihood.VERY_UNLIKELY;
    case 2:
    case "UNLIKELY":
      return Likelihood.UNLIKELY;
    case 3:
    case "POSSIBLE":
      return Likelihood.POSSIBLE;
    case 4:
    case "LIKELY":
      return Likelihood.LIKELY;
    case 5:
    case "VERY_LIKELY":
      return Likelihood.VERY_LIKELY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Likelihood.UNRECOGNIZED;
  }
}

export function likelihoodToJSON(object: Likelihood): string {
  switch (object) {
    case Likelihood.LIKELIHOOD_UNSPECIFIED:
      return "LIKELIHOOD_UNSPECIFIED";
    case Likelihood.VERY_UNLIKELY:
      return "VERY_UNLIKELY";
    case Likelihood.UNLIKELY:
      return "UNLIKELY";
    case Likelihood.POSSIBLE:
      return "POSSIBLE";
    case Likelihood.LIKELY:
      return "LIKELY";
    case Likelihood.VERY_LIKELY:
      return "VERY_LIKELY";
    case Likelihood.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Streaming video annotation feature. */
export enum StreamingFeature {
  /** STREAMING_FEATURE_UNSPECIFIED - Unspecified. */
  STREAMING_FEATURE_UNSPECIFIED = 0,
  /** STREAMING_LABEL_DETECTION - Label detection. Detect objects, such as dog or flower. */
  STREAMING_LABEL_DETECTION = 1,
  /** STREAMING_SHOT_CHANGE_DETECTION - Shot change detection. */
  STREAMING_SHOT_CHANGE_DETECTION = 2,
  /** STREAMING_EXPLICIT_CONTENT_DETECTION - Explicit content detection. */
  STREAMING_EXPLICIT_CONTENT_DETECTION = 3,
  /** STREAMING_OBJECT_TRACKING - Object detection and tracking. */
  STREAMING_OBJECT_TRACKING = 4,
  /** STREAMING_AUTOML_ACTION_RECOGNITION - Action recognition based on AutoML model. */
  STREAMING_AUTOML_ACTION_RECOGNITION = 23,
  /** STREAMING_AUTOML_CLASSIFICATION - Video classification based on AutoML model. */
  STREAMING_AUTOML_CLASSIFICATION = 21,
  /** STREAMING_AUTOML_OBJECT_TRACKING - Object detection and tracking based on AutoML model. */
  STREAMING_AUTOML_OBJECT_TRACKING = 22,
  UNRECOGNIZED = -1,
}

export function streamingFeatureFromJSON(object: any): StreamingFeature {
  switch (object) {
    case 0:
    case "STREAMING_FEATURE_UNSPECIFIED":
      return StreamingFeature.STREAMING_FEATURE_UNSPECIFIED;
    case 1:
    case "STREAMING_LABEL_DETECTION":
      return StreamingFeature.STREAMING_LABEL_DETECTION;
    case 2:
    case "STREAMING_SHOT_CHANGE_DETECTION":
      return StreamingFeature.STREAMING_SHOT_CHANGE_DETECTION;
    case 3:
    case "STREAMING_EXPLICIT_CONTENT_DETECTION":
      return StreamingFeature.STREAMING_EXPLICIT_CONTENT_DETECTION;
    case 4:
    case "STREAMING_OBJECT_TRACKING":
      return StreamingFeature.STREAMING_OBJECT_TRACKING;
    case 23:
    case "STREAMING_AUTOML_ACTION_RECOGNITION":
      return StreamingFeature.STREAMING_AUTOML_ACTION_RECOGNITION;
    case 21:
    case "STREAMING_AUTOML_CLASSIFICATION":
      return StreamingFeature.STREAMING_AUTOML_CLASSIFICATION;
    case 22:
    case "STREAMING_AUTOML_OBJECT_TRACKING":
      return StreamingFeature.STREAMING_AUTOML_OBJECT_TRACKING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StreamingFeature.UNRECOGNIZED;
  }
}

export function streamingFeatureToJSON(object: StreamingFeature): string {
  switch (object) {
    case StreamingFeature.STREAMING_FEATURE_UNSPECIFIED:
      return "STREAMING_FEATURE_UNSPECIFIED";
    case StreamingFeature.STREAMING_LABEL_DETECTION:
      return "STREAMING_LABEL_DETECTION";
    case StreamingFeature.STREAMING_SHOT_CHANGE_DETECTION:
      return "STREAMING_SHOT_CHANGE_DETECTION";
    case StreamingFeature.STREAMING_EXPLICIT_CONTENT_DETECTION:
      return "STREAMING_EXPLICIT_CONTENT_DETECTION";
    case StreamingFeature.STREAMING_OBJECT_TRACKING:
      return "STREAMING_OBJECT_TRACKING";
    case StreamingFeature.STREAMING_AUTOML_ACTION_RECOGNITION:
      return "STREAMING_AUTOML_ACTION_RECOGNITION";
    case StreamingFeature.STREAMING_AUTOML_CLASSIFICATION:
      return "STREAMING_AUTOML_CLASSIFICATION";
    case StreamingFeature.STREAMING_AUTOML_OBJECT_TRACKING:
      return "STREAMING_AUTOML_OBJECT_TRACKING";
    case StreamingFeature.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Video annotation feature. */
export enum Feature {
  /** FEATURE_UNSPECIFIED - Unspecified. */
  FEATURE_UNSPECIFIED = 0,
  /** LABEL_DETECTION - Label detection. Detect objects, such as dog or flower. */
  LABEL_DETECTION = 1,
  /** SHOT_CHANGE_DETECTION - Shot change detection. */
  SHOT_CHANGE_DETECTION = 2,
  /** EXPLICIT_CONTENT_DETECTION - Explicit content detection. */
  EXPLICIT_CONTENT_DETECTION = 3,
  /** FACE_DETECTION - Human face detection. */
  FACE_DETECTION = 4,
  /** SPEECH_TRANSCRIPTION - Speech transcription. */
  SPEECH_TRANSCRIPTION = 6,
  /** TEXT_DETECTION - OCR text detection and tracking. */
  TEXT_DETECTION = 7,
  /** OBJECT_TRACKING - Object detection and tracking. */
  OBJECT_TRACKING = 9,
  /** LOGO_RECOGNITION - Logo detection, tracking, and recognition. */
  LOGO_RECOGNITION = 12,
  /** CELEBRITY_RECOGNITION - Celebrity recognition. */
  CELEBRITY_RECOGNITION = 13,
  /** PERSON_DETECTION - Person detection. */
  PERSON_DETECTION = 14,
  UNRECOGNIZED = -1,
}

export function featureFromJSON(object: any): Feature {
  switch (object) {
    case 0:
    case "FEATURE_UNSPECIFIED":
      return Feature.FEATURE_UNSPECIFIED;
    case 1:
    case "LABEL_DETECTION":
      return Feature.LABEL_DETECTION;
    case 2:
    case "SHOT_CHANGE_DETECTION":
      return Feature.SHOT_CHANGE_DETECTION;
    case 3:
    case "EXPLICIT_CONTENT_DETECTION":
      return Feature.EXPLICIT_CONTENT_DETECTION;
    case 4:
    case "FACE_DETECTION":
      return Feature.FACE_DETECTION;
    case 6:
    case "SPEECH_TRANSCRIPTION":
      return Feature.SPEECH_TRANSCRIPTION;
    case 7:
    case "TEXT_DETECTION":
      return Feature.TEXT_DETECTION;
    case 9:
    case "OBJECT_TRACKING":
      return Feature.OBJECT_TRACKING;
    case 12:
    case "LOGO_RECOGNITION":
      return Feature.LOGO_RECOGNITION;
    case 13:
    case "CELEBRITY_RECOGNITION":
      return Feature.CELEBRITY_RECOGNITION;
    case 14:
    case "PERSON_DETECTION":
      return Feature.PERSON_DETECTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Feature.UNRECOGNIZED;
  }
}

export function featureToJSON(object: Feature): string {
  switch (object) {
    case Feature.FEATURE_UNSPECIFIED:
      return "FEATURE_UNSPECIFIED";
    case Feature.LABEL_DETECTION:
      return "LABEL_DETECTION";
    case Feature.SHOT_CHANGE_DETECTION:
      return "SHOT_CHANGE_DETECTION";
    case Feature.EXPLICIT_CONTENT_DETECTION:
      return "EXPLICIT_CONTENT_DETECTION";
    case Feature.FACE_DETECTION:
      return "FACE_DETECTION";
    case Feature.SPEECH_TRANSCRIPTION:
      return "SPEECH_TRANSCRIPTION";
    case Feature.TEXT_DETECTION:
      return "TEXT_DETECTION";
    case Feature.OBJECT_TRACKING:
      return "OBJECT_TRACKING";
    case Feature.LOGO_RECOGNITION:
      return "LOGO_RECOGNITION";
    case Feature.CELEBRITY_RECOGNITION:
      return "CELEBRITY_RECOGNITION";
    case Feature.PERSON_DETECTION:
      return "PERSON_DETECTION";
    case Feature.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Video annotation request. */
export interface AnnotateVideoRequest {
  /**
   * Input video location. Currently, only
   * [Cloud Storage](https://cloud.google.com/storage/) URIs are
   * supported. URIs must be specified in the following format:
   * `gs://bucket-id/object-id` (other URI formats return
   * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT]). For
   * more information, see [Request
   * URIs](https://cloud.google.com/storage/docs/request-endpoints). To identify
   * multiple videos, a video URI may include wildcards in the `object-id`.
   * Supported wildcards: '*' to match 0 or more characters;
   * '?' to match 1 character. If unset, the input video should be embedded
   * in the request as `input_content`. If set, `input_content` must be unset.
   */
  inputUri: string;
  /**
   * The video data bytes.
   * If unset, the input video(s) should be specified via the `input_uri`.
   * If set, `input_uri` must be unset.
   */
  inputContent: Buffer;
  /** Required. Requested video annotation features. */
  features: Feature[];
  /** Additional video context and/or feature-specific parameters. */
  videoContext:
    | VideoContext
    | undefined;
  /**
   * Optional. Location where the output (in JSON format) should be stored.
   * Currently, only [Cloud Storage](https://cloud.google.com/storage/)
   * URIs are supported. These must be specified in the following format:
   * `gs://bucket-id/object-id` (other URI formats return
   * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT]). For
   * more information, see [Request
   * URIs](https://cloud.google.com/storage/docs/request-endpoints).
   */
  outputUri: string;
  /**
   * Optional. Cloud region where annotation should take place. Supported cloud
   * regions are: `us-east1`, `us-west1`, `europe-west1`, `asia-east1`. If no
   * region is specified, the region will be determined based on video file
   * location.
   */
  locationId: string;
}

/** Video context and/or feature-specific parameters. */
export interface VideoContext {
  /**
   * Video segments to annotate. The segments may overlap and are not required
   * to be contiguous or span the whole video. If unspecified, each video is
   * treated as a single segment.
   */
  segments: VideoSegment[];
  /** Config for LABEL_DETECTION. */
  labelDetectionConfig:
    | LabelDetectionConfig
    | undefined;
  /** Config for SHOT_CHANGE_DETECTION. */
  shotChangeDetectionConfig:
    | ShotChangeDetectionConfig
    | undefined;
  /** Config for EXPLICIT_CONTENT_DETECTION. */
  explicitContentDetectionConfig:
    | ExplicitContentDetectionConfig
    | undefined;
  /** Config for FACE_DETECTION. */
  faceDetectionConfig:
    | FaceDetectionConfig
    | undefined;
  /** Config for SPEECH_TRANSCRIPTION. */
  speechTranscriptionConfig:
    | SpeechTranscriptionConfig
    | undefined;
  /** Config for TEXT_DETECTION. */
  textDetectionConfig:
    | TextDetectionConfig
    | undefined;
  /** Config for PERSON_DETECTION. */
  personDetectionConfig:
    | PersonDetectionConfig
    | undefined;
  /** Config for OBJECT_TRACKING. */
  objectTrackingConfig: ObjectTrackingConfig | undefined;
}

/** Config for LABEL_DETECTION. */
export interface LabelDetectionConfig {
  /**
   * What labels should be detected with LABEL_DETECTION, in addition to
   * video-level labels or segment-level labels.
   * If unspecified, defaults to `SHOT_MODE`.
   */
  labelDetectionMode: LabelDetectionMode;
  /**
   * Whether the video has been shot from a stationary (i.e., non-moving)
   * camera. When set to true, might improve detection accuracy for moving
   * objects. Should be used with `SHOT_AND_FRAME_MODE` enabled.
   */
  stationaryCamera: boolean;
  /**
   * Model to use for label detection.
   * Supported values: "builtin/stable" (the default if unset) and
   * "builtin/latest".
   */
  model: string;
  /**
   * The confidence threshold we perform filtering on the labels from
   * frame-level detection. If not set, it is set to 0.4 by default. The valid
   * range for this threshold is [0.1, 0.9]. Any value set outside of this
   * range will be clipped.
   * Note: For best results, follow the default threshold. We will update
   * the default threshold everytime when we release a new model.
   */
  frameConfidenceThreshold: number;
  /**
   * The confidence threshold we perform filtering on the labels from
   * video-level and shot-level detections. If not set, it's set to 0.3 by
   * default. The valid range for this threshold is [0.1, 0.9]. Any value set
   * outside of this range will be clipped.
   * Note: For best results, follow the default threshold. We will update
   * the default threshold everytime when we release a new model.
   */
  videoConfidenceThreshold: number;
}

/** Config for SHOT_CHANGE_DETECTION. */
export interface ShotChangeDetectionConfig {
  /**
   * Model to use for shot change detection.
   * Supported values: "builtin/stable" (the default if unset) and
   * "builtin/latest".
   */
  model: string;
}

/** Config for OBJECT_TRACKING. */
export interface ObjectTrackingConfig {
  /**
   * Model to use for object tracking.
   * Supported values: "builtin/stable" (the default if unset) and
   * "builtin/latest".
   */
  model: string;
}

/** Config for EXPLICIT_CONTENT_DETECTION. */
export interface ExplicitContentDetectionConfig {
  /**
   * Model to use for explicit content detection.
   * Supported values: "builtin/stable" (the default if unset) and
   * "builtin/latest".
   */
  model: string;
}

/** Config for FACE_DETECTION. */
export interface FaceDetectionConfig {
  /**
   * Model to use for face detection.
   * Supported values: "builtin/stable" (the default if unset) and
   * "builtin/latest".
   */
  model: string;
  /** Whether bounding boxes are included in the face annotation output. */
  includeBoundingBoxes: boolean;
  /**
   * Whether to enable face attributes detection, such as glasses, dark_glasses,
   * mouth_open etc. Ignored if 'include_bounding_boxes' is set to false.
   */
  includeAttributes: boolean;
}

/** Config for PERSON_DETECTION. */
export interface PersonDetectionConfig {
  /**
   * Whether bounding boxes are included in the person detection annotation
   * output.
   */
  includeBoundingBoxes: boolean;
  /**
   * Whether to enable pose landmarks detection. Ignored if
   * 'include_bounding_boxes' is set to false.
   */
  includePoseLandmarks: boolean;
  /**
   * Whether to enable person attributes detection, such as cloth color (black,
   * blue, etc), type (coat, dress, etc), pattern (plain, floral, etc), hair,
   * etc.
   * Ignored if 'include_bounding_boxes' is set to false.
   */
  includeAttributes: boolean;
}

/** Config for TEXT_DETECTION. */
export interface TextDetectionConfig {
  /**
   * Language hint can be specified if the language to be detected is known a
   * priori. It can increase the accuracy of the detection. Language hint must
   * be language code in BCP-47 format.
   *
   * Automatic language detection is performed if no hint is provided.
   */
  languageHints: string[];
  /**
   * Model to use for text detection.
   * Supported values: "builtin/stable" (the default if unset) and
   * "builtin/latest".
   */
  model: string;
}

/** Video segment. */
export interface VideoSegment {
  /**
   * Time-offset, relative to the beginning of the video,
   * corresponding to the start of the segment (inclusive).
   */
  startTimeOffset:
    | Duration
    | undefined;
  /**
   * Time-offset, relative to the beginning of the video,
   * corresponding to the end of the segment (inclusive).
   */
  endTimeOffset: Duration | undefined;
}

/** Video segment level annotation results for label detection. */
export interface LabelSegment {
  /** Video segment where a label was detected. */
  segment:
    | VideoSegment
    | undefined;
  /** Confidence that the label is accurate. Range: [0, 1]. */
  confidence: number;
}

/** Video frame level annotation results for label detection. */
export interface LabelFrame {
  /**
   * Time-offset, relative to the beginning of the video, corresponding to the
   * video frame for this location.
   */
  timeOffset:
    | Duration
    | undefined;
  /** Confidence that the label is accurate. Range: [0, 1]. */
  confidence: number;
}

/** Detected entity from video analysis. */
export interface Entity {
  /**
   * Opaque entity ID. Some IDs may be available in
   * [Google Knowledge Graph Search
   * API](https://developers.google.com/knowledge-graph/).
   */
  entityId: string;
  /** Textual description, e.g., `Fixed-gear bicycle`. */
  description: string;
  /** Language code for `description` in BCP-47 format. */
  languageCode: string;
}

/** Label annotation. */
export interface LabelAnnotation {
  /** Detected entity. */
  entity:
    | Entity
    | undefined;
  /**
   * Common categories for the detected entity.
   * For example, when the label is `Terrier`, the category is likely `dog`. And
   * in some cases there might be more than one categories e.g., `Terrier` could
   * also be a `pet`.
   */
  categoryEntities: Entity[];
  /** All video segments where a label was detected. */
  segments: LabelSegment[];
  /** All video frames where a label was detected. */
  frames: LabelFrame[];
}

/** Video frame level annotation results for explicit content. */
export interface ExplicitContentFrame {
  /**
   * Time-offset, relative to the beginning of the video, corresponding to the
   * video frame for this location.
   */
  timeOffset:
    | Duration
    | undefined;
  /** Likelihood of the pornography content.. */
  pornographyLikelihood: Likelihood;
}

/**
 * Explicit content annotation (based on per-frame visual signals only).
 * If no explicit content has been detected in a frame, no annotations are
 * present for that frame.
 */
export interface ExplicitContentAnnotation {
  /** All video frames where explicit content was detected. */
  frames: ExplicitContentFrame[];
}

/**
 * Normalized bounding box.
 * The normalized vertex coordinates are relative to the original image.
 * Range: [0, 1].
 */
export interface NormalizedBoundingBox {
  /** Left X coordinate. */
  left: number;
  /** Top Y coordinate. */
  top: number;
  /** Right X coordinate. */
  right: number;
  /** Bottom Y coordinate. */
  bottom: number;
}

/**
 * For tracking related features.
 * An object at time_offset with attributes, and located with
 * normalized_bounding_box.
 */
export interface TimestampedObject {
  /** Normalized Bounding box in a frame, where the object is located. */
  normalizedBoundingBox:
    | NormalizedBoundingBox
    | undefined;
  /**
   * Time-offset, relative to the beginning of the video,
   * corresponding to the video frame for this object.
   */
  timeOffset:
    | Duration
    | undefined;
  /** Optional. The attributes of the object in the bounding box. */
  attributes: DetectedAttribute[];
  /** Optional. The detected landmarks. */
  landmarks: DetectedLandmark[];
}

/** A track of an object instance. */
export interface Track {
  /** Video segment of a track. */
  segment:
    | VideoSegment
    | undefined;
  /** The object with timestamp and attributes per frame in the track. */
  timestampedObjects: TimestampedObject[];
  /** Optional. Attributes in the track level. */
  attributes: DetectedAttribute[];
  /** Optional. The confidence score of the tracked object. */
  confidence: number;
}

/** A generic detected attribute represented by name in string format. */
export interface DetectedAttribute {
  /**
   * The name of the attribute, for example, glasses, dark_glasses, mouth_open.
   * A full list of supported type names will be provided in the document.
   */
  name: string;
  /** Detected attribute confidence. Range [0, 1]. */
  confidence: number;
  /**
   * Text value of the detection result. For example, the value for "HairColor"
   * can be "black", "blonde", etc.
   */
  value: string;
}

/** Celebrity definition. */
export interface Celebrity {
  /**
   * The resource name of the celebrity. Have the format
   * `video-intelligence/kg-mid` indicates a celebrity from preloaded gallery.
   * kg-mid is the id in Google knowledge graph, which is unique for the
   * celebrity.
   */
  name: string;
  /** The celebrity name. */
  displayName: string;
  /**
   * Textual description of additional information about the celebrity, if
   * applicable.
   */
  description: string;
}

/**
 * The annotation result of a celebrity face track. RecognizedCelebrity field
 * could be empty if the face track does not have any matched celebrities.
 */
export interface CelebrityTrack {
  /** Top N match of the celebrities for the face in this track. */
  celebrities: CelebrityTrack_RecognizedCelebrity[];
  /** A track of a person's face. */
  faceTrack: Track | undefined;
}

/** The recognized celebrity with confidence score. */
export interface CelebrityTrack_RecognizedCelebrity {
  /** The recognized celebrity. */
  celebrity:
    | Celebrity
    | undefined;
  /** Recognition confidence. Range [0, 1]. */
  confidence: number;
}

/** Celebrity recognition annotation per video. */
export interface CelebrityRecognitionAnnotation {
  /**
   * The tracks detected from the input video, including recognized celebrities
   * and other detected faces in the video.
   */
  celebrityTracks: CelebrityTrack[];
}

/**
 * A generic detected landmark represented by name in string format and a 2D
 * location.
 */
export interface DetectedLandmark {
  /** The name of this landmark, for example, left_hand, right_shoulder. */
  name: string;
  /**
   * The 2D point of the detected landmark using the normalized image
   * coordindate system. The normalized coordinates have the range from 0 to 1.
   */
  point:
    | NormalizedVertex
    | undefined;
  /** The confidence score of the detected landmark. Range [0, 1]. */
  confidence: number;
}

/** Face detection annotation. */
export interface FaceDetectionAnnotation {
  /** The face tracks with attributes. */
  tracks: Track[];
  /** The thumbnail of a person's face. */
  thumbnail: Buffer;
}

/** Person detection annotation per video. */
export interface PersonDetectionAnnotation {
  /** The detected tracks of a person. */
  tracks: Track[];
}

/** Annotation results for a single video. */
export interface VideoAnnotationResults {
  /**
   * Video file location in
   * [Cloud Storage](https://cloud.google.com/storage/).
   */
  inputUri: string;
  /** Video segment on which the annotation is run. */
  segment:
    | VideoSegment
    | undefined;
  /**
   * Topical label annotations on video level or user-specified segment level.
   * There is exactly one element for each unique label.
   */
  segmentLabelAnnotations: LabelAnnotation[];
  /**
   * Presence label annotations on video level or user-specified segment level.
   * There is exactly one element for each unique label. Compared to the
   * existing topical `segment_label_annotations`, this field presents more
   * fine-grained, segment-level labels detected in video content and is made
   * available only when the client sets `LabelDetectionConfig.model` to
   * "builtin/latest" in the request.
   */
  segmentPresenceLabelAnnotations: LabelAnnotation[];
  /**
   * Topical label annotations on shot level.
   * There is exactly one element for each unique label.
   */
  shotLabelAnnotations: LabelAnnotation[];
  /**
   * Presence label annotations on shot level. There is exactly one element for
   * each unique label. Compared to the existing topical
   * `shot_label_annotations`, this field presents more fine-grained, shot-level
   * labels detected in video content and is made available only when the client
   * sets `LabelDetectionConfig.model` to "builtin/latest" in the request.
   */
  shotPresenceLabelAnnotations: LabelAnnotation[];
  /**
   * Label annotations on frame level.
   * There is exactly one element for each unique label.
   */
  frameLabelAnnotations: LabelAnnotation[];
  /** Face detection annotations. */
  faceDetectionAnnotations: FaceDetectionAnnotation[];
  /** Shot annotations. Each shot is represented as a video segment. */
  shotAnnotations: VideoSegment[];
  /** Explicit content annotation. */
  explicitAnnotation:
    | ExplicitContentAnnotation
    | undefined;
  /** Speech transcription. */
  speechTranscriptions: SpeechTranscription[];
  /**
   * OCR text detection and tracking.
   * Annotations for list of detected text snippets. Each will have list of
   * frame information associated with it.
   */
  textAnnotations: TextAnnotation[];
  /** Annotations for list of objects detected and tracked in video. */
  objectAnnotations: ObjectTrackingAnnotation[];
  /** Annotations for list of logos detected, tracked and recognized in video. */
  logoRecognitionAnnotations: LogoRecognitionAnnotation[];
  /** Person detection annotations. */
  personDetectionAnnotations: PersonDetectionAnnotation[];
  /** Celebrity recognition annotations. */
  celebrityRecognitionAnnotations:
    | CelebrityRecognitionAnnotation
    | undefined;
  /**
   * If set, indicates an error. Note that for a single `AnnotateVideoRequest`
   * some videos may succeed and some may fail.
   */
  error: Status | undefined;
}

/**
 * Video annotation response. Included in the `response`
 * field of the `Operation` returned by the `GetOperation`
 * call of the `google::longrunning::Operations` service.
 */
export interface AnnotateVideoResponse {
  /** Annotation results for all videos specified in `AnnotateVideoRequest`. */
  annotationResults: VideoAnnotationResults[];
}

/** Annotation progress for a single video. */
export interface VideoAnnotationProgress {
  /**
   * Video file location in
   * [Cloud Storage](https://cloud.google.com/storage/).
   */
  inputUri: string;
  /**
   * Approximate percentage processed thus far. Guaranteed to be
   * 100 when fully processed.
   */
  progressPercent: number;
  /** Time when the request was received. */
  startTime:
    | Date
    | undefined;
  /** Time of the most recent update. */
  updateTime:
    | Date
    | undefined;
  /**
   * Specifies which feature is being tracked if the request contains more than
   * one feature.
   */
  feature: Feature;
  /**
   * Specifies which segment is being tracked if the request contains more than
   * one segment.
   */
  segment: VideoSegment | undefined;
}

/**
 * Video annotation progress. Included in the `metadata`
 * field of the `Operation` returned by the `GetOperation`
 * call of the `google::longrunning::Operations` service.
 */
export interface AnnotateVideoProgress {
  /** Progress metadata for all videos specified in `AnnotateVideoRequest`. */
  annotationProgress: VideoAnnotationProgress[];
}

/** Config for SPEECH_TRANSCRIPTION. */
export interface SpeechTranscriptionConfig {
  /**
   * Required. *Required* The language of the supplied audio as a
   * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
   * Example: "en-US".
   * See [Language Support](https://cloud.google.com/speech/docs/languages)
   * for a list of the currently supported language codes.
   */
  languageCode: string;
  /**
   * Optional. Maximum number of recognition hypotheses to be returned.
   * Specifically, the maximum number of `SpeechRecognitionAlternative` messages
   * within each `SpeechTranscription`. The server may return fewer than
   * `max_alternatives`. Valid values are `0`-`30`. A value of `0` or `1` will
   * return a maximum of one. If omitted, will return a maximum of one.
   */
  maxAlternatives: number;
  /**
   * Optional. If set to `true`, the server will attempt to filter out
   * profanities, replacing all but the initial character in each filtered word
   * with asterisks, e.g. "f***". If set to `false` or omitted, profanities
   * won't be filtered out.
   */
  filterProfanity: boolean;
  /** Optional. A means to provide context to assist the speech recognition. */
  speechContexts: SpeechContext[];
  /**
   * Optional. If 'true', adds punctuation to recognition result hypotheses.
   * This feature is only available in select languages. Setting this for
   * requests in other languages has no effect at all. The default 'false' value
   * does not add punctuation to result hypotheses. NOTE: "This is currently
   * offered as an experimental service, complimentary to all users. In the
   * future this may be exclusively available as a premium feature."
   */
  enableAutomaticPunctuation: boolean;
  /**
   * Optional. For file formats, such as MXF or MKV, supporting multiple audio
   * tracks, specify up to two tracks. Default: track 0.
   */
  audioTracks: number[];
  /**
   * Optional. If 'true', enables speaker detection for each recognized word in
   * the top alternative of the recognition result using a speaker_tag provided
   * in the WordInfo.
   * Note: When this is true, we send all the words from the beginning of the
   * audio for the top alternative in every consecutive response.
   * This is done in order to improve our speaker tags as our models learn to
   * identify the speakers in the conversation over time.
   */
  enableSpeakerDiarization: boolean;
  /**
   * Optional. If set, specifies the estimated number of speakers in the
   * conversation. If not set, defaults to '2'. Ignored unless
   * enable_speaker_diarization is set to true.
   */
  diarizationSpeakerCount: number;
  /**
   * Optional. If `true`, the top result includes a list of words and the
   * confidence for those words. If `false`, no word-level confidence
   * information is returned. The default is `false`.
   */
  enableWordConfidence: boolean;
}

/**
 * Provides "hints" to the speech recognizer to favor specific words and phrases
 * in the results.
 */
export interface SpeechContext {
  /**
   * Optional. A list of strings containing words and phrases "hints" so that
   * the speech recognition is more likely to recognize them. This can be used
   * to improve the accuracy for specific words and phrases, for example, if
   * specific commands are typically spoken by the user. This can also be used
   * to add additional words to the vocabulary of the recognizer. See
   * [usage limits](https://cloud.google.com/speech/limits#content).
   */
  phrases: string[];
}

/** A speech recognition result corresponding to a portion of the audio. */
export interface SpeechTranscription {
  /**
   * May contain one or more recognition hypotheses (up to the maximum specified
   * in `max_alternatives`).  These alternatives are ordered in terms of
   * accuracy, with the top (first) alternative being the most probable, as
   * ranked by the recognizer.
   */
  alternatives: SpeechRecognitionAlternative[];
  /**
   * Output only. The [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt)
   * language tag of the language in this result. This language code was
   * detected to have the most likelihood of being spoken in the audio.
   */
  languageCode: string;
}

/** Alternative hypotheses (a.k.a. n-best list). */
export interface SpeechRecognitionAlternative {
  /** Transcript text representing the words that the user spoke. */
  transcript: string;
  /**
   * Output only. The confidence estimate between 0.0 and 1.0. A higher number
   * indicates an estimated greater likelihood that the recognized words are
   * correct. This field is set only for the top alternative.
   * This field is not guaranteed to be accurate and users should not rely on it
   * to be always provided.
   * The default of 0.0 is a sentinel value indicating `confidence` was not set.
   */
  confidence: number;
  /**
   * Output only. A list of word-specific information for each recognized word.
   * Note: When `enable_speaker_diarization` is set to true, you will see all
   * the words from the beginning of the audio.
   */
  words: WordInfo[];
}

/**
 * Word-specific information for recognized words. Word information is only
 * included in the response when certain request parameters are set, such
 * as `enable_word_time_offsets`.
 */
export interface WordInfo {
  /**
   * Time offset relative to the beginning of the audio, and
   * corresponding to the start of the spoken word. This field is only set if
   * `enable_word_time_offsets=true` and only in the top hypothesis. This is an
   * experimental feature and the accuracy of the time offset can vary.
   */
  startTime:
    | Duration
    | undefined;
  /**
   * Time offset relative to the beginning of the audio, and
   * corresponding to the end of the spoken word. This field is only set if
   * `enable_word_time_offsets=true` and only in the top hypothesis. This is an
   * experimental feature and the accuracy of the time offset can vary.
   */
  endTime:
    | Duration
    | undefined;
  /** The word corresponding to this set of information. */
  word: string;
  /**
   * Output only. The confidence estimate between 0.0 and 1.0. A higher number
   * indicates an estimated greater likelihood that the recognized words are
   * correct. This field is set only for the top alternative.
   * This field is not guaranteed to be accurate and users should not rely on it
   * to be always provided.
   * The default of 0.0 is a sentinel value indicating `confidence` was not set.
   */
  confidence: number;
  /**
   * Output only. A distinct integer value is assigned for every speaker within
   * the audio. This field specifies which one of those speakers was detected to
   * have spoken this word. Value ranges from 1 up to diarization_speaker_count,
   * and is only set if speaker diarization is enabled.
   */
  speakerTag: number;
}

/**
 * A vertex represents a 2D point in the image.
 * NOTE: the normalized vertex coordinates are relative to the original image
 * and range from 0 to 1.
 */
export interface NormalizedVertex {
  /** X coordinate. */
  x: number;
  /** Y coordinate. */
  y: number;
}

/**
 * Normalized bounding polygon for text (that might not be aligned with axis).
 * Contains list of the corner points in clockwise order starting from
 * top-left corner. For example, for a rectangular bounding box:
 * When the text is horizontal it might look like:
 *         0----1
 *         |    |
 *         3----2
 *
 * When it's clockwise rotated 180 degrees around the top-left corner it
 * becomes:
 *         2----3
 *         |    |
 *         1----0
 *
 * and the vertex order will still be (0, 1, 2, 3). Note that values can be less
 * than 0, or greater than 1 due to trignometric calculations for location of
 * the box.
 */
export interface NormalizedBoundingPoly {
  /** Normalized vertices of the bounding polygon. */
  vertices: NormalizedVertex[];
}

/** Video segment level annotation results for text detection. */
export interface TextSegment {
  /** Video segment where a text snippet was detected. */
  segment:
    | VideoSegment
    | undefined;
  /**
   * Confidence for the track of detected text. It is calculated as the highest
   * over all frames where OCR detected text appears.
   */
  confidence: number;
  /** Information related to the frames where OCR detected text appears. */
  frames: TextFrame[];
}

/**
 * Video frame level annotation results for text annotation (OCR).
 * Contains information regarding timestamp and bounding box locations for the
 * frames containing detected OCR text snippets.
 */
export interface TextFrame {
  /** Bounding polygon of the detected text for this frame. */
  rotatedBoundingBox:
    | NormalizedBoundingPoly
    | undefined;
  /** Timestamp of this frame. */
  timeOffset: Duration | undefined;
}

/**
 * Annotations related to one detected OCR text snippet. This will contain the
 * corresponding text, confidence value, and frame level information for each
 * detection.
 */
export interface TextAnnotation {
  /** The detected text. */
  text: string;
  /** All video segments where OCR detected text appears. */
  segments: TextSegment[];
}

/**
 * Video frame level annotations for object detection and tracking. This field
 * stores per frame location, time offset, and confidence.
 */
export interface ObjectTrackingFrame {
  /** The normalized bounding box location of this object track for the frame. */
  normalizedBoundingBox:
    | NormalizedBoundingBox
    | undefined;
  /** The timestamp of the frame in microseconds. */
  timeOffset: Duration | undefined;
}

/** Annotations corresponding to one tracked object. */
export interface ObjectTrackingAnnotation {
  /**
   * Non-streaming batch mode ONLY.
   * Each object track corresponds to one video segment where it appears.
   */
  segment?:
    | VideoSegment
    | undefined;
  /**
   * Streaming mode ONLY.
   * In streaming mode, we do not know the end time of a tracked object
   * before it is completed. Hence, there is no VideoSegment info returned.
   * Instead, we provide a unique identifiable integer track_id so that
   * the customers can correlate the results of the ongoing
   * ObjectTrackAnnotation of the same track_id over time.
   */
  trackId?:
    | Long
    | undefined;
  /** Entity to specify the object category that this track is labeled as. */
  entity:
    | Entity
    | undefined;
  /** Object category's labeling confidence of this track. */
  confidence: number;
  /**
   * Information corresponding to all frames where this object track appears.
   * Non-streaming batch mode: it may be one or multiple ObjectTrackingFrame
   * messages in frames.
   * Streaming mode: it can only be one ObjectTrackingFrame message in frames.
   */
  frames: ObjectTrackingFrame[];
}

/** Annotation corresponding to one detected, tracked and recognized logo class. */
export interface LogoRecognitionAnnotation {
  /**
   * Entity category information to specify the logo class that all the logo
   * tracks within this LogoRecognitionAnnotation are recognized as.
   */
  entity:
    | Entity
    | undefined;
  /**
   * All logo tracks where the recognized logo appears. Each track corresponds
   * to one logo instance appearing in consecutive frames.
   */
  tracks: Track[];
  /**
   * All video segments where the recognized logo appears. There might be
   * multiple instances of the same logo class appearing in one VideoSegment.
   */
  segments: VideoSegment[];
}

/**
 * The top-level message sent by the client for the `StreamingAnnotateVideo`
 * method. Multiple `StreamingAnnotateVideoRequest` messages are sent.
 * The first message must only contain a `StreamingVideoConfig` message.
 * All subsequent messages must only contain `input_content` data.
 */
export interface StreamingAnnotateVideoRequest {
  /**
   * Provides information to the annotator, specifing how to process the
   * request. The first `AnnotateStreamingVideoRequest` message must only
   * contain a `video_config` message.
   */
  videoConfig?:
    | StreamingVideoConfig
    | undefined;
  /**
   * The video data to be annotated. Chunks of video data are sequentially
   * sent in `StreamingAnnotateVideoRequest` messages. Except the initial
   * `StreamingAnnotateVideoRequest` message containing only
   * `video_config`, all subsequent `AnnotateStreamingVideoRequest`
   * messages must only contain `input_content` field.
   * Note: as with all bytes fields, protobuffers use a pure binary
   * representation (not base64).
   */
  inputContent?: Buffer | undefined;
}

/**
 * Provides information to the annotator that specifies how to process the
 * request.
 */
export interface StreamingVideoConfig {
  /** Config for STREAMING_SHOT_CHANGE_DETECTION. */
  shotChangeDetectionConfig?:
    | StreamingShotChangeDetectionConfig
    | undefined;
  /** Config for STREAMING_LABEL_DETECTION. */
  labelDetectionConfig?:
    | StreamingLabelDetectionConfig
    | undefined;
  /** Config for STREAMING_EXPLICIT_CONTENT_DETECTION. */
  explicitContentDetectionConfig?:
    | StreamingExplicitContentDetectionConfig
    | undefined;
  /** Config for STREAMING_OBJECT_TRACKING. */
  objectTrackingConfig?:
    | StreamingObjectTrackingConfig
    | undefined;
  /** Config for STREAMING_AUTOML_ACTION_RECOGNITION. */
  automlActionRecognitionConfig?:
    | StreamingAutomlActionRecognitionConfig
    | undefined;
  /** Config for STREAMING_AUTOML_CLASSIFICATION. */
  automlClassificationConfig?:
    | StreamingAutomlClassificationConfig
    | undefined;
  /** Config for STREAMING_AUTOML_OBJECT_TRACKING. */
  automlObjectTrackingConfig?:
    | StreamingAutomlObjectTrackingConfig
    | undefined;
  /** Requested annotation feature. */
  feature: StreamingFeature;
  /** Streaming storage option. By default: storage is disabled. */
  storageConfig: StreamingStorageConfig | undefined;
}

/**
 * `StreamingAnnotateVideoResponse` is the only message returned to the client
 * by `StreamingAnnotateVideo`. A series of zero or more
 * `StreamingAnnotateVideoResponse` messages are streamed back to the client.
 */
export interface StreamingAnnotateVideoResponse {
  /**
   * If set, returns a [google.rpc.Status][google.rpc.Status] message that
   * specifies the error for the operation.
   */
  error:
    | Status
    | undefined;
  /** Streaming annotation results. */
  annotationResults:
    | StreamingVideoAnnotationResults
    | undefined;
  /**
   * Google Cloud Storage(GCS) URI that stores annotation results of one
   * streaming session in JSON format.
   * It is the annotation_result_storage_directory
   * from the request followed by '/cloud_project_number-session_id'.
   */
  annotationResultsUri: string;
}

/**
 * Streaming annotation results corresponding to a portion of the video
 * that is currently being processed.
 */
export interface StreamingVideoAnnotationResults {
  /** Shot annotation results. Each shot is represented as a video segment. */
  shotAnnotations: VideoSegment[];
  /** Label annotation results. */
  labelAnnotations: LabelAnnotation[];
  /** Explicit content annotation results. */
  explicitAnnotation:
    | ExplicitContentAnnotation
    | undefined;
  /** Object tracking results. */
  objectAnnotations: ObjectTrackingAnnotation[];
}

/** Config for STREAMING_SHOT_CHANGE_DETECTION. */
export interface StreamingShotChangeDetectionConfig {
}

/** Config for STREAMING_LABEL_DETECTION. */
export interface StreamingLabelDetectionConfig {
  /**
   * Whether the video has been captured from a stationary (i.e. non-moving)
   * camera. When set to true, might improve detection accuracy for moving
   * objects. Default: false.
   */
  stationaryCamera: boolean;
}

/** Config for STREAMING_EXPLICIT_CONTENT_DETECTION. */
export interface StreamingExplicitContentDetectionConfig {
}

/** Config for STREAMING_OBJECT_TRACKING. */
export interface StreamingObjectTrackingConfig {
}

/** Config for STREAMING_AUTOML_ACTION_RECOGNITION. */
export interface StreamingAutomlActionRecognitionConfig {
  /**
   * Resource name of AutoML model.
   * Format: `projects/{project_id}/locations/{location_id}/models/{model_id}`
   */
  modelName: string;
}

/** Config for STREAMING_AUTOML_CLASSIFICATION. */
export interface StreamingAutomlClassificationConfig {
  /**
   * Resource name of AutoML model.
   * Format:
   * `projects/{project_number}/locations/{location_id}/models/{model_id}`
   */
  modelName: string;
}

/** Config for STREAMING_AUTOML_OBJECT_TRACKING. */
export interface StreamingAutomlObjectTrackingConfig {
  /**
   * Resource name of AutoML model.
   * Format: `projects/{project_id}/locations/{location_id}/models/{model_id}`
   */
  modelName: string;
}

/** Config for streaming storage option. */
export interface StreamingStorageConfig {
  /** Enable streaming storage. Default: false. */
  enableStorageAnnotationResult: boolean;
  /**
   * Cloud Storage URI to store all annotation results for one client. Client
   * should specify this field as the top-level storage directory. Annotation
   * results of different sessions will be put into different sub-directories
   * denoted by project_name and session_id. All sub-directories will be auto
   * generated by program and will be made accessible to client in response
   * proto. URIs must be specified in the following format:
   * `gs://bucket-id/object-id` `bucket-id` should be a valid Cloud Storage
   * bucket created by client and bucket permission shall also be configured
   * properly. `object-id` can be arbitrary string that make sense to client.
   * Other URI formats will return error and cause Cloud Storage write failure.
   */
  annotationResultStorageDirectory: string;
}

function createBaseAnnotateVideoRequest(): AnnotateVideoRequest {
  return {
    inputUri: "",
    inputContent: Buffer.alloc(0),
    features: [],
    videoContext: undefined,
    outputUri: "",
    locationId: "",
  };
}

export const AnnotateVideoRequest: MessageFns<AnnotateVideoRequest> = {
  encode(message: AnnotateVideoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inputUri !== "") {
      writer.uint32(10).string(message.inputUri);
    }
    if (message.inputContent.length !== 0) {
      writer.uint32(50).bytes(message.inputContent);
    }
    writer.uint32(18).fork();
    for (const v of message.features) {
      writer.int32(v);
    }
    writer.join();
    if (message.videoContext !== undefined) {
      VideoContext.encode(message.videoContext, writer.uint32(26).fork()).join();
    }
    if (message.outputUri !== "") {
      writer.uint32(34).string(message.outputUri);
    }
    if (message.locationId !== "") {
      writer.uint32(42).string(message.locationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnnotateVideoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnnotateVideoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inputUri = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.inputContent = Buffer.from(reader.bytes());
          continue;
        case 2:
          if (tag === 16) {
            message.features.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.features.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.videoContext = VideoContext.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.outputUri = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.locationId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnnotateVideoRequest {
    return {
      inputUri: isSet(object.inputUri) ? globalThis.String(object.inputUri) : "",
      inputContent: isSet(object.inputContent) ? Buffer.from(bytesFromBase64(object.inputContent)) : Buffer.alloc(0),
      features: globalThis.Array.isArray(object?.features) ? object.features.map((e: any) => featureFromJSON(e)) : [],
      videoContext: isSet(object.videoContext) ? VideoContext.fromJSON(object.videoContext) : undefined,
      outputUri: isSet(object.outputUri) ? globalThis.String(object.outputUri) : "",
      locationId: isSet(object.locationId) ? globalThis.String(object.locationId) : "",
    };
  },

  toJSON(message: AnnotateVideoRequest): unknown {
    const obj: any = {};
    if (message.inputUri !== "") {
      obj.inputUri = message.inputUri;
    }
    if (message.inputContent.length !== 0) {
      obj.inputContent = base64FromBytes(message.inputContent);
    }
    if (message.features?.length) {
      obj.features = message.features.map((e) => featureToJSON(e));
    }
    if (message.videoContext !== undefined) {
      obj.videoContext = VideoContext.toJSON(message.videoContext);
    }
    if (message.outputUri !== "") {
      obj.outputUri = message.outputUri;
    }
    if (message.locationId !== "") {
      obj.locationId = message.locationId;
    }
    return obj;
  },

  create(base?: DeepPartial<AnnotateVideoRequest>): AnnotateVideoRequest {
    return AnnotateVideoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnnotateVideoRequest>): AnnotateVideoRequest {
    const message = createBaseAnnotateVideoRequest();
    message.inputUri = object.inputUri ?? "";
    message.inputContent = object.inputContent ?? Buffer.alloc(0);
    message.features = object.features?.map((e) => e) || [];
    message.videoContext = (object.videoContext !== undefined && object.videoContext !== null)
      ? VideoContext.fromPartial(object.videoContext)
      : undefined;
    message.outputUri = object.outputUri ?? "";
    message.locationId = object.locationId ?? "";
    return message;
  },
};

function createBaseVideoContext(): VideoContext {
  return {
    segments: [],
    labelDetectionConfig: undefined,
    shotChangeDetectionConfig: undefined,
    explicitContentDetectionConfig: undefined,
    faceDetectionConfig: undefined,
    speechTranscriptionConfig: undefined,
    textDetectionConfig: undefined,
    personDetectionConfig: undefined,
    objectTrackingConfig: undefined,
  };
}

export const VideoContext: MessageFns<VideoContext> = {
  encode(message: VideoContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.segments) {
      VideoSegment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.labelDetectionConfig !== undefined) {
      LabelDetectionConfig.encode(message.labelDetectionConfig, writer.uint32(18).fork()).join();
    }
    if (message.shotChangeDetectionConfig !== undefined) {
      ShotChangeDetectionConfig.encode(message.shotChangeDetectionConfig, writer.uint32(26).fork()).join();
    }
    if (message.explicitContentDetectionConfig !== undefined) {
      ExplicitContentDetectionConfig.encode(message.explicitContentDetectionConfig, writer.uint32(34).fork()).join();
    }
    if (message.faceDetectionConfig !== undefined) {
      FaceDetectionConfig.encode(message.faceDetectionConfig, writer.uint32(42).fork()).join();
    }
    if (message.speechTranscriptionConfig !== undefined) {
      SpeechTranscriptionConfig.encode(message.speechTranscriptionConfig, writer.uint32(50).fork()).join();
    }
    if (message.textDetectionConfig !== undefined) {
      TextDetectionConfig.encode(message.textDetectionConfig, writer.uint32(66).fork()).join();
    }
    if (message.personDetectionConfig !== undefined) {
      PersonDetectionConfig.encode(message.personDetectionConfig, writer.uint32(90).fork()).join();
    }
    if (message.objectTrackingConfig !== undefined) {
      ObjectTrackingConfig.encode(message.objectTrackingConfig, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.segments.push(VideoSegment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.labelDetectionConfig = LabelDetectionConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.shotChangeDetectionConfig = ShotChangeDetectionConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.explicitContentDetectionConfig = ExplicitContentDetectionConfig.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.faceDetectionConfig = FaceDetectionConfig.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.speechTranscriptionConfig = SpeechTranscriptionConfig.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.textDetectionConfig = TextDetectionConfig.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.personDetectionConfig = PersonDetectionConfig.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.objectTrackingConfig = ObjectTrackingConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoContext {
    return {
      segments: globalThis.Array.isArray(object?.segments)
        ? object.segments.map((e: any) => VideoSegment.fromJSON(e))
        : [],
      labelDetectionConfig: isSet(object.labelDetectionConfig)
        ? LabelDetectionConfig.fromJSON(object.labelDetectionConfig)
        : undefined,
      shotChangeDetectionConfig: isSet(object.shotChangeDetectionConfig)
        ? ShotChangeDetectionConfig.fromJSON(object.shotChangeDetectionConfig)
        : undefined,
      explicitContentDetectionConfig: isSet(object.explicitContentDetectionConfig)
        ? ExplicitContentDetectionConfig.fromJSON(object.explicitContentDetectionConfig)
        : undefined,
      faceDetectionConfig: isSet(object.faceDetectionConfig)
        ? FaceDetectionConfig.fromJSON(object.faceDetectionConfig)
        : undefined,
      speechTranscriptionConfig: isSet(object.speechTranscriptionConfig)
        ? SpeechTranscriptionConfig.fromJSON(object.speechTranscriptionConfig)
        : undefined,
      textDetectionConfig: isSet(object.textDetectionConfig)
        ? TextDetectionConfig.fromJSON(object.textDetectionConfig)
        : undefined,
      personDetectionConfig: isSet(object.personDetectionConfig)
        ? PersonDetectionConfig.fromJSON(object.personDetectionConfig)
        : undefined,
      objectTrackingConfig: isSet(object.objectTrackingConfig)
        ? ObjectTrackingConfig.fromJSON(object.objectTrackingConfig)
        : undefined,
    };
  },

  toJSON(message: VideoContext): unknown {
    const obj: any = {};
    if (message.segments?.length) {
      obj.segments = message.segments.map((e) => VideoSegment.toJSON(e));
    }
    if (message.labelDetectionConfig !== undefined) {
      obj.labelDetectionConfig = LabelDetectionConfig.toJSON(message.labelDetectionConfig);
    }
    if (message.shotChangeDetectionConfig !== undefined) {
      obj.shotChangeDetectionConfig = ShotChangeDetectionConfig.toJSON(message.shotChangeDetectionConfig);
    }
    if (message.explicitContentDetectionConfig !== undefined) {
      obj.explicitContentDetectionConfig = ExplicitContentDetectionConfig.toJSON(
        message.explicitContentDetectionConfig,
      );
    }
    if (message.faceDetectionConfig !== undefined) {
      obj.faceDetectionConfig = FaceDetectionConfig.toJSON(message.faceDetectionConfig);
    }
    if (message.speechTranscriptionConfig !== undefined) {
      obj.speechTranscriptionConfig = SpeechTranscriptionConfig.toJSON(message.speechTranscriptionConfig);
    }
    if (message.textDetectionConfig !== undefined) {
      obj.textDetectionConfig = TextDetectionConfig.toJSON(message.textDetectionConfig);
    }
    if (message.personDetectionConfig !== undefined) {
      obj.personDetectionConfig = PersonDetectionConfig.toJSON(message.personDetectionConfig);
    }
    if (message.objectTrackingConfig !== undefined) {
      obj.objectTrackingConfig = ObjectTrackingConfig.toJSON(message.objectTrackingConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<VideoContext>): VideoContext {
    return VideoContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VideoContext>): VideoContext {
    const message = createBaseVideoContext();
    message.segments = object.segments?.map((e) => VideoSegment.fromPartial(e)) || [];
    message.labelDetectionConfig = (object.labelDetectionConfig !== undefined && object.labelDetectionConfig !== null)
      ? LabelDetectionConfig.fromPartial(object.labelDetectionConfig)
      : undefined;
    message.shotChangeDetectionConfig =
      (object.shotChangeDetectionConfig !== undefined && object.shotChangeDetectionConfig !== null)
        ? ShotChangeDetectionConfig.fromPartial(object.shotChangeDetectionConfig)
        : undefined;
    message.explicitContentDetectionConfig =
      (object.explicitContentDetectionConfig !== undefined && object.explicitContentDetectionConfig !== null)
        ? ExplicitContentDetectionConfig.fromPartial(object.explicitContentDetectionConfig)
        : undefined;
    message.faceDetectionConfig = (object.faceDetectionConfig !== undefined && object.faceDetectionConfig !== null)
      ? FaceDetectionConfig.fromPartial(object.faceDetectionConfig)
      : undefined;
    message.speechTranscriptionConfig =
      (object.speechTranscriptionConfig !== undefined && object.speechTranscriptionConfig !== null)
        ? SpeechTranscriptionConfig.fromPartial(object.speechTranscriptionConfig)
        : undefined;
    message.textDetectionConfig = (object.textDetectionConfig !== undefined && object.textDetectionConfig !== null)
      ? TextDetectionConfig.fromPartial(object.textDetectionConfig)
      : undefined;
    message.personDetectionConfig =
      (object.personDetectionConfig !== undefined && object.personDetectionConfig !== null)
        ? PersonDetectionConfig.fromPartial(object.personDetectionConfig)
        : undefined;
    message.objectTrackingConfig = (object.objectTrackingConfig !== undefined && object.objectTrackingConfig !== null)
      ? ObjectTrackingConfig.fromPartial(object.objectTrackingConfig)
      : undefined;
    return message;
  },
};

function createBaseLabelDetectionConfig(): LabelDetectionConfig {
  return {
    labelDetectionMode: 0,
    stationaryCamera: false,
    model: "",
    frameConfidenceThreshold: 0,
    videoConfidenceThreshold: 0,
  };
}

export const LabelDetectionConfig: MessageFns<LabelDetectionConfig> = {
  encode(message: LabelDetectionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.labelDetectionMode !== 0) {
      writer.uint32(8).int32(message.labelDetectionMode);
    }
    if (message.stationaryCamera !== false) {
      writer.uint32(16).bool(message.stationaryCamera);
    }
    if (message.model !== "") {
      writer.uint32(26).string(message.model);
    }
    if (message.frameConfidenceThreshold !== 0) {
      writer.uint32(37).float(message.frameConfidenceThreshold);
    }
    if (message.videoConfidenceThreshold !== 0) {
      writer.uint32(45).float(message.videoConfidenceThreshold);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LabelDetectionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLabelDetectionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.labelDetectionMode = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.stationaryCamera = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.model = reader.string();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.frameConfidenceThreshold = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.videoConfidenceThreshold = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LabelDetectionConfig {
    return {
      labelDetectionMode: isSet(object.labelDetectionMode) ? labelDetectionModeFromJSON(object.labelDetectionMode) : 0,
      stationaryCamera: isSet(object.stationaryCamera) ? globalThis.Boolean(object.stationaryCamera) : false,
      model: isSet(object.model) ? globalThis.String(object.model) : "",
      frameConfidenceThreshold: isSet(object.frameConfidenceThreshold)
        ? globalThis.Number(object.frameConfidenceThreshold)
        : 0,
      videoConfidenceThreshold: isSet(object.videoConfidenceThreshold)
        ? globalThis.Number(object.videoConfidenceThreshold)
        : 0,
    };
  },

  toJSON(message: LabelDetectionConfig): unknown {
    const obj: any = {};
    if (message.labelDetectionMode !== 0) {
      obj.labelDetectionMode = labelDetectionModeToJSON(message.labelDetectionMode);
    }
    if (message.stationaryCamera !== false) {
      obj.stationaryCamera = message.stationaryCamera;
    }
    if (message.model !== "") {
      obj.model = message.model;
    }
    if (message.frameConfidenceThreshold !== 0) {
      obj.frameConfidenceThreshold = message.frameConfidenceThreshold;
    }
    if (message.videoConfidenceThreshold !== 0) {
      obj.videoConfidenceThreshold = message.videoConfidenceThreshold;
    }
    return obj;
  },

  create(base?: DeepPartial<LabelDetectionConfig>): LabelDetectionConfig {
    return LabelDetectionConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LabelDetectionConfig>): LabelDetectionConfig {
    const message = createBaseLabelDetectionConfig();
    message.labelDetectionMode = object.labelDetectionMode ?? 0;
    message.stationaryCamera = object.stationaryCamera ?? false;
    message.model = object.model ?? "";
    message.frameConfidenceThreshold = object.frameConfidenceThreshold ?? 0;
    message.videoConfidenceThreshold = object.videoConfidenceThreshold ?? 0;
    return message;
  },
};

function createBaseShotChangeDetectionConfig(): ShotChangeDetectionConfig {
  return { model: "" };
}

export const ShotChangeDetectionConfig: MessageFns<ShotChangeDetectionConfig> = {
  encode(message: ShotChangeDetectionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model !== "") {
      writer.uint32(10).string(message.model);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShotChangeDetectionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShotChangeDetectionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.model = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShotChangeDetectionConfig {
    return { model: isSet(object.model) ? globalThis.String(object.model) : "" };
  },

  toJSON(message: ShotChangeDetectionConfig): unknown {
    const obj: any = {};
    if (message.model !== "") {
      obj.model = message.model;
    }
    return obj;
  },

  create(base?: DeepPartial<ShotChangeDetectionConfig>): ShotChangeDetectionConfig {
    return ShotChangeDetectionConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ShotChangeDetectionConfig>): ShotChangeDetectionConfig {
    const message = createBaseShotChangeDetectionConfig();
    message.model = object.model ?? "";
    return message;
  },
};

function createBaseObjectTrackingConfig(): ObjectTrackingConfig {
  return { model: "" };
}

export const ObjectTrackingConfig: MessageFns<ObjectTrackingConfig> = {
  encode(message: ObjectTrackingConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model !== "") {
      writer.uint32(10).string(message.model);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ObjectTrackingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObjectTrackingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.model = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ObjectTrackingConfig {
    return { model: isSet(object.model) ? globalThis.String(object.model) : "" };
  },

  toJSON(message: ObjectTrackingConfig): unknown {
    const obj: any = {};
    if (message.model !== "") {
      obj.model = message.model;
    }
    return obj;
  },

  create(base?: DeepPartial<ObjectTrackingConfig>): ObjectTrackingConfig {
    return ObjectTrackingConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ObjectTrackingConfig>): ObjectTrackingConfig {
    const message = createBaseObjectTrackingConfig();
    message.model = object.model ?? "";
    return message;
  },
};

function createBaseExplicitContentDetectionConfig(): ExplicitContentDetectionConfig {
  return { model: "" };
}

export const ExplicitContentDetectionConfig: MessageFns<ExplicitContentDetectionConfig> = {
  encode(message: ExplicitContentDetectionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model !== "") {
      writer.uint32(10).string(message.model);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExplicitContentDetectionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExplicitContentDetectionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.model = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExplicitContentDetectionConfig {
    return { model: isSet(object.model) ? globalThis.String(object.model) : "" };
  },

  toJSON(message: ExplicitContentDetectionConfig): unknown {
    const obj: any = {};
    if (message.model !== "") {
      obj.model = message.model;
    }
    return obj;
  },

  create(base?: DeepPartial<ExplicitContentDetectionConfig>): ExplicitContentDetectionConfig {
    return ExplicitContentDetectionConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExplicitContentDetectionConfig>): ExplicitContentDetectionConfig {
    const message = createBaseExplicitContentDetectionConfig();
    message.model = object.model ?? "";
    return message;
  },
};

function createBaseFaceDetectionConfig(): FaceDetectionConfig {
  return { model: "", includeBoundingBoxes: false, includeAttributes: false };
}

export const FaceDetectionConfig: MessageFns<FaceDetectionConfig> = {
  encode(message: FaceDetectionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model !== "") {
      writer.uint32(10).string(message.model);
    }
    if (message.includeBoundingBoxes !== false) {
      writer.uint32(16).bool(message.includeBoundingBoxes);
    }
    if (message.includeAttributes !== false) {
      writer.uint32(40).bool(message.includeAttributes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FaceDetectionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFaceDetectionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.model = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.includeBoundingBoxes = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.includeAttributes = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FaceDetectionConfig {
    return {
      model: isSet(object.model) ? globalThis.String(object.model) : "",
      includeBoundingBoxes: isSet(object.includeBoundingBoxes)
        ? globalThis.Boolean(object.includeBoundingBoxes)
        : false,
      includeAttributes: isSet(object.includeAttributes) ? globalThis.Boolean(object.includeAttributes) : false,
    };
  },

  toJSON(message: FaceDetectionConfig): unknown {
    const obj: any = {};
    if (message.model !== "") {
      obj.model = message.model;
    }
    if (message.includeBoundingBoxes !== false) {
      obj.includeBoundingBoxes = message.includeBoundingBoxes;
    }
    if (message.includeAttributes !== false) {
      obj.includeAttributes = message.includeAttributes;
    }
    return obj;
  },

  create(base?: DeepPartial<FaceDetectionConfig>): FaceDetectionConfig {
    return FaceDetectionConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FaceDetectionConfig>): FaceDetectionConfig {
    const message = createBaseFaceDetectionConfig();
    message.model = object.model ?? "";
    message.includeBoundingBoxes = object.includeBoundingBoxes ?? false;
    message.includeAttributes = object.includeAttributes ?? false;
    return message;
  },
};

function createBasePersonDetectionConfig(): PersonDetectionConfig {
  return { includeBoundingBoxes: false, includePoseLandmarks: false, includeAttributes: false };
}

export const PersonDetectionConfig: MessageFns<PersonDetectionConfig> = {
  encode(message: PersonDetectionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.includeBoundingBoxes !== false) {
      writer.uint32(8).bool(message.includeBoundingBoxes);
    }
    if (message.includePoseLandmarks !== false) {
      writer.uint32(16).bool(message.includePoseLandmarks);
    }
    if (message.includeAttributes !== false) {
      writer.uint32(24).bool(message.includeAttributes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PersonDetectionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePersonDetectionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.includeBoundingBoxes = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.includePoseLandmarks = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.includeAttributes = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PersonDetectionConfig {
    return {
      includeBoundingBoxes: isSet(object.includeBoundingBoxes)
        ? globalThis.Boolean(object.includeBoundingBoxes)
        : false,
      includePoseLandmarks: isSet(object.includePoseLandmarks)
        ? globalThis.Boolean(object.includePoseLandmarks)
        : false,
      includeAttributes: isSet(object.includeAttributes) ? globalThis.Boolean(object.includeAttributes) : false,
    };
  },

  toJSON(message: PersonDetectionConfig): unknown {
    const obj: any = {};
    if (message.includeBoundingBoxes !== false) {
      obj.includeBoundingBoxes = message.includeBoundingBoxes;
    }
    if (message.includePoseLandmarks !== false) {
      obj.includePoseLandmarks = message.includePoseLandmarks;
    }
    if (message.includeAttributes !== false) {
      obj.includeAttributes = message.includeAttributes;
    }
    return obj;
  },

  create(base?: DeepPartial<PersonDetectionConfig>): PersonDetectionConfig {
    return PersonDetectionConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PersonDetectionConfig>): PersonDetectionConfig {
    const message = createBasePersonDetectionConfig();
    message.includeBoundingBoxes = object.includeBoundingBoxes ?? false;
    message.includePoseLandmarks = object.includePoseLandmarks ?? false;
    message.includeAttributes = object.includeAttributes ?? false;
    return message;
  },
};

function createBaseTextDetectionConfig(): TextDetectionConfig {
  return { languageHints: [], model: "" };
}

export const TextDetectionConfig: MessageFns<TextDetectionConfig> = {
  encode(message: TextDetectionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.languageHints) {
      writer.uint32(10).string(v!);
    }
    if (message.model !== "") {
      writer.uint32(18).string(message.model);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextDetectionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextDetectionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.languageHints.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.model = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextDetectionConfig {
    return {
      languageHints: globalThis.Array.isArray(object?.languageHints)
        ? object.languageHints.map((e: any) => globalThis.String(e))
        : [],
      model: isSet(object.model) ? globalThis.String(object.model) : "",
    };
  },

  toJSON(message: TextDetectionConfig): unknown {
    const obj: any = {};
    if (message.languageHints?.length) {
      obj.languageHints = message.languageHints;
    }
    if (message.model !== "") {
      obj.model = message.model;
    }
    return obj;
  },

  create(base?: DeepPartial<TextDetectionConfig>): TextDetectionConfig {
    return TextDetectionConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TextDetectionConfig>): TextDetectionConfig {
    const message = createBaseTextDetectionConfig();
    message.languageHints = object.languageHints?.map((e) => e) || [];
    message.model = object.model ?? "";
    return message;
  },
};

function createBaseVideoSegment(): VideoSegment {
  return { startTimeOffset: undefined, endTimeOffset: undefined };
}

export const VideoSegment: MessageFns<VideoSegment> = {
  encode(message: VideoSegment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTimeOffset !== undefined) {
      Duration.encode(message.startTimeOffset, writer.uint32(10).fork()).join();
    }
    if (message.endTimeOffset !== undefined) {
      Duration.encode(message.endTimeOffset, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoSegment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoSegment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.startTimeOffset = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTimeOffset = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoSegment {
    return {
      startTimeOffset: isSet(object.startTimeOffset) ? Duration.fromJSON(object.startTimeOffset) : undefined,
      endTimeOffset: isSet(object.endTimeOffset) ? Duration.fromJSON(object.endTimeOffset) : undefined,
    };
  },

  toJSON(message: VideoSegment): unknown {
    const obj: any = {};
    if (message.startTimeOffset !== undefined) {
      obj.startTimeOffset = Duration.toJSON(message.startTimeOffset);
    }
    if (message.endTimeOffset !== undefined) {
      obj.endTimeOffset = Duration.toJSON(message.endTimeOffset);
    }
    return obj;
  },

  create(base?: DeepPartial<VideoSegment>): VideoSegment {
    return VideoSegment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VideoSegment>): VideoSegment {
    const message = createBaseVideoSegment();
    message.startTimeOffset = (object.startTimeOffset !== undefined && object.startTimeOffset !== null)
      ? Duration.fromPartial(object.startTimeOffset)
      : undefined;
    message.endTimeOffset = (object.endTimeOffset !== undefined && object.endTimeOffset !== null)
      ? Duration.fromPartial(object.endTimeOffset)
      : undefined;
    return message;
  },
};

function createBaseLabelSegment(): LabelSegment {
  return { segment: undefined, confidence: 0 };
}

export const LabelSegment: MessageFns<LabelSegment> = {
  encode(message: LabelSegment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.segment !== undefined) {
      VideoSegment.encode(message.segment, writer.uint32(10).fork()).join();
    }
    if (message.confidence !== 0) {
      writer.uint32(21).float(message.confidence);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LabelSegment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLabelSegment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.segment = VideoSegment.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.confidence = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LabelSegment {
    return {
      segment: isSet(object.segment) ? VideoSegment.fromJSON(object.segment) : undefined,
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
    };
  },

  toJSON(message: LabelSegment): unknown {
    const obj: any = {};
    if (message.segment !== undefined) {
      obj.segment = VideoSegment.toJSON(message.segment);
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    return obj;
  },

  create(base?: DeepPartial<LabelSegment>): LabelSegment {
    return LabelSegment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LabelSegment>): LabelSegment {
    const message = createBaseLabelSegment();
    message.segment = (object.segment !== undefined && object.segment !== null)
      ? VideoSegment.fromPartial(object.segment)
      : undefined;
    message.confidence = object.confidence ?? 0;
    return message;
  },
};

function createBaseLabelFrame(): LabelFrame {
  return { timeOffset: undefined, confidence: 0 };
}

export const LabelFrame: MessageFns<LabelFrame> = {
  encode(message: LabelFrame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timeOffset !== undefined) {
      Duration.encode(message.timeOffset, writer.uint32(10).fork()).join();
    }
    if (message.confidence !== 0) {
      writer.uint32(21).float(message.confidence);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LabelFrame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLabelFrame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.timeOffset = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.confidence = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LabelFrame {
    return {
      timeOffset: isSet(object.timeOffset) ? Duration.fromJSON(object.timeOffset) : undefined,
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
    };
  },

  toJSON(message: LabelFrame): unknown {
    const obj: any = {};
    if (message.timeOffset !== undefined) {
      obj.timeOffset = Duration.toJSON(message.timeOffset);
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    return obj;
  },

  create(base?: DeepPartial<LabelFrame>): LabelFrame {
    return LabelFrame.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LabelFrame>): LabelFrame {
    const message = createBaseLabelFrame();
    message.timeOffset = (object.timeOffset !== undefined && object.timeOffset !== null)
      ? Duration.fromPartial(object.timeOffset)
      : undefined;
    message.confidence = object.confidence ?? 0;
    return message;
  },
};

function createBaseEntity(): Entity {
  return { entityId: "", description: "", languageCode: "" };
}

export const Entity: MessageFns<Entity> = {
  encode(message: Entity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entityId !== "") {
      writer.uint32(10).string(message.entityId);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Entity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entityId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Entity {
    return {
      entityId: isSet(object.entityId) ? globalThis.String(object.entityId) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: Entity): unknown {
    const obj: any = {};
    if (message.entityId !== "") {
      obj.entityId = message.entityId;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<Entity>): Entity {
    return Entity.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Entity>): Entity {
    const message = createBaseEntity();
    message.entityId = object.entityId ?? "";
    message.description = object.description ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseLabelAnnotation(): LabelAnnotation {
  return { entity: undefined, categoryEntities: [], segments: [], frames: [] };
}

export const LabelAnnotation: MessageFns<LabelAnnotation> = {
  encode(message: LabelAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entity !== undefined) {
      Entity.encode(message.entity, writer.uint32(10).fork()).join();
    }
    for (const v of message.categoryEntities) {
      Entity.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.segments) {
      LabelSegment.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.frames) {
      LabelFrame.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LabelAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLabelAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entity = Entity.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.categoryEntities.push(Entity.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.segments.push(LabelSegment.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.frames.push(LabelFrame.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LabelAnnotation {
    return {
      entity: isSet(object.entity) ? Entity.fromJSON(object.entity) : undefined,
      categoryEntities: globalThis.Array.isArray(object?.categoryEntities)
        ? object.categoryEntities.map((e: any) => Entity.fromJSON(e))
        : [],
      segments: globalThis.Array.isArray(object?.segments)
        ? object.segments.map((e: any) => LabelSegment.fromJSON(e))
        : [],
      frames: globalThis.Array.isArray(object?.frames) ? object.frames.map((e: any) => LabelFrame.fromJSON(e)) : [],
    };
  },

  toJSON(message: LabelAnnotation): unknown {
    const obj: any = {};
    if (message.entity !== undefined) {
      obj.entity = Entity.toJSON(message.entity);
    }
    if (message.categoryEntities?.length) {
      obj.categoryEntities = message.categoryEntities.map((e) => Entity.toJSON(e));
    }
    if (message.segments?.length) {
      obj.segments = message.segments.map((e) => LabelSegment.toJSON(e));
    }
    if (message.frames?.length) {
      obj.frames = message.frames.map((e) => LabelFrame.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<LabelAnnotation>): LabelAnnotation {
    return LabelAnnotation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LabelAnnotation>): LabelAnnotation {
    const message = createBaseLabelAnnotation();
    message.entity = (object.entity !== undefined && object.entity !== null)
      ? Entity.fromPartial(object.entity)
      : undefined;
    message.categoryEntities = object.categoryEntities?.map((e) => Entity.fromPartial(e)) || [];
    message.segments = object.segments?.map((e) => LabelSegment.fromPartial(e)) || [];
    message.frames = object.frames?.map((e) => LabelFrame.fromPartial(e)) || [];
    return message;
  },
};

function createBaseExplicitContentFrame(): ExplicitContentFrame {
  return { timeOffset: undefined, pornographyLikelihood: 0 };
}

export const ExplicitContentFrame: MessageFns<ExplicitContentFrame> = {
  encode(message: ExplicitContentFrame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timeOffset !== undefined) {
      Duration.encode(message.timeOffset, writer.uint32(10).fork()).join();
    }
    if (message.pornographyLikelihood !== 0) {
      writer.uint32(16).int32(message.pornographyLikelihood);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExplicitContentFrame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExplicitContentFrame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.timeOffset = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pornographyLikelihood = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExplicitContentFrame {
    return {
      timeOffset: isSet(object.timeOffset) ? Duration.fromJSON(object.timeOffset) : undefined,
      pornographyLikelihood: isSet(object.pornographyLikelihood) ? likelihoodFromJSON(object.pornographyLikelihood) : 0,
    };
  },

  toJSON(message: ExplicitContentFrame): unknown {
    const obj: any = {};
    if (message.timeOffset !== undefined) {
      obj.timeOffset = Duration.toJSON(message.timeOffset);
    }
    if (message.pornographyLikelihood !== 0) {
      obj.pornographyLikelihood = likelihoodToJSON(message.pornographyLikelihood);
    }
    return obj;
  },

  create(base?: DeepPartial<ExplicitContentFrame>): ExplicitContentFrame {
    return ExplicitContentFrame.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExplicitContentFrame>): ExplicitContentFrame {
    const message = createBaseExplicitContentFrame();
    message.timeOffset = (object.timeOffset !== undefined && object.timeOffset !== null)
      ? Duration.fromPartial(object.timeOffset)
      : undefined;
    message.pornographyLikelihood = object.pornographyLikelihood ?? 0;
    return message;
  },
};

function createBaseExplicitContentAnnotation(): ExplicitContentAnnotation {
  return { frames: [] };
}

export const ExplicitContentAnnotation: MessageFns<ExplicitContentAnnotation> = {
  encode(message: ExplicitContentAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.frames) {
      ExplicitContentFrame.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExplicitContentAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExplicitContentAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.frames.push(ExplicitContentFrame.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExplicitContentAnnotation {
    return {
      frames: globalThis.Array.isArray(object?.frames)
        ? object.frames.map((e: any) => ExplicitContentFrame.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ExplicitContentAnnotation): unknown {
    const obj: any = {};
    if (message.frames?.length) {
      obj.frames = message.frames.map((e) => ExplicitContentFrame.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ExplicitContentAnnotation>): ExplicitContentAnnotation {
    return ExplicitContentAnnotation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExplicitContentAnnotation>): ExplicitContentAnnotation {
    const message = createBaseExplicitContentAnnotation();
    message.frames = object.frames?.map((e) => ExplicitContentFrame.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNormalizedBoundingBox(): NormalizedBoundingBox {
  return { left: 0, top: 0, right: 0, bottom: 0 };
}

export const NormalizedBoundingBox: MessageFns<NormalizedBoundingBox> = {
  encode(message: NormalizedBoundingBox, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.left !== 0) {
      writer.uint32(13).float(message.left);
    }
    if (message.top !== 0) {
      writer.uint32(21).float(message.top);
    }
    if (message.right !== 0) {
      writer.uint32(29).float(message.right);
    }
    if (message.bottom !== 0) {
      writer.uint32(37).float(message.bottom);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NormalizedBoundingBox {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNormalizedBoundingBox();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.left = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.top = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.right = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.bottom = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NormalizedBoundingBox {
    return {
      left: isSet(object.left) ? globalThis.Number(object.left) : 0,
      top: isSet(object.top) ? globalThis.Number(object.top) : 0,
      right: isSet(object.right) ? globalThis.Number(object.right) : 0,
      bottom: isSet(object.bottom) ? globalThis.Number(object.bottom) : 0,
    };
  },

  toJSON(message: NormalizedBoundingBox): unknown {
    const obj: any = {};
    if (message.left !== 0) {
      obj.left = message.left;
    }
    if (message.top !== 0) {
      obj.top = message.top;
    }
    if (message.right !== 0) {
      obj.right = message.right;
    }
    if (message.bottom !== 0) {
      obj.bottom = message.bottom;
    }
    return obj;
  },

  create(base?: DeepPartial<NormalizedBoundingBox>): NormalizedBoundingBox {
    return NormalizedBoundingBox.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NormalizedBoundingBox>): NormalizedBoundingBox {
    const message = createBaseNormalizedBoundingBox();
    message.left = object.left ?? 0;
    message.top = object.top ?? 0;
    message.right = object.right ?? 0;
    message.bottom = object.bottom ?? 0;
    return message;
  },
};

function createBaseTimestampedObject(): TimestampedObject {
  return { normalizedBoundingBox: undefined, timeOffset: undefined, attributes: [], landmarks: [] };
}

export const TimestampedObject: MessageFns<TimestampedObject> = {
  encode(message: TimestampedObject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.normalizedBoundingBox !== undefined) {
      NormalizedBoundingBox.encode(message.normalizedBoundingBox, writer.uint32(10).fork()).join();
    }
    if (message.timeOffset !== undefined) {
      Duration.encode(message.timeOffset, writer.uint32(18).fork()).join();
    }
    for (const v of message.attributes) {
      DetectedAttribute.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.landmarks) {
      DetectedLandmark.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimestampedObject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimestampedObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.normalizedBoundingBox = NormalizedBoundingBox.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.timeOffset = Duration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.attributes.push(DetectedAttribute.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.landmarks.push(DetectedLandmark.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimestampedObject {
    return {
      normalizedBoundingBox: isSet(object.normalizedBoundingBox)
        ? NormalizedBoundingBox.fromJSON(object.normalizedBoundingBox)
        : undefined,
      timeOffset: isSet(object.timeOffset) ? Duration.fromJSON(object.timeOffset) : undefined,
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => DetectedAttribute.fromJSON(e))
        : [],
      landmarks: globalThis.Array.isArray(object?.landmarks)
        ? object.landmarks.map((e: any) => DetectedLandmark.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TimestampedObject): unknown {
    const obj: any = {};
    if (message.normalizedBoundingBox !== undefined) {
      obj.normalizedBoundingBox = NormalizedBoundingBox.toJSON(message.normalizedBoundingBox);
    }
    if (message.timeOffset !== undefined) {
      obj.timeOffset = Duration.toJSON(message.timeOffset);
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => DetectedAttribute.toJSON(e));
    }
    if (message.landmarks?.length) {
      obj.landmarks = message.landmarks.map((e) => DetectedLandmark.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TimestampedObject>): TimestampedObject {
    return TimestampedObject.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TimestampedObject>): TimestampedObject {
    const message = createBaseTimestampedObject();
    message.normalizedBoundingBox =
      (object.normalizedBoundingBox !== undefined && object.normalizedBoundingBox !== null)
        ? NormalizedBoundingBox.fromPartial(object.normalizedBoundingBox)
        : undefined;
    message.timeOffset = (object.timeOffset !== undefined && object.timeOffset !== null)
      ? Duration.fromPartial(object.timeOffset)
      : undefined;
    message.attributes = object.attributes?.map((e) => DetectedAttribute.fromPartial(e)) || [];
    message.landmarks = object.landmarks?.map((e) => DetectedLandmark.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTrack(): Track {
  return { segment: undefined, timestampedObjects: [], attributes: [], confidence: 0 };
}

export const Track: MessageFns<Track> = {
  encode(message: Track, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.segment !== undefined) {
      VideoSegment.encode(message.segment, writer.uint32(10).fork()).join();
    }
    for (const v of message.timestampedObjects) {
      TimestampedObject.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.attributes) {
      DetectedAttribute.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.confidence !== 0) {
      writer.uint32(37).float(message.confidence);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Track {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrack();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.segment = VideoSegment.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.timestampedObjects.push(TimestampedObject.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.attributes.push(DetectedAttribute.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.confidence = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Track {
    return {
      segment: isSet(object.segment) ? VideoSegment.fromJSON(object.segment) : undefined,
      timestampedObjects: globalThis.Array.isArray(object?.timestampedObjects)
        ? object.timestampedObjects.map((e: any) => TimestampedObject.fromJSON(e))
        : [],
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => DetectedAttribute.fromJSON(e))
        : [],
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
    };
  },

  toJSON(message: Track): unknown {
    const obj: any = {};
    if (message.segment !== undefined) {
      obj.segment = VideoSegment.toJSON(message.segment);
    }
    if (message.timestampedObjects?.length) {
      obj.timestampedObjects = message.timestampedObjects.map((e) => TimestampedObject.toJSON(e));
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => DetectedAttribute.toJSON(e));
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    return obj;
  },

  create(base?: DeepPartial<Track>): Track {
    return Track.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Track>): Track {
    const message = createBaseTrack();
    message.segment = (object.segment !== undefined && object.segment !== null)
      ? VideoSegment.fromPartial(object.segment)
      : undefined;
    message.timestampedObjects = object.timestampedObjects?.map((e) => TimestampedObject.fromPartial(e)) || [];
    message.attributes = object.attributes?.map((e) => DetectedAttribute.fromPartial(e)) || [];
    message.confidence = object.confidence ?? 0;
    return message;
  },
};

function createBaseDetectedAttribute(): DetectedAttribute {
  return { name: "", confidence: 0, value: "" };
}

export const DetectedAttribute: MessageFns<DetectedAttribute> = {
  encode(message: DetectedAttribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.confidence !== 0) {
      writer.uint32(21).float(message.confidence);
    }
    if (message.value !== "") {
      writer.uint32(26).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetectedAttribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetectedAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.confidence = reader.float();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetectedAttribute {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DetectedAttribute): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<DetectedAttribute>): DetectedAttribute {
    return DetectedAttribute.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DetectedAttribute>): DetectedAttribute {
    const message = createBaseDetectedAttribute();
    message.name = object.name ?? "";
    message.confidence = object.confidence ?? 0;
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseCelebrity(): Celebrity {
  return { name: "", displayName: "", description: "" };
}

export const Celebrity: MessageFns<Celebrity> = {
  encode(message: Celebrity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Celebrity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCelebrity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Celebrity {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: Celebrity): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<Celebrity>): Celebrity {
    return Celebrity.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Celebrity>): Celebrity {
    const message = createBaseCelebrity();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseCelebrityTrack(): CelebrityTrack {
  return { celebrities: [], faceTrack: undefined };
}

export const CelebrityTrack: MessageFns<CelebrityTrack> = {
  encode(message: CelebrityTrack, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.celebrities) {
      CelebrityTrack_RecognizedCelebrity.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.faceTrack !== undefined) {
      Track.encode(message.faceTrack, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CelebrityTrack {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCelebrityTrack();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.celebrities.push(CelebrityTrack_RecognizedCelebrity.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.faceTrack = Track.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CelebrityTrack {
    return {
      celebrities: globalThis.Array.isArray(object?.celebrities)
        ? object.celebrities.map((e: any) => CelebrityTrack_RecognizedCelebrity.fromJSON(e))
        : [],
      faceTrack: isSet(object.faceTrack) ? Track.fromJSON(object.faceTrack) : undefined,
    };
  },

  toJSON(message: CelebrityTrack): unknown {
    const obj: any = {};
    if (message.celebrities?.length) {
      obj.celebrities = message.celebrities.map((e) => CelebrityTrack_RecognizedCelebrity.toJSON(e));
    }
    if (message.faceTrack !== undefined) {
      obj.faceTrack = Track.toJSON(message.faceTrack);
    }
    return obj;
  },

  create(base?: DeepPartial<CelebrityTrack>): CelebrityTrack {
    return CelebrityTrack.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CelebrityTrack>): CelebrityTrack {
    const message = createBaseCelebrityTrack();
    message.celebrities = object.celebrities?.map((e) => CelebrityTrack_RecognizedCelebrity.fromPartial(e)) || [];
    message.faceTrack = (object.faceTrack !== undefined && object.faceTrack !== null)
      ? Track.fromPartial(object.faceTrack)
      : undefined;
    return message;
  },
};

function createBaseCelebrityTrack_RecognizedCelebrity(): CelebrityTrack_RecognizedCelebrity {
  return { celebrity: undefined, confidence: 0 };
}

export const CelebrityTrack_RecognizedCelebrity: MessageFns<CelebrityTrack_RecognizedCelebrity> = {
  encode(message: CelebrityTrack_RecognizedCelebrity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.celebrity !== undefined) {
      Celebrity.encode(message.celebrity, writer.uint32(10).fork()).join();
    }
    if (message.confidence !== 0) {
      writer.uint32(21).float(message.confidence);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CelebrityTrack_RecognizedCelebrity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCelebrityTrack_RecognizedCelebrity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.celebrity = Celebrity.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.confidence = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CelebrityTrack_RecognizedCelebrity {
    return {
      celebrity: isSet(object.celebrity) ? Celebrity.fromJSON(object.celebrity) : undefined,
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
    };
  },

  toJSON(message: CelebrityTrack_RecognizedCelebrity): unknown {
    const obj: any = {};
    if (message.celebrity !== undefined) {
      obj.celebrity = Celebrity.toJSON(message.celebrity);
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    return obj;
  },

  create(base?: DeepPartial<CelebrityTrack_RecognizedCelebrity>): CelebrityTrack_RecognizedCelebrity {
    return CelebrityTrack_RecognizedCelebrity.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CelebrityTrack_RecognizedCelebrity>): CelebrityTrack_RecognizedCelebrity {
    const message = createBaseCelebrityTrack_RecognizedCelebrity();
    message.celebrity = (object.celebrity !== undefined && object.celebrity !== null)
      ? Celebrity.fromPartial(object.celebrity)
      : undefined;
    message.confidence = object.confidence ?? 0;
    return message;
  },
};

function createBaseCelebrityRecognitionAnnotation(): CelebrityRecognitionAnnotation {
  return { celebrityTracks: [] };
}

export const CelebrityRecognitionAnnotation: MessageFns<CelebrityRecognitionAnnotation> = {
  encode(message: CelebrityRecognitionAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.celebrityTracks) {
      CelebrityTrack.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CelebrityRecognitionAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCelebrityRecognitionAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.celebrityTracks.push(CelebrityTrack.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CelebrityRecognitionAnnotation {
    return {
      celebrityTracks: globalThis.Array.isArray(object?.celebrityTracks)
        ? object.celebrityTracks.map((e: any) => CelebrityTrack.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CelebrityRecognitionAnnotation): unknown {
    const obj: any = {};
    if (message.celebrityTracks?.length) {
      obj.celebrityTracks = message.celebrityTracks.map((e) => CelebrityTrack.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CelebrityRecognitionAnnotation>): CelebrityRecognitionAnnotation {
    return CelebrityRecognitionAnnotation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CelebrityRecognitionAnnotation>): CelebrityRecognitionAnnotation {
    const message = createBaseCelebrityRecognitionAnnotation();
    message.celebrityTracks = object.celebrityTracks?.map((e) => CelebrityTrack.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDetectedLandmark(): DetectedLandmark {
  return { name: "", point: undefined, confidence: 0 };
}

export const DetectedLandmark: MessageFns<DetectedLandmark> = {
  encode(message: DetectedLandmark, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.point !== undefined) {
      NormalizedVertex.encode(message.point, writer.uint32(18).fork()).join();
    }
    if (message.confidence !== 0) {
      writer.uint32(29).float(message.confidence);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetectedLandmark {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetectedLandmark();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.point = NormalizedVertex.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.confidence = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetectedLandmark {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      point: isSet(object.point) ? NormalizedVertex.fromJSON(object.point) : undefined,
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
    };
  },

  toJSON(message: DetectedLandmark): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.point !== undefined) {
      obj.point = NormalizedVertex.toJSON(message.point);
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    return obj;
  },

  create(base?: DeepPartial<DetectedLandmark>): DetectedLandmark {
    return DetectedLandmark.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DetectedLandmark>): DetectedLandmark {
    const message = createBaseDetectedLandmark();
    message.name = object.name ?? "";
    message.point = (object.point !== undefined && object.point !== null)
      ? NormalizedVertex.fromPartial(object.point)
      : undefined;
    message.confidence = object.confidence ?? 0;
    return message;
  },
};

function createBaseFaceDetectionAnnotation(): FaceDetectionAnnotation {
  return { tracks: [], thumbnail: Buffer.alloc(0) };
}

export const FaceDetectionAnnotation: MessageFns<FaceDetectionAnnotation> = {
  encode(message: FaceDetectionAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tracks) {
      Track.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.thumbnail.length !== 0) {
      writer.uint32(34).bytes(message.thumbnail);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FaceDetectionAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFaceDetectionAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tracks.push(Track.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.thumbnail = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FaceDetectionAnnotation {
    return {
      tracks: globalThis.Array.isArray(object?.tracks) ? object.tracks.map((e: any) => Track.fromJSON(e)) : [],
      thumbnail: isSet(object.thumbnail) ? Buffer.from(bytesFromBase64(object.thumbnail)) : Buffer.alloc(0),
    };
  },

  toJSON(message: FaceDetectionAnnotation): unknown {
    const obj: any = {};
    if (message.tracks?.length) {
      obj.tracks = message.tracks.map((e) => Track.toJSON(e));
    }
    if (message.thumbnail.length !== 0) {
      obj.thumbnail = base64FromBytes(message.thumbnail);
    }
    return obj;
  },

  create(base?: DeepPartial<FaceDetectionAnnotation>): FaceDetectionAnnotation {
    return FaceDetectionAnnotation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FaceDetectionAnnotation>): FaceDetectionAnnotation {
    const message = createBaseFaceDetectionAnnotation();
    message.tracks = object.tracks?.map((e) => Track.fromPartial(e)) || [];
    message.thumbnail = object.thumbnail ?? Buffer.alloc(0);
    return message;
  },
};

function createBasePersonDetectionAnnotation(): PersonDetectionAnnotation {
  return { tracks: [] };
}

export const PersonDetectionAnnotation: MessageFns<PersonDetectionAnnotation> = {
  encode(message: PersonDetectionAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tracks) {
      Track.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PersonDetectionAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePersonDetectionAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tracks.push(Track.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PersonDetectionAnnotation {
    return { tracks: globalThis.Array.isArray(object?.tracks) ? object.tracks.map((e: any) => Track.fromJSON(e)) : [] };
  },

  toJSON(message: PersonDetectionAnnotation): unknown {
    const obj: any = {};
    if (message.tracks?.length) {
      obj.tracks = message.tracks.map((e) => Track.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PersonDetectionAnnotation>): PersonDetectionAnnotation {
    return PersonDetectionAnnotation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PersonDetectionAnnotation>): PersonDetectionAnnotation {
    const message = createBasePersonDetectionAnnotation();
    message.tracks = object.tracks?.map((e) => Track.fromPartial(e)) || [];
    return message;
  },
};

function createBaseVideoAnnotationResults(): VideoAnnotationResults {
  return {
    inputUri: "",
    segment: undefined,
    segmentLabelAnnotations: [],
    segmentPresenceLabelAnnotations: [],
    shotLabelAnnotations: [],
    shotPresenceLabelAnnotations: [],
    frameLabelAnnotations: [],
    faceDetectionAnnotations: [],
    shotAnnotations: [],
    explicitAnnotation: undefined,
    speechTranscriptions: [],
    textAnnotations: [],
    objectAnnotations: [],
    logoRecognitionAnnotations: [],
    personDetectionAnnotations: [],
    celebrityRecognitionAnnotations: undefined,
    error: undefined,
  };
}

export const VideoAnnotationResults: MessageFns<VideoAnnotationResults> = {
  encode(message: VideoAnnotationResults, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inputUri !== "") {
      writer.uint32(10).string(message.inputUri);
    }
    if (message.segment !== undefined) {
      VideoSegment.encode(message.segment, writer.uint32(82).fork()).join();
    }
    for (const v of message.segmentLabelAnnotations) {
      LabelAnnotation.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.segmentPresenceLabelAnnotations) {
      LabelAnnotation.encode(v!, writer.uint32(186).fork()).join();
    }
    for (const v of message.shotLabelAnnotations) {
      LabelAnnotation.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.shotPresenceLabelAnnotations) {
      LabelAnnotation.encode(v!, writer.uint32(194).fork()).join();
    }
    for (const v of message.frameLabelAnnotations) {
      LabelAnnotation.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.faceDetectionAnnotations) {
      FaceDetectionAnnotation.encode(v!, writer.uint32(106).fork()).join();
    }
    for (const v of message.shotAnnotations) {
      VideoSegment.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.explicitAnnotation !== undefined) {
      ExplicitContentAnnotation.encode(message.explicitAnnotation, writer.uint32(58).fork()).join();
    }
    for (const v of message.speechTranscriptions) {
      SpeechTranscription.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.textAnnotations) {
      TextAnnotation.encode(v!, writer.uint32(98).fork()).join();
    }
    for (const v of message.objectAnnotations) {
      ObjectTrackingAnnotation.encode(v!, writer.uint32(114).fork()).join();
    }
    for (const v of message.logoRecognitionAnnotations) {
      LogoRecognitionAnnotation.encode(v!, writer.uint32(154).fork()).join();
    }
    for (const v of message.personDetectionAnnotations) {
      PersonDetectionAnnotation.encode(v!, writer.uint32(162).fork()).join();
    }
    if (message.celebrityRecognitionAnnotations !== undefined) {
      CelebrityRecognitionAnnotation.encode(message.celebrityRecognitionAnnotations, writer.uint32(170).fork()).join();
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoAnnotationResults {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoAnnotationResults();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inputUri = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.segment = VideoSegment.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.segmentLabelAnnotations.push(LabelAnnotation.decode(reader, reader.uint32()));
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.segmentPresenceLabelAnnotations.push(LabelAnnotation.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.shotLabelAnnotations.push(LabelAnnotation.decode(reader, reader.uint32()));
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.shotPresenceLabelAnnotations.push(LabelAnnotation.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.frameLabelAnnotations.push(LabelAnnotation.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.faceDetectionAnnotations.push(FaceDetectionAnnotation.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.shotAnnotations.push(VideoSegment.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.explicitAnnotation = ExplicitContentAnnotation.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.speechTranscriptions.push(SpeechTranscription.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.textAnnotations.push(TextAnnotation.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.objectAnnotations.push(ObjectTrackingAnnotation.decode(reader, reader.uint32()));
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.logoRecognitionAnnotations.push(LogoRecognitionAnnotation.decode(reader, reader.uint32()));
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.personDetectionAnnotations.push(PersonDetectionAnnotation.decode(reader, reader.uint32()));
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.celebrityRecognitionAnnotations = CelebrityRecognitionAnnotation.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoAnnotationResults {
    return {
      inputUri: isSet(object.inputUri) ? globalThis.String(object.inputUri) : "",
      segment: isSet(object.segment) ? VideoSegment.fromJSON(object.segment) : undefined,
      segmentLabelAnnotations: globalThis.Array.isArray(object?.segmentLabelAnnotations)
        ? object.segmentLabelAnnotations.map((e: any) => LabelAnnotation.fromJSON(e))
        : [],
      segmentPresenceLabelAnnotations: globalThis.Array.isArray(object?.segmentPresenceLabelAnnotations)
        ? object.segmentPresenceLabelAnnotations.map((e: any) => LabelAnnotation.fromJSON(e))
        : [],
      shotLabelAnnotations: globalThis.Array.isArray(object?.shotLabelAnnotations)
        ? object.shotLabelAnnotations.map((e: any) => LabelAnnotation.fromJSON(e))
        : [],
      shotPresenceLabelAnnotations: globalThis.Array.isArray(object?.shotPresenceLabelAnnotations)
        ? object.shotPresenceLabelAnnotations.map((e: any) => LabelAnnotation.fromJSON(e))
        : [],
      frameLabelAnnotations: globalThis.Array.isArray(object?.frameLabelAnnotations)
        ? object.frameLabelAnnotations.map((e: any) => LabelAnnotation.fromJSON(e))
        : [],
      faceDetectionAnnotations: globalThis.Array.isArray(object?.faceDetectionAnnotations)
        ? object.faceDetectionAnnotations.map((e: any) => FaceDetectionAnnotation.fromJSON(e))
        : [],
      shotAnnotations: globalThis.Array.isArray(object?.shotAnnotations)
        ? object.shotAnnotations.map((e: any) => VideoSegment.fromJSON(e))
        : [],
      explicitAnnotation: isSet(object.explicitAnnotation)
        ? ExplicitContentAnnotation.fromJSON(object.explicitAnnotation)
        : undefined,
      speechTranscriptions: globalThis.Array.isArray(object?.speechTranscriptions)
        ? object.speechTranscriptions.map((e: any) => SpeechTranscription.fromJSON(e))
        : [],
      textAnnotations: globalThis.Array.isArray(object?.textAnnotations)
        ? object.textAnnotations.map((e: any) => TextAnnotation.fromJSON(e))
        : [],
      objectAnnotations: globalThis.Array.isArray(object?.objectAnnotations)
        ? object.objectAnnotations.map((e: any) => ObjectTrackingAnnotation.fromJSON(e))
        : [],
      logoRecognitionAnnotations: globalThis.Array.isArray(object?.logoRecognitionAnnotations)
        ? object.logoRecognitionAnnotations.map((e: any) => LogoRecognitionAnnotation.fromJSON(e))
        : [],
      personDetectionAnnotations: globalThis.Array.isArray(object?.personDetectionAnnotations)
        ? object.personDetectionAnnotations.map((e: any) => PersonDetectionAnnotation.fromJSON(e))
        : [],
      celebrityRecognitionAnnotations: isSet(object.celebrityRecognitionAnnotations)
        ? CelebrityRecognitionAnnotation.fromJSON(object.celebrityRecognitionAnnotations)
        : undefined,
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: VideoAnnotationResults): unknown {
    const obj: any = {};
    if (message.inputUri !== "") {
      obj.inputUri = message.inputUri;
    }
    if (message.segment !== undefined) {
      obj.segment = VideoSegment.toJSON(message.segment);
    }
    if (message.segmentLabelAnnotations?.length) {
      obj.segmentLabelAnnotations = message.segmentLabelAnnotations.map((e) => LabelAnnotation.toJSON(e));
    }
    if (message.segmentPresenceLabelAnnotations?.length) {
      obj.segmentPresenceLabelAnnotations = message.segmentPresenceLabelAnnotations.map((e) =>
        LabelAnnotation.toJSON(e)
      );
    }
    if (message.shotLabelAnnotations?.length) {
      obj.shotLabelAnnotations = message.shotLabelAnnotations.map((e) => LabelAnnotation.toJSON(e));
    }
    if (message.shotPresenceLabelAnnotations?.length) {
      obj.shotPresenceLabelAnnotations = message.shotPresenceLabelAnnotations.map((e) => LabelAnnotation.toJSON(e));
    }
    if (message.frameLabelAnnotations?.length) {
      obj.frameLabelAnnotations = message.frameLabelAnnotations.map((e) => LabelAnnotation.toJSON(e));
    }
    if (message.faceDetectionAnnotations?.length) {
      obj.faceDetectionAnnotations = message.faceDetectionAnnotations.map((e) => FaceDetectionAnnotation.toJSON(e));
    }
    if (message.shotAnnotations?.length) {
      obj.shotAnnotations = message.shotAnnotations.map((e) => VideoSegment.toJSON(e));
    }
    if (message.explicitAnnotation !== undefined) {
      obj.explicitAnnotation = ExplicitContentAnnotation.toJSON(message.explicitAnnotation);
    }
    if (message.speechTranscriptions?.length) {
      obj.speechTranscriptions = message.speechTranscriptions.map((e) => SpeechTranscription.toJSON(e));
    }
    if (message.textAnnotations?.length) {
      obj.textAnnotations = message.textAnnotations.map((e) => TextAnnotation.toJSON(e));
    }
    if (message.objectAnnotations?.length) {
      obj.objectAnnotations = message.objectAnnotations.map((e) => ObjectTrackingAnnotation.toJSON(e));
    }
    if (message.logoRecognitionAnnotations?.length) {
      obj.logoRecognitionAnnotations = message.logoRecognitionAnnotations.map((e) =>
        LogoRecognitionAnnotation.toJSON(e)
      );
    }
    if (message.personDetectionAnnotations?.length) {
      obj.personDetectionAnnotations = message.personDetectionAnnotations.map((e) =>
        PersonDetectionAnnotation.toJSON(e)
      );
    }
    if (message.celebrityRecognitionAnnotations !== undefined) {
      obj.celebrityRecognitionAnnotations = CelebrityRecognitionAnnotation.toJSON(
        message.celebrityRecognitionAnnotations,
      );
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    return obj;
  },

  create(base?: DeepPartial<VideoAnnotationResults>): VideoAnnotationResults {
    return VideoAnnotationResults.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VideoAnnotationResults>): VideoAnnotationResults {
    const message = createBaseVideoAnnotationResults();
    message.inputUri = object.inputUri ?? "";
    message.segment = (object.segment !== undefined && object.segment !== null)
      ? VideoSegment.fromPartial(object.segment)
      : undefined;
    message.segmentLabelAnnotations = object.segmentLabelAnnotations?.map((e) => LabelAnnotation.fromPartial(e)) || [];
    message.segmentPresenceLabelAnnotations =
      object.segmentPresenceLabelAnnotations?.map((e) => LabelAnnotation.fromPartial(e)) || [];
    message.shotLabelAnnotations = object.shotLabelAnnotations?.map((e) => LabelAnnotation.fromPartial(e)) || [];
    message.shotPresenceLabelAnnotations =
      object.shotPresenceLabelAnnotations?.map((e) => LabelAnnotation.fromPartial(e)) || [];
    message.frameLabelAnnotations = object.frameLabelAnnotations?.map((e) => LabelAnnotation.fromPartial(e)) || [];
    message.faceDetectionAnnotations =
      object.faceDetectionAnnotations?.map((e) => FaceDetectionAnnotation.fromPartial(e)) || [];
    message.shotAnnotations = object.shotAnnotations?.map((e) => VideoSegment.fromPartial(e)) || [];
    message.explicitAnnotation = (object.explicitAnnotation !== undefined && object.explicitAnnotation !== null)
      ? ExplicitContentAnnotation.fromPartial(object.explicitAnnotation)
      : undefined;
    message.speechTranscriptions = object.speechTranscriptions?.map((e) => SpeechTranscription.fromPartial(e)) || [];
    message.textAnnotations = object.textAnnotations?.map((e) => TextAnnotation.fromPartial(e)) || [];
    message.objectAnnotations = object.objectAnnotations?.map((e) => ObjectTrackingAnnotation.fromPartial(e)) || [];
    message.logoRecognitionAnnotations =
      object.logoRecognitionAnnotations?.map((e) => LogoRecognitionAnnotation.fromPartial(e)) || [];
    message.personDetectionAnnotations =
      object.personDetectionAnnotations?.map((e) => PersonDetectionAnnotation.fromPartial(e)) || [];
    message.celebrityRecognitionAnnotations =
      (object.celebrityRecognitionAnnotations !== undefined && object.celebrityRecognitionAnnotations !== null)
        ? CelebrityRecognitionAnnotation.fromPartial(object.celebrityRecognitionAnnotations)
        : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseAnnotateVideoResponse(): AnnotateVideoResponse {
  return { annotationResults: [] };
}

export const AnnotateVideoResponse: MessageFns<AnnotateVideoResponse> = {
  encode(message: AnnotateVideoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.annotationResults) {
      VideoAnnotationResults.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnnotateVideoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnnotateVideoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.annotationResults.push(VideoAnnotationResults.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnnotateVideoResponse {
    return {
      annotationResults: globalThis.Array.isArray(object?.annotationResults)
        ? object.annotationResults.map((e: any) => VideoAnnotationResults.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AnnotateVideoResponse): unknown {
    const obj: any = {};
    if (message.annotationResults?.length) {
      obj.annotationResults = message.annotationResults.map((e) => VideoAnnotationResults.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AnnotateVideoResponse>): AnnotateVideoResponse {
    return AnnotateVideoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnnotateVideoResponse>): AnnotateVideoResponse {
    const message = createBaseAnnotateVideoResponse();
    message.annotationResults = object.annotationResults?.map((e) => VideoAnnotationResults.fromPartial(e)) || [];
    return message;
  },
};

function createBaseVideoAnnotationProgress(): VideoAnnotationProgress {
  return {
    inputUri: "",
    progressPercent: 0,
    startTime: undefined,
    updateTime: undefined,
    feature: 0,
    segment: undefined,
  };
}

export const VideoAnnotationProgress: MessageFns<VideoAnnotationProgress> = {
  encode(message: VideoAnnotationProgress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inputUri !== "") {
      writer.uint32(10).string(message.inputUri);
    }
    if (message.progressPercent !== 0) {
      writer.uint32(16).int32(message.progressPercent);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.feature !== 0) {
      writer.uint32(40).int32(message.feature);
    }
    if (message.segment !== undefined) {
      VideoSegment.encode(message.segment, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoAnnotationProgress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoAnnotationProgress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inputUri = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.progressPercent = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.feature = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.segment = VideoSegment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoAnnotationProgress {
    return {
      inputUri: isSet(object.inputUri) ? globalThis.String(object.inputUri) : "",
      progressPercent: isSet(object.progressPercent) ? globalThis.Number(object.progressPercent) : 0,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      feature: isSet(object.feature) ? featureFromJSON(object.feature) : 0,
      segment: isSet(object.segment) ? VideoSegment.fromJSON(object.segment) : undefined,
    };
  },

  toJSON(message: VideoAnnotationProgress): unknown {
    const obj: any = {};
    if (message.inputUri !== "") {
      obj.inputUri = message.inputUri;
    }
    if (message.progressPercent !== 0) {
      obj.progressPercent = Math.round(message.progressPercent);
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.feature !== 0) {
      obj.feature = featureToJSON(message.feature);
    }
    if (message.segment !== undefined) {
      obj.segment = VideoSegment.toJSON(message.segment);
    }
    return obj;
  },

  create(base?: DeepPartial<VideoAnnotationProgress>): VideoAnnotationProgress {
    return VideoAnnotationProgress.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VideoAnnotationProgress>): VideoAnnotationProgress {
    const message = createBaseVideoAnnotationProgress();
    message.inputUri = object.inputUri ?? "";
    message.progressPercent = object.progressPercent ?? 0;
    message.startTime = object.startTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.feature = object.feature ?? 0;
    message.segment = (object.segment !== undefined && object.segment !== null)
      ? VideoSegment.fromPartial(object.segment)
      : undefined;
    return message;
  },
};

function createBaseAnnotateVideoProgress(): AnnotateVideoProgress {
  return { annotationProgress: [] };
}

export const AnnotateVideoProgress: MessageFns<AnnotateVideoProgress> = {
  encode(message: AnnotateVideoProgress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.annotationProgress) {
      VideoAnnotationProgress.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnnotateVideoProgress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnnotateVideoProgress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.annotationProgress.push(VideoAnnotationProgress.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnnotateVideoProgress {
    return {
      annotationProgress: globalThis.Array.isArray(object?.annotationProgress)
        ? object.annotationProgress.map((e: any) => VideoAnnotationProgress.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AnnotateVideoProgress): unknown {
    const obj: any = {};
    if (message.annotationProgress?.length) {
      obj.annotationProgress = message.annotationProgress.map((e) => VideoAnnotationProgress.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AnnotateVideoProgress>): AnnotateVideoProgress {
    return AnnotateVideoProgress.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnnotateVideoProgress>): AnnotateVideoProgress {
    const message = createBaseAnnotateVideoProgress();
    message.annotationProgress = object.annotationProgress?.map((e) => VideoAnnotationProgress.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSpeechTranscriptionConfig(): SpeechTranscriptionConfig {
  return {
    languageCode: "",
    maxAlternatives: 0,
    filterProfanity: false,
    speechContexts: [],
    enableAutomaticPunctuation: false,
    audioTracks: [],
    enableSpeakerDiarization: false,
    diarizationSpeakerCount: 0,
    enableWordConfidence: false,
  };
}

export const SpeechTranscriptionConfig: MessageFns<SpeechTranscriptionConfig> = {
  encode(message: SpeechTranscriptionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.languageCode !== "") {
      writer.uint32(10).string(message.languageCode);
    }
    if (message.maxAlternatives !== 0) {
      writer.uint32(16).int32(message.maxAlternatives);
    }
    if (message.filterProfanity !== false) {
      writer.uint32(24).bool(message.filterProfanity);
    }
    for (const v of message.speechContexts) {
      SpeechContext.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.enableAutomaticPunctuation !== false) {
      writer.uint32(40).bool(message.enableAutomaticPunctuation);
    }
    writer.uint32(50).fork();
    for (const v of message.audioTracks) {
      writer.int32(v);
    }
    writer.join();
    if (message.enableSpeakerDiarization !== false) {
      writer.uint32(56).bool(message.enableSpeakerDiarization);
    }
    if (message.diarizationSpeakerCount !== 0) {
      writer.uint32(64).int32(message.diarizationSpeakerCount);
    }
    if (message.enableWordConfidence !== false) {
      writer.uint32(72).bool(message.enableWordConfidence);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpeechTranscriptionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpeechTranscriptionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxAlternatives = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.filterProfanity = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.speechContexts.push(SpeechContext.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.enableAutomaticPunctuation = reader.bool();
          continue;
        case 6:
          if (tag === 48) {
            message.audioTracks.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.audioTracks.push(reader.int32());
            }

            continue;
          }

          break;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.enableSpeakerDiarization = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.diarizationSpeakerCount = reader.int32();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.enableWordConfidence = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpeechTranscriptionConfig {
    return {
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      maxAlternatives: isSet(object.maxAlternatives) ? globalThis.Number(object.maxAlternatives) : 0,
      filterProfanity: isSet(object.filterProfanity) ? globalThis.Boolean(object.filterProfanity) : false,
      speechContexts: globalThis.Array.isArray(object?.speechContexts)
        ? object.speechContexts.map((e: any) => SpeechContext.fromJSON(e))
        : [],
      enableAutomaticPunctuation: isSet(object.enableAutomaticPunctuation)
        ? globalThis.Boolean(object.enableAutomaticPunctuation)
        : false,
      audioTracks: globalThis.Array.isArray(object?.audioTracks)
        ? object.audioTracks.map((e: any) => globalThis.Number(e))
        : [],
      enableSpeakerDiarization: isSet(object.enableSpeakerDiarization)
        ? globalThis.Boolean(object.enableSpeakerDiarization)
        : false,
      diarizationSpeakerCount: isSet(object.diarizationSpeakerCount)
        ? globalThis.Number(object.diarizationSpeakerCount)
        : 0,
      enableWordConfidence: isSet(object.enableWordConfidence)
        ? globalThis.Boolean(object.enableWordConfidence)
        : false,
    };
  },

  toJSON(message: SpeechTranscriptionConfig): unknown {
    const obj: any = {};
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.maxAlternatives !== 0) {
      obj.maxAlternatives = Math.round(message.maxAlternatives);
    }
    if (message.filterProfanity !== false) {
      obj.filterProfanity = message.filterProfanity;
    }
    if (message.speechContexts?.length) {
      obj.speechContexts = message.speechContexts.map((e) => SpeechContext.toJSON(e));
    }
    if (message.enableAutomaticPunctuation !== false) {
      obj.enableAutomaticPunctuation = message.enableAutomaticPunctuation;
    }
    if (message.audioTracks?.length) {
      obj.audioTracks = message.audioTracks.map((e) => Math.round(e));
    }
    if (message.enableSpeakerDiarization !== false) {
      obj.enableSpeakerDiarization = message.enableSpeakerDiarization;
    }
    if (message.diarizationSpeakerCount !== 0) {
      obj.diarizationSpeakerCount = Math.round(message.diarizationSpeakerCount);
    }
    if (message.enableWordConfidence !== false) {
      obj.enableWordConfidence = message.enableWordConfidence;
    }
    return obj;
  },

  create(base?: DeepPartial<SpeechTranscriptionConfig>): SpeechTranscriptionConfig {
    return SpeechTranscriptionConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SpeechTranscriptionConfig>): SpeechTranscriptionConfig {
    const message = createBaseSpeechTranscriptionConfig();
    message.languageCode = object.languageCode ?? "";
    message.maxAlternatives = object.maxAlternatives ?? 0;
    message.filterProfanity = object.filterProfanity ?? false;
    message.speechContexts = object.speechContexts?.map((e) => SpeechContext.fromPartial(e)) || [];
    message.enableAutomaticPunctuation = object.enableAutomaticPunctuation ?? false;
    message.audioTracks = object.audioTracks?.map((e) => e) || [];
    message.enableSpeakerDiarization = object.enableSpeakerDiarization ?? false;
    message.diarizationSpeakerCount = object.diarizationSpeakerCount ?? 0;
    message.enableWordConfidence = object.enableWordConfidence ?? false;
    return message;
  },
};

function createBaseSpeechContext(): SpeechContext {
  return { phrases: [] };
}

export const SpeechContext: MessageFns<SpeechContext> = {
  encode(message: SpeechContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.phrases) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpeechContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpeechContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.phrases.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpeechContext {
    return {
      phrases: globalThis.Array.isArray(object?.phrases) ? object.phrases.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: SpeechContext): unknown {
    const obj: any = {};
    if (message.phrases?.length) {
      obj.phrases = message.phrases;
    }
    return obj;
  },

  create(base?: DeepPartial<SpeechContext>): SpeechContext {
    return SpeechContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SpeechContext>): SpeechContext {
    const message = createBaseSpeechContext();
    message.phrases = object.phrases?.map((e) => e) || [];
    return message;
  },
};

function createBaseSpeechTranscription(): SpeechTranscription {
  return { alternatives: [], languageCode: "" };
}

export const SpeechTranscription: MessageFns<SpeechTranscription> = {
  encode(message: SpeechTranscription, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.alternatives) {
      SpeechRecognitionAlternative.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpeechTranscription {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpeechTranscription();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.alternatives.push(SpeechRecognitionAlternative.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpeechTranscription {
    return {
      alternatives: globalThis.Array.isArray(object?.alternatives)
        ? object.alternatives.map((e: any) => SpeechRecognitionAlternative.fromJSON(e))
        : [],
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: SpeechTranscription): unknown {
    const obj: any = {};
    if (message.alternatives?.length) {
      obj.alternatives = message.alternatives.map((e) => SpeechRecognitionAlternative.toJSON(e));
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<SpeechTranscription>): SpeechTranscription {
    return SpeechTranscription.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SpeechTranscription>): SpeechTranscription {
    const message = createBaseSpeechTranscription();
    message.alternatives = object.alternatives?.map((e) => SpeechRecognitionAlternative.fromPartial(e)) || [];
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseSpeechRecognitionAlternative(): SpeechRecognitionAlternative {
  return { transcript: "", confidence: 0, words: [] };
}

export const SpeechRecognitionAlternative: MessageFns<SpeechRecognitionAlternative> = {
  encode(message: SpeechRecognitionAlternative, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transcript !== "") {
      writer.uint32(10).string(message.transcript);
    }
    if (message.confidence !== 0) {
      writer.uint32(21).float(message.confidence);
    }
    for (const v of message.words) {
      WordInfo.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpeechRecognitionAlternative {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpeechRecognitionAlternative();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transcript = reader.string();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.confidence = reader.float();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.words.push(WordInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpeechRecognitionAlternative {
    return {
      transcript: isSet(object.transcript) ? globalThis.String(object.transcript) : "",
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
      words: globalThis.Array.isArray(object?.words) ? object.words.map((e: any) => WordInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: SpeechRecognitionAlternative): unknown {
    const obj: any = {};
    if (message.transcript !== "") {
      obj.transcript = message.transcript;
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    if (message.words?.length) {
      obj.words = message.words.map((e) => WordInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SpeechRecognitionAlternative>): SpeechRecognitionAlternative {
    return SpeechRecognitionAlternative.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SpeechRecognitionAlternative>): SpeechRecognitionAlternative {
    const message = createBaseSpeechRecognitionAlternative();
    message.transcript = object.transcript ?? "";
    message.confidence = object.confidence ?? 0;
    message.words = object.words?.map((e) => WordInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWordInfo(): WordInfo {
  return { startTime: undefined, endTime: undefined, word: "", confidence: 0, speakerTag: 0 };
}

export const WordInfo: MessageFns<WordInfo> = {
  encode(message: WordInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTime !== undefined) {
      Duration.encode(message.startTime, writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Duration.encode(message.endTime, writer.uint32(18).fork()).join();
    }
    if (message.word !== "") {
      writer.uint32(26).string(message.word);
    }
    if (message.confidence !== 0) {
      writer.uint32(37).float(message.confidence);
    }
    if (message.speakerTag !== 0) {
      writer.uint32(40).int32(message.speakerTag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WordInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWordInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.startTime = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = Duration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.word = reader.string();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.confidence = reader.float();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.speakerTag = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WordInfo {
    return {
      startTime: isSet(object.startTime) ? Duration.fromJSON(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? Duration.fromJSON(object.endTime) : undefined,
      word: isSet(object.word) ? globalThis.String(object.word) : "",
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
      speakerTag: isSet(object.speakerTag) ? globalThis.Number(object.speakerTag) : 0,
    };
  },

  toJSON(message: WordInfo): unknown {
    const obj: any = {};
    if (message.startTime !== undefined) {
      obj.startTime = Duration.toJSON(message.startTime);
    }
    if (message.endTime !== undefined) {
      obj.endTime = Duration.toJSON(message.endTime);
    }
    if (message.word !== "") {
      obj.word = message.word;
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    if (message.speakerTag !== 0) {
      obj.speakerTag = Math.round(message.speakerTag);
    }
    return obj;
  },

  create(base?: DeepPartial<WordInfo>): WordInfo {
    return WordInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WordInfo>): WordInfo {
    const message = createBaseWordInfo();
    message.startTime = (object.startTime !== undefined && object.startTime !== null)
      ? Duration.fromPartial(object.startTime)
      : undefined;
    message.endTime = (object.endTime !== undefined && object.endTime !== null)
      ? Duration.fromPartial(object.endTime)
      : undefined;
    message.word = object.word ?? "";
    message.confidence = object.confidence ?? 0;
    message.speakerTag = object.speakerTag ?? 0;
    return message;
  },
};

function createBaseNormalizedVertex(): NormalizedVertex {
  return { x: 0, y: 0 };
}

export const NormalizedVertex: MessageFns<NormalizedVertex> = {
  encode(message: NormalizedVertex, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(13).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).float(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NormalizedVertex {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNormalizedVertex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.x = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.y = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NormalizedVertex {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: NormalizedVertex): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    return obj;
  },

  create(base?: DeepPartial<NormalizedVertex>): NormalizedVertex {
    return NormalizedVertex.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NormalizedVertex>): NormalizedVertex {
    const message = createBaseNormalizedVertex();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseNormalizedBoundingPoly(): NormalizedBoundingPoly {
  return { vertices: [] };
}

export const NormalizedBoundingPoly: MessageFns<NormalizedBoundingPoly> = {
  encode(message: NormalizedBoundingPoly, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.vertices) {
      NormalizedVertex.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NormalizedBoundingPoly {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNormalizedBoundingPoly();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.vertices.push(NormalizedVertex.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NormalizedBoundingPoly {
    return {
      vertices: globalThis.Array.isArray(object?.vertices)
        ? object.vertices.map((e: any) => NormalizedVertex.fromJSON(e))
        : [],
    };
  },

  toJSON(message: NormalizedBoundingPoly): unknown {
    const obj: any = {};
    if (message.vertices?.length) {
      obj.vertices = message.vertices.map((e) => NormalizedVertex.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<NormalizedBoundingPoly>): NormalizedBoundingPoly {
    return NormalizedBoundingPoly.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NormalizedBoundingPoly>): NormalizedBoundingPoly {
    const message = createBaseNormalizedBoundingPoly();
    message.vertices = object.vertices?.map((e) => NormalizedVertex.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTextSegment(): TextSegment {
  return { segment: undefined, confidence: 0, frames: [] };
}

export const TextSegment: MessageFns<TextSegment> = {
  encode(message: TextSegment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.segment !== undefined) {
      VideoSegment.encode(message.segment, writer.uint32(10).fork()).join();
    }
    if (message.confidence !== 0) {
      writer.uint32(21).float(message.confidence);
    }
    for (const v of message.frames) {
      TextFrame.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextSegment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextSegment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.segment = VideoSegment.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.confidence = reader.float();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.frames.push(TextFrame.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextSegment {
    return {
      segment: isSet(object.segment) ? VideoSegment.fromJSON(object.segment) : undefined,
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
      frames: globalThis.Array.isArray(object?.frames) ? object.frames.map((e: any) => TextFrame.fromJSON(e)) : [],
    };
  },

  toJSON(message: TextSegment): unknown {
    const obj: any = {};
    if (message.segment !== undefined) {
      obj.segment = VideoSegment.toJSON(message.segment);
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    if (message.frames?.length) {
      obj.frames = message.frames.map((e) => TextFrame.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TextSegment>): TextSegment {
    return TextSegment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TextSegment>): TextSegment {
    const message = createBaseTextSegment();
    message.segment = (object.segment !== undefined && object.segment !== null)
      ? VideoSegment.fromPartial(object.segment)
      : undefined;
    message.confidence = object.confidence ?? 0;
    message.frames = object.frames?.map((e) => TextFrame.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTextFrame(): TextFrame {
  return { rotatedBoundingBox: undefined, timeOffset: undefined };
}

export const TextFrame: MessageFns<TextFrame> = {
  encode(message: TextFrame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rotatedBoundingBox !== undefined) {
      NormalizedBoundingPoly.encode(message.rotatedBoundingBox, writer.uint32(10).fork()).join();
    }
    if (message.timeOffset !== undefined) {
      Duration.encode(message.timeOffset, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextFrame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextFrame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rotatedBoundingBox = NormalizedBoundingPoly.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.timeOffset = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextFrame {
    return {
      rotatedBoundingBox: isSet(object.rotatedBoundingBox)
        ? NormalizedBoundingPoly.fromJSON(object.rotatedBoundingBox)
        : undefined,
      timeOffset: isSet(object.timeOffset) ? Duration.fromJSON(object.timeOffset) : undefined,
    };
  },

  toJSON(message: TextFrame): unknown {
    const obj: any = {};
    if (message.rotatedBoundingBox !== undefined) {
      obj.rotatedBoundingBox = NormalizedBoundingPoly.toJSON(message.rotatedBoundingBox);
    }
    if (message.timeOffset !== undefined) {
      obj.timeOffset = Duration.toJSON(message.timeOffset);
    }
    return obj;
  },

  create(base?: DeepPartial<TextFrame>): TextFrame {
    return TextFrame.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TextFrame>): TextFrame {
    const message = createBaseTextFrame();
    message.rotatedBoundingBox = (object.rotatedBoundingBox !== undefined && object.rotatedBoundingBox !== null)
      ? NormalizedBoundingPoly.fromPartial(object.rotatedBoundingBox)
      : undefined;
    message.timeOffset = (object.timeOffset !== undefined && object.timeOffset !== null)
      ? Duration.fromPartial(object.timeOffset)
      : undefined;
    return message;
  },
};

function createBaseTextAnnotation(): TextAnnotation {
  return { text: "", segments: [] };
}

export const TextAnnotation: MessageFns<TextAnnotation> = {
  encode(message: TextAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    for (const v of message.segments) {
      TextSegment.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.segments.push(TextSegment.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextAnnotation {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      segments: globalThis.Array.isArray(object?.segments)
        ? object.segments.map((e: any) => TextSegment.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TextAnnotation): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.segments?.length) {
      obj.segments = message.segments.map((e) => TextSegment.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TextAnnotation>): TextAnnotation {
    return TextAnnotation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TextAnnotation>): TextAnnotation {
    const message = createBaseTextAnnotation();
    message.text = object.text ?? "";
    message.segments = object.segments?.map((e) => TextSegment.fromPartial(e)) || [];
    return message;
  },
};

function createBaseObjectTrackingFrame(): ObjectTrackingFrame {
  return { normalizedBoundingBox: undefined, timeOffset: undefined };
}

export const ObjectTrackingFrame: MessageFns<ObjectTrackingFrame> = {
  encode(message: ObjectTrackingFrame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.normalizedBoundingBox !== undefined) {
      NormalizedBoundingBox.encode(message.normalizedBoundingBox, writer.uint32(10).fork()).join();
    }
    if (message.timeOffset !== undefined) {
      Duration.encode(message.timeOffset, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ObjectTrackingFrame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObjectTrackingFrame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.normalizedBoundingBox = NormalizedBoundingBox.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.timeOffset = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ObjectTrackingFrame {
    return {
      normalizedBoundingBox: isSet(object.normalizedBoundingBox)
        ? NormalizedBoundingBox.fromJSON(object.normalizedBoundingBox)
        : undefined,
      timeOffset: isSet(object.timeOffset) ? Duration.fromJSON(object.timeOffset) : undefined,
    };
  },

  toJSON(message: ObjectTrackingFrame): unknown {
    const obj: any = {};
    if (message.normalizedBoundingBox !== undefined) {
      obj.normalizedBoundingBox = NormalizedBoundingBox.toJSON(message.normalizedBoundingBox);
    }
    if (message.timeOffset !== undefined) {
      obj.timeOffset = Duration.toJSON(message.timeOffset);
    }
    return obj;
  },

  create(base?: DeepPartial<ObjectTrackingFrame>): ObjectTrackingFrame {
    return ObjectTrackingFrame.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ObjectTrackingFrame>): ObjectTrackingFrame {
    const message = createBaseObjectTrackingFrame();
    message.normalizedBoundingBox =
      (object.normalizedBoundingBox !== undefined && object.normalizedBoundingBox !== null)
        ? NormalizedBoundingBox.fromPartial(object.normalizedBoundingBox)
        : undefined;
    message.timeOffset = (object.timeOffset !== undefined && object.timeOffset !== null)
      ? Duration.fromPartial(object.timeOffset)
      : undefined;
    return message;
  },
};

function createBaseObjectTrackingAnnotation(): ObjectTrackingAnnotation {
  return { segment: undefined, trackId: undefined, entity: undefined, confidence: 0, frames: [] };
}

export const ObjectTrackingAnnotation: MessageFns<ObjectTrackingAnnotation> = {
  encode(message: ObjectTrackingAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.segment !== undefined) {
      VideoSegment.encode(message.segment, writer.uint32(26).fork()).join();
    }
    if (message.trackId !== undefined) {
      writer.uint32(40).int64(message.trackId.toString());
    }
    if (message.entity !== undefined) {
      Entity.encode(message.entity, writer.uint32(10).fork()).join();
    }
    if (message.confidence !== 0) {
      writer.uint32(37).float(message.confidence);
    }
    for (const v of message.frames) {
      ObjectTrackingFrame.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ObjectTrackingAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObjectTrackingAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.segment = VideoSegment.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.trackId = Long.fromString(reader.int64().toString());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entity = Entity.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.confidence = reader.float();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.frames.push(ObjectTrackingFrame.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ObjectTrackingAnnotation {
    return {
      segment: isSet(object.segment) ? VideoSegment.fromJSON(object.segment) : undefined,
      trackId: isSet(object.trackId) ? Long.fromValue(object.trackId) : undefined,
      entity: isSet(object.entity) ? Entity.fromJSON(object.entity) : undefined,
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
      frames: globalThis.Array.isArray(object?.frames)
        ? object.frames.map((e: any) => ObjectTrackingFrame.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ObjectTrackingAnnotation): unknown {
    const obj: any = {};
    if (message.segment !== undefined) {
      obj.segment = VideoSegment.toJSON(message.segment);
    }
    if (message.trackId !== undefined) {
      obj.trackId = (message.trackId || Long.ZERO).toString();
    }
    if (message.entity !== undefined) {
      obj.entity = Entity.toJSON(message.entity);
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    if (message.frames?.length) {
      obj.frames = message.frames.map((e) => ObjectTrackingFrame.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ObjectTrackingAnnotation>): ObjectTrackingAnnotation {
    return ObjectTrackingAnnotation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ObjectTrackingAnnotation>): ObjectTrackingAnnotation {
    const message = createBaseObjectTrackingAnnotation();
    message.segment = (object.segment !== undefined && object.segment !== null)
      ? VideoSegment.fromPartial(object.segment)
      : undefined;
    message.trackId = (object.trackId !== undefined && object.trackId !== null)
      ? Long.fromValue(object.trackId)
      : undefined;
    message.entity = (object.entity !== undefined && object.entity !== null)
      ? Entity.fromPartial(object.entity)
      : undefined;
    message.confidence = object.confidence ?? 0;
    message.frames = object.frames?.map((e) => ObjectTrackingFrame.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLogoRecognitionAnnotation(): LogoRecognitionAnnotation {
  return { entity: undefined, tracks: [], segments: [] };
}

export const LogoRecognitionAnnotation: MessageFns<LogoRecognitionAnnotation> = {
  encode(message: LogoRecognitionAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entity !== undefined) {
      Entity.encode(message.entity, writer.uint32(10).fork()).join();
    }
    for (const v of message.tracks) {
      Track.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.segments) {
      VideoSegment.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogoRecognitionAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogoRecognitionAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entity = Entity.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tracks.push(Track.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.segments.push(VideoSegment.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogoRecognitionAnnotation {
    return {
      entity: isSet(object.entity) ? Entity.fromJSON(object.entity) : undefined,
      tracks: globalThis.Array.isArray(object?.tracks) ? object.tracks.map((e: any) => Track.fromJSON(e)) : [],
      segments: globalThis.Array.isArray(object?.segments)
        ? object.segments.map((e: any) => VideoSegment.fromJSON(e))
        : [],
    };
  },

  toJSON(message: LogoRecognitionAnnotation): unknown {
    const obj: any = {};
    if (message.entity !== undefined) {
      obj.entity = Entity.toJSON(message.entity);
    }
    if (message.tracks?.length) {
      obj.tracks = message.tracks.map((e) => Track.toJSON(e));
    }
    if (message.segments?.length) {
      obj.segments = message.segments.map((e) => VideoSegment.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<LogoRecognitionAnnotation>): LogoRecognitionAnnotation {
    return LogoRecognitionAnnotation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LogoRecognitionAnnotation>): LogoRecognitionAnnotation {
    const message = createBaseLogoRecognitionAnnotation();
    message.entity = (object.entity !== undefined && object.entity !== null)
      ? Entity.fromPartial(object.entity)
      : undefined;
    message.tracks = object.tracks?.map((e) => Track.fromPartial(e)) || [];
    message.segments = object.segments?.map((e) => VideoSegment.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamingAnnotateVideoRequest(): StreamingAnnotateVideoRequest {
  return { videoConfig: undefined, inputContent: undefined };
}

export const StreamingAnnotateVideoRequest: MessageFns<StreamingAnnotateVideoRequest> = {
  encode(message: StreamingAnnotateVideoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.videoConfig !== undefined) {
      StreamingVideoConfig.encode(message.videoConfig, writer.uint32(10).fork()).join();
    }
    if (message.inputContent !== undefined) {
      writer.uint32(18).bytes(message.inputContent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamingAnnotateVideoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingAnnotateVideoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.videoConfig = StreamingVideoConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.inputContent = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingAnnotateVideoRequest {
    return {
      videoConfig: isSet(object.videoConfig) ? StreamingVideoConfig.fromJSON(object.videoConfig) : undefined,
      inputContent: isSet(object.inputContent) ? Buffer.from(bytesFromBase64(object.inputContent)) : undefined,
    };
  },

  toJSON(message: StreamingAnnotateVideoRequest): unknown {
    const obj: any = {};
    if (message.videoConfig !== undefined) {
      obj.videoConfig = StreamingVideoConfig.toJSON(message.videoConfig);
    }
    if (message.inputContent !== undefined) {
      obj.inputContent = base64FromBytes(message.inputContent);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamingAnnotateVideoRequest>): StreamingAnnotateVideoRequest {
    return StreamingAnnotateVideoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamingAnnotateVideoRequest>): StreamingAnnotateVideoRequest {
    const message = createBaseStreamingAnnotateVideoRequest();
    message.videoConfig = (object.videoConfig !== undefined && object.videoConfig !== null)
      ? StreamingVideoConfig.fromPartial(object.videoConfig)
      : undefined;
    message.inputContent = object.inputContent ?? undefined;
    return message;
  },
};

function createBaseStreamingVideoConfig(): StreamingVideoConfig {
  return {
    shotChangeDetectionConfig: undefined,
    labelDetectionConfig: undefined,
    explicitContentDetectionConfig: undefined,
    objectTrackingConfig: undefined,
    automlActionRecognitionConfig: undefined,
    automlClassificationConfig: undefined,
    automlObjectTrackingConfig: undefined,
    feature: 0,
    storageConfig: undefined,
  };
}

export const StreamingVideoConfig: MessageFns<StreamingVideoConfig> = {
  encode(message: StreamingVideoConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shotChangeDetectionConfig !== undefined) {
      StreamingShotChangeDetectionConfig.encode(message.shotChangeDetectionConfig, writer.uint32(18).fork()).join();
    }
    if (message.labelDetectionConfig !== undefined) {
      StreamingLabelDetectionConfig.encode(message.labelDetectionConfig, writer.uint32(26).fork()).join();
    }
    if (message.explicitContentDetectionConfig !== undefined) {
      StreamingExplicitContentDetectionConfig.encode(message.explicitContentDetectionConfig, writer.uint32(34).fork())
        .join();
    }
    if (message.objectTrackingConfig !== undefined) {
      StreamingObjectTrackingConfig.encode(message.objectTrackingConfig, writer.uint32(42).fork()).join();
    }
    if (message.automlActionRecognitionConfig !== undefined) {
      StreamingAutomlActionRecognitionConfig.encode(message.automlActionRecognitionConfig, writer.uint32(186).fork())
        .join();
    }
    if (message.automlClassificationConfig !== undefined) {
      StreamingAutomlClassificationConfig.encode(message.automlClassificationConfig, writer.uint32(170).fork()).join();
    }
    if (message.automlObjectTrackingConfig !== undefined) {
      StreamingAutomlObjectTrackingConfig.encode(message.automlObjectTrackingConfig, writer.uint32(178).fork()).join();
    }
    if (message.feature !== 0) {
      writer.uint32(8).int32(message.feature);
    }
    if (message.storageConfig !== undefined) {
      StreamingStorageConfig.encode(message.storageConfig, writer.uint32(242).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamingVideoConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingVideoConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.shotChangeDetectionConfig = StreamingShotChangeDetectionConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.labelDetectionConfig = StreamingLabelDetectionConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.explicitContentDetectionConfig = StreamingExplicitContentDetectionConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.objectTrackingConfig = StreamingObjectTrackingConfig.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.automlActionRecognitionConfig = StreamingAutomlActionRecognitionConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.automlClassificationConfig = StreamingAutomlClassificationConfig.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.automlObjectTrackingConfig = StreamingAutomlObjectTrackingConfig.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 8) {
            break;
          }

          message.feature = reader.int32() as any;
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.storageConfig = StreamingStorageConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingVideoConfig {
    return {
      shotChangeDetectionConfig: isSet(object.shotChangeDetectionConfig)
        ? StreamingShotChangeDetectionConfig.fromJSON(object.shotChangeDetectionConfig)
        : undefined,
      labelDetectionConfig: isSet(object.labelDetectionConfig)
        ? StreamingLabelDetectionConfig.fromJSON(object.labelDetectionConfig)
        : undefined,
      explicitContentDetectionConfig: isSet(object.explicitContentDetectionConfig)
        ? StreamingExplicitContentDetectionConfig.fromJSON(object.explicitContentDetectionConfig)
        : undefined,
      objectTrackingConfig: isSet(object.objectTrackingConfig)
        ? StreamingObjectTrackingConfig.fromJSON(object.objectTrackingConfig)
        : undefined,
      automlActionRecognitionConfig: isSet(object.automlActionRecognitionConfig)
        ? StreamingAutomlActionRecognitionConfig.fromJSON(object.automlActionRecognitionConfig)
        : undefined,
      automlClassificationConfig: isSet(object.automlClassificationConfig)
        ? StreamingAutomlClassificationConfig.fromJSON(object.automlClassificationConfig)
        : undefined,
      automlObjectTrackingConfig: isSet(object.automlObjectTrackingConfig)
        ? StreamingAutomlObjectTrackingConfig.fromJSON(object.automlObjectTrackingConfig)
        : undefined,
      feature: isSet(object.feature) ? streamingFeatureFromJSON(object.feature) : 0,
      storageConfig: isSet(object.storageConfig) ? StreamingStorageConfig.fromJSON(object.storageConfig) : undefined,
    };
  },

  toJSON(message: StreamingVideoConfig): unknown {
    const obj: any = {};
    if (message.shotChangeDetectionConfig !== undefined) {
      obj.shotChangeDetectionConfig = StreamingShotChangeDetectionConfig.toJSON(message.shotChangeDetectionConfig);
    }
    if (message.labelDetectionConfig !== undefined) {
      obj.labelDetectionConfig = StreamingLabelDetectionConfig.toJSON(message.labelDetectionConfig);
    }
    if (message.explicitContentDetectionConfig !== undefined) {
      obj.explicitContentDetectionConfig = StreamingExplicitContentDetectionConfig.toJSON(
        message.explicitContentDetectionConfig,
      );
    }
    if (message.objectTrackingConfig !== undefined) {
      obj.objectTrackingConfig = StreamingObjectTrackingConfig.toJSON(message.objectTrackingConfig);
    }
    if (message.automlActionRecognitionConfig !== undefined) {
      obj.automlActionRecognitionConfig = StreamingAutomlActionRecognitionConfig.toJSON(
        message.automlActionRecognitionConfig,
      );
    }
    if (message.automlClassificationConfig !== undefined) {
      obj.automlClassificationConfig = StreamingAutomlClassificationConfig.toJSON(message.automlClassificationConfig);
    }
    if (message.automlObjectTrackingConfig !== undefined) {
      obj.automlObjectTrackingConfig = StreamingAutomlObjectTrackingConfig.toJSON(message.automlObjectTrackingConfig);
    }
    if (message.feature !== 0) {
      obj.feature = streamingFeatureToJSON(message.feature);
    }
    if (message.storageConfig !== undefined) {
      obj.storageConfig = StreamingStorageConfig.toJSON(message.storageConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamingVideoConfig>): StreamingVideoConfig {
    return StreamingVideoConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamingVideoConfig>): StreamingVideoConfig {
    const message = createBaseStreamingVideoConfig();
    message.shotChangeDetectionConfig =
      (object.shotChangeDetectionConfig !== undefined && object.shotChangeDetectionConfig !== null)
        ? StreamingShotChangeDetectionConfig.fromPartial(object.shotChangeDetectionConfig)
        : undefined;
    message.labelDetectionConfig = (object.labelDetectionConfig !== undefined && object.labelDetectionConfig !== null)
      ? StreamingLabelDetectionConfig.fromPartial(object.labelDetectionConfig)
      : undefined;
    message.explicitContentDetectionConfig =
      (object.explicitContentDetectionConfig !== undefined && object.explicitContentDetectionConfig !== null)
        ? StreamingExplicitContentDetectionConfig.fromPartial(object.explicitContentDetectionConfig)
        : undefined;
    message.objectTrackingConfig = (object.objectTrackingConfig !== undefined && object.objectTrackingConfig !== null)
      ? StreamingObjectTrackingConfig.fromPartial(object.objectTrackingConfig)
      : undefined;
    message.automlActionRecognitionConfig =
      (object.automlActionRecognitionConfig !== undefined && object.automlActionRecognitionConfig !== null)
        ? StreamingAutomlActionRecognitionConfig.fromPartial(object.automlActionRecognitionConfig)
        : undefined;
    message.automlClassificationConfig =
      (object.automlClassificationConfig !== undefined && object.automlClassificationConfig !== null)
        ? StreamingAutomlClassificationConfig.fromPartial(object.automlClassificationConfig)
        : undefined;
    message.automlObjectTrackingConfig =
      (object.automlObjectTrackingConfig !== undefined && object.automlObjectTrackingConfig !== null)
        ? StreamingAutomlObjectTrackingConfig.fromPartial(object.automlObjectTrackingConfig)
        : undefined;
    message.feature = object.feature ?? 0;
    message.storageConfig = (object.storageConfig !== undefined && object.storageConfig !== null)
      ? StreamingStorageConfig.fromPartial(object.storageConfig)
      : undefined;
    return message;
  },
};

function createBaseStreamingAnnotateVideoResponse(): StreamingAnnotateVideoResponse {
  return { error: undefined, annotationResults: undefined, annotationResultsUri: "" };
}

export const StreamingAnnotateVideoResponse: MessageFns<StreamingAnnotateVideoResponse> = {
  encode(message: StreamingAnnotateVideoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(10).fork()).join();
    }
    if (message.annotationResults !== undefined) {
      StreamingVideoAnnotationResults.encode(message.annotationResults, writer.uint32(18).fork()).join();
    }
    if (message.annotationResultsUri !== "") {
      writer.uint32(26).string(message.annotationResultsUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamingAnnotateVideoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingAnnotateVideoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.annotationResults = StreamingVideoAnnotationResults.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.annotationResultsUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingAnnotateVideoResponse {
    return {
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
      annotationResults: isSet(object.annotationResults)
        ? StreamingVideoAnnotationResults.fromJSON(object.annotationResults)
        : undefined,
      annotationResultsUri: isSet(object.annotationResultsUri) ? globalThis.String(object.annotationResultsUri) : "",
    };
  },

  toJSON(message: StreamingAnnotateVideoResponse): unknown {
    const obj: any = {};
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    if (message.annotationResults !== undefined) {
      obj.annotationResults = StreamingVideoAnnotationResults.toJSON(message.annotationResults);
    }
    if (message.annotationResultsUri !== "") {
      obj.annotationResultsUri = message.annotationResultsUri;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamingAnnotateVideoResponse>): StreamingAnnotateVideoResponse {
    return StreamingAnnotateVideoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamingAnnotateVideoResponse>): StreamingAnnotateVideoResponse {
    const message = createBaseStreamingAnnotateVideoResponse();
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    message.annotationResults = (object.annotationResults !== undefined && object.annotationResults !== null)
      ? StreamingVideoAnnotationResults.fromPartial(object.annotationResults)
      : undefined;
    message.annotationResultsUri = object.annotationResultsUri ?? "";
    return message;
  },
};

function createBaseStreamingVideoAnnotationResults(): StreamingVideoAnnotationResults {
  return { shotAnnotations: [], labelAnnotations: [], explicitAnnotation: undefined, objectAnnotations: [] };
}

export const StreamingVideoAnnotationResults: MessageFns<StreamingVideoAnnotationResults> = {
  encode(message: StreamingVideoAnnotationResults, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.shotAnnotations) {
      VideoSegment.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.labelAnnotations) {
      LabelAnnotation.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.explicitAnnotation !== undefined) {
      ExplicitContentAnnotation.encode(message.explicitAnnotation, writer.uint32(26).fork()).join();
    }
    for (const v of message.objectAnnotations) {
      ObjectTrackingAnnotation.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamingVideoAnnotationResults {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingVideoAnnotationResults();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.shotAnnotations.push(VideoSegment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.labelAnnotations.push(LabelAnnotation.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.explicitAnnotation = ExplicitContentAnnotation.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.objectAnnotations.push(ObjectTrackingAnnotation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingVideoAnnotationResults {
    return {
      shotAnnotations: globalThis.Array.isArray(object?.shotAnnotations)
        ? object.shotAnnotations.map((e: any) => VideoSegment.fromJSON(e))
        : [],
      labelAnnotations: globalThis.Array.isArray(object?.labelAnnotations)
        ? object.labelAnnotations.map((e: any) => LabelAnnotation.fromJSON(e))
        : [],
      explicitAnnotation: isSet(object.explicitAnnotation)
        ? ExplicitContentAnnotation.fromJSON(object.explicitAnnotation)
        : undefined,
      objectAnnotations: globalThis.Array.isArray(object?.objectAnnotations)
        ? object.objectAnnotations.map((e: any) => ObjectTrackingAnnotation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: StreamingVideoAnnotationResults): unknown {
    const obj: any = {};
    if (message.shotAnnotations?.length) {
      obj.shotAnnotations = message.shotAnnotations.map((e) => VideoSegment.toJSON(e));
    }
    if (message.labelAnnotations?.length) {
      obj.labelAnnotations = message.labelAnnotations.map((e) => LabelAnnotation.toJSON(e));
    }
    if (message.explicitAnnotation !== undefined) {
      obj.explicitAnnotation = ExplicitContentAnnotation.toJSON(message.explicitAnnotation);
    }
    if (message.objectAnnotations?.length) {
      obj.objectAnnotations = message.objectAnnotations.map((e) => ObjectTrackingAnnotation.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<StreamingVideoAnnotationResults>): StreamingVideoAnnotationResults {
    return StreamingVideoAnnotationResults.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamingVideoAnnotationResults>): StreamingVideoAnnotationResults {
    const message = createBaseStreamingVideoAnnotationResults();
    message.shotAnnotations = object.shotAnnotations?.map((e) => VideoSegment.fromPartial(e)) || [];
    message.labelAnnotations = object.labelAnnotations?.map((e) => LabelAnnotation.fromPartial(e)) || [];
    message.explicitAnnotation = (object.explicitAnnotation !== undefined && object.explicitAnnotation !== null)
      ? ExplicitContentAnnotation.fromPartial(object.explicitAnnotation)
      : undefined;
    message.objectAnnotations = object.objectAnnotations?.map((e) => ObjectTrackingAnnotation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamingShotChangeDetectionConfig(): StreamingShotChangeDetectionConfig {
  return {};
}

export const StreamingShotChangeDetectionConfig: MessageFns<StreamingShotChangeDetectionConfig> = {
  encode(_: StreamingShotChangeDetectionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamingShotChangeDetectionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingShotChangeDetectionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StreamingShotChangeDetectionConfig {
    return {};
  },

  toJSON(_: StreamingShotChangeDetectionConfig): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<StreamingShotChangeDetectionConfig>): StreamingShotChangeDetectionConfig {
    return StreamingShotChangeDetectionConfig.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<StreamingShotChangeDetectionConfig>): StreamingShotChangeDetectionConfig {
    const message = createBaseStreamingShotChangeDetectionConfig();
    return message;
  },
};

function createBaseStreamingLabelDetectionConfig(): StreamingLabelDetectionConfig {
  return { stationaryCamera: false };
}

export const StreamingLabelDetectionConfig: MessageFns<StreamingLabelDetectionConfig> = {
  encode(message: StreamingLabelDetectionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stationaryCamera !== false) {
      writer.uint32(8).bool(message.stationaryCamera);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamingLabelDetectionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingLabelDetectionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.stationaryCamera = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingLabelDetectionConfig {
    return { stationaryCamera: isSet(object.stationaryCamera) ? globalThis.Boolean(object.stationaryCamera) : false };
  },

  toJSON(message: StreamingLabelDetectionConfig): unknown {
    const obj: any = {};
    if (message.stationaryCamera !== false) {
      obj.stationaryCamera = message.stationaryCamera;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamingLabelDetectionConfig>): StreamingLabelDetectionConfig {
    return StreamingLabelDetectionConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamingLabelDetectionConfig>): StreamingLabelDetectionConfig {
    const message = createBaseStreamingLabelDetectionConfig();
    message.stationaryCamera = object.stationaryCamera ?? false;
    return message;
  },
};

function createBaseStreamingExplicitContentDetectionConfig(): StreamingExplicitContentDetectionConfig {
  return {};
}

export const StreamingExplicitContentDetectionConfig: MessageFns<StreamingExplicitContentDetectionConfig> = {
  encode(_: StreamingExplicitContentDetectionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamingExplicitContentDetectionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingExplicitContentDetectionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StreamingExplicitContentDetectionConfig {
    return {};
  },

  toJSON(_: StreamingExplicitContentDetectionConfig): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<StreamingExplicitContentDetectionConfig>): StreamingExplicitContentDetectionConfig {
    return StreamingExplicitContentDetectionConfig.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<StreamingExplicitContentDetectionConfig>): StreamingExplicitContentDetectionConfig {
    const message = createBaseStreamingExplicitContentDetectionConfig();
    return message;
  },
};

function createBaseStreamingObjectTrackingConfig(): StreamingObjectTrackingConfig {
  return {};
}

export const StreamingObjectTrackingConfig: MessageFns<StreamingObjectTrackingConfig> = {
  encode(_: StreamingObjectTrackingConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamingObjectTrackingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingObjectTrackingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StreamingObjectTrackingConfig {
    return {};
  },

  toJSON(_: StreamingObjectTrackingConfig): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<StreamingObjectTrackingConfig>): StreamingObjectTrackingConfig {
    return StreamingObjectTrackingConfig.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<StreamingObjectTrackingConfig>): StreamingObjectTrackingConfig {
    const message = createBaseStreamingObjectTrackingConfig();
    return message;
  },
};

function createBaseStreamingAutomlActionRecognitionConfig(): StreamingAutomlActionRecognitionConfig {
  return { modelName: "" };
}

export const StreamingAutomlActionRecognitionConfig: MessageFns<StreamingAutomlActionRecognitionConfig> = {
  encode(message: StreamingAutomlActionRecognitionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modelName !== "") {
      writer.uint32(10).string(message.modelName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamingAutomlActionRecognitionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingAutomlActionRecognitionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingAutomlActionRecognitionConfig {
    return { modelName: isSet(object.modelName) ? globalThis.String(object.modelName) : "" };
  },

  toJSON(message: StreamingAutomlActionRecognitionConfig): unknown {
    const obj: any = {};
    if (message.modelName !== "") {
      obj.modelName = message.modelName;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamingAutomlActionRecognitionConfig>): StreamingAutomlActionRecognitionConfig {
    return StreamingAutomlActionRecognitionConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamingAutomlActionRecognitionConfig>): StreamingAutomlActionRecognitionConfig {
    const message = createBaseStreamingAutomlActionRecognitionConfig();
    message.modelName = object.modelName ?? "";
    return message;
  },
};

function createBaseStreamingAutomlClassificationConfig(): StreamingAutomlClassificationConfig {
  return { modelName: "" };
}

export const StreamingAutomlClassificationConfig: MessageFns<StreamingAutomlClassificationConfig> = {
  encode(message: StreamingAutomlClassificationConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modelName !== "") {
      writer.uint32(10).string(message.modelName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamingAutomlClassificationConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingAutomlClassificationConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingAutomlClassificationConfig {
    return { modelName: isSet(object.modelName) ? globalThis.String(object.modelName) : "" };
  },

  toJSON(message: StreamingAutomlClassificationConfig): unknown {
    const obj: any = {};
    if (message.modelName !== "") {
      obj.modelName = message.modelName;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamingAutomlClassificationConfig>): StreamingAutomlClassificationConfig {
    return StreamingAutomlClassificationConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamingAutomlClassificationConfig>): StreamingAutomlClassificationConfig {
    const message = createBaseStreamingAutomlClassificationConfig();
    message.modelName = object.modelName ?? "";
    return message;
  },
};

function createBaseStreamingAutomlObjectTrackingConfig(): StreamingAutomlObjectTrackingConfig {
  return { modelName: "" };
}

export const StreamingAutomlObjectTrackingConfig: MessageFns<StreamingAutomlObjectTrackingConfig> = {
  encode(message: StreamingAutomlObjectTrackingConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modelName !== "") {
      writer.uint32(10).string(message.modelName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamingAutomlObjectTrackingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingAutomlObjectTrackingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingAutomlObjectTrackingConfig {
    return { modelName: isSet(object.modelName) ? globalThis.String(object.modelName) : "" };
  },

  toJSON(message: StreamingAutomlObjectTrackingConfig): unknown {
    const obj: any = {};
    if (message.modelName !== "") {
      obj.modelName = message.modelName;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamingAutomlObjectTrackingConfig>): StreamingAutomlObjectTrackingConfig {
    return StreamingAutomlObjectTrackingConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamingAutomlObjectTrackingConfig>): StreamingAutomlObjectTrackingConfig {
    const message = createBaseStreamingAutomlObjectTrackingConfig();
    message.modelName = object.modelName ?? "";
    return message;
  },
};

function createBaseStreamingStorageConfig(): StreamingStorageConfig {
  return { enableStorageAnnotationResult: false, annotationResultStorageDirectory: "" };
}

export const StreamingStorageConfig: MessageFns<StreamingStorageConfig> = {
  encode(message: StreamingStorageConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enableStorageAnnotationResult !== false) {
      writer.uint32(8).bool(message.enableStorageAnnotationResult);
    }
    if (message.annotationResultStorageDirectory !== "") {
      writer.uint32(26).string(message.annotationResultStorageDirectory);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamingStorageConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingStorageConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enableStorageAnnotationResult = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.annotationResultStorageDirectory = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingStorageConfig {
    return {
      enableStorageAnnotationResult: isSet(object.enableStorageAnnotationResult)
        ? globalThis.Boolean(object.enableStorageAnnotationResult)
        : false,
      annotationResultStorageDirectory: isSet(object.annotationResultStorageDirectory)
        ? globalThis.String(object.annotationResultStorageDirectory)
        : "",
    };
  },

  toJSON(message: StreamingStorageConfig): unknown {
    const obj: any = {};
    if (message.enableStorageAnnotationResult !== false) {
      obj.enableStorageAnnotationResult = message.enableStorageAnnotationResult;
    }
    if (message.annotationResultStorageDirectory !== "") {
      obj.annotationResultStorageDirectory = message.annotationResultStorageDirectory;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamingStorageConfig>): StreamingStorageConfig {
    return StreamingStorageConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamingStorageConfig>): StreamingStorageConfig {
    const message = createBaseStreamingStorageConfig();
    message.enableStorageAnnotationResult = object.enableStorageAnnotationResult ?? false;
    message.annotationResultStorageDirectory = object.annotationResultStorageDirectory ?? "";
    return message;
  },
};

/** Service that implements the Video Intelligence API. */
export type VideoIntelligenceServiceDefinition = typeof VideoIntelligenceServiceDefinition;
export const VideoIntelligenceServiceDefinition = {
  name: "VideoIntelligenceService",
  fullName: "google.cloud.videointelligence.v1p3beta1.VideoIntelligenceService",
  methods: {
    /**
     * Performs asynchronous video annotation. Progress and results can be
     * retrieved through the `google.longrunning.Operations` interface.
     * `Operation.metadata` contains `AnnotateVideoProgress` (progress).
     * `Operation.response` contains `AnnotateVideoResponse` (results).
     */
    annotateVideo: {
      name: "AnnotateVideo",
      requestType: AnnotateVideoRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              46,
              10,
              21,
              65,
              110,
              110,
              111,
              116,
              97,
              116,
              101,
              86,
              105,
              100,
              101,
              111,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              21,
              65,
              110,
              110,
              111,
              116,
              97,
              116,
              101,
              86,
              105,
              100,
              101,
              111,
              80,
              114,
              111,
              103,
              114,
              101,
              115,
              115,
            ]),
          ],
          8410: [
            Buffer.from([18, 105, 110, 112, 117, 116, 95, 117, 114, 105, 44, 102, 101, 97, 116, 117, 114, 101, 115]),
          ],
          578365826: [
            Buffer.from([
              31,
              58,
              1,
              42,
              34,
              26,
              47,
              118,
              49,
              112,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              118,
              105,
              100,
              101,
              111,
              115,
              58,
              97,
              110,
              110,
              111,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface VideoIntelligenceServiceImplementation<CallContextExt = {}> {
  /**
   * Performs asynchronous video annotation. Progress and results can be
   * retrieved through the `google.longrunning.Operations` interface.
   * `Operation.metadata` contains `AnnotateVideoProgress` (progress).
   * `Operation.response` contains `AnnotateVideoResponse` (results).
   */
  annotateVideo(request: AnnotateVideoRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface VideoIntelligenceServiceClient<CallOptionsExt = {}> {
  /**
   * Performs asynchronous video annotation. Progress and results can be
   * retrieved through the `google.longrunning.Operations` interface.
   * `Operation.metadata` contains `AnnotateVideoProgress` (progress).
   * `Operation.response` contains `AnnotateVideoResponse` (results).
   */
  annotateVideo(request: DeepPartial<AnnotateVideoRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

/** Service that implements streaming Video Intelligence API. */
export type StreamingVideoIntelligenceServiceDefinition = typeof StreamingVideoIntelligenceServiceDefinition;
export const StreamingVideoIntelligenceServiceDefinition = {
  name: "StreamingVideoIntelligenceService",
  fullName: "google.cloud.videointelligence.v1p3beta1.StreamingVideoIntelligenceService",
  methods: {
    /**
     * Performs video annotation with bidirectional streaming: emitting results
     * while sending video/audio bytes.
     * This method is only available via the gRPC API (not REST).
     */
    streamingAnnotateVideo: {
      name: "StreamingAnnotateVideo",
      requestType: StreamingAnnotateVideoRequest,
      requestStream: true,
      responseType: StreamingAnnotateVideoResponse,
      responseStream: true,
      options: {},
    },
  },
} as const;

export interface StreamingVideoIntelligenceServiceImplementation<CallContextExt = {}> {
  /**
   * Performs video annotation with bidirectional streaming: emitting results
   * while sending video/audio bytes.
   * This method is only available via the gRPC API (not REST).
   */
  streamingAnnotateVideo(
    request: AsyncIterable<StreamingAnnotateVideoRequest>,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<StreamingAnnotateVideoResponse>>;
}

export interface StreamingVideoIntelligenceServiceClient<CallOptionsExt = {}> {
  /**
   * Performs video annotation with bidirectional streaming: emitting results
   * while sending video/audio bytes.
   * This method is only available via the gRPC API (not REST).
   */
  streamingAnnotateVideo(
    request: AsyncIterable<DeepPartial<StreamingAnnotateVideoRequest>>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<StreamingAnnotateVideoResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
