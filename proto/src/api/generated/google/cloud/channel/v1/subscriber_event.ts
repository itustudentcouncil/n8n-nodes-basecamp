// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/channel/v1/subscriber_event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.channel.v1";

/** Represents Pub/Sub message content describing customer update. */
export interface CustomerEvent {
  /**
   * Resource name of the customer.
   * Format: accounts/{account_id}/customers/{customer_id}
   */
  customer: string;
  /** Type of event which happened on the customer. */
  eventType: CustomerEvent_Type;
}

/** Type of customer event. */
export enum CustomerEvent_Type {
  /** TYPE_UNSPECIFIED - Not used. */
  TYPE_UNSPECIFIED = 0,
  /** PRIMARY_DOMAIN_CHANGED - Primary domain for customer was changed. */
  PRIMARY_DOMAIN_CHANGED = 1,
  /** PRIMARY_DOMAIN_VERIFIED - Primary domain of the customer has been verified. */
  PRIMARY_DOMAIN_VERIFIED = 2,
  UNRECOGNIZED = -1,
}

export function customerEvent_TypeFromJSON(object: any): CustomerEvent_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return CustomerEvent_Type.TYPE_UNSPECIFIED;
    case 1:
    case "PRIMARY_DOMAIN_CHANGED":
      return CustomerEvent_Type.PRIMARY_DOMAIN_CHANGED;
    case 2:
    case "PRIMARY_DOMAIN_VERIFIED":
      return CustomerEvent_Type.PRIMARY_DOMAIN_VERIFIED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CustomerEvent_Type.UNRECOGNIZED;
  }
}

export function customerEvent_TypeToJSON(object: CustomerEvent_Type): string {
  switch (object) {
    case CustomerEvent_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case CustomerEvent_Type.PRIMARY_DOMAIN_CHANGED:
      return "PRIMARY_DOMAIN_CHANGED";
    case CustomerEvent_Type.PRIMARY_DOMAIN_VERIFIED:
      return "PRIMARY_DOMAIN_VERIFIED";
    case CustomerEvent_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents Pub/Sub message content describing entitlement update. */
export interface EntitlementEvent {
  /**
   * Resource name of an entitlement of the form:
   * accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}
   */
  entitlement: string;
  /** Type of event which happened on the entitlement. */
  eventType: EntitlementEvent_Type;
}

/** Type of entitlement event. */
export enum EntitlementEvent_Type {
  /** TYPE_UNSPECIFIED - Not used. */
  TYPE_UNSPECIFIED = 0,
  /** CREATED - A new entitlement was created. */
  CREATED = 1,
  /**
   * PRICE_PLAN_SWITCHED - The offer type associated with an entitlement was changed.
   * This is not triggered if an entitlement converts from a commit offer to a
   * flexible offer as part of a renewal.
   */
  PRICE_PLAN_SWITCHED = 3,
  /** COMMITMENT_CHANGED - Annual commitment for a commit plan was changed. */
  COMMITMENT_CHANGED = 4,
  /** RENEWED - An annual entitlement was renewed. */
  RENEWED = 5,
  /** SUSPENDED - Entitlement was suspended. */
  SUSPENDED = 6,
  /** ACTIVATED - Entitlement was unsuspended. */
  ACTIVATED = 7,
  /** CANCELLED - Entitlement was cancelled. */
  CANCELLED = 8,
  /**
   * SKU_CHANGED - Entitlement was upgraded or downgraded (e.g. from Google Workspace
   * Business Standard to Google Workspace Business Plus).
   */
  SKU_CHANGED = 9,
  /** RENEWAL_SETTING_CHANGED - The renewal settings of an entitlement has changed. */
  RENEWAL_SETTING_CHANGED = 10,
  /** PAID_SERVICE_STARTED - Paid service has started on trial entitlement. */
  PAID_SERVICE_STARTED = 11,
  /** LICENSE_ASSIGNMENT_CHANGED - License was assigned to or revoked from a user. */
  LICENSE_ASSIGNMENT_CHANGED = 12,
  /** LICENSE_CAP_CHANGED - License cap was changed for the entitlement. */
  LICENSE_CAP_CHANGED = 13,
  UNRECOGNIZED = -1,
}

export function entitlementEvent_TypeFromJSON(object: any): EntitlementEvent_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return EntitlementEvent_Type.TYPE_UNSPECIFIED;
    case 1:
    case "CREATED":
      return EntitlementEvent_Type.CREATED;
    case 3:
    case "PRICE_PLAN_SWITCHED":
      return EntitlementEvent_Type.PRICE_PLAN_SWITCHED;
    case 4:
    case "COMMITMENT_CHANGED":
      return EntitlementEvent_Type.COMMITMENT_CHANGED;
    case 5:
    case "RENEWED":
      return EntitlementEvent_Type.RENEWED;
    case 6:
    case "SUSPENDED":
      return EntitlementEvent_Type.SUSPENDED;
    case 7:
    case "ACTIVATED":
      return EntitlementEvent_Type.ACTIVATED;
    case 8:
    case "CANCELLED":
      return EntitlementEvent_Type.CANCELLED;
    case 9:
    case "SKU_CHANGED":
      return EntitlementEvent_Type.SKU_CHANGED;
    case 10:
    case "RENEWAL_SETTING_CHANGED":
      return EntitlementEvent_Type.RENEWAL_SETTING_CHANGED;
    case 11:
    case "PAID_SERVICE_STARTED":
      return EntitlementEvent_Type.PAID_SERVICE_STARTED;
    case 12:
    case "LICENSE_ASSIGNMENT_CHANGED":
      return EntitlementEvent_Type.LICENSE_ASSIGNMENT_CHANGED;
    case 13:
    case "LICENSE_CAP_CHANGED":
      return EntitlementEvent_Type.LICENSE_CAP_CHANGED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EntitlementEvent_Type.UNRECOGNIZED;
  }
}

export function entitlementEvent_TypeToJSON(object: EntitlementEvent_Type): string {
  switch (object) {
    case EntitlementEvent_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case EntitlementEvent_Type.CREATED:
      return "CREATED";
    case EntitlementEvent_Type.PRICE_PLAN_SWITCHED:
      return "PRICE_PLAN_SWITCHED";
    case EntitlementEvent_Type.COMMITMENT_CHANGED:
      return "COMMITMENT_CHANGED";
    case EntitlementEvent_Type.RENEWED:
      return "RENEWED";
    case EntitlementEvent_Type.SUSPENDED:
      return "SUSPENDED";
    case EntitlementEvent_Type.ACTIVATED:
      return "ACTIVATED";
    case EntitlementEvent_Type.CANCELLED:
      return "CANCELLED";
    case EntitlementEvent_Type.SKU_CHANGED:
      return "SKU_CHANGED";
    case EntitlementEvent_Type.RENEWAL_SETTING_CHANGED:
      return "RENEWAL_SETTING_CHANGED";
    case EntitlementEvent_Type.PAID_SERVICE_STARTED:
      return "PAID_SERVICE_STARTED";
    case EntitlementEvent_Type.LICENSE_ASSIGNMENT_CHANGED:
      return "LICENSE_ASSIGNMENT_CHANGED";
    case EntitlementEvent_Type.LICENSE_CAP_CHANGED:
      return "LICENSE_CAP_CHANGED";
    case EntitlementEvent_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Represents information which resellers will get as part of notification from
 * Pub/Sub.
 */
export interface SubscriberEvent {
  /** Customer event sent as part of Pub/Sub event to partners. */
  customerEvent?:
    | CustomerEvent
    | undefined;
  /** Entitlement event sent as part of Pub/Sub event to partners. */
  entitlementEvent?: EntitlementEvent | undefined;
}

function createBaseCustomerEvent(): CustomerEvent {
  return { customer: "", eventType: 0 };
}

export const CustomerEvent: MessageFns<CustomerEvent> = {
  encode(message: CustomerEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customer !== "") {
      writer.uint32(10).string(message.customer);
    }
    if (message.eventType !== 0) {
      writer.uint32(16).int32(message.eventType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customer = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.eventType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerEvent {
    return {
      customer: isSet(object.customer) ? globalThis.String(object.customer) : "",
      eventType: isSet(object.eventType) ? customerEvent_TypeFromJSON(object.eventType) : 0,
    };
  },

  toJSON(message: CustomerEvent): unknown {
    const obj: any = {};
    if (message.customer !== "") {
      obj.customer = message.customer;
    }
    if (message.eventType !== 0) {
      obj.eventType = customerEvent_TypeToJSON(message.eventType);
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerEvent>): CustomerEvent {
    return CustomerEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerEvent>): CustomerEvent {
    const message = createBaseCustomerEvent();
    message.customer = object.customer ?? "";
    message.eventType = object.eventType ?? 0;
    return message;
  },
};

function createBaseEntitlementEvent(): EntitlementEvent {
  return { entitlement: "", eventType: 0 };
}

export const EntitlementEvent: MessageFns<EntitlementEvent> = {
  encode(message: EntitlementEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entitlement !== "") {
      writer.uint32(10).string(message.entitlement);
    }
    if (message.eventType !== 0) {
      writer.uint32(16).int32(message.eventType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntitlementEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntitlementEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entitlement = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.eventType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntitlementEvent {
    return {
      entitlement: isSet(object.entitlement) ? globalThis.String(object.entitlement) : "",
      eventType: isSet(object.eventType) ? entitlementEvent_TypeFromJSON(object.eventType) : 0,
    };
  },

  toJSON(message: EntitlementEvent): unknown {
    const obj: any = {};
    if (message.entitlement !== "") {
      obj.entitlement = message.entitlement;
    }
    if (message.eventType !== 0) {
      obj.eventType = entitlementEvent_TypeToJSON(message.eventType);
    }
    return obj;
  },

  create(base?: DeepPartial<EntitlementEvent>): EntitlementEvent {
    return EntitlementEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EntitlementEvent>): EntitlementEvent {
    const message = createBaseEntitlementEvent();
    message.entitlement = object.entitlement ?? "";
    message.eventType = object.eventType ?? 0;
    return message;
  },
};

function createBaseSubscriberEvent(): SubscriberEvent {
  return { customerEvent: undefined, entitlementEvent: undefined };
}

export const SubscriberEvent: MessageFns<SubscriberEvent> = {
  encode(message: SubscriberEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerEvent !== undefined) {
      CustomerEvent.encode(message.customerEvent, writer.uint32(10).fork()).join();
    }
    if (message.entitlementEvent !== undefined) {
      EntitlementEvent.encode(message.entitlementEvent, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscriberEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscriberEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerEvent = CustomerEvent.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entitlementEvent = EntitlementEvent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscriberEvent {
    return {
      customerEvent: isSet(object.customerEvent) ? CustomerEvent.fromJSON(object.customerEvent) : undefined,
      entitlementEvent: isSet(object.entitlementEvent) ? EntitlementEvent.fromJSON(object.entitlementEvent) : undefined,
    };
  },

  toJSON(message: SubscriberEvent): unknown {
    const obj: any = {};
    if (message.customerEvent !== undefined) {
      obj.customerEvent = CustomerEvent.toJSON(message.customerEvent);
    }
    if (message.entitlementEvent !== undefined) {
      obj.entitlementEvent = EntitlementEvent.toJSON(message.entitlementEvent);
    }
    return obj;
  },

  create(base?: DeepPartial<SubscriberEvent>): SubscriberEvent {
    return SubscriberEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubscriberEvent>): SubscriberEvent {
    const message = createBaseSubscriberEvent();
    message.customerEvent = (object.customerEvent !== undefined && object.customerEvent !== null)
      ? CustomerEvent.fromPartial(object.customerEvent)
      : undefined;
    message.entitlementEvent = (object.entitlementEvent !== undefined && object.entitlementEvent !== null)
      ? EntitlementEvent.fromPartial(object.entitlementEvent)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
