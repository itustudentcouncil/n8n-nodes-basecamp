// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/channel/v1/products.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.channel.v1";

/** Type of media used. */
export enum MediaType {
  /** MEDIA_TYPE_UNSPECIFIED - Not used. */
  MEDIA_TYPE_UNSPECIFIED = 0,
  /** MEDIA_TYPE_IMAGE - Type of image. */
  MEDIA_TYPE_IMAGE = 1,
  UNRECOGNIZED = -1,
}

export function mediaTypeFromJSON(object: any): MediaType {
  switch (object) {
    case 0:
    case "MEDIA_TYPE_UNSPECIFIED":
      return MediaType.MEDIA_TYPE_UNSPECIFIED;
    case 1:
    case "MEDIA_TYPE_IMAGE":
      return MediaType.MEDIA_TYPE_IMAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MediaType.UNRECOGNIZED;
  }
}

export function mediaTypeToJSON(object: MediaType): string {
  switch (object) {
    case MediaType.MEDIA_TYPE_UNSPECIFIED:
      return "MEDIA_TYPE_UNSPECIFIED";
    case MediaType.MEDIA_TYPE_IMAGE:
      return "MEDIA_TYPE_IMAGE";
    case MediaType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A Product is the entity a customer uses when placing an order. For example,
 * Google Workspace, Google Voice, etc.
 */
export interface Product {
  /**
   * Resource Name of the Product.
   * Format: products/{product_id}
   */
  name: string;
  /** Marketing information for the product. */
  marketingInfo: MarketingInfo | undefined;
}

/**
 * Represents a product's purchasable Stock Keeping Unit (SKU).
 * SKUs represent the different variations of the product. For example, Google
 * Workspace Business Standard and Google Workspace Business Plus are Google
 * Workspace product SKUs.
 */
export interface Sku {
  /**
   * Resource Name of the SKU.
   * Format: products/{product_id}/skus/{sku_id}
   */
  name: string;
  /** Marketing information for the SKU. */
  marketingInfo:
    | MarketingInfo
    | undefined;
  /** Product the SKU is associated with. */
  product: Product | undefined;
}

/** Represents the marketing information for a Product, SKU or Offer. */
export interface MarketingInfo {
  /** Human readable name. */
  displayName: string;
  /** Human readable description. Description can contain HTML. */
  description: string;
  /** Default logo. */
  defaultLogo: Media | undefined;
}

/** Represents media information. */
export interface Media {
  /** Title of the media. */
  title: string;
  /** URL of the media. */
  content: string;
  /** Type of the media. */
  type: MediaType;
}

function createBaseProduct(): Product {
  return { name: "", marketingInfo: undefined };
}

export const Product: MessageFns<Product> = {
  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.marketingInfo !== undefined) {
      MarketingInfo.encode(message.marketingInfo, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.marketingInfo = MarketingInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Product {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      marketingInfo: isSet(object.marketingInfo) ? MarketingInfo.fromJSON(object.marketingInfo) : undefined,
    };
  },

  toJSON(message: Product): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.marketingInfo !== undefined) {
      obj.marketingInfo = MarketingInfo.toJSON(message.marketingInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<Product>): Product {
    return Product.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Product>): Product {
    const message = createBaseProduct();
    message.name = object.name ?? "";
    message.marketingInfo = (object.marketingInfo !== undefined && object.marketingInfo !== null)
      ? MarketingInfo.fromPartial(object.marketingInfo)
      : undefined;
    return message;
  },
};

function createBaseSku(): Sku {
  return { name: "", marketingInfo: undefined, product: undefined };
}

export const Sku: MessageFns<Sku> = {
  encode(message: Sku, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.marketingInfo !== undefined) {
      MarketingInfo.encode(message.marketingInfo, writer.uint32(18).fork()).join();
    }
    if (message.product !== undefined) {
      Product.encode(message.product, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Sku {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSku();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.marketingInfo = MarketingInfo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.product = Product.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Sku {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      marketingInfo: isSet(object.marketingInfo) ? MarketingInfo.fromJSON(object.marketingInfo) : undefined,
      product: isSet(object.product) ? Product.fromJSON(object.product) : undefined,
    };
  },

  toJSON(message: Sku): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.marketingInfo !== undefined) {
      obj.marketingInfo = MarketingInfo.toJSON(message.marketingInfo);
    }
    if (message.product !== undefined) {
      obj.product = Product.toJSON(message.product);
    }
    return obj;
  },

  create(base?: DeepPartial<Sku>): Sku {
    return Sku.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Sku>): Sku {
    const message = createBaseSku();
    message.name = object.name ?? "";
    message.marketingInfo = (object.marketingInfo !== undefined && object.marketingInfo !== null)
      ? MarketingInfo.fromPartial(object.marketingInfo)
      : undefined;
    message.product = (object.product !== undefined && object.product !== null)
      ? Product.fromPartial(object.product)
      : undefined;
    return message;
  },
};

function createBaseMarketingInfo(): MarketingInfo {
  return { displayName: "", description: "", defaultLogo: undefined };
}

export const MarketingInfo: MessageFns<MarketingInfo> = {
  encode(message: MarketingInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.defaultLogo !== undefined) {
      Media.encode(message.defaultLogo, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarketingInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarketingInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.defaultLogo = Media.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarketingInfo {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      defaultLogo: isSet(object.defaultLogo) ? Media.fromJSON(object.defaultLogo) : undefined,
    };
  },

  toJSON(message: MarketingInfo): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.defaultLogo !== undefined) {
      obj.defaultLogo = Media.toJSON(message.defaultLogo);
    }
    return obj;
  },

  create(base?: DeepPartial<MarketingInfo>): MarketingInfo {
    return MarketingInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MarketingInfo>): MarketingInfo {
    const message = createBaseMarketingInfo();
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.defaultLogo = (object.defaultLogo !== undefined && object.defaultLogo !== null)
      ? Media.fromPartial(object.defaultLogo)
      : undefined;
    return message;
  },
};

function createBaseMedia(): Media {
  return { title: "", content: "", type: 0 };
}

export const Media: MessageFns<Media> = {
  encode(message: Media, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Media {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMedia();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Media {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      type: isSet(object.type) ? mediaTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: Media): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.type !== 0) {
      obj.type = mediaTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<Media>): Media {
    return Media.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Media>): Media {
    const message = createBaseMedia();
    message.title = object.title ?? "";
    message.content = object.content ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
