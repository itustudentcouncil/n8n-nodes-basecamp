// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/datastream/v1/datastream.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  ConnectionProfile,
  MysqlRdbms,
  OracleRdbms,
  PostgresqlRdbms,
  PrivateConnection,
  Route,
  SourceObjectIdentifier,
  Stream,
  StreamObject,
  ValidationResult,
} from "./datastream_resources.js";

export const protobufPackage = "google.cloud.datastream.v1";

/** Request message for 'discover' ConnectionProfile request. */
export interface DiscoverConnectionProfileRequest {
  /**
   * Required. The parent resource of the connection profile type. Must be in
   * the format `projects/* /locations/*`.
   */
  parent: string;
  /** An ad-hoc connection profile configuration. */
  connectionProfile?:
    | ConnectionProfile
    | undefined;
  /** A reference to an existing connection profile. */
  connectionProfileName?:
    | string
    | undefined;
  /**
   * Whether to retrieve the full hierarchy of data objects (TRUE) or only the
   * current level (FALSE).
   */
  fullHierarchy?:
    | boolean
    | undefined;
  /** The number of hierarchy levels below the current level to be retrieved. */
  hierarchyDepth?:
    | number
    | undefined;
  /** Oracle RDBMS to enrich with child data objects and metadata. */
  oracleRdbms?:
    | OracleRdbms
    | undefined;
  /** MySQL RDBMS to enrich with child data objects and metadata. */
  mysqlRdbms?:
    | MysqlRdbms
    | undefined;
  /** PostgreSQL RDBMS to enrich with child data objects and metadata. */
  postgresqlRdbms?: PostgresqlRdbms | undefined;
}

/** Response from a discover request. */
export interface DiscoverConnectionProfileResponse {
  /** Enriched Oracle RDBMS object. */
  oracleRdbms?:
    | OracleRdbms
    | undefined;
  /** Enriched MySQL RDBMS object. */
  mysqlRdbms?:
    | MysqlRdbms
    | undefined;
  /** Enriched PostgreSQL RDBMS object. */
  postgresqlRdbms?: PostgresqlRdbms | undefined;
}

/** Request message for 'FetchStaticIps' request. */
export interface FetchStaticIpsRequest {
  /**
   * Required. The resource name for the location for which static IPs should be
   * returned. Must be in the format `projects/* /locations/*`.
   */
  name: string;
  /** Maximum number of Ips to return, will likely not be specified. */
  pageSize: number;
  /**
   * A page token, received from a previous `ListStaticIps` call.
   * will likely not be specified.
   */
  pageToken: string;
}

/** Response message for a 'FetchStaticIps' response. */
export interface FetchStaticIpsResponse {
  /** list of static ips by account */
  staticIps: string[];
  /**
   * A token that can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for listing connection profiles. */
export interface ListConnectionProfilesRequest {
  /** Required. The parent that owns the collection of connection profiles. */
  parent: string;
  /**
   * Maximum number of connection profiles to return.
   * If unspecified, at most 50 connection profiles will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Page token received from a previous `ListConnectionProfiles` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListConnectionProfiles`
   * must match the call that provided the page token.
   */
  pageToken: string;
  /** Filter request. */
  filter: string;
  /** Order by fields for the result. */
  orderBy: string;
}

/** Response message for listing connection profiles. */
export interface ListConnectionProfilesResponse {
  /** List of connection profiles. */
  connectionProfiles: ConnectionProfile[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message for getting a connection profile. */
export interface GetConnectionProfileRequest {
  /** Required. The name of the connection profile resource to get. */
  name: string;
}

/** Request message for creating a connection profile. */
export interface CreateConnectionProfileRequest {
  /** Required. The parent that owns the collection of ConnectionProfiles. */
  parent: string;
  /** Required. The connection profile identifier. */
  connectionProfileId: string;
  /** Required. The connection profile resource to create. */
  connectionProfile:
    | ConnectionProfile
    | undefined;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. Only validate the connection profile, but don't create any
   * resources. The default is false.
   */
  validateOnly: boolean;
  /** Optional. Create the connection profile without validating it. */
  force: boolean;
}

/** Connection profile update message. */
export interface UpdateConnectionProfileRequest {
  /**
   * Optional. Field mask is used to specify the fields to be overwritten in the
   * ConnectionProfile resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The connection profile to update. */
  connectionProfile:
    | ConnectionProfile
    | undefined;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. Only validate the connection profile, but don't update any
   * resources. The default is false.
   */
  validateOnly: boolean;
  /** Optional. Update the connection profile without validating it. */
  force: boolean;
}

/** Request message for deleting a connection profile. */
export interface DeleteConnectionProfileRequest {
  /** Required. The name of the connection profile resource to delete. */
  name: string;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request message for listing streams. */
export interface ListStreamsRequest {
  /** Required. The parent that owns the collection of streams. */
  parent: string;
  /**
   * Maximum number of streams to return.
   * If unspecified, at most 50 streams will  be returned. The maximum
   * value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Page token received from a previous `ListStreams` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListStreams`
   * must match the call that provided the page token.
   */
  pageToken: string;
  /** Filter request. */
  filter: string;
  /** Order by fields for the result. */
  orderBy: string;
}

/** Response message for listing streams. */
export interface ListStreamsResponse {
  /** List of streams */
  streams: Stream[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message for getting a stream. */
export interface GetStreamRequest {
  /** Required. The name of the stream resource to get. */
  name: string;
}

/** Request message for creating a stream. */
export interface CreateStreamRequest {
  /** Required. The parent that owns the collection of streams. */
  parent: string;
  /** Required. The stream identifier. */
  streamId: string;
  /** Required. The stream resource to create. */
  stream:
    | Stream
    | undefined;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. Only validate the stream, but don't create any resources.
   * The default is false.
   */
  validateOnly: boolean;
  /** Optional. Create the stream without validating it. */
  force: boolean;
}

/** Request message for updating a stream. */
export interface UpdateStreamRequest {
  /**
   * Optional. Field mask is used to specify the fields to be overwritten in the
   * stream resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The stream resource to update. */
  stream:
    | Stream
    | undefined;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. Only validate the stream with the changes, without actually
   * updating it. The default is false.
   */
  validateOnly: boolean;
  /** Optional. Update the stream without validating it. */
  force: boolean;
}

/** Request message for deleting a stream. */
export interface DeleteStreamRequest {
  /** Required. The name of the stream resource to delete. */
  name: string;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request for fetching a specific stream object. */
export interface GetStreamObjectRequest {
  /** Required. The name of the stream object resource to get. */
  name: string;
}

/**
 * Request for looking up a specific stream object by its source object
 * identifier.
 */
export interface LookupStreamObjectRequest {
  /** Required. The parent stream that owns the collection of objects. */
  parent: string;
  /** Required. The source object identifier which maps to the stream object. */
  sourceObjectIdentifier: SourceObjectIdentifier | undefined;
}

/** Request for manually initiating a backfill job for a specific stream object. */
export interface StartBackfillJobRequest {
  /**
   * Required. The name of the stream object resource to start a backfill job
   * for.
   */
  object: string;
}

/** Response for manually initiating a backfill job for a specific stream object. */
export interface StartBackfillJobResponse {
  /** The stream object resource a backfill job was started for. */
  object: StreamObject | undefined;
}

/**
 * Request for manually stopping a running backfill job for a specific stream
 * object.
 */
export interface StopBackfillJobRequest {
  /**
   * Required. The name of the stream object resource to stop the backfill job
   * for.
   */
  object: string;
}

/** Response for manually stop a backfill job for a specific stream object. */
export interface StopBackfillJobResponse {
  /** The stream object resource the backfill job was stopped for. */
  object: StreamObject | undefined;
}

/** Request for listing all objects for a specific stream. */
export interface ListStreamObjectsRequest {
  /** Required. The parent stream that owns the collection of objects. */
  parent: string;
  /**
   * Maximum number of objects to return. Default is 50.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Page token received from a previous `ListStreamObjectsRequest` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * `ListStreamObjectsRequest` must match the call that provided the page
   * token.
   */
  pageToken: string;
}

/** Response containing the objects for a stream. */
export interface ListStreamObjectsResponse {
  /** List of stream objects. */
  streamObjects: StreamObject[];
  /** A token, which can be sent as `page_token` to retrieve the next page. */
  nextPageToken: string;
}

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
  /** Output only. Results of executed validations if there are any. */
  validationResult: ValidationResult | undefined;
}

/** Request for creating a private connection. */
export interface CreatePrivateConnectionRequest {
  /** Required. The parent that owns the collection of PrivateConnections. */
  parent: string;
  /** Required. The private connectivity identifier. */
  privateConnectionId: string;
  /** Required. The Private Connectivity resource to create. */
  privateConnection:
    | PrivateConnection
    | undefined;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /** Optional. If set to true, will skip validations. */
  force: boolean;
}

/** Request for listing private connections. */
export interface ListPrivateConnectionsRequest {
  /**
   * Required. The parent that owns the collection of private connectivity
   * configurations.
   */
  parent: string;
  /**
   * Maximum number of private connectivity configurations to return.
   * If unspecified, at most 50 private connectivity configurations that will be
   * returned. The maximum value is 1000; values above 1000 will be coerced to
   * 1000.
   */
  pageSize: number;
  /**
   * Page token received from a previous `ListPrivateConnections` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * `ListPrivateConnections` must match the call that provided the page
   * token.
   */
  pageToken: string;
  /** Filter request. */
  filter: string;
  /** Order by fields for the result. */
  orderBy: string;
}

/** Response containing a list of private connection configurations. */
export interface ListPrivateConnectionsResponse {
  /** List of private connectivity configurations. */
  privateConnections: PrivateConnection[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request to delete a private connection. */
export interface DeletePrivateConnectionRequest {
  /** Required. The name of the private connectivity configuration to delete. */
  name: string;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set to true, any child routes that belong to this
   * PrivateConnection will also be deleted.
   */
  force: boolean;
}

/** Request to get a private connection configuration. */
export interface GetPrivateConnectionRequest {
  /** Required. The name of the  private connectivity configuration to get. */
  name: string;
}

/** Route creation request. */
export interface CreateRouteRequest {
  /** Required. The parent that owns the collection of Routes. */
  parent: string;
  /** Required. The Route identifier. */
  routeId: string;
  /** Required. The Route resource to create. */
  route:
    | Route
    | undefined;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Route list request. */
export interface ListRoutesRequest {
  /** Required. The parent that owns the collection of Routess. */
  parent: string;
  /**
   * Maximum number of Routes to return. The service may return
   * fewer than this value. If unspecified, at most 50 Routes
   * will be returned. The maximum value is 1000; values above 1000 will be
   * coerced to 1000.
   */
  pageSize: number;
  /**
   * Page token received from a previous `ListRoutes` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * `ListRoutes` must match the call that provided the page
   * token.
   */
  pageToken: string;
  /** Filter request. */
  filter: string;
  /** Order by fields for the result. */
  orderBy: string;
}

/** Route list response. */
export interface ListRoutesResponse {
  /** List of Routes. */
  routes: Route[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Route deletion request. */
export interface DeleteRouteRequest {
  /** Required. The name of the Route resource to delete. */
  name: string;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Route get request. */
export interface GetRouteRequest {
  /** Required. The name of the Route resource to get. */
  name: string;
}

function createBaseDiscoverConnectionProfileRequest(): DiscoverConnectionProfileRequest {
  return {
    parent: "",
    connectionProfile: undefined,
    connectionProfileName: undefined,
    fullHierarchy: undefined,
    hierarchyDepth: undefined,
    oracleRdbms: undefined,
    mysqlRdbms: undefined,
    postgresqlRdbms: undefined,
  };
}

export const DiscoverConnectionProfileRequest: MessageFns<DiscoverConnectionProfileRequest> = {
  encode(message: DiscoverConnectionProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.connectionProfile !== undefined) {
      ConnectionProfile.encode(message.connectionProfile, writer.uint32(1602).fork()).join();
    }
    if (message.connectionProfileName !== undefined) {
      writer.uint32(1610).string(message.connectionProfileName);
    }
    if (message.fullHierarchy !== undefined) {
      writer.uint32(24).bool(message.fullHierarchy);
    }
    if (message.hierarchyDepth !== undefined) {
      writer.uint32(32).int32(message.hierarchyDepth);
    }
    if (message.oracleRdbms !== undefined) {
      OracleRdbms.encode(message.oracleRdbms, writer.uint32(802).fork()).join();
    }
    if (message.mysqlRdbms !== undefined) {
      MysqlRdbms.encode(message.mysqlRdbms, writer.uint32(810).fork()).join();
    }
    if (message.postgresqlRdbms !== undefined) {
      PostgresqlRdbms.encode(message.postgresqlRdbms, writer.uint32(818).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiscoverConnectionProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscoverConnectionProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 200:
          if (tag !== 1602) {
            break;
          }

          message.connectionProfile = ConnectionProfile.decode(reader, reader.uint32());
          continue;
        case 201:
          if (tag !== 1610) {
            break;
          }

          message.connectionProfileName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.fullHierarchy = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.hierarchyDepth = reader.int32();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.oracleRdbms = OracleRdbms.decode(reader, reader.uint32());
          continue;
        case 101:
          if (tag !== 810) {
            break;
          }

          message.mysqlRdbms = MysqlRdbms.decode(reader, reader.uint32());
          continue;
        case 102:
          if (tag !== 818) {
            break;
          }

          message.postgresqlRdbms = PostgresqlRdbms.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiscoverConnectionProfileRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      connectionProfile: isSet(object.connectionProfile)
        ? ConnectionProfile.fromJSON(object.connectionProfile)
        : undefined,
      connectionProfileName: isSet(object.connectionProfileName)
        ? globalThis.String(object.connectionProfileName)
        : undefined,
      fullHierarchy: isSet(object.fullHierarchy) ? globalThis.Boolean(object.fullHierarchy) : undefined,
      hierarchyDepth: isSet(object.hierarchyDepth) ? globalThis.Number(object.hierarchyDepth) : undefined,
      oracleRdbms: isSet(object.oracleRdbms) ? OracleRdbms.fromJSON(object.oracleRdbms) : undefined,
      mysqlRdbms: isSet(object.mysqlRdbms) ? MysqlRdbms.fromJSON(object.mysqlRdbms) : undefined,
      postgresqlRdbms: isSet(object.postgresqlRdbms) ? PostgresqlRdbms.fromJSON(object.postgresqlRdbms) : undefined,
    };
  },

  toJSON(message: DiscoverConnectionProfileRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.connectionProfile !== undefined) {
      obj.connectionProfile = ConnectionProfile.toJSON(message.connectionProfile);
    }
    if (message.connectionProfileName !== undefined) {
      obj.connectionProfileName = message.connectionProfileName;
    }
    if (message.fullHierarchy !== undefined) {
      obj.fullHierarchy = message.fullHierarchy;
    }
    if (message.hierarchyDepth !== undefined) {
      obj.hierarchyDepth = Math.round(message.hierarchyDepth);
    }
    if (message.oracleRdbms !== undefined) {
      obj.oracleRdbms = OracleRdbms.toJSON(message.oracleRdbms);
    }
    if (message.mysqlRdbms !== undefined) {
      obj.mysqlRdbms = MysqlRdbms.toJSON(message.mysqlRdbms);
    }
    if (message.postgresqlRdbms !== undefined) {
      obj.postgresqlRdbms = PostgresqlRdbms.toJSON(message.postgresqlRdbms);
    }
    return obj;
  },

  create(base?: DeepPartial<DiscoverConnectionProfileRequest>): DiscoverConnectionProfileRequest {
    return DiscoverConnectionProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DiscoverConnectionProfileRequest>): DiscoverConnectionProfileRequest {
    const message = createBaseDiscoverConnectionProfileRequest();
    message.parent = object.parent ?? "";
    message.connectionProfile = (object.connectionProfile !== undefined && object.connectionProfile !== null)
      ? ConnectionProfile.fromPartial(object.connectionProfile)
      : undefined;
    message.connectionProfileName = object.connectionProfileName ?? undefined;
    message.fullHierarchy = object.fullHierarchy ?? undefined;
    message.hierarchyDepth = object.hierarchyDepth ?? undefined;
    message.oracleRdbms = (object.oracleRdbms !== undefined && object.oracleRdbms !== null)
      ? OracleRdbms.fromPartial(object.oracleRdbms)
      : undefined;
    message.mysqlRdbms = (object.mysqlRdbms !== undefined && object.mysqlRdbms !== null)
      ? MysqlRdbms.fromPartial(object.mysqlRdbms)
      : undefined;
    message.postgresqlRdbms = (object.postgresqlRdbms !== undefined && object.postgresqlRdbms !== null)
      ? PostgresqlRdbms.fromPartial(object.postgresqlRdbms)
      : undefined;
    return message;
  },
};

function createBaseDiscoverConnectionProfileResponse(): DiscoverConnectionProfileResponse {
  return { oracleRdbms: undefined, mysqlRdbms: undefined, postgresqlRdbms: undefined };
}

export const DiscoverConnectionProfileResponse: MessageFns<DiscoverConnectionProfileResponse> = {
  encode(message: DiscoverConnectionProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oracleRdbms !== undefined) {
      OracleRdbms.encode(message.oracleRdbms, writer.uint32(802).fork()).join();
    }
    if (message.mysqlRdbms !== undefined) {
      MysqlRdbms.encode(message.mysqlRdbms, writer.uint32(810).fork()).join();
    }
    if (message.postgresqlRdbms !== undefined) {
      PostgresqlRdbms.encode(message.postgresqlRdbms, writer.uint32(818).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiscoverConnectionProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscoverConnectionProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 100:
          if (tag !== 802) {
            break;
          }

          message.oracleRdbms = OracleRdbms.decode(reader, reader.uint32());
          continue;
        case 101:
          if (tag !== 810) {
            break;
          }

          message.mysqlRdbms = MysqlRdbms.decode(reader, reader.uint32());
          continue;
        case 102:
          if (tag !== 818) {
            break;
          }

          message.postgresqlRdbms = PostgresqlRdbms.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiscoverConnectionProfileResponse {
    return {
      oracleRdbms: isSet(object.oracleRdbms) ? OracleRdbms.fromJSON(object.oracleRdbms) : undefined,
      mysqlRdbms: isSet(object.mysqlRdbms) ? MysqlRdbms.fromJSON(object.mysqlRdbms) : undefined,
      postgresqlRdbms: isSet(object.postgresqlRdbms) ? PostgresqlRdbms.fromJSON(object.postgresqlRdbms) : undefined,
    };
  },

  toJSON(message: DiscoverConnectionProfileResponse): unknown {
    const obj: any = {};
    if (message.oracleRdbms !== undefined) {
      obj.oracleRdbms = OracleRdbms.toJSON(message.oracleRdbms);
    }
    if (message.mysqlRdbms !== undefined) {
      obj.mysqlRdbms = MysqlRdbms.toJSON(message.mysqlRdbms);
    }
    if (message.postgresqlRdbms !== undefined) {
      obj.postgresqlRdbms = PostgresqlRdbms.toJSON(message.postgresqlRdbms);
    }
    return obj;
  },

  create(base?: DeepPartial<DiscoverConnectionProfileResponse>): DiscoverConnectionProfileResponse {
    return DiscoverConnectionProfileResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DiscoverConnectionProfileResponse>): DiscoverConnectionProfileResponse {
    const message = createBaseDiscoverConnectionProfileResponse();
    message.oracleRdbms = (object.oracleRdbms !== undefined && object.oracleRdbms !== null)
      ? OracleRdbms.fromPartial(object.oracleRdbms)
      : undefined;
    message.mysqlRdbms = (object.mysqlRdbms !== undefined && object.mysqlRdbms !== null)
      ? MysqlRdbms.fromPartial(object.mysqlRdbms)
      : undefined;
    message.postgresqlRdbms = (object.postgresqlRdbms !== undefined && object.postgresqlRdbms !== null)
      ? PostgresqlRdbms.fromPartial(object.postgresqlRdbms)
      : undefined;
    return message;
  },
};

function createBaseFetchStaticIpsRequest(): FetchStaticIpsRequest {
  return { name: "", pageSize: 0, pageToken: "" };
}

export const FetchStaticIpsRequest: MessageFns<FetchStaticIpsRequest> = {
  encode(message: FetchStaticIpsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchStaticIpsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchStaticIpsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchStaticIpsRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: FetchStaticIpsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchStaticIpsRequest>): FetchStaticIpsRequest {
    return FetchStaticIpsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchStaticIpsRequest>): FetchStaticIpsRequest {
    const message = createBaseFetchStaticIpsRequest();
    message.name = object.name ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseFetchStaticIpsResponse(): FetchStaticIpsResponse {
  return { staticIps: [], nextPageToken: "" };
}

export const FetchStaticIpsResponse: MessageFns<FetchStaticIpsResponse> = {
  encode(message: FetchStaticIpsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.staticIps) {
      writer.uint32(10).string(v!);
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchStaticIpsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchStaticIpsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.staticIps.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchStaticIpsResponse {
    return {
      staticIps: globalThis.Array.isArray(object?.staticIps)
        ? object.staticIps.map((e: any) => globalThis.String(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: FetchStaticIpsResponse): unknown {
    const obj: any = {};
    if (message.staticIps?.length) {
      obj.staticIps = message.staticIps;
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchStaticIpsResponse>): FetchStaticIpsResponse {
    return FetchStaticIpsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchStaticIpsResponse>): FetchStaticIpsResponse {
    const message = createBaseFetchStaticIpsResponse();
    message.staticIps = object.staticIps?.map((e) => e) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListConnectionProfilesRequest(): ListConnectionProfilesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListConnectionProfilesRequest: MessageFns<ListConnectionProfilesRequest> = {
  encode(message: ListConnectionProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConnectionProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConnectionProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConnectionProfilesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListConnectionProfilesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConnectionProfilesRequest>): ListConnectionProfilesRequest {
    return ListConnectionProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConnectionProfilesRequest>): ListConnectionProfilesRequest {
    const message = createBaseListConnectionProfilesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListConnectionProfilesResponse(): ListConnectionProfilesResponse {
  return { connectionProfiles: [], nextPageToken: "", unreachable: [] };
}

export const ListConnectionProfilesResponse: MessageFns<ListConnectionProfilesResponse> = {
  encode(message: ListConnectionProfilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.connectionProfiles) {
      ConnectionProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConnectionProfilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConnectionProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connectionProfiles.push(ConnectionProfile.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConnectionProfilesResponse {
    return {
      connectionProfiles: globalThis.Array.isArray(object?.connectionProfiles)
        ? object.connectionProfiles.map((e: any) => ConnectionProfile.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListConnectionProfilesResponse): unknown {
    const obj: any = {};
    if (message.connectionProfiles?.length) {
      obj.connectionProfiles = message.connectionProfiles.map((e) => ConnectionProfile.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConnectionProfilesResponse>): ListConnectionProfilesResponse {
    return ListConnectionProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConnectionProfilesResponse>): ListConnectionProfilesResponse {
    const message = createBaseListConnectionProfilesResponse();
    message.connectionProfiles = object.connectionProfiles?.map((e) => ConnectionProfile.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetConnectionProfileRequest(): GetConnectionProfileRequest {
  return { name: "" };
}

export const GetConnectionProfileRequest: MessageFns<GetConnectionProfileRequest> = {
  encode(message: GetConnectionProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConnectionProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConnectionProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetConnectionProfileRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetConnectionProfileRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetConnectionProfileRequest>): GetConnectionProfileRequest {
    return GetConnectionProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetConnectionProfileRequest>): GetConnectionProfileRequest {
    const message = createBaseGetConnectionProfileRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateConnectionProfileRequest(): CreateConnectionProfileRequest {
  return {
    parent: "",
    connectionProfileId: "",
    connectionProfile: undefined,
    requestId: "",
    validateOnly: false,
    force: false,
  };
}

export const CreateConnectionProfileRequest: MessageFns<CreateConnectionProfileRequest> = {
  encode(message: CreateConnectionProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.connectionProfileId !== "") {
      writer.uint32(18).string(message.connectionProfileId);
    }
    if (message.connectionProfile !== undefined) {
      ConnectionProfile.encode(message.connectionProfile, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(40).bool(message.validateOnly);
    }
    if (message.force !== false) {
      writer.uint32(48).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConnectionProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConnectionProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.connectionProfileId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.connectionProfile = ConnectionProfile.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateConnectionProfileRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      connectionProfileId: isSet(object.connectionProfileId) ? globalThis.String(object.connectionProfileId) : "",
      connectionProfile: isSet(object.connectionProfile)
        ? ConnectionProfile.fromJSON(object.connectionProfile)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: CreateConnectionProfileRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.connectionProfileId !== "") {
      obj.connectionProfileId = message.connectionProfileId;
    }
    if (message.connectionProfile !== undefined) {
      obj.connectionProfile = ConnectionProfile.toJSON(message.connectionProfile);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateConnectionProfileRequest>): CreateConnectionProfileRequest {
    return CreateConnectionProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateConnectionProfileRequest>): CreateConnectionProfileRequest {
    const message = createBaseCreateConnectionProfileRequest();
    message.parent = object.parent ?? "";
    message.connectionProfileId = object.connectionProfileId ?? "";
    message.connectionProfile = (object.connectionProfile !== undefined && object.connectionProfile !== null)
      ? ConnectionProfile.fromPartial(object.connectionProfile)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseUpdateConnectionProfileRequest(): UpdateConnectionProfileRequest {
  return { updateMask: undefined, connectionProfile: undefined, requestId: "", validateOnly: false, force: false };
}

export const UpdateConnectionProfileRequest: MessageFns<UpdateConnectionProfileRequest> = {
  encode(message: UpdateConnectionProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.connectionProfile !== undefined) {
      ConnectionProfile.encode(message.connectionProfile, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    if (message.force !== false) {
      writer.uint32(40).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateConnectionProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateConnectionProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.connectionProfile = ConnectionProfile.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateConnectionProfileRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      connectionProfile: isSet(object.connectionProfile)
        ? ConnectionProfile.fromJSON(object.connectionProfile)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: UpdateConnectionProfileRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.connectionProfile !== undefined) {
      obj.connectionProfile = ConnectionProfile.toJSON(message.connectionProfile);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateConnectionProfileRequest>): UpdateConnectionProfileRequest {
    return UpdateConnectionProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateConnectionProfileRequest>): UpdateConnectionProfileRequest {
    const message = createBaseUpdateConnectionProfileRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.connectionProfile = (object.connectionProfile !== undefined && object.connectionProfile !== null)
      ? ConnectionProfile.fromPartial(object.connectionProfile)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseDeleteConnectionProfileRequest(): DeleteConnectionProfileRequest {
  return { name: "", requestId: "" };
}

export const DeleteConnectionProfileRequest: MessageFns<DeleteConnectionProfileRequest> = {
  encode(message: DeleteConnectionProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteConnectionProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConnectionProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteConnectionProfileRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteConnectionProfileRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteConnectionProfileRequest>): DeleteConnectionProfileRequest {
    return DeleteConnectionProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteConnectionProfileRequest>): DeleteConnectionProfileRequest {
    const message = createBaseDeleteConnectionProfileRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseListStreamsRequest(): ListStreamsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListStreamsRequest: MessageFns<ListStreamsRequest> = {
  encode(message: ListStreamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStreamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStreamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStreamsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListStreamsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListStreamsRequest>): ListStreamsRequest {
    return ListStreamsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListStreamsRequest>): ListStreamsRequest {
    const message = createBaseListStreamsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListStreamsResponse(): ListStreamsResponse {
  return { streams: [], nextPageToken: "", unreachable: [] };
}

export const ListStreamsResponse: MessageFns<ListStreamsResponse> = {
  encode(message: ListStreamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.streams) {
      Stream.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStreamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStreamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.streams.push(Stream.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStreamsResponse {
    return {
      streams: globalThis.Array.isArray(object?.streams) ? object.streams.map((e: any) => Stream.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListStreamsResponse): unknown {
    const obj: any = {};
    if (message.streams?.length) {
      obj.streams = message.streams.map((e) => Stream.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListStreamsResponse>): ListStreamsResponse {
    return ListStreamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListStreamsResponse>): ListStreamsResponse {
    const message = createBaseListStreamsResponse();
    message.streams = object.streams?.map((e) => Stream.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetStreamRequest(): GetStreamRequest {
  return { name: "" };
}

export const GetStreamRequest: MessageFns<GetStreamRequest> = {
  encode(message: GetStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStreamRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetStreamRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetStreamRequest>): GetStreamRequest {
    return GetStreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetStreamRequest>): GetStreamRequest {
    const message = createBaseGetStreamRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateStreamRequest(): CreateStreamRequest {
  return { parent: "", streamId: "", stream: undefined, requestId: "", validateOnly: false, force: false };
}

export const CreateStreamRequest: MessageFns<CreateStreamRequest> = {
  encode(message: CreateStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.streamId !== "") {
      writer.uint32(18).string(message.streamId);
    }
    if (message.stream !== undefined) {
      Stream.encode(message.stream, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(40).bool(message.validateOnly);
    }
    if (message.force !== false) {
      writer.uint32(48).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.streamId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stream = Stream.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateStreamRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      streamId: isSet(object.streamId) ? globalThis.String(object.streamId) : "",
      stream: isSet(object.stream) ? Stream.fromJSON(object.stream) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: CreateStreamRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.streamId !== "") {
      obj.streamId = message.streamId;
    }
    if (message.stream !== undefined) {
      obj.stream = Stream.toJSON(message.stream);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateStreamRequest>): CreateStreamRequest {
    return CreateStreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateStreamRequest>): CreateStreamRequest {
    const message = createBaseCreateStreamRequest();
    message.parent = object.parent ?? "";
    message.streamId = object.streamId ?? "";
    message.stream = (object.stream !== undefined && object.stream !== null)
      ? Stream.fromPartial(object.stream)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseUpdateStreamRequest(): UpdateStreamRequest {
  return { updateMask: undefined, stream: undefined, requestId: "", validateOnly: false, force: false };
}

export const UpdateStreamRequest: MessageFns<UpdateStreamRequest> = {
  encode(message: UpdateStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.stream !== undefined) {
      Stream.encode(message.stream, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    if (message.force !== false) {
      writer.uint32(40).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stream = Stream.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateStreamRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      stream: isSet(object.stream) ? Stream.fromJSON(object.stream) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: UpdateStreamRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.stream !== undefined) {
      obj.stream = Stream.toJSON(message.stream);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateStreamRequest>): UpdateStreamRequest {
    return UpdateStreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateStreamRequest>): UpdateStreamRequest {
    const message = createBaseUpdateStreamRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.stream = (object.stream !== undefined && object.stream !== null)
      ? Stream.fromPartial(object.stream)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseDeleteStreamRequest(): DeleteStreamRequest {
  return { name: "", requestId: "" };
}

export const DeleteStreamRequest: MessageFns<DeleteStreamRequest> = {
  encode(message: DeleteStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteStreamRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteStreamRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteStreamRequest>): DeleteStreamRequest {
    return DeleteStreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteStreamRequest>): DeleteStreamRequest {
    const message = createBaseDeleteStreamRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseGetStreamObjectRequest(): GetStreamObjectRequest {
  return { name: "" };
}

export const GetStreamObjectRequest: MessageFns<GetStreamObjectRequest> = {
  encode(message: GetStreamObjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStreamObjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStreamObjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStreamObjectRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetStreamObjectRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetStreamObjectRequest>): GetStreamObjectRequest {
    return GetStreamObjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetStreamObjectRequest>): GetStreamObjectRequest {
    const message = createBaseGetStreamObjectRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseLookupStreamObjectRequest(): LookupStreamObjectRequest {
  return { parent: "", sourceObjectIdentifier: undefined };
}

export const LookupStreamObjectRequest: MessageFns<LookupStreamObjectRequest> = {
  encode(message: LookupStreamObjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.sourceObjectIdentifier !== undefined) {
      SourceObjectIdentifier.encode(message.sourceObjectIdentifier, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupStreamObjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupStreamObjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sourceObjectIdentifier = SourceObjectIdentifier.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupStreamObjectRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      sourceObjectIdentifier: isSet(object.sourceObjectIdentifier)
        ? SourceObjectIdentifier.fromJSON(object.sourceObjectIdentifier)
        : undefined,
    };
  },

  toJSON(message: LookupStreamObjectRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.sourceObjectIdentifier !== undefined) {
      obj.sourceObjectIdentifier = SourceObjectIdentifier.toJSON(message.sourceObjectIdentifier);
    }
    return obj;
  },

  create(base?: DeepPartial<LookupStreamObjectRequest>): LookupStreamObjectRequest {
    return LookupStreamObjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupStreamObjectRequest>): LookupStreamObjectRequest {
    const message = createBaseLookupStreamObjectRequest();
    message.parent = object.parent ?? "";
    message.sourceObjectIdentifier =
      (object.sourceObjectIdentifier !== undefined && object.sourceObjectIdentifier !== null)
        ? SourceObjectIdentifier.fromPartial(object.sourceObjectIdentifier)
        : undefined;
    return message;
  },
};

function createBaseStartBackfillJobRequest(): StartBackfillJobRequest {
  return { object: "" };
}

export const StartBackfillJobRequest: MessageFns<StartBackfillJobRequest> = {
  encode(message: StartBackfillJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.object !== "") {
      writer.uint32(10).string(message.object);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartBackfillJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartBackfillJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.object = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartBackfillJobRequest {
    return { object: isSet(object.object) ? globalThis.String(object.object) : "" };
  },

  toJSON(message: StartBackfillJobRequest): unknown {
    const obj: any = {};
    if (message.object !== "") {
      obj.object = message.object;
    }
    return obj;
  },

  create(base?: DeepPartial<StartBackfillJobRequest>): StartBackfillJobRequest {
    return StartBackfillJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartBackfillJobRequest>): StartBackfillJobRequest {
    const message = createBaseStartBackfillJobRequest();
    message.object = object.object ?? "";
    return message;
  },
};

function createBaseStartBackfillJobResponse(): StartBackfillJobResponse {
  return { object: undefined };
}

export const StartBackfillJobResponse: MessageFns<StartBackfillJobResponse> = {
  encode(message: StartBackfillJobResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.object !== undefined) {
      StreamObject.encode(message.object, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartBackfillJobResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartBackfillJobResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.object = StreamObject.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartBackfillJobResponse {
    return { object: isSet(object.object) ? StreamObject.fromJSON(object.object) : undefined };
  },

  toJSON(message: StartBackfillJobResponse): unknown {
    const obj: any = {};
    if (message.object !== undefined) {
      obj.object = StreamObject.toJSON(message.object);
    }
    return obj;
  },

  create(base?: DeepPartial<StartBackfillJobResponse>): StartBackfillJobResponse {
    return StartBackfillJobResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartBackfillJobResponse>): StartBackfillJobResponse {
    const message = createBaseStartBackfillJobResponse();
    message.object = (object.object !== undefined && object.object !== null)
      ? StreamObject.fromPartial(object.object)
      : undefined;
    return message;
  },
};

function createBaseStopBackfillJobRequest(): StopBackfillJobRequest {
  return { object: "" };
}

export const StopBackfillJobRequest: MessageFns<StopBackfillJobRequest> = {
  encode(message: StopBackfillJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.object !== "") {
      writer.uint32(10).string(message.object);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopBackfillJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopBackfillJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.object = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopBackfillJobRequest {
    return { object: isSet(object.object) ? globalThis.String(object.object) : "" };
  },

  toJSON(message: StopBackfillJobRequest): unknown {
    const obj: any = {};
    if (message.object !== "") {
      obj.object = message.object;
    }
    return obj;
  },

  create(base?: DeepPartial<StopBackfillJobRequest>): StopBackfillJobRequest {
    return StopBackfillJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StopBackfillJobRequest>): StopBackfillJobRequest {
    const message = createBaseStopBackfillJobRequest();
    message.object = object.object ?? "";
    return message;
  },
};

function createBaseStopBackfillJobResponse(): StopBackfillJobResponse {
  return { object: undefined };
}

export const StopBackfillJobResponse: MessageFns<StopBackfillJobResponse> = {
  encode(message: StopBackfillJobResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.object !== undefined) {
      StreamObject.encode(message.object, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopBackfillJobResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopBackfillJobResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.object = StreamObject.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopBackfillJobResponse {
    return { object: isSet(object.object) ? StreamObject.fromJSON(object.object) : undefined };
  },

  toJSON(message: StopBackfillJobResponse): unknown {
    const obj: any = {};
    if (message.object !== undefined) {
      obj.object = StreamObject.toJSON(message.object);
    }
    return obj;
  },

  create(base?: DeepPartial<StopBackfillJobResponse>): StopBackfillJobResponse {
    return StopBackfillJobResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StopBackfillJobResponse>): StopBackfillJobResponse {
    const message = createBaseStopBackfillJobResponse();
    message.object = (object.object !== undefined && object.object !== null)
      ? StreamObject.fromPartial(object.object)
      : undefined;
    return message;
  },
};

function createBaseListStreamObjectsRequest(): ListStreamObjectsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListStreamObjectsRequest: MessageFns<ListStreamObjectsRequest> = {
  encode(message: ListStreamObjectsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStreamObjectsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStreamObjectsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStreamObjectsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListStreamObjectsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListStreamObjectsRequest>): ListStreamObjectsRequest {
    return ListStreamObjectsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListStreamObjectsRequest>): ListStreamObjectsRequest {
    const message = createBaseListStreamObjectsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListStreamObjectsResponse(): ListStreamObjectsResponse {
  return { streamObjects: [], nextPageToken: "" };
}

export const ListStreamObjectsResponse: MessageFns<ListStreamObjectsResponse> = {
  encode(message: ListStreamObjectsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.streamObjects) {
      StreamObject.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStreamObjectsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStreamObjectsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.streamObjects.push(StreamObject.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStreamObjectsResponse {
    return {
      streamObjects: globalThis.Array.isArray(object?.streamObjects)
        ? object.streamObjects.map((e: any) => StreamObject.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListStreamObjectsResponse): unknown {
    const obj: any = {};
    if (message.streamObjects?.length) {
      obj.streamObjects = message.streamObjects.map((e) => StreamObject.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListStreamObjectsResponse>): ListStreamObjectsResponse {
    return ListStreamObjectsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListStreamObjectsResponse>): ListStreamObjectsResponse {
    const message = createBaseListStreamObjectsResponse();
    message.streamObjects = object.streamObjects?.map((e) => StreamObject.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
    validationResult: undefined,
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    if (message.validationResult !== undefined) {
      ValidationResult.encode(message.validationResult, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.validationResult = ValidationResult.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
      validationResult: isSet(object.validationResult) ? ValidationResult.fromJSON(object.validationResult) : undefined,
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    if (message.validationResult !== undefined) {
      obj.validationResult = ValidationResult.toJSON(message.validationResult);
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    message.validationResult = (object.validationResult !== undefined && object.validationResult !== null)
      ? ValidationResult.fromPartial(object.validationResult)
      : undefined;
    return message;
  },
};

function createBaseCreatePrivateConnectionRequest(): CreatePrivateConnectionRequest {
  return { parent: "", privateConnectionId: "", privateConnection: undefined, requestId: "", force: false };
}

export const CreatePrivateConnectionRequest: MessageFns<CreatePrivateConnectionRequest> = {
  encode(message: CreatePrivateConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.privateConnectionId !== "") {
      writer.uint32(18).string(message.privateConnectionId);
    }
    if (message.privateConnection !== undefined) {
      PrivateConnection.encode(message.privateConnection, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    if (message.force !== false) {
      writer.uint32(48).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePrivateConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePrivateConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.privateConnectionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.privateConnection = PrivateConnection.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePrivateConnectionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      privateConnectionId: isSet(object.privateConnectionId) ? globalThis.String(object.privateConnectionId) : "",
      privateConnection: isSet(object.privateConnection)
        ? PrivateConnection.fromJSON(object.privateConnection)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: CreatePrivateConnectionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.privateConnectionId !== "") {
      obj.privateConnectionId = message.privateConnectionId;
    }
    if (message.privateConnection !== undefined) {
      obj.privateConnection = PrivateConnection.toJSON(message.privateConnection);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePrivateConnectionRequest>): CreatePrivateConnectionRequest {
    return CreatePrivateConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePrivateConnectionRequest>): CreatePrivateConnectionRequest {
    const message = createBaseCreatePrivateConnectionRequest();
    message.parent = object.parent ?? "";
    message.privateConnectionId = object.privateConnectionId ?? "";
    message.privateConnection = (object.privateConnection !== undefined && object.privateConnection !== null)
      ? PrivateConnection.fromPartial(object.privateConnection)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseListPrivateConnectionsRequest(): ListPrivateConnectionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListPrivateConnectionsRequest: MessageFns<ListPrivateConnectionsRequest> = {
  encode(message: ListPrivateConnectionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPrivateConnectionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPrivateConnectionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPrivateConnectionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListPrivateConnectionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPrivateConnectionsRequest>): ListPrivateConnectionsRequest {
    return ListPrivateConnectionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPrivateConnectionsRequest>): ListPrivateConnectionsRequest {
    const message = createBaseListPrivateConnectionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListPrivateConnectionsResponse(): ListPrivateConnectionsResponse {
  return { privateConnections: [], nextPageToken: "", unreachable: [] };
}

export const ListPrivateConnectionsResponse: MessageFns<ListPrivateConnectionsResponse> = {
  encode(message: ListPrivateConnectionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.privateConnections) {
      PrivateConnection.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPrivateConnectionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPrivateConnectionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.privateConnections.push(PrivateConnection.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPrivateConnectionsResponse {
    return {
      privateConnections: globalThis.Array.isArray(object?.privateConnections)
        ? object.privateConnections.map((e: any) => PrivateConnection.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListPrivateConnectionsResponse): unknown {
    const obj: any = {};
    if (message.privateConnections?.length) {
      obj.privateConnections = message.privateConnections.map((e) => PrivateConnection.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPrivateConnectionsResponse>): ListPrivateConnectionsResponse {
    return ListPrivateConnectionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPrivateConnectionsResponse>): ListPrivateConnectionsResponse {
    const message = createBaseListPrivateConnectionsResponse();
    message.privateConnections = object.privateConnections?.map((e) => PrivateConnection.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeletePrivateConnectionRequest(): DeletePrivateConnectionRequest {
  return { name: "", requestId: "", force: false };
}

export const DeletePrivateConnectionRequest: MessageFns<DeletePrivateConnectionRequest> = {
  encode(message: DeletePrivateConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePrivateConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePrivateConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePrivateConnectionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeletePrivateConnectionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePrivateConnectionRequest>): DeletePrivateConnectionRequest {
    return DeletePrivateConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePrivateConnectionRequest>): DeletePrivateConnectionRequest {
    const message = createBaseDeletePrivateConnectionRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseGetPrivateConnectionRequest(): GetPrivateConnectionRequest {
  return { name: "" };
}

export const GetPrivateConnectionRequest: MessageFns<GetPrivateConnectionRequest> = {
  encode(message: GetPrivateConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPrivateConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPrivateConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPrivateConnectionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPrivateConnectionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPrivateConnectionRequest>): GetPrivateConnectionRequest {
    return GetPrivateConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPrivateConnectionRequest>): GetPrivateConnectionRequest {
    const message = createBaseGetPrivateConnectionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateRouteRequest(): CreateRouteRequest {
  return { parent: "", routeId: "", route: undefined, requestId: "" };
}

export const CreateRouteRequest: MessageFns<CreateRouteRequest> = {
  encode(message: CreateRouteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.routeId !== "") {
      writer.uint32(18).string(message.routeId);
    }
    if (message.route !== undefined) {
      Route.encode(message.route, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRouteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRouteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.routeId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.route = Route.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRouteRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      routeId: isSet(object.routeId) ? globalThis.String(object.routeId) : "",
      route: isSet(object.route) ? Route.fromJSON(object.route) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateRouteRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.routeId !== "") {
      obj.routeId = message.routeId;
    }
    if (message.route !== undefined) {
      obj.route = Route.toJSON(message.route);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRouteRequest>): CreateRouteRequest {
    return CreateRouteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRouteRequest>): CreateRouteRequest {
    const message = createBaseCreateRouteRequest();
    message.parent = object.parent ?? "";
    message.routeId = object.routeId ?? "";
    message.route = (object.route !== undefined && object.route !== null) ? Route.fromPartial(object.route) : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseListRoutesRequest(): ListRoutesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListRoutesRequest: MessageFns<ListRoutesRequest> = {
  encode(message: ListRoutesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRoutesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRoutesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRoutesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListRoutesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRoutesRequest>): ListRoutesRequest {
    return ListRoutesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRoutesRequest>): ListRoutesRequest {
    const message = createBaseListRoutesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListRoutesResponse(): ListRoutesResponse {
  return { routes: [], nextPageToken: "", unreachable: [] };
}

export const ListRoutesResponse: MessageFns<ListRoutesResponse> = {
  encode(message: ListRoutesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.routes) {
      Route.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRoutesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRoutesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.routes.push(Route.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRoutesResponse {
    return {
      routes: globalThis.Array.isArray(object?.routes) ? object.routes.map((e: any) => Route.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListRoutesResponse): unknown {
    const obj: any = {};
    if (message.routes?.length) {
      obj.routes = message.routes.map((e) => Route.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRoutesResponse>): ListRoutesResponse {
    return ListRoutesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRoutesResponse>): ListRoutesResponse {
    const message = createBaseListRoutesResponse();
    message.routes = object.routes?.map((e) => Route.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeleteRouteRequest(): DeleteRouteRequest {
  return { name: "", requestId: "" };
}

export const DeleteRouteRequest: MessageFns<DeleteRouteRequest> = {
  encode(message: DeleteRouteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRouteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRouteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRouteRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteRouteRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRouteRequest>): DeleteRouteRequest {
    return DeleteRouteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRouteRequest>): DeleteRouteRequest {
    const message = createBaseDeleteRouteRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseGetRouteRequest(): GetRouteRequest {
  return { name: "" };
}

export const GetRouteRequest: MessageFns<GetRouteRequest> = {
  encode(message: GetRouteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRouteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRouteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRouteRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRouteRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRouteRequest>): GetRouteRequest {
    return GetRouteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRouteRequest>): GetRouteRequest {
    const message = createBaseGetRouteRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** Datastream service */
export type DatastreamDefinition = typeof DatastreamDefinition;
export const DatastreamDefinition = {
  name: "Datastream",
  fullName: "google.cloud.datastream.v1.Datastream",
  methods: {
    /**
     * Use this method to list connection profiles created in a project and
     * location.
     */
    listConnectionProfiles: {
      name: "ListConnectionProfiles",
      requestType: ListConnectionProfilesRequest,
      requestStream: false,
      responseType: ListConnectionProfilesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Use this method to get details about a connection profile. */
    getConnectionProfile: {
      name: "GetConnectionProfile",
      requestType: GetConnectionProfileRequest,
      requestStream: false,
      responseType: ConnectionProfile,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Use this method to create a connection profile in a project and location. */
    createConnectionProfile: {
      name: "CreateConnectionProfile",
      requestType: CreateConnectionProfileRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              17,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              47,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              44,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              76,
              58,
              18,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Use this method to update the parameters of a connection profile. */
    updateConnectionProfile: {
      name: "UpdateConnectionProfile",
      requestType: UpdateConnectionProfileRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              17,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              30,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              95,
              58,
              18,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              50,
              73,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Use this method to delete a connection profile. */
    deleteConnectionProfile: {
      name: "DeleteConnectionProfile",
      requestType: DeleteConnectionProfileRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              42,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Use this method to discover a connection profile.
     * The discover API call exposes the data objects and metadata belonging to
     * the profile. Typically, a request returns children data objects of a
     * parent data object that's optionally supplied in the request.
     */
    discoverConnectionProfile: {
      name: "DiscoverConnectionProfile",
      requestType: DiscoverConnectionProfileRequest,
      requestStream: false,
      responseType: DiscoverConnectionProfileResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              68,
              58,
              1,
              42,
              34,
              63,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              58,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
            ]),
          ],
        },
      },
    },
    /** Use this method to list streams in a project and location. */
    listStreams: {
      name: "ListStreams",
      requestType: ListStreamsRequest,
      requestStream: false,
      responseType: ListStreamsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              115,
            ]),
          ],
        },
      },
    },
    /** Use this method to get details about a stream. */
    getStream: {
      name: "GetStream",
      requestType: GetStreamRequest,
      requestStream: false,
      responseType: Stream,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Use this method to create a stream. */
    createStream: {
      name: "CreateStream",
      requestType: CreateStreamRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              27,
              10,
              6,
              83,
              116,
              114,
              101,
              97,
              109,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              116,
              114,
              101,
              97,
              109,
              44,
              115,
              116,
              114,
              101,
              97,
              109,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              53,
              58,
              6,
              115,
              116,
              114,
              101,
              97,
              109,
              34,
              43,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              115,
            ]),
          ],
        },
      },
    },
    /** Use this method to update the configuration of a stream. */
    updateStream: {
      name: "UpdateStream",
      requestType: UpdateStreamRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              27,
              10,
              6,
              83,
              116,
              114,
              101,
              97,
              109,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([18, 115, 116, 114, 101, 97, 109, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              60,
              58,
              6,
              115,
              116,
              114,
              101,
              97,
              109,
              50,
              50,
              47,
              118,
              49,
              47,
              123,
              115,
              116,
              114,
              101,
              97,
              109,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Use this method to delete a stream. */
    deleteStream: {
      name: "DeleteStream",
      requestType: DeleteStreamRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              45,
              42,
              43,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Use this method to get details about a stream object. */
    getStreamObject: {
      name: "GetStreamObject",
      requestType: GetStreamObjectRequest,
      requestStream: false,
      responseType: StreamObject,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Use this method to look up a stream object by its source object identifier. */
    lookupStreamObject: {
      name: "LookupStreamObject",
      requestType: LookupStreamObjectRequest,
      requestStream: false,
      responseType: StreamObject,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              65,
              58,
              1,
              42,
              34,
              60,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
              47,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              58,
              108,
              111,
              111,
              107,
              117,
              112,
            ]),
          ],
        },
      },
    },
    /** Use this method to list the objects of a specific stream. */
    listStreamObjects: {
      name: "ListStreamObjects",
      requestType: ListStreamObjectsRequest,
      requestStream: false,
      responseType: ListStreamObjectsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
              47,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Use this method to start a backfill job for the specified stream object. */
    startBackfillJob: {
      name: "StartBackfillJob",
      requestType: StartBackfillJobRequest,
      requestStream: false,
      responseType: StartBackfillJobResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 111, 98, 106, 101, 99, 116])],
          578365826: [
            Buffer.from([
              77,
              58,
              1,
              42,
              34,
              72,
              47,
              118,
              49,
              47,
              123,
              111,
              98,
              106,
              101,
              99,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              97,
              114,
              116,
              66,
              97,
              99,
              107,
              102,
              105,
              108,
              108,
              74,
              111,
              98,
            ]),
          ],
        },
      },
    },
    /** Use this method to stop a backfill job for the specified stream object. */
    stopBackfillJob: {
      name: "StopBackfillJob",
      requestType: StopBackfillJobRequest,
      requestStream: false,
      responseType: StopBackfillJobResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 111, 98, 106, 101, 99, 116])],
          578365826: [
            Buffer.from([
              76,
              58,
              1,
              42,
              34,
              71,
              47,
              118,
              49,
              47,
              123,
              111,
              98,
              106,
              101,
              99,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              111,
              112,
              66,
              97,
              99,
              107,
              102,
              105,
              108,
              108,
              74,
              111,
              98,
            ]),
          ],
        },
      },
    },
    /**
     * The FetchStaticIps API call exposes the static IP addresses used by
     * Datastream.
     */
    fetchStaticIps: {
      name: "FetchStaticIps",
      requestType: FetchStaticIpsRequest,
      requestStream: false,
      responseType: FetchStaticIpsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              102,
              101,
              116,
              99,
              104,
              83,
              116,
              97,
              116,
              105,
              99,
              73,
              112,
              115,
            ]),
          ],
        },
      },
    },
    /** Use this method to create a private connectivity configuration. */
    createPrivateConnection: {
      name: "CreatePrivateConnection",
      requestType: CreatePrivateConnectionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              17,
              80,
              114,
              105,
              118,
              97,
              116,
              101,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              47,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              44,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              76,
              58,
              18,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Use this method to get details about a private connectivity configuration. */
    getPrivateConnection: {
      name: "GetPrivateConnection",
      requestType: GetPrivateConnectionRequest,
      requestStream: false,
      responseType: PrivateConnection,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Use this method to list private connectivity configurations in a project
     * and location.
     */
    listPrivateConnections: {
      name: "ListPrivateConnections",
      requestType: ListPrivateConnectionsRequest,
      requestStream: false,
      responseType: ListPrivateConnectionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Use this method to delete a private connectivity configuration. */
    deletePrivateConnection: {
      name: "DeletePrivateConnection",
      requestType: DeletePrivateConnectionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              42,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Use this method to create a route for a private connectivity configuration
     * in a project and location.
     */
    createRoute: {
      name: "CreateRoute",
      requestType: CreateRouteRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              26,
              10,
              5,
              82,
              111,
              117,
              116,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              21,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              114,
              111,
              117,
              116,
              101,
              44,
              114,
              111,
              117,
              116,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              72,
              58,
              5,
              114,
              111,
              117,
              116,
              101,
              34,
              63,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              111,
              117,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Use this method to get details about a route. */
    getRoute: {
      name: "GetRoute",
      requestType: GetRouteRequest,
      requestStream: false,
      responseType: Route,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              111,
              117,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Use this method to list routes created for a private connectivity
     * configuration in a project and location.
     */
    listRoutes: {
      name: "ListRoutes",
      requestType: ListRoutesRequest,
      requestStream: false,
      responseType: ListRoutesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              111,
              117,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Use this method to delete a route. */
    deleteRoute: {
      name: "DeleteRoute",
      requestType: DeleteRouteRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              65,
              42,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              111,
              117,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DatastreamServiceImplementation<CallContextExt = {}> {
  /**
   * Use this method to list connection profiles created in a project and
   * location.
   */
  listConnectionProfiles(
    request: ListConnectionProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListConnectionProfilesResponse>>;
  /** Use this method to get details about a connection profile. */
  getConnectionProfile(
    request: GetConnectionProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConnectionProfile>>;
  /** Use this method to create a connection profile in a project and location. */
  createConnectionProfile(
    request: CreateConnectionProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Use this method to update the parameters of a connection profile. */
  updateConnectionProfile(
    request: UpdateConnectionProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Use this method to delete a connection profile. */
  deleteConnectionProfile(
    request: DeleteConnectionProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Use this method to discover a connection profile.
   * The discover API call exposes the data objects and metadata belonging to
   * the profile. Typically, a request returns children data objects of a
   * parent data object that's optionally supplied in the request.
   */
  discoverConnectionProfile(
    request: DiscoverConnectionProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DiscoverConnectionProfileResponse>>;
  /** Use this method to list streams in a project and location. */
  listStreams(
    request: ListStreamsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListStreamsResponse>>;
  /** Use this method to get details about a stream. */
  getStream(request: GetStreamRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Stream>>;
  /** Use this method to create a stream. */
  createStream(request: CreateStreamRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Use this method to update the configuration of a stream. */
  updateStream(request: UpdateStreamRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Use this method to delete a stream. */
  deleteStream(request: DeleteStreamRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Use this method to get details about a stream object. */
  getStreamObject(
    request: GetStreamObjectRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<StreamObject>>;
  /** Use this method to look up a stream object by its source object identifier. */
  lookupStreamObject(
    request: LookupStreamObjectRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<StreamObject>>;
  /** Use this method to list the objects of a specific stream. */
  listStreamObjects(
    request: ListStreamObjectsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListStreamObjectsResponse>>;
  /** Use this method to start a backfill job for the specified stream object. */
  startBackfillJob(
    request: StartBackfillJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<StartBackfillJobResponse>>;
  /** Use this method to stop a backfill job for the specified stream object. */
  stopBackfillJob(
    request: StopBackfillJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<StopBackfillJobResponse>>;
  /**
   * The FetchStaticIps API call exposes the static IP addresses used by
   * Datastream.
   */
  fetchStaticIps(
    request: FetchStaticIpsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FetchStaticIpsResponse>>;
  /** Use this method to create a private connectivity configuration. */
  createPrivateConnection(
    request: CreatePrivateConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Use this method to get details about a private connectivity configuration. */
  getPrivateConnection(
    request: GetPrivateConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PrivateConnection>>;
  /**
   * Use this method to list private connectivity configurations in a project
   * and location.
   */
  listPrivateConnections(
    request: ListPrivateConnectionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPrivateConnectionsResponse>>;
  /** Use this method to delete a private connectivity configuration. */
  deletePrivateConnection(
    request: DeletePrivateConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Use this method to create a route for a private connectivity configuration
   * in a project and location.
   */
  createRoute(request: CreateRouteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Use this method to get details about a route. */
  getRoute(request: GetRouteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Route>>;
  /**
   * Use this method to list routes created for a private connectivity
   * configuration in a project and location.
   */
  listRoutes(
    request: ListRoutesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRoutesResponse>>;
  /** Use this method to delete a route. */
  deleteRoute(request: DeleteRouteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface DatastreamClient<CallOptionsExt = {}> {
  /**
   * Use this method to list connection profiles created in a project and
   * location.
   */
  listConnectionProfiles(
    request: DeepPartial<ListConnectionProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListConnectionProfilesResponse>;
  /** Use this method to get details about a connection profile. */
  getConnectionProfile(
    request: DeepPartial<GetConnectionProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConnectionProfile>;
  /** Use this method to create a connection profile in a project and location. */
  createConnectionProfile(
    request: DeepPartial<CreateConnectionProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Use this method to update the parameters of a connection profile. */
  updateConnectionProfile(
    request: DeepPartial<UpdateConnectionProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Use this method to delete a connection profile. */
  deleteConnectionProfile(
    request: DeepPartial<DeleteConnectionProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Use this method to discover a connection profile.
   * The discover API call exposes the data objects and metadata belonging to
   * the profile. Typically, a request returns children data objects of a
   * parent data object that's optionally supplied in the request.
   */
  discoverConnectionProfile(
    request: DeepPartial<DiscoverConnectionProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DiscoverConnectionProfileResponse>;
  /** Use this method to list streams in a project and location. */
  listStreams(
    request: DeepPartial<ListStreamsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListStreamsResponse>;
  /** Use this method to get details about a stream. */
  getStream(request: DeepPartial<GetStreamRequest>, options?: CallOptions & CallOptionsExt): Promise<Stream>;
  /** Use this method to create a stream. */
  createStream(request: DeepPartial<CreateStreamRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Use this method to update the configuration of a stream. */
  updateStream(request: DeepPartial<UpdateStreamRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Use this method to delete a stream. */
  deleteStream(request: DeepPartial<DeleteStreamRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Use this method to get details about a stream object. */
  getStreamObject(
    request: DeepPartial<GetStreamObjectRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<StreamObject>;
  /** Use this method to look up a stream object by its source object identifier. */
  lookupStreamObject(
    request: DeepPartial<LookupStreamObjectRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<StreamObject>;
  /** Use this method to list the objects of a specific stream. */
  listStreamObjects(
    request: DeepPartial<ListStreamObjectsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListStreamObjectsResponse>;
  /** Use this method to start a backfill job for the specified stream object. */
  startBackfillJob(
    request: DeepPartial<StartBackfillJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<StartBackfillJobResponse>;
  /** Use this method to stop a backfill job for the specified stream object. */
  stopBackfillJob(
    request: DeepPartial<StopBackfillJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<StopBackfillJobResponse>;
  /**
   * The FetchStaticIps API call exposes the static IP addresses used by
   * Datastream.
   */
  fetchStaticIps(
    request: DeepPartial<FetchStaticIpsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FetchStaticIpsResponse>;
  /** Use this method to create a private connectivity configuration. */
  createPrivateConnection(
    request: DeepPartial<CreatePrivateConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Use this method to get details about a private connectivity configuration. */
  getPrivateConnection(
    request: DeepPartial<GetPrivateConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PrivateConnection>;
  /**
   * Use this method to list private connectivity configurations in a project
   * and location.
   */
  listPrivateConnections(
    request: DeepPartial<ListPrivateConnectionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPrivateConnectionsResponse>;
  /** Use this method to delete a private connectivity configuration. */
  deletePrivateConnection(
    request: DeepPartial<DeletePrivateConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Use this method to create a route for a private connectivity configuration
   * in a project and location.
   */
  createRoute(request: DeepPartial<CreateRouteRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Use this method to get details about a route. */
  getRoute(request: DeepPartial<GetRouteRequest>, options?: CallOptions & CallOptionsExt): Promise<Route>;
  /**
   * Use this method to list routes created for a private connectivity
   * configuration in a project and location.
   */
  listRoutes(
    request: DeepPartial<ListRoutesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRoutesResponse>;
  /** Use this method to delete a route. */
  deleteRoute(request: DeepPartial<DeleteRouteRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
