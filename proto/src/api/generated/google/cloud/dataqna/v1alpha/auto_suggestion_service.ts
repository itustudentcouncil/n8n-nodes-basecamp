// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dataqna/v1alpha/auto_suggestion_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { AnnotatedString } from "./annotated_string.js";

export const protobufPackage = "google.cloud.dataqna.v1alpha";

/** The type of suggestion. */
export enum SuggestionType {
  /** SUGGESTION_TYPE_UNSPECIFIED - No suggestiont type is specified. */
  SUGGESTION_TYPE_UNSPECIFIED = 0,
  /** ENTITY - Entity suggestion type. Suggestions are for single entities. */
  ENTITY = 1,
  /** TEMPLATE - Template suggestion type. Suggestions are for full sentences. */
  TEMPLATE = 2,
  UNRECOGNIZED = -1,
}

export function suggestionTypeFromJSON(object: any): SuggestionType {
  switch (object) {
    case 0:
    case "SUGGESTION_TYPE_UNSPECIFIED":
      return SuggestionType.SUGGESTION_TYPE_UNSPECIFIED;
    case 1:
    case "ENTITY":
      return SuggestionType.ENTITY;
    case 2:
    case "TEMPLATE":
      return SuggestionType.TEMPLATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SuggestionType.UNRECOGNIZED;
  }
}

export function suggestionTypeToJSON(object: SuggestionType): string {
  switch (object) {
    case SuggestionType.SUGGESTION_TYPE_UNSPECIFIED:
      return "SUGGESTION_TYPE_UNSPECIFIED";
    case SuggestionType.ENTITY:
      return "ENTITY";
    case SuggestionType.TEMPLATE:
      return "TEMPLATE";
    case SuggestionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request for query suggestions. */
export interface SuggestQueriesRequest {
  /**
   * Required. The parent of the suggestion query is the resource denoting the project and
   * location.
   */
  parent: string;
  /**
   * The scopes to which this search is restricted. The only supported scope
   * pattern is
   * `//bigquery.googleapis.com/projects/{GCP-PROJECT-ID}/datasets/{DATASET-ID}/tables/{TABLE-ID}`.
   */
  scopes: string[];
  /**
   * User query for which to generate suggestions. If the query is empty, zero
   * state suggestions are returned. This allows UIs to display suggestions
   * right away, helping the user to get a sense of what a query might look
   * like.
   */
  query: string;
  /**
   * The requested suggestion type. Multiple suggestion types can be
   * requested, but there is no guarantee that the service will return
   * suggestions for each type. Suggestions for a requested type might rank
   * lower than suggestions for other types and the service may decide to cut
   * these suggestions off.
   */
  suggestionTypes: SuggestionType[];
}

/** A suggestion for a query with a ranking score. */
export interface Suggestion {
  /** Detailed information about the suggestion. */
  suggestionInfo:
    | SuggestionInfo
    | undefined;
  /**
   * The score of the suggestion. This can be used to define ordering in UI.
   * The score represents confidence in the suggestion where higher is better.
   * All score values must be in the range [0, 1).
   */
  rankingScore: number;
  /** The type of the suggestion. */
  suggestionType: SuggestionType;
}

/** Detailed information about the suggestion. */
export interface SuggestionInfo {
  /**
   * Annotations for the suggestion. This provides information about which part
   * of the suggestion corresponds to what semantic meaning (e.g. a metric).
   */
  annotatedSuggestion:
    | AnnotatedString
    | undefined;
  /** Matches between user query and the annotated string. */
  queryMatches: SuggestionInfo_MatchInfo[];
}

/**
 * MatchInfo describes which part of suggestion matched with data in user
 * typed query. This can be used to highlight matching parts in the UI. This
 * is different from the annotations provided in annotated_suggestion. The
 * annotated_suggestion provides information about the semantic meaning, while
 * this provides information about how it relates to the input.
 *
 * Example:
 * user query: `top products`
 *
 * ```
 * annotated_suggestion {
 *  text_formatted = "top product_group"
 *  html_formatted = "top <b>product_group</b>"
 *  markups {
 *   {type: TEXT, start_char_index: 0, length: 3}
 *   {type: DIMENSION, start_char_index: 4, length: 13}
 *  }
 * }
 *
 * query_matches {
 *  { start_char_index: 0, length: 3 }
 *  { start_char_index: 4, length: 7}
 * }
 * ```
 */
export interface SuggestionInfo_MatchInfo {
  /** Unicode character index of the string annotation. */
  startCharIndex: number;
  /** Count of unicode characters of this substring. */
  length: number;
}

/** Response to SuggestQueries. */
export interface SuggestQueriesResponse {
  /** A list of suggestions. */
  suggestions: Suggestion[];
}

function createBaseSuggestQueriesRequest(): SuggestQueriesRequest {
  return { parent: "", scopes: [], query: "", suggestionTypes: [] };
}

export const SuggestQueriesRequest: MessageFns<SuggestQueriesRequest> = {
  encode(message: SuggestQueriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.scopes) {
      writer.uint32(18).string(v!);
    }
    if (message.query !== "") {
      writer.uint32(26).string(message.query);
    }
    writer.uint32(34).fork();
    for (const v of message.suggestionTypes) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestQueriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestQueriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.query = reader.string();
          continue;
        case 4:
          if (tag === 32) {
            message.suggestionTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.suggestionTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestQueriesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      suggestionTypes: globalThis.Array.isArray(object?.suggestionTypes)
        ? object.suggestionTypes.map((e: any) => suggestionTypeFromJSON(e))
        : [],
    };
  },

  toJSON(message: SuggestQueriesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.suggestionTypes?.length) {
      obj.suggestionTypes = message.suggestionTypes.map((e) => suggestionTypeToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestQueriesRequest>): SuggestQueriesRequest {
    return SuggestQueriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestQueriesRequest>): SuggestQueriesRequest {
    const message = createBaseSuggestQueriesRequest();
    message.parent = object.parent ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.query = object.query ?? "";
    message.suggestionTypes = object.suggestionTypes?.map((e) => e) || [];
    return message;
  },
};

function createBaseSuggestion(): Suggestion {
  return { suggestionInfo: undefined, rankingScore: 0, suggestionType: 0 };
}

export const Suggestion: MessageFns<Suggestion> = {
  encode(message: Suggestion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.suggestionInfo !== undefined) {
      SuggestionInfo.encode(message.suggestionInfo, writer.uint32(10).fork()).join();
    }
    if (message.rankingScore !== 0) {
      writer.uint32(17).double(message.rankingScore);
    }
    if (message.suggestionType !== 0) {
      writer.uint32(24).int32(message.suggestionType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Suggestion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.suggestionInfo = SuggestionInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.rankingScore = reader.double();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.suggestionType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Suggestion {
    return {
      suggestionInfo: isSet(object.suggestionInfo) ? SuggestionInfo.fromJSON(object.suggestionInfo) : undefined,
      rankingScore: isSet(object.rankingScore) ? globalThis.Number(object.rankingScore) : 0,
      suggestionType: isSet(object.suggestionType) ? suggestionTypeFromJSON(object.suggestionType) : 0,
    };
  },

  toJSON(message: Suggestion): unknown {
    const obj: any = {};
    if (message.suggestionInfo !== undefined) {
      obj.suggestionInfo = SuggestionInfo.toJSON(message.suggestionInfo);
    }
    if (message.rankingScore !== 0) {
      obj.rankingScore = message.rankingScore;
    }
    if (message.suggestionType !== 0) {
      obj.suggestionType = suggestionTypeToJSON(message.suggestionType);
    }
    return obj;
  },

  create(base?: DeepPartial<Suggestion>): Suggestion {
    return Suggestion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Suggestion>): Suggestion {
    const message = createBaseSuggestion();
    message.suggestionInfo = (object.suggestionInfo !== undefined && object.suggestionInfo !== null)
      ? SuggestionInfo.fromPartial(object.suggestionInfo)
      : undefined;
    message.rankingScore = object.rankingScore ?? 0;
    message.suggestionType = object.suggestionType ?? 0;
    return message;
  },
};

function createBaseSuggestionInfo(): SuggestionInfo {
  return { annotatedSuggestion: undefined, queryMatches: [] };
}

export const SuggestionInfo: MessageFns<SuggestionInfo> = {
  encode(message: SuggestionInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.annotatedSuggestion !== undefined) {
      AnnotatedString.encode(message.annotatedSuggestion, writer.uint32(10).fork()).join();
    }
    for (const v of message.queryMatches) {
      SuggestionInfo_MatchInfo.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestionInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.annotatedSuggestion = AnnotatedString.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queryMatches.push(SuggestionInfo_MatchInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestionInfo {
    return {
      annotatedSuggestion: isSet(object.annotatedSuggestion)
        ? AnnotatedString.fromJSON(object.annotatedSuggestion)
        : undefined,
      queryMatches: globalThis.Array.isArray(object?.queryMatches)
        ? object.queryMatches.map((e: any) => SuggestionInfo_MatchInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SuggestionInfo): unknown {
    const obj: any = {};
    if (message.annotatedSuggestion !== undefined) {
      obj.annotatedSuggestion = AnnotatedString.toJSON(message.annotatedSuggestion);
    }
    if (message.queryMatches?.length) {
      obj.queryMatches = message.queryMatches.map((e) => SuggestionInfo_MatchInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestionInfo>): SuggestionInfo {
    return SuggestionInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestionInfo>): SuggestionInfo {
    const message = createBaseSuggestionInfo();
    message.annotatedSuggestion = (object.annotatedSuggestion !== undefined && object.annotatedSuggestion !== null)
      ? AnnotatedString.fromPartial(object.annotatedSuggestion)
      : undefined;
    message.queryMatches = object.queryMatches?.map((e) => SuggestionInfo_MatchInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSuggestionInfo_MatchInfo(): SuggestionInfo_MatchInfo {
  return { startCharIndex: 0, length: 0 };
}

export const SuggestionInfo_MatchInfo: MessageFns<SuggestionInfo_MatchInfo> = {
  encode(message: SuggestionInfo_MatchInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startCharIndex !== 0) {
      writer.uint32(8).int32(message.startCharIndex);
    }
    if (message.length !== 0) {
      writer.uint32(16).int32(message.length);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestionInfo_MatchInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestionInfo_MatchInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.startCharIndex = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.length = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestionInfo_MatchInfo {
    return {
      startCharIndex: isSet(object.startCharIndex) ? globalThis.Number(object.startCharIndex) : 0,
      length: isSet(object.length) ? globalThis.Number(object.length) : 0,
    };
  },

  toJSON(message: SuggestionInfo_MatchInfo): unknown {
    const obj: any = {};
    if (message.startCharIndex !== 0) {
      obj.startCharIndex = Math.round(message.startCharIndex);
    }
    if (message.length !== 0) {
      obj.length = Math.round(message.length);
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestionInfo_MatchInfo>): SuggestionInfo_MatchInfo {
    return SuggestionInfo_MatchInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestionInfo_MatchInfo>): SuggestionInfo_MatchInfo {
    const message = createBaseSuggestionInfo_MatchInfo();
    message.startCharIndex = object.startCharIndex ?? 0;
    message.length = object.length ?? 0;
    return message;
  },
};

function createBaseSuggestQueriesResponse(): SuggestQueriesResponse {
  return { suggestions: [] };
}

export const SuggestQueriesResponse: MessageFns<SuggestQueriesResponse> = {
  encode(message: SuggestQueriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.suggestions) {
      Suggestion.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestQueriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestQueriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.suggestions.push(Suggestion.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestQueriesResponse {
    return {
      suggestions: globalThis.Array.isArray(object?.suggestions)
        ? object.suggestions.map((e: any) => Suggestion.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SuggestQueriesResponse): unknown {
    const obj: any = {};
    if (message.suggestions?.length) {
      obj.suggestions = message.suggestions.map((e) => Suggestion.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestQueriesResponse>): SuggestQueriesResponse {
    return SuggestQueriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestQueriesResponse>): SuggestQueriesResponse {
    const message = createBaseSuggestQueriesResponse();
    message.suggestions = object.suggestions?.map((e) => Suggestion.fromPartial(e)) || [];
    return message;
  },
};

/**
 * This stateless API provides automatic suggestions for natural language
 * queries for the data sources in the provided project and location.
 *
 * The service provides a resourceless operation `suggestQueries` that can be
 * called to get a list of suggestions for a given incomplete query and scope
 * (or list of scopes) under which the query is to be interpreted.
 *
 * There are two types of suggestions, ENTITY for single entity suggestions
 * and TEMPLATE for full sentences. By default, both types are returned.
 *
 * Example Request:
 * ```
 * GetSuggestions({
 *   parent: "locations/us/projects/my-project"
 *   scopes:
 *   "//bigquery.googleapis.com/projects/my-project/datasets/my-dataset/tables/my-table"
 *   query: "top it"
 * })
 * ```
 *
 * The service will retrieve information based on the given scope(s) and give
 * suggestions based on that (e.g. "top item" for "top it" if "item" is a known
 * dimension for the provided scope).
 * ```
 * suggestions {
 *   suggestion_info {
 *     annotated_suggestion {
 *       text_formatted: "top item by sum of usd_revenue_net"
 *       markups {
 *         type: DIMENSION
 *         start_char_index: 4
 *         length: 4
 *       }
 *       markups {
 *         type: METRIC
 *         start_char_index: 19
 *         length: 15
 *       }
 *     }
 *     query_matches {
 *       start_char_index: 0
 *       length: 6
 *     }
 *   }
 *   suggestion_type: TEMPLATE
 *   ranking_score: 0.9
 * }
 * suggestions {
 *   suggestion_info {
 *     annotated_suggestion {
 *       text_formatted: "item"
 *       markups {
 *         type: DIMENSION
 *         start_char_index: 4
 *         length: 2
 *       }
 *     }
 *     query_matches {
 *       start_char_index: 0
 *       length: 6
 *     }
 *   }
 *   suggestion_type: ENTITY
 *   ranking_score: 0.8
 * }
 * ```
 */
export type AutoSuggestionServiceDefinition = typeof AutoSuggestionServiceDefinition;
export const AutoSuggestionServiceDefinition = {
  name: "AutoSuggestionService",
  fullName: "google.cloud.dataqna.v1alpha.AutoSuggestionService",
  methods: {
    /**
     * Gets a list of suggestions based on a prefix string.
     * AutoSuggestion tolerance should be less than 1 second.
     */
    suggestQueries: {
      name: "SuggestQueries",
      requestType: SuggestQueriesRequest,
      requestStream: false,
      responseType: SuggestQueriesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              60,
              58,
              1,
              42,
              34,
              55,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              115,
              117,
              103,
              103,
              101,
              115,
              116,
              81,
              117,
              101,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AutoSuggestionServiceImplementation<CallContextExt = {}> {
  /**
   * Gets a list of suggestions based on a prefix string.
   * AutoSuggestion tolerance should be less than 1 second.
   */
  suggestQueries(
    request: SuggestQueriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SuggestQueriesResponse>>;
}

export interface AutoSuggestionServiceClient<CallOptionsExt = {}> {
  /**
   * Gets a list of suggestions based on a prefix string.
   * AutoSuggestion tolerance should be less than 1 second.
   */
  suggestQueries(
    request: DeepPartial<SuggestQueriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SuggestQueriesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
