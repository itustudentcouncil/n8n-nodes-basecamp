// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dataqna/v1alpha/question_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Question } from "./question.js";
import { UserFeedback } from "./user_feedback.js";

export const protobufPackage = "google.cloud.dataqna.v1alpha";

/** A request to get a previously created question. */
export interface GetQuestionRequest {
  /**
   * Required. The unique identifier for the question.
   * Example: `projects/foo/locations/bar/questions/1234`
   */
  name: string;
  /** The list of fields to be retrieved. */
  readMask: string[] | undefined;
}

/** Request to create a question resource. */
export interface CreateQuestionRequest {
  /**
   * Required. The name of the project this data source reference belongs to.
   * Example: `projects/foo/locations/bar`
   */
  parent: string;
  /** Required. The question to create. */
  question: Question | undefined;
}

/** Request to execute an interpretation. */
export interface ExecuteQuestionRequest {
  /**
   * Required. The unique identifier for the question.
   * Example: `projects/foo/locations/bar/questions/1234`
   */
  name: string;
  /** Required. Index of the interpretation to execute. */
  interpretationIndex: number;
}

/** Request to get user feedback. */
export interface GetUserFeedbackRequest {
  /**
   * Required. The unique identifier for the user feedback.
   * User feedback is a singleton resource on a Question.
   * Example: `projects/foo/locations/bar/questions/1234/userFeedback`
   */
  name: string;
}

/** Request to updates user feedback. */
export interface UpdateUserFeedbackRequest {
  /**
   * Required. The user feedback to update. This can be called even if there is no
   * user feedback so far.
   * The feedback's name field is used to identify the user feedback (and the
   * corresponding question) to update.
   */
  userFeedback:
    | UserFeedback
    | undefined;
  /** The list of fields to be updated. */
  updateMask: string[] | undefined;
}

function createBaseGetQuestionRequest(): GetQuestionRequest {
  return { name: "", readMask: undefined };
}

export const GetQuestionRequest: MessageFns<GetQuestionRequest> = {
  encode(message: GetQuestionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetQuestionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetQuestionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetQuestionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: GetQuestionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<GetQuestionRequest>): GetQuestionRequest {
    return GetQuestionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetQuestionRequest>): GetQuestionRequest {
    const message = createBaseGetQuestionRequest();
    message.name = object.name ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseCreateQuestionRequest(): CreateQuestionRequest {
  return { parent: "", question: undefined };
}

export const CreateQuestionRequest: MessageFns<CreateQuestionRequest> = {
  encode(message: CreateQuestionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.question !== undefined) {
      Question.encode(message.question, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateQuestionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateQuestionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.question = Question.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateQuestionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      question: isSet(object.question) ? Question.fromJSON(object.question) : undefined,
    };
  },

  toJSON(message: CreateQuestionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.question !== undefined) {
      obj.question = Question.toJSON(message.question);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateQuestionRequest>): CreateQuestionRequest {
    return CreateQuestionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateQuestionRequest>): CreateQuestionRequest {
    const message = createBaseCreateQuestionRequest();
    message.parent = object.parent ?? "";
    message.question = (object.question !== undefined && object.question !== null)
      ? Question.fromPartial(object.question)
      : undefined;
    return message;
  },
};

function createBaseExecuteQuestionRequest(): ExecuteQuestionRequest {
  return { name: "", interpretationIndex: 0 };
}

export const ExecuteQuestionRequest: MessageFns<ExecuteQuestionRequest> = {
  encode(message: ExecuteQuestionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.interpretationIndex !== 0) {
      writer.uint32(16).int32(message.interpretationIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecuteQuestionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecuteQuestionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.interpretationIndex = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecuteQuestionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      interpretationIndex: isSet(object.interpretationIndex) ? globalThis.Number(object.interpretationIndex) : 0,
    };
  },

  toJSON(message: ExecuteQuestionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.interpretationIndex !== 0) {
      obj.interpretationIndex = Math.round(message.interpretationIndex);
    }
    return obj;
  },

  create(base?: DeepPartial<ExecuteQuestionRequest>): ExecuteQuestionRequest {
    return ExecuteQuestionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExecuteQuestionRequest>): ExecuteQuestionRequest {
    const message = createBaseExecuteQuestionRequest();
    message.name = object.name ?? "";
    message.interpretationIndex = object.interpretationIndex ?? 0;
    return message;
  },
};

function createBaseGetUserFeedbackRequest(): GetUserFeedbackRequest {
  return { name: "" };
}

export const GetUserFeedbackRequest: MessageFns<GetUserFeedbackRequest> = {
  encode(message: GetUserFeedbackRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserFeedbackRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserFeedbackRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserFeedbackRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetUserFeedbackRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetUserFeedbackRequest>): GetUserFeedbackRequest {
    return GetUserFeedbackRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUserFeedbackRequest>): GetUserFeedbackRequest {
    const message = createBaseGetUserFeedbackRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateUserFeedbackRequest(): UpdateUserFeedbackRequest {
  return { userFeedback: undefined, updateMask: undefined };
}

export const UpdateUserFeedbackRequest: MessageFns<UpdateUserFeedbackRequest> = {
  encode(message: UpdateUserFeedbackRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userFeedback !== undefined) {
      UserFeedback.encode(message.userFeedback, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserFeedbackRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserFeedbackRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userFeedback = UserFeedback.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserFeedbackRequest {
    return {
      userFeedback: isSet(object.userFeedback) ? UserFeedback.fromJSON(object.userFeedback) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateUserFeedbackRequest): unknown {
    const obj: any = {};
    if (message.userFeedback !== undefined) {
      obj.userFeedback = UserFeedback.toJSON(message.userFeedback);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateUserFeedbackRequest>): UpdateUserFeedbackRequest {
    return UpdateUserFeedbackRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateUserFeedbackRequest>): UpdateUserFeedbackRequest {
    const message = createBaseUpdateUserFeedbackRequest();
    message.userFeedback = (object.userFeedback !== undefined && object.userFeedback !== null)
      ? UserFeedback.fromPartial(object.userFeedback)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

/**
 * Service to interpret natural language queries.
 * The service allows to create `Question` resources that are interpreted and
 * are filled with one or more interpretations if the question could be
 * interpreted. Once a `Question` resource is created and has at least one
 * interpretation, an interpretation can be chosen for execution, which
 * triggers a query to the backend (for BigQuery, it will create a job).
 * Upon successful execution of that interpretation, backend specific
 * information will be returned so that the client can retrieve the results
 * from the backend.
 *
 * The `Question` resources are named `projects/* /locations/* /questions/*`.
 *
 * The `Question` resource has a singletion sub-resource `UserFeedback` named
 * `projects/* /locations/* /questions/* /userFeedback`, which allows access to
 * user feedback.
 */
export type QuestionServiceDefinition = typeof QuestionServiceDefinition;
export const QuestionServiceDefinition = {
  name: "QuestionService",
  fullName: "google.cloud.dataqna.v1alpha.QuestionService",
  methods: {
    /** Gets a previously created question. */
    getQuestion: {
      name: "GetQuestion",
      requestType: GetQuestionRequest,
      requestStream: false,
      responseType: Question,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              113,
              117,
              101,
              115,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a question. */
    createQuestion: {
      name: "CreateQuestion",
      requestType: CreateQuestionRequest,
      requestStream: false,
      responseType: Question,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 113, 117, 101, 115, 116, 105, 111, 110])],
          578365826: [
            Buffer.from([
              62,
              58,
              8,
              113,
              117,
              101,
              115,
              116,
              105,
              111,
              110,
              34,
              50,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              113,
              117,
              101,
              115,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Executes an interpretation. */
    executeQuestion: {
      name: "ExecuteQuestion",
      requestType: ExecuteQuestionRequest,
      requestStream: false,
      responseType: Question,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              110,
              97,
              109,
              101,
              44,
              105,
              110,
              116,
              101,
              114,
              112,
              114,
              101,
              116,
              97,
              116,
              105,
              111,
              110,
              95,
              105,
              110,
              100,
              101,
              120,
            ]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              1,
              42,
              34,
              58,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              113,
              117,
              101,
              115,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Gets previously created user feedback. */
    getUserFeedback: {
      name: "GetUserFeedback",
      requestType: GetUserFeedbackRequest,
      requestStream: false,
      responseType: UserFeedback,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              65,
              18,
              63,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              113,
              117,
              101,
              115,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              70,
              101,
              101,
              100,
              98,
              97,
              99,
              107,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates user feedback. This creates user feedback if there was none before
     * (upsert).
     */
    updateUserFeedback: {
      name: "UpdateUserFeedback",
      requestType: UpdateUserFeedbackRequest,
      requestStream: false,
      responseType: UserFeedback,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              117,
              115,
              101,
              114,
              95,
              102,
              101,
              101,
              100,
              98,
              97,
              99,
              107,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              94,
              58,
              13,
              117,
              115,
              101,
              114,
              95,
              102,
              101,
              101,
              100,
              98,
              97,
              99,
              107,
              50,
              77,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              102,
              101,
              101,
              100,
              98,
              97,
              99,
              107,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              113,
              117,
              101,
              115,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              70,
              101,
              101,
              100,
              98,
              97,
              99,
              107,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface QuestionServiceImplementation<CallContextExt = {}> {
  /** Gets a previously created question. */
  getQuestion(request: GetQuestionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Question>>;
  /** Creates a question. */
  createQuestion(request: CreateQuestionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Question>>;
  /** Executes an interpretation. */
  executeQuestion(
    request: ExecuteQuestionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Question>>;
  /** Gets previously created user feedback. */
  getUserFeedback(
    request: GetUserFeedbackRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UserFeedback>>;
  /**
   * Updates user feedback. This creates user feedback if there was none before
   * (upsert).
   */
  updateUserFeedback(
    request: UpdateUserFeedbackRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UserFeedback>>;
}

export interface QuestionServiceClient<CallOptionsExt = {}> {
  /** Gets a previously created question. */
  getQuestion(request: DeepPartial<GetQuestionRequest>, options?: CallOptions & CallOptionsExt): Promise<Question>;
  /** Creates a question. */
  createQuestion(
    request: DeepPartial<CreateQuestionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Question>;
  /** Executes an interpretation. */
  executeQuestion(
    request: DeepPartial<ExecuteQuestionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Question>;
  /** Gets previously created user feedback. */
  getUserFeedback(
    request: DeepPartial<GetUserFeedbackRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UserFeedback>;
  /**
   * Updates user feedback. This creates user feedback if there was none before
   * (upsert).
   */
  updateUserFeedback(
    request: DeepPartial<UpdateUserFeedbackRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UserFeedback>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
