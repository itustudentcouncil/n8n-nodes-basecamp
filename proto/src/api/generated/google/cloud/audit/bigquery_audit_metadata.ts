// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/audit/bigquery_audit_metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Policy } from "../../iam/v1/policy.js";
import { Duration } from "../../protobuf/duration.js";
import { Timestamp } from "../../protobuf/timestamp.js";
import { Status } from "../../rpc/status.js";

export const protobufPackage = "google.cloud.audit";

/** Audit log format for BigQuery cloud audit logs metadata. */
export interface BigQueryAuditMetadata {
  /** Job insertion event. */
  jobInsertion?:
    | BigQueryAuditMetadata_JobInsertion
    | undefined;
  /** Job state change event. */
  jobChange?:
    | BigQueryAuditMetadata_JobChange
    | undefined;
  /** Job deletion event. */
  jobDeletion?:
    | BigQueryAuditMetadata_JobDeletion
    | undefined;
  /** Dataset creation event. */
  datasetCreation?:
    | BigQueryAuditMetadata_DatasetCreation
    | undefined;
  /** Dataset change event. */
  datasetChange?:
    | BigQueryAuditMetadata_DatasetChange
    | undefined;
  /** Dataset deletion event. */
  datasetDeletion?:
    | BigQueryAuditMetadata_DatasetDeletion
    | undefined;
  /** Table creation event. */
  tableCreation?:
    | BigQueryAuditMetadata_TableCreation
    | undefined;
  /** Table metadata change event. */
  tableChange?:
    | BigQueryAuditMetadata_TableChange
    | undefined;
  /** Table deletion event. */
  tableDeletion?:
    | BigQueryAuditMetadata_TableDeletion
    | undefined;
  /** Table data read event. */
  tableDataRead?:
    | BigQueryAuditMetadata_TableDataRead
    | undefined;
  /** Table data change event. */
  tableDataChange?:
    | BigQueryAuditMetadata_TableDataChange
    | undefined;
  /** Model deletion event. */
  modelDeletion?:
    | BigQueryAuditMetadata_ModelDeletion
    | undefined;
  /** Model creation event. */
  modelCreation?:
    | BigQueryAuditMetadata_ModelCreation
    | undefined;
  /** Model metadata change event. */
  modelMetadataChange?:
    | BigQueryAuditMetadata_ModelMetadataChange
    | undefined;
  /** Model data change event. */
  modelDataChange?:
    | BigQueryAuditMetadata_ModelDataChange
    | undefined;
  /** Model data read event. */
  modelDataRead?:
    | BigQueryAuditMetadata_ModelDataRead
    | undefined;
  /** Routine creation event. */
  routineCreation?:
    | BigQueryAuditMetadata_RoutineCreation
    | undefined;
  /** Routine change event. */
  routineChange?:
    | BigQueryAuditMetadata_RoutineChange
    | undefined;
  /** Routine deletion event. */
  routineDeletion?:
    | BigQueryAuditMetadata_RoutineDeletion
    | undefined;
  /** Row access policy create event. */
  rowAccessPolicyCreation?:
    | BigQueryAuditMetadata_RowAccessPolicyCreation
    | undefined;
  /** Row access policy change event. */
  rowAccessPolicyChange?:
    | BigQueryAuditMetadata_RowAccessPolicyChange
    | undefined;
  /** Row access policy deletion event. */
  rowAccessPolicyDeletion?:
    | BigQueryAuditMetadata_RowAccessPolicyDeletion
    | undefined;
  /** Unlink linked dataset from its source dataset event */
  unlinkDataset?:
    | BigQueryAuditMetadata_UnlinkDataset
    | undefined;
  /** First party (Google) application specific metadata. */
  firstPartyAppMetadata: BigQueryAuditMetadata_FirstPartyAppMetadata | undefined;
}

/**
 * Describes whether a job should create a destination table if it doesn't
 * exist.
 */
export enum BigQueryAuditMetadata_CreateDisposition {
  /** CREATE_DISPOSITION_UNSPECIFIED - Unknown. */
  CREATE_DISPOSITION_UNSPECIFIED = 0,
  /** CREATE_NEVER - This job should never create tables. */
  CREATE_NEVER = 1,
  /** CREATE_IF_NEEDED - This job should create a table if it doesn't already exist. */
  CREATE_IF_NEEDED = 2,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_CreateDispositionFromJSON(object: any): BigQueryAuditMetadata_CreateDisposition {
  switch (object) {
    case 0:
    case "CREATE_DISPOSITION_UNSPECIFIED":
      return BigQueryAuditMetadata_CreateDisposition.CREATE_DISPOSITION_UNSPECIFIED;
    case 1:
    case "CREATE_NEVER":
      return BigQueryAuditMetadata_CreateDisposition.CREATE_NEVER;
    case 2:
    case "CREATE_IF_NEEDED":
      return BigQueryAuditMetadata_CreateDisposition.CREATE_IF_NEEDED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_CreateDisposition.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_CreateDispositionToJSON(object: BigQueryAuditMetadata_CreateDisposition): string {
  switch (object) {
    case BigQueryAuditMetadata_CreateDisposition.CREATE_DISPOSITION_UNSPECIFIED:
      return "CREATE_DISPOSITION_UNSPECIFIED";
    case BigQueryAuditMetadata_CreateDisposition.CREATE_NEVER:
      return "CREATE_NEVER";
    case BigQueryAuditMetadata_CreateDisposition.CREATE_IF_NEEDED:
      return "CREATE_IF_NEEDED";
    case BigQueryAuditMetadata_CreateDisposition.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Describes whether a job should overwrite or append the existing destination
 * table if it already exists.
 */
export enum BigQueryAuditMetadata_WriteDisposition {
  /** WRITE_DISPOSITION_UNSPECIFIED - Unknown. */
  WRITE_DISPOSITION_UNSPECIFIED = 0,
  /** WRITE_EMPTY - This job should only be writing to empty tables. */
  WRITE_EMPTY = 1,
  /** WRITE_TRUNCATE - This job will truncate the existing table data. */
  WRITE_TRUNCATE = 2,
  /** WRITE_APPEND - This job will append to the table. */
  WRITE_APPEND = 3,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_WriteDispositionFromJSON(object: any): BigQueryAuditMetadata_WriteDisposition {
  switch (object) {
    case 0:
    case "WRITE_DISPOSITION_UNSPECIFIED":
      return BigQueryAuditMetadata_WriteDisposition.WRITE_DISPOSITION_UNSPECIFIED;
    case 1:
    case "WRITE_EMPTY":
      return BigQueryAuditMetadata_WriteDisposition.WRITE_EMPTY;
    case 2:
    case "WRITE_TRUNCATE":
      return BigQueryAuditMetadata_WriteDisposition.WRITE_TRUNCATE;
    case 3:
    case "WRITE_APPEND":
      return BigQueryAuditMetadata_WriteDisposition.WRITE_APPEND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_WriteDisposition.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_WriteDispositionToJSON(object: BigQueryAuditMetadata_WriteDisposition): string {
  switch (object) {
    case BigQueryAuditMetadata_WriteDisposition.WRITE_DISPOSITION_UNSPECIFIED:
      return "WRITE_DISPOSITION_UNSPECIFIED";
    case BigQueryAuditMetadata_WriteDisposition.WRITE_EMPTY:
      return "WRITE_EMPTY";
    case BigQueryAuditMetadata_WriteDisposition.WRITE_TRUNCATE:
      return "WRITE_TRUNCATE";
    case BigQueryAuditMetadata_WriteDisposition.WRITE_APPEND:
      return "WRITE_APPEND";
    case BigQueryAuditMetadata_WriteDisposition.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Table copy job operation type. */
export enum BigQueryAuditMetadata_OperationType {
  /** OPERATION_TYPE_UNSPECIFIED - Unspecified operation type. */
  OPERATION_TYPE_UNSPECIFIED = 0,
  /** COPY - The source and the destination table have the same table type. */
  COPY = 1,
  /**
   * SNAPSHOT - The source table type is TABLE and
   * the destination table type is SNAPSHOT.
   */
  SNAPSHOT = 2,
  /**
   * RESTORE - The source table type is SNAPSHOT and
   * the destination table type is TABLE.
   */
  RESTORE = 3,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_OperationTypeFromJSON(object: any): BigQueryAuditMetadata_OperationType {
  switch (object) {
    case 0:
    case "OPERATION_TYPE_UNSPECIFIED":
      return BigQueryAuditMetadata_OperationType.OPERATION_TYPE_UNSPECIFIED;
    case 1:
    case "COPY":
      return BigQueryAuditMetadata_OperationType.COPY;
    case 2:
    case "SNAPSHOT":
      return BigQueryAuditMetadata_OperationType.SNAPSHOT;
    case 3:
    case "RESTORE":
      return BigQueryAuditMetadata_OperationType.RESTORE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_OperationType.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_OperationTypeToJSON(object: BigQueryAuditMetadata_OperationType): string {
  switch (object) {
    case BigQueryAuditMetadata_OperationType.OPERATION_TYPE_UNSPECIFIED:
      return "OPERATION_TYPE_UNSPECIFIED";
    case BigQueryAuditMetadata_OperationType.COPY:
      return "COPY";
    case BigQueryAuditMetadata_OperationType.SNAPSHOT:
      return "SNAPSHOT";
    case BigQueryAuditMetadata_OperationType.RESTORE:
      return "RESTORE";
    case BigQueryAuditMetadata_OperationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** State of a job. */
export enum BigQueryAuditMetadata_JobState {
  /** JOB_STATE_UNSPECIFIED - State unknown. */
  JOB_STATE_UNSPECIFIED = 0,
  /** PENDING - Job is waiting for the resources. */
  PENDING = 1,
  /** RUNNING - Job is running. */
  RUNNING = 2,
  /** DONE - Job is done. */
  DONE = 3,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_JobStateFromJSON(object: any): BigQueryAuditMetadata_JobState {
  switch (object) {
    case 0:
    case "JOB_STATE_UNSPECIFIED":
      return BigQueryAuditMetadata_JobState.JOB_STATE_UNSPECIFIED;
    case 1:
    case "PENDING":
      return BigQueryAuditMetadata_JobState.PENDING;
    case 2:
    case "RUNNING":
      return BigQueryAuditMetadata_JobState.RUNNING;
    case 3:
    case "DONE":
      return BigQueryAuditMetadata_JobState.DONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_JobState.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_JobStateToJSON(object: BigQueryAuditMetadata_JobState): string {
  switch (object) {
    case BigQueryAuditMetadata_JobState.JOB_STATE_UNSPECIFIED:
      return "JOB_STATE_UNSPECIFIED";
    case BigQueryAuditMetadata_JobState.PENDING:
      return "PENDING";
    case BigQueryAuditMetadata_JobState.RUNNING:
      return "RUNNING";
    case BigQueryAuditMetadata_JobState.DONE:
      return "DONE";
    case BigQueryAuditMetadata_JobState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Type of the statement (e.g. SELECT, INSERT, CREATE_TABLE, CREATE_MODEL..) */
export enum BigQueryAuditMetadata_QueryStatementType {
  /** QUERY_STATEMENT_TYPE_UNSPECIFIED - Unknown. */
  QUERY_STATEMENT_TYPE_UNSPECIFIED = 0,
  /** SELECT - SELECT ... FROM &lt;Table list&gt; ... */
  SELECT = 1,
  /** ASSERT - ASSERT &lt;condition&gt; AS 'description' */
  ASSERT = 23,
  /** INSERT - INSERT INTO &lt;Table&gt; .... */
  INSERT = 2,
  /** UPDATE - UPDATE &lt;Table&gt; SET ... */
  UPDATE = 3,
  /** DELETE - DELETE &lt;Table&gt; ... */
  DELETE = 4,
  /** MERGE - MERGE INTO &lt;Table&gt; .... */
  MERGE = 5,
  /** CREATE_TABLE - CREATE TABLE &lt;Table&gt; &lt;column list&gt; */
  CREATE_TABLE = 6,
  /** CREATE_TABLE_AS_SELECT - CREATE TABLE &lt;Table&gt; AS SELECT */
  CREATE_TABLE_AS_SELECT = 7,
  /** CREATE_VIEW - CREATE VIEW &lt;View&gt; */
  CREATE_VIEW = 8,
  /** CREATE_MODEL - CREATE MODEL &lt;Model&gt; AS &lt;Query&gt; */
  CREATE_MODEL = 9,
  /** CREATE_MATERIALIZED_VIEW - CREATE MATERIALIZED VIEW &lt;View&gt; AS ... */
  CREATE_MATERIALIZED_VIEW = 13,
  /** CREATE_FUNCTION - CREATE FUNCTION &lt;Function&gt;(&lt;Signature&gt;) AS ... */
  CREATE_FUNCTION = 14,
  /** CREATE_TABLE_FUNCTION - CREATE TABLE FUNCTION &lt;Function&gt;(&lt;Signature&gt;) AS ... */
  CREATE_TABLE_FUNCTION = 56,
  /** CREATE_PROCEDURE - CREATE PROCEDURE &lt;Procedure&gt; */
  CREATE_PROCEDURE = 20,
  /** CREATE_ROW_ACCESS_POLICY - CREATE ROW ACCESS POLICY &lt;RowAccessPolicy&gt ON &lt;Table&gt; */
  CREATE_ROW_ACCESS_POLICY = 24,
  /** CREATE_SCHEMA - CREATE SCHEMA &lt;Schema&gt; */
  CREATE_SCHEMA = 53,
  /** CREATE_SNAPSHOT_TABLE - CREATE SNAPSHOT TABLE &lt;Snapshot&gt CLONE &lt;Table&gt; */
  CREATE_SNAPSHOT_TABLE = 59,
  /** DROP_TABLE - DROP TABLE &lt;Table&gt; */
  DROP_TABLE = 10,
  /** DROP_EXTERNAL_TABLE - DROP EXTERNAL TABLE &lt;Table&gt; */
  DROP_EXTERNAL_TABLE = 33,
  /** DROP_VIEW - DROP VIEW &lt;View&gt; */
  DROP_VIEW = 11,
  /** DROP_MODEL - DROP MODEL &lt;Model&gt; */
  DROP_MODEL = 12,
  /** DROP_MATERIALIZED_VIEW - DROP MATERIALIZED VIEW &lt;View&gt; */
  DROP_MATERIALIZED_VIEW = 15,
  /** DROP_FUNCTION - DROP FUNCTION &lt;Function&gt; */
  DROP_FUNCTION = 16,
  /** DROP_PROCEDURE - DROP PROCEDURE &lt;Procedure&gt; */
  DROP_PROCEDURE = 21,
  /** DROP_SCHEMA - DROP SCHEMA &lt;Schema&gt; */
  DROP_SCHEMA = 54,
  /**
   * DROP_ROW_ACCESS_POLICY - DROP ROW ACCESS POLICY &lt;RowAccessPolicy&gt ON &lt;Table&gt; <or> DROP
   * ALL ROW ACCESS POLICIES ON ON &lt;Table&gt;
   */
  DROP_ROW_ACCESS_POLICY = 25,
  /** DROP_SNAPSHOT_TABLE - DROP SNAPSHOT TABLE &lt;Snapshot&gt; */
  DROP_SNAPSHOT_TABLE = 62,
  /** ALTER_TABLE - ALTER TABLE &lt;Table&gt; */
  ALTER_TABLE = 17,
  /** ALTER_VIEW - ALTER VIEW &lt;View&gt; */
  ALTER_VIEW = 18,
  /** ALTER_MATERIALIZED_VIEW - ALTER MATERIALIZED_VIEW &lt;view&gt; */
  ALTER_MATERIALIZED_VIEW = 22,
  /** ALTER_SCHEMA - ALTER SCHEMA &lt;Schema&gt; */
  ALTER_SCHEMA = 55,
  /** SCRIPT - Script */
  SCRIPT = 19,
  /** TRUNCATE_TABLE - TRUNCATE TABLE &lt;Table&gt; */
  TRUNCATE_TABLE = 26,
  /** CREATE_EXTERNAL_TABLE - CREATE EXTERNAL TABLE &lt;TABLE&gt; */
  CREATE_EXTERNAL_TABLE = 27,
  /** EXPORT_DATA - EXPORT DATA; */
  EXPORT_DATA = 28,
  /** CALL - CALL &lt;stored procedure&gt; */
  CALL = 29,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_QueryStatementTypeFromJSON(
  object: any,
): BigQueryAuditMetadata_QueryStatementType {
  switch (object) {
    case 0:
    case "QUERY_STATEMENT_TYPE_UNSPECIFIED":
      return BigQueryAuditMetadata_QueryStatementType.QUERY_STATEMENT_TYPE_UNSPECIFIED;
    case 1:
    case "SELECT":
      return BigQueryAuditMetadata_QueryStatementType.SELECT;
    case 23:
    case "ASSERT":
      return BigQueryAuditMetadata_QueryStatementType.ASSERT;
    case 2:
    case "INSERT":
      return BigQueryAuditMetadata_QueryStatementType.INSERT;
    case 3:
    case "UPDATE":
      return BigQueryAuditMetadata_QueryStatementType.UPDATE;
    case 4:
    case "DELETE":
      return BigQueryAuditMetadata_QueryStatementType.DELETE;
    case 5:
    case "MERGE":
      return BigQueryAuditMetadata_QueryStatementType.MERGE;
    case 6:
    case "CREATE_TABLE":
      return BigQueryAuditMetadata_QueryStatementType.CREATE_TABLE;
    case 7:
    case "CREATE_TABLE_AS_SELECT":
      return BigQueryAuditMetadata_QueryStatementType.CREATE_TABLE_AS_SELECT;
    case 8:
    case "CREATE_VIEW":
      return BigQueryAuditMetadata_QueryStatementType.CREATE_VIEW;
    case 9:
    case "CREATE_MODEL":
      return BigQueryAuditMetadata_QueryStatementType.CREATE_MODEL;
    case 13:
    case "CREATE_MATERIALIZED_VIEW":
      return BigQueryAuditMetadata_QueryStatementType.CREATE_MATERIALIZED_VIEW;
    case 14:
    case "CREATE_FUNCTION":
      return BigQueryAuditMetadata_QueryStatementType.CREATE_FUNCTION;
    case 56:
    case "CREATE_TABLE_FUNCTION":
      return BigQueryAuditMetadata_QueryStatementType.CREATE_TABLE_FUNCTION;
    case 20:
    case "CREATE_PROCEDURE":
      return BigQueryAuditMetadata_QueryStatementType.CREATE_PROCEDURE;
    case 24:
    case "CREATE_ROW_ACCESS_POLICY":
      return BigQueryAuditMetadata_QueryStatementType.CREATE_ROW_ACCESS_POLICY;
    case 53:
    case "CREATE_SCHEMA":
      return BigQueryAuditMetadata_QueryStatementType.CREATE_SCHEMA;
    case 59:
    case "CREATE_SNAPSHOT_TABLE":
      return BigQueryAuditMetadata_QueryStatementType.CREATE_SNAPSHOT_TABLE;
    case 10:
    case "DROP_TABLE":
      return BigQueryAuditMetadata_QueryStatementType.DROP_TABLE;
    case 33:
    case "DROP_EXTERNAL_TABLE":
      return BigQueryAuditMetadata_QueryStatementType.DROP_EXTERNAL_TABLE;
    case 11:
    case "DROP_VIEW":
      return BigQueryAuditMetadata_QueryStatementType.DROP_VIEW;
    case 12:
    case "DROP_MODEL":
      return BigQueryAuditMetadata_QueryStatementType.DROP_MODEL;
    case 15:
    case "DROP_MATERIALIZED_VIEW":
      return BigQueryAuditMetadata_QueryStatementType.DROP_MATERIALIZED_VIEW;
    case 16:
    case "DROP_FUNCTION":
      return BigQueryAuditMetadata_QueryStatementType.DROP_FUNCTION;
    case 21:
    case "DROP_PROCEDURE":
      return BigQueryAuditMetadata_QueryStatementType.DROP_PROCEDURE;
    case 54:
    case "DROP_SCHEMA":
      return BigQueryAuditMetadata_QueryStatementType.DROP_SCHEMA;
    case 25:
    case "DROP_ROW_ACCESS_POLICY":
      return BigQueryAuditMetadata_QueryStatementType.DROP_ROW_ACCESS_POLICY;
    case 62:
    case "DROP_SNAPSHOT_TABLE":
      return BigQueryAuditMetadata_QueryStatementType.DROP_SNAPSHOT_TABLE;
    case 17:
    case "ALTER_TABLE":
      return BigQueryAuditMetadata_QueryStatementType.ALTER_TABLE;
    case 18:
    case "ALTER_VIEW":
      return BigQueryAuditMetadata_QueryStatementType.ALTER_VIEW;
    case 22:
    case "ALTER_MATERIALIZED_VIEW":
      return BigQueryAuditMetadata_QueryStatementType.ALTER_MATERIALIZED_VIEW;
    case 55:
    case "ALTER_SCHEMA":
      return BigQueryAuditMetadata_QueryStatementType.ALTER_SCHEMA;
    case 19:
    case "SCRIPT":
      return BigQueryAuditMetadata_QueryStatementType.SCRIPT;
    case 26:
    case "TRUNCATE_TABLE":
      return BigQueryAuditMetadata_QueryStatementType.TRUNCATE_TABLE;
    case 27:
    case "CREATE_EXTERNAL_TABLE":
      return BigQueryAuditMetadata_QueryStatementType.CREATE_EXTERNAL_TABLE;
    case 28:
    case "EXPORT_DATA":
      return BigQueryAuditMetadata_QueryStatementType.EXPORT_DATA;
    case 29:
    case "CALL":
      return BigQueryAuditMetadata_QueryStatementType.CALL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_QueryStatementType.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_QueryStatementTypeToJSON(
  object: BigQueryAuditMetadata_QueryStatementType,
): string {
  switch (object) {
    case BigQueryAuditMetadata_QueryStatementType.QUERY_STATEMENT_TYPE_UNSPECIFIED:
      return "QUERY_STATEMENT_TYPE_UNSPECIFIED";
    case BigQueryAuditMetadata_QueryStatementType.SELECT:
      return "SELECT";
    case BigQueryAuditMetadata_QueryStatementType.ASSERT:
      return "ASSERT";
    case BigQueryAuditMetadata_QueryStatementType.INSERT:
      return "INSERT";
    case BigQueryAuditMetadata_QueryStatementType.UPDATE:
      return "UPDATE";
    case BigQueryAuditMetadata_QueryStatementType.DELETE:
      return "DELETE";
    case BigQueryAuditMetadata_QueryStatementType.MERGE:
      return "MERGE";
    case BigQueryAuditMetadata_QueryStatementType.CREATE_TABLE:
      return "CREATE_TABLE";
    case BigQueryAuditMetadata_QueryStatementType.CREATE_TABLE_AS_SELECT:
      return "CREATE_TABLE_AS_SELECT";
    case BigQueryAuditMetadata_QueryStatementType.CREATE_VIEW:
      return "CREATE_VIEW";
    case BigQueryAuditMetadata_QueryStatementType.CREATE_MODEL:
      return "CREATE_MODEL";
    case BigQueryAuditMetadata_QueryStatementType.CREATE_MATERIALIZED_VIEW:
      return "CREATE_MATERIALIZED_VIEW";
    case BigQueryAuditMetadata_QueryStatementType.CREATE_FUNCTION:
      return "CREATE_FUNCTION";
    case BigQueryAuditMetadata_QueryStatementType.CREATE_TABLE_FUNCTION:
      return "CREATE_TABLE_FUNCTION";
    case BigQueryAuditMetadata_QueryStatementType.CREATE_PROCEDURE:
      return "CREATE_PROCEDURE";
    case BigQueryAuditMetadata_QueryStatementType.CREATE_ROW_ACCESS_POLICY:
      return "CREATE_ROW_ACCESS_POLICY";
    case BigQueryAuditMetadata_QueryStatementType.CREATE_SCHEMA:
      return "CREATE_SCHEMA";
    case BigQueryAuditMetadata_QueryStatementType.CREATE_SNAPSHOT_TABLE:
      return "CREATE_SNAPSHOT_TABLE";
    case BigQueryAuditMetadata_QueryStatementType.DROP_TABLE:
      return "DROP_TABLE";
    case BigQueryAuditMetadata_QueryStatementType.DROP_EXTERNAL_TABLE:
      return "DROP_EXTERNAL_TABLE";
    case BigQueryAuditMetadata_QueryStatementType.DROP_VIEW:
      return "DROP_VIEW";
    case BigQueryAuditMetadata_QueryStatementType.DROP_MODEL:
      return "DROP_MODEL";
    case BigQueryAuditMetadata_QueryStatementType.DROP_MATERIALIZED_VIEW:
      return "DROP_MATERIALIZED_VIEW";
    case BigQueryAuditMetadata_QueryStatementType.DROP_FUNCTION:
      return "DROP_FUNCTION";
    case BigQueryAuditMetadata_QueryStatementType.DROP_PROCEDURE:
      return "DROP_PROCEDURE";
    case BigQueryAuditMetadata_QueryStatementType.DROP_SCHEMA:
      return "DROP_SCHEMA";
    case BigQueryAuditMetadata_QueryStatementType.DROP_ROW_ACCESS_POLICY:
      return "DROP_ROW_ACCESS_POLICY";
    case BigQueryAuditMetadata_QueryStatementType.DROP_SNAPSHOT_TABLE:
      return "DROP_SNAPSHOT_TABLE";
    case BigQueryAuditMetadata_QueryStatementType.ALTER_TABLE:
      return "ALTER_TABLE";
    case BigQueryAuditMetadata_QueryStatementType.ALTER_VIEW:
      return "ALTER_VIEW";
    case BigQueryAuditMetadata_QueryStatementType.ALTER_MATERIALIZED_VIEW:
      return "ALTER_MATERIALIZED_VIEW";
    case BigQueryAuditMetadata_QueryStatementType.ALTER_SCHEMA:
      return "ALTER_SCHEMA";
    case BigQueryAuditMetadata_QueryStatementType.SCRIPT:
      return "SCRIPT";
    case BigQueryAuditMetadata_QueryStatementType.TRUNCATE_TABLE:
      return "TRUNCATE_TABLE";
    case BigQueryAuditMetadata_QueryStatementType.CREATE_EXTERNAL_TABLE:
      return "CREATE_EXTERNAL_TABLE";
    case BigQueryAuditMetadata_QueryStatementType.EXPORT_DATA:
      return "EXPORT_DATA";
    case BigQueryAuditMetadata_QueryStatementType.CALL:
      return "CALL";
    case BigQueryAuditMetadata_QueryStatementType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Job insertion event. */
export interface BigQueryAuditMetadata_JobInsertion {
  /** Job metadata. */
  job:
    | BigQueryAuditMetadata_Job
    | undefined;
  /** Describes how the job was inserted. */
  reason: BigQueryAuditMetadata_JobInsertion_Reason;
}

/** Describes how the job was inserted. */
export enum BigQueryAuditMetadata_JobInsertion_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** JOB_INSERT_REQUEST - Job was inserted using the jobs.insert API. */
  JOB_INSERT_REQUEST = 1,
  /** QUERY_REQUEST - Job was inserted using the jobs.query RPC. */
  QUERY_REQUEST = 2,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_JobInsertion_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_JobInsertion_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_JobInsertion_Reason.REASON_UNSPECIFIED;
    case 1:
    case "JOB_INSERT_REQUEST":
      return BigQueryAuditMetadata_JobInsertion_Reason.JOB_INSERT_REQUEST;
    case 2:
    case "QUERY_REQUEST":
      return BigQueryAuditMetadata_JobInsertion_Reason.QUERY_REQUEST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_JobInsertion_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_JobInsertion_ReasonToJSON(
  object: BigQueryAuditMetadata_JobInsertion_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_JobInsertion_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_JobInsertion_Reason.JOB_INSERT_REQUEST:
      return "JOB_INSERT_REQUEST";
    case BigQueryAuditMetadata_JobInsertion_Reason.QUERY_REQUEST:
      return "QUERY_REQUEST";
    case BigQueryAuditMetadata_JobInsertion_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Job state change event. */
export interface BigQueryAuditMetadata_JobChange {
  /** Job state before the job state change. */
  before: BigQueryAuditMetadata_JobState;
  /** Job state after the job state change. */
  after: BigQueryAuditMetadata_JobState;
  /** Job metadata. */
  job: BigQueryAuditMetadata_Job | undefined;
}

/** Job deletion event. */
export interface BigQueryAuditMetadata_JobDeletion {
  /**
   * Job URI.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
  /** Describes how the job was deleted. */
  reason: BigQueryAuditMetadata_JobDeletion_Reason;
}

/** Describes how the job was deleted. */
export enum BigQueryAuditMetadata_JobDeletion_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** JOB_DELETE_REQUEST - Job was deleted using the jobs.delete API. */
  JOB_DELETE_REQUEST = 1,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_JobDeletion_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_JobDeletion_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_JobDeletion_Reason.REASON_UNSPECIFIED;
    case 1:
    case "JOB_DELETE_REQUEST":
      return BigQueryAuditMetadata_JobDeletion_Reason.JOB_DELETE_REQUEST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_JobDeletion_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_JobDeletion_ReasonToJSON(
  object: BigQueryAuditMetadata_JobDeletion_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_JobDeletion_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_JobDeletion_Reason.JOB_DELETE_REQUEST:
      return "JOB_DELETE_REQUEST";
    case BigQueryAuditMetadata_JobDeletion_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Dataset creation event. */
export interface BigQueryAuditMetadata_DatasetCreation {
  /** Dataset metadata. */
  dataset:
    | BigQueryAuditMetadata_Dataset
    | undefined;
  /** Describes how the dataset was created. */
  reason: BigQueryAuditMetadata_DatasetCreation_Reason;
  /**
   * The URI of the job that created the dataset.
   * Present if the reason is QUERY.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
}

/** Describes how the dataset was created. */
export enum BigQueryAuditMetadata_DatasetCreation_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** CREATE - Dataset was created using the datasets.create API. */
  CREATE = 1,
  /** QUERY - Dataset was created using a query job, e.g., CREATE SCHEMA statement. */
  QUERY = 2,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_DatasetCreation_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_DatasetCreation_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_DatasetCreation_Reason.REASON_UNSPECIFIED;
    case 1:
    case "CREATE":
      return BigQueryAuditMetadata_DatasetCreation_Reason.CREATE;
    case 2:
    case "QUERY":
      return BigQueryAuditMetadata_DatasetCreation_Reason.QUERY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_DatasetCreation_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_DatasetCreation_ReasonToJSON(
  object: BigQueryAuditMetadata_DatasetCreation_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_DatasetCreation_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_DatasetCreation_Reason.CREATE:
      return "CREATE";
    case BigQueryAuditMetadata_DatasetCreation_Reason.QUERY:
      return "QUERY";
    case BigQueryAuditMetadata_DatasetCreation_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Dataset change event. */
export interface BigQueryAuditMetadata_DatasetChange {
  /** Dataset metadata after the change. */
  dataset:
    | BigQueryAuditMetadata_Dataset
    | undefined;
  /** Describes how the dataset was changed. */
  reason: BigQueryAuditMetadata_DatasetChange_Reason;
  /**
   * The URI of the job that updated the dataset.
   * Present if the reason is QUERY.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
}

/** Describes how the dataset was changed. */
export enum BigQueryAuditMetadata_DatasetChange_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** UPDATE - Dataset was changed using the datasets.update or datasets.patch API. */
  UPDATE = 1,
  /** SET_IAM_POLICY - Dataset was changed using the SetIamPolicy API. */
  SET_IAM_POLICY = 2,
  /** QUERY - Dataset was changed using a query job, e.g., ALTER SCHEMA statement. */
  QUERY = 3,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_DatasetChange_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_DatasetChange_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_DatasetChange_Reason.REASON_UNSPECIFIED;
    case 1:
    case "UPDATE":
      return BigQueryAuditMetadata_DatasetChange_Reason.UPDATE;
    case 2:
    case "SET_IAM_POLICY":
      return BigQueryAuditMetadata_DatasetChange_Reason.SET_IAM_POLICY;
    case 3:
    case "QUERY":
      return BigQueryAuditMetadata_DatasetChange_Reason.QUERY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_DatasetChange_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_DatasetChange_ReasonToJSON(
  object: BigQueryAuditMetadata_DatasetChange_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_DatasetChange_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_DatasetChange_Reason.UPDATE:
      return "UPDATE";
    case BigQueryAuditMetadata_DatasetChange_Reason.SET_IAM_POLICY:
      return "SET_IAM_POLICY";
    case BigQueryAuditMetadata_DatasetChange_Reason.QUERY:
      return "QUERY";
    case BigQueryAuditMetadata_DatasetChange_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Dataset deletion event. */
export interface BigQueryAuditMetadata_DatasetDeletion {
  /** Describes how the dataset was deleted. */
  reason: BigQueryAuditMetadata_DatasetDeletion_Reason;
  /**
   * The URI of the job that deleted the dataset.
   * Present if the reason is QUERY.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
}

/** Describes how the dataset was deleted. */
export enum BigQueryAuditMetadata_DatasetDeletion_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** DELETE - Dataset was deleted using the datasets.delete API. */
  DELETE = 1,
  /** QUERY - Dataset was deleted using a query job, e.g., DROP SCHEMA statement. */
  QUERY = 2,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_DatasetDeletion_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_DatasetDeletion_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_DatasetDeletion_Reason.REASON_UNSPECIFIED;
    case 1:
    case "DELETE":
      return BigQueryAuditMetadata_DatasetDeletion_Reason.DELETE;
    case 2:
    case "QUERY":
      return BigQueryAuditMetadata_DatasetDeletion_Reason.QUERY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_DatasetDeletion_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_DatasetDeletion_ReasonToJSON(
  object: BigQueryAuditMetadata_DatasetDeletion_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_DatasetDeletion_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_DatasetDeletion_Reason.DELETE:
      return "DELETE";
    case BigQueryAuditMetadata_DatasetDeletion_Reason.QUERY:
      return "QUERY";
    case BigQueryAuditMetadata_DatasetDeletion_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Table creation event. */
export interface BigQueryAuditMetadata_TableCreation {
  /** Table metadata. */
  table:
    | BigQueryAuditMetadata_Table
    | undefined;
  /** Describes how the table was created. */
  reason: BigQueryAuditMetadata_TableCreation_Reason;
  /**
   * The URI of the job that created a table.
   * Present if the reason is JOB or QUERY.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
}

/** Describes how the table was created. */
export enum BigQueryAuditMetadata_TableCreation_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /**
   * JOB - Table was created as a destination table during a query, load or copy
   * job.
   */
  JOB = 1,
  /** QUERY - Table was created using a DDL query. */
  QUERY = 2,
  /** TABLE_INSERT_REQUEST - Table was created using the tables.create API. */
  TABLE_INSERT_REQUEST = 3,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_TableCreation_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_TableCreation_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_TableCreation_Reason.REASON_UNSPECIFIED;
    case 1:
    case "JOB":
      return BigQueryAuditMetadata_TableCreation_Reason.JOB;
    case 2:
    case "QUERY":
      return BigQueryAuditMetadata_TableCreation_Reason.QUERY;
    case 3:
    case "TABLE_INSERT_REQUEST":
      return BigQueryAuditMetadata_TableCreation_Reason.TABLE_INSERT_REQUEST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_TableCreation_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_TableCreation_ReasonToJSON(
  object: BigQueryAuditMetadata_TableCreation_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_TableCreation_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_TableCreation_Reason.JOB:
      return "JOB";
    case BigQueryAuditMetadata_TableCreation_Reason.QUERY:
      return "QUERY";
    case BigQueryAuditMetadata_TableCreation_Reason.TABLE_INSERT_REQUEST:
      return "TABLE_INSERT_REQUEST";
    case BigQueryAuditMetadata_TableCreation_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Model creation event. */
export interface BigQueryAuditMetadata_ModelCreation {
  /** Model metadata. */
  model:
    | BigQueryAuditMetadata_Model
    | undefined;
  /** Describes how the model was created. */
  reason: BigQueryAuditMetadata_ModelCreation_Reason;
  /**
   * The URI of the job that created the model.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
}

/** Describes how the model was created. */
export enum BigQueryAuditMetadata_ModelCreation_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** QUERY - Model was created using a DDL query. */
  QUERY = 2,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_ModelCreation_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_ModelCreation_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_ModelCreation_Reason.REASON_UNSPECIFIED;
    case 2:
    case "QUERY":
      return BigQueryAuditMetadata_ModelCreation_Reason.QUERY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_ModelCreation_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_ModelCreation_ReasonToJSON(
  object: BigQueryAuditMetadata_ModelCreation_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_ModelCreation_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_ModelCreation_Reason.QUERY:
      return "QUERY";
    case BigQueryAuditMetadata_ModelCreation_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Routine creation event. */
export interface BigQueryAuditMetadata_RoutineCreation {
  /** Created routine. */
  routine:
    | BigQueryAuditMetadata_Routine
    | undefined;
  /** Describes how the routine was created. */
  reason: BigQueryAuditMetadata_RoutineCreation_Reason;
  /**
   * The URI of the job that created the routine.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
}

/** Describes how the routine was created. */
export enum BigQueryAuditMetadata_RoutineCreation_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** QUERY - Routine was created using a DDL query. */
  QUERY = 1,
  /** ROUTINE_INSERT_REQUEST - Routine was created using the routines.create API. */
  ROUTINE_INSERT_REQUEST = 2,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_RoutineCreation_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_RoutineCreation_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_RoutineCreation_Reason.REASON_UNSPECIFIED;
    case 1:
    case "QUERY":
      return BigQueryAuditMetadata_RoutineCreation_Reason.QUERY;
    case 2:
    case "ROUTINE_INSERT_REQUEST":
      return BigQueryAuditMetadata_RoutineCreation_Reason.ROUTINE_INSERT_REQUEST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_RoutineCreation_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_RoutineCreation_ReasonToJSON(
  object: BigQueryAuditMetadata_RoutineCreation_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_RoutineCreation_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_RoutineCreation_Reason.QUERY:
      return "QUERY";
    case BigQueryAuditMetadata_RoutineCreation_Reason.ROUTINE_INSERT_REQUEST:
      return "ROUTINE_INSERT_REQUEST";
    case BigQueryAuditMetadata_RoutineCreation_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Table data read event. */
export interface BigQueryAuditMetadata_TableDataRead {
  /**
   * List of the accessed fields. Entire list is truncated if the record size
   * exceeds 100K.
   */
  fields: string[];
  /** True if the fields list was truncated. */
  fieldsTruncated: boolean;
  /**
   * List of the referenced policy tags. That is, policy tags attached to the
   * accessed fields or their ancestors.
   * Policy tag resource name is a string of the format:
   * `projects/<project_id>/locations/<location_id>/taxonomies/<taxonomy_id>/policyTags/<policy_tag_id>`
   */
  policyTags: string[];
  /**
   * True if the policy tag list was truncated. At most 100 policy tags can be
   * saved.
   */
  policyTagsTruncated: boolean;
  /** Describes how the table data was read. */
  reason: BigQueryAuditMetadata_TableDataRead_Reason;
  /**
   * The URI of the job that read a table.
   * Present if the reason is JOB but can be redacted for privacy reasons.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
  /**
   * The URI of the read session that read a table.
   * Present if the reason is CREATE_READ_SESSION.
   *
   * Format:
   * `projects/<project_id>/locations/<location>/sessions/<session_id>`.
   */
  sessionName: string;
}

/** Describes how the table data was read. */
export enum BigQueryAuditMetadata_TableDataRead_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** JOB - Table was used as a source table during a BigQuery job. */
  JOB = 1,
  /** TABLEDATA_LIST_REQUEST - Table data was accessed using the tabledata.list API. */
  TABLEDATA_LIST_REQUEST = 2,
  /** GET_QUERY_RESULTS_REQUEST - Table data was accessed using the jobs.getQueryResults API. */
  GET_QUERY_RESULTS_REQUEST = 3,
  /** QUERY_REQUEST - Table data was accessed using the jobs.query RPC. */
  QUERY_REQUEST = 4,
  /** CREATE_READ_SESSION - Table data was accessed using storage.CreateReadSession API. */
  CREATE_READ_SESSION = 5,
  /** MATERIALIZED_VIEW_REFRESH - Table data was accessed during a materialized view refresh. */
  MATERIALIZED_VIEW_REFRESH = 6,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_TableDataRead_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_TableDataRead_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_TableDataRead_Reason.REASON_UNSPECIFIED;
    case 1:
    case "JOB":
      return BigQueryAuditMetadata_TableDataRead_Reason.JOB;
    case 2:
    case "TABLEDATA_LIST_REQUEST":
      return BigQueryAuditMetadata_TableDataRead_Reason.TABLEDATA_LIST_REQUEST;
    case 3:
    case "GET_QUERY_RESULTS_REQUEST":
      return BigQueryAuditMetadata_TableDataRead_Reason.GET_QUERY_RESULTS_REQUEST;
    case 4:
    case "QUERY_REQUEST":
      return BigQueryAuditMetadata_TableDataRead_Reason.QUERY_REQUEST;
    case 5:
    case "CREATE_READ_SESSION":
      return BigQueryAuditMetadata_TableDataRead_Reason.CREATE_READ_SESSION;
    case 6:
    case "MATERIALIZED_VIEW_REFRESH":
      return BigQueryAuditMetadata_TableDataRead_Reason.MATERIALIZED_VIEW_REFRESH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_TableDataRead_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_TableDataRead_ReasonToJSON(
  object: BigQueryAuditMetadata_TableDataRead_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_TableDataRead_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_TableDataRead_Reason.JOB:
      return "JOB";
    case BigQueryAuditMetadata_TableDataRead_Reason.TABLEDATA_LIST_REQUEST:
      return "TABLEDATA_LIST_REQUEST";
    case BigQueryAuditMetadata_TableDataRead_Reason.GET_QUERY_RESULTS_REQUEST:
      return "GET_QUERY_RESULTS_REQUEST";
    case BigQueryAuditMetadata_TableDataRead_Reason.QUERY_REQUEST:
      return "QUERY_REQUEST";
    case BigQueryAuditMetadata_TableDataRead_Reason.CREATE_READ_SESSION:
      return "CREATE_READ_SESSION";
    case BigQueryAuditMetadata_TableDataRead_Reason.MATERIALIZED_VIEW_REFRESH:
      return "MATERIALIZED_VIEW_REFRESH";
    case BigQueryAuditMetadata_TableDataRead_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Table metadata change event. */
export interface BigQueryAuditMetadata_TableChange {
  /** Updated table metadata. */
  table:
    | BigQueryAuditMetadata_Table
    | undefined;
  /** True if the table was truncated. */
  truncated: boolean;
  /** Describes how the table metadata was changed. */
  reason: BigQueryAuditMetadata_TableChange_Reason;
  /**
   * The URI of the job that changed a table.
   * Present if the reason is JOB or QUERY.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
}

/** Describes how the table metadata was changed. */
export enum BigQueryAuditMetadata_TableChange_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** TABLE_UPDATE_REQUEST - Table metadata was updated using the tables.update or tables.patch API. */
  TABLE_UPDATE_REQUEST = 1,
  /** JOB - Table was used as a job destination table. */
  JOB = 2,
  /** QUERY - Table metadata was updated using a DML or DDL query. */
  QUERY = 3,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_TableChange_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_TableChange_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_TableChange_Reason.REASON_UNSPECIFIED;
    case 1:
    case "TABLE_UPDATE_REQUEST":
      return BigQueryAuditMetadata_TableChange_Reason.TABLE_UPDATE_REQUEST;
    case 2:
    case "JOB":
      return BigQueryAuditMetadata_TableChange_Reason.JOB;
    case 3:
    case "QUERY":
      return BigQueryAuditMetadata_TableChange_Reason.QUERY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_TableChange_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_TableChange_ReasonToJSON(
  object: BigQueryAuditMetadata_TableChange_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_TableChange_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_TableChange_Reason.TABLE_UPDATE_REQUEST:
      return "TABLE_UPDATE_REQUEST";
    case BigQueryAuditMetadata_TableChange_Reason.JOB:
      return "JOB";
    case BigQueryAuditMetadata_TableChange_Reason.QUERY:
      return "QUERY";
    case BigQueryAuditMetadata_TableChange_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Model metadata change event. */
export interface BigQueryAuditMetadata_ModelMetadataChange {
  /** Updated model. */
  model:
    | BigQueryAuditMetadata_Model
    | undefined;
  /** Describes how the model metadata was changed. */
  reason: BigQueryAuditMetadata_ModelMetadataChange_Reason;
  /**
   * The URI of the job that changed the model metadata.
   * Present if and only if the reason is QUERY.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
}

/** Describes how the model metadata was changed. */
export enum BigQueryAuditMetadata_ModelMetadataChange_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** MODEL_PATCH_REQUEST - Model metadata was updated using the models.patch API. */
  MODEL_PATCH_REQUEST = 1,
  /** QUERY - Model metadata was updated using a DDL query. */
  QUERY = 2,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_ModelMetadataChange_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_ModelMetadataChange_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_ModelMetadataChange_Reason.REASON_UNSPECIFIED;
    case 1:
    case "MODEL_PATCH_REQUEST":
      return BigQueryAuditMetadata_ModelMetadataChange_Reason.MODEL_PATCH_REQUEST;
    case 2:
    case "QUERY":
      return BigQueryAuditMetadata_ModelMetadataChange_Reason.QUERY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_ModelMetadataChange_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_ModelMetadataChange_ReasonToJSON(
  object: BigQueryAuditMetadata_ModelMetadataChange_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_ModelMetadataChange_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_ModelMetadataChange_Reason.MODEL_PATCH_REQUEST:
      return "MODEL_PATCH_REQUEST";
    case BigQueryAuditMetadata_ModelMetadataChange_Reason.QUERY:
      return "QUERY";
    case BigQueryAuditMetadata_ModelMetadataChange_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Routine change event. */
export interface BigQueryAuditMetadata_RoutineChange {
  /** Updated routine. */
  routine:
    | BigQueryAuditMetadata_Routine
    | undefined;
  /** Describes how the routine was updated. */
  reason: BigQueryAuditMetadata_RoutineChange_Reason;
  /**
   * The URI of the job that updated the routine.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
}

/** Describes how the routine was updated. */
export enum BigQueryAuditMetadata_RoutineChange_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** QUERY - Routine was updated using a DDL query. */
  QUERY = 1,
  /** ROUTINE_UPDATE_REQUEST - Routine was updated using the routines.update or routines.patch API. */
  ROUTINE_UPDATE_REQUEST = 2,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_RoutineChange_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_RoutineChange_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_RoutineChange_Reason.REASON_UNSPECIFIED;
    case 1:
    case "QUERY":
      return BigQueryAuditMetadata_RoutineChange_Reason.QUERY;
    case 2:
    case "ROUTINE_UPDATE_REQUEST":
      return BigQueryAuditMetadata_RoutineChange_Reason.ROUTINE_UPDATE_REQUEST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_RoutineChange_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_RoutineChange_ReasonToJSON(
  object: BigQueryAuditMetadata_RoutineChange_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_RoutineChange_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_RoutineChange_Reason.QUERY:
      return "QUERY";
    case BigQueryAuditMetadata_RoutineChange_Reason.ROUTINE_UPDATE_REQUEST:
      return "ROUTINE_UPDATE_REQUEST";
    case BigQueryAuditMetadata_RoutineChange_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Table data change event. */
export interface BigQueryAuditMetadata_TableDataChange {
  /** Number of deleted rows. */
  deletedRowsCount: Long;
  /** Number of inserted rows. */
  insertedRowsCount: Long;
  /** True if the table was truncated. */
  truncated: boolean;
  /** Describes how the table data was changed. */
  reason: BigQueryAuditMetadata_TableDataChange_Reason;
  /**
   * The URI of the job that changed a table.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
  /**
   * If written from WRITE_API, the name of the stream.
   *
   * Format:
   * `projects/<project_id>/datasets/<dataset_id>/tables/<table_id>/streams/<stream_id>`
   */
  streamName: string;
}

/** Describes how the table data was changed. */
export enum BigQueryAuditMetadata_TableDataChange_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** JOB - Table was used as a job destination table. */
  JOB = 1,
  /** QUERY - Table data was updated using a DML or DDL query. */
  QUERY = 2,
  /** MATERIALIZED_VIEW_REFRESH - Table data was updated during a materialized view refresh. */
  MATERIALIZED_VIEW_REFRESH = 3,
  /** WRITE_API - Table data was added using the Write API. */
  WRITE_API = 4,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_TableDataChange_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_TableDataChange_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_TableDataChange_Reason.REASON_UNSPECIFIED;
    case 1:
    case "JOB":
      return BigQueryAuditMetadata_TableDataChange_Reason.JOB;
    case 2:
    case "QUERY":
      return BigQueryAuditMetadata_TableDataChange_Reason.QUERY;
    case 3:
    case "MATERIALIZED_VIEW_REFRESH":
      return BigQueryAuditMetadata_TableDataChange_Reason.MATERIALIZED_VIEW_REFRESH;
    case 4:
    case "WRITE_API":
      return BigQueryAuditMetadata_TableDataChange_Reason.WRITE_API;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_TableDataChange_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_TableDataChange_ReasonToJSON(
  object: BigQueryAuditMetadata_TableDataChange_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_TableDataChange_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_TableDataChange_Reason.JOB:
      return "JOB";
    case BigQueryAuditMetadata_TableDataChange_Reason.QUERY:
      return "QUERY";
    case BigQueryAuditMetadata_TableDataChange_Reason.MATERIALIZED_VIEW_REFRESH:
      return "MATERIALIZED_VIEW_REFRESH";
    case BigQueryAuditMetadata_TableDataChange_Reason.WRITE_API:
      return "WRITE_API";
    case BigQueryAuditMetadata_TableDataChange_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Model data change event. */
export interface BigQueryAuditMetadata_ModelDataChange {
  /** Describes how the model data was changed. */
  reason: BigQueryAuditMetadata_ModelDataChange_Reason;
  /**
   * The URI of the job that changed the model data.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
}

/** Describes how the model data was changed. */
export enum BigQueryAuditMetadata_ModelDataChange_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** QUERY - Model data was changed using a DDL query. */
  QUERY = 1,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_ModelDataChange_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_ModelDataChange_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_ModelDataChange_Reason.REASON_UNSPECIFIED;
    case 1:
    case "QUERY":
      return BigQueryAuditMetadata_ModelDataChange_Reason.QUERY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_ModelDataChange_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_ModelDataChange_ReasonToJSON(
  object: BigQueryAuditMetadata_ModelDataChange_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_ModelDataChange_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_ModelDataChange_Reason.QUERY:
      return "QUERY";
    case BigQueryAuditMetadata_ModelDataChange_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Model data read event. */
export interface BigQueryAuditMetadata_ModelDataRead {
  /** Describes how the model data was read. */
  reason: BigQueryAuditMetadata_ModelDataRead_Reason;
  /**
   * The URI of the job that read the model data.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
}

/** Describes how the model data was read. */
export enum BigQueryAuditMetadata_ModelDataRead_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** JOB - Model was used as a source model during a BigQuery job. */
  JOB = 1,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_ModelDataRead_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_ModelDataRead_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_ModelDataRead_Reason.REASON_UNSPECIFIED;
    case 1:
    case "JOB":
      return BigQueryAuditMetadata_ModelDataRead_Reason.JOB;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_ModelDataRead_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_ModelDataRead_ReasonToJSON(
  object: BigQueryAuditMetadata_ModelDataRead_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_ModelDataRead_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_ModelDataRead_Reason.JOB:
      return "JOB";
    case BigQueryAuditMetadata_ModelDataRead_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Table deletion event. */
export interface BigQueryAuditMetadata_TableDeletion {
  /** Describes how table was deleted. */
  reason: BigQueryAuditMetadata_TableDeletion_Reason;
  /**
   * The URI of the job that deleted a table.
   * Present if the reason is QUERY.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
}

/** Describes how the table was deleted. */
export enum BigQueryAuditMetadata_TableDeletion_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** TABLE_DELETE_REQUEST - Table was deleted using the tables.delete API. */
  TABLE_DELETE_REQUEST = 2,
  /** EXPIRED - Table expired. */
  EXPIRED = 3,
  /** QUERY - Table deleted using a DDL query. */
  QUERY = 4,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_TableDeletion_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_TableDeletion_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_TableDeletion_Reason.REASON_UNSPECIFIED;
    case 2:
    case "TABLE_DELETE_REQUEST":
      return BigQueryAuditMetadata_TableDeletion_Reason.TABLE_DELETE_REQUEST;
    case 3:
    case "EXPIRED":
      return BigQueryAuditMetadata_TableDeletion_Reason.EXPIRED;
    case 4:
    case "QUERY":
      return BigQueryAuditMetadata_TableDeletion_Reason.QUERY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_TableDeletion_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_TableDeletion_ReasonToJSON(
  object: BigQueryAuditMetadata_TableDeletion_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_TableDeletion_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_TableDeletion_Reason.TABLE_DELETE_REQUEST:
      return "TABLE_DELETE_REQUEST";
    case BigQueryAuditMetadata_TableDeletion_Reason.EXPIRED:
      return "EXPIRED";
    case BigQueryAuditMetadata_TableDeletion_Reason.QUERY:
      return "QUERY";
    case BigQueryAuditMetadata_TableDeletion_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Model deletion event. */
export interface BigQueryAuditMetadata_ModelDeletion {
  /** Describes how the model was deleted. */
  reason: BigQueryAuditMetadata_ModelDeletion_Reason;
  /**
   * The URI of the job that deleted a model.
   * Present if the reason is QUERY.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
}

/** Describes how the model was deleted. */
export enum BigQueryAuditMetadata_ModelDeletion_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** MODEL_DELETE_REQUEST - Model was deleted using the models.delete API. */
  MODEL_DELETE_REQUEST = 1,
  /** EXPIRED - Model expired. */
  EXPIRED = 2,
  /** QUERY - Model was deleted using DDL query. */
  QUERY = 3,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_ModelDeletion_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_ModelDeletion_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_ModelDeletion_Reason.REASON_UNSPECIFIED;
    case 1:
    case "MODEL_DELETE_REQUEST":
      return BigQueryAuditMetadata_ModelDeletion_Reason.MODEL_DELETE_REQUEST;
    case 2:
    case "EXPIRED":
      return BigQueryAuditMetadata_ModelDeletion_Reason.EXPIRED;
    case 3:
    case "QUERY":
      return BigQueryAuditMetadata_ModelDeletion_Reason.QUERY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_ModelDeletion_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_ModelDeletion_ReasonToJSON(
  object: BigQueryAuditMetadata_ModelDeletion_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_ModelDeletion_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_ModelDeletion_Reason.MODEL_DELETE_REQUEST:
      return "MODEL_DELETE_REQUEST";
    case BigQueryAuditMetadata_ModelDeletion_Reason.EXPIRED:
      return "EXPIRED";
    case BigQueryAuditMetadata_ModelDeletion_Reason.QUERY:
      return "QUERY";
    case BigQueryAuditMetadata_ModelDeletion_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Routine deletion event. */
export interface BigQueryAuditMetadata_RoutineDeletion {
  /** Deleted routine. */
  routine:
    | BigQueryAuditMetadata_Routine
    | undefined;
  /** Describes how the routine was deleted. */
  reason: BigQueryAuditMetadata_RoutineDeletion_Reason;
  /**
   * The URI of the job that deleted the routine.
   * Present if the reason is QUERY.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
}

/** Describes how the routine was deleted. */
export enum BigQueryAuditMetadata_RoutineDeletion_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** QUERY - Routine was deleted using DDL query. */
  QUERY = 1,
  /** ROUTINE_DELETE_REQUEST - Routine was deleted using the API. */
  ROUTINE_DELETE_REQUEST = 2,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_RoutineDeletion_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_RoutineDeletion_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_RoutineDeletion_Reason.REASON_UNSPECIFIED;
    case 1:
    case "QUERY":
      return BigQueryAuditMetadata_RoutineDeletion_Reason.QUERY;
    case 2:
    case "ROUTINE_DELETE_REQUEST":
      return BigQueryAuditMetadata_RoutineDeletion_Reason.ROUTINE_DELETE_REQUEST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_RoutineDeletion_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_RoutineDeletion_ReasonToJSON(
  object: BigQueryAuditMetadata_RoutineDeletion_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_RoutineDeletion_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_RoutineDeletion_Reason.QUERY:
      return "QUERY";
    case BigQueryAuditMetadata_RoutineDeletion_Reason.ROUTINE_DELETE_REQUEST:
      return "ROUTINE_DELETE_REQUEST";
    case BigQueryAuditMetadata_RoutineDeletion_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Row access policy creation event. */
export interface BigQueryAuditMetadata_RowAccessPolicyCreation {
  /** The row access policy created by this event. */
  rowAccessPolicy:
    | BigQueryAuditMetadata_RowAccessPolicy
    | undefined;
  /**
   * The URI of the job that created this row access policy.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
}

/** Row access policy change event. */
export interface BigQueryAuditMetadata_RowAccessPolicyChange {
  /** The row access policy that was changed by this event. */
  rowAccessPolicy:
    | BigQueryAuditMetadata_RowAccessPolicy
    | undefined;
  /**
   * The URI of the job that created this row access policy.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
}

/** Row access policy deletion event. */
export interface BigQueryAuditMetadata_RowAccessPolicyDeletion {
  /**
   * The row access policies that were deleted. At present, only populated
   * when a single policy is dropped.
   */
  rowAccessPolicies: BigQueryAuditMetadata_RowAccessPolicy[];
  /**
   * The job that deleted these row access policies.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
  /**
   * This field is set to true when a DROP ALL command has been executed, thus
   * removing all row access policies on the table.
   */
  allRowAccessPoliciesDropped: boolean;
}

/** Unlink linked dataset from its source dataset event */
export interface BigQueryAuditMetadata_UnlinkDataset {
  /**
   * The linked dataset URI which is unlinked from its source.
   *
   * Format: `projects/<project_id>/datasets/<dataset_id>`.
   */
  linkedDataset: string;
  /**
   * The source dataset URI from which the linked dataset is unlinked.
   *
   * Format: `projects/<project_id>/datasets/<dataset_id>`.
   */
  sourceDataset: string;
  /** Reason for unlinking linked dataset */
  reason: BigQueryAuditMetadata_UnlinkDataset_Reason;
}

/** Describes how the unlinking operation occurred. */
export enum BigQueryAuditMetadata_UnlinkDataset_Reason {
  /** REASON_UNSPECIFIED - Unknown. */
  REASON_UNSPECIFIED = 0,
  /** UNLINK_API - Linked dataset unlinked via API */
  UNLINK_API = 1,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_UnlinkDataset_ReasonFromJSON(
  object: any,
): BigQueryAuditMetadata_UnlinkDataset_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return BigQueryAuditMetadata_UnlinkDataset_Reason.REASON_UNSPECIFIED;
    case 1:
    case "UNLINK_API":
      return BigQueryAuditMetadata_UnlinkDataset_Reason.UNLINK_API;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_UnlinkDataset_Reason.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_UnlinkDataset_ReasonToJSON(
  object: BigQueryAuditMetadata_UnlinkDataset_Reason,
): string {
  switch (object) {
    case BigQueryAuditMetadata_UnlinkDataset_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case BigQueryAuditMetadata_UnlinkDataset_Reason.UNLINK_API:
      return "UNLINK_API";
    case BigQueryAuditMetadata_UnlinkDataset_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** BigQuery job. */
export interface BigQueryAuditMetadata_Job {
  /**
   * Job URI.
   *
   * Format: `projects/<project_id>/jobs/<job_id>`.
   */
  jobName: string;
  /** Job configuration. */
  jobConfig:
    | BigQueryAuditMetadata_JobConfig
    | undefined;
  /** Job status. */
  jobStatus:
    | BigQueryAuditMetadata_JobStatus
    | undefined;
  /** Job statistics. */
  jobStats: BigQueryAuditMetadata_JobStats | undefined;
}

/**
 * Job configuration.
 * See the [Jobs](https://cloud.google.com/bigquery/docs/reference/v2/jobs)
 * API resource for more details on individual fields.
 */
export interface BigQueryAuditMetadata_JobConfig {
  /** Job type. */
  type: BigQueryAuditMetadata_JobConfig_Type;
  /** Query job information. */
  queryConfig?:
    | BigQueryAuditMetadata_JobConfig_Query
    | undefined;
  /** Load job information. */
  loadConfig?:
    | BigQueryAuditMetadata_JobConfig_Load
    | undefined;
  /** Extract job information. */
  extractConfig?:
    | BigQueryAuditMetadata_JobConfig_Extract
    | undefined;
  /** TableCopy job information. */
  tableCopyConfig?:
    | BigQueryAuditMetadata_JobConfig_TableCopy
    | undefined;
  /** Labels provided for the job. */
  labels: { [key: string]: string };
}

/** Job type. */
export enum BigQueryAuditMetadata_JobConfig_Type {
  /** TYPE_UNSPECIFIED - Unknown. */
  TYPE_UNSPECIFIED = 0,
  /** QUERY - Query job. */
  QUERY = 1,
  /** COPY - Table copy job. */
  COPY = 2,
  /** EXPORT - Export (extract) job. */
  EXPORT = 3,
  /** IMPORT - Import (load) job. */
  IMPORT = 4,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_JobConfig_TypeFromJSON(object: any): BigQueryAuditMetadata_JobConfig_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return BigQueryAuditMetadata_JobConfig_Type.TYPE_UNSPECIFIED;
    case 1:
    case "QUERY":
      return BigQueryAuditMetadata_JobConfig_Type.QUERY;
    case 2:
    case "COPY":
      return BigQueryAuditMetadata_JobConfig_Type.COPY;
    case 3:
    case "EXPORT":
      return BigQueryAuditMetadata_JobConfig_Type.EXPORT;
    case 4:
    case "IMPORT":
      return BigQueryAuditMetadata_JobConfig_Type.IMPORT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_JobConfig_Type.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_JobConfig_TypeToJSON(object: BigQueryAuditMetadata_JobConfig_Type): string {
  switch (object) {
    case BigQueryAuditMetadata_JobConfig_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case BigQueryAuditMetadata_JobConfig_Type.QUERY:
      return "QUERY";
    case BigQueryAuditMetadata_JobConfig_Type.COPY:
      return "COPY";
    case BigQueryAuditMetadata_JobConfig_Type.EXPORT:
      return "EXPORT";
    case BigQueryAuditMetadata_JobConfig_Type.IMPORT:
      return "IMPORT";
    case BigQueryAuditMetadata_JobConfig_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Query job configuration. */
export interface BigQueryAuditMetadata_JobConfig_Query {
  /** The SQL query to run. Truncated if exceeds 50K. */
  query: string;
  /** True if the query field was truncated. */
  queryTruncated: boolean;
  /** The destination table for the query results. */
  destinationTable: string;
  /** Destination table create disposition. */
  createDisposition: BigQueryAuditMetadata_CreateDisposition;
  /** Destination table write disposition. */
  writeDisposition: BigQueryAuditMetadata_WriteDisposition;
  /** Default dataset for the query. */
  defaultDataset: string;
  /** External data sources used in the query. */
  tableDefinitions: BigQueryAuditMetadata_TableDefinition[];
  /** Priority given to the query. */
  priority: BigQueryAuditMetadata_JobConfig_Query_Priority;
  /**
   * Result table encryption information. Set when non-default encryption is
   * used.
   */
  destinationTableEncryption:
    | BigQueryAuditMetadata_EncryptionInfo
    | undefined;
  /** Type of the query. */
  statementType: BigQueryAuditMetadata_QueryStatementType;
}

/** Priority given to the query. */
export enum BigQueryAuditMetadata_JobConfig_Query_Priority {
  /** PRIORITY_UNSPECIFIED - Unknown. */
  PRIORITY_UNSPECIFIED = 0,
  /** QUERY_INTERACTIVE - Interactive query. */
  QUERY_INTERACTIVE = 1,
  /** QUERY_BATCH - Batch query. */
  QUERY_BATCH = 2,
  UNRECOGNIZED = -1,
}

export function bigQueryAuditMetadata_JobConfig_Query_PriorityFromJSON(
  object: any,
): BigQueryAuditMetadata_JobConfig_Query_Priority {
  switch (object) {
    case 0:
    case "PRIORITY_UNSPECIFIED":
      return BigQueryAuditMetadata_JobConfig_Query_Priority.PRIORITY_UNSPECIFIED;
    case 1:
    case "QUERY_INTERACTIVE":
      return BigQueryAuditMetadata_JobConfig_Query_Priority.QUERY_INTERACTIVE;
    case 2:
    case "QUERY_BATCH":
      return BigQueryAuditMetadata_JobConfig_Query_Priority.QUERY_BATCH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BigQueryAuditMetadata_JobConfig_Query_Priority.UNRECOGNIZED;
  }
}

export function bigQueryAuditMetadata_JobConfig_Query_PriorityToJSON(
  object: BigQueryAuditMetadata_JobConfig_Query_Priority,
): string {
  switch (object) {
    case BigQueryAuditMetadata_JobConfig_Query_Priority.PRIORITY_UNSPECIFIED:
      return "PRIORITY_UNSPECIFIED";
    case BigQueryAuditMetadata_JobConfig_Query_Priority.QUERY_INTERACTIVE:
      return "QUERY_INTERACTIVE";
    case BigQueryAuditMetadata_JobConfig_Query_Priority.QUERY_BATCH:
      return "QUERY_BATCH";
    case BigQueryAuditMetadata_JobConfig_Query_Priority.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Load job configuration. */
export interface BigQueryAuditMetadata_JobConfig_Load {
  /**
   * URIs for the data to be imported. Entire list is truncated if exceeds
   * 40K.
   */
  sourceUris: string[];
  /** True if the source_URIs field was truncated. */
  sourceUrisTruncated: boolean;
  /**
   * The table schema in JSON format. Entire field is truncated if exceeds
   * 40K.
   */
  schemaJson: string;
  /** True if the schema_json field was truncated. */
  schemaJsonTruncated: boolean;
  /** The destination table for the import. */
  destinationTable: string;
  /** Destination table create disposition. */
  createDisposition: BigQueryAuditMetadata_CreateDisposition;
  /** Destination table write disposition. */
  writeDisposition: BigQueryAuditMetadata_WriteDisposition;
  /**
   * Result table encryption information. Set when non-default encryption is
   * used.
   */
  destinationTableEncryption: BigQueryAuditMetadata_EncryptionInfo | undefined;
}

/** Extract job configuration. */
export interface BigQueryAuditMetadata_JobConfig_Extract {
  /**
   * URIs where extracted data should be written. Entire list is truncated
   * if exceeds 50K.
   */
  destinationUris: string[];
  /** True if the destination_URIs field was truncated. */
  destinationUrisTruncated: boolean;
  /** The source table. */
  sourceTable?:
    | string
    | undefined;
  /** The source model. */
  sourceModel?: string | undefined;
}

/** Table copy job configuration. */
export interface BigQueryAuditMetadata_JobConfig_TableCopy {
  /** Source tables. Entire list is truncated if exceeds 50K. */
  sourceTables: string[];
  /** True if the source_tables field was truncated. */
  sourceTablesTruncated: boolean;
  /** Destination table. */
  destinationTable: string;
  /** Destination table create disposition. */
  createDisposition: BigQueryAuditMetadata_CreateDisposition;
  /** Destination table write disposition. */
  writeDisposition: BigQueryAuditMetadata_WriteDisposition;
  /**
   * Result table encryption information. Set when non-default encryption is
   * used.
   */
  destinationTableEncryption:
    | BigQueryAuditMetadata_EncryptionInfo
    | undefined;
  /** Supported operation types in the table copy job. */
  operationType: BigQueryAuditMetadata_OperationType;
  /**
   * Expiration time set on the destination table. Expired tables will be
   * deleted and their storage reclaimed.
   */
  destinationExpirationTime: Date | undefined;
}

export interface BigQueryAuditMetadata_JobConfig_LabelsEntry {
  key: string;
  value: string;
}

/** Definition of an external data source used in a query. */
export interface BigQueryAuditMetadata_TableDefinition {
  /** Name of the table, used in queries. */
  name: string;
  /** URIs for the data. */
  sourceUris: string[];
}

/** Status of a job. */
export interface BigQueryAuditMetadata_JobStatus {
  /** State of the job. */
  jobState: BigQueryAuditMetadata_JobState;
  /** Job error, if the job failed. */
  errorResult:
    | Status
    | undefined;
  /**
   * Errors encountered during the running of the job. Does not necessarily
   * mean that the job has completed or was unsuccessful.
   */
  errors: Status[];
}

/** Job statistics. */
export interface BigQueryAuditMetadata_JobStats {
  /** Job creation time. */
  createTime:
    | Date
    | undefined;
  /** Job execution start time. */
  startTime:
    | Date
    | undefined;
  /** Job completion time. */
  endTime:
    | Date
    | undefined;
  /** Query job statistics. */
  queryStats?:
    | BigQueryAuditMetadata_JobStats_Query
    | undefined;
  /** Load job statistics. */
  loadStats?:
    | BigQueryAuditMetadata_JobStats_Load
    | undefined;
  /** Extract job statistics. */
  extractStats?:
    | BigQueryAuditMetadata_JobStats_Extract
    | undefined;
  /** The total number of slot-ms consumed by the query job. */
  totalSlotMs: Long;
  /**
   * Reservation usage attributed from each tier of a reservation hierarchy.
   * This field reported misleading information and will no longer be
   * populated. Aggregate usage of all jobs submitted to a reservation
   * should provide a more reliable indicator of reservation imbalance.
   *
   * @deprecated
   */
  reservationUsage: BigQueryAuditMetadata_JobStats_ReservationResourceUsage[];
  /** Reservation name or "unreserved" for on-demand resource usage. */
  reservation: string;
  /** Parent job name. Only present for child jobs. */
  parentJobName: string;
}

/** Query job statistics. */
export interface BigQueryAuditMetadata_JobStats_Query {
  /** Total bytes processed by the query job. */
  totalProcessedBytes: Long;
  /** Total bytes billed by the query job. */
  totalBilledBytes: Long;
  /** The tier assigned by the CPU-based billing. */
  billingTier: number;
  /** Tables accessed by the query job. */
  referencedTables: string[];
  /** Views accessed by the query job. */
  referencedViews: string[];
  /** Routines accessed by the query job. */
  referencedRoutines: string[];
  /** Number of output rows produced by the query job. */
  outputRowCount: Long;
  /** True if the query job results were read from the query cache. */
  cacheHit: boolean;
}

/** Load job statistics. */
export interface BigQueryAuditMetadata_JobStats_Load {
  /** Total bytes loaded by the import job. */
  totalOutputBytes: Long;
}

/** Extract job statistics. */
export interface BigQueryAuditMetadata_JobStats_Extract {
  /** Total bytes exported by the extract job. */
  totalInputBytes: Long;
}

/** Job resource usage breakdown by reservation. */
export interface BigQueryAuditMetadata_JobStats_ReservationResourceUsage {
  /** Reservation name or "unreserved" for on-demand resources usage. */
  name: string;
  /** Total slot milliseconds used by the reservation for a particular job. */
  slotMs: Long;
}

/** BigQuery table. */
export interface BigQueryAuditMetadata_Table {
  /**
   * Table URI.
   *
   * Format: `projects/<project_id>/datasets/<dataset_id>/tables/<table_id>`.
   */
  tableName: string;
  /** User-provided metadata for the table. */
  tableInfo:
    | BigQueryAuditMetadata_EntityInfo
    | undefined;
  /**
   * A JSON representation of the table's schema. Entire field is truncated
   * if exceeds 40K.
   */
  schemaJson: string;
  /** True if the schema_json field was truncated. */
  schemaJsonTruncated: boolean;
  /** View metadata. Only present for views. */
  view:
    | BigQueryAuditMetadata_TableViewDefinition
    | undefined;
  /** Table expiration time. */
  expireTime:
    | Date
    | undefined;
  /** The table creation time. */
  createTime:
    | Date
    | undefined;
  /** The last time metadata update time. */
  updateTime:
    | Date
    | undefined;
  /** The last table truncation time. */
  truncateTime:
    | Date
    | undefined;
  /** Table encryption information. Set when non-default encryption is used. */
  encryption: BigQueryAuditMetadata_EncryptionInfo | undefined;
}

/** Trained BigQuery ML model. */
export interface BigQueryAuditMetadata_Model {
  /**
   * Model URI.
   *
   * Format: `projects/<project_id>/datasets/<dataset_id>/models/<model_id>`.
   */
  modelName: string;
  /** User-provided metadata for the model. */
  modelInfo:
    | BigQueryAuditMetadata_EntityInfo
    | undefined;
  /** Model expiration time. */
  expireTime:
    | Date
    | undefined;
  /** Model creation time. */
  createTime:
    | Date
    | undefined;
  /** Model last update time. */
  updateTime:
    | Date
    | undefined;
  /** Model encryption information. Set when non-default encryption is used. */
  encryption: BigQueryAuditMetadata_EncryptionInfo | undefined;
}

/** User Defined Function (UDF) or Stored Procedure. */
export interface BigQueryAuditMetadata_Routine {
  /**
   * Routine URI.
   *
   * Format:
   * `projects/<project_id>/datasets/<dataset_id>/routines/<routine_id>`.
   */
  routineName: string;
  /** Routine creation time. */
  createTime:
    | Date
    | undefined;
  /** Routine last update time. */
  updateTime: Date | undefined;
}

/** User-provided metadata for an entity, for e.g. dataset, table or model. */
export interface BigQueryAuditMetadata_EntityInfo {
  /** A short name for the entity. */
  friendlyName: string;
  /** A long description for the entity. */
  description: string;
  /** Labels provided for the entity. */
  labels: { [key: string]: string };
}

export interface BigQueryAuditMetadata_EntityInfo_LabelsEntry {
  key: string;
  value: string;
}

/** View definition. */
export interface BigQueryAuditMetadata_TableViewDefinition {
  /** SQL query defining the view. Truncated if exceeds 40K. */
  query: string;
  /** True if the schema_json field was truncated. */
  queryTruncated: boolean;
}

/** BigQuery dataset. */
export interface BigQueryAuditMetadata_Dataset {
  /**
   * Dataset URI.
   *
   * Format: `projects/<project_id>/datasets/<dataset_id>`.
   */
  datasetName: string;
  /** User-provided metadata for the dataset. */
  datasetInfo:
    | BigQueryAuditMetadata_EntityInfo
    | undefined;
  /** Dataset creation time. */
  createTime:
    | Date
    | undefined;
  /** Dataset metadata last update time. */
  updateTime:
    | Date
    | undefined;
  /** The access control list for the dataset. */
  acl:
    | BigQueryAuditMetadata_BigQueryAcl
    | undefined;
  /** Default expiration time for tables in the dataset. */
  defaultTableExpireDuration:
    | Duration
    | undefined;
  /** Default encryption for tables in the dataset. */
  defaultEncryption:
    | BigQueryAuditMetadata_EncryptionInfo
    | undefined;
  /** Default collation for the dataset. */
  defaultCollation: string;
}

/** An access control list. */
export interface BigQueryAuditMetadata_BigQueryAcl {
  /** IAM policy for the resource. */
  policy:
    | Policy
    | undefined;
  /**
   * List of authorized views for a dataset.
   *
   * Format: `projects/<project_id>/datasets/<dataset_id>/tables/<view_id>`.
   */
  authorizedViews: string[];
}

/** Encryption properties for a table or a job */
export interface BigQueryAuditMetadata_EncryptionInfo {
  /**
   * Cloud kms key identifier.
   *
   * Format:
   * `projects/<project_id>/locations/<location>/keyRings/<key_ring_name>/cryptoKeys/<key_name>`
   */
  kmsKeyName: string;
}

/** BigQuery row access policy. */
export interface BigQueryAuditMetadata_RowAccessPolicy {
  /**
   * Row access policy URI.
   *
   * Format:
   * `projects/<project_id>/datasets/<dataset_id>/tables/<table_id>/rowAccessPolicies/<row_access_policy_id>`
   */
  rowAccessPolicyName: string;
}

/** First party (Google) application specific request metadata. */
export interface BigQueryAuditMetadata_FirstPartyAppMetadata {
  /** Google Sheets metadata. */
  sheetsMetadata?: BigQueryAuditMetadata_SheetsMetadata | undefined;
}

/** Google Sheets specific request metadata. */
export interface BigQueryAuditMetadata_SheetsMetadata {
  /** The ID of the spreadsheet from which the request is sent. */
  docId: string;
}

function createBaseBigQueryAuditMetadata(): BigQueryAuditMetadata {
  return {
    jobInsertion: undefined,
    jobChange: undefined,
    jobDeletion: undefined,
    datasetCreation: undefined,
    datasetChange: undefined,
    datasetDeletion: undefined,
    tableCreation: undefined,
    tableChange: undefined,
    tableDeletion: undefined,
    tableDataRead: undefined,
    tableDataChange: undefined,
    modelDeletion: undefined,
    modelCreation: undefined,
    modelMetadataChange: undefined,
    modelDataChange: undefined,
    modelDataRead: undefined,
    routineCreation: undefined,
    routineChange: undefined,
    routineDeletion: undefined,
    rowAccessPolicyCreation: undefined,
    rowAccessPolicyChange: undefined,
    rowAccessPolicyDeletion: undefined,
    unlinkDataset: undefined,
    firstPartyAppMetadata: undefined,
  };
}

export const BigQueryAuditMetadata: MessageFns<BigQueryAuditMetadata> = {
  encode(message: BigQueryAuditMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobInsertion !== undefined) {
      BigQueryAuditMetadata_JobInsertion.encode(message.jobInsertion, writer.uint32(10).fork()).join();
    }
    if (message.jobChange !== undefined) {
      BigQueryAuditMetadata_JobChange.encode(message.jobChange, writer.uint32(18).fork()).join();
    }
    if (message.jobDeletion !== undefined) {
      BigQueryAuditMetadata_JobDeletion.encode(message.jobDeletion, writer.uint32(186).fork()).join();
    }
    if (message.datasetCreation !== undefined) {
      BigQueryAuditMetadata_DatasetCreation.encode(message.datasetCreation, writer.uint32(26).fork()).join();
    }
    if (message.datasetChange !== undefined) {
      BigQueryAuditMetadata_DatasetChange.encode(message.datasetChange, writer.uint32(34).fork()).join();
    }
    if (message.datasetDeletion !== undefined) {
      BigQueryAuditMetadata_DatasetDeletion.encode(message.datasetDeletion, writer.uint32(42).fork()).join();
    }
    if (message.tableCreation !== undefined) {
      BigQueryAuditMetadata_TableCreation.encode(message.tableCreation, writer.uint32(50).fork()).join();
    }
    if (message.tableChange !== undefined) {
      BigQueryAuditMetadata_TableChange.encode(message.tableChange, writer.uint32(66).fork()).join();
    }
    if (message.tableDeletion !== undefined) {
      BigQueryAuditMetadata_TableDeletion.encode(message.tableDeletion, writer.uint32(74).fork()).join();
    }
    if (message.tableDataRead !== undefined) {
      BigQueryAuditMetadata_TableDataRead.encode(message.tableDataRead, writer.uint32(82).fork()).join();
    }
    if (message.tableDataChange !== undefined) {
      BigQueryAuditMetadata_TableDataChange.encode(message.tableDataChange, writer.uint32(90).fork()).join();
    }
    if (message.modelDeletion !== undefined) {
      BigQueryAuditMetadata_ModelDeletion.encode(message.modelDeletion, writer.uint32(98).fork()).join();
    }
    if (message.modelCreation !== undefined) {
      BigQueryAuditMetadata_ModelCreation.encode(message.modelCreation, writer.uint32(106).fork()).join();
    }
    if (message.modelMetadataChange !== undefined) {
      BigQueryAuditMetadata_ModelMetadataChange.encode(message.modelMetadataChange, writer.uint32(114).fork()).join();
    }
    if (message.modelDataChange !== undefined) {
      BigQueryAuditMetadata_ModelDataChange.encode(message.modelDataChange, writer.uint32(122).fork()).join();
    }
    if (message.modelDataRead !== undefined) {
      BigQueryAuditMetadata_ModelDataRead.encode(message.modelDataRead, writer.uint32(154).fork()).join();
    }
    if (message.routineCreation !== undefined) {
      BigQueryAuditMetadata_RoutineCreation.encode(message.routineCreation, writer.uint32(130).fork()).join();
    }
    if (message.routineChange !== undefined) {
      BigQueryAuditMetadata_RoutineChange.encode(message.routineChange, writer.uint32(138).fork()).join();
    }
    if (message.routineDeletion !== undefined) {
      BigQueryAuditMetadata_RoutineDeletion.encode(message.routineDeletion, writer.uint32(146).fork()).join();
    }
    if (message.rowAccessPolicyCreation !== undefined) {
      BigQueryAuditMetadata_RowAccessPolicyCreation.encode(message.rowAccessPolicyCreation, writer.uint32(162).fork())
        .join();
    }
    if (message.rowAccessPolicyChange !== undefined) {
      BigQueryAuditMetadata_RowAccessPolicyChange.encode(message.rowAccessPolicyChange, writer.uint32(170).fork())
        .join();
    }
    if (message.rowAccessPolicyDeletion !== undefined) {
      BigQueryAuditMetadata_RowAccessPolicyDeletion.encode(message.rowAccessPolicyDeletion, writer.uint32(178).fork())
        .join();
    }
    if (message.unlinkDataset !== undefined) {
      BigQueryAuditMetadata_UnlinkDataset.encode(message.unlinkDataset, writer.uint32(202).fork()).join();
    }
    if (message.firstPartyAppMetadata !== undefined) {
      BigQueryAuditMetadata_FirstPartyAppMetadata.encode(message.firstPartyAppMetadata, writer.uint32(194).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jobInsertion = BigQueryAuditMetadata_JobInsertion.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jobChange = BigQueryAuditMetadata_JobChange.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.jobDeletion = BigQueryAuditMetadata_JobDeletion.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.datasetCreation = BigQueryAuditMetadata_DatasetCreation.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.datasetChange = BigQueryAuditMetadata_DatasetChange.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.datasetDeletion = BigQueryAuditMetadata_DatasetDeletion.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.tableCreation = BigQueryAuditMetadata_TableCreation.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.tableChange = BigQueryAuditMetadata_TableChange.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.tableDeletion = BigQueryAuditMetadata_TableDeletion.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.tableDataRead = BigQueryAuditMetadata_TableDataRead.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.tableDataChange = BigQueryAuditMetadata_TableDataChange.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.modelDeletion = BigQueryAuditMetadata_ModelDeletion.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.modelCreation = BigQueryAuditMetadata_ModelCreation.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.modelMetadataChange = BigQueryAuditMetadata_ModelMetadataChange.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.modelDataChange = BigQueryAuditMetadata_ModelDataChange.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.modelDataRead = BigQueryAuditMetadata_ModelDataRead.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.routineCreation = BigQueryAuditMetadata_RoutineCreation.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.routineChange = BigQueryAuditMetadata_RoutineChange.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.routineDeletion = BigQueryAuditMetadata_RoutineDeletion.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.rowAccessPolicyCreation = BigQueryAuditMetadata_RowAccessPolicyCreation.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.rowAccessPolicyChange = BigQueryAuditMetadata_RowAccessPolicyChange.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.rowAccessPolicyDeletion = BigQueryAuditMetadata_RowAccessPolicyDeletion.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.unlinkDataset = BigQueryAuditMetadata_UnlinkDataset.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.firstPartyAppMetadata = BigQueryAuditMetadata_FirstPartyAppMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata {
    return {
      jobInsertion: isSet(object.jobInsertion)
        ? BigQueryAuditMetadata_JobInsertion.fromJSON(object.jobInsertion)
        : undefined,
      jobChange: isSet(object.jobChange) ? BigQueryAuditMetadata_JobChange.fromJSON(object.jobChange) : undefined,
      jobDeletion: isSet(object.jobDeletion)
        ? BigQueryAuditMetadata_JobDeletion.fromJSON(object.jobDeletion)
        : undefined,
      datasetCreation: isSet(object.datasetCreation)
        ? BigQueryAuditMetadata_DatasetCreation.fromJSON(object.datasetCreation)
        : undefined,
      datasetChange: isSet(object.datasetChange)
        ? BigQueryAuditMetadata_DatasetChange.fromJSON(object.datasetChange)
        : undefined,
      datasetDeletion: isSet(object.datasetDeletion)
        ? BigQueryAuditMetadata_DatasetDeletion.fromJSON(object.datasetDeletion)
        : undefined,
      tableCreation: isSet(object.tableCreation)
        ? BigQueryAuditMetadata_TableCreation.fromJSON(object.tableCreation)
        : undefined,
      tableChange: isSet(object.tableChange)
        ? BigQueryAuditMetadata_TableChange.fromJSON(object.tableChange)
        : undefined,
      tableDeletion: isSet(object.tableDeletion)
        ? BigQueryAuditMetadata_TableDeletion.fromJSON(object.tableDeletion)
        : undefined,
      tableDataRead: isSet(object.tableDataRead)
        ? BigQueryAuditMetadata_TableDataRead.fromJSON(object.tableDataRead)
        : undefined,
      tableDataChange: isSet(object.tableDataChange)
        ? BigQueryAuditMetadata_TableDataChange.fromJSON(object.tableDataChange)
        : undefined,
      modelDeletion: isSet(object.modelDeletion)
        ? BigQueryAuditMetadata_ModelDeletion.fromJSON(object.modelDeletion)
        : undefined,
      modelCreation: isSet(object.modelCreation)
        ? BigQueryAuditMetadata_ModelCreation.fromJSON(object.modelCreation)
        : undefined,
      modelMetadataChange: isSet(object.modelMetadataChange)
        ? BigQueryAuditMetadata_ModelMetadataChange.fromJSON(object.modelMetadataChange)
        : undefined,
      modelDataChange: isSet(object.modelDataChange)
        ? BigQueryAuditMetadata_ModelDataChange.fromJSON(object.modelDataChange)
        : undefined,
      modelDataRead: isSet(object.modelDataRead)
        ? BigQueryAuditMetadata_ModelDataRead.fromJSON(object.modelDataRead)
        : undefined,
      routineCreation: isSet(object.routineCreation)
        ? BigQueryAuditMetadata_RoutineCreation.fromJSON(object.routineCreation)
        : undefined,
      routineChange: isSet(object.routineChange)
        ? BigQueryAuditMetadata_RoutineChange.fromJSON(object.routineChange)
        : undefined,
      routineDeletion: isSet(object.routineDeletion)
        ? BigQueryAuditMetadata_RoutineDeletion.fromJSON(object.routineDeletion)
        : undefined,
      rowAccessPolicyCreation: isSet(object.rowAccessPolicyCreation)
        ? BigQueryAuditMetadata_RowAccessPolicyCreation.fromJSON(object.rowAccessPolicyCreation)
        : undefined,
      rowAccessPolicyChange: isSet(object.rowAccessPolicyChange)
        ? BigQueryAuditMetadata_RowAccessPolicyChange.fromJSON(object.rowAccessPolicyChange)
        : undefined,
      rowAccessPolicyDeletion: isSet(object.rowAccessPolicyDeletion)
        ? BigQueryAuditMetadata_RowAccessPolicyDeletion.fromJSON(object.rowAccessPolicyDeletion)
        : undefined,
      unlinkDataset: isSet(object.unlinkDataset)
        ? BigQueryAuditMetadata_UnlinkDataset.fromJSON(object.unlinkDataset)
        : undefined,
      firstPartyAppMetadata: isSet(object.firstPartyAppMetadata)
        ? BigQueryAuditMetadata_FirstPartyAppMetadata.fromJSON(object.firstPartyAppMetadata)
        : undefined,
    };
  },

  toJSON(message: BigQueryAuditMetadata): unknown {
    const obj: any = {};
    if (message.jobInsertion !== undefined) {
      obj.jobInsertion = BigQueryAuditMetadata_JobInsertion.toJSON(message.jobInsertion);
    }
    if (message.jobChange !== undefined) {
      obj.jobChange = BigQueryAuditMetadata_JobChange.toJSON(message.jobChange);
    }
    if (message.jobDeletion !== undefined) {
      obj.jobDeletion = BigQueryAuditMetadata_JobDeletion.toJSON(message.jobDeletion);
    }
    if (message.datasetCreation !== undefined) {
      obj.datasetCreation = BigQueryAuditMetadata_DatasetCreation.toJSON(message.datasetCreation);
    }
    if (message.datasetChange !== undefined) {
      obj.datasetChange = BigQueryAuditMetadata_DatasetChange.toJSON(message.datasetChange);
    }
    if (message.datasetDeletion !== undefined) {
      obj.datasetDeletion = BigQueryAuditMetadata_DatasetDeletion.toJSON(message.datasetDeletion);
    }
    if (message.tableCreation !== undefined) {
      obj.tableCreation = BigQueryAuditMetadata_TableCreation.toJSON(message.tableCreation);
    }
    if (message.tableChange !== undefined) {
      obj.tableChange = BigQueryAuditMetadata_TableChange.toJSON(message.tableChange);
    }
    if (message.tableDeletion !== undefined) {
      obj.tableDeletion = BigQueryAuditMetadata_TableDeletion.toJSON(message.tableDeletion);
    }
    if (message.tableDataRead !== undefined) {
      obj.tableDataRead = BigQueryAuditMetadata_TableDataRead.toJSON(message.tableDataRead);
    }
    if (message.tableDataChange !== undefined) {
      obj.tableDataChange = BigQueryAuditMetadata_TableDataChange.toJSON(message.tableDataChange);
    }
    if (message.modelDeletion !== undefined) {
      obj.modelDeletion = BigQueryAuditMetadata_ModelDeletion.toJSON(message.modelDeletion);
    }
    if (message.modelCreation !== undefined) {
      obj.modelCreation = BigQueryAuditMetadata_ModelCreation.toJSON(message.modelCreation);
    }
    if (message.modelMetadataChange !== undefined) {
      obj.modelMetadataChange = BigQueryAuditMetadata_ModelMetadataChange.toJSON(message.modelMetadataChange);
    }
    if (message.modelDataChange !== undefined) {
      obj.modelDataChange = BigQueryAuditMetadata_ModelDataChange.toJSON(message.modelDataChange);
    }
    if (message.modelDataRead !== undefined) {
      obj.modelDataRead = BigQueryAuditMetadata_ModelDataRead.toJSON(message.modelDataRead);
    }
    if (message.routineCreation !== undefined) {
      obj.routineCreation = BigQueryAuditMetadata_RoutineCreation.toJSON(message.routineCreation);
    }
    if (message.routineChange !== undefined) {
      obj.routineChange = BigQueryAuditMetadata_RoutineChange.toJSON(message.routineChange);
    }
    if (message.routineDeletion !== undefined) {
      obj.routineDeletion = BigQueryAuditMetadata_RoutineDeletion.toJSON(message.routineDeletion);
    }
    if (message.rowAccessPolicyCreation !== undefined) {
      obj.rowAccessPolicyCreation = BigQueryAuditMetadata_RowAccessPolicyCreation.toJSON(
        message.rowAccessPolicyCreation,
      );
    }
    if (message.rowAccessPolicyChange !== undefined) {
      obj.rowAccessPolicyChange = BigQueryAuditMetadata_RowAccessPolicyChange.toJSON(message.rowAccessPolicyChange);
    }
    if (message.rowAccessPolicyDeletion !== undefined) {
      obj.rowAccessPolicyDeletion = BigQueryAuditMetadata_RowAccessPolicyDeletion.toJSON(
        message.rowAccessPolicyDeletion,
      );
    }
    if (message.unlinkDataset !== undefined) {
      obj.unlinkDataset = BigQueryAuditMetadata_UnlinkDataset.toJSON(message.unlinkDataset);
    }
    if (message.firstPartyAppMetadata !== undefined) {
      obj.firstPartyAppMetadata = BigQueryAuditMetadata_FirstPartyAppMetadata.toJSON(message.firstPartyAppMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata>): BigQueryAuditMetadata {
    return BigQueryAuditMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata>): BigQueryAuditMetadata {
    const message = createBaseBigQueryAuditMetadata();
    message.jobInsertion = (object.jobInsertion !== undefined && object.jobInsertion !== null)
      ? BigQueryAuditMetadata_JobInsertion.fromPartial(object.jobInsertion)
      : undefined;
    message.jobChange = (object.jobChange !== undefined && object.jobChange !== null)
      ? BigQueryAuditMetadata_JobChange.fromPartial(object.jobChange)
      : undefined;
    message.jobDeletion = (object.jobDeletion !== undefined && object.jobDeletion !== null)
      ? BigQueryAuditMetadata_JobDeletion.fromPartial(object.jobDeletion)
      : undefined;
    message.datasetCreation = (object.datasetCreation !== undefined && object.datasetCreation !== null)
      ? BigQueryAuditMetadata_DatasetCreation.fromPartial(object.datasetCreation)
      : undefined;
    message.datasetChange = (object.datasetChange !== undefined && object.datasetChange !== null)
      ? BigQueryAuditMetadata_DatasetChange.fromPartial(object.datasetChange)
      : undefined;
    message.datasetDeletion = (object.datasetDeletion !== undefined && object.datasetDeletion !== null)
      ? BigQueryAuditMetadata_DatasetDeletion.fromPartial(object.datasetDeletion)
      : undefined;
    message.tableCreation = (object.tableCreation !== undefined && object.tableCreation !== null)
      ? BigQueryAuditMetadata_TableCreation.fromPartial(object.tableCreation)
      : undefined;
    message.tableChange = (object.tableChange !== undefined && object.tableChange !== null)
      ? BigQueryAuditMetadata_TableChange.fromPartial(object.tableChange)
      : undefined;
    message.tableDeletion = (object.tableDeletion !== undefined && object.tableDeletion !== null)
      ? BigQueryAuditMetadata_TableDeletion.fromPartial(object.tableDeletion)
      : undefined;
    message.tableDataRead = (object.tableDataRead !== undefined && object.tableDataRead !== null)
      ? BigQueryAuditMetadata_TableDataRead.fromPartial(object.tableDataRead)
      : undefined;
    message.tableDataChange = (object.tableDataChange !== undefined && object.tableDataChange !== null)
      ? BigQueryAuditMetadata_TableDataChange.fromPartial(object.tableDataChange)
      : undefined;
    message.modelDeletion = (object.modelDeletion !== undefined && object.modelDeletion !== null)
      ? BigQueryAuditMetadata_ModelDeletion.fromPartial(object.modelDeletion)
      : undefined;
    message.modelCreation = (object.modelCreation !== undefined && object.modelCreation !== null)
      ? BigQueryAuditMetadata_ModelCreation.fromPartial(object.modelCreation)
      : undefined;
    message.modelMetadataChange = (object.modelMetadataChange !== undefined && object.modelMetadataChange !== null)
      ? BigQueryAuditMetadata_ModelMetadataChange.fromPartial(object.modelMetadataChange)
      : undefined;
    message.modelDataChange = (object.modelDataChange !== undefined && object.modelDataChange !== null)
      ? BigQueryAuditMetadata_ModelDataChange.fromPartial(object.modelDataChange)
      : undefined;
    message.modelDataRead = (object.modelDataRead !== undefined && object.modelDataRead !== null)
      ? BigQueryAuditMetadata_ModelDataRead.fromPartial(object.modelDataRead)
      : undefined;
    message.routineCreation = (object.routineCreation !== undefined && object.routineCreation !== null)
      ? BigQueryAuditMetadata_RoutineCreation.fromPartial(object.routineCreation)
      : undefined;
    message.routineChange = (object.routineChange !== undefined && object.routineChange !== null)
      ? BigQueryAuditMetadata_RoutineChange.fromPartial(object.routineChange)
      : undefined;
    message.routineDeletion = (object.routineDeletion !== undefined && object.routineDeletion !== null)
      ? BigQueryAuditMetadata_RoutineDeletion.fromPartial(object.routineDeletion)
      : undefined;
    message.rowAccessPolicyCreation =
      (object.rowAccessPolicyCreation !== undefined && object.rowAccessPolicyCreation !== null)
        ? BigQueryAuditMetadata_RowAccessPolicyCreation.fromPartial(object.rowAccessPolicyCreation)
        : undefined;
    message.rowAccessPolicyChange =
      (object.rowAccessPolicyChange !== undefined && object.rowAccessPolicyChange !== null)
        ? BigQueryAuditMetadata_RowAccessPolicyChange.fromPartial(object.rowAccessPolicyChange)
        : undefined;
    message.rowAccessPolicyDeletion =
      (object.rowAccessPolicyDeletion !== undefined && object.rowAccessPolicyDeletion !== null)
        ? BigQueryAuditMetadata_RowAccessPolicyDeletion.fromPartial(object.rowAccessPolicyDeletion)
        : undefined;
    message.unlinkDataset = (object.unlinkDataset !== undefined && object.unlinkDataset !== null)
      ? BigQueryAuditMetadata_UnlinkDataset.fromPartial(object.unlinkDataset)
      : undefined;
    message.firstPartyAppMetadata =
      (object.firstPartyAppMetadata !== undefined && object.firstPartyAppMetadata !== null)
        ? BigQueryAuditMetadata_FirstPartyAppMetadata.fromPartial(object.firstPartyAppMetadata)
        : undefined;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_JobInsertion(): BigQueryAuditMetadata_JobInsertion {
  return { job: undefined, reason: 0 };
}

export const BigQueryAuditMetadata_JobInsertion: MessageFns<BigQueryAuditMetadata_JobInsertion> = {
  encode(message: BigQueryAuditMetadata_JobInsertion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.job !== undefined) {
      BigQueryAuditMetadata_Job.encode(message.job, writer.uint32(10).fork()).join();
    }
    if (message.reason !== 0) {
      writer.uint32(16).int32(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_JobInsertion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_JobInsertion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.job = BigQueryAuditMetadata_Job.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_JobInsertion {
    return {
      job: isSet(object.job) ? BigQueryAuditMetadata_Job.fromJSON(object.job) : undefined,
      reason: isSet(object.reason) ? bigQueryAuditMetadata_JobInsertion_ReasonFromJSON(object.reason) : 0,
    };
  },

  toJSON(message: BigQueryAuditMetadata_JobInsertion): unknown {
    const obj: any = {};
    if (message.job !== undefined) {
      obj.job = BigQueryAuditMetadata_Job.toJSON(message.job);
    }
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_JobInsertion_ReasonToJSON(message.reason);
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_JobInsertion>): BigQueryAuditMetadata_JobInsertion {
    return BigQueryAuditMetadata_JobInsertion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_JobInsertion>): BigQueryAuditMetadata_JobInsertion {
    const message = createBaseBigQueryAuditMetadata_JobInsertion();
    message.job = (object.job !== undefined && object.job !== null)
      ? BigQueryAuditMetadata_Job.fromPartial(object.job)
      : undefined;
    message.reason = object.reason ?? 0;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_JobChange(): BigQueryAuditMetadata_JobChange {
  return { before: 0, after: 0, job: undefined };
}

export const BigQueryAuditMetadata_JobChange: MessageFns<BigQueryAuditMetadata_JobChange> = {
  encode(message: BigQueryAuditMetadata_JobChange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.before !== 0) {
      writer.uint32(8).int32(message.before);
    }
    if (message.after !== 0) {
      writer.uint32(16).int32(message.after);
    }
    if (message.job !== undefined) {
      BigQueryAuditMetadata_Job.encode(message.job, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_JobChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_JobChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.before = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.after = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.job = BigQueryAuditMetadata_Job.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_JobChange {
    return {
      before: isSet(object.before) ? bigQueryAuditMetadata_JobStateFromJSON(object.before) : 0,
      after: isSet(object.after) ? bigQueryAuditMetadata_JobStateFromJSON(object.after) : 0,
      job: isSet(object.job) ? BigQueryAuditMetadata_Job.fromJSON(object.job) : undefined,
    };
  },

  toJSON(message: BigQueryAuditMetadata_JobChange): unknown {
    const obj: any = {};
    if (message.before !== 0) {
      obj.before = bigQueryAuditMetadata_JobStateToJSON(message.before);
    }
    if (message.after !== 0) {
      obj.after = bigQueryAuditMetadata_JobStateToJSON(message.after);
    }
    if (message.job !== undefined) {
      obj.job = BigQueryAuditMetadata_Job.toJSON(message.job);
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_JobChange>): BigQueryAuditMetadata_JobChange {
    return BigQueryAuditMetadata_JobChange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_JobChange>): BigQueryAuditMetadata_JobChange {
    const message = createBaseBigQueryAuditMetadata_JobChange();
    message.before = object.before ?? 0;
    message.after = object.after ?? 0;
    message.job = (object.job !== undefined && object.job !== null)
      ? BigQueryAuditMetadata_Job.fromPartial(object.job)
      : undefined;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_JobDeletion(): BigQueryAuditMetadata_JobDeletion {
  return { jobName: "", reason: 0 };
}

export const BigQueryAuditMetadata_JobDeletion: MessageFns<BigQueryAuditMetadata_JobDeletion> = {
  encode(message: BigQueryAuditMetadata_JobDeletion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobName !== "") {
      writer.uint32(10).string(message.jobName);
    }
    if (message.reason !== 0) {
      writer.uint32(16).int32(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_JobDeletion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_JobDeletion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jobName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_JobDeletion {
    return {
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
      reason: isSet(object.reason) ? bigQueryAuditMetadata_JobDeletion_ReasonFromJSON(object.reason) : 0,
    };
  },

  toJSON(message: BigQueryAuditMetadata_JobDeletion): unknown {
    const obj: any = {};
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_JobDeletion_ReasonToJSON(message.reason);
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_JobDeletion>): BigQueryAuditMetadata_JobDeletion {
    return BigQueryAuditMetadata_JobDeletion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_JobDeletion>): BigQueryAuditMetadata_JobDeletion {
    const message = createBaseBigQueryAuditMetadata_JobDeletion();
    message.jobName = object.jobName ?? "";
    message.reason = object.reason ?? 0;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_DatasetCreation(): BigQueryAuditMetadata_DatasetCreation {
  return { dataset: undefined, reason: 0, jobName: "" };
}

export const BigQueryAuditMetadata_DatasetCreation: MessageFns<BigQueryAuditMetadata_DatasetCreation> = {
  encode(message: BigQueryAuditMetadata_DatasetCreation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataset !== undefined) {
      BigQueryAuditMetadata_Dataset.encode(message.dataset, writer.uint32(10).fork()).join();
    }
    if (message.reason !== 0) {
      writer.uint32(16).int32(message.reason);
    }
    if (message.jobName !== "") {
      writer.uint32(26).string(message.jobName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_DatasetCreation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_DatasetCreation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataset = BigQueryAuditMetadata_Dataset.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jobName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_DatasetCreation {
    return {
      dataset: isSet(object.dataset) ? BigQueryAuditMetadata_Dataset.fromJSON(object.dataset) : undefined,
      reason: isSet(object.reason) ? bigQueryAuditMetadata_DatasetCreation_ReasonFromJSON(object.reason) : 0,
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_DatasetCreation): unknown {
    const obj: any = {};
    if (message.dataset !== undefined) {
      obj.dataset = BigQueryAuditMetadata_Dataset.toJSON(message.dataset);
    }
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_DatasetCreation_ReasonToJSON(message.reason);
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_DatasetCreation>): BigQueryAuditMetadata_DatasetCreation {
    return BigQueryAuditMetadata_DatasetCreation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_DatasetCreation>): BigQueryAuditMetadata_DatasetCreation {
    const message = createBaseBigQueryAuditMetadata_DatasetCreation();
    message.dataset = (object.dataset !== undefined && object.dataset !== null)
      ? BigQueryAuditMetadata_Dataset.fromPartial(object.dataset)
      : undefined;
    message.reason = object.reason ?? 0;
    message.jobName = object.jobName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_DatasetChange(): BigQueryAuditMetadata_DatasetChange {
  return { dataset: undefined, reason: 0, jobName: "" };
}

export const BigQueryAuditMetadata_DatasetChange: MessageFns<BigQueryAuditMetadata_DatasetChange> = {
  encode(message: BigQueryAuditMetadata_DatasetChange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataset !== undefined) {
      BigQueryAuditMetadata_Dataset.encode(message.dataset, writer.uint32(10).fork()).join();
    }
    if (message.reason !== 0) {
      writer.uint32(16).int32(message.reason);
    }
    if (message.jobName !== "") {
      writer.uint32(26).string(message.jobName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_DatasetChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_DatasetChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataset = BigQueryAuditMetadata_Dataset.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jobName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_DatasetChange {
    return {
      dataset: isSet(object.dataset) ? BigQueryAuditMetadata_Dataset.fromJSON(object.dataset) : undefined,
      reason: isSet(object.reason) ? bigQueryAuditMetadata_DatasetChange_ReasonFromJSON(object.reason) : 0,
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_DatasetChange): unknown {
    const obj: any = {};
    if (message.dataset !== undefined) {
      obj.dataset = BigQueryAuditMetadata_Dataset.toJSON(message.dataset);
    }
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_DatasetChange_ReasonToJSON(message.reason);
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_DatasetChange>): BigQueryAuditMetadata_DatasetChange {
    return BigQueryAuditMetadata_DatasetChange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_DatasetChange>): BigQueryAuditMetadata_DatasetChange {
    const message = createBaseBigQueryAuditMetadata_DatasetChange();
    message.dataset = (object.dataset !== undefined && object.dataset !== null)
      ? BigQueryAuditMetadata_Dataset.fromPartial(object.dataset)
      : undefined;
    message.reason = object.reason ?? 0;
    message.jobName = object.jobName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_DatasetDeletion(): BigQueryAuditMetadata_DatasetDeletion {
  return { reason: 0, jobName: "" };
}

export const BigQueryAuditMetadata_DatasetDeletion: MessageFns<BigQueryAuditMetadata_DatasetDeletion> = {
  encode(message: BigQueryAuditMetadata_DatasetDeletion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reason !== 0) {
      writer.uint32(8).int32(message.reason);
    }
    if (message.jobName !== "") {
      writer.uint32(18).string(message.jobName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_DatasetDeletion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_DatasetDeletion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jobName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_DatasetDeletion {
    return {
      reason: isSet(object.reason) ? bigQueryAuditMetadata_DatasetDeletion_ReasonFromJSON(object.reason) : 0,
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_DatasetDeletion): unknown {
    const obj: any = {};
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_DatasetDeletion_ReasonToJSON(message.reason);
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_DatasetDeletion>): BigQueryAuditMetadata_DatasetDeletion {
    return BigQueryAuditMetadata_DatasetDeletion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_DatasetDeletion>): BigQueryAuditMetadata_DatasetDeletion {
    const message = createBaseBigQueryAuditMetadata_DatasetDeletion();
    message.reason = object.reason ?? 0;
    message.jobName = object.jobName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_TableCreation(): BigQueryAuditMetadata_TableCreation {
  return { table: undefined, reason: 0, jobName: "" };
}

export const BigQueryAuditMetadata_TableCreation: MessageFns<BigQueryAuditMetadata_TableCreation> = {
  encode(message: BigQueryAuditMetadata_TableCreation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.table !== undefined) {
      BigQueryAuditMetadata_Table.encode(message.table, writer.uint32(10).fork()).join();
    }
    if (message.reason !== 0) {
      writer.uint32(24).int32(message.reason);
    }
    if (message.jobName !== "") {
      writer.uint32(34).string(message.jobName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_TableCreation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_TableCreation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.table = BigQueryAuditMetadata_Table.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.jobName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_TableCreation {
    return {
      table: isSet(object.table) ? BigQueryAuditMetadata_Table.fromJSON(object.table) : undefined,
      reason: isSet(object.reason) ? bigQueryAuditMetadata_TableCreation_ReasonFromJSON(object.reason) : 0,
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_TableCreation): unknown {
    const obj: any = {};
    if (message.table !== undefined) {
      obj.table = BigQueryAuditMetadata_Table.toJSON(message.table);
    }
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_TableCreation_ReasonToJSON(message.reason);
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_TableCreation>): BigQueryAuditMetadata_TableCreation {
    return BigQueryAuditMetadata_TableCreation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_TableCreation>): BigQueryAuditMetadata_TableCreation {
    const message = createBaseBigQueryAuditMetadata_TableCreation();
    message.table = (object.table !== undefined && object.table !== null)
      ? BigQueryAuditMetadata_Table.fromPartial(object.table)
      : undefined;
    message.reason = object.reason ?? 0;
    message.jobName = object.jobName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_ModelCreation(): BigQueryAuditMetadata_ModelCreation {
  return { model: undefined, reason: 0, jobName: "" };
}

export const BigQueryAuditMetadata_ModelCreation: MessageFns<BigQueryAuditMetadata_ModelCreation> = {
  encode(message: BigQueryAuditMetadata_ModelCreation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model !== undefined) {
      BigQueryAuditMetadata_Model.encode(message.model, writer.uint32(10).fork()).join();
    }
    if (message.reason !== 0) {
      writer.uint32(24).int32(message.reason);
    }
    if (message.jobName !== "") {
      writer.uint32(34).string(message.jobName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_ModelCreation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_ModelCreation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.model = BigQueryAuditMetadata_Model.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.jobName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_ModelCreation {
    return {
      model: isSet(object.model) ? BigQueryAuditMetadata_Model.fromJSON(object.model) : undefined,
      reason: isSet(object.reason) ? bigQueryAuditMetadata_ModelCreation_ReasonFromJSON(object.reason) : 0,
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_ModelCreation): unknown {
    const obj: any = {};
    if (message.model !== undefined) {
      obj.model = BigQueryAuditMetadata_Model.toJSON(message.model);
    }
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_ModelCreation_ReasonToJSON(message.reason);
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_ModelCreation>): BigQueryAuditMetadata_ModelCreation {
    return BigQueryAuditMetadata_ModelCreation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_ModelCreation>): BigQueryAuditMetadata_ModelCreation {
    const message = createBaseBigQueryAuditMetadata_ModelCreation();
    message.model = (object.model !== undefined && object.model !== null)
      ? BigQueryAuditMetadata_Model.fromPartial(object.model)
      : undefined;
    message.reason = object.reason ?? 0;
    message.jobName = object.jobName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_RoutineCreation(): BigQueryAuditMetadata_RoutineCreation {
  return { routine: undefined, reason: 0, jobName: "" };
}

export const BigQueryAuditMetadata_RoutineCreation: MessageFns<BigQueryAuditMetadata_RoutineCreation> = {
  encode(message: BigQueryAuditMetadata_RoutineCreation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.routine !== undefined) {
      BigQueryAuditMetadata_Routine.encode(message.routine, writer.uint32(10).fork()).join();
    }
    if (message.reason !== 0) {
      writer.uint32(24).int32(message.reason);
    }
    if (message.jobName !== "") {
      writer.uint32(34).string(message.jobName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_RoutineCreation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_RoutineCreation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.routine = BigQueryAuditMetadata_Routine.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.jobName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_RoutineCreation {
    return {
      routine: isSet(object.routine) ? BigQueryAuditMetadata_Routine.fromJSON(object.routine) : undefined,
      reason: isSet(object.reason) ? bigQueryAuditMetadata_RoutineCreation_ReasonFromJSON(object.reason) : 0,
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_RoutineCreation): unknown {
    const obj: any = {};
    if (message.routine !== undefined) {
      obj.routine = BigQueryAuditMetadata_Routine.toJSON(message.routine);
    }
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_RoutineCreation_ReasonToJSON(message.reason);
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_RoutineCreation>): BigQueryAuditMetadata_RoutineCreation {
    return BigQueryAuditMetadata_RoutineCreation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_RoutineCreation>): BigQueryAuditMetadata_RoutineCreation {
    const message = createBaseBigQueryAuditMetadata_RoutineCreation();
    message.routine = (object.routine !== undefined && object.routine !== null)
      ? BigQueryAuditMetadata_Routine.fromPartial(object.routine)
      : undefined;
    message.reason = object.reason ?? 0;
    message.jobName = object.jobName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_TableDataRead(): BigQueryAuditMetadata_TableDataRead {
  return {
    fields: [],
    fieldsTruncated: false,
    policyTags: [],
    policyTagsTruncated: false,
    reason: 0,
    jobName: "",
    sessionName: "",
  };
}

export const BigQueryAuditMetadata_TableDataRead: MessageFns<BigQueryAuditMetadata_TableDataRead> = {
  encode(message: BigQueryAuditMetadata_TableDataRead, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.fields) {
      writer.uint32(18).string(v!);
    }
    if (message.fieldsTruncated !== false) {
      writer.uint32(64).bool(message.fieldsTruncated);
    }
    for (const v of message.policyTags) {
      writer.uint32(74).string(v!);
    }
    if (message.policyTagsTruncated !== false) {
      writer.uint32(80).bool(message.policyTagsTruncated);
    }
    if (message.reason !== 0) {
      writer.uint32(24).int32(message.reason);
    }
    if (message.jobName !== "") {
      writer.uint32(34).string(message.jobName);
    }
    if (message.sessionName !== "") {
      writer.uint32(42).string(message.sessionName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_TableDataRead {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_TableDataRead();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fields.push(reader.string());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.fieldsTruncated = reader.bool();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.policyTags.push(reader.string());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.policyTagsTruncated = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.jobName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sessionName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_TableDataRead {
    return {
      fields: globalThis.Array.isArray(object?.fields) ? object.fields.map((e: any) => globalThis.String(e)) : [],
      fieldsTruncated: isSet(object.fieldsTruncated) ? globalThis.Boolean(object.fieldsTruncated) : false,
      policyTags: globalThis.Array.isArray(object?.policyTags)
        ? object.policyTags.map((e: any) => globalThis.String(e))
        : [],
      policyTagsTruncated: isSet(object.policyTagsTruncated) ? globalThis.Boolean(object.policyTagsTruncated) : false,
      reason: isSet(object.reason) ? bigQueryAuditMetadata_TableDataRead_ReasonFromJSON(object.reason) : 0,
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
      sessionName: isSet(object.sessionName) ? globalThis.String(object.sessionName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_TableDataRead): unknown {
    const obj: any = {};
    if (message.fields?.length) {
      obj.fields = message.fields;
    }
    if (message.fieldsTruncated !== false) {
      obj.fieldsTruncated = message.fieldsTruncated;
    }
    if (message.policyTags?.length) {
      obj.policyTags = message.policyTags;
    }
    if (message.policyTagsTruncated !== false) {
      obj.policyTagsTruncated = message.policyTagsTruncated;
    }
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_TableDataRead_ReasonToJSON(message.reason);
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    if (message.sessionName !== "") {
      obj.sessionName = message.sessionName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_TableDataRead>): BigQueryAuditMetadata_TableDataRead {
    return BigQueryAuditMetadata_TableDataRead.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_TableDataRead>): BigQueryAuditMetadata_TableDataRead {
    const message = createBaseBigQueryAuditMetadata_TableDataRead();
    message.fields = object.fields?.map((e) => e) || [];
    message.fieldsTruncated = object.fieldsTruncated ?? false;
    message.policyTags = object.policyTags?.map((e) => e) || [];
    message.policyTagsTruncated = object.policyTagsTruncated ?? false;
    message.reason = object.reason ?? 0;
    message.jobName = object.jobName ?? "";
    message.sessionName = object.sessionName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_TableChange(): BigQueryAuditMetadata_TableChange {
  return { table: undefined, truncated: false, reason: 0, jobName: "" };
}

export const BigQueryAuditMetadata_TableChange: MessageFns<BigQueryAuditMetadata_TableChange> = {
  encode(message: BigQueryAuditMetadata_TableChange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.table !== undefined) {
      BigQueryAuditMetadata_Table.encode(message.table, writer.uint32(10).fork()).join();
    }
    if (message.truncated !== false) {
      writer.uint32(32).bool(message.truncated);
    }
    if (message.reason !== 0) {
      writer.uint32(40).int32(message.reason);
    }
    if (message.jobName !== "") {
      writer.uint32(50).string(message.jobName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_TableChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_TableChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.table = BigQueryAuditMetadata_Table.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.truncated = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.jobName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_TableChange {
    return {
      table: isSet(object.table) ? BigQueryAuditMetadata_Table.fromJSON(object.table) : undefined,
      truncated: isSet(object.truncated) ? globalThis.Boolean(object.truncated) : false,
      reason: isSet(object.reason) ? bigQueryAuditMetadata_TableChange_ReasonFromJSON(object.reason) : 0,
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_TableChange): unknown {
    const obj: any = {};
    if (message.table !== undefined) {
      obj.table = BigQueryAuditMetadata_Table.toJSON(message.table);
    }
    if (message.truncated !== false) {
      obj.truncated = message.truncated;
    }
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_TableChange_ReasonToJSON(message.reason);
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_TableChange>): BigQueryAuditMetadata_TableChange {
    return BigQueryAuditMetadata_TableChange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_TableChange>): BigQueryAuditMetadata_TableChange {
    const message = createBaseBigQueryAuditMetadata_TableChange();
    message.table = (object.table !== undefined && object.table !== null)
      ? BigQueryAuditMetadata_Table.fromPartial(object.table)
      : undefined;
    message.truncated = object.truncated ?? false;
    message.reason = object.reason ?? 0;
    message.jobName = object.jobName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_ModelMetadataChange(): BigQueryAuditMetadata_ModelMetadataChange {
  return { model: undefined, reason: 0, jobName: "" };
}

export const BigQueryAuditMetadata_ModelMetadataChange: MessageFns<BigQueryAuditMetadata_ModelMetadataChange> = {
  encode(message: BigQueryAuditMetadata_ModelMetadataChange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model !== undefined) {
      BigQueryAuditMetadata_Model.encode(message.model, writer.uint32(10).fork()).join();
    }
    if (message.reason !== 0) {
      writer.uint32(16).int32(message.reason);
    }
    if (message.jobName !== "") {
      writer.uint32(26).string(message.jobName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_ModelMetadataChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_ModelMetadataChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.model = BigQueryAuditMetadata_Model.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jobName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_ModelMetadataChange {
    return {
      model: isSet(object.model) ? BigQueryAuditMetadata_Model.fromJSON(object.model) : undefined,
      reason: isSet(object.reason) ? bigQueryAuditMetadata_ModelMetadataChange_ReasonFromJSON(object.reason) : 0,
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_ModelMetadataChange): unknown {
    const obj: any = {};
    if (message.model !== undefined) {
      obj.model = BigQueryAuditMetadata_Model.toJSON(message.model);
    }
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_ModelMetadataChange_ReasonToJSON(message.reason);
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_ModelMetadataChange>): BigQueryAuditMetadata_ModelMetadataChange {
    return BigQueryAuditMetadata_ModelMetadataChange.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BigQueryAuditMetadata_ModelMetadataChange>,
  ): BigQueryAuditMetadata_ModelMetadataChange {
    const message = createBaseBigQueryAuditMetadata_ModelMetadataChange();
    message.model = (object.model !== undefined && object.model !== null)
      ? BigQueryAuditMetadata_Model.fromPartial(object.model)
      : undefined;
    message.reason = object.reason ?? 0;
    message.jobName = object.jobName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_RoutineChange(): BigQueryAuditMetadata_RoutineChange {
  return { routine: undefined, reason: 0, jobName: "" };
}

export const BigQueryAuditMetadata_RoutineChange: MessageFns<BigQueryAuditMetadata_RoutineChange> = {
  encode(message: BigQueryAuditMetadata_RoutineChange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.routine !== undefined) {
      BigQueryAuditMetadata_Routine.encode(message.routine, writer.uint32(10).fork()).join();
    }
    if (message.reason !== 0) {
      writer.uint32(24).int32(message.reason);
    }
    if (message.jobName !== "") {
      writer.uint32(34).string(message.jobName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_RoutineChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_RoutineChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.routine = BigQueryAuditMetadata_Routine.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.jobName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_RoutineChange {
    return {
      routine: isSet(object.routine) ? BigQueryAuditMetadata_Routine.fromJSON(object.routine) : undefined,
      reason: isSet(object.reason) ? bigQueryAuditMetadata_RoutineChange_ReasonFromJSON(object.reason) : 0,
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_RoutineChange): unknown {
    const obj: any = {};
    if (message.routine !== undefined) {
      obj.routine = BigQueryAuditMetadata_Routine.toJSON(message.routine);
    }
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_RoutineChange_ReasonToJSON(message.reason);
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_RoutineChange>): BigQueryAuditMetadata_RoutineChange {
    return BigQueryAuditMetadata_RoutineChange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_RoutineChange>): BigQueryAuditMetadata_RoutineChange {
    const message = createBaseBigQueryAuditMetadata_RoutineChange();
    message.routine = (object.routine !== undefined && object.routine !== null)
      ? BigQueryAuditMetadata_Routine.fromPartial(object.routine)
      : undefined;
    message.reason = object.reason ?? 0;
    message.jobName = object.jobName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_TableDataChange(): BigQueryAuditMetadata_TableDataChange {
  return {
    deletedRowsCount: Long.ZERO,
    insertedRowsCount: Long.ZERO,
    truncated: false,
    reason: 0,
    jobName: "",
    streamName: "",
  };
}

export const BigQueryAuditMetadata_TableDataChange: MessageFns<BigQueryAuditMetadata_TableDataChange> = {
  encode(message: BigQueryAuditMetadata_TableDataChange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.deletedRowsCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.deletedRowsCount.toString());
    }
    if (!message.insertedRowsCount.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.insertedRowsCount.toString());
    }
    if (message.truncated !== false) {
      writer.uint32(24).bool(message.truncated);
    }
    if (message.reason !== 0) {
      writer.uint32(32).int32(message.reason);
    }
    if (message.jobName !== "") {
      writer.uint32(42).string(message.jobName);
    }
    if (message.streamName !== "") {
      writer.uint32(50).string(message.streamName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_TableDataChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_TableDataChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deletedRowsCount = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.insertedRowsCount = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.truncated = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.jobName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.streamName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_TableDataChange {
    return {
      deletedRowsCount: isSet(object.deletedRowsCount) ? Long.fromValue(object.deletedRowsCount) : Long.ZERO,
      insertedRowsCount: isSet(object.insertedRowsCount) ? Long.fromValue(object.insertedRowsCount) : Long.ZERO,
      truncated: isSet(object.truncated) ? globalThis.Boolean(object.truncated) : false,
      reason: isSet(object.reason) ? bigQueryAuditMetadata_TableDataChange_ReasonFromJSON(object.reason) : 0,
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
      streamName: isSet(object.streamName) ? globalThis.String(object.streamName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_TableDataChange): unknown {
    const obj: any = {};
    if (!message.deletedRowsCount.equals(Long.ZERO)) {
      obj.deletedRowsCount = (message.deletedRowsCount || Long.ZERO).toString();
    }
    if (!message.insertedRowsCount.equals(Long.ZERO)) {
      obj.insertedRowsCount = (message.insertedRowsCount || Long.ZERO).toString();
    }
    if (message.truncated !== false) {
      obj.truncated = message.truncated;
    }
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_TableDataChange_ReasonToJSON(message.reason);
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    if (message.streamName !== "") {
      obj.streamName = message.streamName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_TableDataChange>): BigQueryAuditMetadata_TableDataChange {
    return BigQueryAuditMetadata_TableDataChange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_TableDataChange>): BigQueryAuditMetadata_TableDataChange {
    const message = createBaseBigQueryAuditMetadata_TableDataChange();
    message.deletedRowsCount = (object.deletedRowsCount !== undefined && object.deletedRowsCount !== null)
      ? Long.fromValue(object.deletedRowsCount)
      : Long.ZERO;
    message.insertedRowsCount = (object.insertedRowsCount !== undefined && object.insertedRowsCount !== null)
      ? Long.fromValue(object.insertedRowsCount)
      : Long.ZERO;
    message.truncated = object.truncated ?? false;
    message.reason = object.reason ?? 0;
    message.jobName = object.jobName ?? "";
    message.streamName = object.streamName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_ModelDataChange(): BigQueryAuditMetadata_ModelDataChange {
  return { reason: 0, jobName: "" };
}

export const BigQueryAuditMetadata_ModelDataChange: MessageFns<BigQueryAuditMetadata_ModelDataChange> = {
  encode(message: BigQueryAuditMetadata_ModelDataChange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reason !== 0) {
      writer.uint32(8).int32(message.reason);
    }
    if (message.jobName !== "") {
      writer.uint32(18).string(message.jobName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_ModelDataChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_ModelDataChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jobName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_ModelDataChange {
    return {
      reason: isSet(object.reason) ? bigQueryAuditMetadata_ModelDataChange_ReasonFromJSON(object.reason) : 0,
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_ModelDataChange): unknown {
    const obj: any = {};
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_ModelDataChange_ReasonToJSON(message.reason);
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_ModelDataChange>): BigQueryAuditMetadata_ModelDataChange {
    return BigQueryAuditMetadata_ModelDataChange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_ModelDataChange>): BigQueryAuditMetadata_ModelDataChange {
    const message = createBaseBigQueryAuditMetadata_ModelDataChange();
    message.reason = object.reason ?? 0;
    message.jobName = object.jobName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_ModelDataRead(): BigQueryAuditMetadata_ModelDataRead {
  return { reason: 0, jobName: "" };
}

export const BigQueryAuditMetadata_ModelDataRead: MessageFns<BigQueryAuditMetadata_ModelDataRead> = {
  encode(message: BigQueryAuditMetadata_ModelDataRead, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reason !== 0) {
      writer.uint32(8).int32(message.reason);
    }
    if (message.jobName !== "") {
      writer.uint32(18).string(message.jobName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_ModelDataRead {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_ModelDataRead();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jobName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_ModelDataRead {
    return {
      reason: isSet(object.reason) ? bigQueryAuditMetadata_ModelDataRead_ReasonFromJSON(object.reason) : 0,
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_ModelDataRead): unknown {
    const obj: any = {};
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_ModelDataRead_ReasonToJSON(message.reason);
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_ModelDataRead>): BigQueryAuditMetadata_ModelDataRead {
    return BigQueryAuditMetadata_ModelDataRead.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_ModelDataRead>): BigQueryAuditMetadata_ModelDataRead {
    const message = createBaseBigQueryAuditMetadata_ModelDataRead();
    message.reason = object.reason ?? 0;
    message.jobName = object.jobName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_TableDeletion(): BigQueryAuditMetadata_TableDeletion {
  return { reason: 0, jobName: "" };
}

export const BigQueryAuditMetadata_TableDeletion: MessageFns<BigQueryAuditMetadata_TableDeletion> = {
  encode(message: BigQueryAuditMetadata_TableDeletion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reason !== 0) {
      writer.uint32(8).int32(message.reason);
    }
    if (message.jobName !== "") {
      writer.uint32(18).string(message.jobName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_TableDeletion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_TableDeletion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jobName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_TableDeletion {
    return {
      reason: isSet(object.reason) ? bigQueryAuditMetadata_TableDeletion_ReasonFromJSON(object.reason) : 0,
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_TableDeletion): unknown {
    const obj: any = {};
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_TableDeletion_ReasonToJSON(message.reason);
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_TableDeletion>): BigQueryAuditMetadata_TableDeletion {
    return BigQueryAuditMetadata_TableDeletion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_TableDeletion>): BigQueryAuditMetadata_TableDeletion {
    const message = createBaseBigQueryAuditMetadata_TableDeletion();
    message.reason = object.reason ?? 0;
    message.jobName = object.jobName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_ModelDeletion(): BigQueryAuditMetadata_ModelDeletion {
  return { reason: 0, jobName: "" };
}

export const BigQueryAuditMetadata_ModelDeletion: MessageFns<BigQueryAuditMetadata_ModelDeletion> = {
  encode(message: BigQueryAuditMetadata_ModelDeletion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reason !== 0) {
      writer.uint32(8).int32(message.reason);
    }
    if (message.jobName !== "") {
      writer.uint32(18).string(message.jobName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_ModelDeletion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_ModelDeletion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jobName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_ModelDeletion {
    return {
      reason: isSet(object.reason) ? bigQueryAuditMetadata_ModelDeletion_ReasonFromJSON(object.reason) : 0,
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_ModelDeletion): unknown {
    const obj: any = {};
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_ModelDeletion_ReasonToJSON(message.reason);
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_ModelDeletion>): BigQueryAuditMetadata_ModelDeletion {
    return BigQueryAuditMetadata_ModelDeletion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_ModelDeletion>): BigQueryAuditMetadata_ModelDeletion {
    const message = createBaseBigQueryAuditMetadata_ModelDeletion();
    message.reason = object.reason ?? 0;
    message.jobName = object.jobName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_RoutineDeletion(): BigQueryAuditMetadata_RoutineDeletion {
  return { routine: undefined, reason: 0, jobName: "" };
}

export const BigQueryAuditMetadata_RoutineDeletion: MessageFns<BigQueryAuditMetadata_RoutineDeletion> = {
  encode(message: BigQueryAuditMetadata_RoutineDeletion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.routine !== undefined) {
      BigQueryAuditMetadata_Routine.encode(message.routine, writer.uint32(10).fork()).join();
    }
    if (message.reason !== 0) {
      writer.uint32(24).int32(message.reason);
    }
    if (message.jobName !== "") {
      writer.uint32(34).string(message.jobName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_RoutineDeletion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_RoutineDeletion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.routine = BigQueryAuditMetadata_Routine.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.jobName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_RoutineDeletion {
    return {
      routine: isSet(object.routine) ? BigQueryAuditMetadata_Routine.fromJSON(object.routine) : undefined,
      reason: isSet(object.reason) ? bigQueryAuditMetadata_RoutineDeletion_ReasonFromJSON(object.reason) : 0,
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_RoutineDeletion): unknown {
    const obj: any = {};
    if (message.routine !== undefined) {
      obj.routine = BigQueryAuditMetadata_Routine.toJSON(message.routine);
    }
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_RoutineDeletion_ReasonToJSON(message.reason);
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_RoutineDeletion>): BigQueryAuditMetadata_RoutineDeletion {
    return BigQueryAuditMetadata_RoutineDeletion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_RoutineDeletion>): BigQueryAuditMetadata_RoutineDeletion {
    const message = createBaseBigQueryAuditMetadata_RoutineDeletion();
    message.routine = (object.routine !== undefined && object.routine !== null)
      ? BigQueryAuditMetadata_Routine.fromPartial(object.routine)
      : undefined;
    message.reason = object.reason ?? 0;
    message.jobName = object.jobName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_RowAccessPolicyCreation(): BigQueryAuditMetadata_RowAccessPolicyCreation {
  return { rowAccessPolicy: undefined, jobName: "" };
}

export const BigQueryAuditMetadata_RowAccessPolicyCreation: MessageFns<BigQueryAuditMetadata_RowAccessPolicyCreation> =
  {
    encode(
      message: BigQueryAuditMetadata_RowAccessPolicyCreation,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.rowAccessPolicy !== undefined) {
        BigQueryAuditMetadata_RowAccessPolicy.encode(message.rowAccessPolicy, writer.uint32(10).fork()).join();
      }
      if (message.jobName !== "") {
        writer.uint32(18).string(message.jobName);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_RowAccessPolicyCreation {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseBigQueryAuditMetadata_RowAccessPolicyCreation();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.rowAccessPolicy = BigQueryAuditMetadata_RowAccessPolicy.decode(reader, reader.uint32());
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.jobName = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): BigQueryAuditMetadata_RowAccessPolicyCreation {
      return {
        rowAccessPolicy: isSet(object.rowAccessPolicy)
          ? BigQueryAuditMetadata_RowAccessPolicy.fromJSON(object.rowAccessPolicy)
          : undefined,
        jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
      };
    },

    toJSON(message: BigQueryAuditMetadata_RowAccessPolicyCreation): unknown {
      const obj: any = {};
      if (message.rowAccessPolicy !== undefined) {
        obj.rowAccessPolicy = BigQueryAuditMetadata_RowAccessPolicy.toJSON(message.rowAccessPolicy);
      }
      if (message.jobName !== "") {
        obj.jobName = message.jobName;
      }
      return obj;
    },

    create(
      base?: DeepPartial<BigQueryAuditMetadata_RowAccessPolicyCreation>,
    ): BigQueryAuditMetadata_RowAccessPolicyCreation {
      return BigQueryAuditMetadata_RowAccessPolicyCreation.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<BigQueryAuditMetadata_RowAccessPolicyCreation>,
    ): BigQueryAuditMetadata_RowAccessPolicyCreation {
      const message = createBaseBigQueryAuditMetadata_RowAccessPolicyCreation();
      message.rowAccessPolicy = (object.rowAccessPolicy !== undefined && object.rowAccessPolicy !== null)
        ? BigQueryAuditMetadata_RowAccessPolicy.fromPartial(object.rowAccessPolicy)
        : undefined;
      message.jobName = object.jobName ?? "";
      return message;
    },
  };

function createBaseBigQueryAuditMetadata_RowAccessPolicyChange(): BigQueryAuditMetadata_RowAccessPolicyChange {
  return { rowAccessPolicy: undefined, jobName: "" };
}

export const BigQueryAuditMetadata_RowAccessPolicyChange: MessageFns<BigQueryAuditMetadata_RowAccessPolicyChange> = {
  encode(
    message: BigQueryAuditMetadata_RowAccessPolicyChange,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.rowAccessPolicy !== undefined) {
      BigQueryAuditMetadata_RowAccessPolicy.encode(message.rowAccessPolicy, writer.uint32(10).fork()).join();
    }
    if (message.jobName !== "") {
      writer.uint32(18).string(message.jobName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_RowAccessPolicyChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_RowAccessPolicyChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rowAccessPolicy = BigQueryAuditMetadata_RowAccessPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jobName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_RowAccessPolicyChange {
    return {
      rowAccessPolicy: isSet(object.rowAccessPolicy)
        ? BigQueryAuditMetadata_RowAccessPolicy.fromJSON(object.rowAccessPolicy)
        : undefined,
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_RowAccessPolicyChange): unknown {
    const obj: any = {};
    if (message.rowAccessPolicy !== undefined) {
      obj.rowAccessPolicy = BigQueryAuditMetadata_RowAccessPolicy.toJSON(message.rowAccessPolicy);
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_RowAccessPolicyChange>): BigQueryAuditMetadata_RowAccessPolicyChange {
    return BigQueryAuditMetadata_RowAccessPolicyChange.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BigQueryAuditMetadata_RowAccessPolicyChange>,
  ): BigQueryAuditMetadata_RowAccessPolicyChange {
    const message = createBaseBigQueryAuditMetadata_RowAccessPolicyChange();
    message.rowAccessPolicy = (object.rowAccessPolicy !== undefined && object.rowAccessPolicy !== null)
      ? BigQueryAuditMetadata_RowAccessPolicy.fromPartial(object.rowAccessPolicy)
      : undefined;
    message.jobName = object.jobName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_RowAccessPolicyDeletion(): BigQueryAuditMetadata_RowAccessPolicyDeletion {
  return { rowAccessPolicies: [], jobName: "", allRowAccessPoliciesDropped: false };
}

export const BigQueryAuditMetadata_RowAccessPolicyDeletion: MessageFns<BigQueryAuditMetadata_RowAccessPolicyDeletion> =
  {
    encode(
      message: BigQueryAuditMetadata_RowAccessPolicyDeletion,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      for (const v of message.rowAccessPolicies) {
        BigQueryAuditMetadata_RowAccessPolicy.encode(v!, writer.uint32(10).fork()).join();
      }
      if (message.jobName !== "") {
        writer.uint32(18).string(message.jobName);
      }
      if (message.allRowAccessPoliciesDropped !== false) {
        writer.uint32(24).bool(message.allRowAccessPoliciesDropped);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_RowAccessPolicyDeletion {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseBigQueryAuditMetadata_RowAccessPolicyDeletion();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.rowAccessPolicies.push(BigQueryAuditMetadata_RowAccessPolicy.decode(reader, reader.uint32()));
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.jobName = reader.string();
            continue;
          case 3:
            if (tag !== 24) {
              break;
            }

            message.allRowAccessPoliciesDropped = reader.bool();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): BigQueryAuditMetadata_RowAccessPolicyDeletion {
      return {
        rowAccessPolicies: globalThis.Array.isArray(object?.rowAccessPolicies)
          ? object.rowAccessPolicies.map((e: any) => BigQueryAuditMetadata_RowAccessPolicy.fromJSON(e))
          : [],
        jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
        allRowAccessPoliciesDropped: isSet(object.allRowAccessPoliciesDropped)
          ? globalThis.Boolean(object.allRowAccessPoliciesDropped)
          : false,
      };
    },

    toJSON(message: BigQueryAuditMetadata_RowAccessPolicyDeletion): unknown {
      const obj: any = {};
      if (message.rowAccessPolicies?.length) {
        obj.rowAccessPolicies = message.rowAccessPolicies.map((e) => BigQueryAuditMetadata_RowAccessPolicy.toJSON(e));
      }
      if (message.jobName !== "") {
        obj.jobName = message.jobName;
      }
      if (message.allRowAccessPoliciesDropped !== false) {
        obj.allRowAccessPoliciesDropped = message.allRowAccessPoliciesDropped;
      }
      return obj;
    },

    create(
      base?: DeepPartial<BigQueryAuditMetadata_RowAccessPolicyDeletion>,
    ): BigQueryAuditMetadata_RowAccessPolicyDeletion {
      return BigQueryAuditMetadata_RowAccessPolicyDeletion.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<BigQueryAuditMetadata_RowAccessPolicyDeletion>,
    ): BigQueryAuditMetadata_RowAccessPolicyDeletion {
      const message = createBaseBigQueryAuditMetadata_RowAccessPolicyDeletion();
      message.rowAccessPolicies =
        object.rowAccessPolicies?.map((e) => BigQueryAuditMetadata_RowAccessPolicy.fromPartial(e)) || [];
      message.jobName = object.jobName ?? "";
      message.allRowAccessPoliciesDropped = object.allRowAccessPoliciesDropped ?? false;
      return message;
    },
  };

function createBaseBigQueryAuditMetadata_UnlinkDataset(): BigQueryAuditMetadata_UnlinkDataset {
  return { linkedDataset: "", sourceDataset: "", reason: 0 };
}

export const BigQueryAuditMetadata_UnlinkDataset: MessageFns<BigQueryAuditMetadata_UnlinkDataset> = {
  encode(message: BigQueryAuditMetadata_UnlinkDataset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.linkedDataset !== "") {
      writer.uint32(10).string(message.linkedDataset);
    }
    if (message.sourceDataset !== "") {
      writer.uint32(18).string(message.sourceDataset);
    }
    if (message.reason !== 0) {
      writer.uint32(24).int32(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_UnlinkDataset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_UnlinkDataset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.linkedDataset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sourceDataset = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_UnlinkDataset {
    return {
      linkedDataset: isSet(object.linkedDataset) ? globalThis.String(object.linkedDataset) : "",
      sourceDataset: isSet(object.sourceDataset) ? globalThis.String(object.sourceDataset) : "",
      reason: isSet(object.reason) ? bigQueryAuditMetadata_UnlinkDataset_ReasonFromJSON(object.reason) : 0,
    };
  },

  toJSON(message: BigQueryAuditMetadata_UnlinkDataset): unknown {
    const obj: any = {};
    if (message.linkedDataset !== "") {
      obj.linkedDataset = message.linkedDataset;
    }
    if (message.sourceDataset !== "") {
      obj.sourceDataset = message.sourceDataset;
    }
    if (message.reason !== 0) {
      obj.reason = bigQueryAuditMetadata_UnlinkDataset_ReasonToJSON(message.reason);
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_UnlinkDataset>): BigQueryAuditMetadata_UnlinkDataset {
    return BigQueryAuditMetadata_UnlinkDataset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_UnlinkDataset>): BigQueryAuditMetadata_UnlinkDataset {
    const message = createBaseBigQueryAuditMetadata_UnlinkDataset();
    message.linkedDataset = object.linkedDataset ?? "";
    message.sourceDataset = object.sourceDataset ?? "";
    message.reason = object.reason ?? 0;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_Job(): BigQueryAuditMetadata_Job {
  return { jobName: "", jobConfig: undefined, jobStatus: undefined, jobStats: undefined };
}

export const BigQueryAuditMetadata_Job: MessageFns<BigQueryAuditMetadata_Job> = {
  encode(message: BigQueryAuditMetadata_Job, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobName !== "") {
      writer.uint32(10).string(message.jobName);
    }
    if (message.jobConfig !== undefined) {
      BigQueryAuditMetadata_JobConfig.encode(message.jobConfig, writer.uint32(18).fork()).join();
    }
    if (message.jobStatus !== undefined) {
      BigQueryAuditMetadata_JobStatus.encode(message.jobStatus, writer.uint32(26).fork()).join();
    }
    if (message.jobStats !== undefined) {
      BigQueryAuditMetadata_JobStats.encode(message.jobStats, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_Job {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_Job();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jobName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jobConfig = BigQueryAuditMetadata_JobConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jobStatus = BigQueryAuditMetadata_JobStatus.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.jobStats = BigQueryAuditMetadata_JobStats.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_Job {
    return {
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
      jobConfig: isSet(object.jobConfig) ? BigQueryAuditMetadata_JobConfig.fromJSON(object.jobConfig) : undefined,
      jobStatus: isSet(object.jobStatus) ? BigQueryAuditMetadata_JobStatus.fromJSON(object.jobStatus) : undefined,
      jobStats: isSet(object.jobStats) ? BigQueryAuditMetadata_JobStats.fromJSON(object.jobStats) : undefined,
    };
  },

  toJSON(message: BigQueryAuditMetadata_Job): unknown {
    const obj: any = {};
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    if (message.jobConfig !== undefined) {
      obj.jobConfig = BigQueryAuditMetadata_JobConfig.toJSON(message.jobConfig);
    }
    if (message.jobStatus !== undefined) {
      obj.jobStatus = BigQueryAuditMetadata_JobStatus.toJSON(message.jobStatus);
    }
    if (message.jobStats !== undefined) {
      obj.jobStats = BigQueryAuditMetadata_JobStats.toJSON(message.jobStats);
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_Job>): BigQueryAuditMetadata_Job {
    return BigQueryAuditMetadata_Job.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_Job>): BigQueryAuditMetadata_Job {
    const message = createBaseBigQueryAuditMetadata_Job();
    message.jobName = object.jobName ?? "";
    message.jobConfig = (object.jobConfig !== undefined && object.jobConfig !== null)
      ? BigQueryAuditMetadata_JobConfig.fromPartial(object.jobConfig)
      : undefined;
    message.jobStatus = (object.jobStatus !== undefined && object.jobStatus !== null)
      ? BigQueryAuditMetadata_JobStatus.fromPartial(object.jobStatus)
      : undefined;
    message.jobStats = (object.jobStats !== undefined && object.jobStats !== null)
      ? BigQueryAuditMetadata_JobStats.fromPartial(object.jobStats)
      : undefined;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_JobConfig(): BigQueryAuditMetadata_JobConfig {
  return {
    type: 0,
    queryConfig: undefined,
    loadConfig: undefined,
    extractConfig: undefined,
    tableCopyConfig: undefined,
    labels: {},
  };
}

export const BigQueryAuditMetadata_JobConfig: MessageFns<BigQueryAuditMetadata_JobConfig> = {
  encode(message: BigQueryAuditMetadata_JobConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.queryConfig !== undefined) {
      BigQueryAuditMetadata_JobConfig_Query.encode(message.queryConfig, writer.uint32(18).fork()).join();
    }
    if (message.loadConfig !== undefined) {
      BigQueryAuditMetadata_JobConfig_Load.encode(message.loadConfig, writer.uint32(26).fork()).join();
    }
    if (message.extractConfig !== undefined) {
      BigQueryAuditMetadata_JobConfig_Extract.encode(message.extractConfig, writer.uint32(34).fork()).join();
    }
    if (message.tableCopyConfig !== undefined) {
      BigQueryAuditMetadata_JobConfig_TableCopy.encode(message.tableCopyConfig, writer.uint32(42).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      BigQueryAuditMetadata_JobConfig_LabelsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_JobConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_JobConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queryConfig = BigQueryAuditMetadata_JobConfig_Query.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.loadConfig = BigQueryAuditMetadata_JobConfig_Load.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.extractConfig = BigQueryAuditMetadata_JobConfig_Extract.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tableCopyConfig = BigQueryAuditMetadata_JobConfig_TableCopy.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = BigQueryAuditMetadata_JobConfig_LabelsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.labels[entry6.key] = entry6.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_JobConfig {
    return {
      type: isSet(object.type) ? bigQueryAuditMetadata_JobConfig_TypeFromJSON(object.type) : 0,
      queryConfig: isSet(object.queryConfig)
        ? BigQueryAuditMetadata_JobConfig_Query.fromJSON(object.queryConfig)
        : undefined,
      loadConfig: isSet(object.loadConfig)
        ? BigQueryAuditMetadata_JobConfig_Load.fromJSON(object.loadConfig)
        : undefined,
      extractConfig: isSet(object.extractConfig)
        ? BigQueryAuditMetadata_JobConfig_Extract.fromJSON(object.extractConfig)
        : undefined,
      tableCopyConfig: isSet(object.tableCopyConfig)
        ? BigQueryAuditMetadata_JobConfig_TableCopy.fromJSON(object.tableCopyConfig)
        : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: BigQueryAuditMetadata_JobConfig): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = bigQueryAuditMetadata_JobConfig_TypeToJSON(message.type);
    }
    if (message.queryConfig !== undefined) {
      obj.queryConfig = BigQueryAuditMetadata_JobConfig_Query.toJSON(message.queryConfig);
    }
    if (message.loadConfig !== undefined) {
      obj.loadConfig = BigQueryAuditMetadata_JobConfig_Load.toJSON(message.loadConfig);
    }
    if (message.extractConfig !== undefined) {
      obj.extractConfig = BigQueryAuditMetadata_JobConfig_Extract.toJSON(message.extractConfig);
    }
    if (message.tableCopyConfig !== undefined) {
      obj.tableCopyConfig = BigQueryAuditMetadata_JobConfig_TableCopy.toJSON(message.tableCopyConfig);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_JobConfig>): BigQueryAuditMetadata_JobConfig {
    return BigQueryAuditMetadata_JobConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_JobConfig>): BigQueryAuditMetadata_JobConfig {
    const message = createBaseBigQueryAuditMetadata_JobConfig();
    message.type = object.type ?? 0;
    message.queryConfig = (object.queryConfig !== undefined && object.queryConfig !== null)
      ? BigQueryAuditMetadata_JobConfig_Query.fromPartial(object.queryConfig)
      : undefined;
    message.loadConfig = (object.loadConfig !== undefined && object.loadConfig !== null)
      ? BigQueryAuditMetadata_JobConfig_Load.fromPartial(object.loadConfig)
      : undefined;
    message.extractConfig = (object.extractConfig !== undefined && object.extractConfig !== null)
      ? BigQueryAuditMetadata_JobConfig_Extract.fromPartial(object.extractConfig)
      : undefined;
    message.tableCopyConfig = (object.tableCopyConfig !== undefined && object.tableCopyConfig !== null)
      ? BigQueryAuditMetadata_JobConfig_TableCopy.fromPartial(object.tableCopyConfig)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseBigQueryAuditMetadata_JobConfig_Query(): BigQueryAuditMetadata_JobConfig_Query {
  return {
    query: "",
    queryTruncated: false,
    destinationTable: "",
    createDisposition: 0,
    writeDisposition: 0,
    defaultDataset: "",
    tableDefinitions: [],
    priority: 0,
    destinationTableEncryption: undefined,
    statementType: 0,
  };
}

export const BigQueryAuditMetadata_JobConfig_Query: MessageFns<BigQueryAuditMetadata_JobConfig_Query> = {
  encode(message: BigQueryAuditMetadata_JobConfig_Query, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== "") {
      writer.uint32(10).string(message.query);
    }
    if (message.queryTruncated !== false) {
      writer.uint32(80).bool(message.queryTruncated);
    }
    if (message.destinationTable !== "") {
      writer.uint32(18).string(message.destinationTable);
    }
    if (message.createDisposition !== 0) {
      writer.uint32(24).int32(message.createDisposition);
    }
    if (message.writeDisposition !== 0) {
      writer.uint32(32).int32(message.writeDisposition);
    }
    if (message.defaultDataset !== "") {
      writer.uint32(42).string(message.defaultDataset);
    }
    for (const v of message.tableDefinitions) {
      BigQueryAuditMetadata_TableDefinition.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.priority !== 0) {
      writer.uint32(56).int32(message.priority);
    }
    if (message.destinationTableEncryption !== undefined) {
      BigQueryAuditMetadata_EncryptionInfo.encode(message.destinationTableEncryption, writer.uint32(66).fork()).join();
    }
    if (message.statementType !== 0) {
      writer.uint32(72).int32(message.statementType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_JobConfig_Query {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_JobConfig_Query();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.queryTruncated = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destinationTable = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.createDisposition = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.writeDisposition = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.defaultDataset = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.tableDefinitions.push(BigQueryAuditMetadata_TableDefinition.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.priority = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.destinationTableEncryption = BigQueryAuditMetadata_EncryptionInfo.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.statementType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_JobConfig_Query {
    return {
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      queryTruncated: isSet(object.queryTruncated) ? globalThis.Boolean(object.queryTruncated) : false,
      destinationTable: isSet(object.destinationTable) ? globalThis.String(object.destinationTable) : "",
      createDisposition: isSet(object.createDisposition)
        ? bigQueryAuditMetadata_CreateDispositionFromJSON(object.createDisposition)
        : 0,
      writeDisposition: isSet(object.writeDisposition)
        ? bigQueryAuditMetadata_WriteDispositionFromJSON(object.writeDisposition)
        : 0,
      defaultDataset: isSet(object.defaultDataset) ? globalThis.String(object.defaultDataset) : "",
      tableDefinitions: globalThis.Array.isArray(object?.tableDefinitions)
        ? object.tableDefinitions.map((e: any) => BigQueryAuditMetadata_TableDefinition.fromJSON(e))
        : [],
      priority: isSet(object.priority) ? bigQueryAuditMetadata_JobConfig_Query_PriorityFromJSON(object.priority) : 0,
      destinationTableEncryption: isSet(object.destinationTableEncryption)
        ? BigQueryAuditMetadata_EncryptionInfo.fromJSON(object.destinationTableEncryption)
        : undefined,
      statementType: isSet(object.statementType)
        ? bigQueryAuditMetadata_QueryStatementTypeFromJSON(object.statementType)
        : 0,
    };
  },

  toJSON(message: BigQueryAuditMetadata_JobConfig_Query): unknown {
    const obj: any = {};
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.queryTruncated !== false) {
      obj.queryTruncated = message.queryTruncated;
    }
    if (message.destinationTable !== "") {
      obj.destinationTable = message.destinationTable;
    }
    if (message.createDisposition !== 0) {
      obj.createDisposition = bigQueryAuditMetadata_CreateDispositionToJSON(message.createDisposition);
    }
    if (message.writeDisposition !== 0) {
      obj.writeDisposition = bigQueryAuditMetadata_WriteDispositionToJSON(message.writeDisposition);
    }
    if (message.defaultDataset !== "") {
      obj.defaultDataset = message.defaultDataset;
    }
    if (message.tableDefinitions?.length) {
      obj.tableDefinitions = message.tableDefinitions.map((e) => BigQueryAuditMetadata_TableDefinition.toJSON(e));
    }
    if (message.priority !== 0) {
      obj.priority = bigQueryAuditMetadata_JobConfig_Query_PriorityToJSON(message.priority);
    }
    if (message.destinationTableEncryption !== undefined) {
      obj.destinationTableEncryption = BigQueryAuditMetadata_EncryptionInfo.toJSON(message.destinationTableEncryption);
    }
    if (message.statementType !== 0) {
      obj.statementType = bigQueryAuditMetadata_QueryStatementTypeToJSON(message.statementType);
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_JobConfig_Query>): BigQueryAuditMetadata_JobConfig_Query {
    return BigQueryAuditMetadata_JobConfig_Query.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_JobConfig_Query>): BigQueryAuditMetadata_JobConfig_Query {
    const message = createBaseBigQueryAuditMetadata_JobConfig_Query();
    message.query = object.query ?? "";
    message.queryTruncated = object.queryTruncated ?? false;
    message.destinationTable = object.destinationTable ?? "";
    message.createDisposition = object.createDisposition ?? 0;
    message.writeDisposition = object.writeDisposition ?? 0;
    message.defaultDataset = object.defaultDataset ?? "";
    message.tableDefinitions =
      object.tableDefinitions?.map((e) => BigQueryAuditMetadata_TableDefinition.fromPartial(e)) || [];
    message.priority = object.priority ?? 0;
    message.destinationTableEncryption =
      (object.destinationTableEncryption !== undefined && object.destinationTableEncryption !== null)
        ? BigQueryAuditMetadata_EncryptionInfo.fromPartial(object.destinationTableEncryption)
        : undefined;
    message.statementType = object.statementType ?? 0;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_JobConfig_Load(): BigQueryAuditMetadata_JobConfig_Load {
  return {
    sourceUris: [],
    sourceUrisTruncated: false,
    schemaJson: "",
    schemaJsonTruncated: false,
    destinationTable: "",
    createDisposition: 0,
    writeDisposition: 0,
    destinationTableEncryption: undefined,
  };
}

export const BigQueryAuditMetadata_JobConfig_Load: MessageFns<BigQueryAuditMetadata_JobConfig_Load> = {
  encode(message: BigQueryAuditMetadata_JobConfig_Load, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sourceUris) {
      writer.uint32(10).string(v!);
    }
    if (message.sourceUrisTruncated !== false) {
      writer.uint32(56).bool(message.sourceUrisTruncated);
    }
    if (message.schemaJson !== "") {
      writer.uint32(18).string(message.schemaJson);
    }
    if (message.schemaJsonTruncated !== false) {
      writer.uint32(64).bool(message.schemaJsonTruncated);
    }
    if (message.destinationTable !== "") {
      writer.uint32(26).string(message.destinationTable);
    }
    if (message.createDisposition !== 0) {
      writer.uint32(32).int32(message.createDisposition);
    }
    if (message.writeDisposition !== 0) {
      writer.uint32(40).int32(message.writeDisposition);
    }
    if (message.destinationTableEncryption !== undefined) {
      BigQueryAuditMetadata_EncryptionInfo.encode(message.destinationTableEncryption, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_JobConfig_Load {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_JobConfig_Load();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sourceUris.push(reader.string());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.sourceUrisTruncated = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.schemaJson = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.schemaJsonTruncated = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.destinationTable = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.createDisposition = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.writeDisposition = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.destinationTableEncryption = BigQueryAuditMetadata_EncryptionInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_JobConfig_Load {
    return {
      sourceUris: globalThis.Array.isArray(object?.sourceUris)
        ? object.sourceUris.map((e: any) => globalThis.String(e))
        : [],
      sourceUrisTruncated: isSet(object.sourceUrisTruncated) ? globalThis.Boolean(object.sourceUrisTruncated) : false,
      schemaJson: isSet(object.schemaJson) ? globalThis.String(object.schemaJson) : "",
      schemaJsonTruncated: isSet(object.schemaJsonTruncated) ? globalThis.Boolean(object.schemaJsonTruncated) : false,
      destinationTable: isSet(object.destinationTable) ? globalThis.String(object.destinationTable) : "",
      createDisposition: isSet(object.createDisposition)
        ? bigQueryAuditMetadata_CreateDispositionFromJSON(object.createDisposition)
        : 0,
      writeDisposition: isSet(object.writeDisposition)
        ? bigQueryAuditMetadata_WriteDispositionFromJSON(object.writeDisposition)
        : 0,
      destinationTableEncryption: isSet(object.destinationTableEncryption)
        ? BigQueryAuditMetadata_EncryptionInfo.fromJSON(object.destinationTableEncryption)
        : undefined,
    };
  },

  toJSON(message: BigQueryAuditMetadata_JobConfig_Load): unknown {
    const obj: any = {};
    if (message.sourceUris?.length) {
      obj.sourceUris = message.sourceUris;
    }
    if (message.sourceUrisTruncated !== false) {
      obj.sourceUrisTruncated = message.sourceUrisTruncated;
    }
    if (message.schemaJson !== "") {
      obj.schemaJson = message.schemaJson;
    }
    if (message.schemaJsonTruncated !== false) {
      obj.schemaJsonTruncated = message.schemaJsonTruncated;
    }
    if (message.destinationTable !== "") {
      obj.destinationTable = message.destinationTable;
    }
    if (message.createDisposition !== 0) {
      obj.createDisposition = bigQueryAuditMetadata_CreateDispositionToJSON(message.createDisposition);
    }
    if (message.writeDisposition !== 0) {
      obj.writeDisposition = bigQueryAuditMetadata_WriteDispositionToJSON(message.writeDisposition);
    }
    if (message.destinationTableEncryption !== undefined) {
      obj.destinationTableEncryption = BigQueryAuditMetadata_EncryptionInfo.toJSON(message.destinationTableEncryption);
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_JobConfig_Load>): BigQueryAuditMetadata_JobConfig_Load {
    return BigQueryAuditMetadata_JobConfig_Load.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_JobConfig_Load>): BigQueryAuditMetadata_JobConfig_Load {
    const message = createBaseBigQueryAuditMetadata_JobConfig_Load();
    message.sourceUris = object.sourceUris?.map((e) => e) || [];
    message.sourceUrisTruncated = object.sourceUrisTruncated ?? false;
    message.schemaJson = object.schemaJson ?? "";
    message.schemaJsonTruncated = object.schemaJsonTruncated ?? false;
    message.destinationTable = object.destinationTable ?? "";
    message.createDisposition = object.createDisposition ?? 0;
    message.writeDisposition = object.writeDisposition ?? 0;
    message.destinationTableEncryption =
      (object.destinationTableEncryption !== undefined && object.destinationTableEncryption !== null)
        ? BigQueryAuditMetadata_EncryptionInfo.fromPartial(object.destinationTableEncryption)
        : undefined;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_JobConfig_Extract(): BigQueryAuditMetadata_JobConfig_Extract {
  return { destinationUris: [], destinationUrisTruncated: false, sourceTable: undefined, sourceModel: undefined };
}

export const BigQueryAuditMetadata_JobConfig_Extract: MessageFns<BigQueryAuditMetadata_JobConfig_Extract> = {
  encode(message: BigQueryAuditMetadata_JobConfig_Extract, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.destinationUris) {
      writer.uint32(10).string(v!);
    }
    if (message.destinationUrisTruncated !== false) {
      writer.uint32(24).bool(message.destinationUrisTruncated);
    }
    if (message.sourceTable !== undefined) {
      writer.uint32(18).string(message.sourceTable);
    }
    if (message.sourceModel !== undefined) {
      writer.uint32(34).string(message.sourceModel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_JobConfig_Extract {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_JobConfig_Extract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.destinationUris.push(reader.string());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.destinationUrisTruncated = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sourceTable = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sourceModel = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_JobConfig_Extract {
    return {
      destinationUris: globalThis.Array.isArray(object?.destinationUris)
        ? object.destinationUris.map((e: any) => globalThis.String(e))
        : [],
      destinationUrisTruncated: isSet(object.destinationUrisTruncated)
        ? globalThis.Boolean(object.destinationUrisTruncated)
        : false,
      sourceTable: isSet(object.sourceTable) ? globalThis.String(object.sourceTable) : undefined,
      sourceModel: isSet(object.sourceModel) ? globalThis.String(object.sourceModel) : undefined,
    };
  },

  toJSON(message: BigQueryAuditMetadata_JobConfig_Extract): unknown {
    const obj: any = {};
    if (message.destinationUris?.length) {
      obj.destinationUris = message.destinationUris;
    }
    if (message.destinationUrisTruncated !== false) {
      obj.destinationUrisTruncated = message.destinationUrisTruncated;
    }
    if (message.sourceTable !== undefined) {
      obj.sourceTable = message.sourceTable;
    }
    if (message.sourceModel !== undefined) {
      obj.sourceModel = message.sourceModel;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_JobConfig_Extract>): BigQueryAuditMetadata_JobConfig_Extract {
    return BigQueryAuditMetadata_JobConfig_Extract.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_JobConfig_Extract>): BigQueryAuditMetadata_JobConfig_Extract {
    const message = createBaseBigQueryAuditMetadata_JobConfig_Extract();
    message.destinationUris = object.destinationUris?.map((e) => e) || [];
    message.destinationUrisTruncated = object.destinationUrisTruncated ?? false;
    message.sourceTable = object.sourceTable ?? undefined;
    message.sourceModel = object.sourceModel ?? undefined;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_JobConfig_TableCopy(): BigQueryAuditMetadata_JobConfig_TableCopy {
  return {
    sourceTables: [],
    sourceTablesTruncated: false,
    destinationTable: "",
    createDisposition: 0,
    writeDisposition: 0,
    destinationTableEncryption: undefined,
    operationType: 0,
    destinationExpirationTime: undefined,
  };
}

export const BigQueryAuditMetadata_JobConfig_TableCopy: MessageFns<BigQueryAuditMetadata_JobConfig_TableCopy> = {
  encode(message: BigQueryAuditMetadata_JobConfig_TableCopy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sourceTables) {
      writer.uint32(10).string(v!);
    }
    if (message.sourceTablesTruncated !== false) {
      writer.uint32(48).bool(message.sourceTablesTruncated);
    }
    if (message.destinationTable !== "") {
      writer.uint32(18).string(message.destinationTable);
    }
    if (message.createDisposition !== 0) {
      writer.uint32(24).int32(message.createDisposition);
    }
    if (message.writeDisposition !== 0) {
      writer.uint32(32).int32(message.writeDisposition);
    }
    if (message.destinationTableEncryption !== undefined) {
      BigQueryAuditMetadata_EncryptionInfo.encode(message.destinationTableEncryption, writer.uint32(42).fork()).join();
    }
    if (message.operationType !== 0) {
      writer.uint32(56).int32(message.operationType);
    }
    if (message.destinationExpirationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.destinationExpirationTime), writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_JobConfig_TableCopy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_JobConfig_TableCopy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sourceTables.push(reader.string());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.sourceTablesTruncated = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destinationTable = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.createDisposition = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.writeDisposition = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.destinationTableEncryption = BigQueryAuditMetadata_EncryptionInfo.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.operationType = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.destinationExpirationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_JobConfig_TableCopy {
    return {
      sourceTables: globalThis.Array.isArray(object?.sourceTables)
        ? object.sourceTables.map((e: any) => globalThis.String(e))
        : [],
      sourceTablesTruncated: isSet(object.sourceTablesTruncated)
        ? globalThis.Boolean(object.sourceTablesTruncated)
        : false,
      destinationTable: isSet(object.destinationTable) ? globalThis.String(object.destinationTable) : "",
      createDisposition: isSet(object.createDisposition)
        ? bigQueryAuditMetadata_CreateDispositionFromJSON(object.createDisposition)
        : 0,
      writeDisposition: isSet(object.writeDisposition)
        ? bigQueryAuditMetadata_WriteDispositionFromJSON(object.writeDisposition)
        : 0,
      destinationTableEncryption: isSet(object.destinationTableEncryption)
        ? BigQueryAuditMetadata_EncryptionInfo.fromJSON(object.destinationTableEncryption)
        : undefined,
      operationType: isSet(object.operationType)
        ? bigQueryAuditMetadata_OperationTypeFromJSON(object.operationType)
        : 0,
      destinationExpirationTime: isSet(object.destinationExpirationTime)
        ? fromJsonTimestamp(object.destinationExpirationTime)
        : undefined,
    };
  },

  toJSON(message: BigQueryAuditMetadata_JobConfig_TableCopy): unknown {
    const obj: any = {};
    if (message.sourceTables?.length) {
      obj.sourceTables = message.sourceTables;
    }
    if (message.sourceTablesTruncated !== false) {
      obj.sourceTablesTruncated = message.sourceTablesTruncated;
    }
    if (message.destinationTable !== "") {
      obj.destinationTable = message.destinationTable;
    }
    if (message.createDisposition !== 0) {
      obj.createDisposition = bigQueryAuditMetadata_CreateDispositionToJSON(message.createDisposition);
    }
    if (message.writeDisposition !== 0) {
      obj.writeDisposition = bigQueryAuditMetadata_WriteDispositionToJSON(message.writeDisposition);
    }
    if (message.destinationTableEncryption !== undefined) {
      obj.destinationTableEncryption = BigQueryAuditMetadata_EncryptionInfo.toJSON(message.destinationTableEncryption);
    }
    if (message.operationType !== 0) {
      obj.operationType = bigQueryAuditMetadata_OperationTypeToJSON(message.operationType);
    }
    if (message.destinationExpirationTime !== undefined) {
      obj.destinationExpirationTime = message.destinationExpirationTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_JobConfig_TableCopy>): BigQueryAuditMetadata_JobConfig_TableCopy {
    return BigQueryAuditMetadata_JobConfig_TableCopy.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BigQueryAuditMetadata_JobConfig_TableCopy>,
  ): BigQueryAuditMetadata_JobConfig_TableCopy {
    const message = createBaseBigQueryAuditMetadata_JobConfig_TableCopy();
    message.sourceTables = object.sourceTables?.map((e) => e) || [];
    message.sourceTablesTruncated = object.sourceTablesTruncated ?? false;
    message.destinationTable = object.destinationTable ?? "";
    message.createDisposition = object.createDisposition ?? 0;
    message.writeDisposition = object.writeDisposition ?? 0;
    message.destinationTableEncryption =
      (object.destinationTableEncryption !== undefined && object.destinationTableEncryption !== null)
        ? BigQueryAuditMetadata_EncryptionInfo.fromPartial(object.destinationTableEncryption)
        : undefined;
    message.operationType = object.operationType ?? 0;
    message.destinationExpirationTime = object.destinationExpirationTime ?? undefined;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_JobConfig_LabelsEntry(): BigQueryAuditMetadata_JobConfig_LabelsEntry {
  return { key: "", value: "" };
}

export const BigQueryAuditMetadata_JobConfig_LabelsEntry: MessageFns<BigQueryAuditMetadata_JobConfig_LabelsEntry> = {
  encode(
    message: BigQueryAuditMetadata_JobConfig_LabelsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_JobConfig_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_JobConfig_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_JobConfig_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_JobConfig_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_JobConfig_LabelsEntry>): BigQueryAuditMetadata_JobConfig_LabelsEntry {
    return BigQueryAuditMetadata_JobConfig_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BigQueryAuditMetadata_JobConfig_LabelsEntry>,
  ): BigQueryAuditMetadata_JobConfig_LabelsEntry {
    const message = createBaseBigQueryAuditMetadata_JobConfig_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_TableDefinition(): BigQueryAuditMetadata_TableDefinition {
  return { name: "", sourceUris: [] };
}

export const BigQueryAuditMetadata_TableDefinition: MessageFns<BigQueryAuditMetadata_TableDefinition> = {
  encode(message: BigQueryAuditMetadata_TableDefinition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.sourceUris) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_TableDefinition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_TableDefinition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sourceUris.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_TableDefinition {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      sourceUris: globalThis.Array.isArray(object?.sourceUris)
        ? object.sourceUris.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: BigQueryAuditMetadata_TableDefinition): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.sourceUris?.length) {
      obj.sourceUris = message.sourceUris;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_TableDefinition>): BigQueryAuditMetadata_TableDefinition {
    return BigQueryAuditMetadata_TableDefinition.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_TableDefinition>): BigQueryAuditMetadata_TableDefinition {
    const message = createBaseBigQueryAuditMetadata_TableDefinition();
    message.name = object.name ?? "";
    message.sourceUris = object.sourceUris?.map((e) => e) || [];
    return message;
  },
};

function createBaseBigQueryAuditMetadata_JobStatus(): BigQueryAuditMetadata_JobStatus {
  return { jobState: 0, errorResult: undefined, errors: [] };
}

export const BigQueryAuditMetadata_JobStatus: MessageFns<BigQueryAuditMetadata_JobStatus> = {
  encode(message: BigQueryAuditMetadata_JobStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobState !== 0) {
      writer.uint32(8).int32(message.jobState);
    }
    if (message.errorResult !== undefined) {
      Status.encode(message.errorResult, writer.uint32(18).fork()).join();
    }
    for (const v of message.errors) {
      Status.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_JobStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_JobStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.jobState = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorResult = Status.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.errors.push(Status.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_JobStatus {
    return {
      jobState: isSet(object.jobState) ? bigQueryAuditMetadata_JobStateFromJSON(object.jobState) : 0,
      errorResult: isSet(object.errorResult) ? Status.fromJSON(object.errorResult) : undefined,
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => Status.fromJSON(e)) : [],
    };
  },

  toJSON(message: BigQueryAuditMetadata_JobStatus): unknown {
    const obj: any = {};
    if (message.jobState !== 0) {
      obj.jobState = bigQueryAuditMetadata_JobStateToJSON(message.jobState);
    }
    if (message.errorResult !== undefined) {
      obj.errorResult = Status.toJSON(message.errorResult);
    }
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => Status.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_JobStatus>): BigQueryAuditMetadata_JobStatus {
    return BigQueryAuditMetadata_JobStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_JobStatus>): BigQueryAuditMetadata_JobStatus {
    const message = createBaseBigQueryAuditMetadata_JobStatus();
    message.jobState = object.jobState ?? 0;
    message.errorResult = (object.errorResult !== undefined && object.errorResult !== null)
      ? Status.fromPartial(object.errorResult)
      : undefined;
    message.errors = object.errors?.map((e) => Status.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBigQueryAuditMetadata_JobStats(): BigQueryAuditMetadata_JobStats {
  return {
    createTime: undefined,
    startTime: undefined,
    endTime: undefined,
    queryStats: undefined,
    loadStats: undefined,
    extractStats: undefined,
    totalSlotMs: Long.ZERO,
    reservationUsage: [],
    reservation: "",
    parentJobName: "",
  };
}

export const BigQueryAuditMetadata_JobStats: MessageFns<BigQueryAuditMetadata_JobStats> = {
  encode(message: BigQueryAuditMetadata_JobStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(18).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(26).fork()).join();
    }
    if (message.queryStats !== undefined) {
      BigQueryAuditMetadata_JobStats_Query.encode(message.queryStats, writer.uint32(66).fork()).join();
    }
    if (message.loadStats !== undefined) {
      BigQueryAuditMetadata_JobStats_Load.encode(message.loadStats, writer.uint32(74).fork()).join();
    }
    if (message.extractStats !== undefined) {
      BigQueryAuditMetadata_JobStats_Extract.encode(message.extractStats, writer.uint32(106).fork()).join();
    }
    if (!message.totalSlotMs.equals(Long.ZERO)) {
      writer.uint32(80).int64(message.totalSlotMs.toString());
    }
    for (const v of message.reservationUsage) {
      BigQueryAuditMetadata_JobStats_ReservationResourceUsage.encode(v!, writer.uint32(90).fork()).join();
    }
    if (message.reservation !== "") {
      writer.uint32(114).string(message.reservation);
    }
    if (message.parentJobName !== "") {
      writer.uint32(98).string(message.parentJobName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_JobStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_JobStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.queryStats = BigQueryAuditMetadata_JobStats_Query.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.loadStats = BigQueryAuditMetadata_JobStats_Load.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.extractStats = BigQueryAuditMetadata_JobStats_Extract.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.totalSlotMs = Long.fromString(reader.int64().toString());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.reservationUsage.push(
            BigQueryAuditMetadata_JobStats_ReservationResourceUsage.decode(reader, reader.uint32()),
          );
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.reservation = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.parentJobName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_JobStats {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      queryStats: isSet(object.queryStats)
        ? BigQueryAuditMetadata_JobStats_Query.fromJSON(object.queryStats)
        : undefined,
      loadStats: isSet(object.loadStats) ? BigQueryAuditMetadata_JobStats_Load.fromJSON(object.loadStats) : undefined,
      extractStats: isSet(object.extractStats)
        ? BigQueryAuditMetadata_JobStats_Extract.fromJSON(object.extractStats)
        : undefined,
      totalSlotMs: isSet(object.totalSlotMs) ? Long.fromValue(object.totalSlotMs) : Long.ZERO,
      reservationUsage: globalThis.Array.isArray(object?.reservationUsage)
        ? object.reservationUsage.map((e: any) => BigQueryAuditMetadata_JobStats_ReservationResourceUsage.fromJSON(e))
        : [],
      reservation: isSet(object.reservation) ? globalThis.String(object.reservation) : "",
      parentJobName: isSet(object.parentJobName) ? globalThis.String(object.parentJobName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_JobStats): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.queryStats !== undefined) {
      obj.queryStats = BigQueryAuditMetadata_JobStats_Query.toJSON(message.queryStats);
    }
    if (message.loadStats !== undefined) {
      obj.loadStats = BigQueryAuditMetadata_JobStats_Load.toJSON(message.loadStats);
    }
    if (message.extractStats !== undefined) {
      obj.extractStats = BigQueryAuditMetadata_JobStats_Extract.toJSON(message.extractStats);
    }
    if (!message.totalSlotMs.equals(Long.ZERO)) {
      obj.totalSlotMs = (message.totalSlotMs || Long.ZERO).toString();
    }
    if (message.reservationUsage?.length) {
      obj.reservationUsage = message.reservationUsage.map((e) =>
        BigQueryAuditMetadata_JobStats_ReservationResourceUsage.toJSON(e)
      );
    }
    if (message.reservation !== "") {
      obj.reservation = message.reservation;
    }
    if (message.parentJobName !== "") {
      obj.parentJobName = message.parentJobName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_JobStats>): BigQueryAuditMetadata_JobStats {
    return BigQueryAuditMetadata_JobStats.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_JobStats>): BigQueryAuditMetadata_JobStats {
    const message = createBaseBigQueryAuditMetadata_JobStats();
    message.createTime = object.createTime ?? undefined;
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.queryStats = (object.queryStats !== undefined && object.queryStats !== null)
      ? BigQueryAuditMetadata_JobStats_Query.fromPartial(object.queryStats)
      : undefined;
    message.loadStats = (object.loadStats !== undefined && object.loadStats !== null)
      ? BigQueryAuditMetadata_JobStats_Load.fromPartial(object.loadStats)
      : undefined;
    message.extractStats = (object.extractStats !== undefined && object.extractStats !== null)
      ? BigQueryAuditMetadata_JobStats_Extract.fromPartial(object.extractStats)
      : undefined;
    message.totalSlotMs = (object.totalSlotMs !== undefined && object.totalSlotMs !== null)
      ? Long.fromValue(object.totalSlotMs)
      : Long.ZERO;
    message.reservationUsage =
      object.reservationUsage?.map((e) => BigQueryAuditMetadata_JobStats_ReservationResourceUsage.fromPartial(e)) || [];
    message.reservation = object.reservation ?? "";
    message.parentJobName = object.parentJobName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_JobStats_Query(): BigQueryAuditMetadata_JobStats_Query {
  return {
    totalProcessedBytes: Long.ZERO,
    totalBilledBytes: Long.ZERO,
    billingTier: 0,
    referencedTables: [],
    referencedViews: [],
    referencedRoutines: [],
    outputRowCount: Long.ZERO,
    cacheHit: false,
  };
}

export const BigQueryAuditMetadata_JobStats_Query: MessageFns<BigQueryAuditMetadata_JobStats_Query> = {
  encode(message: BigQueryAuditMetadata_JobStats_Query, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.totalProcessedBytes.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.totalProcessedBytes.toString());
    }
    if (!message.totalBilledBytes.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.totalBilledBytes.toString());
    }
    if (message.billingTier !== 0) {
      writer.uint32(24).int32(message.billingTier);
    }
    for (const v of message.referencedTables) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.referencedViews) {
      writer.uint32(58).string(v!);
    }
    for (const v of message.referencedRoutines) {
      writer.uint32(82).string(v!);
    }
    if (!message.outputRowCount.equals(Long.ZERO)) {
      writer.uint32(64).int64(message.outputRowCount.toString());
    }
    if (message.cacheHit !== false) {
      writer.uint32(72).bool(message.cacheHit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_JobStats_Query {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_JobStats_Query();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.totalProcessedBytes = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.totalBilledBytes = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.billingTier = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.referencedTables.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.referencedViews.push(reader.string());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.referencedRoutines.push(reader.string());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.outputRowCount = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.cacheHit = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_JobStats_Query {
    return {
      totalProcessedBytes: isSet(object.totalProcessedBytes) ? Long.fromValue(object.totalProcessedBytes) : Long.ZERO,
      totalBilledBytes: isSet(object.totalBilledBytes) ? Long.fromValue(object.totalBilledBytes) : Long.ZERO,
      billingTier: isSet(object.billingTier) ? globalThis.Number(object.billingTier) : 0,
      referencedTables: globalThis.Array.isArray(object?.referencedTables)
        ? object.referencedTables.map((e: any) => globalThis.String(e))
        : [],
      referencedViews: globalThis.Array.isArray(object?.referencedViews)
        ? object.referencedViews.map((e: any) => globalThis.String(e))
        : [],
      referencedRoutines: globalThis.Array.isArray(object?.referencedRoutines)
        ? object.referencedRoutines.map((e: any) => globalThis.String(e))
        : [],
      outputRowCount: isSet(object.outputRowCount) ? Long.fromValue(object.outputRowCount) : Long.ZERO,
      cacheHit: isSet(object.cacheHit) ? globalThis.Boolean(object.cacheHit) : false,
    };
  },

  toJSON(message: BigQueryAuditMetadata_JobStats_Query): unknown {
    const obj: any = {};
    if (!message.totalProcessedBytes.equals(Long.ZERO)) {
      obj.totalProcessedBytes = (message.totalProcessedBytes || Long.ZERO).toString();
    }
    if (!message.totalBilledBytes.equals(Long.ZERO)) {
      obj.totalBilledBytes = (message.totalBilledBytes || Long.ZERO).toString();
    }
    if (message.billingTier !== 0) {
      obj.billingTier = Math.round(message.billingTier);
    }
    if (message.referencedTables?.length) {
      obj.referencedTables = message.referencedTables;
    }
    if (message.referencedViews?.length) {
      obj.referencedViews = message.referencedViews;
    }
    if (message.referencedRoutines?.length) {
      obj.referencedRoutines = message.referencedRoutines;
    }
    if (!message.outputRowCount.equals(Long.ZERO)) {
      obj.outputRowCount = (message.outputRowCount || Long.ZERO).toString();
    }
    if (message.cacheHit !== false) {
      obj.cacheHit = message.cacheHit;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_JobStats_Query>): BigQueryAuditMetadata_JobStats_Query {
    return BigQueryAuditMetadata_JobStats_Query.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_JobStats_Query>): BigQueryAuditMetadata_JobStats_Query {
    const message = createBaseBigQueryAuditMetadata_JobStats_Query();
    message.totalProcessedBytes = (object.totalProcessedBytes !== undefined && object.totalProcessedBytes !== null)
      ? Long.fromValue(object.totalProcessedBytes)
      : Long.ZERO;
    message.totalBilledBytes = (object.totalBilledBytes !== undefined && object.totalBilledBytes !== null)
      ? Long.fromValue(object.totalBilledBytes)
      : Long.ZERO;
    message.billingTier = object.billingTier ?? 0;
    message.referencedTables = object.referencedTables?.map((e) => e) || [];
    message.referencedViews = object.referencedViews?.map((e) => e) || [];
    message.referencedRoutines = object.referencedRoutines?.map((e) => e) || [];
    message.outputRowCount = (object.outputRowCount !== undefined && object.outputRowCount !== null)
      ? Long.fromValue(object.outputRowCount)
      : Long.ZERO;
    message.cacheHit = object.cacheHit ?? false;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_JobStats_Load(): BigQueryAuditMetadata_JobStats_Load {
  return { totalOutputBytes: Long.ZERO };
}

export const BigQueryAuditMetadata_JobStats_Load: MessageFns<BigQueryAuditMetadata_JobStats_Load> = {
  encode(message: BigQueryAuditMetadata_JobStats_Load, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.totalOutputBytes.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.totalOutputBytes.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_JobStats_Load {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_JobStats_Load();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.totalOutputBytes = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_JobStats_Load {
    return { totalOutputBytes: isSet(object.totalOutputBytes) ? Long.fromValue(object.totalOutputBytes) : Long.ZERO };
  },

  toJSON(message: BigQueryAuditMetadata_JobStats_Load): unknown {
    const obj: any = {};
    if (!message.totalOutputBytes.equals(Long.ZERO)) {
      obj.totalOutputBytes = (message.totalOutputBytes || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_JobStats_Load>): BigQueryAuditMetadata_JobStats_Load {
    return BigQueryAuditMetadata_JobStats_Load.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_JobStats_Load>): BigQueryAuditMetadata_JobStats_Load {
    const message = createBaseBigQueryAuditMetadata_JobStats_Load();
    message.totalOutputBytes = (object.totalOutputBytes !== undefined && object.totalOutputBytes !== null)
      ? Long.fromValue(object.totalOutputBytes)
      : Long.ZERO;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_JobStats_Extract(): BigQueryAuditMetadata_JobStats_Extract {
  return { totalInputBytes: Long.ZERO };
}

export const BigQueryAuditMetadata_JobStats_Extract: MessageFns<BigQueryAuditMetadata_JobStats_Extract> = {
  encode(message: BigQueryAuditMetadata_JobStats_Extract, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.totalInputBytes.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.totalInputBytes.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_JobStats_Extract {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_JobStats_Extract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.totalInputBytes = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_JobStats_Extract {
    return { totalInputBytes: isSet(object.totalInputBytes) ? Long.fromValue(object.totalInputBytes) : Long.ZERO };
  },

  toJSON(message: BigQueryAuditMetadata_JobStats_Extract): unknown {
    const obj: any = {};
    if (!message.totalInputBytes.equals(Long.ZERO)) {
      obj.totalInputBytes = (message.totalInputBytes || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_JobStats_Extract>): BigQueryAuditMetadata_JobStats_Extract {
    return BigQueryAuditMetadata_JobStats_Extract.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_JobStats_Extract>): BigQueryAuditMetadata_JobStats_Extract {
    const message = createBaseBigQueryAuditMetadata_JobStats_Extract();
    message.totalInputBytes = (object.totalInputBytes !== undefined && object.totalInputBytes !== null)
      ? Long.fromValue(object.totalInputBytes)
      : Long.ZERO;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_JobStats_ReservationResourceUsage(): BigQueryAuditMetadata_JobStats_ReservationResourceUsage {
  return { name: "", slotMs: Long.ZERO };
}

export const BigQueryAuditMetadata_JobStats_ReservationResourceUsage: MessageFns<
  BigQueryAuditMetadata_JobStats_ReservationResourceUsage
> = {
  encode(
    message: BigQueryAuditMetadata_JobStats_ReservationResourceUsage,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.slotMs.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.slotMs.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_JobStats_ReservationResourceUsage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_JobStats_ReservationResourceUsage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.slotMs = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_JobStats_ReservationResourceUsage {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      slotMs: isSet(object.slotMs) ? Long.fromValue(object.slotMs) : Long.ZERO,
    };
  },

  toJSON(message: BigQueryAuditMetadata_JobStats_ReservationResourceUsage): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.slotMs.equals(Long.ZERO)) {
      obj.slotMs = (message.slotMs || Long.ZERO).toString();
    }
    return obj;
  },

  create(
    base?: DeepPartial<BigQueryAuditMetadata_JobStats_ReservationResourceUsage>,
  ): BigQueryAuditMetadata_JobStats_ReservationResourceUsage {
    return BigQueryAuditMetadata_JobStats_ReservationResourceUsage.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BigQueryAuditMetadata_JobStats_ReservationResourceUsage>,
  ): BigQueryAuditMetadata_JobStats_ReservationResourceUsage {
    const message = createBaseBigQueryAuditMetadata_JobStats_ReservationResourceUsage();
    message.name = object.name ?? "";
    message.slotMs = (object.slotMs !== undefined && object.slotMs !== null)
      ? Long.fromValue(object.slotMs)
      : Long.ZERO;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_Table(): BigQueryAuditMetadata_Table {
  return {
    tableName: "",
    tableInfo: undefined,
    schemaJson: "",
    schemaJsonTruncated: false,
    view: undefined,
    expireTime: undefined,
    createTime: undefined,
    updateTime: undefined,
    truncateTime: undefined,
    encryption: undefined,
  };
}

export const BigQueryAuditMetadata_Table: MessageFns<BigQueryAuditMetadata_Table> = {
  encode(message: BigQueryAuditMetadata_Table, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tableName !== "") {
      writer.uint32(10).string(message.tableName);
    }
    if (message.tableInfo !== undefined) {
      BigQueryAuditMetadata_EntityInfo.encode(message.tableInfo, writer.uint32(82).fork()).join();
    }
    if (message.schemaJson !== "") {
      writer.uint32(26).string(message.schemaJson);
    }
    if (message.schemaJsonTruncated !== false) {
      writer.uint32(88).bool(message.schemaJsonTruncated);
    }
    if (message.view !== undefined) {
      BigQueryAuditMetadata_TableViewDefinition.encode(message.view, writer.uint32(34).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(42).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(58).fork()).join();
    }
    if (message.truncateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.truncateTime), writer.uint32(66).fork()).join();
    }
    if (message.encryption !== undefined) {
      BigQueryAuditMetadata_EncryptionInfo.encode(message.encryption, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_Table {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_Table();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tableName = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.tableInfo = BigQueryAuditMetadata_EntityInfo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schemaJson = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.schemaJsonTruncated = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.view = BigQueryAuditMetadata_TableViewDefinition.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.truncateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.encryption = BigQueryAuditMetadata_EncryptionInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_Table {
    return {
      tableName: isSet(object.tableName) ? globalThis.String(object.tableName) : "",
      tableInfo: isSet(object.tableInfo) ? BigQueryAuditMetadata_EntityInfo.fromJSON(object.tableInfo) : undefined,
      schemaJson: isSet(object.schemaJson) ? globalThis.String(object.schemaJson) : "",
      schemaJsonTruncated: isSet(object.schemaJsonTruncated) ? globalThis.Boolean(object.schemaJsonTruncated) : false,
      view: isSet(object.view) ? BigQueryAuditMetadata_TableViewDefinition.fromJSON(object.view) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      truncateTime: isSet(object.truncateTime) ? fromJsonTimestamp(object.truncateTime) : undefined,
      encryption: isSet(object.encryption)
        ? BigQueryAuditMetadata_EncryptionInfo.fromJSON(object.encryption)
        : undefined,
    };
  },

  toJSON(message: BigQueryAuditMetadata_Table): unknown {
    const obj: any = {};
    if (message.tableName !== "") {
      obj.tableName = message.tableName;
    }
    if (message.tableInfo !== undefined) {
      obj.tableInfo = BigQueryAuditMetadata_EntityInfo.toJSON(message.tableInfo);
    }
    if (message.schemaJson !== "") {
      obj.schemaJson = message.schemaJson;
    }
    if (message.schemaJsonTruncated !== false) {
      obj.schemaJsonTruncated = message.schemaJsonTruncated;
    }
    if (message.view !== undefined) {
      obj.view = BigQueryAuditMetadata_TableViewDefinition.toJSON(message.view);
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.truncateTime !== undefined) {
      obj.truncateTime = message.truncateTime.toISOString();
    }
    if (message.encryption !== undefined) {
      obj.encryption = BigQueryAuditMetadata_EncryptionInfo.toJSON(message.encryption);
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_Table>): BigQueryAuditMetadata_Table {
    return BigQueryAuditMetadata_Table.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_Table>): BigQueryAuditMetadata_Table {
    const message = createBaseBigQueryAuditMetadata_Table();
    message.tableName = object.tableName ?? "";
    message.tableInfo = (object.tableInfo !== undefined && object.tableInfo !== null)
      ? BigQueryAuditMetadata_EntityInfo.fromPartial(object.tableInfo)
      : undefined;
    message.schemaJson = object.schemaJson ?? "";
    message.schemaJsonTruncated = object.schemaJsonTruncated ?? false;
    message.view = (object.view !== undefined && object.view !== null)
      ? BigQueryAuditMetadata_TableViewDefinition.fromPartial(object.view)
      : undefined;
    message.expireTime = object.expireTime ?? undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.truncateTime = object.truncateTime ?? undefined;
    message.encryption = (object.encryption !== undefined && object.encryption !== null)
      ? BigQueryAuditMetadata_EncryptionInfo.fromPartial(object.encryption)
      : undefined;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_Model(): BigQueryAuditMetadata_Model {
  return {
    modelName: "",
    modelInfo: undefined,
    expireTime: undefined,
    createTime: undefined,
    updateTime: undefined,
    encryption: undefined,
  };
}

export const BigQueryAuditMetadata_Model: MessageFns<BigQueryAuditMetadata_Model> = {
  encode(message: BigQueryAuditMetadata_Model, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modelName !== "") {
      writer.uint32(10).string(message.modelName);
    }
    if (message.modelInfo !== undefined) {
      BigQueryAuditMetadata_EntityInfo.encode(message.modelInfo, writer.uint32(18).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(42).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(58).fork()).join();
    }
    if (message.encryption !== undefined) {
      BigQueryAuditMetadata_EncryptionInfo.encode(message.encryption, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_Model {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_Model();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.modelInfo = BigQueryAuditMetadata_EntityInfo.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.encryption = BigQueryAuditMetadata_EncryptionInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_Model {
    return {
      modelName: isSet(object.modelName) ? globalThis.String(object.modelName) : "",
      modelInfo: isSet(object.modelInfo) ? BigQueryAuditMetadata_EntityInfo.fromJSON(object.modelInfo) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      encryption: isSet(object.encryption)
        ? BigQueryAuditMetadata_EncryptionInfo.fromJSON(object.encryption)
        : undefined,
    };
  },

  toJSON(message: BigQueryAuditMetadata_Model): unknown {
    const obj: any = {};
    if (message.modelName !== "") {
      obj.modelName = message.modelName;
    }
    if (message.modelInfo !== undefined) {
      obj.modelInfo = BigQueryAuditMetadata_EntityInfo.toJSON(message.modelInfo);
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.encryption !== undefined) {
      obj.encryption = BigQueryAuditMetadata_EncryptionInfo.toJSON(message.encryption);
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_Model>): BigQueryAuditMetadata_Model {
    return BigQueryAuditMetadata_Model.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_Model>): BigQueryAuditMetadata_Model {
    const message = createBaseBigQueryAuditMetadata_Model();
    message.modelName = object.modelName ?? "";
    message.modelInfo = (object.modelInfo !== undefined && object.modelInfo !== null)
      ? BigQueryAuditMetadata_EntityInfo.fromPartial(object.modelInfo)
      : undefined;
    message.expireTime = object.expireTime ?? undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.encryption = (object.encryption !== undefined && object.encryption !== null)
      ? BigQueryAuditMetadata_EncryptionInfo.fromPartial(object.encryption)
      : undefined;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_Routine(): BigQueryAuditMetadata_Routine {
  return { routineName: "", createTime: undefined, updateTime: undefined };
}

export const BigQueryAuditMetadata_Routine: MessageFns<BigQueryAuditMetadata_Routine> = {
  encode(message: BigQueryAuditMetadata_Routine, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.routineName !== "") {
      writer.uint32(10).string(message.routineName);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_Routine {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_Routine();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.routineName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_Routine {
    return {
      routineName: isSet(object.routineName) ? globalThis.String(object.routineName) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: BigQueryAuditMetadata_Routine): unknown {
    const obj: any = {};
    if (message.routineName !== "") {
      obj.routineName = message.routineName;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_Routine>): BigQueryAuditMetadata_Routine {
    return BigQueryAuditMetadata_Routine.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_Routine>): BigQueryAuditMetadata_Routine {
    const message = createBaseBigQueryAuditMetadata_Routine();
    message.routineName = object.routineName ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_EntityInfo(): BigQueryAuditMetadata_EntityInfo {
  return { friendlyName: "", description: "", labels: {} };
}

export const BigQueryAuditMetadata_EntityInfo: MessageFns<BigQueryAuditMetadata_EntityInfo> = {
  encode(message: BigQueryAuditMetadata_EntityInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.friendlyName !== "") {
      writer.uint32(10).string(message.friendlyName);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      BigQueryAuditMetadata_EntityInfo_LabelsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_EntityInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_EntityInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.friendlyName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = BigQueryAuditMetadata_EntityInfo_LabelsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.labels[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_EntityInfo {
    return {
      friendlyName: isSet(object.friendlyName) ? globalThis.String(object.friendlyName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: BigQueryAuditMetadata_EntityInfo): unknown {
    const obj: any = {};
    if (message.friendlyName !== "") {
      obj.friendlyName = message.friendlyName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_EntityInfo>): BigQueryAuditMetadata_EntityInfo {
    return BigQueryAuditMetadata_EntityInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_EntityInfo>): BigQueryAuditMetadata_EntityInfo {
    const message = createBaseBigQueryAuditMetadata_EntityInfo();
    message.friendlyName = object.friendlyName ?? "";
    message.description = object.description ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseBigQueryAuditMetadata_EntityInfo_LabelsEntry(): BigQueryAuditMetadata_EntityInfo_LabelsEntry {
  return { key: "", value: "" };
}

export const BigQueryAuditMetadata_EntityInfo_LabelsEntry: MessageFns<BigQueryAuditMetadata_EntityInfo_LabelsEntry> = {
  encode(
    message: BigQueryAuditMetadata_EntityInfo_LabelsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_EntityInfo_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_EntityInfo_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_EntityInfo_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_EntityInfo_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<BigQueryAuditMetadata_EntityInfo_LabelsEntry>,
  ): BigQueryAuditMetadata_EntityInfo_LabelsEntry {
    return BigQueryAuditMetadata_EntityInfo_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BigQueryAuditMetadata_EntityInfo_LabelsEntry>,
  ): BigQueryAuditMetadata_EntityInfo_LabelsEntry {
    const message = createBaseBigQueryAuditMetadata_EntityInfo_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_TableViewDefinition(): BigQueryAuditMetadata_TableViewDefinition {
  return { query: "", queryTruncated: false };
}

export const BigQueryAuditMetadata_TableViewDefinition: MessageFns<BigQueryAuditMetadata_TableViewDefinition> = {
  encode(message: BigQueryAuditMetadata_TableViewDefinition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== "") {
      writer.uint32(10).string(message.query);
    }
    if (message.queryTruncated !== false) {
      writer.uint32(16).bool(message.queryTruncated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_TableViewDefinition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_TableViewDefinition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.queryTruncated = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_TableViewDefinition {
    return {
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      queryTruncated: isSet(object.queryTruncated) ? globalThis.Boolean(object.queryTruncated) : false,
    };
  },

  toJSON(message: BigQueryAuditMetadata_TableViewDefinition): unknown {
    const obj: any = {};
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.queryTruncated !== false) {
      obj.queryTruncated = message.queryTruncated;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_TableViewDefinition>): BigQueryAuditMetadata_TableViewDefinition {
    return BigQueryAuditMetadata_TableViewDefinition.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BigQueryAuditMetadata_TableViewDefinition>,
  ): BigQueryAuditMetadata_TableViewDefinition {
    const message = createBaseBigQueryAuditMetadata_TableViewDefinition();
    message.query = object.query ?? "";
    message.queryTruncated = object.queryTruncated ?? false;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_Dataset(): BigQueryAuditMetadata_Dataset {
  return {
    datasetName: "",
    datasetInfo: undefined,
    createTime: undefined,
    updateTime: undefined,
    acl: undefined,
    defaultTableExpireDuration: undefined,
    defaultEncryption: undefined,
    defaultCollation: "",
  };
}

export const BigQueryAuditMetadata_Dataset: MessageFns<BigQueryAuditMetadata_Dataset> = {
  encode(message: BigQueryAuditMetadata_Dataset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.datasetName !== "") {
      writer.uint32(10).string(message.datasetName);
    }
    if (message.datasetInfo !== undefined) {
      BigQueryAuditMetadata_EntityInfo.encode(message.datasetInfo, writer.uint32(58).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.acl !== undefined) {
      BigQueryAuditMetadata_BigQueryAcl.encode(message.acl, writer.uint32(42).fork()).join();
    }
    if (message.defaultTableExpireDuration !== undefined) {
      Duration.encode(message.defaultTableExpireDuration, writer.uint32(50).fork()).join();
    }
    if (message.defaultEncryption !== undefined) {
      BigQueryAuditMetadata_EncryptionInfo.encode(message.defaultEncryption, writer.uint32(66).fork()).join();
    }
    if (message.defaultCollation !== "") {
      writer.uint32(74).string(message.defaultCollation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_Dataset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_Dataset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.datasetName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.datasetInfo = BigQueryAuditMetadata_EntityInfo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.acl = BigQueryAuditMetadata_BigQueryAcl.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.defaultTableExpireDuration = Duration.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.defaultEncryption = BigQueryAuditMetadata_EncryptionInfo.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.defaultCollation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_Dataset {
    return {
      datasetName: isSet(object.datasetName) ? globalThis.String(object.datasetName) : "",
      datasetInfo: isSet(object.datasetInfo)
        ? BigQueryAuditMetadata_EntityInfo.fromJSON(object.datasetInfo)
        : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      acl: isSet(object.acl) ? BigQueryAuditMetadata_BigQueryAcl.fromJSON(object.acl) : undefined,
      defaultTableExpireDuration: isSet(object.defaultTableExpireDuration)
        ? Duration.fromJSON(object.defaultTableExpireDuration)
        : undefined,
      defaultEncryption: isSet(object.defaultEncryption)
        ? BigQueryAuditMetadata_EncryptionInfo.fromJSON(object.defaultEncryption)
        : undefined,
      defaultCollation: isSet(object.defaultCollation) ? globalThis.String(object.defaultCollation) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_Dataset): unknown {
    const obj: any = {};
    if (message.datasetName !== "") {
      obj.datasetName = message.datasetName;
    }
    if (message.datasetInfo !== undefined) {
      obj.datasetInfo = BigQueryAuditMetadata_EntityInfo.toJSON(message.datasetInfo);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.acl !== undefined) {
      obj.acl = BigQueryAuditMetadata_BigQueryAcl.toJSON(message.acl);
    }
    if (message.defaultTableExpireDuration !== undefined) {
      obj.defaultTableExpireDuration = Duration.toJSON(message.defaultTableExpireDuration);
    }
    if (message.defaultEncryption !== undefined) {
      obj.defaultEncryption = BigQueryAuditMetadata_EncryptionInfo.toJSON(message.defaultEncryption);
    }
    if (message.defaultCollation !== "") {
      obj.defaultCollation = message.defaultCollation;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_Dataset>): BigQueryAuditMetadata_Dataset {
    return BigQueryAuditMetadata_Dataset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_Dataset>): BigQueryAuditMetadata_Dataset {
    const message = createBaseBigQueryAuditMetadata_Dataset();
    message.datasetName = object.datasetName ?? "";
    message.datasetInfo = (object.datasetInfo !== undefined && object.datasetInfo !== null)
      ? BigQueryAuditMetadata_EntityInfo.fromPartial(object.datasetInfo)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.acl = (object.acl !== undefined && object.acl !== null)
      ? BigQueryAuditMetadata_BigQueryAcl.fromPartial(object.acl)
      : undefined;
    message.defaultTableExpireDuration =
      (object.defaultTableExpireDuration !== undefined && object.defaultTableExpireDuration !== null)
        ? Duration.fromPartial(object.defaultTableExpireDuration)
        : undefined;
    message.defaultEncryption = (object.defaultEncryption !== undefined && object.defaultEncryption !== null)
      ? BigQueryAuditMetadata_EncryptionInfo.fromPartial(object.defaultEncryption)
      : undefined;
    message.defaultCollation = object.defaultCollation ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_BigQueryAcl(): BigQueryAuditMetadata_BigQueryAcl {
  return { policy: undefined, authorizedViews: [] };
}

export const BigQueryAuditMetadata_BigQueryAcl: MessageFns<BigQueryAuditMetadata_BigQueryAcl> = {
  encode(message: BigQueryAuditMetadata_BigQueryAcl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      Policy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    for (const v of message.authorizedViews) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_BigQueryAcl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_BigQueryAcl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = Policy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.authorizedViews.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_BigQueryAcl {
    return {
      policy: isSet(object.policy) ? Policy.fromJSON(object.policy) : undefined,
      authorizedViews: globalThis.Array.isArray(object?.authorizedViews)
        ? object.authorizedViews.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: BigQueryAuditMetadata_BigQueryAcl): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = Policy.toJSON(message.policy);
    }
    if (message.authorizedViews?.length) {
      obj.authorizedViews = message.authorizedViews;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_BigQueryAcl>): BigQueryAuditMetadata_BigQueryAcl {
    return BigQueryAuditMetadata_BigQueryAcl.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_BigQueryAcl>): BigQueryAuditMetadata_BigQueryAcl {
    const message = createBaseBigQueryAuditMetadata_BigQueryAcl();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? Policy.fromPartial(object.policy)
      : undefined;
    message.authorizedViews = object.authorizedViews?.map((e) => e) || [];
    return message;
  },
};

function createBaseBigQueryAuditMetadata_EncryptionInfo(): BigQueryAuditMetadata_EncryptionInfo {
  return { kmsKeyName: "" };
}

export const BigQueryAuditMetadata_EncryptionInfo: MessageFns<BigQueryAuditMetadata_EncryptionInfo> = {
  encode(message: BigQueryAuditMetadata_EncryptionInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kmsKeyName !== "") {
      writer.uint32(10).string(message.kmsKeyName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_EncryptionInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_EncryptionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kmsKeyName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_EncryptionInfo {
    return { kmsKeyName: isSet(object.kmsKeyName) ? globalThis.String(object.kmsKeyName) : "" };
  },

  toJSON(message: BigQueryAuditMetadata_EncryptionInfo): unknown {
    const obj: any = {};
    if (message.kmsKeyName !== "") {
      obj.kmsKeyName = message.kmsKeyName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_EncryptionInfo>): BigQueryAuditMetadata_EncryptionInfo {
    return BigQueryAuditMetadata_EncryptionInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_EncryptionInfo>): BigQueryAuditMetadata_EncryptionInfo {
    const message = createBaseBigQueryAuditMetadata_EncryptionInfo();
    message.kmsKeyName = object.kmsKeyName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_RowAccessPolicy(): BigQueryAuditMetadata_RowAccessPolicy {
  return { rowAccessPolicyName: "" };
}

export const BigQueryAuditMetadata_RowAccessPolicy: MessageFns<BigQueryAuditMetadata_RowAccessPolicy> = {
  encode(message: BigQueryAuditMetadata_RowAccessPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rowAccessPolicyName !== "") {
      writer.uint32(10).string(message.rowAccessPolicyName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_RowAccessPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_RowAccessPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rowAccessPolicyName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_RowAccessPolicy {
    return {
      rowAccessPolicyName: isSet(object.rowAccessPolicyName) ? globalThis.String(object.rowAccessPolicyName) : "",
    };
  },

  toJSON(message: BigQueryAuditMetadata_RowAccessPolicy): unknown {
    const obj: any = {};
    if (message.rowAccessPolicyName !== "") {
      obj.rowAccessPolicyName = message.rowAccessPolicyName;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_RowAccessPolicy>): BigQueryAuditMetadata_RowAccessPolicy {
    return BigQueryAuditMetadata_RowAccessPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_RowAccessPolicy>): BigQueryAuditMetadata_RowAccessPolicy {
    const message = createBaseBigQueryAuditMetadata_RowAccessPolicy();
    message.rowAccessPolicyName = object.rowAccessPolicyName ?? "";
    return message;
  },
};

function createBaseBigQueryAuditMetadata_FirstPartyAppMetadata(): BigQueryAuditMetadata_FirstPartyAppMetadata {
  return { sheetsMetadata: undefined };
}

export const BigQueryAuditMetadata_FirstPartyAppMetadata: MessageFns<BigQueryAuditMetadata_FirstPartyAppMetadata> = {
  encode(
    message: BigQueryAuditMetadata_FirstPartyAppMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.sheetsMetadata !== undefined) {
      BigQueryAuditMetadata_SheetsMetadata.encode(message.sheetsMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_FirstPartyAppMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_FirstPartyAppMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sheetsMetadata = BigQueryAuditMetadata_SheetsMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_FirstPartyAppMetadata {
    return {
      sheetsMetadata: isSet(object.sheetsMetadata)
        ? BigQueryAuditMetadata_SheetsMetadata.fromJSON(object.sheetsMetadata)
        : undefined,
    };
  },

  toJSON(message: BigQueryAuditMetadata_FirstPartyAppMetadata): unknown {
    const obj: any = {};
    if (message.sheetsMetadata !== undefined) {
      obj.sheetsMetadata = BigQueryAuditMetadata_SheetsMetadata.toJSON(message.sheetsMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_FirstPartyAppMetadata>): BigQueryAuditMetadata_FirstPartyAppMetadata {
    return BigQueryAuditMetadata_FirstPartyAppMetadata.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BigQueryAuditMetadata_FirstPartyAppMetadata>,
  ): BigQueryAuditMetadata_FirstPartyAppMetadata {
    const message = createBaseBigQueryAuditMetadata_FirstPartyAppMetadata();
    message.sheetsMetadata = (object.sheetsMetadata !== undefined && object.sheetsMetadata !== null)
      ? BigQueryAuditMetadata_SheetsMetadata.fromPartial(object.sheetsMetadata)
      : undefined;
    return message;
  },
};

function createBaseBigQueryAuditMetadata_SheetsMetadata(): BigQueryAuditMetadata_SheetsMetadata {
  return { docId: "" };
}

export const BigQueryAuditMetadata_SheetsMetadata: MessageFns<BigQueryAuditMetadata_SheetsMetadata> = {
  encode(message: BigQueryAuditMetadata_SheetsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.docId !== "") {
      writer.uint32(10).string(message.docId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryAuditMetadata_SheetsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryAuditMetadata_SheetsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.docId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryAuditMetadata_SheetsMetadata {
    return { docId: isSet(object.docId) ? globalThis.String(object.docId) : "" };
  },

  toJSON(message: BigQueryAuditMetadata_SheetsMetadata): unknown {
    const obj: any = {};
    if (message.docId !== "") {
      obj.docId = message.docId;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryAuditMetadata_SheetsMetadata>): BigQueryAuditMetadata_SheetsMetadata {
    return BigQueryAuditMetadata_SheetsMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryAuditMetadata_SheetsMetadata>): BigQueryAuditMetadata_SheetsMetadata {
    const message = createBaseBigQueryAuditMetadata_SheetsMetadata();
    message.docId = object.docId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
