// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/datacatalog/v1/dataplex_spec.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { IntegratedSystem, integratedSystemFromJSON, integratedSystemToJSON } from "./common.js";
import { PhysicalSchema } from "./physical_schema.js";

export const protobufPackage = "google.cloud.datacatalog.v1";

/** Common Dataplex fields. */
export interface DataplexSpec {
  /**
   * Fully qualified resource name of an asset in Dataplex, to which the
   * underlying data source (Cloud Storage bucket or BigQuery dataset) of the
   * entity is attached.
   */
  asset: string;
  /** Format of the data. */
  dataFormat:
    | PhysicalSchema
    | undefined;
  /** Compression format of the data, e.g., zip, gzip etc. */
  compressionFormat: string;
  /**
   * Project ID of the underlying Cloud Storage or BigQuery data. Note that
   * this may not be the same project as the correspondingly Dataplex lake /
   * zone / asset.
   */
  projectId: string;
}

/** Entry specyfication for a Dataplex fileset. */
export interface DataplexFilesetSpec {
  /** Common Dataplex fields. */
  dataplexSpec: DataplexSpec | undefined;
}

/** Entry specification for a Dataplex table. */
export interface DataplexTableSpec {
  /**
   * List of external tables registered by Dataplex in other systems based on
   * the same underlying data.
   *
   * External tables allow to query this data in those systems.
   */
  externalTables: DataplexExternalTable[];
  /** Common Dataplex fields. */
  dataplexSpec:
    | DataplexSpec
    | undefined;
  /** Indicates if the table schema is managed by the user or not. */
  userManaged: boolean;
}

/**
 * External table registered by Dataplex.
 * Dataplex publishes data discovered from an asset into multiple other systems
 * (BigQuery, DPMS) in form of tables. We call them "external tables". External
 * tables are also synced into the Data Catalog.
 * This message contains pointers to
 * those external tables (fully qualified name, resource name et cetera) within
 * the Data Catalog.
 */
export interface DataplexExternalTable {
  /** Service in which the external table is registered. */
  system: IntegratedSystem;
  /** Fully qualified name (FQN) of the external table. */
  fullyQualifiedName: string;
  /** Google Cloud resource name of the external table. */
  googleCloudResource: string;
  /** Name of the Data Catalog entry representing the external table. */
  dataCatalogEntry: string;
}

function createBaseDataplexSpec(): DataplexSpec {
  return { asset: "", dataFormat: undefined, compressionFormat: "", projectId: "" };
}

export const DataplexSpec: MessageFns<DataplexSpec> = {
  encode(message: DataplexSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.dataFormat !== undefined) {
      PhysicalSchema.encode(message.dataFormat, writer.uint32(18).fork()).join();
    }
    if (message.compressionFormat !== "") {
      writer.uint32(26).string(message.compressionFormat);
    }
    if (message.projectId !== "") {
      writer.uint32(34).string(message.projectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataplexSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataplexSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataFormat = PhysicalSchema.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.compressionFormat = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.projectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataplexSpec {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      dataFormat: isSet(object.dataFormat) ? PhysicalSchema.fromJSON(object.dataFormat) : undefined,
      compressionFormat: isSet(object.compressionFormat) ? globalThis.String(object.compressionFormat) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
    };
  },

  toJSON(message: DataplexSpec): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.dataFormat !== undefined) {
      obj.dataFormat = PhysicalSchema.toJSON(message.dataFormat);
    }
    if (message.compressionFormat !== "") {
      obj.compressionFormat = message.compressionFormat;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    return obj;
  },

  create(base?: DeepPartial<DataplexSpec>): DataplexSpec {
    return DataplexSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataplexSpec>): DataplexSpec {
    const message = createBaseDataplexSpec();
    message.asset = object.asset ?? "";
    message.dataFormat = (object.dataFormat !== undefined && object.dataFormat !== null)
      ? PhysicalSchema.fromPartial(object.dataFormat)
      : undefined;
    message.compressionFormat = object.compressionFormat ?? "";
    message.projectId = object.projectId ?? "";
    return message;
  },
};

function createBaseDataplexFilesetSpec(): DataplexFilesetSpec {
  return { dataplexSpec: undefined };
}

export const DataplexFilesetSpec: MessageFns<DataplexFilesetSpec> = {
  encode(message: DataplexFilesetSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataplexSpec !== undefined) {
      DataplexSpec.encode(message.dataplexSpec, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataplexFilesetSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataplexFilesetSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataplexSpec = DataplexSpec.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataplexFilesetSpec {
    return { dataplexSpec: isSet(object.dataplexSpec) ? DataplexSpec.fromJSON(object.dataplexSpec) : undefined };
  },

  toJSON(message: DataplexFilesetSpec): unknown {
    const obj: any = {};
    if (message.dataplexSpec !== undefined) {
      obj.dataplexSpec = DataplexSpec.toJSON(message.dataplexSpec);
    }
    return obj;
  },

  create(base?: DeepPartial<DataplexFilesetSpec>): DataplexFilesetSpec {
    return DataplexFilesetSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataplexFilesetSpec>): DataplexFilesetSpec {
    const message = createBaseDataplexFilesetSpec();
    message.dataplexSpec = (object.dataplexSpec !== undefined && object.dataplexSpec !== null)
      ? DataplexSpec.fromPartial(object.dataplexSpec)
      : undefined;
    return message;
  },
};

function createBaseDataplexTableSpec(): DataplexTableSpec {
  return { externalTables: [], dataplexSpec: undefined, userManaged: false };
}

export const DataplexTableSpec: MessageFns<DataplexTableSpec> = {
  encode(message: DataplexTableSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.externalTables) {
      DataplexExternalTable.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.dataplexSpec !== undefined) {
      DataplexSpec.encode(message.dataplexSpec, writer.uint32(18).fork()).join();
    }
    if (message.userManaged !== false) {
      writer.uint32(24).bool(message.userManaged);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataplexTableSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataplexTableSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.externalTables.push(DataplexExternalTable.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataplexSpec = DataplexSpec.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.userManaged = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataplexTableSpec {
    return {
      externalTables: globalThis.Array.isArray(object?.externalTables)
        ? object.externalTables.map((e: any) => DataplexExternalTable.fromJSON(e))
        : [],
      dataplexSpec: isSet(object.dataplexSpec) ? DataplexSpec.fromJSON(object.dataplexSpec) : undefined,
      userManaged: isSet(object.userManaged) ? globalThis.Boolean(object.userManaged) : false,
    };
  },

  toJSON(message: DataplexTableSpec): unknown {
    const obj: any = {};
    if (message.externalTables?.length) {
      obj.externalTables = message.externalTables.map((e) => DataplexExternalTable.toJSON(e));
    }
    if (message.dataplexSpec !== undefined) {
      obj.dataplexSpec = DataplexSpec.toJSON(message.dataplexSpec);
    }
    if (message.userManaged !== false) {
      obj.userManaged = message.userManaged;
    }
    return obj;
  },

  create(base?: DeepPartial<DataplexTableSpec>): DataplexTableSpec {
    return DataplexTableSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataplexTableSpec>): DataplexTableSpec {
    const message = createBaseDataplexTableSpec();
    message.externalTables = object.externalTables?.map((e) => DataplexExternalTable.fromPartial(e)) || [];
    message.dataplexSpec = (object.dataplexSpec !== undefined && object.dataplexSpec !== null)
      ? DataplexSpec.fromPartial(object.dataplexSpec)
      : undefined;
    message.userManaged = object.userManaged ?? false;
    return message;
  },
};

function createBaseDataplexExternalTable(): DataplexExternalTable {
  return { system: 0, fullyQualifiedName: "", googleCloudResource: "", dataCatalogEntry: "" };
}

export const DataplexExternalTable: MessageFns<DataplexExternalTable> = {
  encode(message: DataplexExternalTable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.system !== 0) {
      writer.uint32(8).int32(message.system);
    }
    if (message.fullyQualifiedName !== "") {
      writer.uint32(226).string(message.fullyQualifiedName);
    }
    if (message.googleCloudResource !== "") {
      writer.uint32(26).string(message.googleCloudResource);
    }
    if (message.dataCatalogEntry !== "") {
      writer.uint32(34).string(message.dataCatalogEntry);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataplexExternalTable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataplexExternalTable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.system = reader.int32() as any;
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.fullyQualifiedName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.googleCloudResource = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dataCatalogEntry = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataplexExternalTable {
    return {
      system: isSet(object.system) ? integratedSystemFromJSON(object.system) : 0,
      fullyQualifiedName: isSet(object.fullyQualifiedName) ? globalThis.String(object.fullyQualifiedName) : "",
      googleCloudResource: isSet(object.googleCloudResource) ? globalThis.String(object.googleCloudResource) : "",
      dataCatalogEntry: isSet(object.dataCatalogEntry) ? globalThis.String(object.dataCatalogEntry) : "",
    };
  },

  toJSON(message: DataplexExternalTable): unknown {
    const obj: any = {};
    if (message.system !== 0) {
      obj.system = integratedSystemToJSON(message.system);
    }
    if (message.fullyQualifiedName !== "") {
      obj.fullyQualifiedName = message.fullyQualifiedName;
    }
    if (message.googleCloudResource !== "") {
      obj.googleCloudResource = message.googleCloudResource;
    }
    if (message.dataCatalogEntry !== "") {
      obj.dataCatalogEntry = message.dataCatalogEntry;
    }
    return obj;
  },

  create(base?: DeepPartial<DataplexExternalTable>): DataplexExternalTable {
    return DataplexExternalTable.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataplexExternalTable>): DataplexExternalTable {
    const message = createBaseDataplexExternalTable();
    message.system = object.system ?? 0;
    message.fullyQualifiedName = object.fullyQualifiedName ?? "";
    message.googleCloudResource = object.googleCloudResource ?? "";
    message.dataCatalogEntry = object.dataCatalogEntry ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
