// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/datacatalog/v1/usage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.datacatalog.v1";

/**
 * Detailed statistics on the entry's usage.
 *
 * Usage statistics have the following limitations:
 *
 * - Only BigQuery tables have them.
 * - They only include BigQuery query jobs.
 * - They might be underestimated because wildcard table references
 *   are not yet counted. For more information, see
 *   [Querying multiple tables using a wildcard table]
 *   (https://cloud.google.com/bigquery/docs/querying-wildcard-tables)
 */
export interface UsageStats {
  /** The number of successful uses of the underlying entry. */
  totalCompletions: number;
  /** The number of failed attempts to use the underlying entry. */
  totalFailures: number;
  /** The number of cancelled attempts to use the underlying entry. */
  totalCancellations: number;
  /** Total time spent only on successful uses, in milliseconds. */
  totalExecutionTimeForCompletionsMillis: number;
}

/**
 * Common statistics on the entry's usage.
 *
 * They can be set on any system.
 */
export interface CommonUsageStats {
  /** View count in source system. */
  viewCount?: Long | undefined;
}

/**
 * The set of all usage signals that Data Catalog stores.
 *
 * Note: Usually, these signals are updated daily. In rare cases, an update may
 * fail but will be performed again on the next day.
 */
export interface UsageSignal {
  /** The end timestamp of the duration of usage statistics. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. BigQuery usage statistics over each of the predefined time
   * ranges.
   *
   * Supported time ranges are `{"24H", "7D", "30D"}`.
   */
  usageWithinTimeRange: { [key: string]: UsageStats };
  /**
   * Common usage statistics over each of the predefined time ranges.
   *
   * Supported time ranges are `{"24H", "7D", "30D", "Lifetime"}`.
   */
  commonUsageWithinTimeRange: { [key: string]: CommonUsageStats };
  /** Favorite count in the source system. */
  favoriteCount?: Long | undefined;
}

export interface UsageSignal_UsageWithinTimeRangeEntry {
  key: string;
  value: UsageStats | undefined;
}

export interface UsageSignal_CommonUsageWithinTimeRangeEntry {
  key: string;
  value: CommonUsageStats | undefined;
}

function createBaseUsageStats(): UsageStats {
  return { totalCompletions: 0, totalFailures: 0, totalCancellations: 0, totalExecutionTimeForCompletionsMillis: 0 };
}

export const UsageStats: MessageFns<UsageStats> = {
  encode(message: UsageStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalCompletions !== 0) {
      writer.uint32(13).float(message.totalCompletions);
    }
    if (message.totalFailures !== 0) {
      writer.uint32(21).float(message.totalFailures);
    }
    if (message.totalCancellations !== 0) {
      writer.uint32(29).float(message.totalCancellations);
    }
    if (message.totalExecutionTimeForCompletionsMillis !== 0) {
      writer.uint32(37).float(message.totalExecutionTimeForCompletionsMillis);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsageStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsageStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.totalCompletions = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.totalFailures = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.totalCancellations = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.totalExecutionTimeForCompletionsMillis = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsageStats {
    return {
      totalCompletions: isSet(object.totalCompletions) ? globalThis.Number(object.totalCompletions) : 0,
      totalFailures: isSet(object.totalFailures) ? globalThis.Number(object.totalFailures) : 0,
      totalCancellations: isSet(object.totalCancellations) ? globalThis.Number(object.totalCancellations) : 0,
      totalExecutionTimeForCompletionsMillis: isSet(object.totalExecutionTimeForCompletionsMillis)
        ? globalThis.Number(object.totalExecutionTimeForCompletionsMillis)
        : 0,
    };
  },

  toJSON(message: UsageStats): unknown {
    const obj: any = {};
    if (message.totalCompletions !== 0) {
      obj.totalCompletions = message.totalCompletions;
    }
    if (message.totalFailures !== 0) {
      obj.totalFailures = message.totalFailures;
    }
    if (message.totalCancellations !== 0) {
      obj.totalCancellations = message.totalCancellations;
    }
    if (message.totalExecutionTimeForCompletionsMillis !== 0) {
      obj.totalExecutionTimeForCompletionsMillis = message.totalExecutionTimeForCompletionsMillis;
    }
    return obj;
  },

  create(base?: DeepPartial<UsageStats>): UsageStats {
    return UsageStats.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UsageStats>): UsageStats {
    const message = createBaseUsageStats();
    message.totalCompletions = object.totalCompletions ?? 0;
    message.totalFailures = object.totalFailures ?? 0;
    message.totalCancellations = object.totalCancellations ?? 0;
    message.totalExecutionTimeForCompletionsMillis = object.totalExecutionTimeForCompletionsMillis ?? 0;
    return message;
  },
};

function createBaseCommonUsageStats(): CommonUsageStats {
  return { viewCount: undefined };
}

export const CommonUsageStats: MessageFns<CommonUsageStats> = {
  encode(message: CommonUsageStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.viewCount !== undefined) {
      writer.uint32(8).int64(message.viewCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonUsageStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonUsageStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.viewCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonUsageStats {
    return { viewCount: isSet(object.viewCount) ? Long.fromValue(object.viewCount) : undefined };
  },

  toJSON(message: CommonUsageStats): unknown {
    const obj: any = {};
    if (message.viewCount !== undefined) {
      obj.viewCount = (message.viewCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<CommonUsageStats>): CommonUsageStats {
    return CommonUsageStats.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommonUsageStats>): CommonUsageStats {
    const message = createBaseCommonUsageStats();
    message.viewCount = (object.viewCount !== undefined && object.viewCount !== null)
      ? Long.fromValue(object.viewCount)
      : undefined;
    return message;
  },
};

function createBaseUsageSignal(): UsageSignal {
  return { updateTime: undefined, usageWithinTimeRange: {}, commonUsageWithinTimeRange: {}, favoriteCount: undefined };
}

export const UsageSignal: MessageFns<UsageSignal> = {
  encode(message: UsageSignal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(10).fork()).join();
    }
    Object.entries(message.usageWithinTimeRange).forEach(([key, value]) => {
      UsageSignal_UsageWithinTimeRangeEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    Object.entries(message.commonUsageWithinTimeRange).forEach(([key, value]) => {
      UsageSignal_CommonUsageWithinTimeRangeEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    if (message.favoriteCount !== undefined) {
      writer.uint32(32).int64(message.favoriteCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsageSignal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsageSignal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = UsageSignal_UsageWithinTimeRangeEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.usageWithinTimeRange[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = UsageSignal_CommonUsageWithinTimeRangeEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.commonUsageWithinTimeRange[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.favoriteCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsageSignal {
    return {
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      usageWithinTimeRange: isObject(object.usageWithinTimeRange)
        ? Object.entries(object.usageWithinTimeRange).reduce<{ [key: string]: UsageStats }>((acc, [key, value]) => {
          acc[key] = UsageStats.fromJSON(value);
          return acc;
        }, {})
        : {},
      commonUsageWithinTimeRange: isObject(object.commonUsageWithinTimeRange)
        ? Object.entries(object.commonUsageWithinTimeRange).reduce<{ [key: string]: CommonUsageStats }>(
          (acc, [key, value]) => {
            acc[key] = CommonUsageStats.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      favoriteCount: isSet(object.favoriteCount) ? Long.fromValue(object.favoriteCount) : undefined,
    };
  },

  toJSON(message: UsageSignal): unknown {
    const obj: any = {};
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.usageWithinTimeRange) {
      const entries = Object.entries(message.usageWithinTimeRange);
      if (entries.length > 0) {
        obj.usageWithinTimeRange = {};
        entries.forEach(([k, v]) => {
          obj.usageWithinTimeRange[k] = UsageStats.toJSON(v);
        });
      }
    }
    if (message.commonUsageWithinTimeRange) {
      const entries = Object.entries(message.commonUsageWithinTimeRange);
      if (entries.length > 0) {
        obj.commonUsageWithinTimeRange = {};
        entries.forEach(([k, v]) => {
          obj.commonUsageWithinTimeRange[k] = CommonUsageStats.toJSON(v);
        });
      }
    }
    if (message.favoriteCount !== undefined) {
      obj.favoriteCount = (message.favoriteCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<UsageSignal>): UsageSignal {
    return UsageSignal.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UsageSignal>): UsageSignal {
    const message = createBaseUsageSignal();
    message.updateTime = object.updateTime ?? undefined;
    message.usageWithinTimeRange = Object.entries(object.usageWithinTimeRange ?? {}).reduce<
      { [key: string]: UsageStats }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = UsageStats.fromPartial(value);
      }
      return acc;
    }, {});
    message.commonUsageWithinTimeRange = Object.entries(object.commonUsageWithinTimeRange ?? {}).reduce<
      { [key: string]: CommonUsageStats }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = CommonUsageStats.fromPartial(value);
      }
      return acc;
    }, {});
    message.favoriteCount = (object.favoriteCount !== undefined && object.favoriteCount !== null)
      ? Long.fromValue(object.favoriteCount)
      : undefined;
    return message;
  },
};

function createBaseUsageSignal_UsageWithinTimeRangeEntry(): UsageSignal_UsageWithinTimeRangeEntry {
  return { key: "", value: undefined };
}

export const UsageSignal_UsageWithinTimeRangeEntry: MessageFns<UsageSignal_UsageWithinTimeRangeEntry> = {
  encode(message: UsageSignal_UsageWithinTimeRangeEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      UsageStats.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsageSignal_UsageWithinTimeRangeEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsageSignal_UsageWithinTimeRangeEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = UsageStats.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsageSignal_UsageWithinTimeRangeEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? UsageStats.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: UsageSignal_UsageWithinTimeRangeEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = UsageStats.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<UsageSignal_UsageWithinTimeRangeEntry>): UsageSignal_UsageWithinTimeRangeEntry {
    return UsageSignal_UsageWithinTimeRangeEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UsageSignal_UsageWithinTimeRangeEntry>): UsageSignal_UsageWithinTimeRangeEntry {
    const message = createBaseUsageSignal_UsageWithinTimeRangeEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? UsageStats.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseUsageSignal_CommonUsageWithinTimeRangeEntry(): UsageSignal_CommonUsageWithinTimeRangeEntry {
  return { key: "", value: undefined };
}

export const UsageSignal_CommonUsageWithinTimeRangeEntry: MessageFns<UsageSignal_CommonUsageWithinTimeRangeEntry> = {
  encode(
    message: UsageSignal_CommonUsageWithinTimeRangeEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      CommonUsageStats.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsageSignal_CommonUsageWithinTimeRangeEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsageSignal_CommonUsageWithinTimeRangeEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = CommonUsageStats.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsageSignal_CommonUsageWithinTimeRangeEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? CommonUsageStats.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: UsageSignal_CommonUsageWithinTimeRangeEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = CommonUsageStats.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<UsageSignal_CommonUsageWithinTimeRangeEntry>): UsageSignal_CommonUsageWithinTimeRangeEntry {
    return UsageSignal_CommonUsageWithinTimeRangeEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UsageSignal_CommonUsageWithinTimeRangeEntry>,
  ): UsageSignal_CommonUsageWithinTimeRangeEntry {
    const message = createBaseUsageSignal_CommonUsageWithinTimeRangeEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? CommonUsageStats.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
