// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/datacatalog/v1beta1/datacatalog.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { IntegratedSystem, integratedSystemFromJSON, integratedSystemToJSON } from "./common.js";
import { GcsFilesetSpec } from "./gcs_fileset_spec.js";
import { Schema } from "./schema.js";
import { SearchCatalogResult } from "./search.js";
import { BigQueryDateShardedSpec, BigQueryTableSpec } from "./table_spec.js";
import { Tag, TagTemplate, TagTemplateField } from "./tags.js";
import { SystemTimestamps } from "./timestamps.js";
import { UsageSignal } from "./usage.js";

export const protobufPackage = "google.cloud.datacatalog.v1beta1";

/**
 * Entry resources in Data Catalog can be of different types e.g. a BigQuery
 * Table entry is of type `TABLE`. This enum describes all the possible types
 * Data Catalog contains.
 */
export enum EntryType {
  /** ENTRY_TYPE_UNSPECIFIED - Default unknown type. */
  ENTRY_TYPE_UNSPECIFIED = 0,
  /**
   * TABLE - Output only. The type of entry that has a GoogleSQL schema, including
   * logical views.
   */
  TABLE = 2,
  /**
   * MODEL - Output only. The type of models.
   * https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro
   */
  MODEL = 5,
  /**
   * DATA_STREAM - Output only. An entry type which is used for streaming entries. Example:
   * Pub/Sub topic.
   */
  DATA_STREAM = 3,
  /**
   * FILESET - An entry type which is a set of files or objects. Example:
   * Cloud Storage fileset.
   */
  FILESET = 4,
  UNRECOGNIZED = -1,
}

export function entryTypeFromJSON(object: any): EntryType {
  switch (object) {
    case 0:
    case "ENTRY_TYPE_UNSPECIFIED":
      return EntryType.ENTRY_TYPE_UNSPECIFIED;
    case 2:
    case "TABLE":
      return EntryType.TABLE;
    case 5:
    case "MODEL":
      return EntryType.MODEL;
    case 3:
    case "DATA_STREAM":
      return EntryType.DATA_STREAM;
    case 4:
    case "FILESET":
      return EntryType.FILESET;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EntryType.UNRECOGNIZED;
  }
}

export function entryTypeToJSON(object: EntryType): string {
  switch (object) {
    case EntryType.ENTRY_TYPE_UNSPECIFIED:
      return "ENTRY_TYPE_UNSPECIFIED";
    case EntryType.TABLE:
      return "TABLE";
    case EntryType.MODEL:
      return "MODEL";
    case EntryType.DATA_STREAM:
      return "DATA_STREAM";
    case EntryType.FILESET:
      return "FILESET";
    case EntryType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Request message for
 * [SearchCatalog][google.cloud.datacatalog.v1beta1.DataCatalog.SearchCatalog].
 */
export interface SearchCatalogRequest {
  /**
   * Required. The scope of this search request. A `scope` that has empty
   * `include_org_ids`, `include_project_ids` AND false
   * `include_gcp_public_datasets` is considered invalid. Data Catalog will
   * return an error in such a case.
   */
  scope:
    | SearchCatalogRequest_Scope
    | undefined;
  /**
   * Optional. The query string in search query syntax. An empty query string
   * will result in all data assets (in the specified scope) that the user has
   * access to. Query strings can be simple as "x" or more qualified as:
   *
   * * name:x
   * * column:x
   * * description:y
   *
   * Note: Query tokens need to have a minimum of 3 characters for substring
   * matching to work correctly. See [Data Catalog Search
   * Syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference)
   * for more information.
   */
  query: string;
  /**
   * Number of results in the search page. If <=0 then defaults to 10. Max limit
   * for page_size is 1000. Throws an invalid argument for page_size > 1000.
   */
  pageSize: number;
  /**
   * Optional. Pagination token returned in an earlier
   * [SearchCatalogResponse.next_page_token][google.cloud.datacatalog.v1beta1.SearchCatalogResponse.next_page_token],
   * which indicates that this is a continuation of a prior
   * [SearchCatalogRequest][google.cloud.datacatalog.v1beta1.DataCatalog.SearchCatalog]
   * call, and that the system should return the next page of data. If empty,
   * the first page is returned.
   */
  pageToken: string;
  /**
   * Specifies the ordering of results, currently supported case-sensitive
   * choices are:
   *
   *   * `relevance`, only supports descending
   *   * `last_modified_timestamp [asc|desc]`, defaults to descending if not
   *     specified
   *   * `default` that can only be descending
   *
   * If not specified, defaults to `relevance` descending.
   */
  orderBy: string;
}

/** The criteria that select the subspace used for query matching. */
export interface SearchCatalogRequest_Scope {
  /**
   * The list of organization IDs to search within. To find your organization
   * ID, follow instructions in
   * https://cloud.google.com/resource-manager/docs/creating-managing-organization.
   */
  includeOrgIds: string[];
  /**
   * The list of project IDs to search within. To learn more about the
   * distinction between project names/IDs/numbers, go to
   * https://cloud.google.com/docs/overview/#projects.
   */
  includeProjectIds: string[];
  /**
   * If `true`, include Google Cloud public datasets in the
   * search results. Info on Google Cloud public datasets is available at
   * https://cloud.google.com/public-datasets/. By default, Google Cloud
   * public datasets are excluded.
   */
  includeGcpPublicDatasets: boolean;
  /**
   * Optional. The list of locations to search within.
   * 1. If empty, search will be performed in all locations;
   * 2. If any of the locations are NOT in the valid locations list, error
   * will be returned;
   * 3. Otherwise, search only the given locations for matching results.
   * Typical usage is to leave this field empty. When a location is
   * unreachable as returned in the `SearchCatalogResponse.unreachable` field,
   * users can repeat the search request with this parameter set to get
   * additional information on the error.
   *
   * Valid locations:
   *  * asia-east1
   *  * asia-east2
   *  * asia-northeast1
   *  * asia-northeast2
   *  * asia-northeast3
   *  * asia-south1
   *  * asia-southeast1
   *  * australia-southeast1
   *  * eu
   *  * europe-north1
   *  * europe-west1
   *  * europe-west2
   *  * europe-west3
   *  * europe-west4
   *  * europe-west6
   *  * global
   *  * northamerica-northeast1
   *  * southamerica-east1
   *  * us
   *  * us-central1
   *  * us-east1
   *  * us-east4
   *  * us-west1
   *  * us-west2
   */
  restrictedLocations: string[];
}

/**
 * Response message for
 * [SearchCatalog][google.cloud.datacatalog.v1beta1.DataCatalog.SearchCatalog].
 */
export interface SearchCatalogResponse {
  /** Search results. */
  results: SearchCatalogResult[];
  /** The approximate total number of entries matched by the query. */
  totalSize: number;
  /** The token that can be used to retrieve the next page of results. */
  nextPageToken: string;
  /**
   * Unreachable locations. Search result does not include data from those
   * locations. Users can get additional information on the error by repeating
   * the search request with a more restrictive parameter -- setting the value
   * for `SearchDataCatalogRequest.scope.restricted_locations`.
   */
  unreachable: string[];
}

/**
 * Request message for
 * [CreateEntryGroup][google.cloud.datacatalog.v1beta1.DataCatalog.CreateEntryGroup].
 */
export interface CreateEntryGroupRequest {
  /**
   * Required. The name of the project this entry group is in. Example:
   *
   * * projects/{project_id}/locations/{location}
   *
   * Note that this EntryGroup and its child resources may not actually be
   * stored in the location in this name.
   */
  parent: string;
  /**
   * Required. The id of the entry group to create.
   * The id must begin with a letter or underscore, contain only English
   * letters, numbers and underscores, and be at most 64 characters.
   */
  entryGroupId: string;
  /** The entry group to create. Defaults to an empty entry group. */
  entryGroup: EntryGroup | undefined;
}

/**
 * Request message for
 * [UpdateEntryGroup][google.cloud.datacatalog.v1beta1.DataCatalog.UpdateEntryGroup].
 */
export interface UpdateEntryGroupRequest {
  /** Required. The updated entry group. "name" field must be set. */
  entryGroup:
    | EntryGroup
    | undefined;
  /**
   * Names of fields whose values to overwrite on an entry group.
   *
   * If this parameter is absent or empty, all modifiable fields
   * are overwritten. If such fields are non-required and omitted in the
   * request body, their values are emptied.
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [GetEntryGroup][google.cloud.datacatalog.v1beta1.DataCatalog.GetEntryGroup].
 */
export interface GetEntryGroupRequest {
  /**
   * Required. The name of the entry group. For example,
   * `projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}`.
   */
  name: string;
  /** The fields to return. If not set or empty, all fields are returned. */
  readMask: string[] | undefined;
}

/**
 * Request message for
 * [DeleteEntryGroup][google.cloud.datacatalog.v1beta1.DataCatalog.DeleteEntryGroup].
 */
export interface DeleteEntryGroupRequest {
  /**
   * Required. The name of the entry group. For example,
   * `projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}`.
   */
  name: string;
  /** Optional. If true, deletes all entries in the entry group. */
  force: boolean;
}

/**
 * Request message for
 * [ListEntryGroups][google.cloud.datacatalog.v1beta1.DataCatalog.ListEntryGroups].
 */
export interface ListEntryGroupsRequest {
  /**
   * Required. The name of the location that contains the entry groups, which
   * can be provided in URL format. Example:
   *
   * * projects/{project_id}/locations/{location}
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return. Default is 10. Max limit
   * is 1000. Throws an invalid argument for `page_size > 1000`.
   */
  pageSize: number;
  /**
   * Optional. Token that specifies which page is requested. If empty, the first
   * page is returned.
   */
  pageToken: string;
}

/**
 * Response message for
 * [ListEntryGroups][google.cloud.datacatalog.v1beta1.DataCatalog.ListEntryGroups].
 */
export interface ListEntryGroupsResponse {
  /** EntryGroup details. */
  entryGroups: EntryGroup[];
  /**
   * Token to retrieve the next page of results. It is set to empty if no items
   * remain in results.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [CreateEntry][google.cloud.datacatalog.v1beta1.DataCatalog.CreateEntry].
 */
export interface CreateEntryRequest {
  /**
   * Required. The name of the entry group this entry is in. Example:
   *
   * * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}
   *
   * Note that this Entry and its child resources may not actually be stored in
   * the location in this name.
   */
  parent: string;
  /** Required. The id of the entry to create. */
  entryId: string;
  /** Required. The entry to create. */
  entry: Entry | undefined;
}

/**
 * Request message for
 * [UpdateEntry][google.cloud.datacatalog.v1beta1.DataCatalog.UpdateEntry].
 */
export interface UpdateEntryRequest {
  /** Required. The updated entry. The "name" field must be set. */
  entry:
    | Entry
    | undefined;
  /**
   * Names of fields whose values to overwrite on an entry.
   *
   * If this parameter is absent or empty, all modifiable fields
   * are overwritten. If such fields are non-required and omitted in the
   * request body, their values are emptied.
   *
   * The following fields are modifiable:
   *
   * * For entries with type `DATA_STREAM`:
   *    * `schema`
   * * For entries with type `FILESET`:
   *    * `schema`
   *    * `display_name`
   *    * `description`
   *    * `gcs_fileset_spec`
   *    * `gcs_fileset_spec.file_patterns`
   * * For entries with `user_specified_type`:
   *    * `schema`
   *    * `display_name`
   *    * `description`
   *    * `user_specified_type`
   *    * `user_specified_system`
   *    * `linked_resource`
   *    * `source_system_timestamps`
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [DeleteEntry][google.cloud.datacatalog.v1beta1.DataCatalog.DeleteEntry].
 */
export interface DeleteEntryRequest {
  /**
   * Required. The name of the entry. Example:
   *
   * * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}
   */
  name: string;
}

/**
 * Request message for
 * [GetEntry][google.cloud.datacatalog.v1beta1.DataCatalog.GetEntry].
 */
export interface GetEntryRequest {
  /**
   * Required. The name of the entry. Example:
   *
   * * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}
   */
  name: string;
}

/**
 * Request message for
 * [LookupEntry][google.cloud.datacatalog.v1beta1.DataCatalog.LookupEntry].
 */
export interface LookupEntryRequest {
  /**
   * The full name of the Google Cloud Platform resource the Data Catalog
   * entry represents. See:
   * https://cloud.google.com/apis/design/resource_names#full_resource_name.
   * Full names are case-sensitive.
   *
   * Examples:
   *
   *  * //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId
   *  * //pubsub.googleapis.com/projects/projectId/topics/topicId
   */
  linkedResource?:
    | string
    | undefined;
  /**
   * The SQL name of the entry. SQL names are case-sensitive.
   *
   * Examples:
   *
   *   * `pubsub.project_id.topic_id`
   *   * ``pubsub.project_id.`topic.id.with.dots` ``
   *   * `bigquery.table.project_id.dataset_id.table_id`
   *   * `bigquery.dataset.project_id.dataset_id`
   *   * `datacatalog.entry.project_id.location_id.entry_group_id.entry_id`
   *
   * `*_id`s should satisfy the standard SQL rules for identifiers.
   * https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical.
   */
  sqlResource?: string | undefined;
}

/**
 * Entry Metadata.
 * A Data Catalog Entry resource represents another resource in Google
 * Cloud Platform (such as a BigQuery dataset or a Pub/Sub topic), or
 * outside of Google Cloud Platform. Clients can use the `linked_resource` field
 * in the Entry resource to refer to the original resource ID of the source
 * system.
 *
 * An Entry resource contains resource details, such as its schema. An Entry can
 * also be used to attach flexible metadata, such as a
 * [Tag][google.cloud.datacatalog.v1beta1.Tag].
 */
export interface Entry {
  /**
   * Output only. Identifier. The Data Catalog resource name of the entry in URL
   * format. Example:
   *
   * * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}
   *
   * Note that this Entry and its child resources may not actually be stored in
   * the location in this name.
   */
  name: string;
  /**
   * The resource this metadata entry refers to.
   *
   * For Google Cloud Platform resources, `linked_resource` is the [full name of
   * the
   * resource](https://cloud.google.com/apis/design/resource_names#full_resource_name).
   * For example, the `linked_resource` for a table resource from BigQuery is:
   *
   * * //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId
   *
   * Output only when Entry is of type in the EntryType enum. For entries with
   * user_specified_type, this field is optional and defaults to an empty
   * string.
   */
  linkedResource: string;
  /**
   * The type of the entry.
   * Only used for Entries with types in the EntryType enum.
   */
  type?:
    | EntryType
    | undefined;
  /**
   * Entry type if it does not fit any of the input-allowed values listed in
   * `EntryType` enum above. When creating an entry, users should check the
   * enum values first, if nothing matches the entry to be created, then
   * provide a custom value, for example "my_special_type".
   * `user_specified_type` strings must begin with a letter or underscore and
   * can only contain letters, numbers, and underscores; are case insensitive;
   * must be at least 1 character and at most 64 characters long.
   *
   * Currently, only FILESET enum value is allowed. All other entries created
   * through Data Catalog must use `user_specified_type`.
   */
  userSpecifiedType?:
    | string
    | undefined;
  /**
   * Output only. This field indicates the entry's source system that Data
   * Catalog integrates with, such as BigQuery or Pub/Sub.
   */
  integratedSystem?:
    | IntegratedSystem
    | undefined;
  /**
   * This field indicates the entry's source system that Data Catalog does not
   * integrate with. `user_specified_system` strings must begin with a letter
   * or underscore and can only contain letters, numbers, and underscores; are
   * case insensitive; must be at least 1 character and at most 64 characters
   * long.
   */
  userSpecifiedSystem?:
    | string
    | undefined;
  /**
   * Specification that applies to a Cloud Storage fileset. This is only valid
   * on entries of type FILESET.
   */
  gcsFilesetSpec?:
    | GcsFilesetSpec
    | undefined;
  /**
   * Specification that applies to a BigQuery table. This is only valid on
   * entries of type `TABLE`.
   */
  bigqueryTableSpec?:
    | BigQueryTableSpec
    | undefined;
  /**
   * Specification for a group of BigQuery tables with name pattern
   * `[prefix]YYYYMMDD`. Context:
   * https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding.
   */
  bigqueryDateShardedSpec?:
    | BigQueryDateShardedSpec
    | undefined;
  /**
   * Display information such as title and description. A short name to identify
   * the entry, for example, "Analytics Data - Jan 2011". Default value is an
   * empty string.
   */
  displayName: string;
  /**
   * Entry description, which can consist of several sentences or paragraphs
   * that describe entry contents. Default value is an empty string.
   */
  description: string;
  /** Schema of the entry. An entry might not have any schema attached to it. */
  schema:
    | Schema
    | undefined;
  /**
   * Output only. Timestamps about the underlying resource, not about this Data
   * Catalog entry. Output only when Entry is of type in the EntryType enum. For
   * entries with user_specified_type, this field is optional and defaults to an
   * empty timestamp.
   */
  sourceSystemTimestamps:
    | SystemTimestamps
    | undefined;
  /** Output only. Statistics on the usage level of the resource. */
  usageSignal: UsageSignal | undefined;
}

/**
 * EntryGroup Metadata.
 * An EntryGroup resource represents a logical grouping of zero or more
 * Data Catalog [Entry][google.cloud.datacatalog.v1beta1.Entry] resources.
 */
export interface EntryGroup {
  /**
   * Identifier. The resource name of the entry group in URL format. Example:
   *
   * * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}
   *
   * Note that this EntryGroup and its child resources may not actually be
   * stored in the location in this name.
   */
  name: string;
  /**
   * A short name to identify the entry group, for example,
   * "analytics data - jan 2011". Default value is an empty string.
   */
  displayName: string;
  /**
   * Entry group description, which can consist of several sentences or
   * paragraphs that describe entry group contents. Default value is an empty
   * string.
   */
  description: string;
  /**
   * Output only. Timestamps about this EntryGroup. Default value is empty
   * timestamps.
   */
  dataCatalogTimestamps: SystemTimestamps | undefined;
}

/**
 * Request message for
 * [CreateTagTemplate][google.cloud.datacatalog.v1beta1.DataCatalog.CreateTagTemplate].
 */
export interface CreateTagTemplateRequest {
  /**
   * Required. The name of the project and the template location
   * [region](https://cloud.google.com/data-catalog/docs/concepts/regions.
   *
   * Example:
   *
   * * projects/{project_id}/locations/us-central1
   */
  parent: string;
  /** Required. The id of the tag template to create. */
  tagTemplateId: string;
  /** Required. The tag template to create. */
  tagTemplate: TagTemplate | undefined;
}

/**
 * Request message for
 * [GetTagTemplate][google.cloud.datacatalog.v1beta1.DataCatalog.GetTagTemplate].
 */
export interface GetTagTemplateRequest {
  /**
   * Required. The name of the tag template. Example:
   *
   * * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}
   */
  name: string;
}

/**
 * Request message for
 * [UpdateTagTemplate][google.cloud.datacatalog.v1beta1.DataCatalog.UpdateTagTemplate].
 */
export interface UpdateTagTemplateRequest {
  /** Required. The template to update. The "name" field must be set. */
  tagTemplate:
    | TagTemplate
    | undefined;
  /**
   * Names of fields whose values to overwrite on a tag template. Currently,
   * only `display_name` can be overwritten.
   *
   * In general, if this parameter is absent or empty, all modifiable fields
   * are overwritten. If such fields are non-required and omitted in the
   * request body, their values are emptied.
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [DeleteTagTemplate][google.cloud.datacatalog.v1beta1.DataCatalog.DeleteTagTemplate].
 */
export interface DeleteTagTemplateRequest {
  /**
   * Required. The name of the tag template to delete. Example:
   *
   * * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}
   */
  name: string;
  /**
   * Required. Currently, this field must always be set to `true`.
   * This confirms the deletion of any possible tags using this template.
   * `force = false` will be supported in the future.
   */
  force: boolean;
}

/**
 * Request message for
 * [CreateTag][google.cloud.datacatalog.v1beta1.DataCatalog.CreateTag].
 */
export interface CreateTagRequest {
  /**
   * Required. The name of the resource to attach this tag to. Tags can be
   * attached to Entries. Example:
   *
   * * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}
   *
   * Note that this Tag and its child resources may not actually be stored in
   * the location in this name.
   */
  parent: string;
  /** Required. The tag to create. */
  tag: Tag | undefined;
}

/**
 * Request message for
 * [UpdateTag][google.cloud.datacatalog.v1beta1.DataCatalog.UpdateTag].
 */
export interface UpdateTagRequest {
  /** Required. The updated tag. The "name" field must be set. */
  tag:
    | Tag
    | undefined;
  /**
   * Note: Currently, this parameter can only take `"fields"` as value.
   *
   * Names of fields whose values to overwrite on a tag. Currently, a tag has
   * the only modifiable field with the name `fields`.
   *
   * In general, if this parameter is absent or empty, all modifiable fields
   * are overwritten. If such fields are non-required and omitted in the
   * request body, their values are emptied.
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [DeleteTag][google.cloud.datacatalog.v1beta1.DataCatalog.DeleteTag].
 */
export interface DeleteTagRequest {
  /**
   * Required. The name of the tag to delete. Example:
   *
   * * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id}
   */
  name: string;
}

/**
 * Request message for
 * [CreateTagTemplateField][google.cloud.datacatalog.v1beta1.DataCatalog.CreateTagTemplateField].
 */
export interface CreateTagTemplateFieldRequest {
  /**
   * Required. The name of the project and the template location
   * [region](https://cloud.google.com/data-catalog/docs/concepts/regions).
   *
   * Example:
   *
   * * projects/{project_id}/locations/us-central1/tagTemplates/{tag_template_id}
   */
  parent: string;
  /**
   * Required. The ID of the tag template field to create.
   * Field ids can contain letters (both uppercase and lowercase), numbers
   * (0-9), underscores (_) and dashes (-). Field IDs must be at least 1
   * character long and at most 128 characters long. Field IDs must also be
   * unique within their template.
   */
  tagTemplateFieldId: string;
  /** Required. The tag template field to create. */
  tagTemplateField: TagTemplateField | undefined;
}

/**
 * Request message for
 * [UpdateTagTemplateField][google.cloud.datacatalog.v1beta1.DataCatalog.UpdateTagTemplateField].
 */
export interface UpdateTagTemplateFieldRequest {
  /**
   * Required. The name of the tag template field. Example:
   *
   * * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}/fields/{tag_template_field_id}
   */
  name: string;
  /** Required. The template to update. */
  tagTemplateField:
    | TagTemplateField
    | undefined;
  /**
   * Optional. Names of fields whose values to overwrite on an individual field
   * of a tag template. The following fields are modifiable:
   *
   *   * `display_name`
   *   * `type.enum_type`
   *   * `is_required`
   *
   * If this parameter is absent or empty, all modifiable fields
   * are overwritten. If such fields are non-required and omitted in the request
   * body, their values are emptied with one exception: when updating an enum
   * type, the provided values are merged with the existing values. Therefore,
   * enum values can only be added, existing enum values cannot be deleted or
   * renamed.
   *
   * Additionally, updating a template field from optional to required is
   * *not* allowed.
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [RenameTagTemplateField][google.cloud.datacatalog.v1beta1.DataCatalog.RenameTagTemplateField].
 */
export interface RenameTagTemplateFieldRequest {
  /**
   * Required. The name of the tag template. Example:
   *
   * * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}/fields/{tag_template_field_id}
   */
  name: string;
  /**
   * Required. The new ID of this tag template field. For example,
   * `my_new_field`.
   */
  newTagTemplateFieldId: string;
}

/**
 * Request message for
 * [RenameTagTemplateFieldEnumValue][google.cloud.datacatalog.v1.DataCatalog.RenameTagTemplateFieldEnumValue].
 */
export interface RenameTagTemplateFieldEnumValueRequest {
  /**
   * Required. The name of the enum field value. Example:
   *
   * * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}/fields/{tag_template_field_id}/enumValues/{enum_value_display_name}
   */
  name: string;
  /**
   * Required. The new display name of the enum value. For example,
   * `my_new_enum_value`.
   */
  newEnumValueDisplayName: string;
}

/**
 * Request message for
 * [DeleteTagTemplateField][google.cloud.datacatalog.v1beta1.DataCatalog.DeleteTagTemplateField].
 */
export interface DeleteTagTemplateFieldRequest {
  /**
   * Required. The name of the tag template field to delete. Example:
   *
   * * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}/fields/{tag_template_field_id}
   */
  name: string;
  /**
   * Required. Currently, this field must always be set to `true`.
   * This confirms the deletion of this field from any tags using this field.
   * `force = false` will be supported in the future.
   */
  force: boolean;
}

/**
 * Request message for
 * [ListTags][google.cloud.datacatalog.v1beta1.DataCatalog.ListTags].
 */
export interface ListTagsRequest {
  /**
   * Required. The name of the Data Catalog resource to list the tags of. The
   * resource could be an [Entry][google.cloud.datacatalog.v1beta1.Entry] or an
   * [EntryGroup][google.cloud.datacatalog.v1beta1.EntryGroup].
   *
   * Examples:
   *
   * * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}
   * * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}
   */
  parent: string;
  /** The maximum number of tags to return. Default is 10. Max limit is 1000. */
  pageSize: number;
  /**
   * Token that specifies which page is requested. If empty, the first page is
   * returned.
   */
  pageToken: string;
}

/**
 * Response message for
 * [ListTags][google.cloud.datacatalog.v1beta1.DataCatalog.ListTags].
 */
export interface ListTagsResponse {
  /** [Tag][google.cloud.datacatalog.v1beta1.Tag] details. */
  tags: Tag[];
  /**
   * Token to retrieve the next page of results. It is set to empty if no items
   * remain in results.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [ListEntries][google.cloud.datacatalog.v1beta1.DataCatalog.ListEntries].
 */
export interface ListEntriesRequest {
  /**
   * Required. The name of the entry group that contains the entries, which can
   * be provided in URL format. Example:
   *
   * * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}
   */
  parent: string;
  /**
   * The maximum number of items to return. Default is 10. Max limit is 1000.
   * Throws an invalid argument for `page_size > 1000`.
   */
  pageSize: number;
  /**
   * Token that specifies which page is requested. If empty, the first page is
   * returned.
   */
  pageToken: string;
  /**
   * The fields to return for each Entry. If not set or empty, all
   * fields are returned.
   * For example, setting read_mask to contain only one path "name" will cause
   * ListEntries to return a list of Entries with only "name" field.
   */
  readMask: string[] | undefined;
}

/**
 * Response message for
 * [ListEntries][google.cloud.datacatalog.v1beta1.DataCatalog.ListEntries].
 */
export interface ListEntriesResponse {
  /** Entry details. */
  entries: Entry[];
  /**
   * Token to retrieve the next page of results. It is set to empty if no items
   * remain in results.
   */
  nextPageToken: string;
}

function createBaseSearchCatalogRequest(): SearchCatalogRequest {
  return { scope: undefined, query: "", pageSize: 0, pageToken: "", orderBy: "" };
}

export const SearchCatalogRequest: MessageFns<SearchCatalogRequest> = {
  encode(message: SearchCatalogRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scope !== undefined) {
      SearchCatalogRequest_Scope.encode(message.scope, writer.uint32(50).fork()).join();
    }
    if (message.query !== "") {
      writer.uint32(10).string(message.query);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchCatalogRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchCatalogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scope = SearchCatalogRequest_Scope.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchCatalogRequest {
    return {
      scope: isSet(object.scope) ? SearchCatalogRequest_Scope.fromJSON(object.scope) : undefined,
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: SearchCatalogRequest): unknown {
    const obj: any = {};
    if (message.scope !== undefined) {
      obj.scope = SearchCatalogRequest_Scope.toJSON(message.scope);
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchCatalogRequest>): SearchCatalogRequest {
    return SearchCatalogRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchCatalogRequest>): SearchCatalogRequest {
    const message = createBaseSearchCatalogRequest();
    message.scope = (object.scope !== undefined && object.scope !== null)
      ? SearchCatalogRequest_Scope.fromPartial(object.scope)
      : undefined;
    message.query = object.query ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseSearchCatalogRequest_Scope(): SearchCatalogRequest_Scope {
  return { includeOrgIds: [], includeProjectIds: [], includeGcpPublicDatasets: false, restrictedLocations: [] };
}

export const SearchCatalogRequest_Scope: MessageFns<SearchCatalogRequest_Scope> = {
  encode(message: SearchCatalogRequest_Scope, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.includeOrgIds) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.includeProjectIds) {
      writer.uint32(26).string(v!);
    }
    if (message.includeGcpPublicDatasets !== false) {
      writer.uint32(56).bool(message.includeGcpPublicDatasets);
    }
    for (const v of message.restrictedLocations) {
      writer.uint32(130).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchCatalogRequest_Scope {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchCatalogRequest_Scope();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.includeOrgIds.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.includeProjectIds.push(reader.string());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.includeGcpPublicDatasets = reader.bool();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.restrictedLocations.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchCatalogRequest_Scope {
    return {
      includeOrgIds: globalThis.Array.isArray(object?.includeOrgIds)
        ? object.includeOrgIds.map((e: any) => globalThis.String(e))
        : [],
      includeProjectIds: globalThis.Array.isArray(object?.includeProjectIds)
        ? object.includeProjectIds.map((e: any) => globalThis.String(e))
        : [],
      includeGcpPublicDatasets: isSet(object.includeGcpPublicDatasets)
        ? globalThis.Boolean(object.includeGcpPublicDatasets)
        : false,
      restrictedLocations: globalThis.Array.isArray(object?.restrictedLocations)
        ? object.restrictedLocations.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SearchCatalogRequest_Scope): unknown {
    const obj: any = {};
    if (message.includeOrgIds?.length) {
      obj.includeOrgIds = message.includeOrgIds;
    }
    if (message.includeProjectIds?.length) {
      obj.includeProjectIds = message.includeProjectIds;
    }
    if (message.includeGcpPublicDatasets !== false) {
      obj.includeGcpPublicDatasets = message.includeGcpPublicDatasets;
    }
    if (message.restrictedLocations?.length) {
      obj.restrictedLocations = message.restrictedLocations;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchCatalogRequest_Scope>): SearchCatalogRequest_Scope {
    return SearchCatalogRequest_Scope.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchCatalogRequest_Scope>): SearchCatalogRequest_Scope {
    const message = createBaseSearchCatalogRequest_Scope();
    message.includeOrgIds = object.includeOrgIds?.map((e) => e) || [];
    message.includeProjectIds = object.includeProjectIds?.map((e) => e) || [];
    message.includeGcpPublicDatasets = object.includeGcpPublicDatasets ?? false;
    message.restrictedLocations = object.restrictedLocations?.map((e) => e) || [];
    return message;
  },
};

function createBaseSearchCatalogResponse(): SearchCatalogResponse {
  return { results: [], totalSize: 0, nextPageToken: "", unreachable: [] };
}

export const SearchCatalogResponse: MessageFns<SearchCatalogResponse> = {
  encode(message: SearchCatalogResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.results) {
      SearchCatalogResult.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalSize !== 0) {
      writer.uint32(16).int32(message.totalSize);
    }
    if (message.nextPageToken !== "") {
      writer.uint32(26).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(50).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchCatalogResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchCatalogResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.results.push(SearchCatalogResult.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchCatalogResponse {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => SearchCatalogResult.fromJSON(e))
        : [],
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SearchCatalogResponse): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => SearchCatalogResult.toJSON(e));
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchCatalogResponse>): SearchCatalogResponse {
    return SearchCatalogResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchCatalogResponse>): SearchCatalogResponse {
    const message = createBaseSearchCatalogResponse();
    message.results = object.results?.map((e) => SearchCatalogResult.fromPartial(e)) || [];
    message.totalSize = object.totalSize ?? 0;
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateEntryGroupRequest(): CreateEntryGroupRequest {
  return { parent: "", entryGroupId: "", entryGroup: undefined };
}

export const CreateEntryGroupRequest: MessageFns<CreateEntryGroupRequest> = {
  encode(message: CreateEntryGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.entryGroupId !== "") {
      writer.uint32(26).string(message.entryGroupId);
    }
    if (message.entryGroup !== undefined) {
      EntryGroup.encode(message.entryGroup, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEntryGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEntryGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.entryGroupId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entryGroup = EntryGroup.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEntryGroupRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      entryGroupId: isSet(object.entryGroupId) ? globalThis.String(object.entryGroupId) : "",
      entryGroup: isSet(object.entryGroup) ? EntryGroup.fromJSON(object.entryGroup) : undefined,
    };
  },

  toJSON(message: CreateEntryGroupRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.entryGroupId !== "") {
      obj.entryGroupId = message.entryGroupId;
    }
    if (message.entryGroup !== undefined) {
      obj.entryGroup = EntryGroup.toJSON(message.entryGroup);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEntryGroupRequest>): CreateEntryGroupRequest {
    return CreateEntryGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEntryGroupRequest>): CreateEntryGroupRequest {
    const message = createBaseCreateEntryGroupRequest();
    message.parent = object.parent ?? "";
    message.entryGroupId = object.entryGroupId ?? "";
    message.entryGroup = (object.entryGroup !== undefined && object.entryGroup !== null)
      ? EntryGroup.fromPartial(object.entryGroup)
      : undefined;
    return message;
  },
};

function createBaseUpdateEntryGroupRequest(): UpdateEntryGroupRequest {
  return { entryGroup: undefined, updateMask: undefined };
}

export const UpdateEntryGroupRequest: MessageFns<UpdateEntryGroupRequest> = {
  encode(message: UpdateEntryGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entryGroup !== undefined) {
      EntryGroup.encode(message.entryGroup, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEntryGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEntryGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entryGroup = EntryGroup.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEntryGroupRequest {
    return {
      entryGroup: isSet(object.entryGroup) ? EntryGroup.fromJSON(object.entryGroup) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateEntryGroupRequest): unknown {
    const obj: any = {};
    if (message.entryGroup !== undefined) {
      obj.entryGroup = EntryGroup.toJSON(message.entryGroup);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEntryGroupRequest>): UpdateEntryGroupRequest {
    return UpdateEntryGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEntryGroupRequest>): UpdateEntryGroupRequest {
    const message = createBaseUpdateEntryGroupRequest();
    message.entryGroup = (object.entryGroup !== undefined && object.entryGroup !== null)
      ? EntryGroup.fromPartial(object.entryGroup)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetEntryGroupRequest(): GetEntryGroupRequest {
  return { name: "", readMask: undefined };
}

export const GetEntryGroupRequest: MessageFns<GetEntryGroupRequest> = {
  encode(message: GetEntryGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEntryGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEntryGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEntryGroupRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: GetEntryGroupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<GetEntryGroupRequest>): GetEntryGroupRequest {
    return GetEntryGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEntryGroupRequest>): GetEntryGroupRequest {
    const message = createBaseGetEntryGroupRequest();
    message.name = object.name ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseDeleteEntryGroupRequest(): DeleteEntryGroupRequest {
  return { name: "", force: false };
}

export const DeleteEntryGroupRequest: MessageFns<DeleteEntryGroupRequest> = {
  encode(message: DeleteEntryGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEntryGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEntryGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEntryGroupRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteEntryGroupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEntryGroupRequest>): DeleteEntryGroupRequest {
    return DeleteEntryGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEntryGroupRequest>): DeleteEntryGroupRequest {
    const message = createBaseDeleteEntryGroupRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseListEntryGroupsRequest(): ListEntryGroupsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListEntryGroupsRequest: MessageFns<ListEntryGroupsRequest> = {
  encode(message: ListEntryGroupsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEntryGroupsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEntryGroupsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEntryGroupsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListEntryGroupsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEntryGroupsRequest>): ListEntryGroupsRequest {
    return ListEntryGroupsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEntryGroupsRequest>): ListEntryGroupsRequest {
    const message = createBaseListEntryGroupsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListEntryGroupsResponse(): ListEntryGroupsResponse {
  return { entryGroups: [], nextPageToken: "" };
}

export const ListEntryGroupsResponse: MessageFns<ListEntryGroupsResponse> = {
  encode(message: ListEntryGroupsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entryGroups) {
      EntryGroup.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEntryGroupsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEntryGroupsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entryGroups.push(EntryGroup.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEntryGroupsResponse {
    return {
      entryGroups: globalThis.Array.isArray(object?.entryGroups)
        ? object.entryGroups.map((e: any) => EntryGroup.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListEntryGroupsResponse): unknown {
    const obj: any = {};
    if (message.entryGroups?.length) {
      obj.entryGroups = message.entryGroups.map((e) => EntryGroup.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEntryGroupsResponse>): ListEntryGroupsResponse {
    return ListEntryGroupsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEntryGroupsResponse>): ListEntryGroupsResponse {
    const message = createBaseListEntryGroupsResponse();
    message.entryGroups = object.entryGroups?.map((e) => EntryGroup.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateEntryRequest(): CreateEntryRequest {
  return { parent: "", entryId: "", entry: undefined };
}

export const CreateEntryRequest: MessageFns<CreateEntryRequest> = {
  encode(message: CreateEntryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.entryId !== "") {
      writer.uint32(26).string(message.entryId);
    }
    if (message.entry !== undefined) {
      Entry.encode(message.entry, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEntryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.entryId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entry = Entry.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEntryRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      entryId: isSet(object.entryId) ? globalThis.String(object.entryId) : "",
      entry: isSet(object.entry) ? Entry.fromJSON(object.entry) : undefined,
    };
  },

  toJSON(message: CreateEntryRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.entryId !== "") {
      obj.entryId = message.entryId;
    }
    if (message.entry !== undefined) {
      obj.entry = Entry.toJSON(message.entry);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEntryRequest>): CreateEntryRequest {
    return CreateEntryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEntryRequest>): CreateEntryRequest {
    const message = createBaseCreateEntryRequest();
    message.parent = object.parent ?? "";
    message.entryId = object.entryId ?? "";
    message.entry = (object.entry !== undefined && object.entry !== null) ? Entry.fromPartial(object.entry) : undefined;
    return message;
  },
};

function createBaseUpdateEntryRequest(): UpdateEntryRequest {
  return { entry: undefined, updateMask: undefined };
}

export const UpdateEntryRequest: MessageFns<UpdateEntryRequest> = {
  encode(message: UpdateEntryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entry !== undefined) {
      Entry.encode(message.entry, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEntryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entry = Entry.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEntryRequest {
    return {
      entry: isSet(object.entry) ? Entry.fromJSON(object.entry) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateEntryRequest): unknown {
    const obj: any = {};
    if (message.entry !== undefined) {
      obj.entry = Entry.toJSON(message.entry);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEntryRequest>): UpdateEntryRequest {
    return UpdateEntryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEntryRequest>): UpdateEntryRequest {
    const message = createBaseUpdateEntryRequest();
    message.entry = (object.entry !== undefined && object.entry !== null) ? Entry.fromPartial(object.entry) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteEntryRequest(): DeleteEntryRequest {
  return { name: "" };
}

export const DeleteEntryRequest: MessageFns<DeleteEntryRequest> = {
  encode(message: DeleteEntryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEntryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEntryRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteEntryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEntryRequest>): DeleteEntryRequest {
    return DeleteEntryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEntryRequest>): DeleteEntryRequest {
    const message = createBaseDeleteEntryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetEntryRequest(): GetEntryRequest {
  return { name: "" };
}

export const GetEntryRequest: MessageFns<GetEntryRequest> = {
  encode(message: GetEntryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEntryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEntryRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEntryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEntryRequest>): GetEntryRequest {
    return GetEntryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEntryRequest>): GetEntryRequest {
    const message = createBaseGetEntryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseLookupEntryRequest(): LookupEntryRequest {
  return { linkedResource: undefined, sqlResource: undefined };
}

export const LookupEntryRequest: MessageFns<LookupEntryRequest> = {
  encode(message: LookupEntryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.linkedResource !== undefined) {
      writer.uint32(10).string(message.linkedResource);
    }
    if (message.sqlResource !== undefined) {
      writer.uint32(26).string(message.sqlResource);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupEntryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.linkedResource = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sqlResource = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupEntryRequest {
    return {
      linkedResource: isSet(object.linkedResource) ? globalThis.String(object.linkedResource) : undefined,
      sqlResource: isSet(object.sqlResource) ? globalThis.String(object.sqlResource) : undefined,
    };
  },

  toJSON(message: LookupEntryRequest): unknown {
    const obj: any = {};
    if (message.linkedResource !== undefined) {
      obj.linkedResource = message.linkedResource;
    }
    if (message.sqlResource !== undefined) {
      obj.sqlResource = message.sqlResource;
    }
    return obj;
  },

  create(base?: DeepPartial<LookupEntryRequest>): LookupEntryRequest {
    return LookupEntryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupEntryRequest>): LookupEntryRequest {
    const message = createBaseLookupEntryRequest();
    message.linkedResource = object.linkedResource ?? undefined;
    message.sqlResource = object.sqlResource ?? undefined;
    return message;
  },
};

function createBaseEntry(): Entry {
  return {
    name: "",
    linkedResource: "",
    type: undefined,
    userSpecifiedType: undefined,
    integratedSystem: undefined,
    userSpecifiedSystem: undefined,
    gcsFilesetSpec: undefined,
    bigqueryTableSpec: undefined,
    bigqueryDateShardedSpec: undefined,
    displayName: "",
    description: "",
    schema: undefined,
    sourceSystemTimestamps: undefined,
    usageSignal: undefined,
  };
}

export const Entry: MessageFns<Entry> = {
  encode(message: Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.linkedResource !== "") {
      writer.uint32(74).string(message.linkedResource);
    }
    if (message.type !== undefined) {
      writer.uint32(16).int32(message.type);
    }
    if (message.userSpecifiedType !== undefined) {
      writer.uint32(130).string(message.userSpecifiedType);
    }
    if (message.integratedSystem !== undefined) {
      writer.uint32(136).int32(message.integratedSystem);
    }
    if (message.userSpecifiedSystem !== undefined) {
      writer.uint32(146).string(message.userSpecifiedSystem);
    }
    if (message.gcsFilesetSpec !== undefined) {
      GcsFilesetSpec.encode(message.gcsFilesetSpec, writer.uint32(50).fork()).join();
    }
    if (message.bigqueryTableSpec !== undefined) {
      BigQueryTableSpec.encode(message.bigqueryTableSpec, writer.uint32(98).fork()).join();
    }
    if (message.bigqueryDateShardedSpec !== undefined) {
      BigQueryDateShardedSpec.encode(message.bigqueryDateShardedSpec, writer.uint32(122).fork()).join();
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.schema !== undefined) {
      Schema.encode(message.schema, writer.uint32(42).fork()).join();
    }
    if (message.sourceSystemTimestamps !== undefined) {
      SystemTimestamps.encode(message.sourceSystemTimestamps, writer.uint32(58).fork()).join();
    }
    if (message.usageSignal !== undefined) {
      UsageSignal.encode(message.usageSignal, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.linkedResource = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.userSpecifiedType = reader.string();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.integratedSystem = reader.int32() as any;
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.userSpecifiedSystem = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.gcsFilesetSpec = GcsFilesetSpec.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.bigqueryTableSpec = BigQueryTableSpec.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.bigqueryDateShardedSpec = BigQueryDateShardedSpec.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.schema = Schema.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.sourceSystemTimestamps = SystemTimestamps.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.usageSignal = UsageSignal.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Entry {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      linkedResource: isSet(object.linkedResource) ? globalThis.String(object.linkedResource) : "",
      type: isSet(object.type) ? entryTypeFromJSON(object.type) : undefined,
      userSpecifiedType: isSet(object.userSpecifiedType) ? globalThis.String(object.userSpecifiedType) : undefined,
      integratedSystem: isSet(object.integratedSystem) ? integratedSystemFromJSON(object.integratedSystem) : undefined,
      userSpecifiedSystem: isSet(object.userSpecifiedSystem)
        ? globalThis.String(object.userSpecifiedSystem)
        : undefined,
      gcsFilesetSpec: isSet(object.gcsFilesetSpec) ? GcsFilesetSpec.fromJSON(object.gcsFilesetSpec) : undefined,
      bigqueryTableSpec: isSet(object.bigqueryTableSpec)
        ? BigQueryTableSpec.fromJSON(object.bigqueryTableSpec)
        : undefined,
      bigqueryDateShardedSpec: isSet(object.bigqueryDateShardedSpec)
        ? BigQueryDateShardedSpec.fromJSON(object.bigqueryDateShardedSpec)
        : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      schema: isSet(object.schema) ? Schema.fromJSON(object.schema) : undefined,
      sourceSystemTimestamps: isSet(object.sourceSystemTimestamps)
        ? SystemTimestamps.fromJSON(object.sourceSystemTimestamps)
        : undefined,
      usageSignal: isSet(object.usageSignal) ? UsageSignal.fromJSON(object.usageSignal) : undefined,
    };
  },

  toJSON(message: Entry): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.linkedResource !== "") {
      obj.linkedResource = message.linkedResource;
    }
    if (message.type !== undefined) {
      obj.type = entryTypeToJSON(message.type);
    }
    if (message.userSpecifiedType !== undefined) {
      obj.userSpecifiedType = message.userSpecifiedType;
    }
    if (message.integratedSystem !== undefined) {
      obj.integratedSystem = integratedSystemToJSON(message.integratedSystem);
    }
    if (message.userSpecifiedSystem !== undefined) {
      obj.userSpecifiedSystem = message.userSpecifiedSystem;
    }
    if (message.gcsFilesetSpec !== undefined) {
      obj.gcsFilesetSpec = GcsFilesetSpec.toJSON(message.gcsFilesetSpec);
    }
    if (message.bigqueryTableSpec !== undefined) {
      obj.bigqueryTableSpec = BigQueryTableSpec.toJSON(message.bigqueryTableSpec);
    }
    if (message.bigqueryDateShardedSpec !== undefined) {
      obj.bigqueryDateShardedSpec = BigQueryDateShardedSpec.toJSON(message.bigqueryDateShardedSpec);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.schema !== undefined) {
      obj.schema = Schema.toJSON(message.schema);
    }
    if (message.sourceSystemTimestamps !== undefined) {
      obj.sourceSystemTimestamps = SystemTimestamps.toJSON(message.sourceSystemTimestamps);
    }
    if (message.usageSignal !== undefined) {
      obj.usageSignal = UsageSignal.toJSON(message.usageSignal);
    }
    return obj;
  },

  create(base?: DeepPartial<Entry>): Entry {
    return Entry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Entry>): Entry {
    const message = createBaseEntry();
    message.name = object.name ?? "";
    message.linkedResource = object.linkedResource ?? "";
    message.type = object.type ?? undefined;
    message.userSpecifiedType = object.userSpecifiedType ?? undefined;
    message.integratedSystem = object.integratedSystem ?? undefined;
    message.userSpecifiedSystem = object.userSpecifiedSystem ?? undefined;
    message.gcsFilesetSpec = (object.gcsFilesetSpec !== undefined && object.gcsFilesetSpec !== null)
      ? GcsFilesetSpec.fromPartial(object.gcsFilesetSpec)
      : undefined;
    message.bigqueryTableSpec = (object.bigqueryTableSpec !== undefined && object.bigqueryTableSpec !== null)
      ? BigQueryTableSpec.fromPartial(object.bigqueryTableSpec)
      : undefined;
    message.bigqueryDateShardedSpec =
      (object.bigqueryDateShardedSpec !== undefined && object.bigqueryDateShardedSpec !== null)
        ? BigQueryDateShardedSpec.fromPartial(object.bigqueryDateShardedSpec)
        : undefined;
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.schema = (object.schema !== undefined && object.schema !== null)
      ? Schema.fromPartial(object.schema)
      : undefined;
    message.sourceSystemTimestamps =
      (object.sourceSystemTimestamps !== undefined && object.sourceSystemTimestamps !== null)
        ? SystemTimestamps.fromPartial(object.sourceSystemTimestamps)
        : undefined;
    message.usageSignal = (object.usageSignal !== undefined && object.usageSignal !== null)
      ? UsageSignal.fromPartial(object.usageSignal)
      : undefined;
    return message;
  },
};

function createBaseEntryGroup(): EntryGroup {
  return { name: "", displayName: "", description: "", dataCatalogTimestamps: undefined };
}

export const EntryGroup: MessageFns<EntryGroup> = {
  encode(message: EntryGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.dataCatalogTimestamps !== undefined) {
      SystemTimestamps.encode(message.dataCatalogTimestamps, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntryGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntryGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dataCatalogTimestamps = SystemTimestamps.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntryGroup {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      dataCatalogTimestamps: isSet(object.dataCatalogTimestamps)
        ? SystemTimestamps.fromJSON(object.dataCatalogTimestamps)
        : undefined,
    };
  },

  toJSON(message: EntryGroup): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.dataCatalogTimestamps !== undefined) {
      obj.dataCatalogTimestamps = SystemTimestamps.toJSON(message.dataCatalogTimestamps);
    }
    return obj;
  },

  create(base?: DeepPartial<EntryGroup>): EntryGroup {
    return EntryGroup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EntryGroup>): EntryGroup {
    const message = createBaseEntryGroup();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.dataCatalogTimestamps =
      (object.dataCatalogTimestamps !== undefined && object.dataCatalogTimestamps !== null)
        ? SystemTimestamps.fromPartial(object.dataCatalogTimestamps)
        : undefined;
    return message;
  },
};

function createBaseCreateTagTemplateRequest(): CreateTagTemplateRequest {
  return { parent: "", tagTemplateId: "", tagTemplate: undefined };
}

export const CreateTagTemplateRequest: MessageFns<CreateTagTemplateRequest> = {
  encode(message: CreateTagTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.tagTemplateId !== "") {
      writer.uint32(26).string(message.tagTemplateId);
    }
    if (message.tagTemplate !== undefined) {
      TagTemplate.encode(message.tagTemplate, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTagTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTagTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tagTemplateId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tagTemplate = TagTemplate.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTagTemplateRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      tagTemplateId: isSet(object.tagTemplateId) ? globalThis.String(object.tagTemplateId) : "",
      tagTemplate: isSet(object.tagTemplate) ? TagTemplate.fromJSON(object.tagTemplate) : undefined,
    };
  },

  toJSON(message: CreateTagTemplateRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.tagTemplateId !== "") {
      obj.tagTemplateId = message.tagTemplateId;
    }
    if (message.tagTemplate !== undefined) {
      obj.tagTemplate = TagTemplate.toJSON(message.tagTemplate);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTagTemplateRequest>): CreateTagTemplateRequest {
    return CreateTagTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTagTemplateRequest>): CreateTagTemplateRequest {
    const message = createBaseCreateTagTemplateRequest();
    message.parent = object.parent ?? "";
    message.tagTemplateId = object.tagTemplateId ?? "";
    message.tagTemplate = (object.tagTemplate !== undefined && object.tagTemplate !== null)
      ? TagTemplate.fromPartial(object.tagTemplate)
      : undefined;
    return message;
  },
};

function createBaseGetTagTemplateRequest(): GetTagTemplateRequest {
  return { name: "" };
}

export const GetTagTemplateRequest: MessageFns<GetTagTemplateRequest> = {
  encode(message: GetTagTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTagTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTagTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTagTemplateRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTagTemplateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTagTemplateRequest>): GetTagTemplateRequest {
    return GetTagTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTagTemplateRequest>): GetTagTemplateRequest {
    const message = createBaseGetTagTemplateRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateTagTemplateRequest(): UpdateTagTemplateRequest {
  return { tagTemplate: undefined, updateMask: undefined };
}

export const UpdateTagTemplateRequest: MessageFns<UpdateTagTemplateRequest> = {
  encode(message: UpdateTagTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tagTemplate !== undefined) {
      TagTemplate.encode(message.tagTemplate, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTagTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTagTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tagTemplate = TagTemplate.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTagTemplateRequest {
    return {
      tagTemplate: isSet(object.tagTemplate) ? TagTemplate.fromJSON(object.tagTemplate) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateTagTemplateRequest): unknown {
    const obj: any = {};
    if (message.tagTemplate !== undefined) {
      obj.tagTemplate = TagTemplate.toJSON(message.tagTemplate);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTagTemplateRequest>): UpdateTagTemplateRequest {
    return UpdateTagTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTagTemplateRequest>): UpdateTagTemplateRequest {
    const message = createBaseUpdateTagTemplateRequest();
    message.tagTemplate = (object.tagTemplate !== undefined && object.tagTemplate !== null)
      ? TagTemplate.fromPartial(object.tagTemplate)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteTagTemplateRequest(): DeleteTagTemplateRequest {
  return { name: "", force: false };
}

export const DeleteTagTemplateRequest: MessageFns<DeleteTagTemplateRequest> = {
  encode(message: DeleteTagTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTagTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTagTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTagTemplateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteTagTemplateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTagTemplateRequest>): DeleteTagTemplateRequest {
    return DeleteTagTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTagTemplateRequest>): DeleteTagTemplateRequest {
    const message = createBaseDeleteTagTemplateRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseCreateTagRequest(): CreateTagRequest {
  return { parent: "", tag: undefined };
}

export const CreateTagRequest: MessageFns<CreateTagRequest> = {
  encode(message: CreateTagRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.tag !== undefined) {
      Tag.encode(message.tag, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTagRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTagRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tag = Tag.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTagRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      tag: isSet(object.tag) ? Tag.fromJSON(object.tag) : undefined,
    };
  },

  toJSON(message: CreateTagRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.tag !== undefined) {
      obj.tag = Tag.toJSON(message.tag);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTagRequest>): CreateTagRequest {
    return CreateTagRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTagRequest>): CreateTagRequest {
    const message = createBaseCreateTagRequest();
    message.parent = object.parent ?? "";
    message.tag = (object.tag !== undefined && object.tag !== null) ? Tag.fromPartial(object.tag) : undefined;
    return message;
  },
};

function createBaseUpdateTagRequest(): UpdateTagRequest {
  return { tag: undefined, updateMask: undefined };
}

export const UpdateTagRequest: MessageFns<UpdateTagRequest> = {
  encode(message: UpdateTagRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tag !== undefined) {
      Tag.encode(message.tag, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTagRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTagRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tag = Tag.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTagRequest {
    return {
      tag: isSet(object.tag) ? Tag.fromJSON(object.tag) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateTagRequest): unknown {
    const obj: any = {};
    if (message.tag !== undefined) {
      obj.tag = Tag.toJSON(message.tag);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTagRequest>): UpdateTagRequest {
    return UpdateTagRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTagRequest>): UpdateTagRequest {
    const message = createBaseUpdateTagRequest();
    message.tag = (object.tag !== undefined && object.tag !== null) ? Tag.fromPartial(object.tag) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteTagRequest(): DeleteTagRequest {
  return { name: "" };
}

export const DeleteTagRequest: MessageFns<DeleteTagRequest> = {
  encode(message: DeleteTagRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTagRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTagRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTagRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteTagRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTagRequest>): DeleteTagRequest {
    return DeleteTagRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTagRequest>): DeleteTagRequest {
    const message = createBaseDeleteTagRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateTagTemplateFieldRequest(): CreateTagTemplateFieldRequest {
  return { parent: "", tagTemplateFieldId: "", tagTemplateField: undefined };
}

export const CreateTagTemplateFieldRequest: MessageFns<CreateTagTemplateFieldRequest> = {
  encode(message: CreateTagTemplateFieldRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.tagTemplateFieldId !== "") {
      writer.uint32(18).string(message.tagTemplateFieldId);
    }
    if (message.tagTemplateField !== undefined) {
      TagTemplateField.encode(message.tagTemplateField, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTagTemplateFieldRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTagTemplateFieldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tagTemplateFieldId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tagTemplateField = TagTemplateField.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTagTemplateFieldRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      tagTemplateFieldId: isSet(object.tagTemplateFieldId) ? globalThis.String(object.tagTemplateFieldId) : "",
      tagTemplateField: isSet(object.tagTemplateField) ? TagTemplateField.fromJSON(object.tagTemplateField) : undefined,
    };
  },

  toJSON(message: CreateTagTemplateFieldRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.tagTemplateFieldId !== "") {
      obj.tagTemplateFieldId = message.tagTemplateFieldId;
    }
    if (message.tagTemplateField !== undefined) {
      obj.tagTemplateField = TagTemplateField.toJSON(message.tagTemplateField);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTagTemplateFieldRequest>): CreateTagTemplateFieldRequest {
    return CreateTagTemplateFieldRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTagTemplateFieldRequest>): CreateTagTemplateFieldRequest {
    const message = createBaseCreateTagTemplateFieldRequest();
    message.parent = object.parent ?? "";
    message.tagTemplateFieldId = object.tagTemplateFieldId ?? "";
    message.tagTemplateField = (object.tagTemplateField !== undefined && object.tagTemplateField !== null)
      ? TagTemplateField.fromPartial(object.tagTemplateField)
      : undefined;
    return message;
  },
};

function createBaseUpdateTagTemplateFieldRequest(): UpdateTagTemplateFieldRequest {
  return { name: "", tagTemplateField: undefined, updateMask: undefined };
}

export const UpdateTagTemplateFieldRequest: MessageFns<UpdateTagTemplateFieldRequest> = {
  encode(message: UpdateTagTemplateFieldRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.tagTemplateField !== undefined) {
      TagTemplateField.encode(message.tagTemplateField, writer.uint32(18).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTagTemplateFieldRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTagTemplateFieldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tagTemplateField = TagTemplateField.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTagTemplateFieldRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      tagTemplateField: isSet(object.tagTemplateField) ? TagTemplateField.fromJSON(object.tagTemplateField) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateTagTemplateFieldRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.tagTemplateField !== undefined) {
      obj.tagTemplateField = TagTemplateField.toJSON(message.tagTemplateField);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTagTemplateFieldRequest>): UpdateTagTemplateFieldRequest {
    return UpdateTagTemplateFieldRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTagTemplateFieldRequest>): UpdateTagTemplateFieldRequest {
    const message = createBaseUpdateTagTemplateFieldRequest();
    message.name = object.name ?? "";
    message.tagTemplateField = (object.tagTemplateField !== undefined && object.tagTemplateField !== null)
      ? TagTemplateField.fromPartial(object.tagTemplateField)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseRenameTagTemplateFieldRequest(): RenameTagTemplateFieldRequest {
  return { name: "", newTagTemplateFieldId: "" };
}

export const RenameTagTemplateFieldRequest: MessageFns<RenameTagTemplateFieldRequest> = {
  encode(message: RenameTagTemplateFieldRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.newTagTemplateFieldId !== "") {
      writer.uint32(18).string(message.newTagTemplateFieldId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenameTagTemplateFieldRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenameTagTemplateFieldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.newTagTemplateFieldId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RenameTagTemplateFieldRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      newTagTemplateFieldId: isSet(object.newTagTemplateFieldId) ? globalThis.String(object.newTagTemplateFieldId) : "",
    };
  },

  toJSON(message: RenameTagTemplateFieldRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.newTagTemplateFieldId !== "") {
      obj.newTagTemplateFieldId = message.newTagTemplateFieldId;
    }
    return obj;
  },

  create(base?: DeepPartial<RenameTagTemplateFieldRequest>): RenameTagTemplateFieldRequest {
    return RenameTagTemplateFieldRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RenameTagTemplateFieldRequest>): RenameTagTemplateFieldRequest {
    const message = createBaseRenameTagTemplateFieldRequest();
    message.name = object.name ?? "";
    message.newTagTemplateFieldId = object.newTagTemplateFieldId ?? "";
    return message;
  },
};

function createBaseRenameTagTemplateFieldEnumValueRequest(): RenameTagTemplateFieldEnumValueRequest {
  return { name: "", newEnumValueDisplayName: "" };
}

export const RenameTagTemplateFieldEnumValueRequest: MessageFns<RenameTagTemplateFieldEnumValueRequest> = {
  encode(message: RenameTagTemplateFieldEnumValueRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.newEnumValueDisplayName !== "") {
      writer.uint32(18).string(message.newEnumValueDisplayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenameTagTemplateFieldEnumValueRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenameTagTemplateFieldEnumValueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.newEnumValueDisplayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RenameTagTemplateFieldEnumValueRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      newEnumValueDisplayName: isSet(object.newEnumValueDisplayName)
        ? globalThis.String(object.newEnumValueDisplayName)
        : "",
    };
  },

  toJSON(message: RenameTagTemplateFieldEnumValueRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.newEnumValueDisplayName !== "") {
      obj.newEnumValueDisplayName = message.newEnumValueDisplayName;
    }
    return obj;
  },

  create(base?: DeepPartial<RenameTagTemplateFieldEnumValueRequest>): RenameTagTemplateFieldEnumValueRequest {
    return RenameTagTemplateFieldEnumValueRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RenameTagTemplateFieldEnumValueRequest>): RenameTagTemplateFieldEnumValueRequest {
    const message = createBaseRenameTagTemplateFieldEnumValueRequest();
    message.name = object.name ?? "";
    message.newEnumValueDisplayName = object.newEnumValueDisplayName ?? "";
    return message;
  },
};

function createBaseDeleteTagTemplateFieldRequest(): DeleteTagTemplateFieldRequest {
  return { name: "", force: false };
}

export const DeleteTagTemplateFieldRequest: MessageFns<DeleteTagTemplateFieldRequest> = {
  encode(message: DeleteTagTemplateFieldRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTagTemplateFieldRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTagTemplateFieldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTagTemplateFieldRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteTagTemplateFieldRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTagTemplateFieldRequest>): DeleteTagTemplateFieldRequest {
    return DeleteTagTemplateFieldRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTagTemplateFieldRequest>): DeleteTagTemplateFieldRequest {
    const message = createBaseDeleteTagTemplateFieldRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseListTagsRequest(): ListTagsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListTagsRequest: MessageFns<ListTagsRequest> = {
  encode(message: ListTagsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTagsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTagsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTagsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListTagsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTagsRequest>): ListTagsRequest {
    return ListTagsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTagsRequest>): ListTagsRequest {
    const message = createBaseListTagsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListTagsResponse(): ListTagsResponse {
  return { tags: [], nextPageToken: "" };
}

export const ListTagsResponse: MessageFns<ListTagsResponse> = {
  encode(message: ListTagsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tags) {
      Tag.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTagsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTagsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tags.push(Tag.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTagsResponse {
    return {
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => Tag.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTagsResponse): unknown {
    const obj: any = {};
    if (message.tags?.length) {
      obj.tags = message.tags.map((e) => Tag.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTagsResponse>): ListTagsResponse {
    return ListTagsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTagsResponse>): ListTagsResponse {
    const message = createBaseListTagsResponse();
    message.tags = object.tags?.map((e) => Tag.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListEntriesRequest(): ListEntriesRequest {
  return { parent: "", pageSize: 0, pageToken: "", readMask: undefined };
}

export const ListEntriesRequest: MessageFns<ListEntriesRequest> = {
  encode(message: ListEntriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEntriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEntriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEntriesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: ListEntriesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<ListEntriesRequest>): ListEntriesRequest {
    return ListEntriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEntriesRequest>): ListEntriesRequest {
    const message = createBaseListEntriesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListEntriesResponse(): ListEntriesResponse {
  return { entries: [], nextPageToken: "" };
}

export const ListEntriesResponse: MessageFns<ListEntriesResponse> = {
  encode(message: ListEntriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entries) {
      Entry.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEntriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEntriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entries.push(Entry.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEntriesResponse {
    return {
      entries: globalThis.Array.isArray(object?.entries) ? object.entries.map((e: any) => Entry.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListEntriesResponse): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => Entry.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEntriesResponse>): ListEntriesResponse {
    return ListEntriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEntriesResponse>): ListEntriesResponse {
    const message = createBaseListEntriesResponse();
    message.entries = object.entries?.map((e) => Entry.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * Data Catalog API service allows clients to discover, understand, and manage
 * their data.
 */
export type DataCatalogDefinition = typeof DataCatalogDefinition;
export const DataCatalogDefinition = {
  name: "DataCatalog",
  fullName: "google.cloud.datacatalog.v1beta1.DataCatalog",
  methods: {
    /**
     * Searches Data Catalog for multiple resources like entries, tags that
     * match a query.
     *
     * This is a custom method
     * (https://cloud.google.com/apis/design/custom_methods) and does not return
     * the complete resource, only the resource identifier and high level
     * fields. Clients can subsequently call `Get` methods.
     *
     * Note that Data Catalog search queries do not guarantee full recall. Query
     * results that match your query may not be returned, even in subsequent
     * result pages. Also note that results returned (and not returned) can vary
     * across repeated search queries.
     *
     * See [Data Catalog Search
     * Syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference)
     * for more information.
     */
    searchCatalog: {
      name: "SearchCatalog",
      requestType: SearchCatalogRequest,
      requestStream: false,
      responseType: SearchCatalogResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 115, 99, 111, 112, 101, 44, 113, 117, 101, 114, 121])],
          578365826: [
            Buffer.from([
              28,
              58,
              1,
              42,
              34,
              23,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /**
     * A maximum of 10,000 entry groups may be created per organization across all
     * locations.
     *
     * Users should enable the Data Catalog API in the project identified by
     * the `parent` parameter (see [Data Catalog Resource Project]
     * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
     * more information).
     */
    createEntryGroup: {
      name: "CreateEntryGroup",
      requestType: CreateEntryGroupRequest,
      requestStream: false,
      responseType: EntryGroup,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              33,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              110,
              116,
              114,
              121,
              95,
              103,
              114,
              111,
              117,
              112,
              95,
              105,
              100,
              44,
              101,
              110,
              116,
              114,
              121,
              95,
              103,
              114,
              111,
              117,
              112,
            ]),
          ],
          578365826: [
            Buffer.from([
              67,
              58,
              11,
              101,
              110,
              116,
              114,
              121,
              95,
              103,
              114,
              111,
              117,
              112,
              34,
              52,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an EntryGroup. The user should enable the Data Catalog API in the
     * project identified by the `entry_group.name` parameter (see [Data Catalog
     * Resource Project]
     * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
     * more information).
     */
    updateEntryGroup: {
      name: "UpdateEntryGroup",
      requestType: UpdateEntryGroupRequest,
      requestStream: false,
      responseType: EntryGroup,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([11, 101, 110, 116, 114, 121, 95, 103, 114, 111, 117, 112]),
            Buffer.from([
              23,
              101,
              110,
              116,
              114,
              121,
              95,
              103,
              114,
              111,
              117,
              112,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              79,
              58,
              11,
              101,
              110,
              116,
              114,
              121,
              95,
              103,
              114,
              111,
              117,
              112,
              50,
              64,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              101,
              110,
              116,
              114,
              121,
              95,
              103,
              114,
              111,
              117,
              112,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets an EntryGroup. */
    getEntryGroup: {
      name: "GetEntryGroup",
      requestType: GetEntryGroupRequest,
      requestStream: false,
      responseType: EntryGroup,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([4, 110, 97, 109, 101]),
            Buffer.from([14, 110, 97, 109, 101, 44, 114, 101, 97, 100, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              54,
              18,
              52,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes an EntryGroup. Only entry groups that do not contain entries can be
     * deleted. Users should enable the Data Catalog API in the project
     * identified by the `name` parameter (see [Data Catalog Resource Project]
     * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
     * more information).
     */
    deleteEntryGroup: {
      name: "DeleteEntryGroup",
      requestType: DeleteEntryGroupRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              54,
              42,
              52,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists entry groups. */
    listEntryGroups: {
      name: "ListEntryGroups",
      requestType: ListEntryGroupsRequest,
      requestStream: false,
      responseType: ListEntryGroupsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              54,
              18,
              52,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Creates an entry. Only entries of 'FILESET' type or user-specified type can
     * be created.
     *
     * Users should enable the Data Catalog API in the project identified by
     * the `parent` parameter (see [Data Catalog Resource Project]
     * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
     * more information).
     *
     * A maximum of 100,000 entries may be created per entry group.
     */
    createEntry: {
      name: "CreateEntry",
      requestType: CreateEntryRequest,
      requestStream: false,
      responseType: Entry,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              110,
              116,
              114,
              121,
              95,
              105,
              100,
              44,
              101,
              110,
              116,
              114,
              121,
            ]),
          ],
          578365826: [
            Buffer.from([
              71,
              58,
              5,
              101,
              110,
              116,
              114,
              121,
              34,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an existing entry.
     * Users should enable the Data Catalog API in the project identified by
     * the `entry.name` parameter (see [Data Catalog Resource Project]
     * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
     * more information).
     */
    updateEntry: {
      name: "UpdateEntry",
      requestType: UpdateEntryRequest,
      requestStream: false,
      responseType: Entry,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([5, 101, 110, 116, 114, 121]),
            Buffer.from([17, 101, 110, 116, 114, 121, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              77,
              58,
              5,
              101,
              110,
              116,
              114,
              121,
              50,
              68,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              101,
              110,
              116,
              114,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes an existing entry. Only entries created through
     * [CreateEntry][google.cloud.datacatalog.v1beta1.DataCatalog.CreateEntry]
     * method can be deleted.
     * Users should enable the Data Catalog API in the project identified by
     * the `name` parameter (see [Data Catalog Resource Project]
     * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
     * more information).
     */
    deleteEntry: {
      name: "DeleteEntry",
      requestType: DeleteEntryRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              42,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets an entry. */
    getEntry: {
      name: "GetEntry",
      requestType: GetEntryRequest,
      requestStream: false,
      responseType: Entry,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Get an entry by target resource name. This method allows clients to use
     * the resource name from the source Google Cloud Platform service to get the
     * Data Catalog Entry.
     */
    lookupEntry: {
      name: "LookupEntry",
      requestType: LookupEntryRequest,
      requestStream: false,
      responseType: Entry,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              25,
              18,
              23,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              101,
              110,
              116,
              114,
              105,
              101,
              115,
              58,
              108,
              111,
              111,
              107,
              117,
              112,
            ]),
          ],
        },
      },
    },
    /** Lists entries. */
    listEntries: {
      name: "ListEntries",
      requestType: ListEntriesRequest,
      requestStream: false,
      responseType: ListEntriesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a tag template. The user should enable the Data Catalog API in
     * the project identified by the `parent` parameter (see [Data Catalog
     * Resource
     * Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project)
     * for more information).
     */
    createTagTemplate: {
      name: "CreateTagTemplate",
      requestType: CreateTagTemplateRequest,
      requestStream: false,
      responseType: TagTemplate,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              35,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              116,
              97,
              103,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              95,
              105,
              100,
              44,
              116,
              97,
              103,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              69,
              58,
              12,
              116,
              97,
              103,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              34,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              97,
              103,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a tag template. */
    getTagTemplate: {
      name: "GetTagTemplate",
      requestType: GetTagTemplateRequest,
      requestStream: false,
      responseType: TagTemplate,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              103,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a tag template. This method cannot be used to update the fields of
     * a template. The tag template fields are represented as separate resources
     * and should be updated using their own create/update/delete methods.
     * Users should enable the Data Catalog API in the project identified by
     * the `tag_template.name` parameter (see [Data Catalog Resource Project]
     * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
     * more information).
     */
    updateTagTemplate: {
      name: "UpdateTagTemplate",
      requestType: UpdateTagTemplateRequest,
      requestStream: false,
      responseType: TagTemplate,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([12, 116, 97, 103, 95, 116, 101, 109, 112, 108, 97, 116, 101]),
            Buffer.from([
              24,
              116,
              97,
              103,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              82,
              58,
              12,
              116,
              97,
              103,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              50,
              66,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              97,
              103,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              103,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a tag template and all tags using the template.
     * Users should enable the Data Catalog API in the project identified by
     * the `name` parameter (see [Data Catalog Resource Project]
     * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
     * more information).
     */
    deleteTagTemplate: {
      name: "DeleteTagTemplate",
      requestType: DeleteTagTemplateRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 110, 97, 109, 101, 44, 102, 111, 114, 99, 101])],
          578365826: [
            Buffer.from([
              55,
              42,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              103,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a field in a tag template. The user should enable the Data Catalog
     * API in the project identified by the `parent` parameter (see
     * [Data Catalog Resource
     * Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project)
     * for more information).
     */
    createTagTemplateField: {
      name: "CreateTagTemplateField",
      requestType: CreateTagTemplateFieldRequest,
      requestStream: false,
      responseType: TagTemplateField,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              47,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              116,
              97,
              103,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              95,
              102,
              105,
              101,
              108,
              100,
              95,
              105,
              100,
              44,
              116,
              97,
              103,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              95,
              102,
              105,
              101,
              108,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              84,
              58,
              18,
              116,
              97,
              103,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              95,
              102,
              105,
              101,
              108,
              100,
              34,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              103,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              101,
              108,
              100,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a field in a tag template. This method cannot be used to update the
     * field type. Users should enable the Data Catalog API in the project
     * identified by the `name` parameter (see [Data Catalog Resource Project]
     * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
     * more information).
     */
    updateTagTemplateField: {
      name: "UpdateTagTemplateField",
      requestType: UpdateTagTemplateFieldRequest,
      requestStream: false,
      responseType: TagTemplateField,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              110,
              97,
              109,
              101,
              44,
              116,
              97,
              103,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              95,
              102,
              105,
              101,
              108,
              100,
            ]),
            Buffer.from([
              35,
              110,
              97,
              109,
              101,
              44,
              116,
              97,
              103,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              95,
              102,
              105,
              101,
              108,
              100,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              84,
              58,
              18,
              116,
              97,
              103,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              95,
              102,
              105,
              101,
              108,
              100,
              50,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              103,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              101,
              108,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Renames a field in a tag template. The user should enable the Data Catalog
     * API in the project identified by the `name` parameter (see [Data Catalog
     * Resource
     * Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project)
     * for more information).
     */
    renameTagTemplateField: {
      name: "RenameTagTemplateField",
      requestType: RenameTagTemplateFieldRequest,
      requestStream: false,
      responseType: TagTemplateField,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              30,
              110,
              97,
              109,
              101,
              44,
              110,
              101,
              119,
              95,
              116,
              97,
              103,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              95,
              102,
              105,
              101,
              108,
              100,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              103,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              101,
              108,
              100,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              110,
              97,
              109,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Renames an enum value in a tag template. The enum values have to be unique
     * within one enum field. Thus, an enum value cannot be renamed with a name
     * used in any other enum value within the same enum field.
     */
    renameTagTemplateFieldEnumValue: {
      name: "RenameTagTemplateFieldEnumValue",
      requestType: RenameTagTemplateFieldEnumValueRequest,
      requestStream: false,
      responseType: TagTemplateField,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              32,
              110,
              97,
              109,
              101,
              44,
              110,
              101,
              119,
              95,
              101,
              110,
              117,
              109,
              95,
              118,
              97,
              108,
              117,
              101,
              95,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              95,
              110,
              97,
              109,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              87,
              58,
              1,
              42,
              34,
              82,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              103,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              101,
              108,
              100,
              115,
              47,
              42,
              47,
              101,
              110,
              117,
              109,
              86,
              97,
              108,
              117,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              110,
              97,
              109,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a field in a tag template and all uses of that field.
     * Users should enable the Data Catalog API in the project identified by
     * the `name` parameter (see [Data Catalog Resource Project]
     * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
     * more information).
     */
    deleteTagTemplateField: {
      name: "DeleteTagTemplateField",
      requestType: DeleteTagTemplateFieldRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 110, 97, 109, 101, 44, 102, 111, 114, 99, 101])],
          578365826: [
            Buffer.from([
              64,
              42,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              103,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              101,
              108,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a tag on an [Entry][google.cloud.datacatalog.v1beta1.Entry].
     * Note: The project identified by the `parent` parameter for the
     * [tag](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/create#path-parameters)
     * and the
     * [tag
     * template](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/create#path-parameters)
     * used to create the tag must be from the same organization.
     */
    createTag: {
      name: "CreateTag",
      requestType: CreateTagRequest,
      requestStream: false,
      responseType: Tag,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 112, 97, 114, 101, 110, 116, 44, 116, 97, 103])],
          578365826: [
            Buffer.from([
              144,
              1,
              58,
              3,
              116,
              97,
              103,
              90,
              66,
              58,
              3,
              116,
              97,
              103,
              34,
              59,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              47,
              116,
              97,
              103,
              115,
              34,
              69,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              116,
              97,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an existing tag. */
    updateTag: {
      name: "UpdateTag",
      requestType: UpdateTagRequest,
      requestStream: false,
      responseType: Tag,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([3, 116, 97, 103]),
            Buffer.from([15, 116, 97, 103, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              152,
              1,
              58,
              3,
              116,
              97,
              103,
              90,
              70,
              58,
              3,
              116,
              97,
              103,
              50,
              63,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              97,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              116,
              97,
              103,
              115,
              47,
              42,
              125,
              50,
              73,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              97,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              116,
              97,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a tag. */
    deleteTag: {
      name: "DeleteTag",
      requestType: DeleteTagRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              134,
              1,
              90,
              61,
              42,
              59,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              116,
              97,
              103,
              115,
              47,
              42,
              125,
              42,
              69,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              116,
              97,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists tags assigned to an [Entry][google.cloud.datacatalog.v1beta1.Entry].
     * The [columns][google.cloud.datacatalog.v1beta1.Tag.column] in the response
     * are lowercased.
     */
    listTags: {
      name: "ListTags",
      requestType: ListTagsRequest,
      requestStream: false,
      responseType: ListTagsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              134,
              1,
              90,
              61,
              18,
              59,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              47,
              116,
              97,
              103,
              115,
              18,
              69,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              116,
              97,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Sets the access control policy for a resource. Replaces any existing
     * policy.
     * Supported resources are:
     *   - Tag templates.
     *   - Entries.
     *   - Entry groups.
     * Note, this method cannot be used to manage policies for BigQuery, Pub/Sub
     * and any external Google Cloud Platform resources synced to Data Catalog.
     *
     * Callers must have following Google IAM permission
     *   - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag
     *     templates.
     *   - `datacatalog.entries.setIamPolicy` to set policies on entries.
     *   - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups.
     */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 114, 101, 115, 111, 117, 114, 99, 101, 44, 112, 111, 108, 105, 99, 121])],
          578365826: [
            Buffer.from([
              151,
              1,
              58,
              1,
              42,
              90,
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              34,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              103,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the access control policy for a resource. A `NOT_FOUND` error
     * is returned if the resource does not exist. An empty policy is returned
     * if the resource exists but does not have a policy set on it.
     *
     * Supported resources are:
     *   - Tag templates.
     *   - Entries.
     *   - Entry groups.
     * Note, this method cannot be used to manage policies for BigQuery, Pub/Sub
     * and any external Google Cloud Platform resources synced to Data Catalog.
     *
     * Callers must have following Google IAM permission
     *   - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag
     *     templates.
     *   - `datacatalog.entries.getIamPolicy` to get policies on entries.
     *   - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.
     */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 114, 101, 115, 111, 117, 114, 99, 101])],
          578365826: [
            Buffer.from([
              237,
              1,
              58,
              1,
              42,
              90,
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              90,
              84,
              58,
              1,
              42,
              34,
              79,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              34,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              103,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the caller's permissions on a resource.
     * If the resource does not exist, an empty set of permissions is returned
     * (We don't return a `NOT_FOUND` error).
     *
     * Supported resources are:
     *   - Tag templates.
     *   - Entries.
     *   - Entry groups.
     * Note, this method cannot be used to manage policies for BigQuery, Pub/Sub
     * and any external Google Cloud Platform resources synced to Data Catalog.
     *
     * A caller is not required to have Google IAM permission to make this
     * request.
     */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              255,
              1,
              58,
              1,
              42,
              90,
              80,
              58,
              1,
              42,
              34,
              75,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              90,
              90,
              58,
              1,
              42,
              34,
              85,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              121,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              34,
              76,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              103,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DataCatalogServiceImplementation<CallContextExt = {}> {
  /**
   * Searches Data Catalog for multiple resources like entries, tags that
   * match a query.
   *
   * This is a custom method
   * (https://cloud.google.com/apis/design/custom_methods) and does not return
   * the complete resource, only the resource identifier and high level
   * fields. Clients can subsequently call `Get` methods.
   *
   * Note that Data Catalog search queries do not guarantee full recall. Query
   * results that match your query may not be returned, even in subsequent
   * result pages. Also note that results returned (and not returned) can vary
   * across repeated search queries.
   *
   * See [Data Catalog Search
   * Syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference)
   * for more information.
   */
  searchCatalog(
    request: SearchCatalogRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchCatalogResponse>>;
  /**
   * A maximum of 10,000 entry groups may be created per organization across all
   * locations.
   *
   * Users should enable the Data Catalog API in the project identified by
   * the `parent` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  createEntryGroup(
    request: CreateEntryGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EntryGroup>>;
  /**
   * Updates an EntryGroup. The user should enable the Data Catalog API in the
   * project identified by the `entry_group.name` parameter (see [Data Catalog
   * Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  updateEntryGroup(
    request: UpdateEntryGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EntryGroup>>;
  /** Gets an EntryGroup. */
  getEntryGroup(request: GetEntryGroupRequest, context: CallContext & CallContextExt): Promise<DeepPartial<EntryGroup>>;
  /**
   * Deletes an EntryGroup. Only entry groups that do not contain entries can be
   * deleted. Users should enable the Data Catalog API in the project
   * identified by the `name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  deleteEntryGroup(
    request: DeleteEntryGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Lists entry groups. */
  listEntryGroups(
    request: ListEntryGroupsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEntryGroupsResponse>>;
  /**
   * Creates an entry. Only entries of 'FILESET' type or user-specified type can
   * be created.
   *
   * Users should enable the Data Catalog API in the project identified by
   * the `parent` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   *
   * A maximum of 100,000 entries may be created per entry group.
   */
  createEntry(request: CreateEntryRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Entry>>;
  /**
   * Updates an existing entry.
   * Users should enable the Data Catalog API in the project identified by
   * the `entry.name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  updateEntry(request: UpdateEntryRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Entry>>;
  /**
   * Deletes an existing entry. Only entries created through
   * [CreateEntry][google.cloud.datacatalog.v1beta1.DataCatalog.CreateEntry]
   * method can be deleted.
   * Users should enable the Data Catalog API in the project identified by
   * the `name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  deleteEntry(request: DeleteEntryRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Gets an entry. */
  getEntry(request: GetEntryRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Entry>>;
  /**
   * Get an entry by target resource name. This method allows clients to use
   * the resource name from the source Google Cloud Platform service to get the
   * Data Catalog Entry.
   */
  lookupEntry(request: LookupEntryRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Entry>>;
  /** Lists entries. */
  listEntries(
    request: ListEntriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEntriesResponse>>;
  /**
   * Creates a tag template. The user should enable the Data Catalog API in
   * the project identified by the `parent` parameter (see [Data Catalog
   * Resource
   * Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project)
   * for more information).
   */
  createTagTemplate(
    request: CreateTagTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TagTemplate>>;
  /** Gets a tag template. */
  getTagTemplate(
    request: GetTagTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TagTemplate>>;
  /**
   * Updates a tag template. This method cannot be used to update the fields of
   * a template. The tag template fields are represented as separate resources
   * and should be updated using their own create/update/delete methods.
   * Users should enable the Data Catalog API in the project identified by
   * the `tag_template.name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  updateTagTemplate(
    request: UpdateTagTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TagTemplate>>;
  /**
   * Deletes a tag template and all tags using the template.
   * Users should enable the Data Catalog API in the project identified by
   * the `name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  deleteTagTemplate(
    request: DeleteTagTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Creates a field in a tag template. The user should enable the Data Catalog
   * API in the project identified by the `parent` parameter (see
   * [Data Catalog Resource
   * Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project)
   * for more information).
   */
  createTagTemplateField(
    request: CreateTagTemplateFieldRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TagTemplateField>>;
  /**
   * Updates a field in a tag template. This method cannot be used to update the
   * field type. Users should enable the Data Catalog API in the project
   * identified by the `name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  updateTagTemplateField(
    request: UpdateTagTemplateFieldRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TagTemplateField>>;
  /**
   * Renames a field in a tag template. The user should enable the Data Catalog
   * API in the project identified by the `name` parameter (see [Data Catalog
   * Resource
   * Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project)
   * for more information).
   */
  renameTagTemplateField(
    request: RenameTagTemplateFieldRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TagTemplateField>>;
  /**
   * Renames an enum value in a tag template. The enum values have to be unique
   * within one enum field. Thus, an enum value cannot be renamed with a name
   * used in any other enum value within the same enum field.
   */
  renameTagTemplateFieldEnumValue(
    request: RenameTagTemplateFieldEnumValueRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TagTemplateField>>;
  /**
   * Deletes a field in a tag template and all uses of that field.
   * Users should enable the Data Catalog API in the project identified by
   * the `name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  deleteTagTemplateField(
    request: DeleteTagTemplateFieldRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Creates a tag on an [Entry][google.cloud.datacatalog.v1beta1.Entry].
   * Note: The project identified by the `parent` parameter for the
   * [tag](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/create#path-parameters)
   * and the
   * [tag
   * template](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/create#path-parameters)
   * used to create the tag must be from the same organization.
   */
  createTag(request: CreateTagRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Tag>>;
  /** Updates an existing tag. */
  updateTag(request: UpdateTagRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Tag>>;
  /** Deletes a tag. */
  deleteTag(request: DeleteTagRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Lists tags assigned to an [Entry][google.cloud.datacatalog.v1beta1.Entry].
   * The [columns][google.cloud.datacatalog.v1beta1.Tag.column] in the response
   * are lowercased.
   */
  listTags(request: ListTagsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListTagsResponse>>;
  /**
   * Sets the access control policy for a resource. Replaces any existing
   * policy.
   * Supported resources are:
   *   - Tag templates.
   *   - Entries.
   *   - Entry groups.
   * Note, this method cannot be used to manage policies for BigQuery, Pub/Sub
   * and any external Google Cloud Platform resources synced to Data Catalog.
   *
   * Callers must have following Google IAM permission
   *   - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag
   *     templates.
   *   - `datacatalog.entries.setIamPolicy` to set policies on entries.
   *   - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups.
   */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Gets the access control policy for a resource. A `NOT_FOUND` error
   * is returned if the resource does not exist. An empty policy is returned
   * if the resource exists but does not have a policy set on it.
   *
   * Supported resources are:
   *   - Tag templates.
   *   - Entries.
   *   - Entry groups.
   * Note, this method cannot be used to manage policies for BigQuery, Pub/Sub
   * and any external Google Cloud Platform resources synced to Data Catalog.
   *
   * Callers must have following Google IAM permission
   *   - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag
   *     templates.
   *   - `datacatalog.entries.getIamPolicy` to get policies on entries.
   *   - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.
   */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Returns the caller's permissions on a resource.
   * If the resource does not exist, an empty set of permissions is returned
   * (We don't return a `NOT_FOUND` error).
   *
   * Supported resources are:
   *   - Tag templates.
   *   - Entries.
   *   - Entry groups.
   * Note, this method cannot be used to manage policies for BigQuery, Pub/Sub
   * and any external Google Cloud Platform resources synced to Data Catalog.
   *
   * A caller is not required to have Google IAM permission to make this
   * request.
   */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
}

export interface DataCatalogClient<CallOptionsExt = {}> {
  /**
   * Searches Data Catalog for multiple resources like entries, tags that
   * match a query.
   *
   * This is a custom method
   * (https://cloud.google.com/apis/design/custom_methods) and does not return
   * the complete resource, only the resource identifier and high level
   * fields. Clients can subsequently call `Get` methods.
   *
   * Note that Data Catalog search queries do not guarantee full recall. Query
   * results that match your query may not be returned, even in subsequent
   * result pages. Also note that results returned (and not returned) can vary
   * across repeated search queries.
   *
   * See [Data Catalog Search
   * Syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference)
   * for more information.
   */
  searchCatalog(
    request: DeepPartial<SearchCatalogRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchCatalogResponse>;
  /**
   * A maximum of 10,000 entry groups may be created per organization across all
   * locations.
   *
   * Users should enable the Data Catalog API in the project identified by
   * the `parent` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  createEntryGroup(
    request: DeepPartial<CreateEntryGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EntryGroup>;
  /**
   * Updates an EntryGroup. The user should enable the Data Catalog API in the
   * project identified by the `entry_group.name` parameter (see [Data Catalog
   * Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  updateEntryGroup(
    request: DeepPartial<UpdateEntryGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EntryGroup>;
  /** Gets an EntryGroup. */
  getEntryGroup(
    request: DeepPartial<GetEntryGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EntryGroup>;
  /**
   * Deletes an EntryGroup. Only entry groups that do not contain entries can be
   * deleted. Users should enable the Data Catalog API in the project
   * identified by the `name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  deleteEntryGroup(
    request: DeepPartial<DeleteEntryGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Lists entry groups. */
  listEntryGroups(
    request: DeepPartial<ListEntryGroupsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEntryGroupsResponse>;
  /**
   * Creates an entry. Only entries of 'FILESET' type or user-specified type can
   * be created.
   *
   * Users should enable the Data Catalog API in the project identified by
   * the `parent` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   *
   * A maximum of 100,000 entries may be created per entry group.
   */
  createEntry(request: DeepPartial<CreateEntryRequest>, options?: CallOptions & CallOptionsExt): Promise<Entry>;
  /**
   * Updates an existing entry.
   * Users should enable the Data Catalog API in the project identified by
   * the `entry.name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  updateEntry(request: DeepPartial<UpdateEntryRequest>, options?: CallOptions & CallOptionsExt): Promise<Entry>;
  /**
   * Deletes an existing entry. Only entries created through
   * [CreateEntry][google.cloud.datacatalog.v1beta1.DataCatalog.CreateEntry]
   * method can be deleted.
   * Users should enable the Data Catalog API in the project identified by
   * the `name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  deleteEntry(request: DeepPartial<DeleteEntryRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Gets an entry. */
  getEntry(request: DeepPartial<GetEntryRequest>, options?: CallOptions & CallOptionsExt): Promise<Entry>;
  /**
   * Get an entry by target resource name. This method allows clients to use
   * the resource name from the source Google Cloud Platform service to get the
   * Data Catalog Entry.
   */
  lookupEntry(request: DeepPartial<LookupEntryRequest>, options?: CallOptions & CallOptionsExt): Promise<Entry>;
  /** Lists entries. */
  listEntries(
    request: DeepPartial<ListEntriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEntriesResponse>;
  /**
   * Creates a tag template. The user should enable the Data Catalog API in
   * the project identified by the `parent` parameter (see [Data Catalog
   * Resource
   * Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project)
   * for more information).
   */
  createTagTemplate(
    request: DeepPartial<CreateTagTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TagTemplate>;
  /** Gets a tag template. */
  getTagTemplate(
    request: DeepPartial<GetTagTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TagTemplate>;
  /**
   * Updates a tag template. This method cannot be used to update the fields of
   * a template. The tag template fields are represented as separate resources
   * and should be updated using their own create/update/delete methods.
   * Users should enable the Data Catalog API in the project identified by
   * the `tag_template.name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  updateTagTemplate(
    request: DeepPartial<UpdateTagTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TagTemplate>;
  /**
   * Deletes a tag template and all tags using the template.
   * Users should enable the Data Catalog API in the project identified by
   * the `name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  deleteTagTemplate(
    request: DeepPartial<DeleteTagTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Creates a field in a tag template. The user should enable the Data Catalog
   * API in the project identified by the `parent` parameter (see
   * [Data Catalog Resource
   * Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project)
   * for more information).
   */
  createTagTemplateField(
    request: DeepPartial<CreateTagTemplateFieldRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TagTemplateField>;
  /**
   * Updates a field in a tag template. This method cannot be used to update the
   * field type. Users should enable the Data Catalog API in the project
   * identified by the `name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  updateTagTemplateField(
    request: DeepPartial<UpdateTagTemplateFieldRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TagTemplateField>;
  /**
   * Renames a field in a tag template. The user should enable the Data Catalog
   * API in the project identified by the `name` parameter (see [Data Catalog
   * Resource
   * Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project)
   * for more information).
   */
  renameTagTemplateField(
    request: DeepPartial<RenameTagTemplateFieldRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TagTemplateField>;
  /**
   * Renames an enum value in a tag template. The enum values have to be unique
   * within one enum field. Thus, an enum value cannot be renamed with a name
   * used in any other enum value within the same enum field.
   */
  renameTagTemplateFieldEnumValue(
    request: DeepPartial<RenameTagTemplateFieldEnumValueRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TagTemplateField>;
  /**
   * Deletes a field in a tag template and all uses of that field.
   * Users should enable the Data Catalog API in the project identified by
   * the `name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for
   * more information).
   */
  deleteTagTemplateField(
    request: DeepPartial<DeleteTagTemplateFieldRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Creates a tag on an [Entry][google.cloud.datacatalog.v1beta1.Entry].
   * Note: The project identified by the `parent` parameter for the
   * [tag](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/create#path-parameters)
   * and the
   * [tag
   * template](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/create#path-parameters)
   * used to create the tag must be from the same organization.
   */
  createTag(request: DeepPartial<CreateTagRequest>, options?: CallOptions & CallOptionsExt): Promise<Tag>;
  /** Updates an existing tag. */
  updateTag(request: DeepPartial<UpdateTagRequest>, options?: CallOptions & CallOptionsExt): Promise<Tag>;
  /** Deletes a tag. */
  deleteTag(request: DeepPartial<DeleteTagRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Lists tags assigned to an [Entry][google.cloud.datacatalog.v1beta1.Entry].
   * The [columns][google.cloud.datacatalog.v1beta1.Tag.column] in the response
   * are lowercased.
   */
  listTags(request: DeepPartial<ListTagsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListTagsResponse>;
  /**
   * Sets the access control policy for a resource. Replaces any existing
   * policy.
   * Supported resources are:
   *   - Tag templates.
   *   - Entries.
   *   - Entry groups.
   * Note, this method cannot be used to manage policies for BigQuery, Pub/Sub
   * and any external Google Cloud Platform resources synced to Data Catalog.
   *
   * Callers must have following Google IAM permission
   *   - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag
   *     templates.
   *   - `datacatalog.entries.setIamPolicy` to set policies on entries.
   *   - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups.
   */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Gets the access control policy for a resource. A `NOT_FOUND` error
   * is returned if the resource does not exist. An empty policy is returned
   * if the resource exists but does not have a policy set on it.
   *
   * Supported resources are:
   *   - Tag templates.
   *   - Entries.
   *   - Entry groups.
   * Note, this method cannot be used to manage policies for BigQuery, Pub/Sub
   * and any external Google Cloud Platform resources synced to Data Catalog.
   *
   * Callers must have following Google IAM permission
   *   - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag
   *     templates.
   *   - `datacatalog.entries.getIamPolicy` to get policies on entries.
   *   - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.
   */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Returns the caller's permissions on a resource.
   * If the resource does not exist, an empty set of permissions is returned
   * (We don't return a `NOT_FOUND` error).
   *
   * Supported resources are:
   *   - Tag templates.
   *   - Entries.
   *   - Entry groups.
   * Note, this method cannot be used to manage policies for BigQuery, Pub/Sub
   * and any external Google Cloud Platform resources synced to Data Catalog.
   *
   * A caller is not required to have Google IAM permission to make this
   * request.
   */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
