// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/datacatalog/v1beta1/policytagmanager.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { ManagingSystem, managingSystemFromJSON, managingSystemToJSON } from "./common.js";
import { SystemTimestamps } from "./timestamps.js";

export const protobufPackage = "google.cloud.datacatalog.v1beta1";

/**
 * A taxonomy is a collection of policy tags that classify data along a common
 * axis. For instance a data *sensitivity* taxonomy could contain policy tags
 * denoting PII such as age, zipcode, and SSN. A data *origin* taxonomy could
 * contain policy tags to distinguish user data, employee data, partner data,
 * public data.
 */
export interface Taxonomy {
  /**
   * Identifier. Resource name of this taxonomy, whose format is:
   * "projects/{project_number}/locations/{location_id}/taxonomies/{id}".
   */
  name: string;
  /**
   * Required. User defined name of this taxonomy. It must: contain only unicode
   * letters, numbers, underscores, dashes and spaces; not start or end with
   * spaces; and be at most 200 bytes long when encoded in UTF-8.
   *
   * The taxonomy display name must be unique within an organization.
   */
  displayName: string;
  /**
   * Optional. Description of this taxonomy. It must: contain only unicode
   * characters, tabs, newlines, carriage returns and page breaks; and be at
   * most 2000 bytes long when encoded in UTF-8. If not set, defaults to an
   * empty description.
   */
  description: string;
  /** Output only. Number of policy tags contained in this taxonomy. */
  policyTagCount: number;
  /**
   * Output only. Timestamps about this taxonomy. Only create_time and
   * update_time are used.
   */
  taxonomyTimestamps:
    | SystemTimestamps
    | undefined;
  /**
   * Optional. A list of policy types that are activated for this taxonomy. If
   * not set, defaults to an empty list.
   */
  activatedPolicyTypes: Taxonomy_PolicyType[];
  /**
   * Output only. Identity of the service which owns the Taxonomy. This field is
   * only populated when the taxonomy is created by a Google Cloud service.
   * Currently only 'DATAPLEX' is supported.
   */
  service: Taxonomy_Service | undefined;
}

/** Defines policy types where policy tag can be used for. */
export enum Taxonomy_PolicyType {
  /** POLICY_TYPE_UNSPECIFIED - Unspecified policy type. */
  POLICY_TYPE_UNSPECIFIED = 0,
  /**
   * FINE_GRAINED_ACCESS_CONTROL - Fine grained access control policy, which enables access control on
   * tagged resources.
   */
  FINE_GRAINED_ACCESS_CONTROL = 1,
  UNRECOGNIZED = -1,
}

export function taxonomy_PolicyTypeFromJSON(object: any): Taxonomy_PolicyType {
  switch (object) {
    case 0:
    case "POLICY_TYPE_UNSPECIFIED":
      return Taxonomy_PolicyType.POLICY_TYPE_UNSPECIFIED;
    case 1:
    case "FINE_GRAINED_ACCESS_CONTROL":
      return Taxonomy_PolicyType.FINE_GRAINED_ACCESS_CONTROL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Taxonomy_PolicyType.UNRECOGNIZED;
  }
}

export function taxonomy_PolicyTypeToJSON(object: Taxonomy_PolicyType): string {
  switch (object) {
    case Taxonomy_PolicyType.POLICY_TYPE_UNSPECIFIED:
      return "POLICY_TYPE_UNSPECIFIED";
    case Taxonomy_PolicyType.FINE_GRAINED_ACCESS_CONTROL:
      return "FINE_GRAINED_ACCESS_CONTROL";
    case Taxonomy_PolicyType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The source system of the Taxonomy. */
export interface Taxonomy_Service {
  /** The Google Cloud service name. */
  name: ManagingSystem;
  /** The service agent for the service. */
  identity: string;
}

/**
 * Denotes one policy tag in a taxonomy (e.g. ssn). Policy Tags can be defined
 * in a hierarchy. For example, consider the following hierarchy:
 * Geolocation -&gt; (LatLong, City, ZipCode). PolicyTag "Geolocation"
 * contains three child policy tags: "LatLong", "City", and "ZipCode".
 */
export interface PolicyTag {
  /**
   * Identifier. Resource name of this policy tag, whose format is:
   * "projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{id}".
   */
  name: string;
  /**
   * Required. User defined name of this policy tag. It must: be unique within
   * the parent taxonomy; contain only unicode letters, numbers, underscores,
   * dashes and spaces; not start or end with spaces; and be at most 200 bytes
   * long when encoded in UTF-8.
   */
  displayName: string;
  /**
   * Description of this policy tag. It must: contain only unicode characters,
   * tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes
   * long when encoded in UTF-8. If not set, defaults to an empty description.
   * If not set, defaults to an empty description.
   */
  description: string;
  /**
   * Resource name of this policy tag's parent policy tag (e.g. for the
   * "LatLong" policy tag in the example above, this field contains the
   * resource name of the "Geolocation" policy tag). If empty, it means this
   * policy tag is a top level policy tag (e.g. this field is empty for the
   * "Geolocation" policy tag in the example above). If not set, defaults to an
   * empty string.
   */
  parentPolicyTag: string;
  /** Output only. Resource names of child policy tags of this policy tag. */
  childPolicyTags: string[];
}

/**
 * Request message for
 * [CreateTaxonomy][google.cloud.datacatalog.v1beta1.PolicyTagManager.CreateTaxonomy].
 */
export interface CreateTaxonomyRequest {
  /** Required. Resource name of the project that the taxonomy will belong to. */
  parent: string;
  /** The taxonomy to be created. */
  taxonomy: Taxonomy | undefined;
}

/**
 * Request message for
 * [DeleteTaxonomy][google.cloud.datacatalog.v1beta1.PolicyTagManager.DeleteTaxonomy].
 */
export interface DeleteTaxonomyRequest {
  /**
   * Required. Resource name of the taxonomy to be deleted. All policy tags in
   * this taxonomy will also be deleted.
   */
  name: string;
}

/**
 * Request message for
 * [UpdateTaxonomy][google.cloud.datacatalog.v1beta1.PolicyTagManager.UpdateTaxonomy].
 */
export interface UpdateTaxonomyRequest {
  /**
   * The taxonomy to update. Only description, display_name, and activated
   * policy types can be updated.
   */
  taxonomy:
    | Taxonomy
    | undefined;
  /**
   * The update mask applies to the resource. For the `FieldMask` definition,
   * see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   * If not set, defaults to all of the fields that are allowed to update.
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [ListTaxonomies][google.cloud.datacatalog.v1beta1.PolicyTagManager.ListTaxonomies].
 */
export interface ListTaxonomiesRequest {
  /** Required. Resource name of the project to list the taxonomies of. */
  parent: string;
  /**
   * The maximum number of items to return. Must be a value between 1 and 1000.
   * If not set, defaults to 50.
   */
  pageSize: number;
  /**
   * The next_page_token value returned from a previous list request, if any. If
   * not set, defaults to an empty string.
   */
  pageToken: string;
  /**
   * Supported field for filter is 'service' and value is 'dataplex'.
   * Eg: service=dataplex.
   */
  filter: string;
}

/**
 * Response message for
 * [ListTaxonomies][google.cloud.datacatalog.v1beta1.PolicyTagManager.ListTaxonomies].
 */
export interface ListTaxonomiesResponse {
  /** Taxonomies that the project contains. */
  taxonomies: Taxonomy[];
  /**
   * Token used to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [GetTaxonomy][google.cloud.datacatalog.v1beta1.PolicyTagManager.GetTaxonomy].
 */
export interface GetTaxonomyRequest {
  /** Required. Resource name of the requested taxonomy. */
  name: string;
}

/**
 * Request message for
 * [CreatePolicyTag][google.cloud.datacatalog.v1beta1.PolicyTagManager.CreatePolicyTag].
 */
export interface CreatePolicyTagRequest {
  /** Required. Resource name of the taxonomy that the policy tag will belong to. */
  parent: string;
  /** The policy tag to be created. */
  policyTag: PolicyTag | undefined;
}

/**
 * Request message for
 * [DeletePolicyTag][google.cloud.datacatalog.v1beta1.PolicyTagManager.DeletePolicyTag].
 */
export interface DeletePolicyTagRequest {
  /**
   * Required. Resource name of the policy tag to be deleted. All of its
   * descendant policy tags will also be deleted.
   */
  name: string;
}

/**
 * Request message for
 * [UpdatePolicyTag][google.cloud.datacatalog.v1beta1.PolicyTagManager.UpdatePolicyTag].
 */
export interface UpdatePolicyTagRequest {
  /**
   * The policy tag to update. Only the description, display_name, and
   * parent_policy_tag fields can be updated.
   */
  policyTag:
    | PolicyTag
    | undefined;
  /**
   * The update mask applies to the resource. Only display_name, description and
   * parent_policy_tag can be updated and thus can be listed in the mask. If
   * update_mask is not provided, all allowed fields (i.e. display_name,
   * description and parent) will be updated. For more information including the
   * `FieldMask` definition, see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   * If not set, defaults to all of the fields that are allowed to update.
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [ListPolicyTags][google.cloud.datacatalog.v1beta1.PolicyTagManager.ListPolicyTags].
 */
export interface ListPolicyTagsRequest {
  /** Required. Resource name of the taxonomy to list the policy tags of. */
  parent: string;
  /**
   * The maximum number of items to return. Must be a value between 1 and 1000.
   * If not set, defaults to 50.
   */
  pageSize: number;
  /**
   * The next_page_token value returned from a previous List request, if any. If
   * not set, defaults to an empty string.
   */
  pageToken: string;
}

/**
 * Response message for
 * [ListPolicyTags][google.cloud.datacatalog.v1beta1.PolicyTagManager.ListPolicyTags].
 */
export interface ListPolicyTagsResponse {
  /** The policy tags that are in the requested taxonomy. */
  policyTags: PolicyTag[];
  /**
   * Token used to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [GetPolicyTag][google.cloud.datacatalog.v1beta1.PolicyTagManager.GetPolicyTag].
 */
export interface GetPolicyTagRequest {
  /** Required. Resource name of the requested policy tag. */
  name: string;
}

function createBaseTaxonomy(): Taxonomy {
  return {
    name: "",
    displayName: "",
    description: "",
    policyTagCount: 0,
    taxonomyTimestamps: undefined,
    activatedPolicyTypes: [],
    service: undefined,
  };
}

export const Taxonomy: MessageFns<Taxonomy> = {
  encode(message: Taxonomy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.policyTagCount !== 0) {
      writer.uint32(32).int32(message.policyTagCount);
    }
    if (message.taxonomyTimestamps !== undefined) {
      SystemTimestamps.encode(message.taxonomyTimestamps, writer.uint32(42).fork()).join();
    }
    writer.uint32(50).fork();
    for (const v of message.activatedPolicyTypes) {
      writer.int32(v);
    }
    writer.join();
    if (message.service !== undefined) {
      Taxonomy_Service.encode(message.service, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Taxonomy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaxonomy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.policyTagCount = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.taxonomyTimestamps = SystemTimestamps.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag === 48) {
            message.activatedPolicyTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.activatedPolicyTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.service = Taxonomy_Service.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Taxonomy {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      policyTagCount: isSet(object.policyTagCount) ? globalThis.Number(object.policyTagCount) : 0,
      taxonomyTimestamps: isSet(object.taxonomyTimestamps)
        ? SystemTimestamps.fromJSON(object.taxonomyTimestamps)
        : undefined,
      activatedPolicyTypes: globalThis.Array.isArray(object?.activatedPolicyTypes)
        ? object.activatedPolicyTypes.map((e: any) => taxonomy_PolicyTypeFromJSON(e))
        : [],
      service: isSet(object.service) ? Taxonomy_Service.fromJSON(object.service) : undefined,
    };
  },

  toJSON(message: Taxonomy): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.policyTagCount !== 0) {
      obj.policyTagCount = Math.round(message.policyTagCount);
    }
    if (message.taxonomyTimestamps !== undefined) {
      obj.taxonomyTimestamps = SystemTimestamps.toJSON(message.taxonomyTimestamps);
    }
    if (message.activatedPolicyTypes?.length) {
      obj.activatedPolicyTypes = message.activatedPolicyTypes.map((e) => taxonomy_PolicyTypeToJSON(e));
    }
    if (message.service !== undefined) {
      obj.service = Taxonomy_Service.toJSON(message.service);
    }
    return obj;
  },

  create(base?: DeepPartial<Taxonomy>): Taxonomy {
    return Taxonomy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Taxonomy>): Taxonomy {
    const message = createBaseTaxonomy();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.policyTagCount = object.policyTagCount ?? 0;
    message.taxonomyTimestamps = (object.taxonomyTimestamps !== undefined && object.taxonomyTimestamps !== null)
      ? SystemTimestamps.fromPartial(object.taxonomyTimestamps)
      : undefined;
    message.activatedPolicyTypes = object.activatedPolicyTypes?.map((e) => e) || [];
    message.service = (object.service !== undefined && object.service !== null)
      ? Taxonomy_Service.fromPartial(object.service)
      : undefined;
    return message;
  },
};

function createBaseTaxonomy_Service(): Taxonomy_Service {
  return { name: 0, identity: "" };
}

export const Taxonomy_Service: MessageFns<Taxonomy_Service> = {
  encode(message: Taxonomy_Service, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== 0) {
      writer.uint32(8).int32(message.name);
    }
    if (message.identity !== "") {
      writer.uint32(18).string(message.identity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Taxonomy_Service {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaxonomy_Service();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.name = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.identity = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Taxonomy_Service {
    return {
      name: isSet(object.name) ? managingSystemFromJSON(object.name) : 0,
      identity: isSet(object.identity) ? globalThis.String(object.identity) : "",
    };
  },

  toJSON(message: Taxonomy_Service): unknown {
    const obj: any = {};
    if (message.name !== 0) {
      obj.name = managingSystemToJSON(message.name);
    }
    if (message.identity !== "") {
      obj.identity = message.identity;
    }
    return obj;
  },

  create(base?: DeepPartial<Taxonomy_Service>): Taxonomy_Service {
    return Taxonomy_Service.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Taxonomy_Service>): Taxonomy_Service {
    const message = createBaseTaxonomy_Service();
    message.name = object.name ?? 0;
    message.identity = object.identity ?? "";
    return message;
  },
};

function createBasePolicyTag(): PolicyTag {
  return { name: "", displayName: "", description: "", parentPolicyTag: "", childPolicyTags: [] };
}

export const PolicyTag: MessageFns<PolicyTag> = {
  encode(message: PolicyTag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.parentPolicyTag !== "") {
      writer.uint32(34).string(message.parentPolicyTag);
    }
    for (const v of message.childPolicyTags) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PolicyTag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicyTag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.parentPolicyTag = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.childPolicyTags.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PolicyTag {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      parentPolicyTag: isSet(object.parentPolicyTag) ? globalThis.String(object.parentPolicyTag) : "",
      childPolicyTags: globalThis.Array.isArray(object?.childPolicyTags)
        ? object.childPolicyTags.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: PolicyTag): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.parentPolicyTag !== "") {
      obj.parentPolicyTag = message.parentPolicyTag;
    }
    if (message.childPolicyTags?.length) {
      obj.childPolicyTags = message.childPolicyTags;
    }
    return obj;
  },

  create(base?: DeepPartial<PolicyTag>): PolicyTag {
    return PolicyTag.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PolicyTag>): PolicyTag {
    const message = createBasePolicyTag();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.parentPolicyTag = object.parentPolicyTag ?? "";
    message.childPolicyTags = object.childPolicyTags?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateTaxonomyRequest(): CreateTaxonomyRequest {
  return { parent: "", taxonomy: undefined };
}

export const CreateTaxonomyRequest: MessageFns<CreateTaxonomyRequest> = {
  encode(message: CreateTaxonomyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.taxonomy !== undefined) {
      Taxonomy.encode(message.taxonomy, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTaxonomyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTaxonomyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.taxonomy = Taxonomy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTaxonomyRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      taxonomy: isSet(object.taxonomy) ? Taxonomy.fromJSON(object.taxonomy) : undefined,
    };
  },

  toJSON(message: CreateTaxonomyRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.taxonomy !== undefined) {
      obj.taxonomy = Taxonomy.toJSON(message.taxonomy);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTaxonomyRequest>): CreateTaxonomyRequest {
    return CreateTaxonomyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTaxonomyRequest>): CreateTaxonomyRequest {
    const message = createBaseCreateTaxonomyRequest();
    message.parent = object.parent ?? "";
    message.taxonomy = (object.taxonomy !== undefined && object.taxonomy !== null)
      ? Taxonomy.fromPartial(object.taxonomy)
      : undefined;
    return message;
  },
};

function createBaseDeleteTaxonomyRequest(): DeleteTaxonomyRequest {
  return { name: "" };
}

export const DeleteTaxonomyRequest: MessageFns<DeleteTaxonomyRequest> = {
  encode(message: DeleteTaxonomyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTaxonomyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTaxonomyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTaxonomyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteTaxonomyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTaxonomyRequest>): DeleteTaxonomyRequest {
    return DeleteTaxonomyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTaxonomyRequest>): DeleteTaxonomyRequest {
    const message = createBaseDeleteTaxonomyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateTaxonomyRequest(): UpdateTaxonomyRequest {
  return { taxonomy: undefined, updateMask: undefined };
}

export const UpdateTaxonomyRequest: MessageFns<UpdateTaxonomyRequest> = {
  encode(message: UpdateTaxonomyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taxonomy !== undefined) {
      Taxonomy.encode(message.taxonomy, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTaxonomyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTaxonomyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.taxonomy = Taxonomy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTaxonomyRequest {
    return {
      taxonomy: isSet(object.taxonomy) ? Taxonomy.fromJSON(object.taxonomy) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateTaxonomyRequest): unknown {
    const obj: any = {};
    if (message.taxonomy !== undefined) {
      obj.taxonomy = Taxonomy.toJSON(message.taxonomy);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTaxonomyRequest>): UpdateTaxonomyRequest {
    return UpdateTaxonomyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTaxonomyRequest>): UpdateTaxonomyRequest {
    const message = createBaseUpdateTaxonomyRequest();
    message.taxonomy = (object.taxonomy !== undefined && object.taxonomy !== null)
      ? Taxonomy.fromPartial(object.taxonomy)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListTaxonomiesRequest(): ListTaxonomiesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListTaxonomiesRequest: MessageFns<ListTaxonomiesRequest> = {
  encode(message: ListTaxonomiesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTaxonomiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTaxonomiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTaxonomiesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListTaxonomiesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTaxonomiesRequest>): ListTaxonomiesRequest {
    return ListTaxonomiesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTaxonomiesRequest>): ListTaxonomiesRequest {
    const message = createBaseListTaxonomiesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListTaxonomiesResponse(): ListTaxonomiesResponse {
  return { taxonomies: [], nextPageToken: "" };
}

export const ListTaxonomiesResponse: MessageFns<ListTaxonomiesResponse> = {
  encode(message: ListTaxonomiesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.taxonomies) {
      Taxonomy.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTaxonomiesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTaxonomiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.taxonomies.push(Taxonomy.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTaxonomiesResponse {
    return {
      taxonomies: globalThis.Array.isArray(object?.taxonomies)
        ? object.taxonomies.map((e: any) => Taxonomy.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTaxonomiesResponse): unknown {
    const obj: any = {};
    if (message.taxonomies?.length) {
      obj.taxonomies = message.taxonomies.map((e) => Taxonomy.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTaxonomiesResponse>): ListTaxonomiesResponse {
    return ListTaxonomiesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTaxonomiesResponse>): ListTaxonomiesResponse {
    const message = createBaseListTaxonomiesResponse();
    message.taxonomies = object.taxonomies?.map((e) => Taxonomy.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetTaxonomyRequest(): GetTaxonomyRequest {
  return { name: "" };
}

export const GetTaxonomyRequest: MessageFns<GetTaxonomyRequest> = {
  encode(message: GetTaxonomyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTaxonomyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTaxonomyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTaxonomyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTaxonomyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTaxonomyRequest>): GetTaxonomyRequest {
    return GetTaxonomyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTaxonomyRequest>): GetTaxonomyRequest {
    const message = createBaseGetTaxonomyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreatePolicyTagRequest(): CreatePolicyTagRequest {
  return { parent: "", policyTag: undefined };
}

export const CreatePolicyTagRequest: MessageFns<CreatePolicyTagRequest> = {
  encode(message: CreatePolicyTagRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.policyTag !== undefined) {
      PolicyTag.encode(message.policyTag, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePolicyTagRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePolicyTagRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.policyTag = PolicyTag.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePolicyTagRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      policyTag: isSet(object.policyTag) ? PolicyTag.fromJSON(object.policyTag) : undefined,
    };
  },

  toJSON(message: CreatePolicyTagRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.policyTag !== undefined) {
      obj.policyTag = PolicyTag.toJSON(message.policyTag);
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePolicyTagRequest>): CreatePolicyTagRequest {
    return CreatePolicyTagRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePolicyTagRequest>): CreatePolicyTagRequest {
    const message = createBaseCreatePolicyTagRequest();
    message.parent = object.parent ?? "";
    message.policyTag = (object.policyTag !== undefined && object.policyTag !== null)
      ? PolicyTag.fromPartial(object.policyTag)
      : undefined;
    return message;
  },
};

function createBaseDeletePolicyTagRequest(): DeletePolicyTagRequest {
  return { name: "" };
}

export const DeletePolicyTagRequest: MessageFns<DeletePolicyTagRequest> = {
  encode(message: DeletePolicyTagRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePolicyTagRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePolicyTagRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePolicyTagRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeletePolicyTagRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePolicyTagRequest>): DeletePolicyTagRequest {
    return DeletePolicyTagRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePolicyTagRequest>): DeletePolicyTagRequest {
    const message = createBaseDeletePolicyTagRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdatePolicyTagRequest(): UpdatePolicyTagRequest {
  return { policyTag: undefined, updateMask: undefined };
}

export const UpdatePolicyTagRequest: MessageFns<UpdatePolicyTagRequest> = {
  encode(message: UpdatePolicyTagRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policyTag !== undefined) {
      PolicyTag.encode(message.policyTag, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePolicyTagRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePolicyTagRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policyTag = PolicyTag.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePolicyTagRequest {
    return {
      policyTag: isSet(object.policyTag) ? PolicyTag.fromJSON(object.policyTag) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdatePolicyTagRequest): unknown {
    const obj: any = {};
    if (message.policyTag !== undefined) {
      obj.policyTag = PolicyTag.toJSON(message.policyTag);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePolicyTagRequest>): UpdatePolicyTagRequest {
    return UpdatePolicyTagRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePolicyTagRequest>): UpdatePolicyTagRequest {
    const message = createBaseUpdatePolicyTagRequest();
    message.policyTag = (object.policyTag !== undefined && object.policyTag !== null)
      ? PolicyTag.fromPartial(object.policyTag)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListPolicyTagsRequest(): ListPolicyTagsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListPolicyTagsRequest: MessageFns<ListPolicyTagsRequest> = {
  encode(message: ListPolicyTagsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPolicyTagsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPolicyTagsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPolicyTagsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListPolicyTagsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPolicyTagsRequest>): ListPolicyTagsRequest {
    return ListPolicyTagsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPolicyTagsRequest>): ListPolicyTagsRequest {
    const message = createBaseListPolicyTagsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListPolicyTagsResponse(): ListPolicyTagsResponse {
  return { policyTags: [], nextPageToken: "" };
}

export const ListPolicyTagsResponse: MessageFns<ListPolicyTagsResponse> = {
  encode(message: ListPolicyTagsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.policyTags) {
      PolicyTag.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPolicyTagsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPolicyTagsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policyTags.push(PolicyTag.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPolicyTagsResponse {
    return {
      policyTags: globalThis.Array.isArray(object?.policyTags)
        ? object.policyTags.map((e: any) => PolicyTag.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListPolicyTagsResponse): unknown {
    const obj: any = {};
    if (message.policyTags?.length) {
      obj.policyTags = message.policyTags.map((e) => PolicyTag.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPolicyTagsResponse>): ListPolicyTagsResponse {
    return ListPolicyTagsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPolicyTagsResponse>): ListPolicyTagsResponse {
    const message = createBaseListPolicyTagsResponse();
    message.policyTags = object.policyTags?.map((e) => PolicyTag.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetPolicyTagRequest(): GetPolicyTagRequest {
  return { name: "" };
}

export const GetPolicyTagRequest: MessageFns<GetPolicyTagRequest> = {
  encode(message: GetPolicyTagRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPolicyTagRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPolicyTagRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPolicyTagRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPolicyTagRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPolicyTagRequest>): GetPolicyTagRequest {
    return GetPolicyTagRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPolicyTagRequest>): GetPolicyTagRequest {
    const message = createBaseGetPolicyTagRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * The policy tag manager API service allows clients to manage their taxonomies
 * and policy tags.
 */
export type PolicyTagManagerDefinition = typeof PolicyTagManagerDefinition;
export const PolicyTagManagerDefinition = {
  name: "PolicyTagManager",
  fullName: "google.cloud.datacatalog.v1beta1.PolicyTagManager",
  methods: {
    /** Creates a taxonomy in the specified project. */
    createTaxonomy: {
      name: "CreateTaxonomy",
      requestType: CreateTaxonomyRequest,
      requestStream: false,
      responseType: Taxonomy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 116, 97, 120, 111, 110, 111, 109, 121])],
          578365826: [
            Buffer.from([
              63,
              58,
              8,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              121,
              34,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a taxonomy. This operation will also delete all
     * policy tags in this taxonomy along with their associated policies.
     */
    deleteTaxonomy: {
      name: "DeleteTaxonomy",
      requestType: DeleteTaxonomyRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              42,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a taxonomy. */
    updateTaxonomy: {
      name: "UpdateTaxonomy",
      requestType: UpdateTaxonomyRequest,
      requestStream: false,
      responseType: Taxonomy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 116, 97, 120, 111, 110, 111, 109, 121])],
          578365826: [
            Buffer.from([
              72,
              58,
              8,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              121,
              50,
              60,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all taxonomies in a project in a particular location that the caller
     * has permission to view.
     */
    listTaxonomies: {
      name: "ListTaxonomies",
      requestType: ListTaxonomiesRequest,
      requestStream: false,
      responseType: ListTaxonomiesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a taxonomy. */
    getTaxonomy: {
      name: "GetTaxonomy",
      requestType: GetTaxonomyRequest,
      requestStream: false,
      responseType: Taxonomy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a policy tag in the specified taxonomy. */
    createPolicyTag: {
      name: "CreatePolicyTag",
      requestType: CreatePolicyTagRequest,
      requestStream: false,
      responseType: PolicyTag,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 112, 97, 114, 101, 110, 116, 44, 112, 111, 108, 105, 99, 121, 95, 116, 97, 103])],
          578365826: [
            Buffer.from([
              78,
              58,
              10,
              112,
              111,
              108,
              105,
              99,
              121,
              95,
              116,
              97,
              103,
              34,
              64,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              112,
              111,
              108,
              105,
              99,
              121,
              84,
              97,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a policy tag. Also deletes all of its descendant policy tags. */
    deletePolicyTag: {
      name: "DeletePolicyTag",
      requestType: DeletePolicyTagRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              66,
              42,
              64,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              121,
              84,
              97,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a policy tag. */
    updatePolicyTag: {
      name: "UpdatePolicyTag",
      requestType: UpdatePolicyTagRequest,
      requestStream: false,
      responseType: PolicyTag,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 112, 111, 108, 105, 99, 121, 95, 116, 97, 103])],
          578365826: [
            Buffer.from([
              89,
              58,
              10,
              112,
              111,
              108,
              105,
              99,
              121,
              95,
              116,
              97,
              103,
              50,
              75,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              111,
              108,
              105,
              99,
              121,
              95,
              116,
              97,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              121,
              84,
              97,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all policy tags in a taxonomy. */
    listPolicyTags: {
      name: "ListPolicyTags",
      requestType: ListPolicyTagsRequest,
      requestStream: false,
      responseType: ListPolicyTagsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              66,
              18,
              64,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              112,
              111,
              108,
              105,
              99,
              121,
              84,
              97,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a policy tag. */
    getPolicyTag: {
      name: "GetPolicyTag",
      requestType: GetPolicyTagRequest,
      requestStream: false,
      responseType: PolicyTag,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              66,
              18,
              64,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              121,
              84,
              97,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets the IAM policy for a taxonomy or a policy tag. */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              161,
              1,
              58,
              1,
              42,
              90,
              86,
              58,
              1,
              42,
              34,
              81,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              121,
              84,
              97,
              103,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              34,
              68,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /** Sets the IAM policy for a taxonomy or a policy tag. */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              161,
              1,
              58,
              1,
              42,
              90,
              86,
              58,
              1,
              42,
              34,
              81,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              121,
              84,
              97,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              34,
              68,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the permissions that a caller has on the specified taxonomy or
     * policy tag.
     */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              173,
              1,
              58,
              1,
              42,
              90,
              92,
              58,
              1,
              42,
              34,
              87,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              121,
              84,
              97,
              103,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              34,
              74,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface PolicyTagManagerServiceImplementation<CallContextExt = {}> {
  /** Creates a taxonomy in the specified project. */
  createTaxonomy(request: CreateTaxonomyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Taxonomy>>;
  /**
   * Deletes a taxonomy. This operation will also delete all
   * policy tags in this taxonomy along with their associated policies.
   */
  deleteTaxonomy(request: DeleteTaxonomyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Updates a taxonomy. */
  updateTaxonomy(request: UpdateTaxonomyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Taxonomy>>;
  /**
   * Lists all taxonomies in a project in a particular location that the caller
   * has permission to view.
   */
  listTaxonomies(
    request: ListTaxonomiesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTaxonomiesResponse>>;
  /** Gets a taxonomy. */
  getTaxonomy(request: GetTaxonomyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Taxonomy>>;
  /** Creates a policy tag in the specified taxonomy. */
  createPolicyTag(
    request: CreatePolicyTagRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PolicyTag>>;
  /** Deletes a policy tag. Also deletes all of its descendant policy tags. */
  deletePolicyTag(request: DeletePolicyTagRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Updates a policy tag. */
  updatePolicyTag(
    request: UpdatePolicyTagRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PolicyTag>>;
  /** Lists all policy tags in a taxonomy. */
  listPolicyTags(
    request: ListPolicyTagsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPolicyTagsResponse>>;
  /** Gets a policy tag. */
  getPolicyTag(request: GetPolicyTagRequest, context: CallContext & CallContextExt): Promise<DeepPartial<PolicyTag>>;
  /** Gets the IAM policy for a taxonomy or a policy tag. */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /** Sets the IAM policy for a taxonomy or a policy tag. */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Returns the permissions that a caller has on the specified taxonomy or
   * policy tag.
   */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
}

export interface PolicyTagManagerClient<CallOptionsExt = {}> {
  /** Creates a taxonomy in the specified project. */
  createTaxonomy(
    request: DeepPartial<CreateTaxonomyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Taxonomy>;
  /**
   * Deletes a taxonomy. This operation will also delete all
   * policy tags in this taxonomy along with their associated policies.
   */
  deleteTaxonomy(request: DeepPartial<DeleteTaxonomyRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Updates a taxonomy. */
  updateTaxonomy(
    request: DeepPartial<UpdateTaxonomyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Taxonomy>;
  /**
   * Lists all taxonomies in a project in a particular location that the caller
   * has permission to view.
   */
  listTaxonomies(
    request: DeepPartial<ListTaxonomiesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTaxonomiesResponse>;
  /** Gets a taxonomy. */
  getTaxonomy(request: DeepPartial<GetTaxonomyRequest>, options?: CallOptions & CallOptionsExt): Promise<Taxonomy>;
  /** Creates a policy tag in the specified taxonomy. */
  createPolicyTag(
    request: DeepPartial<CreatePolicyTagRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PolicyTag>;
  /** Deletes a policy tag. Also deletes all of its descendant policy tags. */
  deletePolicyTag(request: DeepPartial<DeletePolicyTagRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Updates a policy tag. */
  updatePolicyTag(
    request: DeepPartial<UpdatePolicyTagRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PolicyTag>;
  /** Lists all policy tags in a taxonomy. */
  listPolicyTags(
    request: DeepPartial<ListPolicyTagsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPolicyTagsResponse>;
  /** Gets a policy tag. */
  getPolicyTag(request: DeepPartial<GetPolicyTagRequest>, options?: CallOptions & CallOptionsExt): Promise<PolicyTag>;
  /** Gets the IAM policy for a taxonomy or a policy tag. */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /** Sets the IAM policy for a taxonomy or a policy tag. */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Returns the permissions that a caller has on the specified taxonomy or
   * policy tag.
   */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
