// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gsuiteaddons/v1/gsuiteaddons.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { CalendarAddOnManifest } from "../../../apps/script/type/calendar/calendar_addon_manifest.js";
import { DocsAddOnManifest } from "../../../apps/script/type/docs/docs_addon_manifest.js";
import { DriveAddOnManifest } from "../../../apps/script/type/drive/drive_addon_manifest.js";
import { GmailAddOnManifest } from "../../../apps/script/type/gmail/gmail_addon_manifest.js";
import { CommonAddOnManifest, HttpOptions } from "../../../apps/script/type/script_manifest.js";
import { SheetsAddOnManifest } from "../../../apps/script/type/sheets/sheets_addon_manifest.js";
import { SlidesAddOnManifest } from "../../../apps/script/type/slides/slides_addon_manifest.js";
import { Empty } from "../../../protobuf/empty.js";
import { BoolValue } from "../../../protobuf/wrappers.js";

export const protobufPackage = "google.cloud.gsuiteaddons.v1";

/** Request message to get Google Workspace Add-ons authorization information. */
export interface GetAuthorizationRequest {
  /**
   * Required. Name of the project for which to get the Google Workspace Add-ons
   * authorization information.
   *
   * Example: `projects/my_project/authorization`.
   */
  name: string;
}

/** The authorization information used when invoking deployment endpoints. */
export interface Authorization {
  /**
   * The canonical full name of this resource.
   * Example:  `projects/123/authorization`
   */
  name: string;
  /**
   * The email address of the service account used to authenticate requests to
   * add-on callback endpoints.
   */
  serviceAccountEmail: string;
  /**
   * The OAuth client ID used to obtain OAuth access tokens for a user on the
   * add-on's behalf.
   */
  oauthClientId: string;
}

/** Request message to create a deployment. */
export interface CreateDeploymentRequest {
  /**
   * Required. Name of the project in which to create the deployment.
   *
   * Example: `projects/my_project`.
   */
  parent: string;
  /**
   * Required. The id to use for this deployment.  The full name of the created
   * resource will be `projects/<project_number>/deployments/<deployment_id>`.
   */
  deploymentId: string;
  /** Required. The deployment to create (deployment.name cannot be set). */
  deployment: Deployment | undefined;
}

/** Request message to create or replace a deployment. */
export interface ReplaceDeploymentRequest {
  /** Required. The deployment to create or replace. */
  deployment: Deployment | undefined;
}

/** Request message to get a deployment. */
export interface GetDeploymentRequest {
  /**
   * Required. The full resource name of the deployment to get.
   *
   * Example:  `projects/my_project/deployments/my_deployment`.
   */
  name: string;
}

/** Request message to list deployments for a project. */
export interface ListDeploymentsRequest {
  /**
   * Required. Name of the project in which to create the deployment.
   *
   * Example: `projects/my_project`.
   */
  parent: string;
  /**
   * The maximum number of deployments to return. The service may return fewer
   * than this value.
   * If unspecified, at most 1000 deployments will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListDeployments` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListDeployments` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message to list deployments. */
export interface ListDeploymentsResponse {
  /** The list of deployments for the given project. */
  deployments: Deployment[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message to delete a deployment. */
export interface DeleteDeploymentRequest {
  /**
   * Required. The full resource name of the deployment to delete.
   *
   * Example:  `projects/my_project/deployments/my_deployment`.
   */
  name: string;
  /**
   * The etag of the deployment to delete.
   * If this is provided, it must match the server's etag.
   */
  etag: string;
}

/** Request message to install a developer mode deployment. */
export interface InstallDeploymentRequest {
  /**
   * Required. The full resource name of the deployment to install.
   *
   * Example:  `projects/my_project/deployments/my_deployment`.
   */
  name: string;
}

/** Request message to uninstall a developer mode deployment. */
export interface UninstallDeploymentRequest {
  /**
   * Required. The full resource name of the deployment to install.
   *
   * Example:  `projects/my_project/deployments/my_deployment`.
   */
  name: string;
}

/** Request message to get the install status of a developer mode deployment. */
export interface GetInstallStatusRequest {
  /**
   * Required. The full resource name of the deployment.
   *
   * Example:  `projects/my_project/deployments/my_deployment/installStatus`.
   */
  name: string;
}

/** Developer mode install status of a deployment */
export interface InstallStatus {
  /**
   * The canonical full resource name of the deployment install status.
   *
   * Example:  `projects/123/deployments/my_deployment/installStatus`.
   */
  name: string;
  /** True if the deployment is installed for the user */
  installed: boolean | undefined;
}

/** A Google Workspace Add-on deployment */
export interface Deployment {
  /**
   * The deployment resource name.
   * Example:  projects/123/deployments/my_deployment.
   */
  name: string;
  /**
   * The list of Google OAuth scopes for which to request consent from the end
   * user before executing an add-on endpoint.
   */
  oauthScopes: string[];
  /** The Google Workspace Add-on configuration. */
  addOns:
    | AddOns
    | undefined;
  /**
   * This value is computed by the server based on the version of the
   * deployment in storage, and may be sent on update and delete requests to
   * ensure the client has an up-to-date value before proceeding.
   */
  etag: string;
}

/** A Google Workspace Add-on configuration. */
export interface AddOns {
  /** Configuration that is common across all Google Workspace Add-ons. */
  common:
    | CommonAddOnManifest
    | undefined;
  /** Gmail add-on configuration. */
  gmail:
    | GmailAddOnManifest
    | undefined;
  /** Drive add-on configuration. */
  drive:
    | DriveAddOnManifest
    | undefined;
  /** Calendar add-on configuration. */
  calendar:
    | CalendarAddOnManifest
    | undefined;
  /** Docs add-on configuration. */
  docs:
    | DocsAddOnManifest
    | undefined;
  /** Sheets add-on configuration. */
  sheets:
    | SheetsAddOnManifest
    | undefined;
  /** Slides add-on configuration. */
  slides:
    | SlidesAddOnManifest
    | undefined;
  /** Options for sending requests to add-on HTTP endpoints */
  httpOptions: HttpOptions | undefined;
}

function createBaseGetAuthorizationRequest(): GetAuthorizationRequest {
  return { name: "" };
}

export const GetAuthorizationRequest: MessageFns<GetAuthorizationRequest> = {
  encode(message: GetAuthorizationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAuthorizationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAuthorizationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAuthorizationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAuthorizationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAuthorizationRequest>): GetAuthorizationRequest {
    return GetAuthorizationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAuthorizationRequest>): GetAuthorizationRequest {
    const message = createBaseGetAuthorizationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseAuthorization(): Authorization {
  return { name: "", serviceAccountEmail: "", oauthClientId: "" };
}

export const Authorization: MessageFns<Authorization> = {
  encode(message: Authorization, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.serviceAccountEmail !== "") {
      writer.uint32(18).string(message.serviceAccountEmail);
    }
    if (message.oauthClientId !== "") {
      writer.uint32(26).string(message.oauthClientId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Authorization {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceAccountEmail = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.oauthClientId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Authorization {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      serviceAccountEmail: isSet(object.serviceAccountEmail) ? globalThis.String(object.serviceAccountEmail) : "",
      oauthClientId: isSet(object.oauthClientId) ? globalThis.String(object.oauthClientId) : "",
    };
  },

  toJSON(message: Authorization): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.serviceAccountEmail !== "") {
      obj.serviceAccountEmail = message.serviceAccountEmail;
    }
    if (message.oauthClientId !== "") {
      obj.oauthClientId = message.oauthClientId;
    }
    return obj;
  },

  create(base?: DeepPartial<Authorization>): Authorization {
    return Authorization.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Authorization>): Authorization {
    const message = createBaseAuthorization();
    message.name = object.name ?? "";
    message.serviceAccountEmail = object.serviceAccountEmail ?? "";
    message.oauthClientId = object.oauthClientId ?? "";
    return message;
  },
};

function createBaseCreateDeploymentRequest(): CreateDeploymentRequest {
  return { parent: "", deploymentId: "", deployment: undefined };
}

export const CreateDeploymentRequest: MessageFns<CreateDeploymentRequest> = {
  encode(message: CreateDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.deploymentId !== "") {
      writer.uint32(18).string(message.deploymentId);
    }
    if (message.deployment !== undefined) {
      Deployment.encode(message.deployment, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deploymentId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.deployment = Deployment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDeploymentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      deploymentId: isSet(object.deploymentId) ? globalThis.String(object.deploymentId) : "",
      deployment: isSet(object.deployment) ? Deployment.fromJSON(object.deployment) : undefined,
    };
  },

  toJSON(message: CreateDeploymentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.deploymentId !== "") {
      obj.deploymentId = message.deploymentId;
    }
    if (message.deployment !== undefined) {
      obj.deployment = Deployment.toJSON(message.deployment);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDeploymentRequest>): CreateDeploymentRequest {
    return CreateDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDeploymentRequest>): CreateDeploymentRequest {
    const message = createBaseCreateDeploymentRequest();
    message.parent = object.parent ?? "";
    message.deploymentId = object.deploymentId ?? "";
    message.deployment = (object.deployment !== undefined && object.deployment !== null)
      ? Deployment.fromPartial(object.deployment)
      : undefined;
    return message;
  },
};

function createBaseReplaceDeploymentRequest(): ReplaceDeploymentRequest {
  return { deployment: undefined };
}

export const ReplaceDeploymentRequest: MessageFns<ReplaceDeploymentRequest> = {
  encode(message: ReplaceDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployment !== undefined) {
      Deployment.encode(message.deployment, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplaceDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplaceDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deployment = Deployment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplaceDeploymentRequest {
    return { deployment: isSet(object.deployment) ? Deployment.fromJSON(object.deployment) : undefined };
  },

  toJSON(message: ReplaceDeploymentRequest): unknown {
    const obj: any = {};
    if (message.deployment !== undefined) {
      obj.deployment = Deployment.toJSON(message.deployment);
    }
    return obj;
  },

  create(base?: DeepPartial<ReplaceDeploymentRequest>): ReplaceDeploymentRequest {
    return ReplaceDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReplaceDeploymentRequest>): ReplaceDeploymentRequest {
    const message = createBaseReplaceDeploymentRequest();
    message.deployment = (object.deployment !== undefined && object.deployment !== null)
      ? Deployment.fromPartial(object.deployment)
      : undefined;
    return message;
  },
};

function createBaseGetDeploymentRequest(): GetDeploymentRequest {
  return { name: "" };
}

export const GetDeploymentRequest: MessageFns<GetDeploymentRequest> = {
  encode(message: GetDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDeploymentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDeploymentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDeploymentRequest>): GetDeploymentRequest {
    return GetDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDeploymentRequest>): GetDeploymentRequest {
    const message = createBaseGetDeploymentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDeploymentsRequest(): ListDeploymentsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDeploymentsRequest: MessageFns<ListDeploymentsRequest> = {
  encode(message: ListDeploymentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeploymentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeploymentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDeploymentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDeploymentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDeploymentsRequest>): ListDeploymentsRequest {
    return ListDeploymentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDeploymentsRequest>): ListDeploymentsRequest {
    const message = createBaseListDeploymentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDeploymentsResponse(): ListDeploymentsResponse {
  return { deployments: [], nextPageToken: "" };
}

export const ListDeploymentsResponse: MessageFns<ListDeploymentsResponse> = {
  encode(message: ListDeploymentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.deployments) {
      Deployment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeploymentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeploymentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deployments.push(Deployment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDeploymentsResponse {
    return {
      deployments: globalThis.Array.isArray(object?.deployments)
        ? object.deployments.map((e: any) => Deployment.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDeploymentsResponse): unknown {
    const obj: any = {};
    if (message.deployments?.length) {
      obj.deployments = message.deployments.map((e) => Deployment.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDeploymentsResponse>): ListDeploymentsResponse {
    return ListDeploymentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDeploymentsResponse>): ListDeploymentsResponse {
    const message = createBaseListDeploymentsResponse();
    message.deployments = object.deployments?.map((e) => Deployment.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteDeploymentRequest(): DeleteDeploymentRequest {
  return { name: "", etag: "" };
}

export const DeleteDeploymentRequest: MessageFns<DeleteDeploymentRequest> = {
  encode(message: DeleteDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDeploymentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteDeploymentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDeploymentRequest>): DeleteDeploymentRequest {
    return DeleteDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDeploymentRequest>): DeleteDeploymentRequest {
    const message = createBaseDeleteDeploymentRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseInstallDeploymentRequest(): InstallDeploymentRequest {
  return { name: "" };
}

export const InstallDeploymentRequest: MessageFns<InstallDeploymentRequest> = {
  encode(message: InstallDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InstallDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstallDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InstallDeploymentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: InstallDeploymentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<InstallDeploymentRequest>): InstallDeploymentRequest {
    return InstallDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InstallDeploymentRequest>): InstallDeploymentRequest {
    const message = createBaseInstallDeploymentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUninstallDeploymentRequest(): UninstallDeploymentRequest {
  return { name: "" };
}

export const UninstallDeploymentRequest: MessageFns<UninstallDeploymentRequest> = {
  encode(message: UninstallDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UninstallDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUninstallDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UninstallDeploymentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: UninstallDeploymentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<UninstallDeploymentRequest>): UninstallDeploymentRequest {
    return UninstallDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UninstallDeploymentRequest>): UninstallDeploymentRequest {
    const message = createBaseUninstallDeploymentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetInstallStatusRequest(): GetInstallStatusRequest {
  return { name: "" };
}

export const GetInstallStatusRequest: MessageFns<GetInstallStatusRequest> = {
  encode(message: GetInstallStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInstallStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInstallStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInstallStatusRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetInstallStatusRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetInstallStatusRequest>): GetInstallStatusRequest {
    return GetInstallStatusRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetInstallStatusRequest>): GetInstallStatusRequest {
    const message = createBaseGetInstallStatusRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseInstallStatus(): InstallStatus {
  return { name: "", installed: undefined };
}

export const InstallStatus: MessageFns<InstallStatus> = {
  encode(message: InstallStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.installed !== undefined) {
      BoolValue.encode({ value: message.installed! }, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InstallStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstallStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.installed = BoolValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InstallStatus {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      installed: isSet(object.installed) ? Boolean(object.installed) : undefined,
    };
  },

  toJSON(message: InstallStatus): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.installed !== undefined) {
      obj.installed = message.installed;
    }
    return obj;
  },

  create(base?: DeepPartial<InstallStatus>): InstallStatus {
    return InstallStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InstallStatus>): InstallStatus {
    const message = createBaseInstallStatus();
    message.name = object.name ?? "";
    message.installed = object.installed ?? undefined;
    return message;
  },
};

function createBaseDeployment(): Deployment {
  return { name: "", oauthScopes: [], addOns: undefined, etag: "" };
}

export const Deployment: MessageFns<Deployment> = {
  encode(message: Deployment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.oauthScopes) {
      writer.uint32(18).string(v!);
    }
    if (message.addOns !== undefined) {
      AddOns.encode(message.addOns, writer.uint32(26).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(42).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Deployment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.oauthScopes.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.addOns = AddOns.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Deployment {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      oauthScopes: globalThis.Array.isArray(object?.oauthScopes)
        ? object.oauthScopes.map((e: any) => globalThis.String(e))
        : [],
      addOns: isSet(object.addOns) ? AddOns.fromJSON(object.addOns) : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: Deployment): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.oauthScopes?.length) {
      obj.oauthScopes = message.oauthScopes;
    }
    if (message.addOns !== undefined) {
      obj.addOns = AddOns.toJSON(message.addOns);
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<Deployment>): Deployment {
    return Deployment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Deployment>): Deployment {
    const message = createBaseDeployment();
    message.name = object.name ?? "";
    message.oauthScopes = object.oauthScopes?.map((e) => e) || [];
    message.addOns = (object.addOns !== undefined && object.addOns !== null)
      ? AddOns.fromPartial(object.addOns)
      : undefined;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseAddOns(): AddOns {
  return {
    common: undefined,
    gmail: undefined,
    drive: undefined,
    calendar: undefined,
    docs: undefined,
    sheets: undefined,
    slides: undefined,
    httpOptions: undefined,
  };
}

export const AddOns: MessageFns<AddOns> = {
  encode(message: AddOns, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonAddOnManifest.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.gmail !== undefined) {
      GmailAddOnManifest.encode(message.gmail, writer.uint32(18).fork()).join();
    }
    if (message.drive !== undefined) {
      DriveAddOnManifest.encode(message.drive, writer.uint32(42).fork()).join();
    }
    if (message.calendar !== undefined) {
      CalendarAddOnManifest.encode(message.calendar, writer.uint32(50).fork()).join();
    }
    if (message.docs !== undefined) {
      DocsAddOnManifest.encode(message.docs, writer.uint32(58).fork()).join();
    }
    if (message.sheets !== undefined) {
      SheetsAddOnManifest.encode(message.sheets, writer.uint32(66).fork()).join();
    }
    if (message.slides !== undefined) {
      SlidesAddOnManifest.encode(message.slides, writer.uint32(82).fork()).join();
    }
    if (message.httpOptions !== undefined) {
      HttpOptions.encode(message.httpOptions, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddOns {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOns();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.common = CommonAddOnManifest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gmail = GmailAddOnManifest.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.drive = DriveAddOnManifest.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.calendar = CalendarAddOnManifest.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.docs = DocsAddOnManifest.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.sheets = SheetsAddOnManifest.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.slides = SlidesAddOnManifest.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.httpOptions = HttpOptions.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOns {
    return {
      common: isSet(object.common) ? CommonAddOnManifest.fromJSON(object.common) : undefined,
      gmail: isSet(object.gmail) ? GmailAddOnManifest.fromJSON(object.gmail) : undefined,
      drive: isSet(object.drive) ? DriveAddOnManifest.fromJSON(object.drive) : undefined,
      calendar: isSet(object.calendar) ? CalendarAddOnManifest.fromJSON(object.calendar) : undefined,
      docs: isSet(object.docs) ? DocsAddOnManifest.fromJSON(object.docs) : undefined,
      sheets: isSet(object.sheets) ? SheetsAddOnManifest.fromJSON(object.sheets) : undefined,
      slides: isSet(object.slides) ? SlidesAddOnManifest.fromJSON(object.slides) : undefined,
      httpOptions: isSet(object.httpOptions) ? HttpOptions.fromJSON(object.httpOptions) : undefined,
    };
  },

  toJSON(message: AddOns): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonAddOnManifest.toJSON(message.common);
    }
    if (message.gmail !== undefined) {
      obj.gmail = GmailAddOnManifest.toJSON(message.gmail);
    }
    if (message.drive !== undefined) {
      obj.drive = DriveAddOnManifest.toJSON(message.drive);
    }
    if (message.calendar !== undefined) {
      obj.calendar = CalendarAddOnManifest.toJSON(message.calendar);
    }
    if (message.docs !== undefined) {
      obj.docs = DocsAddOnManifest.toJSON(message.docs);
    }
    if (message.sheets !== undefined) {
      obj.sheets = SheetsAddOnManifest.toJSON(message.sheets);
    }
    if (message.slides !== undefined) {
      obj.slides = SlidesAddOnManifest.toJSON(message.slides);
    }
    if (message.httpOptions !== undefined) {
      obj.httpOptions = HttpOptions.toJSON(message.httpOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<AddOns>): AddOns {
    return AddOns.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOns>): AddOns {
    const message = createBaseAddOns();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonAddOnManifest.fromPartial(object.common)
      : undefined;
    message.gmail = (object.gmail !== undefined && object.gmail !== null)
      ? GmailAddOnManifest.fromPartial(object.gmail)
      : undefined;
    message.drive = (object.drive !== undefined && object.drive !== null)
      ? DriveAddOnManifest.fromPartial(object.drive)
      : undefined;
    message.calendar = (object.calendar !== undefined && object.calendar !== null)
      ? CalendarAddOnManifest.fromPartial(object.calendar)
      : undefined;
    message.docs = (object.docs !== undefined && object.docs !== null)
      ? DocsAddOnManifest.fromPartial(object.docs)
      : undefined;
    message.sheets = (object.sheets !== undefined && object.sheets !== null)
      ? SheetsAddOnManifest.fromPartial(object.sheets)
      : undefined;
    message.slides = (object.slides !== undefined && object.slides !== null)
      ? SlidesAddOnManifest.fromPartial(object.slides)
      : undefined;
    message.httpOptions = (object.httpOptions !== undefined && object.httpOptions !== null)
      ? HttpOptions.fromPartial(object.httpOptions)
      : undefined;
    return message;
  },
};

/**
 * A service for managing Google Workspace Add-ons deployments.
 *
 * A Google Workspace Add-on is a third-party embedded component that can be
 * installed in Google Workspace Applications like Gmail, Calendar, Drive, and
 * the Google Docs, Sheets, and Slides editors. Google Workspace Add-ons can
 * display UI cards, receive contextual information from the host application,
 * and perform actions in the host application (See:
 * https://developers.google.com/gsuite/add-ons/overview for more information).
 *
 * A Google Workspace Add-on deployment resource specifies metadata about the
 * add-on, including a specification of the entry points in the host application
 * that trigger add-on executions (see:
 * https://developers.google.com/gsuite/add-ons/concepts/gsuite-manifests).
 * Add-on deployments defined via the Google Workspace Add-ons API define their
 * entrypoints using HTTPS URLs (See:
 * https://developers.google.com/gsuite/add-ons/guides/alternate-runtimes),
 *
 * A Google Workspace Add-on deployment can be installed in developer mode,
 * which allows an add-on developer to test the experience an end-user would see
 * when installing and running the add-on in their G Suite applications.  When
 * running in developer mode, more detailed error messages are exposed in the
 * add-on UI to aid in debugging.
 *
 * A Google Workspace Add-on deployment can be published to Google Workspace
 * Marketplace, which allows other Google Workspace users to discover and
 * install the add-on.  See:
 * https://developers.google.com/gsuite/add-ons/how-tos/publish-add-on-overview
 * for details.
 */
export type GSuiteAddOnsDefinition = typeof GSuiteAddOnsDefinition;
export const GSuiteAddOnsDefinition = {
  name: "GSuiteAddOns",
  fullName: "google.cloud.gsuiteaddons.v1.GSuiteAddOns",
  methods: {
    /** Gets the authorization information for deployments in a given project. */
    getAuthorization: {
      name: "GetAuthorization",
      requestType: GetAuthorizationRequest,
      requestStream: false,
      responseType: Authorization,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              37,
              18,
              35,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a deployment with the specified name and configuration. */
    createDeployment: {
      name: "CreateDeployment",
      requestType: CreateDeploymentRequest,
      requestStream: false,
      responseType: Deployment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              31,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              44,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              49,
              58,
              10,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              34,
              35,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates or replaces a deployment with the specified name. */
    replaceDeployment: {
      name: "ReplaceDeployment",
      requestType: ReplaceDeploymentRequest,
      requestStream: false,
      responseType: Deployment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 100, 101, 112, 108, 111, 121, 109, 101, 110, 116])],
          578365826: [
            Buffer.from([
              60,
              58,
              10,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              26,
              46,
              47,
              118,
              49,
              47,
              123,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets the deployment with the specified name. */
    getDeployment: {
      name: "GetDeployment",
      requestType: GetDeploymentRequest,
      requestStream: false,
      responseType: Deployment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              37,
              18,
              35,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all deployments in a particular project. */
    listDeployments: {
      name: "ListDeployments",
      requestType: ListDeploymentsRequest,
      requestStream: false,
      responseType: ListDeploymentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              37,
              18,
              35,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes the deployment with the given name. */
    deleteDeployment: {
      name: "DeleteDeployment",
      requestType: DeleteDeploymentRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              37,
              42,
              35,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Installs a deployment in developer mode.
     * See:
     * https://developers.google.com/gsuite/add-ons/how-tos/testing-gsuite-addons.
     */
    installDeployment: {
      name: "InstallDeployment",
      requestType: InstallDeploymentRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              58,
              1,
              42,
              34,
              43,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              105,
              110,
              115,
              116,
              97,
              108,
              108,
            ]),
          ],
        },
      },
    },
    /**
     * Uninstalls a developer mode deployment.
     * See:
     * https://developers.google.com/gsuite/add-ons/how-tos/testing-gsuite-addons.
     */
    uninstallDeployment: {
      name: "UninstallDeployment",
      requestType: UninstallDeploymentRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              58,
              1,
              42,
              34,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              105,
              110,
              115,
              116,
              97,
              108,
              108,
            ]),
          ],
        },
      },
    },
    /** Fetches the install status of a developer mode deployment. */
    getInstallStatus: {
      name: "GetInstallStatus",
      requestType: GetInstallStatusRequest,
      requestStream: false,
      responseType: InstallStatus,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              108,
              108,
              83,
              116,
              97,
              116,
              117,
              115,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface GSuiteAddOnsServiceImplementation<CallContextExt = {}> {
  /** Gets the authorization information for deployments in a given project. */
  getAuthorization(
    request: GetAuthorizationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Authorization>>;
  /** Creates a deployment with the specified name and configuration. */
  createDeployment(
    request: CreateDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Deployment>>;
  /** Creates or replaces a deployment with the specified name. */
  replaceDeployment(
    request: ReplaceDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Deployment>>;
  /** Gets the deployment with the specified name. */
  getDeployment(request: GetDeploymentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Deployment>>;
  /** Lists all deployments in a particular project. */
  listDeployments(
    request: ListDeploymentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDeploymentsResponse>>;
  /** Deletes the deployment with the given name. */
  deleteDeployment(
    request: DeleteDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Installs a deployment in developer mode.
   * See:
   * https://developers.google.com/gsuite/add-ons/how-tos/testing-gsuite-addons.
   */
  installDeployment(
    request: InstallDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Uninstalls a developer mode deployment.
   * See:
   * https://developers.google.com/gsuite/add-ons/how-tos/testing-gsuite-addons.
   */
  uninstallDeployment(
    request: UninstallDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Fetches the install status of a developer mode deployment. */
  getInstallStatus(
    request: GetInstallStatusRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<InstallStatus>>;
}

export interface GSuiteAddOnsClient<CallOptionsExt = {}> {
  /** Gets the authorization information for deployments in a given project. */
  getAuthorization(
    request: DeepPartial<GetAuthorizationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Authorization>;
  /** Creates a deployment with the specified name and configuration. */
  createDeployment(
    request: DeepPartial<CreateDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Deployment>;
  /** Creates or replaces a deployment with the specified name. */
  replaceDeployment(
    request: DeepPartial<ReplaceDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Deployment>;
  /** Gets the deployment with the specified name. */
  getDeployment(
    request: DeepPartial<GetDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Deployment>;
  /** Lists all deployments in a particular project. */
  listDeployments(
    request: DeepPartial<ListDeploymentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDeploymentsResponse>;
  /** Deletes the deployment with the given name. */
  deleteDeployment(
    request: DeepPartial<DeleteDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Installs a deployment in developer mode.
   * See:
   * https://developers.google.com/gsuite/add-ons/how-tos/testing-gsuite-addons.
   */
  installDeployment(
    request: DeepPartial<InstallDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Uninstalls a developer mode deployment.
   * See:
   * https://developers.google.com/gsuite/add-ons/how-tos/testing-gsuite-addons.
   */
  uninstallDeployment(
    request: DeepPartial<UninstallDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Fetches the install status of a developer mode deployment. */
  getInstallStatus(
    request: DeepPartial<GetInstallStatusRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<InstallStatus>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
