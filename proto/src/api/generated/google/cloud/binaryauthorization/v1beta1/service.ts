// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/binaryauthorization/v1beta1/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { Attestor, Policy } from "./resources.js";

export const protobufPackage = "google.cloud.binaryauthorization.v1beta1";

/** Request message for [BinauthzManagementService.GetPolicy][]. */
export interface GetPolicyRequest {
  /**
   * Required. The resource name of the [policy][google.cloud.binaryauthorization.v1beta1.Policy] to retrieve,
   * in the format `projects/* /policy`.
   */
  name: string;
}

/** Request message for [BinauthzManagementService.UpdatePolicy][]. */
export interface UpdatePolicyRequest {
  /**
   * Required. A new or updated [policy][google.cloud.binaryauthorization.v1beta1.Policy] value. The service will
   * overwrite the [policy name][google.cloud.binaryauthorization.v1beta1.Policy.name] field with the resource name in
   * the request URL, in the format `projects/* /policy`.
   */
  policy: Policy | undefined;
}

/** Request message for [BinauthzManagementService.CreateAttestor][]. */
export interface CreateAttestorRequest {
  /** Required. The parent of this [attestor][google.cloud.binaryauthorization.v1beta1.Attestor]. */
  parent: string;
  /** Required. The [attestors][google.cloud.binaryauthorization.v1beta1.Attestor] ID. */
  attestorId: string;
  /**
   * Required. The initial [attestor][google.cloud.binaryauthorization.v1beta1.Attestor] value. The service will
   * overwrite the [attestor name][google.cloud.binaryauthorization.v1beta1.Attestor.name] field with the resource name,
   * in the format `projects/* /attestors/*`.
   */
  attestor: Attestor | undefined;
}

/** Request message for [BinauthzManagementService.GetAttestor][]. */
export interface GetAttestorRequest {
  /**
   * Required. The name of the [attestor][google.cloud.binaryauthorization.v1beta1.Attestor] to retrieve, in the format
   * `projects/* /attestors/*`.
   */
  name: string;
}

/** Request message for [BinauthzManagementService.UpdateAttestor][]. */
export interface UpdateAttestorRequest {
  /**
   * Required. The updated [attestor][google.cloud.binaryauthorization.v1beta1.Attestor] value. The service will
   * overwrite the [attestor name][google.cloud.binaryauthorization.v1beta1.Attestor.name] field with the resource name
   * in the request URL, in the format `projects/* /attestors/*`.
   */
  attestor: Attestor | undefined;
}

/** Request message for [BinauthzManagementService.ListAttestors][]. */
export interface ListAttestorsRequest {
  /**
   * Required. The resource name of the project associated with the
   * [attestors][google.cloud.binaryauthorization.v1beta1.Attestor], in the format `projects/*`.
   */
  parent: string;
  /**
   * Requested page size. The server may return fewer results than requested. If
   * unspecified, the server will pick an appropriate default.
   */
  pageSize: number;
  /**
   * A token identifying a page of results the server should return. Typically,
   * this is the value of [ListAttestorsResponse.next_page_token][google.cloud.binaryauthorization.v1beta1.ListAttestorsResponse.next_page_token] returned
   * from the previous call to the `ListAttestors` method.
   */
  pageToken: string;
}

/** Response message for [BinauthzManagementService.ListAttestors][]. */
export interface ListAttestorsResponse {
  /** The list of [attestors][google.cloud.binaryauthorization.v1beta1.Attestor]. */
  attestors: Attestor[];
  /**
   * A token to retrieve the next page of results. Pass this value in the
   * [ListAttestorsRequest.page_token][google.cloud.binaryauthorization.v1beta1.ListAttestorsRequest.page_token] field in the subsequent call to the
   * `ListAttestors` method to retrieve the next page of results.
   */
  nextPageToken: string;
}

/** Request message for [BinauthzManagementService.DeleteAttestor][]. */
export interface DeleteAttestorRequest {
  /**
   * Required. The name of the [attestors][google.cloud.binaryauthorization.v1beta1.Attestor] to delete, in the format
   * `projects/* /attestors/*`.
   */
  name: string;
}

/** Request to read the current system policy. */
export interface GetSystemPolicyRequest {
  /**
   * Required. The resource name, in the format `locations/* /policy`.
   * Note that the system policy is not associated with a project.
   */
  name: string;
}

function createBaseGetPolicyRequest(): GetPolicyRequest {
  return { name: "" };
}

export const GetPolicyRequest: MessageFns<GetPolicyRequest> = {
  encode(message: GetPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPolicyRequest>): GetPolicyRequest {
    return GetPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPolicyRequest>): GetPolicyRequest {
    const message = createBaseGetPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdatePolicyRequest(): UpdatePolicyRequest {
  return { policy: undefined };
}

export const UpdatePolicyRequest: MessageFns<UpdatePolicyRequest> = {
  encode(message: UpdatePolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      Policy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = Policy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePolicyRequest {
    return { policy: isSet(object.policy) ? Policy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: UpdatePolicyRequest): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = Policy.toJSON(message.policy);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePolicyRequest>): UpdatePolicyRequest {
    return UpdatePolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePolicyRequest>): UpdatePolicyRequest {
    const message = createBaseUpdatePolicyRequest();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? Policy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseCreateAttestorRequest(): CreateAttestorRequest {
  return { parent: "", attestorId: "", attestor: undefined };
}

export const CreateAttestorRequest: MessageFns<CreateAttestorRequest> = {
  encode(message: CreateAttestorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.attestorId !== "") {
      writer.uint32(18).string(message.attestorId);
    }
    if (message.attestor !== undefined) {
      Attestor.encode(message.attestor, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAttestorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAttestorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.attestorId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.attestor = Attestor.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAttestorRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      attestorId: isSet(object.attestorId) ? globalThis.String(object.attestorId) : "",
      attestor: isSet(object.attestor) ? Attestor.fromJSON(object.attestor) : undefined,
    };
  },

  toJSON(message: CreateAttestorRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.attestorId !== "") {
      obj.attestorId = message.attestorId;
    }
    if (message.attestor !== undefined) {
      obj.attestor = Attestor.toJSON(message.attestor);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAttestorRequest>): CreateAttestorRequest {
    return CreateAttestorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAttestorRequest>): CreateAttestorRequest {
    const message = createBaseCreateAttestorRequest();
    message.parent = object.parent ?? "";
    message.attestorId = object.attestorId ?? "";
    message.attestor = (object.attestor !== undefined && object.attestor !== null)
      ? Attestor.fromPartial(object.attestor)
      : undefined;
    return message;
  },
};

function createBaseGetAttestorRequest(): GetAttestorRequest {
  return { name: "" };
}

export const GetAttestorRequest: MessageFns<GetAttestorRequest> = {
  encode(message: GetAttestorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAttestorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAttestorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAttestorRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAttestorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAttestorRequest>): GetAttestorRequest {
    return GetAttestorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAttestorRequest>): GetAttestorRequest {
    const message = createBaseGetAttestorRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateAttestorRequest(): UpdateAttestorRequest {
  return { attestor: undefined };
}

export const UpdateAttestorRequest: MessageFns<UpdateAttestorRequest> = {
  encode(message: UpdateAttestorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attestor !== undefined) {
      Attestor.encode(message.attestor, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAttestorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAttestorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attestor = Attestor.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAttestorRequest {
    return { attestor: isSet(object.attestor) ? Attestor.fromJSON(object.attestor) : undefined };
  },

  toJSON(message: UpdateAttestorRequest): unknown {
    const obj: any = {};
    if (message.attestor !== undefined) {
      obj.attestor = Attestor.toJSON(message.attestor);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAttestorRequest>): UpdateAttestorRequest {
    return UpdateAttestorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAttestorRequest>): UpdateAttestorRequest {
    const message = createBaseUpdateAttestorRequest();
    message.attestor = (object.attestor !== undefined && object.attestor !== null)
      ? Attestor.fromPartial(object.attestor)
      : undefined;
    return message;
  },
};

function createBaseListAttestorsRequest(): ListAttestorsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAttestorsRequest: MessageFns<ListAttestorsRequest> = {
  encode(message: ListAttestorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAttestorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAttestorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAttestorsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAttestorsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAttestorsRequest>): ListAttestorsRequest {
    return ListAttestorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAttestorsRequest>): ListAttestorsRequest {
    const message = createBaseListAttestorsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAttestorsResponse(): ListAttestorsResponse {
  return { attestors: [], nextPageToken: "" };
}

export const ListAttestorsResponse: MessageFns<ListAttestorsResponse> = {
  encode(message: ListAttestorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.attestors) {
      Attestor.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAttestorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAttestorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attestors.push(Attestor.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAttestorsResponse {
    return {
      attestors: globalThis.Array.isArray(object?.attestors)
        ? object.attestors.map((e: any) => Attestor.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAttestorsResponse): unknown {
    const obj: any = {};
    if (message.attestors?.length) {
      obj.attestors = message.attestors.map((e) => Attestor.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAttestorsResponse>): ListAttestorsResponse {
    return ListAttestorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAttestorsResponse>): ListAttestorsResponse {
    const message = createBaseListAttestorsResponse();
    message.attestors = object.attestors?.map((e) => Attestor.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteAttestorRequest(): DeleteAttestorRequest {
  return { name: "" };
}

export const DeleteAttestorRequest: MessageFns<DeleteAttestorRequest> = {
  encode(message: DeleteAttestorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAttestorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAttestorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAttestorRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteAttestorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAttestorRequest>): DeleteAttestorRequest {
    return DeleteAttestorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAttestorRequest>): DeleteAttestorRequest {
    const message = createBaseDeleteAttestorRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetSystemPolicyRequest(): GetSystemPolicyRequest {
  return { name: "" };
}

export const GetSystemPolicyRequest: MessageFns<GetSystemPolicyRequest> = {
  encode(message: GetSystemPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSystemPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSystemPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSystemPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSystemPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSystemPolicyRequest>): GetSystemPolicyRequest {
    return GetSystemPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSystemPolicyRequest>): GetSystemPolicyRequest {
    const message = createBaseGetSystemPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * Google Cloud Management Service for Binary Authorization admission policies
 * and attestation authorities.
 *
 * This API implements a REST model with the following objects:
 *
 * * [Policy][google.cloud.binaryauthorization.v1beta1.Policy]
 * * [Attestor][google.cloud.binaryauthorization.v1beta1.Attestor]
 */
export type BinauthzManagementServiceV1Beta1Definition = typeof BinauthzManagementServiceV1Beta1Definition;
export const BinauthzManagementServiceV1Beta1Definition = {
  name: "BinauthzManagementServiceV1Beta1",
  fullName: "google.cloud.binaryauthorization.v1beta1.BinauthzManagementServiceV1Beta1",
  methods: {
    /**
     * A [policy][google.cloud.binaryauthorization.v1beta1.Policy] specifies the [attestors][google.cloud.binaryauthorization.v1beta1.Attestor] that must attest to
     * a container image, before the project is allowed to deploy that
     * image. There is at most one policy per project. All image admission
     * requests are permitted if a project has no policy.
     *
     * Gets the [policy][google.cloud.binaryauthorization.v1beta1.Policy] for this project. Returns a default
     * [policy][google.cloud.binaryauthorization.v1beta1.Policy] if the project does not have one.
     */
    getPolicy: {
      name: "GetPolicy",
      requestType: GetPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              35,
              18,
              33,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              121,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates or updates a project's [policy][google.cloud.binaryauthorization.v1beta1.Policy], and returns a copy of the
     * new [policy][google.cloud.binaryauthorization.v1beta1.Policy]. A policy is always updated as a whole, to avoid race
     * conditions with concurrent policy enforcement (or management!)
     * requests. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT
     * if the request is malformed.
     */
    updatePolicy: {
      name: "UpdatePolicy",
      requestType: UpdatePolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 111, 108, 105, 99, 121])],
          578365826: [
            Buffer.from([
              50,
              58,
              6,
              112,
              111,
              108,
              105,
              99,
              121,
              26,
              40,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              111,
              108,
              105,
              99,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              121,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates an [attestor][google.cloud.binaryauthorization.v1beta1.Attestor], and returns a copy of the new
     * [attestor][google.cloud.binaryauthorization.v1beta1.Attestor]. Returns NOT_FOUND if the project does not exist,
     * INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the
     * [attestor][google.cloud.binaryauthorization.v1beta1.Attestor] already exists.
     */
    createAttestor: {
      name: "CreateAttestor",
      requestType: CreateAttestorRequest,
      requestStream: false,
      responseType: Attestor,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              116,
              116,
              101,
              115,
              116,
              111,
              114,
              95,
              105,
              100,
              44,
              97,
              116,
              116,
              101,
              115,
              116,
              111,
              114,
            ]),
          ],
          578365826: [
            Buffer.from([
              50,
              58,
              8,
              97,
              116,
              116,
              101,
              115,
              116,
              111,
              114,
              34,
              38,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              116,
              116,
              101,
              115,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets an [attestor][google.cloud.binaryauthorization.v1beta1.Attestor].
     * Returns NOT_FOUND if the [attestor][google.cloud.binaryauthorization.v1beta1.Attestor] does not exist.
     */
    getAttestor: {
      name: "GetAttestor",
      requestType: GetAttestorRequest,
      requestStream: false,
      responseType: Attestor,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              40,
              18,
              38,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              101,
              115,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an [attestor][google.cloud.binaryauthorization.v1beta1.Attestor].
     * Returns NOT_FOUND if the [attestor][google.cloud.binaryauthorization.v1beta1.Attestor] does not exist.
     */
    updateAttestor: {
      name: "UpdateAttestor",
      requestType: UpdateAttestorRequest,
      requestStream: false,
      responseType: Attestor,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 97, 116, 116, 101, 115, 116, 111, 114])],
          578365826: [
            Buffer.from([
              59,
              58,
              8,
              97,
              116,
              116,
              101,
              115,
              116,
              111,
              114,
              26,
              47,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              97,
              116,
              116,
              101,
              115,
              116,
              111,
              114,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              101,
              115,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists [attestors][google.cloud.binaryauthorization.v1beta1.Attestor].
     * Returns INVALID_ARGUMENT if the project does not exist.
     */
    listAttestors: {
      name: "ListAttestors",
      requestType: ListAttestorsRequest,
      requestStream: false,
      responseType: ListAttestorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              40,
              18,
              38,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              116,
              116,
              101,
              115,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes an [attestor][google.cloud.binaryauthorization.v1beta1.Attestor]. Returns NOT_FOUND if the
     * [attestor][google.cloud.binaryauthorization.v1beta1.Attestor] does not exist.
     */
    deleteAttestor: {
      name: "DeleteAttestor",
      requestType: DeleteAttestorRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              40,
              42,
              38,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              101,
              115,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface BinauthzManagementServiceV1Beta1ServiceImplementation<CallContextExt = {}> {
  /**
   * A [policy][google.cloud.binaryauthorization.v1beta1.Policy] specifies the [attestors][google.cloud.binaryauthorization.v1beta1.Attestor] that must attest to
   * a container image, before the project is allowed to deploy that
   * image. There is at most one policy per project. All image admission
   * requests are permitted if a project has no policy.
   *
   * Gets the [policy][google.cloud.binaryauthorization.v1beta1.Policy] for this project. Returns a default
   * [policy][google.cloud.binaryauthorization.v1beta1.Policy] if the project does not have one.
   */
  getPolicy(request: GetPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Creates or updates a project's [policy][google.cloud.binaryauthorization.v1beta1.Policy], and returns a copy of the
   * new [policy][google.cloud.binaryauthorization.v1beta1.Policy]. A policy is always updated as a whole, to avoid race
   * conditions with concurrent policy enforcement (or management!)
   * requests. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT
   * if the request is malformed.
   */
  updatePolicy(request: UpdatePolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Creates an [attestor][google.cloud.binaryauthorization.v1beta1.Attestor], and returns a copy of the new
   * [attestor][google.cloud.binaryauthorization.v1beta1.Attestor]. Returns NOT_FOUND if the project does not exist,
   * INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the
   * [attestor][google.cloud.binaryauthorization.v1beta1.Attestor] already exists.
   */
  createAttestor(request: CreateAttestorRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Attestor>>;
  /**
   * Gets an [attestor][google.cloud.binaryauthorization.v1beta1.Attestor].
   * Returns NOT_FOUND if the [attestor][google.cloud.binaryauthorization.v1beta1.Attestor] does not exist.
   */
  getAttestor(request: GetAttestorRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Attestor>>;
  /**
   * Updates an [attestor][google.cloud.binaryauthorization.v1beta1.Attestor].
   * Returns NOT_FOUND if the [attestor][google.cloud.binaryauthorization.v1beta1.Attestor] does not exist.
   */
  updateAttestor(request: UpdateAttestorRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Attestor>>;
  /**
   * Lists [attestors][google.cloud.binaryauthorization.v1beta1.Attestor].
   * Returns INVALID_ARGUMENT if the project does not exist.
   */
  listAttestors(
    request: ListAttestorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAttestorsResponse>>;
  /**
   * Deletes an [attestor][google.cloud.binaryauthorization.v1beta1.Attestor]. Returns NOT_FOUND if the
   * [attestor][google.cloud.binaryauthorization.v1beta1.Attestor] does not exist.
   */
  deleteAttestor(request: DeleteAttestorRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface BinauthzManagementServiceV1Beta1Client<CallOptionsExt = {}> {
  /**
   * A [policy][google.cloud.binaryauthorization.v1beta1.Policy] specifies the [attestors][google.cloud.binaryauthorization.v1beta1.Attestor] that must attest to
   * a container image, before the project is allowed to deploy that
   * image. There is at most one policy per project. All image admission
   * requests are permitted if a project has no policy.
   *
   * Gets the [policy][google.cloud.binaryauthorization.v1beta1.Policy] for this project. Returns a default
   * [policy][google.cloud.binaryauthorization.v1beta1.Policy] if the project does not have one.
   */
  getPolicy(request: DeepPartial<GetPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Creates or updates a project's [policy][google.cloud.binaryauthorization.v1beta1.Policy], and returns a copy of the
   * new [policy][google.cloud.binaryauthorization.v1beta1.Policy]. A policy is always updated as a whole, to avoid race
   * conditions with concurrent policy enforcement (or management!)
   * requests. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT
   * if the request is malformed.
   */
  updatePolicy(request: DeepPartial<UpdatePolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Creates an [attestor][google.cloud.binaryauthorization.v1beta1.Attestor], and returns a copy of the new
   * [attestor][google.cloud.binaryauthorization.v1beta1.Attestor]. Returns NOT_FOUND if the project does not exist,
   * INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the
   * [attestor][google.cloud.binaryauthorization.v1beta1.Attestor] already exists.
   */
  createAttestor(
    request: DeepPartial<CreateAttestorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Attestor>;
  /**
   * Gets an [attestor][google.cloud.binaryauthorization.v1beta1.Attestor].
   * Returns NOT_FOUND if the [attestor][google.cloud.binaryauthorization.v1beta1.Attestor] does not exist.
   */
  getAttestor(request: DeepPartial<GetAttestorRequest>, options?: CallOptions & CallOptionsExt): Promise<Attestor>;
  /**
   * Updates an [attestor][google.cloud.binaryauthorization.v1beta1.Attestor].
   * Returns NOT_FOUND if the [attestor][google.cloud.binaryauthorization.v1beta1.Attestor] does not exist.
   */
  updateAttestor(
    request: DeepPartial<UpdateAttestorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Attestor>;
  /**
   * Lists [attestors][google.cloud.binaryauthorization.v1beta1.Attestor].
   * Returns INVALID_ARGUMENT if the project does not exist.
   */
  listAttestors(
    request: DeepPartial<ListAttestorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAttestorsResponse>;
  /**
   * Deletes an [attestor][google.cloud.binaryauthorization.v1beta1.Attestor]. Returns NOT_FOUND if the
   * [attestor][google.cloud.binaryauthorization.v1beta1.Attestor] does not exist.
   */
  deleteAttestor(request: DeepPartial<DeleteAttestorRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

/** API for working with the system policy. */
export type SystemPolicyV1Beta1Definition = typeof SystemPolicyV1Beta1Definition;
export const SystemPolicyV1Beta1Definition = {
  name: "SystemPolicyV1Beta1",
  fullName: "google.cloud.binaryauthorization.v1beta1.SystemPolicyV1Beta1",
  methods: {
    /** Gets the current system policy in the specified location. */
    getSystemPolicy: {
      name: "GetSystemPolicy",
      requestType: GetSystemPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              36,
              18,
              34,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              111,
              108,
              105,
              99,
              121,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SystemPolicyV1Beta1ServiceImplementation<CallContextExt = {}> {
  /** Gets the current system policy in the specified location. */
  getSystemPolicy(request: GetSystemPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
}

export interface SystemPolicyV1Beta1Client<CallOptionsExt = {}> {
  /** Gets the current system policy in the specified location. */
  getSystemPolicy(
    request: DeepPartial<GetSystemPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Policy>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
