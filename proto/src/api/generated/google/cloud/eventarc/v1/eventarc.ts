// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/eventarc/v1/eventarc.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Channel } from "./channel.js";
import { ChannelConnection } from "./channel_connection.js";
import { Provider } from "./discovery.js";
import { GoogleChannelConfig } from "./google_channel_config.js";
import { Trigger } from "./trigger.js";

export const protobufPackage = "google.cloud.eventarc.v1";

/** The request message for the GetTrigger method. */
export interface GetTriggerRequest {
  /** Required. The name of the trigger to get. */
  name: string;
}

/** The request message for the ListTriggers method. */
export interface ListTriggersRequest {
  /** Required. The parent collection to list triggers on. */
  parent: string;
  /**
   * The maximum number of triggers to return on each page.
   *
   * Note: The service may send fewer.
   */
  pageSize: number;
  /**
   * The page token; provide the value from the `next_page_token` field in a
   * previous `ListTriggers` call to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListTriggers` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * The sorting order of the resources returned. Value should be a
   * comma-separated list of fields. The default sorting order is ascending. To
   * specify descending order for a field, append a `desc` suffix; for example:
   * `name desc, trigger_id`.
   */
  orderBy: string;
  /**
   * Filter field. Used to filter the Triggers to be listed. Possible filters
   * are described in https://google.aip.dev/160. For example, using
   * "?filter=destination:gke" would list only Triggers with a gke destination.
   */
  filter: string;
}

/** The response message for the `ListTriggers` method. */
export interface ListTriggersResponse {
  /** The requested triggers, up to the number specified in `page_size`. */
  triggers: Trigger[];
  /**
   * A page token that can be sent to `ListTriggers` to request the next page.
   * If this is empty, then there are no more pages.
   */
  nextPageToken: string;
  /** Unreachable resources, if any. */
  unreachable: string[];
}

/** The request message for the CreateTrigger method. */
export interface CreateTriggerRequest {
  /** Required. The parent collection in which to add this trigger. */
  parent: string;
  /** Required. The trigger to create. */
  trigger:
    | Trigger
    | undefined;
  /** Required. The user-provided ID to be assigned to the trigger. */
  triggerId: string;
  /**
   * Required. If set, validate the request and preview the review, but do not
   * post it.
   */
  validateOnly: boolean;
}

/** The request message for the UpdateTrigger method. */
export interface UpdateTriggerRequest {
  /** The trigger to be updated. */
  trigger:
    | Trigger
    | undefined;
  /**
   * The fields to be updated; only fields explicitly provided are updated.
   * If no field mask is provided, all provided fields in the request are
   * updated. To update all fields, provide a field mask of "*".
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * If set to true, and the trigger is not found, a new trigger will be
   * created. In this situation, `update_mask` is ignored.
   */
  allowMissing: boolean;
  /**
   * Required. If set, validate the request and preview the review, but do not
   * post it.
   */
  validateOnly: boolean;
}

/** The request message for the DeleteTrigger method. */
export interface DeleteTriggerRequest {
  /** Required. The name of the trigger to be deleted. */
  name: string;
  /**
   * If provided, the trigger will only be deleted if the etag matches the
   * current etag on the resource.
   */
  etag: string;
  /**
   * If set to true, and the trigger is not found, the request will succeed
   * but no action will be taken on the server.
   */
  allowMissing: boolean;
  /**
   * Required. If set, validate the request and preview the review, but do not
   * post it.
   */
  validateOnly: boolean;
}

/** The request message for the GetChannel method. */
export interface GetChannelRequest {
  /** Required. The name of the channel to get. */
  name: string;
}

/** The request message for the ListChannels method. */
export interface ListChannelsRequest {
  /** Required. The parent collection to list channels on. */
  parent: string;
  /**
   * The maximum number of channels to return on each page.
   *
   * Note: The service may send fewer.
   */
  pageSize: number;
  /**
   * The page token; provide the value from the `next_page_token` field in a
   * previous `ListChannels` call to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListChannels` must
   * match the call that provided the page token.
   */
  pageToken: string;
  /**
   * The sorting order of the resources returned. Value should be a
   * comma-separated list of fields. The default sorting order is ascending. To
   * specify descending order for a field, append a `desc` suffix; for example:
   * `name desc, channel_id`.
   */
  orderBy: string;
}

/** The response message for the `ListChannels` method. */
export interface ListChannelsResponse {
  /** The requested channels, up to the number specified in `page_size`. */
  channels: Channel[];
  /**
   * A page token that can be sent to `ListChannels` to request the next page.
   * If this is empty, then there are no more pages.
   */
  nextPageToken: string;
  /** Unreachable resources, if any. */
  unreachable: string[];
}

/** The request message for the CreateChannel method. */
export interface CreateChannelRequest {
  /** Required. The parent collection in which to add this channel. */
  parent: string;
  /** Required. The channel to create. */
  channel:
    | Channel
    | undefined;
  /** Required. The user-provided ID to be assigned to the channel. */
  channelId: string;
  /**
   * Required. If set, validate the request and preview the review, but do not
   * post it.
   */
  validateOnly: boolean;
}

/** The request message for the UpdateChannel method. */
export interface UpdateChannelRequest {
  /** The channel to be updated. */
  channel:
    | Channel
    | undefined;
  /**
   * The fields to be updated; only fields explicitly provided are updated.
   * If no field mask is provided, all provided fields in the request are
   * updated. To update all fields, provide a field mask of "*".
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * Required. If set, validate the request and preview the review, but do not
   * post it.
   */
  validateOnly: boolean;
}

/** The request message for the DeleteChannel method. */
export interface DeleteChannelRequest {
  /** Required. The name of the channel to be deleted. */
  name: string;
  /**
   * Required. If set, validate the request and preview the review, but do not
   * post it.
   */
  validateOnly: boolean;
}

/** The request message for the GetProvider method. */
export interface GetProviderRequest {
  /** Required. The name of the provider to get. */
  name: string;
}

/** The request message for the ListProviders method. */
export interface ListProvidersRequest {
  /** Required. The parent of the provider to get. */
  parent: string;
  /** The maximum number of providers to return on each page. */
  pageSize: number;
  /**
   * The page token; provide the value from the `next_page_token` field in a
   * previous `ListProviders` call to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListProviders` must
   * match the call that provided the page token.
   */
  pageToken: string;
  /**
   * The sorting order of the resources returned. Value should be a
   * comma-separated list of fields. The default sorting oder is ascending. To
   * specify descending order for a field, append a `desc` suffix; for example:
   * `name desc, _id`.
   */
  orderBy: string;
  /** The filter field that the list request will filter on. */
  filter: string;
}

/** The response message for the `ListProviders` method. */
export interface ListProvidersResponse {
  /** The requested providers, up to the number specified in `page_size`. */
  providers: Provider[];
  /**
   * A page token that can be sent to `ListProviders` to request the next page.
   * If this is empty, then there are no more pages.
   */
  nextPageToken: string;
  /** Unreachable resources, if any. */
  unreachable: string[];
}

/** The request message for the GetChannelConnection method. */
export interface GetChannelConnectionRequest {
  /** Required. The name of the channel connection to get. */
  name: string;
}

/** The request message for the ListChannelConnections method. */
export interface ListChannelConnectionsRequest {
  /** Required. The parent collection from which to list channel connections. */
  parent: string;
  /**
   * The maximum number of channel connections to return on each page.
   *
   * Note: The service may send fewer responses.
   */
  pageSize: number;
  /**
   * The page token; provide the value from the `next_page_token` field in a
   * previous `ListChannelConnections` call to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListChannelConnetions`
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** The response message for the `ListChannelConnections` method. */
export interface ListChannelConnectionsResponse {
  /**
   * The requested channel connections, up to the number specified in
   * `page_size`.
   */
  channelConnections: ChannelConnection[];
  /**
   * A page token that can be sent to `ListChannelConnections` to request the
   * next page.
   * If this is empty, then there are no more pages.
   */
  nextPageToken: string;
  /** Unreachable resources, if any. */
  unreachable: string[];
}

/** The request message for the CreateChannelConnection method. */
export interface CreateChannelConnectionRequest {
  /** Required. The parent collection in which to add this channel connection. */
  parent: string;
  /** Required. Channel connection to create. */
  channelConnection:
    | ChannelConnection
    | undefined;
  /** Required. The user-provided ID to be assigned to the channel connection. */
  channelConnectionId: string;
}

/** The request message for the DeleteChannelConnection method. */
export interface DeleteChannelConnectionRequest {
  /** Required. The name of the channel connection to delete. */
  name: string;
}

/** The request message for the UpdateGoogleChannelConfig method. */
export interface UpdateGoogleChannelConfigRequest {
  /** Required. The config to be updated. */
  googleChannelConfig:
    | GoogleChannelConfig
    | undefined;
  /**
   * The fields to be updated; only fields explicitly provided are updated.
   * If no field mask is provided, all provided fields in the request are
   * updated. To update all fields, provide a field mask of "*".
   */
  updateMask: string[] | undefined;
}

/** The request message for the GetGoogleChannelConfig method. */
export interface GetGoogleChannelConfigRequest {
  /** Required. The name of the config to get. */
  name: string;
}

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
   * corresponding to `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

function createBaseGetTriggerRequest(): GetTriggerRequest {
  return { name: "" };
}

export const GetTriggerRequest: MessageFns<GetTriggerRequest> = {
  encode(message: GetTriggerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTriggerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTriggerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTriggerRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTriggerRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTriggerRequest>): GetTriggerRequest {
    return GetTriggerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTriggerRequest>): GetTriggerRequest {
    const message = createBaseGetTriggerRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListTriggersRequest(): ListTriggersRequest {
  return { parent: "", pageSize: 0, pageToken: "", orderBy: "", filter: "" };
}

export const ListTriggersRequest: MessageFns<ListTriggersRequest> = {
  encode(message: ListTriggersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(34).string(message.orderBy);
    }
    if (message.filter !== "") {
      writer.uint32(42).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTriggersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTriggersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTriggersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListTriggersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTriggersRequest>): ListTriggersRequest {
    return ListTriggersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTriggersRequest>): ListTriggersRequest {
    const message = createBaseListTriggersRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListTriggersResponse(): ListTriggersResponse {
  return { triggers: [], nextPageToken: "", unreachable: [] };
}

export const ListTriggersResponse: MessageFns<ListTriggersResponse> = {
  encode(message: ListTriggersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.triggers) {
      Trigger.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTriggersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTriggersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.triggers.push(Trigger.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTriggersResponse {
    return {
      triggers: globalThis.Array.isArray(object?.triggers) ? object.triggers.map((e: any) => Trigger.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListTriggersResponse): unknown {
    const obj: any = {};
    if (message.triggers?.length) {
      obj.triggers = message.triggers.map((e) => Trigger.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTriggersResponse>): ListTriggersResponse {
    return ListTriggersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTriggersResponse>): ListTriggersResponse {
    const message = createBaseListTriggersResponse();
    message.triggers = object.triggers?.map((e) => Trigger.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateTriggerRequest(): CreateTriggerRequest {
  return { parent: "", trigger: undefined, triggerId: "", validateOnly: false };
}

export const CreateTriggerRequest: MessageFns<CreateTriggerRequest> = {
  encode(message: CreateTriggerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.trigger !== undefined) {
      Trigger.encode(message.trigger, writer.uint32(18).fork()).join();
    }
    if (message.triggerId !== "") {
      writer.uint32(26).string(message.triggerId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTriggerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTriggerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.trigger = Trigger.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.triggerId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTriggerRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      trigger: isSet(object.trigger) ? Trigger.fromJSON(object.trigger) : undefined,
      triggerId: isSet(object.triggerId) ? globalThis.String(object.triggerId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateTriggerRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.trigger !== undefined) {
      obj.trigger = Trigger.toJSON(message.trigger);
    }
    if (message.triggerId !== "") {
      obj.triggerId = message.triggerId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTriggerRequest>): CreateTriggerRequest {
    return CreateTriggerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTriggerRequest>): CreateTriggerRequest {
    const message = createBaseCreateTriggerRequest();
    message.parent = object.parent ?? "";
    message.trigger = (object.trigger !== undefined && object.trigger !== null)
      ? Trigger.fromPartial(object.trigger)
      : undefined;
    message.triggerId = object.triggerId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateTriggerRequest(): UpdateTriggerRequest {
  return { trigger: undefined, updateMask: undefined, allowMissing: false, validateOnly: false };
}

export const UpdateTriggerRequest: MessageFns<UpdateTriggerRequest> = {
  encode(message: UpdateTriggerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trigger !== undefined) {
      Trigger.encode(message.trigger, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTriggerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTriggerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.trigger = Trigger.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTriggerRequest {
    return {
      trigger: isSet(object.trigger) ? Trigger.fromJSON(object.trigger) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: UpdateTriggerRequest): unknown {
    const obj: any = {};
    if (message.trigger !== undefined) {
      obj.trigger = Trigger.toJSON(message.trigger);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTriggerRequest>): UpdateTriggerRequest {
    return UpdateTriggerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTriggerRequest>): UpdateTriggerRequest {
    const message = createBaseUpdateTriggerRequest();
    message.trigger = (object.trigger !== undefined && object.trigger !== null)
      ? Trigger.fromPartial(object.trigger)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.allowMissing = object.allowMissing ?? false;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseDeleteTriggerRequest(): DeleteTriggerRequest {
  return { name: "", etag: "", allowMissing: false, validateOnly: false };
}

export const DeleteTriggerRequest: MessageFns<DeleteTriggerRequest> = {
  encode(message: DeleteTriggerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTriggerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTriggerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTriggerRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: DeleteTriggerRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTriggerRequest>): DeleteTriggerRequest {
    return DeleteTriggerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTriggerRequest>): DeleteTriggerRequest {
    const message = createBaseDeleteTriggerRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    message.allowMissing = object.allowMissing ?? false;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseGetChannelRequest(): GetChannelRequest {
  return { name: "" };
}

export const GetChannelRequest: MessageFns<GetChannelRequest> = {
  encode(message: GetChannelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChannelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChannelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetChannelRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetChannelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetChannelRequest>): GetChannelRequest {
    return GetChannelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetChannelRequest>): GetChannelRequest {
    const message = createBaseGetChannelRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListChannelsRequest(): ListChannelsRequest {
  return { parent: "", pageSize: 0, pageToken: "", orderBy: "" };
}

export const ListChannelsRequest: MessageFns<ListChannelsRequest> = {
  encode(message: ListChannelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(34).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChannelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChannelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChannelsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListChannelsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListChannelsRequest>): ListChannelsRequest {
    return ListChannelsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChannelsRequest>): ListChannelsRequest {
    const message = createBaseListChannelsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListChannelsResponse(): ListChannelsResponse {
  return { channels: [], nextPageToken: "", unreachable: [] };
}

export const ListChannelsResponse: MessageFns<ListChannelsResponse> = {
  encode(message: ListChannelsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.channels) {
      Channel.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChannelsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChannelsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channels.push(Channel.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChannelsResponse {
    return {
      channels: globalThis.Array.isArray(object?.channels) ? object.channels.map((e: any) => Channel.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListChannelsResponse): unknown {
    const obj: any = {};
    if (message.channels?.length) {
      obj.channels = message.channels.map((e) => Channel.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListChannelsResponse>): ListChannelsResponse {
    return ListChannelsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChannelsResponse>): ListChannelsResponse {
    const message = createBaseListChannelsResponse();
    message.channels = object.channels?.map((e) => Channel.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateChannelRequest(): CreateChannelRequest {
  return { parent: "", channel: undefined, channelId: "", validateOnly: false };
}

export const CreateChannelRequest: MessageFns<CreateChannelRequest> = {
  encode(message: CreateChannelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.channel !== undefined) {
      Channel.encode(message.channel, writer.uint32(18).fork()).join();
    }
    if (message.channelId !== "") {
      writer.uint32(26).string(message.channelId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateChannelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateChannelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel = Channel.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.channelId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateChannelRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      channel: isSet(object.channel) ? Channel.fromJSON(object.channel) : undefined,
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateChannelRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.channel !== undefined) {
      obj.channel = Channel.toJSON(message.channel);
    }
    if (message.channelId !== "") {
      obj.channelId = message.channelId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateChannelRequest>): CreateChannelRequest {
    return CreateChannelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateChannelRequest>): CreateChannelRequest {
    const message = createBaseCreateChannelRequest();
    message.parent = object.parent ?? "";
    message.channel = (object.channel !== undefined && object.channel !== null)
      ? Channel.fromPartial(object.channel)
      : undefined;
    message.channelId = object.channelId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateChannelRequest(): UpdateChannelRequest {
  return { channel: undefined, updateMask: undefined, validateOnly: false };
}

export const UpdateChannelRequest: MessageFns<UpdateChannelRequest> = {
  encode(message: UpdateChannelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channel !== undefined) {
      Channel.encode(message.channel, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateChannelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateChannelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channel = Channel.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateChannelRequest {
    return {
      channel: isSet(object.channel) ? Channel.fromJSON(object.channel) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: UpdateChannelRequest): unknown {
    const obj: any = {};
    if (message.channel !== undefined) {
      obj.channel = Channel.toJSON(message.channel);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateChannelRequest>): UpdateChannelRequest {
    return UpdateChannelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateChannelRequest>): UpdateChannelRequest {
    const message = createBaseUpdateChannelRequest();
    message.channel = (object.channel !== undefined && object.channel !== null)
      ? Channel.fromPartial(object.channel)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseDeleteChannelRequest(): DeleteChannelRequest {
  return { name: "", validateOnly: false };
}

export const DeleteChannelRequest: MessageFns<DeleteChannelRequest> = {
  encode(message: DeleteChannelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteChannelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteChannelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteChannelRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: DeleteChannelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteChannelRequest>): DeleteChannelRequest {
    return DeleteChannelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteChannelRequest>): DeleteChannelRequest {
    const message = createBaseDeleteChannelRequest();
    message.name = object.name ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseGetProviderRequest(): GetProviderRequest {
  return { name: "" };
}

export const GetProviderRequest: MessageFns<GetProviderRequest> = {
  encode(message: GetProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProviderRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProviderRequest>): GetProviderRequest {
    return GetProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProviderRequest>): GetProviderRequest {
    const message = createBaseGetProviderRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListProvidersRequest(): ListProvidersRequest {
  return { parent: "", pageSize: 0, pageToken: "", orderBy: "", filter: "" };
}

export const ListProvidersRequest: MessageFns<ListProvidersRequest> = {
  encode(message: ListProvidersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(34).string(message.orderBy);
    }
    if (message.filter !== "") {
      writer.uint32(42).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProvidersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProvidersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProvidersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListProvidersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProvidersRequest>): ListProvidersRequest {
    return ListProvidersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProvidersRequest>): ListProvidersRequest {
    const message = createBaseListProvidersRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListProvidersResponse(): ListProvidersResponse {
  return { providers: [], nextPageToken: "", unreachable: [] };
}

export const ListProvidersResponse: MessageFns<ListProvidersResponse> = {
  encode(message: ListProvidersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.providers) {
      Provider.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProvidersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProvidersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.providers.push(Provider.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProvidersResponse {
    return {
      providers: globalThis.Array.isArray(object?.providers)
        ? object.providers.map((e: any) => Provider.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListProvidersResponse): unknown {
    const obj: any = {};
    if (message.providers?.length) {
      obj.providers = message.providers.map((e) => Provider.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProvidersResponse>): ListProvidersResponse {
    return ListProvidersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProvidersResponse>): ListProvidersResponse {
    const message = createBaseListProvidersResponse();
    message.providers = object.providers?.map((e) => Provider.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetChannelConnectionRequest(): GetChannelConnectionRequest {
  return { name: "" };
}

export const GetChannelConnectionRequest: MessageFns<GetChannelConnectionRequest> = {
  encode(message: GetChannelConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChannelConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChannelConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetChannelConnectionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetChannelConnectionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetChannelConnectionRequest>): GetChannelConnectionRequest {
    return GetChannelConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetChannelConnectionRequest>): GetChannelConnectionRequest {
    const message = createBaseGetChannelConnectionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListChannelConnectionsRequest(): ListChannelConnectionsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListChannelConnectionsRequest: MessageFns<ListChannelConnectionsRequest> = {
  encode(message: ListChannelConnectionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChannelConnectionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChannelConnectionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChannelConnectionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListChannelConnectionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListChannelConnectionsRequest>): ListChannelConnectionsRequest {
    return ListChannelConnectionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChannelConnectionsRequest>): ListChannelConnectionsRequest {
    const message = createBaseListChannelConnectionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListChannelConnectionsResponse(): ListChannelConnectionsResponse {
  return { channelConnections: [], nextPageToken: "", unreachable: [] };
}

export const ListChannelConnectionsResponse: MessageFns<ListChannelConnectionsResponse> = {
  encode(message: ListChannelConnectionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.channelConnections) {
      ChannelConnection.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChannelConnectionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChannelConnectionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channelConnections.push(ChannelConnection.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChannelConnectionsResponse {
    return {
      channelConnections: globalThis.Array.isArray(object?.channelConnections)
        ? object.channelConnections.map((e: any) => ChannelConnection.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListChannelConnectionsResponse): unknown {
    const obj: any = {};
    if (message.channelConnections?.length) {
      obj.channelConnections = message.channelConnections.map((e) => ChannelConnection.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListChannelConnectionsResponse>): ListChannelConnectionsResponse {
    return ListChannelConnectionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChannelConnectionsResponse>): ListChannelConnectionsResponse {
    const message = createBaseListChannelConnectionsResponse();
    message.channelConnections = object.channelConnections?.map((e) => ChannelConnection.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateChannelConnectionRequest(): CreateChannelConnectionRequest {
  return { parent: "", channelConnection: undefined, channelConnectionId: "" };
}

export const CreateChannelConnectionRequest: MessageFns<CreateChannelConnectionRequest> = {
  encode(message: CreateChannelConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.channelConnection !== undefined) {
      ChannelConnection.encode(message.channelConnection, writer.uint32(18).fork()).join();
    }
    if (message.channelConnectionId !== "") {
      writer.uint32(26).string(message.channelConnectionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateChannelConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateChannelConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channelConnection = ChannelConnection.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.channelConnectionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateChannelConnectionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      channelConnection: isSet(object.channelConnection)
        ? ChannelConnection.fromJSON(object.channelConnection)
        : undefined,
      channelConnectionId: isSet(object.channelConnectionId) ? globalThis.String(object.channelConnectionId) : "",
    };
  },

  toJSON(message: CreateChannelConnectionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.channelConnection !== undefined) {
      obj.channelConnection = ChannelConnection.toJSON(message.channelConnection);
    }
    if (message.channelConnectionId !== "") {
      obj.channelConnectionId = message.channelConnectionId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateChannelConnectionRequest>): CreateChannelConnectionRequest {
    return CreateChannelConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateChannelConnectionRequest>): CreateChannelConnectionRequest {
    const message = createBaseCreateChannelConnectionRequest();
    message.parent = object.parent ?? "";
    message.channelConnection = (object.channelConnection !== undefined && object.channelConnection !== null)
      ? ChannelConnection.fromPartial(object.channelConnection)
      : undefined;
    message.channelConnectionId = object.channelConnectionId ?? "";
    return message;
  },
};

function createBaseDeleteChannelConnectionRequest(): DeleteChannelConnectionRequest {
  return { name: "" };
}

export const DeleteChannelConnectionRequest: MessageFns<DeleteChannelConnectionRequest> = {
  encode(message: DeleteChannelConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteChannelConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteChannelConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteChannelConnectionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteChannelConnectionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteChannelConnectionRequest>): DeleteChannelConnectionRequest {
    return DeleteChannelConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteChannelConnectionRequest>): DeleteChannelConnectionRequest {
    const message = createBaseDeleteChannelConnectionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateGoogleChannelConfigRequest(): UpdateGoogleChannelConfigRequest {
  return { googleChannelConfig: undefined, updateMask: undefined };
}

export const UpdateGoogleChannelConfigRequest: MessageFns<UpdateGoogleChannelConfigRequest> = {
  encode(message: UpdateGoogleChannelConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.googleChannelConfig !== undefined) {
      GoogleChannelConfig.encode(message.googleChannelConfig, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGoogleChannelConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGoogleChannelConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.googleChannelConfig = GoogleChannelConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGoogleChannelConfigRequest {
    return {
      googleChannelConfig: isSet(object.googleChannelConfig)
        ? GoogleChannelConfig.fromJSON(object.googleChannelConfig)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateGoogleChannelConfigRequest): unknown {
    const obj: any = {};
    if (message.googleChannelConfig !== undefined) {
      obj.googleChannelConfig = GoogleChannelConfig.toJSON(message.googleChannelConfig);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGoogleChannelConfigRequest>): UpdateGoogleChannelConfigRequest {
    return UpdateGoogleChannelConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGoogleChannelConfigRequest>): UpdateGoogleChannelConfigRequest {
    const message = createBaseUpdateGoogleChannelConfigRequest();
    message.googleChannelConfig = (object.googleChannelConfig !== undefined && object.googleChannelConfig !== null)
      ? GoogleChannelConfig.fromPartial(object.googleChannelConfig)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetGoogleChannelConfigRequest(): GetGoogleChannelConfigRequest {
  return { name: "" };
}

export const GetGoogleChannelConfigRequest: MessageFns<GetGoogleChannelConfigRequest> = {
  encode(message: GetGoogleChannelConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGoogleChannelConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGoogleChannelConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGoogleChannelConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetGoogleChannelConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetGoogleChannelConfigRequest>): GetGoogleChannelConfigRequest {
    return GetGoogleChannelConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGoogleChannelConfigRequest>): GetGoogleChannelConfigRequest {
    const message = createBaseGetGoogleChannelConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

/**
 * Eventarc allows users to subscribe to various events that are provided by
 * Google Cloud services and forward them to supported destinations.
 */
export type EventarcDefinition = typeof EventarcDefinition;
export const EventarcDefinition = {
  name: "Eventarc",
  fullName: "google.cloud.eventarc.v1.Eventarc",
  methods: {
    /** Get a single trigger. */
    getTrigger: {
      name: "GetTrigger",
      requestType: GetTriggerRequest,
      requestStream: false,
      responseType: Trigger,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List triggers. */
    listTriggers: {
      name: "ListTriggers",
      requestType: ListTriggersRequest,
      requestStream: false,
      responseType: ListTriggersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Create a new trigger in a particular project and location. */
    createTrigger: {
      name: "CreateTrigger",
      requestType: CreateTriggerRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              84,
              114,
              105,
              103,
              103,
              101,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              44,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              55,
              58,
              7,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              34,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Update a single trigger. */
    updateTrigger: {
      name: "UpdateTrigger",
      requestType: UpdateTriggerRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              84,
              114,
              105,
              103,
              103,
              101,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              33,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
              44,
              97,
              108,
              108,
              111,
              119,
              95,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              7,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              50,
              52,
              47,
              118,
              49,
              47,
              123,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Delete a single trigger. */
    deleteTrigger: {
      name: "DeleteTrigger",
      requestType: DeleteTriggerRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              84,
              114,
              105,
              103,
              103,
              101,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([18, 110, 97, 109, 101, 44, 97, 108, 108, 111, 119, 95, 109, 105, 115, 115, 105, 110, 103]),
          ],
          578365826: [
            Buffer.from([
              46,
              42,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Get a single Channel. */
    getChannel: {
      name: "GetChannel",
      requestType: GetChannelRequest,
      requestStream: false,
      responseType: Channel,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List channels. */
    listChannels: {
      name: "ListChannels",
      requestType: ListChannelsRequest,
      requestStream: false,
      responseType: ListChannelsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Create a new channel in a particular project and location. */
    createChannel: {
      name: "CreateChannel",
      requestType: CreateChannelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              67,
              104,
              97,
              110,
              110,
              101,
              108,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              44,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              55,
              58,
              7,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              34,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Update a single channel. */
    updateChannel: {
      name: "UpdateChannel",
      requestType: UpdateChannelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              67,
              104,
              97,
              110,
              110,
              101,
              108,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([19, 99, 104, 97, 110, 110, 101, 108, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              7,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              50,
              52,
              47,
              118,
              49,
              47,
              123,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Delete a single channel. */
    deleteChannel: {
      name: "DeleteChannel",
      requestType: DeleteChannelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              67,
              104,
              97,
              110,
              110,
              101,
              108,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              42,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Get a single Provider. */
    getProvider: {
      name: "GetProvider",
      requestType: GetProviderRequest,
      requestStream: false,
      responseType: Provider,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List providers. */
    listProviders: {
      name: "ListProviders",
      requestType: ListProvidersRequest,
      requestStream: false,
      responseType: ListProvidersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Get a single ChannelConnection. */
    getChannelConnection: {
      name: "GetChannelConnection",
      requestType: GetChannelConnectionRequest,
      requestStream: false,
      responseType: ChannelConnection,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List channel connections. */
    listChannelConnections: {
      name: "ListChannelConnections",
      requestType: ListChannelConnectionsRequest,
      requestStream: false,
      responseType: ListChannelConnectionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Create a new ChannelConnection in a particular project and location. */
    createChannelConnection: {
      name: "CreateChannelConnection",
      requestType: CreateChannelConnectionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              17,
              67,
              104,
              97,
              110,
              110,
              101,
              108,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              47,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              44,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              76,
              58,
              18,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Delete a single ChannelConnection. */
    deleteChannelConnection: {
      name: "DeleteChannelConnection",
      requestType: DeleteChannelConnectionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              17,
              67,
              104,
              97,
              110,
              110,
              101,
              108,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              42,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Get a GoogleChannelConfig */
    getGoogleChannelConfig: {
      name: "GetGoogleChannelConfig",
      requestType: GetGoogleChannelConfigRequest,
      requestStream: false,
      responseType: GoogleChannelConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              67,
              104,
              97,
              110,
              110,
              101,
              108,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
    /** Update a single GoogleChannelConfig */
    updateGoogleChannelConfig: {
      name: "UpdateGoogleChannelConfig",
      requestType: UpdateGoogleChannelConfigRequest,
      requestStream: false,
      responseType: GoogleChannelConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              33,
              103,
              111,
              111,
              103,
              108,
              101,
              95,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              100,
              58,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              95,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              75,
              47,
              118,
              49,
              47,
              123,
              103,
              111,
              111,
              103,
              108,
              101,
              95,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              67,
              104,
              97,
              110,
              110,
              101,
              108,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface EventarcServiceImplementation<CallContextExt = {}> {
  /** Get a single trigger. */
  getTrigger(request: GetTriggerRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Trigger>>;
  /** List triggers. */
  listTriggers(
    request: ListTriggersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTriggersResponse>>;
  /** Create a new trigger in a particular project and location. */
  createTrigger(request: CreateTriggerRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Update a single trigger. */
  updateTrigger(request: UpdateTriggerRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Delete a single trigger. */
  deleteTrigger(request: DeleteTriggerRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Get a single Channel. */
  getChannel(request: GetChannelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Channel>>;
  /** List channels. */
  listChannels(
    request: ListChannelsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListChannelsResponse>>;
  /** Create a new channel in a particular project and location. */
  createChannel(request: CreateChannelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Update a single channel. */
  updateChannel(request: UpdateChannelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Delete a single channel. */
  deleteChannel(request: DeleteChannelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Get a single Provider. */
  getProvider(request: GetProviderRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Provider>>;
  /** List providers. */
  listProviders(
    request: ListProvidersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProvidersResponse>>;
  /** Get a single ChannelConnection. */
  getChannelConnection(
    request: GetChannelConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ChannelConnection>>;
  /** List channel connections. */
  listChannelConnections(
    request: ListChannelConnectionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListChannelConnectionsResponse>>;
  /** Create a new ChannelConnection in a particular project and location. */
  createChannelConnection(
    request: CreateChannelConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Delete a single ChannelConnection. */
  deleteChannelConnection(
    request: DeleteChannelConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Get a GoogleChannelConfig */
  getGoogleChannelConfig(
    request: GetGoogleChannelConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GoogleChannelConfig>>;
  /** Update a single GoogleChannelConfig */
  updateGoogleChannelConfig(
    request: UpdateGoogleChannelConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GoogleChannelConfig>>;
}

export interface EventarcClient<CallOptionsExt = {}> {
  /** Get a single trigger. */
  getTrigger(request: DeepPartial<GetTriggerRequest>, options?: CallOptions & CallOptionsExt): Promise<Trigger>;
  /** List triggers. */
  listTriggers(
    request: DeepPartial<ListTriggersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTriggersResponse>;
  /** Create a new trigger in a particular project and location. */
  createTrigger(request: DeepPartial<CreateTriggerRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Update a single trigger. */
  updateTrigger(request: DeepPartial<UpdateTriggerRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Delete a single trigger. */
  deleteTrigger(request: DeepPartial<DeleteTriggerRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Get a single Channel. */
  getChannel(request: DeepPartial<GetChannelRequest>, options?: CallOptions & CallOptionsExt): Promise<Channel>;
  /** List channels. */
  listChannels(
    request: DeepPartial<ListChannelsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListChannelsResponse>;
  /** Create a new channel in a particular project and location. */
  createChannel(request: DeepPartial<CreateChannelRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Update a single channel. */
  updateChannel(request: DeepPartial<UpdateChannelRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Delete a single channel. */
  deleteChannel(request: DeepPartial<DeleteChannelRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Get a single Provider. */
  getProvider(request: DeepPartial<GetProviderRequest>, options?: CallOptions & CallOptionsExt): Promise<Provider>;
  /** List providers. */
  listProviders(
    request: DeepPartial<ListProvidersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProvidersResponse>;
  /** Get a single ChannelConnection. */
  getChannelConnection(
    request: DeepPartial<GetChannelConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ChannelConnection>;
  /** List channel connections. */
  listChannelConnections(
    request: DeepPartial<ListChannelConnectionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListChannelConnectionsResponse>;
  /** Create a new ChannelConnection in a particular project and location. */
  createChannelConnection(
    request: DeepPartial<CreateChannelConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Delete a single ChannelConnection. */
  deleteChannelConnection(
    request: DeepPartial<DeleteChannelConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Get a GoogleChannelConfig */
  getGoogleChannelConfig(
    request: DeepPartial<GetGoogleChannelConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GoogleChannelConfig>;
  /** Update a single GoogleChannelConfig */
  updateGoogleChannelConfig(
    request: DeepPartial<UpdateGoogleChannelConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GoogleChannelConfig>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
