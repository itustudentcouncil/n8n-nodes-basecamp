// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/connectors/v1/destination_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.connectors.v1";

/** Define the Connectors target endpoint. */
export interface DestinationConfig {
  /** The key is the destination identifier that is supported by the Connector. */
  key: string;
  /** The destinations for the key. */
  destinations: Destination[];
}

export interface Destination {
  /**
   * PSC service attachments.
   * Format: projects/* /regions/* /serviceAttachments/*
   */
  serviceAttachment?:
    | string
    | undefined;
  /** For publicly routable host. */
  host?:
    | string
    | undefined;
  /** The port is the target port number that is accepted by the destination. */
  port: number;
}

function createBaseDestinationConfig(): DestinationConfig {
  return { key: "", destinations: [] };
}

export const DestinationConfig: MessageFns<DestinationConfig> = {
  encode(message: DestinationConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    for (const v of message.destinations) {
      Destination.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DestinationConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDestinationConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destinations.push(Destination.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DestinationConfig {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      destinations: globalThis.Array.isArray(object?.destinations)
        ? object.destinations.map((e: any) => Destination.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DestinationConfig): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.destinations?.length) {
      obj.destinations = message.destinations.map((e) => Destination.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DestinationConfig>): DestinationConfig {
    return DestinationConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DestinationConfig>): DestinationConfig {
    const message = createBaseDestinationConfig();
    message.key = object.key ?? "";
    message.destinations = object.destinations?.map((e) => Destination.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDestination(): Destination {
  return { serviceAttachment: undefined, host: undefined, port: 0 };
}

export const Destination: MessageFns<Destination> = {
  encode(message: Destination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceAttachment !== undefined) {
      writer.uint32(10).string(message.serviceAttachment);
    }
    if (message.host !== undefined) {
      writer.uint32(18).string(message.host);
    }
    if (message.port !== 0) {
      writer.uint32(24).int32(message.port);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Destination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDestination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceAttachment = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.host = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.port = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Destination {
    return {
      serviceAttachment: isSet(object.serviceAttachment) ? globalThis.String(object.serviceAttachment) : undefined,
      host: isSet(object.host) ? globalThis.String(object.host) : undefined,
      port: isSet(object.port) ? globalThis.Number(object.port) : 0,
    };
  },

  toJSON(message: Destination): unknown {
    const obj: any = {};
    if (message.serviceAttachment !== undefined) {
      obj.serviceAttachment = message.serviceAttachment;
    }
    if (message.host !== undefined) {
      obj.host = message.host;
    }
    if (message.port !== 0) {
      obj.port = Math.round(message.port);
    }
    return obj;
  },

  create(base?: DeepPartial<Destination>): Destination {
    return Destination.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Destination>): Destination {
    const message = createBaseDestination();
    message.serviceAttachment = object.serviceAttachment ?? undefined;
    message.host = object.host ?? undefined;
    message.port = object.port ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
