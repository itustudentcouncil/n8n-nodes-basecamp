// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/tasks/v2/task.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";
import { AppEngineHttpRequest, HttpRequest } from "./target.js";

export const protobufPackage = "google.cloud.tasks.v2";

/** A unit of scheduled work. */
export interface Task {
  /**
   * Optionally caller-specified in
   * [CreateTask][google.cloud.tasks.v2.CloudTasks.CreateTask].
   *
   * The task name.
   *
   * The task name must have the following format:
   * `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`
   *
   * * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]),
   *    hyphens (-), colons (:), or periods (.).
   *    For more information, see
   *    [Identifying
   *    projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects)
   * * `LOCATION_ID` is the canonical ID for the task's location.
   *    The list of available locations can be obtained by calling
   *    [ListLocations][google.cloud.location.Locations.ListLocations].
   *    For more information, see https://cloud.google.com/about/locations/.
   * * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or
   *   hyphens (-). The maximum length is 100 characters.
   * * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]),
   *   hyphens (-), or underscores (_). The maximum length is 500 characters.
   */
  name: string;
  /**
   * HTTP request that is sent to the App Engine app handler.
   *
   * An App Engine task is a task that has
   * [AppEngineHttpRequest][google.cloud.tasks.v2.AppEngineHttpRequest] set.
   */
  appEngineHttpRequest?:
    | AppEngineHttpRequest
    | undefined;
  /**
   * HTTP request that is sent to the worker.
   *
   * An HTTP task is a task that has
   * [HttpRequest][google.cloud.tasks.v2.HttpRequest] set.
   */
  httpRequest?:
    | HttpRequest
    | undefined;
  /**
   * The time when the task is scheduled to be attempted or retried.
   *
   * `schedule_time` will be truncated to the nearest microsecond.
   */
  scheduleTime:
    | Date
    | undefined;
  /**
   * Output only. The time that the task was created.
   *
   * `create_time` will be truncated to the nearest second.
   */
  createTime:
    | Date
    | undefined;
  /**
   * The deadline for requests sent to the worker. If the worker does not
   * respond by this deadline then the request is cancelled and the attempt
   * is marked as a `DEADLINE_EXCEEDED` failure. Cloud Tasks will retry the
   * task according to the [RetryConfig][google.cloud.tasks.v2.RetryConfig].
   *
   * Note that when the request is cancelled, Cloud Tasks will stop listening
   * for the response, but whether the worker stops processing depends on the
   * worker. For example, if the worker is stuck, it may not react to cancelled
   * requests.
   *
   * The default and maximum values depend on the type of request:
   *
   * * For [HTTP tasks][google.cloud.tasks.v2.HttpRequest], the default is 10
   * minutes. The deadline
   *   must be in the interval [15 seconds, 30 minutes].
   *
   * * For [App Engine tasks][google.cloud.tasks.v2.AppEngineHttpRequest], 0
   * indicates that the
   *   request has the default deadline. The default deadline depends on the
   *   [scaling
   *   type](https://cloud.google.com/appengine/docs/standard/go/how-instances-are-managed#instance_scaling)
   *   of the service: 10 minutes for standard apps with automatic scaling, 24
   *   hours for standard apps with manual and basic scaling, and 60 minutes for
   *   flex apps. If the request deadline is set, it must be in the interval [15
   *   seconds, 24 hours 15 seconds]. Regardless of the task's
   *   `dispatch_deadline`, the app handler will not run for longer than than
   *   the service's timeout. We recommend setting the `dispatch_deadline` to
   *   at most a few seconds more than the app handler's timeout. For more
   *   information see
   *   [Timeouts](https://cloud.google.com/tasks/docs/creating-appengine-handlers#timeouts).
   *
   * `dispatch_deadline` will be truncated to the nearest millisecond. The
   * deadline is an approximate deadline.
   */
  dispatchDeadline:
    | Duration
    | undefined;
  /**
   * Output only. The number of attempts dispatched.
   *
   * This count includes attempts which have been dispatched but haven't
   * received a response.
   */
  dispatchCount: number;
  /** Output only. The number of attempts which have received a response. */
  responseCount: number;
  /**
   * Output only. The status of the task's first attempt.
   *
   * Only [dispatch_time][google.cloud.tasks.v2.Attempt.dispatch_time] will be
   * set. The other [Attempt][google.cloud.tasks.v2.Attempt] information is not
   * retained by Cloud Tasks.
   */
  firstAttempt:
    | Attempt
    | undefined;
  /** Output only. The status of the task's last attempt. */
  lastAttempt:
    | Attempt
    | undefined;
  /**
   * Output only. The view specifies which subset of the
   * [Task][google.cloud.tasks.v2.Task] has been returned.
   */
  view: Task_View;
}

/**
 * The view specifies a subset of [Task][google.cloud.tasks.v2.Task] data.
 *
 * When a task is returned in a response, not all
 * information is retrieved by default because some data, such as
 * payloads, might be desirable to return only when needed because
 * of its large size or because of the sensitivity of data that it
 * contains.
 */
export enum Task_View {
  /** VIEW_UNSPECIFIED - Unspecified. Defaults to BASIC. */
  VIEW_UNSPECIFIED = 0,
  /**
   * BASIC - The basic view omits fields which can be large or can contain
   * sensitive data.
   *
   * This view does not include the
   * [body in
   * AppEngineHttpRequest][google.cloud.tasks.v2.AppEngineHttpRequest.body].
   * Bodies are desirable to return only when needed, because they
   * can be large and because of the sensitivity of the data that you
   * choose to store in it.
   */
  BASIC = 1,
  /**
   * FULL - All information is returned.
   *
   * Authorization for [FULL][google.cloud.tasks.v2.Task.View.FULL] requires
   * `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
   * permission on the [Queue][google.cloud.tasks.v2.Queue] resource.
   */
  FULL = 2,
  UNRECOGNIZED = -1,
}

export function task_ViewFromJSON(object: any): Task_View {
  switch (object) {
    case 0:
    case "VIEW_UNSPECIFIED":
      return Task_View.VIEW_UNSPECIFIED;
    case 1:
    case "BASIC":
      return Task_View.BASIC;
    case 2:
    case "FULL":
      return Task_View.FULL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Task_View.UNRECOGNIZED;
  }
}

export function task_ViewToJSON(object: Task_View): string {
  switch (object) {
    case Task_View.VIEW_UNSPECIFIED:
      return "VIEW_UNSPECIFIED";
    case Task_View.BASIC:
      return "BASIC";
    case Task_View.FULL:
      return "FULL";
    case Task_View.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The status of a task attempt. */
export interface Attempt {
  /**
   * Output only. The time that this attempt was scheduled.
   *
   * `schedule_time` will be truncated to the nearest microsecond.
   */
  scheduleTime:
    | Date
    | undefined;
  /**
   * Output only. The time that this attempt was dispatched.
   *
   * `dispatch_time` will be truncated to the nearest microsecond.
   */
  dispatchTime:
    | Date
    | undefined;
  /**
   * Output only. The time that this attempt response was received.
   *
   * `response_time` will be truncated to the nearest microsecond.
   */
  responseTime:
    | Date
    | undefined;
  /**
   * Output only. The response from the worker for this attempt.
   *
   * If `response_time` is unset, then the task has not been attempted or is
   * currently running and the `response_status` field is meaningless.
   */
  responseStatus: Status | undefined;
}

function createBaseTask(): Task {
  return {
    name: "",
    appEngineHttpRequest: undefined,
    httpRequest: undefined,
    scheduleTime: undefined,
    createTime: undefined,
    dispatchDeadline: undefined,
    dispatchCount: 0,
    responseCount: 0,
    firstAttempt: undefined,
    lastAttempt: undefined,
    view: 0,
  };
}

export const Task: MessageFns<Task> = {
  encode(message: Task, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.appEngineHttpRequest !== undefined) {
      AppEngineHttpRequest.encode(message.appEngineHttpRequest, writer.uint32(18).fork()).join();
    }
    if (message.httpRequest !== undefined) {
      HttpRequest.encode(message.httpRequest, writer.uint32(26).fork()).join();
    }
    if (message.scheduleTime !== undefined) {
      Timestamp.encode(toTimestamp(message.scheduleTime), writer.uint32(34).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.dispatchDeadline !== undefined) {
      Duration.encode(message.dispatchDeadline, writer.uint32(50).fork()).join();
    }
    if (message.dispatchCount !== 0) {
      writer.uint32(56).int32(message.dispatchCount);
    }
    if (message.responseCount !== 0) {
      writer.uint32(64).int32(message.responseCount);
    }
    if (message.firstAttempt !== undefined) {
      Attempt.encode(message.firstAttempt, writer.uint32(74).fork()).join();
    }
    if (message.lastAttempt !== undefined) {
      Attempt.encode(message.lastAttempt, writer.uint32(82).fork()).join();
    }
    if (message.view !== 0) {
      writer.uint32(88).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Task {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appEngineHttpRequest = AppEngineHttpRequest.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.httpRequest = HttpRequest.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scheduleTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.dispatchDeadline = Duration.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.dispatchCount = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.responseCount = reader.int32();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.firstAttempt = Attempt.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.lastAttempt = Attempt.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Task {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      appEngineHttpRequest: isSet(object.appEngineHttpRequest)
        ? AppEngineHttpRequest.fromJSON(object.appEngineHttpRequest)
        : undefined,
      httpRequest: isSet(object.httpRequest) ? HttpRequest.fromJSON(object.httpRequest) : undefined,
      scheduleTime: isSet(object.scheduleTime) ? fromJsonTimestamp(object.scheduleTime) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      dispatchDeadline: isSet(object.dispatchDeadline) ? Duration.fromJSON(object.dispatchDeadline) : undefined,
      dispatchCount: isSet(object.dispatchCount) ? globalThis.Number(object.dispatchCount) : 0,
      responseCount: isSet(object.responseCount) ? globalThis.Number(object.responseCount) : 0,
      firstAttempt: isSet(object.firstAttempt) ? Attempt.fromJSON(object.firstAttempt) : undefined,
      lastAttempt: isSet(object.lastAttempt) ? Attempt.fromJSON(object.lastAttempt) : undefined,
      view: isSet(object.view) ? task_ViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: Task): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.appEngineHttpRequest !== undefined) {
      obj.appEngineHttpRequest = AppEngineHttpRequest.toJSON(message.appEngineHttpRequest);
    }
    if (message.httpRequest !== undefined) {
      obj.httpRequest = HttpRequest.toJSON(message.httpRequest);
    }
    if (message.scheduleTime !== undefined) {
      obj.scheduleTime = message.scheduleTime.toISOString();
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.dispatchDeadline !== undefined) {
      obj.dispatchDeadline = Duration.toJSON(message.dispatchDeadline);
    }
    if (message.dispatchCount !== 0) {
      obj.dispatchCount = Math.round(message.dispatchCount);
    }
    if (message.responseCount !== 0) {
      obj.responseCount = Math.round(message.responseCount);
    }
    if (message.firstAttempt !== undefined) {
      obj.firstAttempt = Attempt.toJSON(message.firstAttempt);
    }
    if (message.lastAttempt !== undefined) {
      obj.lastAttempt = Attempt.toJSON(message.lastAttempt);
    }
    if (message.view !== 0) {
      obj.view = task_ViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<Task>): Task {
    return Task.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Task>): Task {
    const message = createBaseTask();
    message.name = object.name ?? "";
    message.appEngineHttpRequest = (object.appEngineHttpRequest !== undefined && object.appEngineHttpRequest !== null)
      ? AppEngineHttpRequest.fromPartial(object.appEngineHttpRequest)
      : undefined;
    message.httpRequest = (object.httpRequest !== undefined && object.httpRequest !== null)
      ? HttpRequest.fromPartial(object.httpRequest)
      : undefined;
    message.scheduleTime = object.scheduleTime ?? undefined;
    message.createTime = object.createTime ?? undefined;
    message.dispatchDeadline = (object.dispatchDeadline !== undefined && object.dispatchDeadline !== null)
      ? Duration.fromPartial(object.dispatchDeadline)
      : undefined;
    message.dispatchCount = object.dispatchCount ?? 0;
    message.responseCount = object.responseCount ?? 0;
    message.firstAttempt = (object.firstAttempt !== undefined && object.firstAttempt !== null)
      ? Attempt.fromPartial(object.firstAttempt)
      : undefined;
    message.lastAttempt = (object.lastAttempt !== undefined && object.lastAttempt !== null)
      ? Attempt.fromPartial(object.lastAttempt)
      : undefined;
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseAttempt(): Attempt {
  return { scheduleTime: undefined, dispatchTime: undefined, responseTime: undefined, responseStatus: undefined };
}

export const Attempt: MessageFns<Attempt> = {
  encode(message: Attempt, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scheduleTime !== undefined) {
      Timestamp.encode(toTimestamp(message.scheduleTime), writer.uint32(10).fork()).join();
    }
    if (message.dispatchTime !== undefined) {
      Timestamp.encode(toTimestamp(message.dispatchTime), writer.uint32(18).fork()).join();
    }
    if (message.responseTime !== undefined) {
      Timestamp.encode(toTimestamp(message.responseTime), writer.uint32(26).fork()).join();
    }
    if (message.responseStatus !== undefined) {
      Status.encode(message.responseStatus, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Attempt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttempt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.scheduleTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dispatchTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.responseTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.responseStatus = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Attempt {
    return {
      scheduleTime: isSet(object.scheduleTime) ? fromJsonTimestamp(object.scheduleTime) : undefined,
      dispatchTime: isSet(object.dispatchTime) ? fromJsonTimestamp(object.dispatchTime) : undefined,
      responseTime: isSet(object.responseTime) ? fromJsonTimestamp(object.responseTime) : undefined,
      responseStatus: isSet(object.responseStatus) ? Status.fromJSON(object.responseStatus) : undefined,
    };
  },

  toJSON(message: Attempt): unknown {
    const obj: any = {};
    if (message.scheduleTime !== undefined) {
      obj.scheduleTime = message.scheduleTime.toISOString();
    }
    if (message.dispatchTime !== undefined) {
      obj.dispatchTime = message.dispatchTime.toISOString();
    }
    if (message.responseTime !== undefined) {
      obj.responseTime = message.responseTime.toISOString();
    }
    if (message.responseStatus !== undefined) {
      obj.responseStatus = Status.toJSON(message.responseStatus);
    }
    return obj;
  },

  create(base?: DeepPartial<Attempt>): Attempt {
    return Attempt.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Attempt>): Attempt {
    const message = createBaseAttempt();
    message.scheduleTime = object.scheduleTime ?? undefined;
    message.dispatchTime = object.dispatchTime ?? undefined;
    message.responseTime = object.responseTime ?? undefined;
    message.responseStatus = (object.responseStatus !== undefined && object.responseStatus !== null)
      ? Status.fromPartial(object.responseStatus)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
