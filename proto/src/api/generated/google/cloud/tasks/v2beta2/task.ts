// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/tasks/v2beta2/task.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";
import { AppEngineHttpRequest, HttpRequest, PullMessage } from "./target.js";

export const protobufPackage = "google.cloud.tasks.v2beta2";

/** A unit of scheduled work. */
export interface Task {
  /**
   * Optionally caller-specified in
   * [CreateTask][google.cloud.tasks.v2beta2.CloudTasks.CreateTask].
   *
   * The task name.
   *
   * The task name must have the following format:
   * `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`
   *
   * * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]),
   *    hyphens (-), colons (:), or periods (.).
   *    For more information, see
   *    [Identifying
   *    projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects)
   * * `LOCATION_ID` is the canonical ID for the task's location.
   *    The list of available locations can be obtained by calling
   *    [ListLocations][google.cloud.location.Locations.ListLocations].
   *    For more information, see https://cloud.google.com/about/locations/.
   * * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or
   *   hyphens (-). The maximum length is 100 characters.
   * * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]),
   *   hyphens (-), or underscores (_). The maximum length is 500 characters.
   */
  name: string;
  /**
   * App Engine HTTP request that is sent to the task's target. Can
   * be set only if
   * [app_engine_http_target][google.cloud.tasks.v2beta2.Queue.app_engine_http_target]
   * is set on the queue.
   *
   * An App Engine task is a task that has
   * [AppEngineHttpRequest][google.cloud.tasks.v2beta2.AppEngineHttpRequest]
   * set.
   */
  appEngineHttpRequest?:
    | AppEngineHttpRequest
    | undefined;
  /**
   * [LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks] to process
   * the task. Can be set only if
   * [pull_target][google.cloud.tasks.v2beta2.Queue.pull_target] is set on the
   * queue.
   *
   * A pull task is a task that has
   * [PullMessage][google.cloud.tasks.v2beta2.PullMessage] set.
   */
  pullMessage?:
    | PullMessage
    | undefined;
  /**
   * HTTP request that is sent to the task's target.
   *
   * An HTTP task is a task that has
   * [HttpRequest][google.cloud.tasks.v2beta2.HttpRequest] set.
   */
  httpRequest?:
    | HttpRequest
    | undefined;
  /**
   * The time when the task is scheduled to be attempted.
   *
   * For App Engine queues, this is when the task will be attempted or retried.
   *
   * For pull queues, this is the time when the task is available to
   * be leased; if a task is currently leased, this is the time when
   * the current lease expires, that is, the time that the task was
   * leased plus the
   * [lease_duration][google.cloud.tasks.v2beta2.LeaseTasksRequest.lease_duration].
   *
   * `schedule_time` will be truncated to the nearest microsecond.
   */
  scheduleTime:
    | Date
    | undefined;
  /**
   * Output only. The time that the task was created.
   *
   * `create_time` will be truncated to the nearest second.
   */
  createTime:
    | Date
    | undefined;
  /** Output only. The task status. */
  status:
    | TaskStatus
    | undefined;
  /**
   * Output only. The view specifies which subset of the
   * [Task][google.cloud.tasks.v2beta2.Task] has been returned.
   */
  view: Task_View;
}

/**
 * The view specifies a subset of [Task][google.cloud.tasks.v2beta2.Task]
 * data.
 *
 * When a task is returned in a response, not all
 * information is retrieved by default because some data, such as
 * payloads, might be desirable to return only when needed because
 * of its large size or because of the sensitivity of data that it
 * contains.
 */
export enum Task_View {
  /** VIEW_UNSPECIFIED - Unspecified. Defaults to BASIC. */
  VIEW_UNSPECIFIED = 0,
  /**
   * BASIC - The basic view omits fields which can be large or can contain
   * sensitive data.
   *
   * This view does not include the
   * ([payload in
   * AppEngineHttpRequest][google.cloud.tasks.v2beta2.AppEngineHttpRequest]
   * and [payload in
   * PullMessage][google.cloud.tasks.v2beta2.PullMessage.payload]). These
   * payloads are desirable to return only when needed, because they can be
   * large and because of the sensitivity of the data that you choose to store
   * in it.
   */
  BASIC = 1,
  /**
   * FULL - All information is returned.
   *
   * Authorization for [FULL][google.cloud.tasks.v2beta2.Task.View.FULL]
   * requires `cloudtasks.tasks.fullView` [Google
   * IAM](https://cloud.google.com/iam/) permission on the
   * [Queue][google.cloud.tasks.v2beta2.Queue] resource.
   */
  FULL = 2,
  UNRECOGNIZED = -1,
}

export function task_ViewFromJSON(object: any): Task_View {
  switch (object) {
    case 0:
    case "VIEW_UNSPECIFIED":
      return Task_View.VIEW_UNSPECIFIED;
    case 1:
    case "BASIC":
      return Task_View.BASIC;
    case 2:
    case "FULL":
      return Task_View.FULL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Task_View.UNRECOGNIZED;
  }
}

export function task_ViewToJSON(object: Task_View): string {
  switch (object) {
    case Task_View.VIEW_UNSPECIFIED:
      return "VIEW_UNSPECIFIED";
    case Task_View.BASIC:
      return "BASIC";
    case Task_View.FULL:
      return "FULL";
    case Task_View.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Status of the task. */
export interface TaskStatus {
  /**
   * Output only. The number of attempts dispatched.
   *
   * This count includes attempts which have been dispatched but haven't
   * received a response.
   */
  attemptDispatchCount: number;
  /**
   * Output only. The number of attempts which have received a response.
   *
   * This field is not calculated for [pull
   * tasks][google.cloud.tasks.v2beta2.PullMessage].
   */
  attemptResponseCount: number;
  /**
   * Output only. The status of the task's first attempt.
   *
   * Only
   * [dispatch_time][google.cloud.tasks.v2beta2.AttemptStatus.dispatch_time]
   * will be set. The other
   * [AttemptStatus][google.cloud.tasks.v2beta2.AttemptStatus] information is
   * not retained by Cloud Tasks.
   *
   * This field is not calculated for [pull
   * tasks][google.cloud.tasks.v2beta2.PullMessage].
   */
  firstAttemptStatus:
    | AttemptStatus
    | undefined;
  /**
   * Output only. The status of the task's last attempt.
   *
   * This field is not calculated for [pull
   * tasks][google.cloud.tasks.v2beta2.PullMessage].
   */
  lastAttemptStatus: AttemptStatus | undefined;
}

/** The status of a task attempt. */
export interface AttemptStatus {
  /**
   * Output only. The time that this attempt was scheduled.
   *
   * `schedule_time` will be truncated to the nearest microsecond.
   */
  scheduleTime:
    | Date
    | undefined;
  /**
   * Output only. The time that this attempt was dispatched.
   *
   * `dispatch_time` will be truncated to the nearest microsecond.
   */
  dispatchTime:
    | Date
    | undefined;
  /**
   * Output only. The time that this attempt response was received.
   *
   * `response_time` will be truncated to the nearest microsecond.
   */
  responseTime:
    | Date
    | undefined;
  /**
   * Output only. The response from the target for this attempt.
   *
   * If the task has not been attempted or the task is currently running
   * then the response status is unset.
   */
  responseStatus: Status | undefined;
}

function createBaseTask(): Task {
  return {
    name: "",
    appEngineHttpRequest: undefined,
    pullMessage: undefined,
    httpRequest: undefined,
    scheduleTime: undefined,
    createTime: undefined,
    status: undefined,
    view: 0,
  };
}

export const Task: MessageFns<Task> = {
  encode(message: Task, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.appEngineHttpRequest !== undefined) {
      AppEngineHttpRequest.encode(message.appEngineHttpRequest, writer.uint32(26).fork()).join();
    }
    if (message.pullMessage !== undefined) {
      PullMessage.encode(message.pullMessage, writer.uint32(34).fork()).join();
    }
    if (message.httpRequest !== undefined) {
      HttpRequest.encode(message.httpRequest, writer.uint32(106).fork()).join();
    }
    if (message.scheduleTime !== undefined) {
      Timestamp.encode(toTimestamp(message.scheduleTime), writer.uint32(42).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.status !== undefined) {
      TaskStatus.encode(message.status, writer.uint32(58).fork()).join();
    }
    if (message.view !== 0) {
      writer.uint32(64).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Task {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.appEngineHttpRequest = AppEngineHttpRequest.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pullMessage = PullMessage.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.httpRequest = HttpRequest.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scheduleTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.status = TaskStatus.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Task {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      appEngineHttpRequest: isSet(object.appEngineHttpRequest)
        ? AppEngineHttpRequest.fromJSON(object.appEngineHttpRequest)
        : undefined,
      pullMessage: isSet(object.pullMessage) ? PullMessage.fromJSON(object.pullMessage) : undefined,
      httpRequest: isSet(object.httpRequest) ? HttpRequest.fromJSON(object.httpRequest) : undefined,
      scheduleTime: isSet(object.scheduleTime) ? fromJsonTimestamp(object.scheduleTime) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      status: isSet(object.status) ? TaskStatus.fromJSON(object.status) : undefined,
      view: isSet(object.view) ? task_ViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: Task): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.appEngineHttpRequest !== undefined) {
      obj.appEngineHttpRequest = AppEngineHttpRequest.toJSON(message.appEngineHttpRequest);
    }
    if (message.pullMessage !== undefined) {
      obj.pullMessage = PullMessage.toJSON(message.pullMessage);
    }
    if (message.httpRequest !== undefined) {
      obj.httpRequest = HttpRequest.toJSON(message.httpRequest);
    }
    if (message.scheduleTime !== undefined) {
      obj.scheduleTime = message.scheduleTime.toISOString();
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.status !== undefined) {
      obj.status = TaskStatus.toJSON(message.status);
    }
    if (message.view !== 0) {
      obj.view = task_ViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<Task>): Task {
    return Task.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Task>): Task {
    const message = createBaseTask();
    message.name = object.name ?? "";
    message.appEngineHttpRequest = (object.appEngineHttpRequest !== undefined && object.appEngineHttpRequest !== null)
      ? AppEngineHttpRequest.fromPartial(object.appEngineHttpRequest)
      : undefined;
    message.pullMessage = (object.pullMessage !== undefined && object.pullMessage !== null)
      ? PullMessage.fromPartial(object.pullMessage)
      : undefined;
    message.httpRequest = (object.httpRequest !== undefined && object.httpRequest !== null)
      ? HttpRequest.fromPartial(object.httpRequest)
      : undefined;
    message.scheduleTime = object.scheduleTime ?? undefined;
    message.createTime = object.createTime ?? undefined;
    message.status = (object.status !== undefined && object.status !== null)
      ? TaskStatus.fromPartial(object.status)
      : undefined;
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseTaskStatus(): TaskStatus {
  return {
    attemptDispatchCount: 0,
    attemptResponseCount: 0,
    firstAttemptStatus: undefined,
    lastAttemptStatus: undefined,
  };
}

export const TaskStatus: MessageFns<TaskStatus> = {
  encode(message: TaskStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attemptDispatchCount !== 0) {
      writer.uint32(8).int32(message.attemptDispatchCount);
    }
    if (message.attemptResponseCount !== 0) {
      writer.uint32(16).int32(message.attemptResponseCount);
    }
    if (message.firstAttemptStatus !== undefined) {
      AttemptStatus.encode(message.firstAttemptStatus, writer.uint32(26).fork()).join();
    }
    if (message.lastAttemptStatus !== undefined) {
      AttemptStatus.encode(message.lastAttemptStatus, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.attemptDispatchCount = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.attemptResponseCount = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.firstAttemptStatus = AttemptStatus.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.lastAttemptStatus = AttemptStatus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskStatus {
    return {
      attemptDispatchCount: isSet(object.attemptDispatchCount) ? globalThis.Number(object.attemptDispatchCount) : 0,
      attemptResponseCount: isSet(object.attemptResponseCount) ? globalThis.Number(object.attemptResponseCount) : 0,
      firstAttemptStatus: isSet(object.firstAttemptStatus)
        ? AttemptStatus.fromJSON(object.firstAttemptStatus)
        : undefined,
      lastAttemptStatus: isSet(object.lastAttemptStatus) ? AttemptStatus.fromJSON(object.lastAttemptStatus) : undefined,
    };
  },

  toJSON(message: TaskStatus): unknown {
    const obj: any = {};
    if (message.attemptDispatchCount !== 0) {
      obj.attemptDispatchCount = Math.round(message.attemptDispatchCount);
    }
    if (message.attemptResponseCount !== 0) {
      obj.attemptResponseCount = Math.round(message.attemptResponseCount);
    }
    if (message.firstAttemptStatus !== undefined) {
      obj.firstAttemptStatus = AttemptStatus.toJSON(message.firstAttemptStatus);
    }
    if (message.lastAttemptStatus !== undefined) {
      obj.lastAttemptStatus = AttemptStatus.toJSON(message.lastAttemptStatus);
    }
    return obj;
  },

  create(base?: DeepPartial<TaskStatus>): TaskStatus {
    return TaskStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TaskStatus>): TaskStatus {
    const message = createBaseTaskStatus();
    message.attemptDispatchCount = object.attemptDispatchCount ?? 0;
    message.attemptResponseCount = object.attemptResponseCount ?? 0;
    message.firstAttemptStatus = (object.firstAttemptStatus !== undefined && object.firstAttemptStatus !== null)
      ? AttemptStatus.fromPartial(object.firstAttemptStatus)
      : undefined;
    message.lastAttemptStatus = (object.lastAttemptStatus !== undefined && object.lastAttemptStatus !== null)
      ? AttemptStatus.fromPartial(object.lastAttemptStatus)
      : undefined;
    return message;
  },
};

function createBaseAttemptStatus(): AttemptStatus {
  return { scheduleTime: undefined, dispatchTime: undefined, responseTime: undefined, responseStatus: undefined };
}

export const AttemptStatus: MessageFns<AttemptStatus> = {
  encode(message: AttemptStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scheduleTime !== undefined) {
      Timestamp.encode(toTimestamp(message.scheduleTime), writer.uint32(10).fork()).join();
    }
    if (message.dispatchTime !== undefined) {
      Timestamp.encode(toTimestamp(message.dispatchTime), writer.uint32(18).fork()).join();
    }
    if (message.responseTime !== undefined) {
      Timestamp.encode(toTimestamp(message.responseTime), writer.uint32(26).fork()).join();
    }
    if (message.responseStatus !== undefined) {
      Status.encode(message.responseStatus, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttemptStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttemptStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.scheduleTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dispatchTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.responseTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.responseStatus = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttemptStatus {
    return {
      scheduleTime: isSet(object.scheduleTime) ? fromJsonTimestamp(object.scheduleTime) : undefined,
      dispatchTime: isSet(object.dispatchTime) ? fromJsonTimestamp(object.dispatchTime) : undefined,
      responseTime: isSet(object.responseTime) ? fromJsonTimestamp(object.responseTime) : undefined,
      responseStatus: isSet(object.responseStatus) ? Status.fromJSON(object.responseStatus) : undefined,
    };
  },

  toJSON(message: AttemptStatus): unknown {
    const obj: any = {};
    if (message.scheduleTime !== undefined) {
      obj.scheduleTime = message.scheduleTime.toISOString();
    }
    if (message.dispatchTime !== undefined) {
      obj.dispatchTime = message.dispatchTime.toISOString();
    }
    if (message.responseTime !== undefined) {
      obj.responseTime = message.responseTime.toISOString();
    }
    if (message.responseStatus !== undefined) {
      obj.responseStatus = Status.toJSON(message.responseStatus);
    }
    return obj;
  },

  create(base?: DeepPartial<AttemptStatus>): AttemptStatus {
    return AttemptStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttemptStatus>): AttemptStatus {
    const message = createBaseAttemptStatus();
    message.scheduleTime = object.scheduleTime ?? undefined;
    message.dispatchTime = object.dispatchTime ?? undefined;
    message.responseTime = object.responseTime ?? undefined;
    message.responseStatus = (object.responseStatus !== undefined && object.responseStatus !== null)
      ? Status.fromPartial(object.responseStatus)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
