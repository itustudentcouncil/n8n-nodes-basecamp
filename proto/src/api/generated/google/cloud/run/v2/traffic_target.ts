// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/run/v2/traffic_target.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.run.v2";

/** The type of instance allocation. */
export enum TrafficTargetAllocationType {
  /** TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED - Unspecified instance allocation type. */
  TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED = 0,
  /** TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST - Allocates instances to the Service's latest ready Revision. */
  TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST = 1,
  /** TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION - Allocates instances to a Revision by name. */
  TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION = 2,
  UNRECOGNIZED = -1,
}

export function trafficTargetAllocationTypeFromJSON(object: any): TrafficTargetAllocationType {
  switch (object) {
    case 0:
    case "TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED":
      return TrafficTargetAllocationType.TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED;
    case 1:
    case "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST":
      return TrafficTargetAllocationType.TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST;
    case 2:
    case "TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION":
      return TrafficTargetAllocationType.TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TrafficTargetAllocationType.UNRECOGNIZED;
  }
}

export function trafficTargetAllocationTypeToJSON(object: TrafficTargetAllocationType): string {
  switch (object) {
    case TrafficTargetAllocationType.TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED:
      return "TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED";
    case TrafficTargetAllocationType.TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST:
      return "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST";
    case TrafficTargetAllocationType.TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION:
      return "TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION";
    case TrafficTargetAllocationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Holds a single traffic routing entry for the Service. Allocations can be done
 * to a specific Revision name, or pointing to the latest Ready Revision.
 */
export interface TrafficTarget {
  /** The allocation type for this traffic target. */
  type: TrafficTargetAllocationType;
  /**
   * Revision to which to send this portion of traffic, if traffic allocation is
   * by revision.
   */
  revision: string;
  /**
   * Specifies percent of the traffic to this Revision.
   * This defaults to zero if unspecified.
   */
  percent: number;
  /**
   * Indicates a string to be part of the URI to exclusively reference this
   * target.
   */
  tag: string;
}

/** Represents the observed state of a single `TrafficTarget` entry. */
export interface TrafficTargetStatus {
  /** The allocation type for this traffic target. */
  type: TrafficTargetAllocationType;
  /** Revision to which this traffic is sent. */
  revision: string;
  /** Specifies percent of the traffic to this Revision. */
  percent: number;
  /** Indicates the string used in the URI to exclusively reference this target. */
  tag: string;
  /** Displays the target URI. */
  uri: string;
}

function createBaseTrafficTarget(): TrafficTarget {
  return { type: 0, revision: "", percent: 0, tag: "" };
}

export const TrafficTarget: MessageFns<TrafficTarget> = {
  encode(message: TrafficTarget, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.revision !== "") {
      writer.uint32(18).string(message.revision);
    }
    if (message.percent !== 0) {
      writer.uint32(24).int32(message.percent);
    }
    if (message.tag !== "") {
      writer.uint32(34).string(message.tag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrafficTarget {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrafficTarget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.revision = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.percent = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrafficTarget {
    return {
      type: isSet(object.type) ? trafficTargetAllocationTypeFromJSON(object.type) : 0,
      revision: isSet(object.revision) ? globalThis.String(object.revision) : "",
      percent: isSet(object.percent) ? globalThis.Number(object.percent) : 0,
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
    };
  },

  toJSON(message: TrafficTarget): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = trafficTargetAllocationTypeToJSON(message.type);
    }
    if (message.revision !== "") {
      obj.revision = message.revision;
    }
    if (message.percent !== 0) {
      obj.percent = Math.round(message.percent);
    }
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    return obj;
  },

  create(base?: DeepPartial<TrafficTarget>): TrafficTarget {
    return TrafficTarget.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrafficTarget>): TrafficTarget {
    const message = createBaseTrafficTarget();
    message.type = object.type ?? 0;
    message.revision = object.revision ?? "";
    message.percent = object.percent ?? 0;
    message.tag = object.tag ?? "";
    return message;
  },
};

function createBaseTrafficTargetStatus(): TrafficTargetStatus {
  return { type: 0, revision: "", percent: 0, tag: "", uri: "" };
}

export const TrafficTargetStatus: MessageFns<TrafficTargetStatus> = {
  encode(message: TrafficTargetStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.revision !== "") {
      writer.uint32(18).string(message.revision);
    }
    if (message.percent !== 0) {
      writer.uint32(24).int32(message.percent);
    }
    if (message.tag !== "") {
      writer.uint32(34).string(message.tag);
    }
    if (message.uri !== "") {
      writer.uint32(42).string(message.uri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrafficTargetStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrafficTargetStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.revision = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.percent = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tag = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.uri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrafficTargetStatus {
    return {
      type: isSet(object.type) ? trafficTargetAllocationTypeFromJSON(object.type) : 0,
      revision: isSet(object.revision) ? globalThis.String(object.revision) : "",
      percent: isSet(object.percent) ? globalThis.Number(object.percent) : 0,
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
    };
  },

  toJSON(message: TrafficTargetStatus): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = trafficTargetAllocationTypeToJSON(message.type);
    }
    if (message.revision !== "") {
      obj.revision = message.revision;
    }
    if (message.percent !== 0) {
      obj.percent = Math.round(message.percent);
    }
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },

  create(base?: DeepPartial<TrafficTargetStatus>): TrafficTargetStatus {
    return TrafficTargetStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrafficTargetStatus>): TrafficTargetStatus {
    const message = createBaseTrafficTargetStatus();
    message.type = object.type ?? 0;
    message.revision = object.revision ?? "";
    message.percent = object.percent ?? 0;
    message.tag = object.tag ?? "";
    message.uri = object.uri ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
